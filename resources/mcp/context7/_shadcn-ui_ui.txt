"shadcn","TITLE: Serve shadcn-ui registry with development server
DESCRIPTION: This command starts the development server for your project, typically a Next.js application. Once running, the generated registry JSON files become accessible via HTTP, for example, at `http://localhost:3000/r/[NAME].json`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Create a Basic React Component for Registry Inclusion
DESCRIPTION: Provides a simple React component example (`HelloWorld`) utilizing a Shadcn UI Button. This component serves as a template for items to be added to the component registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export function HelloWorld() {
  return <Button>Hello World</Button>
}
```

----------------------------------------

TITLE: Serve Local Registry for Development
DESCRIPTION: Command to start the development server, typically for a Next.js application. This makes the generated registry JSON files accessible locally, allowing for testing and development of the component registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Create a basic React component for shadcn-ui registry
DESCRIPTION: This example demonstrates a simple React component using a shadcn-ui Button. It illustrates how to define a component that can be included in the registry, typically placed within a structured directory like `registry/new-york/hello-world/hello-world.tsx`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export function HelloWorld() {
  return <Button>Hello World</Button>
}
```

----------------------------------------

TITLE: Configure package.json for Registry Build Script
DESCRIPTION: Demonstrates adding a custom `registry:build` script to the `scripts` section of `package.json`. This script invokes the `shadcn build` command, automating the registry generation process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""scripts"": {
    ""registry:build"": ""shadcn build""
  }
}
```

----------------------------------------

TITLE: Register a Component Definition in registry.json
DESCRIPTION: Illustrates how to add a component's metadata and file path to the `items` array within `registry.json`. This step links the physical component file to its registry entry, specifying its name, type, title, description, and file location.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry.json"",
  ""name"": ""acme"",
  ""homepage"": ""https://acme.com"",
  ""items"": [
    {
      ""name"": ""hello-world"",
      ""type"": ""registry:block"",
      ""title"": ""Hello World"",
      ""description"": ""A simple hello world component."",
      ""files"": [
        {
          ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
          ""type"": ""registry:component""
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Initialize registry.json for Shadcn UI Component Registry
DESCRIPTION: Defines the foundational `registry.json` file structure, including schema, registry name, homepage, and an empty `items` array. This file is essential for the `shadcn` CLI to manage and build the component registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry.json"",
  ""name"": ""acme"",
  ""homepage"": ""https://acme.com"",
  ""items"": [
    // ...
  ]
}
```

----------------------------------------

TITLE: Initialize registry.json for shadcn-ui component registry
DESCRIPTION: This JSON configuration file defines the schema, name, homepage, and an empty items array for a shadcn-ui component registry. It is a foundational step required when using the `shadcn` CLI to build your registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry.json"",
  ""name"": ""acme"",
  ""homepage"": ""https://acme.com"",
  ""items"": [
    // ...
  ]
}
```

----------------------------------------

TITLE: Complete registry.json Example Structure
DESCRIPTION: Demonstrates the full structure of a `registry.json` file, including the schema reference, registry metadata (name, homepage), and an example of a component item within the `items` array.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-json.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry.json"",
  ""name"": ""shadcn"",
  ""homepage"": ""https://ui.shadcn.com"",
  ""items"": [
    {
      ""name"": ""hello-world"",
      ""type"": ""registry:block"",
      ""title"": ""Hello World"",
      ""description"": ""A simple hello world component."",
      ""files"": [
        {
          ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
          ""type"": ""registry:component""
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Add a component definition to registry.json
DESCRIPTION: This `registry.json` snippet shows how to define a component item within the registry's `items` array. It includes the component's name, type, title, description, and the relative path to its source file, conforming to the registry item schema.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry.json"",
  ""name"": ""acme"",
  ""homepage"": ""https://acme.com"",
  ""items"": [
    {
      ""name"": ""hello-world"",
      ""type"": ""registry:block"",
      ""title"": ""Hello World"",
      ""description"": ""A simple hello world component."",
      ""files"": [
        {
          ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
          ""type"": ""registry:component""
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Execute Shadcn Registry Build Process
DESCRIPTION: Command to run the `registry:build` script defined in `package.json`. This initiates the `shadcn` CLI's build process, generating the necessary JSON files for the component registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npm run registry:build
```

----------------------------------------

TITLE: Complete registry.json Example Structure
DESCRIPTION: Demonstrates the full structure of a `registry.json` file, including the schema reference, registry metadata (name, homepage), and an example of a component item within the `items` array.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry.json"",
  ""name"": ""shadcn"",
  ""homepage"": ""https://ui.shadcn.com"",
  ""items"": [
    {
      ""name"": ""hello-world"",
      ""type"": ""registry:block"",
      ""title"": ""Hello World"",
      ""description"": ""A simple hello world component."",
      ""files"": [
        {
          ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
          ""type"": ""registry:component""
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Add registry build script to package.json
DESCRIPTION: This snippet adds a `registry:build` script to your `package.json` file. This allows you to easily execute the `shadcn build` command by running `npm run registry:build` from your terminal.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""scripts"": {
    ""registry:build"": ""shadcn build""
  }
}
```

----------------------------------------

TITLE: Install Shadcn CLI Canary Version via npm
DESCRIPTION: Command to install the `shadcn` command-line interface, specifically targeting the `canary` release. This version is necessary to access the `build` command for registry generation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install shadcn@canary
```

----------------------------------------

TITLE: shadcn init Command Reference
DESCRIPTION: Comprehensive API documentation for the `shadcn init` command, detailing its arguments and options for project initialization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Usage: shadcn init [options] [components...]

initialize your project and install dependencies

Arguments:
  components         the components to add or a url to the component.

Options:
  -y, --yes           skip confirmation prompt. (default: true)
  -d, --defaults,     use default configuration. (default: false)
  -f, --force         force overwrite of existing configuration. (default: false)
  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: ""/Users/shadcn/Desktop"")
  -s, --silent        mute output. (default: false)
  --src-dir           use the src directory when creating a new project. (default: false)
  --no-src-dir        do not use the src directory when creating a new project.
  --css-variables     use css variables for theming. (default: true)
  --no-css-variables  do not use css variables for theming.
  -h, --help          display help for command
```

----------------------------------------

TITLE: Example Block File Structure
DESCRIPTION: Shows an example file organization for a complex block, including a main page component, sub-components, hooks, and utility functions within its dedicated directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_5

LANGUAGE: txt
CODE:
```
dashboard-01
└── page.tsx
└── components
    └── hello-world.tsx
    └── example-card.tsx
└── hooks
    └── use-hello-world.ts
└── lib
    └── format-date.ts
```

----------------------------------------

TITLE: Install Shadcn UI Registry Item via CLI
DESCRIPTION: This command demonstrates how to install a component from a local or remote shadcn UI registry using the `shadcn` CLI's `add` command. It specifies the URL of the registry item to be added to the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/getting-started.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest add http://localhost:3000/r/hello-world.json
```

----------------------------------------

TITLE: Complete registry-item.json schema example
DESCRIPTION: A comprehensive example demonstrating the full structure and typical properties of a `registry-item.json` file, including schema reference, name, type, title, description, file paths, CSS variables, and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""type"": ""registry:block"",
  ""title"": ""Hello World"",
  ""description"": ""A simple hello world component."",
  ""files"": [
    {
      ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/use-hello-world.ts"",
      ""type"": ""registry:hook""
    }
  ],
  ""cssVars"": {
    ""theme"": {
      ""font-heading"": ""Poppins, sans-serif""
    },
    ""light"": {
      ""brand"": ""20 14.3% 4.1%""
    },
    ""dark"": {
      ""brand"": ""20 14.3% 4.1%""
    }
  }
}
```

----------------------------------------

TITLE: Install Shadcn UI Registry Item via CLI
DESCRIPTION: This command demonstrates how to install a component from a local or remote shadcn UI registry using the `shadcn` CLI's `add` command. It specifies the URL of the registry item to be added to the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
npx shadcn@latest add http://localhost:3000/r/hello-world.json
```

----------------------------------------

TITLE: SidebarProvider Component API Reference
DESCRIPTION: Detailed API documentation for the `SidebarProvider` component, which is essential for providing the sidebar context to other sidebar-related components. It supports both uncontrolled (`defaultOpen`) and controlled (`open`, `onOpenChange`) modes for managing the sidebar's open state.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_7

LANGUAGE: APIDOC
CODE:
```
SidebarProvider Component:
  Description: Provides the sidebar context to the Sidebar component. You should always wrap your application in a `SidebarProvider` component.
  Props:
    defaultOpen:
      Type: boolean
      Description: Default open state of the sidebar (uncontrolled).
    open:
      Type: boolean
      Description: Open state of the sidebar (controlled).
    onOpenChange:
      Type: (open: boolean) => void
      Description: Callback function that sets the open state of the sidebar (controlled).
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Starts the local development server for the `www` application, allowing live preview and testing of changes made to the blocks.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm www:dev
```

----------------------------------------

TITLE: Universal Registry Item for Multi-File Starter Template
DESCRIPTION: This example illustrates a universal registry item designed to install multiple files, such as those for a custom starter template. It demonstrates how to define multiple file targets within a single registry item, and also includes an optional 'dependencies' field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_17

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""my-custom-start-template"",
  ""type"": ""registry:item"",
  ""dependencies"": [""better-auth""],
  ""files"": [
    {
      ""path"": ""/path/to/file-01.json"",
      ""type"": ""registry:file"",
      ""target"": ""~/file-01.json"",
      ""content"": ""...""
    },
    {
      ""path"": ""/path/to/file-02.vue"",
      ""type"": ""registry:file"",
      ""target"": ""~/pages/file-02.vue"",
      ""content"": ""...""
    }
  ]
}
```

----------------------------------------

TITLE: Basic Tooltip usage example in TypeScript/React
DESCRIPTION: This example illustrates a fundamental implementation of the Tooltip component. It shows how to wrap a trigger element and provide content that will be displayed when the trigger is hovered over or focused.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tooltip.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Tooltip>
  <TooltipTrigger>Hover</TooltipTrigger>
  <TooltipContent>
    <p>Add to library</p>
  </TooltipContent>
</Tooltip>
```

----------------------------------------

TITLE: Execute shadcn registry build script
DESCRIPTION: This command runs the `registry:build` script, which in turn executes the `shadcn build` command. This process generates the necessary registry JSON files, typically outputting them to the `public/r` directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
npm run registry:build
```

----------------------------------------

TITLE: React Table Pagination API Methods
DESCRIPTION: API methods provided by `@tanstack/react-table` for controlling and querying pagination state. These methods allow programmatic navigation and checking of pagination capabilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_10

LANGUAGE: APIDOC
CODE:
```
table.previousPage(): void
  - Navigates to the previous page of the table data.
  - Returns: void

table.nextPage(): void
  - Navigates to the next page of the table data.
  - Returns: void

table.getCanPreviousPage(): boolean
  - Checks if there is a previous page available.
  - Returns: boolean (true if a previous page exists, false otherwise)

table.getCanNextPage(): boolean
  - Checks if there is a next page available.
  - Returns: boolean (true if a next page exists, false otherwise)
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Starts the local development server for the UI project, enabling live preview and testing of components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/blocks.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm www:dev
```

----------------------------------------

TITLE: Start Remix development server
DESCRIPTION: This command starts the Remix application in development mode. It enables live reloading and asset rebuilding on file changes, facilitating rapid development and immediate feedback on code modifications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
npm run dev
```

----------------------------------------

TITLE: React Table Pagination API Methods
DESCRIPTION: API methods provided by `@tanstack/react-table` for controlling and querying pagination state. These methods allow programmatic navigation and checking of pagination capabilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_10

LANGUAGE: APIDOC
CODE:
```
table.previousPage(): void
  - Navigates to the previous page of the table data.
  - Returns: void

table.nextPage(): void
  - Navigates to the next page of the table data.
  - Returns: void

table.getCanPreviousPage(): boolean
  - Checks if there is a previous page available.
  - Returns: boolean (true if a previous page exists, false otherwise)

table.getCanNextPage(): boolean
  - Checks if there is a next page available.
  - Returns: boolean (true if a next page exists, false otherwise)
```

----------------------------------------

TITLE: Install shadcn CLI canary version
DESCRIPTION: This command installs the `shadcn` command-line interface, specifically targeting the `canary` version. The `canary` version is necessary to access the `build` command, which is used for generating registry JSON files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npm install shadcn@canary
```

----------------------------------------

TITLE: Example Usage of OpenInV0Button Component
DESCRIPTION: This snippet demonstrates how to integrate the `OpenInV0Button` component into a React application. It shows how to pass a specific URL to the component's `url` prop, which will then be used to construct the v0.dev API link for opening the registry item.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/open-in-v0.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
<OpenInV0Button url=""https://example.com/r/hello-world.json"" />
```

----------------------------------------

TITLE: SidebarProvider Component API Reference
DESCRIPTION: Detailed API documentation for the `SidebarProvider` component, which manages the open state of the sidebar. It supports both uncontrolled (`defaultOpen`) and controlled (`open`, `onOpenChange`) modes for managing sidebar visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
SidebarProvider Props:
- Name: `defaultOpen`
  Type: `boolean`
  Description: Default open state of the sidebar (uncontrolled).
- Name: `open`
  Type: `boolean`
  Description: Open state of the sidebar (controlled).
- Name: `onOpenChange`
  Type: `(open: boolean) => void`
  Description: Callback function that sets the open state of the sidebar when in controlled mode.
```

----------------------------------------

TITLE: shadcn add Command Reference
DESCRIPTION: Comprehensive API documentation for the `shadcn add` command, detailing its arguments and options for adding components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Usage: shadcn add [options] [components...]

add a component to your project

Arguments:
  components         the components to add or a url to the component.

Options:
  -y, --yes           skip confirmation prompt. (default: false)
  -o, --overwrite     overwrite existing files. (default: false)
  -c, --cwd <cwd>     the working directory. defaults to the current directory. (default: ""/Users/shadcn/Desktop"")
  -a, --all           add all available components (default: false)
  -p, --path <path>   the path to add the component to.
  -s, --silent        mute output. (default: false)
  --src-dir           use the src directory when creating a new project. (default: false)
  --no-src-dir        do not use the src directory when creating a new project.
  --css-variables     use css variables for theming. (default: true)
  --no-css-variables  do not use css variables for theming.
  -h, --help          display help for command
```

----------------------------------------

TITLE: Registry Item for Custom Cursor Python Rules
DESCRIPTION: This example demonstrates a shadcn/ui registry item configuration for installing custom Cursor rules specifically for Python. It defines a single file target within the user's Cursor rules directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""python-rules"",
  ""type"": ""registry:item"",
  ""files"": [
    {
      ""path"": ""/path/to/your/registry/default/custom-python.mdc"",
      ""type"": ""registry:file"",
      ""target"": ""~/.cursor/rules/custom-python.mdc"",
      ""content"": ""...""
    }
  ]
}
```

----------------------------------------

TITLE: Add simple custom utility to shadcn/ui
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-component'. It allows adding a simple custom CSS utility to the shadcn/ui styling system using `@utility`. This example defines a `content-auto` utility that sets `content-visibility` to `auto`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@utility content-auto"": {
      ""content-visibility"": ""auto""
    }
  }
}
```

----------------------------------------

TITLE: shadcn build Command Reference
DESCRIPTION: Comprehensive API documentation for the `shadcn build` command, detailing its arguments and options for generating registry files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Usage: shadcn build [options] [registry]

build components for a shadcn registry

Arguments:
  registry             path to registry.json file (default: ""./registry.json"")

Options:
  -o, --output <path>  destination directory for json files (default: ""./public/r"")
  -c, --cwd <cwd>      the working directory. defaults to the current directory. (default:
                       ""/Users/shadcn/Code/shadcn/ui/packages/shadcn"")
  -h, --help           display help for command
```

----------------------------------------

TITLE: Define a Custom shadcn/ui Block
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` block named `login-01`. It includes a description and lists its `registryDependencies` such as `button`, `card`, `input`, and `label`. The `files` array specifies the components and pages that constitute this block, including their paths, content (truncated for brevity), types (`registry:page`, `registry:component`), and target locations within the project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""login-01"",
  ""type"": ""registry:block"",
  ""description"": ""A simple login form."",
  ""registryDependencies"": [""button"", ""card"", ""input"", ""label""],
  ""files"": [
    {
      ""path"": ""blocks/login-01/page.tsx"",
      ""content"": ""import { LoginForm } ..."",
      ""type"": ""registry:page"",
      ""target"": ""app/login/page.tsx""
    },
    {
      ""path"": ""blocks/login-01/components/login-form.tsx"",
      ""content"": ""..."",
      ""type"": ""registry:component""
    }
  ]
}
```

----------------------------------------

TITLE: Subscribing to Carousel Events in React
DESCRIPTION: This example illustrates how to listen for specific events emitted by the carousel API instance. It uses a `useEffect` hook to ensure the event listener is attached only when the API is available, demonstrating a common pattern for reacting to carousel state changes like 'select'.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from ""@/components/ui/carousel""

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()

  React.useEffect(() => {
    if (!api) {
      return
    }

    api.on(""select"", () => {
      // Do something on select.
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: registry.json Schema Property Definitions
DESCRIPTION: Detailed specification of the properties available in the `registry.json` schema, including their types, descriptions, and usage examples.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-json.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
registry.json Schema Definition:

Property: $schema
  Type: string
  Description: Specifies the JSON Schema URI that this registry.json file conforms to. This is used for validation and IDE auto-completion.
  Example: ""https://ui.shadcn.com/schema/registry.json""

Property: name
  Type: string
  Description: The unique name of your custom component registry. This value is typically used for data attributes and other metadata within applications consuming the registry.
  Example: ""acme""

Property: homepage
  Type: string (URL)
  Description: The URL of the registry's homepage. Similar to 'name', this is used for metadata and linking purposes.
  Example: ""https://acme.com""

Property: items
  Type: array of objects (registry-item schema)
  Description: A collection of component definitions that constitute the registry. Each object in this array must adhere to the 'registry-item' schema specification.
  Example Structure for an item:
    {
      ""name"": ""hello-world"",
      ""type"": ""registry:block"",
      ""title"": ""Hello World"",
      ""description"": ""A simple hello world component."",
      ""files"": [
        {
          ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
          ""type"": ""registry:component""
        }
      ]
    }
  Reference: See the registry-item schema documentation for detailed structure of each item.
```

----------------------------------------

TITLE: Subscribing to Carousel Events in React
DESCRIPTION: This example illustrates how to listen for specific events emitted by the carousel API instance. It uses a `useEffect` hook to ensure the event listener is attached only when the API is available, demonstrating a common pattern for reacting to carousel state changes like 'select'.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from ""@/components/ui/carousel""

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()

  React.useEffect(() => {
    if (!api) {
      return
    }

    api.on(""select"", () => {
      // Do something on select.
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Add functional custom utility to shadcn/ui
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-component'. It allows adding a functional custom CSS utility to the shadcn/ui styling system using `@utility`. This example defines a `tab-*` utility that sets `tab-size` based on a variable, enabling dynamic utility classes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@utility tab-*"": {
      ""tab-size"": ""var(--tab-size-*)""
    }
  }
}
```

----------------------------------------

TITLE: registry.json Schema Property Definitions
DESCRIPTION: Detailed specification of the properties available in the `registry.json` schema, including their types, descriptions, and usage examples.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-json.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
registry.json Schema Definition:

Property: $schema
  Type: string
  Description: Specifies the JSON Schema URI that this registry.json file conforms to. This is used for validation and IDE auto-completion.
  Example: ""https://ui.shadcn.com/schema/registry.json""

Property: name
  Type: string
  Description: The unique name of your custom component registry. This value is typically used for data attributes and other metadata within applications consuming the registry.
  Example: ""acme""

Property: homepage
  Type: string (URL)
  Description: The URL of the registry's homepage. Similar to 'name', this is used for metadata and linking purposes.
  Example: ""https://acme.com""

Property: items
  Type: array of objects (registry-item schema)
  Description: A collection of component definitions that constitute the registry. Each object in this array must adhere to the 'registry-item' schema specification.
  Example Structure for an item:
    {
      ""name"": ""hello-world"",
      ""type"": ""registry:block"",
      ""title"": ""Hello World"",
      ""description"": ""A simple hello world component."",
      ""files"": [
        {
          ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
          ""type"": ""registry:component""
        }
      ]
    }
  Reference: See the registry-item schema documentation for detailed structure of each item.
```

----------------------------------------

TITLE: Basic Tooltip Component Usage Example in React
DESCRIPTION: This example demonstrates the fundamental structure for implementing a Tooltip. It wraps a `TooltipTrigger` (the element that activates the tooltip) and provides content within `TooltipContent`, all managed by a `TooltipProvider`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<TooltipProvider>
  <Tooltip>
    <TooltipTrigger>Hover</TooltipTrigger>
    <TooltipContent>
      <p>Add to library</p>
    </TooltipContent>
  </Tooltip>
</TooltipProvider>
```

----------------------------------------

TITLE: Run initial project setup script
DESCRIPTION: This command executes the `setup` script defined in the project's `package.json`. It is typically used for installing dependencies, running database migrations, or performing other initial configuration tasks required before starting development.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
npm run setup
```

----------------------------------------

TITLE: Create a New shadcn/ui Style from Scratch
DESCRIPTION: This JSON configuration demonstrates how to define a completely new `shadcn/ui` style without extending the default framework, indicated by `""extends"": ""none""`. It includes new dependencies (`tailwind-merge`, `clsx`), integrates `shadcn/ui`'s `utils` registry item, and imports several remote components (`button`, `input`, `label`, `select`). The configuration also defines a comprehensive set of custom CSS variables (`main`, `bg`, `border`, `text`, `ring`) for both light and dark modes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""extends"": ""none"",
  ""name"": ""new-style"",
  ""type"": ""registry:style"",
  ""dependencies"": [""tailwind-merge"", ""clsx""],
  ""registryDependencies"": [
    ""utils"",
    ""https://example.com/r/button.json"",
    ""https://example.com/r/input.json"",
    ""https://example.com/r/label.json"",
    ""https://example.com/r/select.json""
  ],
  ""cssVars"": {
    ""theme"": {
      ""font-sans"": ""Inter, sans-serif""
    },
    ""light"": {
      ""main"": ""#88aaee"",
      ""bg"": ""#dfe5f2"",
      ""border"": ""#000"",
      ""text"": ""#000"",
      ""ring"": ""#000""
    },
    ""dark"": {
      ""main"": ""#88aaee"",
      ""bg"": ""#272933"",
      ""border"": ""#000"",
      ""text"": ""#e6e6e6"",
      ""ring"": ""#fff""
    }
  }
}
```

----------------------------------------

TITLE: Running Local Documentation
DESCRIPTION: Command to start the local development server for the project's documentation. The documentation is located within the `www` workspace and is written using MDX, allowing contributors to preview changes before submission.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: bash
CODE:
```
pnpm --filter=www dev
```

----------------------------------------

TITLE: Create a New shadcn/ui Style from Scratch
DESCRIPTION: This JSON configuration demonstrates how to define a completely new `shadcn/ui` style without extending the default framework, indicated by `""extends"": ""none""`. It includes new dependencies (`tailwind-merge`, `clsx`), integrates `shadcn/ui`'s `utils` registry item, and imports several remote components (`button`, `input`, `label`, `select`). The configuration also defines a comprehensive set of custom CSS variables (`main`, `bg`, `border`, `text`, `ring`) for both light and dark modes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""extends"": ""none"",
  ""name"": ""new-style"",
  ""type"": ""registry:style"",
  ""dependencies"": [""tailwind-merge"", ""clsx""],
  ""registryDependencies"": [
    ""utils"",
    ""https://example.com/r/button.json"",
    ""https://example.com/r/input.json"",
    ""https://example.com/r/label.json"",
    ""https://example.com/r/select.json""
  ],
  ""cssVars"": {
    ""theme"": {
      ""font-sans"": ""Inter, sans-serif""
    },
    ""light"": {
      ""main"": ""#88aaee"",
      ""bg"": ""#dfe5f2"",
      ""border"": ""#000"",
      ""text"": ""#000"",
      ""ring"": ""#000""
    },
    ""dark"": {
      ""main"": ""#88aaee"",
      ""bg"": ""#272933"",
      ""border"": ""#000"",
      ""text"": ""#e6e6e6"",
      ""ring"": ""#fff""
    }
  }
}
```

----------------------------------------

TITLE: Define a Custom shadcn/ui Block
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` block named `login-01`. It includes a description and lists its `registryDependencies` such as `button`, `card`, `input`, and `label`. The `files` array specifies the components and pages that constitute this block, including their paths, content (truncated for brevity), types (`registry:page`, `registry:component`), and target locations within the project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""login-01"",
  ""type"": ""registry:block"",
  ""description"": ""A simple login form."",
  ""registryDependencies"": [""button"", ""card"", ""input"", ""label""],
  ""files"": [
    {
      ""path"": ""blocks/login-01/page.tsx"",
      ""content"": ""import { LoginForm } ..."",
      ""type"": ""registry:page"",
      ""target"": ""app/login/page.tsx""
    },
    {
      ""path"": ""blocks/login-01/components/login-form.tsx"",
      ""content"": ""..."",
      ""type"": ""registry:component""
    }
  ]
}
```

----------------------------------------

TITLE: Registry Item for Custom ESLint Configuration
DESCRIPTION: This configuration shows how to create a universal registry item to install a custom ESLint configuration file. The item targets the standard .eslintrc.json file in the user's home directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_16

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""my-eslint-config"",
  ""type"": ""registry:item"",
  ""files"": [
    {
      ""path"": ""/path/to/your/registry/default/custom-eslint.json"",
      ""type"": ""registry:file"",
      ""target"": ""~/.eslintrc.json"",
      ""content"": ""...""
    }
  ]
}
```

----------------------------------------

TITLE: Configure Tailwind CSS to scan registry directories
DESCRIPTION: This configuration snippet for `tailwind.config.ts` ensures that Tailwind CSS correctly scans files within the `registry` directory for utility classes. This is essential for applying styles to components located in custom registry paths.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/getting-started.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
// tailwind.config.ts
export default {
  content: [""./registry/**/*.{js,ts,jsx,tsx}""],
}
```

----------------------------------------

TITLE: Initial Repository Setup
DESCRIPTION: Instructions for setting up the shadcn/ui repository locally, including cloning the repository, navigating into its directory, creating a new Git branch for development, and installing all project dependencies using pnpm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/your-username/ui.git
```

LANGUAGE: bash
CODE:
```
cd ui
```

LANGUAGE: bash
CODE:
```
git checkout -b my-new-branch
```

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: useSidebar Hook API Reference
DESCRIPTION: Comprehensive API documentation for the `useSidebar` hook, detailing all available properties and their types. This hook provides essential state and functions for controlling sidebar behavior, including its expanded/collapsed state, mobile responsiveness, and open/close toggling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_15

LANGUAGE: APIDOC
CODE:
```
useSidebar Hook Properties:

state: 'expanded' | 'collapsed'
  - Description: The current state of the sidebar.

open: boolean
  - Description: Whether the sidebar is open.

setOpen: (open: boolean) => void
  - Description: Sets the open state of the sidebar.

openMobile: boolean
  - Description: Whether the sidebar is open on mobile.

setOpenMobile: (open: boolean) => void
  - Description: Sets the open state of the sidebar on mobile.

isMobile: boolean
  - Description: Whether the sidebar is on mobile.

toggleSidebar: () => void
  - Description: Toggles the sidebar. Desktop and mobile.
```

----------------------------------------

TITLE: Example: Add Specific shadcn UI Component
DESCRIPTION: Demonstrates how to add a specific component, such as 'alert-dialog', to your project using the `shadcn add` command. This is a practical application of the component addition functionality.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn add alert-dialog
```

----------------------------------------

TITLE: Accessing Carousel API and Tracking Slide Changes in React
DESCRIPTION: This snippet demonstrates how to obtain the carousel API instance using React's `useState` and `setApi` prop. It then uses `useEffect` to initialize slide count and current slide, and to subscribe to the 'select' event for real-time updates, enabling dynamic display of carousel progress.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from ""@/components/ui/carousel""

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()
  const [current, setCurrent] = React.useState(0)
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on(""select"", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Example for description property in registry-item.json
DESCRIPTION: Illustrates the `description` property, providing a longer, more detailed explanation of the registry item's purpose, functionality, or usage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""description"": ""A simple hello world component.""
}
```

----------------------------------------

TITLE: v0.dev Registry Integration API Endpoint
DESCRIPTION: Describes the API endpoint for opening publicly accessible registry items directly within v0.dev. This allows external registries to provide a direct 'Open in v0' functionality, redirecting users to v0.dev with the specified item loaded. Note that the functionality does not support 'cssVars' and 'tailwind' properties.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/open-in-v0.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Endpoint: GET https://v0.dev/chat/api/open?url=[URL]
  - Description: Opens a publicly accessible registry item URL in v0.dev.
  - Parameters:
    - url (string, required): The URL of the registry item to open. Must be publicly accessible.
  - Returns: Redirects the user to v0.dev with the specified item loaded.
  - Usage Example: https://v0.dev/chat/api/open?url=https://ui.shadcn.com/r/styles/new-york/login-01.json
  - Notes: The 'Open in v0' functionality does not support 'cssVars' and 'tailwind' properties for the opened item.
```

----------------------------------------

TITLE: Configure shadcn/ui components.json
DESCRIPTION: An example of the interactive prompt for configuring `components.json` during shadcn/ui initialization. This step allows users to define preferences like the base color for components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
Which color would you like to use as base color? › Neutral
```

----------------------------------------

TITLE: Update InputOTPSlot for Composition API
DESCRIPTION: This diff shows the necessary changes to `input-otp.tsx` to transition from a render props pattern to a composition-based API for `InputOTPSlot`. It updates imports and modifies the `InputOTPSlot` component to use `OTPInputContext` for accessing slot data, improving component reusability and maintainability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input-otp.mdx#_snippet_6

LANGUAGE: diff
CODE:
```
- import { OTPInput, SlotProps } from ""input-otp""
+ import { OTPInput, OTPInputContext } from ""input-otp""

 const InputOTPSlot = React.forwardRef<
   React.ElementRef<""div"">,
-   SlotProps & React.ComponentPropsWithoutRef<""div"">
-  >(({ char, hasFakeCaret, isActive, className, ...props }, ref) => {
+   React.ComponentPropsWithoutRef<""div""> & { index: number }
+  >(({ index, className, ...props }, ref) => {
+   const inputOTPContext = React.useContext(OTPInputContext)
+   const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]
```

----------------------------------------

TITLE: Import app.css into TanStack Start Root Route
DESCRIPTION: Modifies `app/routes/__root.tsx` to import the `app.css` stylesheet as a URL and link it in the document's head, ensuring global styles are applied.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import type { ReactNode } from ""react""
import { Outlet, createRootRoute } from ""@tanstack/react-router""
import { Meta, Scripts } from ""@tanstack/start""

import appCss from ""@/styles/app.css?url""

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: ""utf-8"",
      },
      {
        name: ""viewport"",
        content: ""width=device-width, initial-scale=1"",
      },
      {
        title: ""TanStack Start Starter"",
      },
    ],
    links: [
      {
        rel: ""stylesheet"",
        href: appCss,
      },
    ],
  }),
  component: RootComponent,
})
```

----------------------------------------

TITLE: Accessing Carousel API and Tracking Slide Changes in React
DESCRIPTION: This snippet demonstrates how to obtain the carousel API instance using React's `useState` and `setApi` prop. It then uses `useEffect` to initialize slide count and current slide, and to subscribe to the 'select' event for real-time updates, enabling dynamic display of carousel progress.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { type CarouselApi } from ""@/components/ui/carousel""

export function Example() {
  const [api, setApi] = React.useState<CarouselApi>()
  const [current, setCurrent] = React.useState(0)
  const [count, setCount] = React.useState(0)

  React.useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on(""select"", () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  return (
    <Carousel setApi={setApi}>
      <CarouselContent>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
        <CarouselItem>...</CarouselItem>
      </CarouselContent>
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Example React component using shadcn/ui Button
DESCRIPTION: Demonstrates how to import and use the `Button` component from shadcn/ui within a simple React functional component. This example shows a basic usage of the added component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/gatsby.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: shadcn/ui Registry Item JSON Schema Specification
DESCRIPTION: Detailed specification of the `registry-item.json` schema, outlining all supported properties, their types, descriptions, constraints, and examples for defining custom components and assets within the shadcn/ui registry system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
registry-item.json Schema:

Properties:
- $schema (string, optional): URL to the JSON Schema definition.
  Example: ""https://ui.shadcn.com/schema/registry-item.json""

- name (string, required): Unique identifier for the registry item.
  Constraints: Must be unique within the registry.
  Example: ""hello-world""

- type (string, required): Categorizes the registry item, influencing its resolution.
  Supported values:
    - ""registry:block"": For complex components with multiple files.
    - ""registry:component"": For simple components.
    - ""registry:lib"": For utility libraries.
    - ""registry:hook"": For React hooks.
    - ""registry:ui"": For UI components and single-file primitives.
    - ""registry:page"": For page or file-based routes.
    - ""registry:file"": For miscellaneous files.
    - ""registry:style"": For registry styles (e.g., ""new-york"").
    - ""registry:theme"": For themes.
    - ""registry:item"": For universal registry items.
  Example: ""registry:block""

- title (string, required): Human-readable, short, and descriptive title for the item.
  Example: ""Hello World""

- description (string, required): Detailed explanation of the registry item's purpose.
  Example: ""A simple hello world component.""

- files (array of objects, optional): List of files associated with the registry item.
  Each object has:
    - path (string): Relative path to the file.
    - type (string): Type of the file (e.g., ""registry:component"", ""registry:hook"").
  Example:
    [
      { ""path"": ""registry/new-york/hello-world/hello-world.tsx"", ""type"": ""registry:component"" },
      { ""path"": ""registry/new-york/hello-world/use-hello-world.ts"", ""type"": ""registry:hook"" }
    ]

- cssVars (object, optional): Defines CSS variables for the item.
  Structure:
    - theme (object): General theme variables (e.g., font-heading).
    - light (object): Light mode specific variables.
    - dark (object): Dark mode specific variables.
  Example:
    {
      ""theme"": { ""font-heading"": ""Poppins, sans-serif"" },
      ""light"": { ""brand"": ""20 14.3% 4.1%"" },
      ""dark"": { ""brand"": ""20 14.3% 4.1%"" }
    }

- author (string, optional): Specifies the author of the registry item.
  Example: ""John Doe <john@doe.com>""

- dependencies (array of strings, optional): List of npm package dependencies.
  Format: ""package-name"" or ""package-name@version"".
  Example: [""@radix-ui/react-accordion"", ""zod"", ""lucide-react"", ""name@1.0.2""]

- registryDependencies (array of strings, optional): List of dependencies on other registry items.
  Format: Item name (for shadcn/ui items) or URL (for custom registry items).
  Example: [""button"", ""input"", ""select"", ""https://example.com/r/editor.json""]
  Note: CLI automatically resolves remote dependencies.
```

----------------------------------------

TITLE: registry-item.json Schema Property Definitions
DESCRIPTION: Detailed specification for individual properties within the `registry-item.json` schema, outlining their purpose, constraints, and usage examples for defining custom registry items.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
$schema: string
  - Purpose: Specifies the JSON schema URL for validation.
  - Example: {""$schema"": ""https://ui.shadcn.com/schema/registry-item.json""}

name: string
  - Purpose: Unique identifier for the registry item.
  - Constraints: Must be unique for your registry.
  - Example: {""name"": ""hello-world""}

title: string
  - Purpose: Human-readable title for the registry item.
  - Constraints: Keep it short and descriptive.
  - Example: {""title"": ""Hello World""}

description: string
  - Purpose: Detailed description of the registry item.
  - Example: {""description"": ""A simple hello world component.""}

type: string
  - Purpose: Defines the type of the registry item, influencing its resolution and target path.
  - Supported Types:
    - registry:block: Use for complex components with multiple files.
    - registry:component: Use for simple components.
    - registry:lib: Use for lib and utils.
    - registry:hook: Use for hooks.
    - registry:ui: Use for UI components and single-file primitives.
    - registry:page: Use for page or file-based routes.
    - registry:file: Use for miscellaneous files.
    - registry:style: Use for registry styles (e.g., `new-york`).
    - registry:theme: Use for themes.
  - Example: {""type"": ""registry:block""}

author: string
  - Purpose: Specifies the author of the registry item.
  - Constraints: Can be unique to the item or same as registry author.
  - Example: {""author"": ""John Doe <john@doe.com>""}

dependencies: array of string
  - Purpose: Specifies npm package dependencies required by the registry item.
  - Usage: Use `@version` to specify package versions.
  - Example: {""dependencies"": [""@radix-ui/react-accordion"", ""zod"", ""lucide-react"", ""name@1.0.2""]}

registryDependencies: array of string
  - Purpose: Specifies dependencies on other registry items (shadcn/ui components or custom registry items).
  - Usage:
    - For shadcn/ui items: Use the item name (e.g., `['button', 'input', 'select']`).
    - For custom registry items: Use the URL of the registry item (e.g., `['https://example.com/r/editor.json']`).
  - Note: The CLI automatically resolves remote registry dependencies.
  - Example: {""registryDependencies"": [""button"", ""input"", ""select"", ""https://example.com/r/editor.json""]}
```

----------------------------------------

TITLE: Open in v0 API Endpoint Reference
DESCRIPTION: This API endpoint allows opening a publicly accessible registry item directly within v0.dev. It accepts a URL query parameter pointing to the registry item's JSON file. Note that the 'Open in v0' functionality, when used with this endpoint, does not support `cssVars` and `tailwind` properties from the registry item.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/open-in-v0.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
GET https://v0.dev/chat/api/open?url=[URL]

Parameters:
  url (string, required): The publicly accessible URL of the registry item (e.g., a JSON file).

Example Usage:
  https://v0.dev/chat/api/open?url=https://ui.shadcn.com/r/styles/new-york/login-01.json
```

----------------------------------------

TITLE: Add custom base styles to shadcn/ui
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-style'. It allows adding custom CSS rules to the `@layer base` within the shadcn/ui styling system. This example sets custom font sizes for `h1` and `h2` elements, providing a way to define global base styles.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-style"",
  ""type"": ""registry:style"",
  ""css"": {
    ""@layer base"": {
      ""h1"": {
        ""font-size"": ""var(--text-2xl)""
      },
      ""h2"": {
        ""font-size"": ""var(--text-xl)""
      }
    }
  }
}
```

----------------------------------------

TITLE: Define a Custom shadcn/ui Style Extension
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` style that extends the base framework. It specifies external dependencies like `@tabler/icons-react`, integrates existing `shadcn/ui` components (`login-01`, `calendar`), and imports a remote component (`editor`). Additionally, it sets a custom font (`Inter, sans-serif`) and defines a `brand` color for both light and dark themes using CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""example-style"",
  ""type"": ""registry:style"",
  ""dependencies"": [""@tabler/icons-react""],
  ""registryDependencies"": [
    ""login-01"",
    ""calendar"",
    ""https://example.com/r/editor.json""
  ],
  ""cssVars"": {
    ""theme"": {
      ""font-sans"": ""Inter, sans-serif""
    },
    ""light"": {
      ""brand"": ""20 14.3% 4.1%""
    },
    ""dark"": {
      ""brand"": ""20 14.3% 4.1%""
    }
  }
}
```

----------------------------------------

TITLE: Add complex custom utility to shadcn/ui
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-component'. It allows adding a complex custom CSS utility to the shadcn/ui styling system using `@utility`. This example defines a `scrollbar-hidden` utility that hides the scrollbar using `&::-webkit-scrollbar`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_11

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@utility scrollbar-hidden"": {
      ""scrollbar-hidden"": {
        ""&::-webkit-scrollbar"": {
          ""display"": ""none""
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Basic Shadcn UI Pagination JSX Example
DESCRIPTION: Demonstrates a minimal JSX structure for rendering a pagination component with previous, next, a page link, and an ellipsis for omitted pages, showcasing the component's basic usage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Pagination>
  <PaginationContent>
    <PaginationItem>
      <PaginationPrevious href=""#"" />
    </PaginationItem>
    <PaginationItem>
      <PaginationLink href=""#"">1</PaginationLink>
    </PaginationItem>
    <PaginationItem>
      <PaginationEllipsis />
    </PaginationItem>
    <PaginationItem>
      <PaginationNext href=""#"" />
    </PaginationItem>
  </PaginationContent>
</Pagination>
```

----------------------------------------

TITLE: Add Custom Tailwind CSS Plugins to shadcn/ui
DESCRIPTION: This JSON configuration demonstrates how to include custom Tailwind CSS plugins, such as `@tailwindcss/typography` and a hypothetical `foo` plugin, within a shadcn/ui registry item. This extends the styling capabilities by integrating external or custom plugin functionalities into the project's design system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-plugin"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@plugin @tailwindcss/typography"": {},
    ""@plugin foo"": {}
  }
}
```

----------------------------------------

TITLE: DataTable Row Model API Methods
DESCRIPTION: API methods for retrieving filtered and selected row models from a `DataTable` instance. These methods are crucial for displaying information about the table's current state, such as the number of selected or total filtered rows.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_17

LANGUAGE: APIDOC
CODE:
```
table.getFilteredSelectedRowModel()
  - Returns: A row model containing only the rows that are currently selected and filtered.
  - Usage: Used to get the count of selected rows (e.g., `table.getFilteredSelectedRowModel().rows.length`).

table.getFilteredRowModel()
  - Returns: A row model containing all rows that pass the current filters.
  - Usage: Used to get the total count of filtered rows (e.g., `table.getFilteredRowModel().rows.length`).
```

----------------------------------------

TITLE: Define a Custom shadcn/ui Style Extension
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` style that extends the base framework. It specifies external dependencies like `@tabler/icons-react`, integrates existing `shadcn/ui` components (`login-01`, `calendar`), and imports a remote component (`editor`). Additionally, it sets a custom font (`Inter, sans-serif`) and defines a `brand` color for both light and dark themes using CSS variables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""example-style"",
  ""type"": ""registry:style"",
  ""dependencies"": [""@tabler/icons-react""],
  ""registryDependencies"": [
    ""login-01"",
    ""calendar"",
    ""https://example.com/r/editor.json""
  ],
  ""cssVars"": {
    ""theme"": {
      ""font-sans"": ""Inter, sans-serif""
    },
    ""light"": {
      ""brand"": ""20 14.3% 4.1%""
    },
    ""dark"": {
      ""brand"": ""20 14.3% 4.1%""
    }
  }
}
```

----------------------------------------

TITLE: Add custom component styles to shadcn/ui
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-card'. It allows adding custom CSS rules to the `@layer components` within the shadcn/ui styling system. This example defines styles for a 'card' component, including background color, border-radius, padding, and box-shadow, enabling custom component styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-card"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@layer components"": {
      ""card"": {
        ""background-color"": ""var(--color-white)"",
        ""border-radius"": ""var(--rounded-lg)"",
        ""padding"": ""var(--spacing-6)"",
        ""box-shadow"": ""var(--shadow-xl)""
      }
    }
  }
}
```

----------------------------------------

TITLE: Render Button Linking to Legacy Docs in React
DESCRIPTION: This snippet demonstrates how to render a button component using shadcn/ui that links to the legacy documentation site. It utilizes the `asChild` prop to forward properties to the underlying `Link` component from Next.js or a similar routing library, and applies Tailwind CSS utility classes for styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/legacy.mdx#_snippet_0

LANGUAGE: JSX
CODE:
```
<Button asChild className=""mt-6 no-underline"" size=""sm"">
  <Link href=""https://v3.shadcn.com"" target=""_blank"">
    View the legacy docs
  </Link>
</Button>
```

----------------------------------------

TITLE: Install Tailwind CSS Dependencies
DESCRIPTION: Installs `tailwindcss` and its required PostCSS dependencies using npm for a TanStack Start project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install tailwindcss @tailwindcss/postcss postcss
```

----------------------------------------

TITLE: Create a new Remix Indie Stack project
DESCRIPTION: This command initializes a new Remix project using the 'indie-stack' template. It sets up the basic project structure and dependencies for a full-stack application, ready for development.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npx create-remix@latest --template remix-run/indie-stack
```

----------------------------------------

TITLE: Initialize shadcn/ui project
DESCRIPTION: Runs the `npx shadcn@canary init` command. This command sets up the shadcn/ui project, creating a `components.json` file and configuring CSS variables within `app/styles/app.css`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Initialize shadcn/ui Project
DESCRIPTION: Executes the `shadcn` CLI initialization command to set up the project, which creates `components.json` and configures CSS variables inside `app/styles/app.css`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Basic Tabs component usage example in TSX
DESCRIPTION: This example demonstrates a fundamental implementation of the shadcn/ui Tabs component. It sets up two tab triggers ('Account' and 'Password') and their corresponding content panels, showing the basic structure for interactive tabbed navigation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tabs.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Tabs defaultValue=""account"" className=""w-[400px]"">
  <TabsList>
    <TabsTrigger value=""account"">Account</TabsTrigger>
    <TabsTrigger value=""password"">Password</TabsTrigger>
  </TabsList>
  <TabsContent value=""account"">Make changes to your account here.</TabsContent>
  <TabsContent value=""password"">Change your password here.</TabsContent>
</Tabs>
```

----------------------------------------

TITLE: Define Payment Data Structure and Example Data
DESCRIPTION: Defines the TypeScript type for a 'Payment' object, outlining its properties like ID, amount, status, and email. It also provides an example array of 'payments' data that will be used to populate the table.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
type Payment = {
  id: string
  amount: number
  status: ""pending"" | ""processing"" | ""success"" | ""failed""
  email: string
}

export const payments: Payment[] = [
  {
    id: ""728ed52f"",
    amount: 100,
    status: ""pending"",
    email: ""m@example.com"",
  },
  {
    id: ""489e1d42"",
    amount: 125,
    status: ""processing"",
    email: ""example@gmail.com"",
  },
  // ...
]
```

----------------------------------------

TITLE: Basic Dropdown Menu Usage Example in TSX
DESCRIPTION: This example illustrates the fundamental structure for implementing a Dropdown Menu in a React application using TSX. It includes a trigger to open the menu, a content area, a label, a separator, and several clickable menu items. This provides a basic template for creating interactive dropdowns.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dropdown-menu.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

----------------------------------------

TITLE: Run End-to-End Tests with Cypress in Development
DESCRIPTION: This command starts the development server for the application and launches the Cypress client, enabling you to run end-to-end tests. Ensure the database is running in Docker as described in the project setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_10

LANGUAGE: sh
CODE:
```
npm run test:e2e:dev
```

----------------------------------------

TITLE: Import global CSS into TanStack Start root component
DESCRIPTION: Modifies the `app/routes/__root.tsx` file to import the `app.css` stylesheet. The stylesheet is then linked in the document's head section, ensuring global styles are applied.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import type { ReactNode } from ""react""
import { createRootRoute, Outlet } from ""@tanstack/react-router""
import { Meta, Scripts } from ""@tanstack/start""

import appCss from ""@/styles/app.css?url""

export const Route = createRootRoute({
  head: () => ({
    meta: [
      {
        charSet: ""utf-8"",
      },
      {
        name: ""viewport"",
        content: ""width=device-width, initial-scale=1"",
      },
      {
        title: ""TanStack Start Starter"",
      },
    ],
    links: [
      {
        rel: ""stylesheet"",
        href: appCss,
      },
    ],
  }),
  component: RootComponent,
})
```

----------------------------------------

TITLE: Define Simple CSS Utility Class for shadcn/ui
DESCRIPTION: This JSON configuration demonstrates how to define a simple CSS utility class, `content-auto`, using the `@utility` directive within a shadcn/ui registry item. This utility sets the `content-visibility` property to `auto`, providing a reusable style for content optimization and performance improvements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@utility content-auto"": {
      ""content-visibility"": ""auto""
    }
  }
}
```

----------------------------------------

TITLE: Fetch Data for Sidebar Menu with SWR and React Query
DESCRIPTION: Illustrates how to integrate popular client-side data fetching libraries, SWR and React Query, to dynamically load content for a `SidebarMenu`. Both examples show handling loading states and rendering fetched project data.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_38

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useSWR(""/api/projects"", fetcher)

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useQuery()

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Add a shadcn/ui component
DESCRIPTION: Demonstrates how to add a specific shadcn/ui component, such as the `Button`, to your project using the `npx shadcn@canary add` command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@canary add button
```

----------------------------------------

TITLE: Import and Use shadcn/ui Button Component
DESCRIPTION: Demonstrates how to import the `Button` component from `@/components/ui/button` and use it within a React component in `app/routes/index.tsx`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Define Payment Data Structure and Example Data
DESCRIPTION: Defines the TypeScript type for a 'Payment' object, outlining its properties like ID, amount, status, and email. It also provides an example array of 'payments' data that will be used to populate the table.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
type Payment = {
  id: string
  amount: number
  status: ""pending"" | ""processing"" | ""success"" | ""failed""
  email: string
}

export const payments: Payment[] = [
  {
    id: ""728ed52f"",
    amount: 100,
    status: ""pending"",
    email: ""m@example.com"",
  },
  {
    id: ""489e1d42"",
    amount: 125,
    status: ""processing"",
    email: ""example@gmail.com"",
  },
  // ...
]
```

----------------------------------------

TITLE: Example for dependencies property in registry-item.json
DESCRIPTION: Illustrates the `dependencies` property, an array of strings listing external npm package dependencies required by the registry item, optionally with version specifications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  ""dependencies"": [
    ""@radix-ui/react-accordion"",
    ""zod"",
    ""lucide-react"",
    ""name@1.0.2""
  ]
}
```

----------------------------------------

TITLE: Illustrate project directory structure
DESCRIPTION: Illustrates a typical project directory structure for a monorepo setup, separating application code (`apps/web`) from shared UI components (`packages/ui`).
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_9

LANGUAGE: txt
CODE:
```
apps
└── web         # Your app goes here.
    ├── app
    │   └── page.tsx
    ├── components
    │   └── login-form.tsx
    ├── components.json
    └── package.json
packages
└── ui          # Your components and dependencies are installed here.
    ├── src
    │   ├── components
    │   │   └── button.tsx
    │   ├── hooks
    │   ├── lib
    │   │   └── utils.ts
    │   └── styles
    │       └── globals.css
    ├── components.json
    └── package.json
package.json
turbo.json
```

----------------------------------------

TITLE: Running Workspaces for Development
DESCRIPTION: Commands to start the development servers for specific workspaces within the shadcn/ui monorepo. This allows developers to run the main website (www) or the shadcn-ui package in development mode for local testing and feature implementation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm --filter=www dev
```

LANGUAGE: bash
CODE:
```
pnpm --filter=shadcn-ui dev
```

----------------------------------------

TITLE: Example for $schema property in registry-item.json
DESCRIPTION: Illustrates the `$schema` property, which links the `registry-item.json` file to its official JSON Schema definition for validation and auto-completion in development environments.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json""
}
```

----------------------------------------

TITLE: Basic Card Component Usage Example in TSX
DESCRIPTION: This example illustrates the fundamental structure of the shadcn/ui Card component in TSX. It demonstrates how to compose a card with a header (including a title and description), main content, and a footer using its dedicated sub-components for clear content organization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

----------------------------------------

TITLE: Import Tailwind CSS into app.css
DESCRIPTION: Creates `app/styles/app.css` and imports the Tailwind CSS stylesheet using `@import`, specifying the source path relative to the current file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import ""tailwindcss"" source(""../"");
```

----------------------------------------

TITLE: Configure shadcn/ui Block Installation with Primitive Overrides
DESCRIPTION: This JSON configuration defines a custom registry item that installs the 'login-01' block from shadcn/ui and overrides its default 'button', 'input', and 'label' primitives with custom ones specified by external URLs. This allows for consistent styling and component usage across a project by pointing to custom component implementations.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-login"",
  ""type"": ""registry:block"",
  ""registryDependencies"": [
    ""login-01"",
    ""https://example.com/r/button.json"",
    ""https://example.com/r/input.json"",
    ""https://example.com/r/label.json""
  ]
}
```

----------------------------------------

TITLE: Use Floating UI hook with word highlighting
DESCRIPTION: Demonstrates the usage of the `useFloating` hook from `@floating-ui/react`, with an example of how to highlight specific words or characters within a code block.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { useFloating } from ""@floating-ui/react""

function MyComponent() {
  const { refs, floatingStyles } = useFloating()

  return (
    <>
      <div ref={refs.setReference} />
      <div ref={refs.setFloating} style={floatingStyles} />
    </>
  )
}
```

----------------------------------------

TITLE: SVG Path for TanStack Start Logo Icon
DESCRIPTION: Defines the SVG path data for the TanStack Start logo icon, used in UI components. This complex path describes the intricate geometric shape of the TanStack Start brand mark, suitable for scalable rendering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_1

LANGUAGE: SVG
CODE:
```
M6.93 13.688a.343.343 0 0 1 .468.132l.063.106c.48.851.98 1.66 1.5 2.426a35.65 35.65 0 0 0 2.074 2.742.345.345 0 0 1-.039.484l-.074.066c-2.543 2.223-4.191 2.665-4.953 1.333-.746-1.305-.477-3.672.808-7.11a.344.344 0 0 1 .153-.18ZM17.75 16.3a.34.34 0 0 1 .395.27l.02.1c.628 3.286.187 4.93-1.325 4.93-1.48 0-3.36-1.402-5.649-4.203a.327.327 0 0 1-.074-.222c0-.188.156-.34.344-.34h.121a32.984 32.984 0 0 0 2.809-.098c1.07-.086 2.191-.23 3.359-.437zm.871-6.977a.353.353 0 0 1 .445-.21l.102.034c3.262 1.11 4.504 2.332 3.719 3.664-.766 1.305-2.993 2.254-6.684 2.848a.362.362 0 0 1-.238-.047.343.343 0 0 1-.125-.476l.062-.106a34.07 34.07 0 0 0 1.367-2.523c.477-.989.93-2.051 1.352-3.184zM7.797 8.34a.362.362 0 0 1 .238.047.343.343 0 0 1 .125.476l-.062.106a34.088 34.088 0 0 0-1.367 2.523c-.477.988-.93 2.051-1.352 3.184a.353.353 0 0 1-.445.21l-.102-.034C1.57 13.742.328 12.52 1.113 11.188 1.88 9.883 4.106 8.934 7.797 8.34Zm5.281-3.984c2.543-2.223 4.192-2.664 4.953-1.332.746 1.304.477 3.671-.808 7.109a.344.344 0 0 1-.153.18.343.343 0 0 1-.468-.133l-.063-.106a34.64 34.64 0 0 0-1.5-2.426 35.65 35.65 0 0 0-2.074-2.742.345.345 0 0 1 .039-.484ZM7.285 2.274c1.48 0 3.364 1.402 5.649 4.203a.349.349 0 0 1 .078.218.348.348 0 0 1-.348.344l-.117-.004a34.584 34.584 0 0 0-2.809.102 35.54 35.54 0 0 0-3.363.437.343.343 0 0 1-.394-.273l-.02-.098c-.629-3.285-.188-4.93 1.324-4.93Zm2.871 5.812h3.688a.638.638 0 0 1 .55.316l1.848 3.22a.644.644 0 0 1 0 .628l-1.847 3.223a.638.638 0 0 1-.551.316h-3.688a.627.627 0 0 1-.547-.316L7.758 12.25a.644.644 0 0 1 0-.629L9.61 8.402a.627.627 0 0 1 .546-.316Zm3.23.793a.638.638 0 0 1 .552.316l1.39 2.
```

----------------------------------------

TITLE: Example for registryDependencies property in registry-item.json
DESCRIPTION: Demonstrates the `registryDependencies` property, an array of strings specifying dependencies on other items within the shadcn/ui registry or custom registries, referenced by name or URL.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  ""registryDependencies"": [
    ""button"",
    ""input"",
    ""select"",
    ""https://example.com/r/editor.json""
  ]
}
```

----------------------------------------

TITLE: Fetch Data for Sidebar Menu with React Server Components
DESCRIPTION: Provides a comprehensive example of populating a `SidebarMenu` using React Server Components. It includes a skeleton component for loading states, a server component for data fetching, and demonstrates integration with `React.Suspense` for a smooth user experience.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_37

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton showIcon />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

LANGUAGE: tsx
CODE:
```
async function NavProjects() {
  const projects = await fetchProjects()

  return (
    <SidebarMenu>
      {projects.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

LANGUAGE: tsx
CODE:
```
function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Projects</SidebarGroupLabel>
          <SidebarGroupContent>
            <React.Suspense fallback={<NavProjectsSkeleton />}>
              <NavProjects />
            </React.Suspense>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Define Functional CSS Utility Class for shadcn/ui
DESCRIPTION: This JSON configuration shows how to define a functional CSS utility class, `tab-*`, using the `@utility` directive within a shadcn/ui registry item. This allows for dynamic utility classes where the asterisk acts as a placeholder for a variable, enabling flexible styling based on custom properties.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@utility tab-*"": {
      ""tab-size"": ""var(--tab-size-*)""
    }
  }
}
```

----------------------------------------

TITLE: Initialize shadcn/ui project
DESCRIPTION: Initializes a new shadcn/ui project, setting up necessary configurations and files for component management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Import and Use shadcn/ui Button in Next.js
DESCRIPTION: This TypeScript React (TSX) example demonstrates how to import the 'Button' component from shadcn/ui and render it within a Next.js page component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/next.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Import and use shadcn/ui Button component in React
DESCRIPTION: Illustrates how to import the `Button` component from the shadcn/ui library and integrate it into a React functional component for rendering in the UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

function Home() {
  const router = useRouter()
  const state = Route.useLoaderData()

  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Add shadcn/ui Button Component
DESCRIPTION: Uses the `shadcn` CLI to add the `Button` component to the project, making it available for import and use in your application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@canary add button
```

----------------------------------------

TITLE: Initialize Remix project and Git repository
DESCRIPTION: These commands perform the initial setup for a newly created Remix project. `remix init` runs the stack's initialization script, which might configure project-specific settings, and the Git commands set up version control for the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
npx remix init
git init # if you haven't already
git add .
git commit -m ""Initialize project""
```

----------------------------------------

TITLE: Basic Dialog component usage in React
DESCRIPTION: Demonstrates the fundamental structure of a Dialog component, including a trigger to open it and content with a header, title, and description. This provides a basic, functional dialog example.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Dialog>
  <DialogTrigger>Open</DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </DialogDescription>
    </DialogHeader>
  </DialogContent>
</Dialog>
```

----------------------------------------

TITLE: Use Floating UI hook with line highlighting
DESCRIPTION: Demonstrates the usage of the `useFloating` hook from `@floating-ui/react` to position elements, with an example of how to highlight specific lines in a code block.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { useFloating } from ""@floating-ui/react""

function MyComponent() {
  const { refs, floatingStyles } = useFloating()

  return (
    <>
      <div ref={refs.setReference} />
      <div ref={refs.setFloating} style={floatingStyles} />
    </>
  )
}
```

----------------------------------------

TITLE: Example for name property in registry-item.json
DESCRIPTION: Demonstrates the `name` property, a unique string identifier for the registry item. This name is crucial for referencing the item within the registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""name"": ""hello-world""
}
```

----------------------------------------

TITLE: Basic Drawer Component Usage in React
DESCRIPTION: This example shows the fundamental structure for implementing a Drawer component. It includes a trigger to open the drawer, and content with a header, title, description, footer, and action buttons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Drawer>
  <DrawerTrigger>Open</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>
      <DrawerTitle>Are you absolutely sure?</DrawerTitle>
      <DrawerDescription>This action cannot be undone.</DrawerDescription>
    </DrawerHeader>
    <DrawerFooter>
      <Button>Submit</Button>
      <DrawerClose>
        <Button variant=""outline"">Cancel</Button>
      </DrawerClose>
    </DrawerFooter>
  </DrawerContent>
</Drawer>
```

----------------------------------------

TITLE: Create Fly.io Applications for Production and Staging
DESCRIPTION: These commands create two separate applications on Fly.io, one for the production environment and another for staging. It is crucial that the app names match the 'app' setting in the 'fly.toml' file for successful deployments.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_5

LANGUAGE: sh
CODE:
```
fly apps create indie-stack-template
```

LANGUAGE: sh
CODE:
```
fly apps create indie-stack-template-staging
```

----------------------------------------

TITLE: Example `components.json` for Monorepo Workspaces
DESCRIPTION: These JSON configuration files define schema, style, RSC/TSX settings, Tailwind CSS configuration, icon library, and crucial aliases for both the application workspace (`apps/web`) and the shared UI package workspace (`packages/ui`). Proper alias definition is essential for correct component, hook, and utility imports across the monorepo.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": true,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""../../packages/ui/src/styles/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""iconLibrary"": ""lucide"",
  ""aliases"": {
    ""components"": ""@/components"",
    ""hooks"": ""@/hooks"",
    ""lib"": ""@/lib"",
    ""utils"": ""@workspace/ui/lib/utils"",
    ""ui"": ""@workspace/ui/components""
  }
}
```

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": true,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""src/styles/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""iconLibrary"": ""lucide"",
  ""aliases"": {
    ""components"": ""@workspace/ui/components"",
    ""utils"": ""@workspace/ui/lib/utils"",
    ""hooks"": ""@workspace/ui/hooks"",
    ""lib"": ""@workspace/ui/lib"",
    ""ui"": ""@workspace/ui/components""
  }
}
```

----------------------------------------

TITLE: API Reference for useSidebar Hook Properties and Methods
DESCRIPTION: This section details the properties and methods exposed by the `useSidebar` hook. It includes state variables like `state`, `open`, `openMobile`, and `isMobile`, along with functions such as `setOpen`, `setOpenMobile`, and `toggleSidebar` for programmatic control of the sidebar's behavior.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_16

LANGUAGE: APIDOC
CODE:
```
useSidebar Hook Properties:

state: ""expanded"" | ""collapsed""
  - Description: The current state of the sidebar.

open: boolean
  - Description: Whether the sidebar is open.

setOpen: (open: boolean) => void
  - Description: Sets the open state of the sidebar.

openMobile: boolean
  - Description: Whether the sidebar is open on mobile.

setOpenMobile: (open: boolean) => void
  - Description: Sets the open state of the sidebar on mobile.

isMobile: boolean
  - Description: Whether the sidebar is on mobile.

toggleSidebar: () => void
  - Description: Toggles the sidebar. Desktop and mobile.
```

----------------------------------------

TITLE: Import and use shadcn/ui Button component
DESCRIPTION: Demonstrates how to import and render the `Button` component from `shadcn/ui` within a React application. This example shows basic usage within `src/App.tsx`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

function App() {
  return (
    <div className=""flex min-h-svh flex-col items-center justify-center"">
      <Button>Click me</Button>
    </div>
  )
}

export default App
```

----------------------------------------

TITLE: Example for title property in registry-item.json
DESCRIPTION: Shows the `title` property, a human-readable, short, and descriptive string used for displaying the registry item in user interfaces.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""title"": ""Hello World""
}
```

----------------------------------------

TITLE: Add shadcn/ui components to a Laravel project
DESCRIPTION: Use the `npx shadcn@latest add` command to integrate specific shadcn/ui components into your project. This example adds the `Switch` component, placing it in `resources/js/components/ui/switch.tsx`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/laravel.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add switch
```

----------------------------------------

TITLE: Example Usage of FormField with React Hook Form
DESCRIPTION: This example demonstrates how to integrate `FormField` with `react-hook-form` by passing the `control` object and defining a `name`. It shows rendering a simple `Input` component for a username field, along with associated label, description, and message components, showcasing a practical application of the form structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const form = useForm()

<FormField
  control={form.control}
  name=""username""
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder=""shadcn"" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>
```

----------------------------------------

TITLE: Import Tailwind CSS into application styles
DESCRIPTION: Creates an `app.css` file within the `app/styles` directory. This file imports the Tailwind CSS framework, making its utility classes available throughout the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import ""tailwindcss"" source(""../"");
```

----------------------------------------

TITLE: Fetch data for SidebarMenu using SWR in TSX
DESCRIPTION: Provides an example of fetching project data for a `SidebarMenu` using the SWR library. It demonstrates how to handle loading states by displaying a skeleton UI and then rendering the fetched data once available.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_39

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useSWR(""/api/projects"", fetcher)

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Configure Gatsby project setup questions
DESCRIPTION: Illustrates the interactive prompts encountered during the Gatsby project creation process, guiding the user to select options such as project name, TypeScript, and Tailwind CSS for styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/gatsby.mdx#_snippet_1

LANGUAGE: txt
CODE:
```
✔ What would you like to call your site?
· your-app-name
✔ What would you like to name the folder where your site will be created?
· your-app-name
✔ Will you be using JavaScript or TypeScript?
· TypeScript
✔ Will you be using a CMS?
· Choose whatever you want
✔ Would you like to install a styling system?
· Tailwind CSS
✔ Would you like to install additional features with other plugins?
· Choose whatever you want
✔ Shall we do this? (Y/n) · Yes
```

----------------------------------------

TITLE: Example for type property in registry-item.json
DESCRIPTION: Demonstrates the `type` property, which categorizes the registry item (e.g., `registry:block`, `registry:component`, `registry:hook`) and determines its resolution behavior.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  ""type"": ""registry:block""
}
```

----------------------------------------

TITLE: Implement Sidebar with Dynamic Menu Items
DESCRIPTION: This snippet demonstrates how to populate the `AppSidebar` with dynamic menu items using `SidebarMenu`, `SidebarMenuButton`, and `SidebarMenuItem`. It includes an example array of menu items with icons and URLs, rendered within `SidebarGroup` and `SidebarGroupContent`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import { Calendar, Home, Inbox, Search, Settings } from ""lucide-react""

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from ""@/components/ui/sidebar""

// Menu items.
const items = [
  {
    title: ""Home"",
    url: ""#"",
    icon: Home,
  },
  {
    title: ""Inbox"",
    url: ""#"",
    icon: Inbox,
  },
  {
    title: ""Calendar"",
    url: ""#"",
    icon: Calendar,
  },
  {
    title: ""Search"",
    url: ""#"",
    icon: Search,
  },
  {
    title: ""Settings"",
    url: ""#"",
    icon: Settings,
  },
]

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {items.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Build a Dynamic Sidebar Menu for Project Listings in Shadcn UI
DESCRIPTION: Provides an example of building a dynamic navigation menu within a `SidebarGroup` using `SidebarMenu`, `SidebarMenuItem`, and `SidebarMenuButton`. It demonstrates iterating over data to render a list of clickable items, like projects.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_22

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarContent>
    <SidebarGroup>
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarGroupContent>
        <SidebarMenu>
          {projects.map((project) => (
            <SidebarMenuItem key={project.name}>
              <SidebarMenuButton asChild>
                <a href={project.url}>
                  <project.icon />
                  <span>{project.name}</span>
                </a>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Basic Radio Group Component Usage Example
DESCRIPTION: This example illustrates how to render a basic Radio Group with two selectable options. It utilizes the `RadioGroup`, `RadioGroupItem`, and `Label` components, setting a default selected value for initial state.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<RadioGroup defaultValue=""option-one"">
  <div className=""flex items-center space-x-2"">
    <RadioGroupItem value=""option-one"" id=""option-one"" />
    <Label htmlFor=""option-one"">Option One</Label>
  </div>
  <div className=""flex items-center space-x-2"">
    <RadioGroupItem value=""option-two"" id=""option-two"" />
    <Label htmlFor=""option-two"">Option Two</Label>
  </div>
</RadioGroup>
```

----------------------------------------

TITLE: Rendering Dynamic Items in SidebarMenu
DESCRIPTION: Provides an example of using `SidebarMenu` within a `SidebarGroup` to render a dynamic list of items, such as projects. It demonstrates mapping over an array to create `SidebarMenuItem` components, each containing a `SidebarMenuButton` that acts as a link.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarContent>
    <SidebarGroup>
      <SidebarGroupLabel>Projects</SidebarGroupLabel>
      <SidebarGroupContent>
        <SidebarMenu>
          {projects.map((project) => (
            <SidebarMenuItem key={project.name}>
              <SidebarMenuButton asChild>
                <a href={project.url}>
                  <project.icon />
                  <span>{project.name}</span>
                </a>
              </SidebarMenuButton>
            </SidebarMenuItem>
          ))}
        </SidebarMenu>
      </SidebarGroupContent>
    </SidebarGroup>
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Install Tailwind CSS dependencies
DESCRIPTION: Installs `tailwindcss`, `@tailwindcss/postcss`, and `postcss` using npm, which are necessary for integrating Tailwind CSS into the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install tailwindcss @tailwindcss/postcss postcss
```

----------------------------------------

TITLE: Install shadcn/ui block and override primitives
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-login'. It installs the 'login-01' block from the shadcn/ui registry and overrides its default 'button', 'input', and 'label' primitives with custom ones specified by external URLs. This allows for consistent styling across components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-login"",
  ""type"": ""registry:block"",
  ""registryDependencies"": [
    ""login-01"",
    ""https://example.com/r/button.json"",
    ""https://example.com/r/input.json"",
    ""https://example.com/r/label.json""
  ]
}
```

----------------------------------------

TITLE: Configure TypeScript Path Aliases
DESCRIPTION: Updates the `tsconfig.json` file to add `baseUrl` and `paths` configurations, enabling `@/*` aliases to resolve to `./app/*` for cleaner module imports.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
{
  ""compilerOptions"": {
    ""jsx"": ""react-jsx"",
    ""moduleResolution"": ""Bundler"",
    ""module"": ""ESNext"",
    ""target"": ""ES2022"",
    ""skipLibCheck"": true,
    ""strictNullChecks"": true,
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [""./app/*""]
    }
  }
}
```

----------------------------------------

TITLE: Define Component-Specific CSS Styles for shadcn/ui
DESCRIPTION: This JSON configuration defines component-specific CSS styles using the `@layer components` directive for a 'card' component within a shadcn/ui registry item. It sets properties like background color, border-radius, padding, and box-shadow using custom CSS variables, promoting consistent component styling and reusability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_9

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-card"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@layer components"": {
      ""card"": {
        ""background-color"": ""var(--color-white)"",
        ""border-radius"": ""var(--rounded-lg)"",
        ""padding"": ""var(--spacing-6)"",
        ""box-shadow"": ""var(--shadow-xl)""
      }
    }
  }
}
```

----------------------------------------

TITLE: Example registry-item.json Schema Definition
DESCRIPTION: Illustrates a complete `registry-item.json` file structure, defining a custom registry item with properties like name, type, title, description, associated files, and CSS variables. This serves as a template for creating new registry entries.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""type"": ""registry:block"",
  ""title"": ""Hello World"",
  ""description"": ""A simple hello world component."",
  ""files"": [
    {
      ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/use-hello-world.ts"",
      ""type"": ""registry:hook""
    }
  ],
  ""cssVars"": {
    ""theme"": {
      ""font-heading"": ""Poppins, sans-serif""
    },
    ""light"": {
      ""brand"": ""20 14.3% 4.1%""
    },
    ""dark"": {
      ""brand"": ""20 14.3% 4.1%""
    }
  }
}
```

----------------------------------------

TITLE: Provide Installation Documentation for shadcn-ui Registry Items
DESCRIPTION: The `docs` property allows developers to include custom documentation or messages that will be displayed when the registry item is installed via the CLI. This is useful for providing important setup instructions, environment variable requirements, or any other post-installation guidance. It ensures users receive immediate, context-specific information.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  ""docs"": ""Remember to add the FOO_BAR environment variable to your .env file.""
}
```

----------------------------------------

TITLE: Implementing SidebarFooter with User Dropdown (React/TypeScript)
DESCRIPTION: Demonstrates the integration of the `SidebarFooter` component to add a sticky footer to a sidebar. This example includes a `DropdownMenu` for user-related actions (Account, Billing, Sign out), showing how to structure interactive elements at the bottom of the sidebar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <SidebarProvider>
      <Sidebar>
        <SidebarHeader />
        <SidebarContent />
        <SidebarFooter>
          <SidebarMenu>
            <SidebarMenuItem>
              <DropdownMenu>
                <DropdownMenuTrigger asChild>
                  <SidebarMenuButton>
                    <User2 /> Username
                    <ChevronUp className=""ml-auto"" />
                  </SidebarMenuButton>
                </DropdownMenuTrigger>
                <DropdownMenuContent
                  side=""top""
                  className=""w-[--radix-popper-anchor-width]""
                >
                  <DropdownMenuItem>
                    <span>Account</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Billing</span>
                  </DropdownMenuItem>
                  <DropdownMenuItem>
                    <span>Sign out</span>
                  </DropdownMenuItem>
                </DropdownMenuContent>
              </DropdownMenu>
            </SidebarMenuItem>
          </SidebarMenu>
        </SidebarFooter>
      </Sidebar>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Import toast Function for Sonner
DESCRIPTION: Imports the `toast` function from the `sonner` library, which is the primary API for creating and displaying toast notifications in your React components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sonner.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { toast } from ""sonner""
```

----------------------------------------

TITLE: Define a Custom shadcn/ui Theme
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` theme. It specifies a comprehensive set of CSS variables for `background`, `foreground`, `primary`, `primary-foreground`, `ring`, `sidebar-primary`, `sidebar-primary-foreground`, and `sidebar-ring` for both light and dark modes, using `oklch` color values. This allows for complete customization of the UI's color palette.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-theme"",
  ""type"": ""registry:theme"",
  ""cssVars"": {
    ""light"": {
      ""background"": ""oklch(1 0 0)"",
      ""foreground"": ""oklch(0.141 0.005 285.823)"",
      ""primary"": ""oklch(0.546 0.245 262.881)"",
      ""primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""ring"": ""oklch(0.746 0.16 232.661)"",
      ""sidebar-primary"": ""oklch(0.546 0.245 262.881)"",
      ""sidebar-primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""sidebar-ring"": ""oklch(0.746 0.16 232.661)""
    },
    ""dark"": {
      ""background"": ""oklch(1 0 0)"",
      ""foreground"": ""oklch(0.141 0.005 285.823)"",
      ""primary"": ""oklch(0.707 0.165 254.624)"",
      ""primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""ring"": ""oklch(0.707 0.165 254.624)"",
      ""sidebar-primary"": ""oklch(0.707 0.165 254.624)"",
      ""sidebar-primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""sidebar-ring"": ""oklch(0.707 0.165 254.624)""
    }
  }
}
```

----------------------------------------

TITLE: shadcn/ui components.json Configuration Structure
DESCRIPTION: Comprehensive documentation for the `components.json` file, detailing all available properties and their usage for configuring shadcn/ui components within a project. This includes settings for schema validation, styling, Tailwind CSS integration, React Server Components, TypeScript/JavaScript preference, and path aliases.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/components-json.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
components.json Configuration:

  $schema: string
    - Description: Link to the JSON Schema for validation of the components.json file.
    - Example: ""https://ui.shadcn.com/schema.json""

  style: ""new-york""
    - Description: Defines the style preset for your components. This setting cannot be changed after initialization.
    - Example: ""new-york""

  tailwind: object
    - Description: Configuration settings related to Tailwind CSS integration within your project.
    - Properties:
      config: string | ""tailwind.config.js"" | ""tailwind.config.ts""
        - Description: Path to your tailwind.config.js or tailwind.config.ts file. For Tailwind CSS v4, this should be left blank.
        - Example: ""tailwind.config.js""
      css: string
        - Description: Path to the CSS file where Tailwind CSS is imported into your project.
        - Example: ""styles/global.css""
      baseColor: ""gray"" | ""neutral"" | ""slate"" | ""stone"" | ""zinc""
        - Description: Used to generate the default color palette for components. This setting cannot be changed after initialization.
        - Example: ""gray""
      cssVariables: boolean
        - Description: Determines whether to use CSS variables (true) or Tailwind CSS utility classes (false) for theming. This setting cannot be changed after initialization.
        - Example: true
      prefix: string
        - Description: The prefix to apply to Tailwind CSS utility classes for components.
        - Example: ""tw-""

  rsc: boolean
    - Description: Flag to enable support for React Server Components. When true, the CLI automatically adds a `use client` directive to client components.
    - Example: true

  tsx: boolean
    - Description: Determines whether components are generated as TypeScript (.tsx) or JavaScript (.jsx) files.
    - Example: true

  aliases: object
    - Description: Path aliases used by the CLI to correctly place generated components based on your tsconfig.json or jsconfig.json paths.
    - Properties:
      utils: string
        - Description: Import alias for utility functions.
        - Example: ""@/lib/utils""
      components: string
        - Description: Import alias for general components.
        - Example: ""@/components""
      ui: string
        - Description: Import alias for `ui` components, determining their installation directory.
        - Example: ""@/app/ui""
      lib: string
        - Description: Import alias for `lib` functions (e.g., format-date, generate-id).
        - Example: ""@/lib""
      hooks: string
        - Description: Import alias for `hooks` (e.g., use-media-query, use-toast).
        - Example: ""@/hooks""
```

----------------------------------------

TITLE: Example for author property in registry-item.json
DESCRIPTION: Shows the `author` property, an optional string field used to specify the creator or maintainer of the registry item, often including an email address.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  ""author"": ""John Doe <john@doe.com>""
}
```

----------------------------------------

TITLE: Define a Custom shadcn/ui Theme
DESCRIPTION: This JSON configuration defines a custom `shadcn/ui` theme. It specifies a comprehensive set of CSS variables for `background`, `foreground`, `primary`, `primary-foreground`, `ring`, `sidebar-primary`, `sidebar-primary-foreground`, and `sidebar-ring` for both light and dark modes, using `oklch` color values. This allows for complete customization of the UI's color palette.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-theme"",
  ""type"": ""registry:theme"",
  ""cssVars"": {
    ""light"": {
      ""background"": ""oklch(1 0 0)"",
      ""foreground"": ""oklch(0.141 0.005 285.823)"",
      ""primary"": ""oklch(0.546 0.245 262.881)"",
      ""primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""ring"": ""oklch(0.746 0.16 232.661)"",
      ""sidebar-primary"": ""oklch(0.546 0.245 262.881)"",
      ""sidebar-primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""sidebar-ring"": ""oklch(0.746 0.16 232.661)""
    },
    ""dark"": {
      ""background"": ""oklch(1 0 0)"",
      ""foreground"": ""oklch(0.141 0.005 285.823)"",
      ""primary"": ""oklch(0.707 0.165 254.624)"",
      ""primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""ring"": ""oklch(0.707 0.165 254.624)"",
      ""sidebar-primary"": ""oklch(0.707 0.165 254.624)"",
      ""sidebar-primary-foreground"": ""oklch(0.97 0.014 254.604)"",
      ""sidebar-ring"": ""oklch(0.707 0.165 254.624)""
    }
  }
}
```

----------------------------------------

TITLE: TanStack Start Icon SVG Path Definition
DESCRIPTION: SVG path data for the TanStack Start icon, used in UI components to represent the TanStack ecosystem. This path defines the complex geometric shape of the icon.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_1

LANGUAGE: SVG Path
CODE:
```
M6.93 13.688a.343.343 0 0 1 .468.132l.063.106c.48.851.98 1.66 1.5 2.426a35.65 35.65 0 0 0 2.074 2.742.345.345 0 0 1-.039.484l-.074.066c-2.543 2.223-4.191 2.665-4.953 1.333-.746-1.305-.477-3.672.808-7.11a.344.344 0 0 1 .153-.18ZM17.75 16.3a.34.34 0 0 1 .395.27l.02.1c.628 3.286.187 4.93-1.325 4.93-1.48 0-3.36-1.402-5.649-4.203a.327.327 0 0 1-.074-.222c0-.188.156-.34.344-.34h.121a32.984 32.984 0 0 0 2.809-.098c1.07-.086 2.191-.23 3.359-.437zm.871-6.977a.353.353 0 0 1 .445-.21l.102.034c3.262 1.11 4.504 2.332 3.719 3.664-.766 1.305-2.993 2.254-6.684 2.848a.362.362 0 0 1-.238-.047.343.343 0 0 1-.125-.476l.062-.106a34.07 34.07 0 0 0 1.367-2.523c.477-.989.93-2.051 1.352-3.184zM7.797 8.34a.362.362 0 0 1 .238.047.343.343 0 0 1 .125.476l-.062.106a34.088 34.088 0 0 0-1.367 2.523c-.477.988-.93 2.051-1.352 3.184a.353.353 0 0 1-.445.21l-.102-.034C1.57 13.742.328 12.52 1.113 11.188 1.88 9.883 4.106 8.934 7.797 8.34Zm5.281-3.984c2.543-2.223 4.192-2.664 4.953-1.332.746 1.304.477 3.671-.808 7.109a.344.344 0 0 1-.153.18.343.343 0 0 1-.468-.133l-.063-.106a34.64 34.64 0 0 0-1.5-2.426 35.65 35.65 0 0 0-2.074-2.742.345.345 0 0 1 .039-.484ZM7.285 2.274c1.48 0 3.364 1.402 5.649 4.203a.349.349 0 0 1 .078.218.348.348 0 0 1-.348.344l-.117-.004a34.584 34.584 0 0 0-2.809.102 35.54 35.54 0 0 0-3.363.437.343.343 0 0 1-.394-.273l-.02-.098c-.629-3.285-.188-4.93 1.324-4.93Zm2.871 5.812h3.688a.638.638 0 0 1 .55.316l1.848 3.22a.644.644 0 0 1 0 .628l-1.847 3.223a.638.638 0 0 1-.551.316h-3.688a.627.627 0 0 1-.547-.316L7.758 12.25a.644.644 0 0 1 0-.629L9.61 8.402a.627.627 0 0 1 .546-.316Zm3.23.793a.638.638 0 0 1 .552.316l1.39 2.426a.644.644 0 0 1 0 .629l-1.39 2
```

----------------------------------------

TITLE: Define Base CSS Styles for shadcn/ui Registry Items
DESCRIPTION: This JSON configuration specifies base CSS styles using the `@layer base` directive within a shadcn/ui registry item. It demonstrates how to set global styles for HTML elements like `h1` and `h2` by referencing custom CSS variables for font sizes, ensuring consistent typography across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_8

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-style"",
  ""type"": ""registry:style"",
  ""css"": {
    ""@layer base"": {
      ""h1"": {
        ""font-size"": ""var(--text-2xl)""
      },
      ""h2"": {
        ""font-size"": ""var(--text-xl)""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure TypeScript Path Aliases
DESCRIPTION: Configures path aliases in `tsconfig.json` to simplify module imports. The example sets up an `@/*` alias mapping to the project root, allowing for absolute imports like `@/components`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""compilerOptions"": {
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [""./*""]
    }
  }
}
```

----------------------------------------

TITLE: Install next-themes Package
DESCRIPTION: Start by installing the `next-themes` package using npm. This package provides the necessary utilities for implementing dark mode functionality in a Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next-themes
```

----------------------------------------

TITLE: Create a Basic Bar Chart Component with Recharts and shadcn/ui
DESCRIPTION: This example demonstrates how to create a basic bar chart component using Recharts and shadcn/ui's `ChartContainer` and `ChartTooltipContent`. It shows the essential imports and the structural setup for rendering a simple bar chart with custom components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Bar, BarChart } from ""recharts""

import { ChartContainer, ChartTooltipContent } from ""@/components/ui/charts""

export function MyChart() {
  return (
    <ChartContainer>
      <BarChart data={data}>
        <Bar dataKey=""value"" />
        <ChartTooltip content={<ChartTooltipContent />} />
      </BarChart>
    </ChartContainer>
  )
}
```

----------------------------------------

TITLE: Configure PostCSS for Tailwind CSS
DESCRIPTION: Creates `postcss.config.ts` at the project root to configure PostCSS plugins, specifically enabling `@tailwindcss/postcss` for processing CSS.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export default {
  plugins: {
    ""@tailwindcss/postcss"": {},
  },
}
```

----------------------------------------

TITLE: Use shadcn/ui Button component in Remix
DESCRIPTION: Demonstrates how to import and use the `Button` component from shadcn/ui within a Remix route component. This example shows a basic usage of the component in a JSX context.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Button } from ""~/components/ui/button""

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Configure TypeScript Path Aliases
DESCRIPTION: Configures path aliases in `tsconfig.json` to simplify module imports. The example sets up an `@/*` alias mapping to the project root, allowing for absolute imports like `@/components`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""compilerOptions"": {
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [""./*""]
    }
  }
}
```

----------------------------------------

TITLE: Import shadcn/ui Components, Hooks, and Utilities in Monorepo
DESCRIPTION: Components, hooks, and utility functions installed by the shadcn/ui CLI in a monorepo can be imported from the `@workspace/ui` package. This example demonstrates importing a `Button` component, `useTheme` hook, and `cn` utility function.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Button } from ""@workspace/ui/components/button""
```

LANGUAGE: tsx
CODE:
```
import { useTheme } from ""@workspace/ui/hooks/use-theme""
import { cn } from ""@workspace/ui/lib/utils""
```

----------------------------------------

TITLE: Basic Sidebar Component Usage
DESCRIPTION: Provides a minimal example of rendering the `Sidebar` component within a React functional component. This snippet shows the basic import and usage of the `Sidebar` component from `@/components/ui/sidebar`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import { Sidebar } from ""@/components/ui/sidebar""

export function AppSidebar() {
  return <Sidebar />
}
```

----------------------------------------

TITLE: Initialize Git Repository and Add Remote Origin
DESCRIPTION: These commands initialize a new Git repository in the current directory and then add a remote origin URL, linking the local repository to a GitHub repository. This setup is necessary before pushing code for continuous integration and deployment.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_6

LANGUAGE: sh
CODE:
```
git init
```

LANGUAGE: sh
CODE:
```
git remote add origin <ORIGIN_URL>
```

----------------------------------------

TITLE: Configure TypeScript path aliases for application modules
DESCRIPTION: Adds `baseUrl` and `paths` configurations to the `tsconfig.json` file. This allows for resolving module imports using the `@/*` alias, mapping them to the `./app/*` directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
{
  ""compilerOptions"": {
    ""jsx"": ""react-jsx"",
    ""moduleResolution"": ""Bundler"",
    ""module"": ""ESNext"",
    ""target"": ""ES2022"",
    ""skipLibCheck"": true,
    ""strictNullChecks"": true,
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [""./app/*""]
    }
  }
}
```

----------------------------------------

TITLE: Define Minimal AppSidebar with Sidebar and SidebarContent
DESCRIPTION: This snippet illustrates the minimal implementation of `AppSidebar` component, containing only `Sidebar` and `SidebarContent` components, serving as a starting point for building a custom sidebar as part of a step-by-step tutorial.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent } from ""@/components/ui/sidebar""

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent />
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Configure shadcn/ui components.json settings
DESCRIPTION: Illustrates the interactive prompts for configuring `components.json`, allowing users to select their preferred style, base color, and whether to use CSS variables for colors.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_2

LANGUAGE: txt
CODE:
```
Which style would you like to use? › New York
Which color would you like to use as base color? › Zinc
Do you want to use CSS variables for colors? › no / yes
```

----------------------------------------

TITLE: Render Basic Table Component in React/TypeScript
DESCRIPTION: This example illustrates a basic JSX structure for rendering a `Table` component. It includes a `TableCaption` for accessibility, a `TableHeader` with `TableHead` elements for column titles, and a `TableBody` containing `TableRow` and `TableCell` elements to display data, demonstrating a typical invoice list.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/table.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Table>
  <TableCaption>A list of your recent invoices.</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead className=""w-[100px]"">Invoice</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Method</TableHead>
      <TableHead className=""text-right"">Amount</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell className=""font-medium"">INV001</TableCell>
      <TableCell>Paid</TableCell>
      <TableCell>Credit Card</TableCell>
      <TableCell className=""text-right"">$250.00</TableCell>
    </TableRow>
  </TableBody>
</Table>
```

----------------------------------------

TITLE: Basic Sheet component usage in TSX
DESCRIPTION: Demonstrates the fundamental structure of a Sheet component, including a trigger to open it and content organized within a header, title, and description. This provides a complete, minimal example for displaying a Sheet.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sheet.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent>
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

----------------------------------------

TITLE: Import and render a shadcn/ui Switch component in React
DESCRIPTION: After adding a shadcn/ui component, import it into your React pages or components. This example demonstrates importing the `Switch` component and rendering it within a functional React component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/laravel.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Switch } from ""@/components/ui/switch""

const MyPage = () => {
  return (
    <div>
      <Switch />
    </div>
  )
}

export default MyPage
```

----------------------------------------

TITLE: Basic Sidebar Component Usage
DESCRIPTION: Provides a minimal example of rendering the `Sidebar` component within a React functional component. This snippet shows the basic import and usage of the `Sidebar` component from `@/components/ui/sidebar`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
import { Sidebar } from ""@/components/ui/sidebar""

export function AppSidebar() {
  return <Sidebar />
}
```

----------------------------------------

TITLE: Basic Popover component usage in React
DESCRIPTION: This example illustrates the fundamental JSX structure for a Popover component. It includes the PopoverTrigger, which activates the popover, and the PopoverContent, where the rich content to be displayed is placed.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Popover>
  <PopoverTrigger>Open</PopoverTrigger>
  <PopoverContent>Place content for the popover here.</PopoverContent>
</Popover>
```

----------------------------------------

TITLE: Import and render shadcn/ui Button component in Astro
DESCRIPTION: This Astro page example demonstrates how to import the `Button` component from the configured path alias (`@/components/ui/button`) and render it within an Astro page. It showcases basic usage of a shadcn/ui component after installation and setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/astro.mdx#_snippet_4

LANGUAGE: astro
CODE:
```
---
import { Button } from ""@/components/ui/button""
---

<html lang=""en"">
	<head>
		<meta charset=""utf-8"" />
		<meta name=""viewport"" content=""width=device-width"" />
		<link rel=""icon"" type=""image/svg+xml"" href=""/favicon.svg"" />
		<meta name=""generator"" content={Astro.generator} />
		<title>Astro + TailwindCSS</title>
	</head>

	<body>
		<div className=""grid place-items-center h-screen content-center"">
			<Button>Button</Button>
		</div>
	</body>
</html>
```

----------------------------------------

TITLE: Implementing SidebarHeader with DropdownMenu (React/TypeScript)
DESCRIPTION: Illustrates how to use the `SidebarHeader` component to create a sticky header within a sidebar. This example demonstrates embedding a `DropdownMenu` for workspace selection, showcasing how to integrate interactive elements and manage layout within the sidebar's header section.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_16

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader>
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton>
              Select Workspace
              <ChevronDown className=""ml-auto"" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent className=""w-[--radix-popper-anchor-width]"">
            <DropdownMenuItem>
              <span>Acme Inc</span>
            </DropdownMenuItem>
            <DropdownMenuItem>
              <span>Acme Corp.</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  </SidebarHeader>
</Sidebar>
```

----------------------------------------

TITLE: Define Custom Theme Variables for shadcn/ui
DESCRIPTION: This JSON configuration demonstrates how to add custom CSS variables to the 'theme' object within a shadcn/ui registry item. It allows defining project-specific font families and shadow styles that can be referenced throughout the application's CSS, ensuring brand consistency.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-theme"",
  ""type"": ""registry:theme"",
  ""cssVars"": {
    ""theme"": {
      ""font-heading"": ""Inter, sans-serif"",
      ""shadow-card"": ""0 0 0 1px rgba(0, 0, 0, 0.1)""
    }
  }
}
```

----------------------------------------

TITLE: Initialize shadcn/ui Monorepo Project
DESCRIPTION: This command initializes a new shadcn/ui monorepo project using `pnpm dlx`. It sets up the basic project structure and configuration required for a monorepo.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pnpm dlx shadcn@latest init
```

----------------------------------------

TITLE: Render DataTable Component in a Next.js Page
DESCRIPTION: This example demonstrates integrating and rendering the `DataTable` component within an `async` Next.js page. It includes a `getData` function to simulate fetching payment data, which is then passed along with column definitions to the `DataTable` component for display.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { columns, Payment } from ""./columns""
import { DataTable } from ""./data-table""

async function getData(): Promise<Payment[]> {
  // Fetch data from your API here.
  return [
    {
      id: ""728ed52f"",
      amount: 100,
      status: ""pending"",
      email: ""m@example.com"",
    },
    // ...
  ]
}

export default async function DemoPage() {
  const data = await getData()

  return (
    <div className=""container mx-auto py-10"">
      <DataTable columns={columns} data={data} />
    </div>
  )
}
```

----------------------------------------

TITLE: Basic Accordion component usage in React/TypeScript
DESCRIPTION: This example illustrates a fundamental implementation of the Accordion component with a single collapsible item. It showcases the structure using `AccordionItem`, `AccordionTrigger`, and `AccordionContent` to create an interactive disclosure element.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/accordion.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Accordion type=""single"" collapsible>
  <AccordionItem value=""item-1"">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent>
      Yes. It adheres to the WAI-ARIA design pattern.
    </AccordionContent>
  </AccordionItem>
</Accordion>
```

----------------------------------------

TITLE: Interactive configuration for Gatsby project setup
DESCRIPTION: Guides the user through configuring a new Gatsby project. This interactive prompt allows specifying the site name, folder, language (TypeScript), and styling system (Tailwind CSS).
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#_snippet_1

LANGUAGE: txt
CODE:
```
✔ What would you like to call your site?
· your-app-name
✔ What would you like to name the folder where your site will be created?
· your-app-name
✔ Will you be using JavaScript or TypeScript?
· TypeScript
✔ Will you be using a CMS?
· Choose whatever you want
✔ Would you like to install a styling system?
· Tailwind CSS
✔ Would you like to install additional features with other plugins?
· Choose whatever you want
✔ Shall we do this? (Y/n) · Yes
```

----------------------------------------

TITLE: Authenticate with Fly.io CLI
DESCRIPTION: This command initiates the authentication process for the Fly.io command-line interface, allowing users to sign up or log in to their Fly.io account. It is a prerequisite for deploying applications to Fly.io.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
fly auth signup
```

----------------------------------------

TITLE: Define Custom CSS Animations for shadcn/ui Components
DESCRIPTION: This JSON configuration shows how to define custom CSS animations within a shadcn/ui registry item. It includes both the `@keyframes` definition for the 'wiggle' animation and its assignment to a CSS variable `--animate-wiggle` within the `theme` object, allowing components to easily apply the animation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""cssVars"": {
    ""theme"": {
      ""--animate-wiggle"": ""wiggle 1s ease-in-out infinite""
    }
  },
  ""css"": {
    ""@keyframes wiggle"": {
      ""0%, 100%"": {
        ""transform"": ""rotate(-3deg)""
      },
      ""50%"": {
        ""transform"": ""rotate(3deg)""
      }
    }
  }
}
```

----------------------------------------

TITLE: List All Available shadcn UI Components
DESCRIPTION: Executes the `shadcn add` command without any arguments to display a comprehensive list of all available shadcn UI components that can be added to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx shadcn add
```

----------------------------------------

TITLE: Add custom animations to shadcn/ui components
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-component'. It demonstrates how to add custom CSS animations to shadcn/ui. It defines a `--animate-wiggle` CSS variable in `cssVars` that references a `wiggle` keyframe animation, which is defined in the `css` section. This allows for integrating custom visual effects.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""cssVars"": {
    ""theme"": {
      ""--animate-wiggle"": ""wiggle 1s ease-in-out infinite""
    }
  },
  ""css"": {
    ""@keyframes wiggle"": {
      ""0%, 100%"": {
        ""transform"": ""rotate(-3deg)""
      },
      ""50%"": {
        ""transform"": ""rotate(3deg)""
      }
    }
  }
}
```

----------------------------------------

TITLE: Create Collapsible Sidebar Menu
DESCRIPTION: This example demonstrates how to make a `SidebarMenu` component collapsible. By wrapping the `SidebarMenu` and its `SidebarMenuSub` components within a `Collapsible` component, you enable the expansion and collapse of menu sections.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_30

LANGUAGE: tsx
CODE:
```
<SidebarMenu>
  <Collapsible defaultOpen className=""group/collapsible"">
    <SidebarMenuItem>
      <CollapsibleTrigger asChild>
        <SidebarMenuButton />
      </CollapsibleTrigger>
      <CollapsibleContent>
        <SidebarMenuSub>
          <SidebarMenuSubItem />
        </SidebarMenuSub>
      </CollapsibleContent>
    </SidebarMenuItem>
  </Collapsible>
</SidebarMenu>
```

----------------------------------------

TITLE: Integrate ThemeProvider into React Root Layout
DESCRIPTION: This example shows how to wrap your main application component (`App.tsx`) with the custom `ThemeProvider`. It demonstrates setting an initial `defaultTheme` and specifying a `storageKey` for theme persistence across sessions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/vite.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from ""@/components/theme-provider""

function App() {
  return (
    <ThemeProvider defaultTheme=""dark"" storageKey=""vite-ui-theme"">
      {children}
    </ThemeProvider>
  )
}

export default App
```

----------------------------------------

TITLE: Configure shadcn/ui components.json
DESCRIPTION: This JSON configuration file defines the setup for shadcn/ui components within a project. It specifies styling, RSC (React Server Components) usage, TypeScript support, Tailwind CSS integration details, path aliases for various project directories, and the icon library to be used.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": false,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""src/styles/globals.css"",
    ""baseColor"": ""neutral"",
    ""cssVariables"": true,
    ""prefix"": """"
  },
  ""aliases"": {
    ""components"": ""@/components"",
    ""utils"": ""@/lib/utils"",
    ""ui"": ""@/components/ui"",
    ""lib"": ""@/lib"",
    ""hooks"": ""@/hooks""
  },
  ""iconLibrary"": ""lucide""
}
```

----------------------------------------

TITLE: Implement Input OTP with Alphanumeric Pattern
DESCRIPTION: Shows how to apply a custom pattern to the Input OTP component using the `pattern` prop. This example uses `REGEXP_ONLY_DIGITS_AND_CHARS` to restrict input to alphanumeric characters.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { REGEXP_ONLY_DIGITS_AND_CHARS } from ""input-otp""

...

<InputOTP
  maxLength={6}
  pattern={REGEXP_ONLY_DIGITS_AND_CHARS}
>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    {/* ... */}
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: React Component for 'Open in v0' Button
DESCRIPTION: A reusable React component (`OpenInV0Button`) that renders a styled button to facilitate opening a given URL in v0.dev. It leverages shadcn/ui's Button component and constructs the appropriate API URL for integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/open-in-v0.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { Button } from ""@/components/ui/button""

export function OpenInV0Button({ url }: { url: string }) {
  return (
    <Button
      aria-label=""Open in v0""
      className=""h-8 gap-1 rounded-[6px] bg-black px-3 text-xs text-white hover:bg-black hover:text-white dark:bg-white dark:text-black""
      asChild
    >
      <a
        href={`https://v0.dev/chat/api/open?url=${url}`}
        target=""_blank""
        rel=""noreferrer""
      >
        Open in{"" ""}
        <svg
          viewBox=""0 0 40 20""
          fill=""none""
          xmlns=""http://www.w3.org/2000/svg""
          className=""h-5 w-5 text-current""
        >
          <path
            d=""M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z""
            fill=""currentColor""
          ></path>
          <path
            d=""M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z""
            fill=""currentColor""
          ></path>
        </svg>
      </a>
    </Button>
  )
}
```

LANGUAGE: jsx
CODE:
```
<OpenInV0Button url=""https://example.com/r/hello-world.json"" />
```

----------------------------------------

TITLE: Display Loading Skeleton for Sidebar Menu
DESCRIPTION: Provides an example of using `SidebarMenuSkeleton` to render a loading state for the `SidebarMenu`. This is useful for React Server Components, SWR, or react-query to indicate data fetching in progress.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_31

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Configure shadcn-ui Components with components.json
DESCRIPTION: This JSON configuration file defines the styling, Tailwind CSS settings, and other options for shadcn-ui components. It allows opting out of TypeScript via the `tsx` flag and setting up import aliases for project paths.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""style"": ""default"",
  ""tailwind"": {
    ""config"": ""tailwind.config.js"",
    ""css"": ""src/app/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""rsc"": false,
  ""tsx"": false,
  ""aliases"": {
    ""utils"": ""~/lib/utils"",
    ""components"": ""~/components""
  }
}
```

----------------------------------------

TITLE: Configure JavaScript import aliases with jsconfig.json
DESCRIPTION: This `jsconfig.json` file configures the JavaScript language service, specifically defining path aliases. The `""@/*"": [""./*""]` alias maps any import starting with `@/` to the project's root directory, simplifying module imports and improving code readability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/javascript.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""compilerOptions"": {
    ""paths"": {
      ""@/*"": [""./*""]
    }
  }
}
```

----------------------------------------

TITLE: Define Chart Data and Configuration for Tooltip
DESCRIPTION: Example TypeScript code defining sample chart data and a configuration object. The `chartConfig` maps data keys to display labels and colors, which are then referenced by chart components like tooltips for rendering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
const chartData = [
  { browser: ""chrome"", visitors: 187, fill: ""var(--color-chrome)"" },
  { browser: ""safari"", visitors: 200, fill: ""var(--color-safari)"" }
]

const chartConfig = {
  visitors: {
    label: ""Total Visitors""
  },
  chrome: {
    label: ""Chrome"",
    color: ""hsl(var(--chart-1))""
  },
  safari: {
    label: ""Safari"",
    color: ""hsl(var(--chart-2))""
  }
} satisfies ChartConfig
```

----------------------------------------

TITLE: Initialize shadcn/ui Project
DESCRIPTION: Runs the shadcn/ui CLI initialization command to create a `components.json` file in your project, setting up the basic configuration. This command is essential for projects using the CLI to add components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/components-json.mdx#_snippet_0

LANGUAGE: Bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Basic Dropdown Menu component usage in React/TSX
DESCRIPTION: This example demonstrates the fundamental structure for implementing a `DropdownMenu` component. It includes the `DropdownMenuTrigger` to activate the menu, `DropdownMenuContent` to encapsulate the menu items, and various sub-components like `DropdownMenuLabel`, `DropdownMenuSeparator`, and `DropdownMenuItem` for content organization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<DropdownMenu>
  <DropdownMenuTrigger>Open</DropdownMenuTrigger>
  <DropdownMenuContent>
    <DropdownMenuLabel>My Account</DropdownMenuLabel>
    <DropdownMenuSeparator />
    <DropdownMenuItem>Profile</DropdownMenuItem>
    <DropdownMenuItem>Billing</DropdownMenuItem>
    <DropdownMenuItem>Team</DropdownMenuItem>
    <DropdownMenuItem>Subscription</DropdownMenuItem>
  </DropdownMenuContent>
</DropdownMenu>
```

----------------------------------------

TITLE: Configure shadcn/ui components.json
DESCRIPTION: This JSON configuration file defines the setup for shadcn/ui components within a project. It specifies styling, RSC (React Server Components) usage, TypeScript support, Tailwind CSS integration details, path aliases for various project directories, and the icon library to be used.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": false,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""src/styles/globals.css"",
    ""baseColor"": ""neutral"",
    ""cssVariables"": true,
    ""prefix"": """"
  },
  ""aliases"": {
    ""components"": ""@/components"",
    ""utils"": ""@/lib/utils"",
    ""ui"": ""@/components/ui"",
    ""lib"": ""@/lib"",
    ""hooks"": ""@/hooks""
  },
  ""iconLibrary"": ""lucide""
}
```

----------------------------------------

TITLE: Configure shadcn/ui components.json setup questions
DESCRIPTION: Shows the interactive prompts for configuring `components.json` for shadcn/ui. This includes choices for TypeScript usage, styling preferences, global CSS file location, and import aliases for components and utilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/gatsby.mdx#_snippet_5

LANGUAGE: txt
CODE:
```
Would you like to use TypeScript (recommended)? no / yes
Which style would you like to use? › Default
Which color would you like to use as base color? › Slate
Where is your global CSS file? › › ./src/styles/globals.css
Do you want to use CSS variables for colors? › no / yes
Where is your tailwind.config.js located? › tailwind.config.js
Configure the import alias for components: › @/components
Configure the import alias for utils: › @/lib/utils
Are you using React Server Components? › no
```

----------------------------------------

TITLE: Define Complex CSS Utility Class for shadcn/ui
DESCRIPTION: This JSON configuration illustrates defining a more complex CSS utility class, `scrollbar-hidden`, using the `@utility` directive within a shadcn/ui registry item. This utility hides the scrollbar for WebKit browsers, offering a reusable solution for custom scrollbar behavior and cleaner UI designs.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_11

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-component"",
  ""type"": ""registry:component"",
  ""css"": {
    ""@utility scrollbar-hidden"": {
      ""scrollbar-hidden"": {
        ""&::-webkit-scrollbar"": {
          ""display"": ""none""
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Import shadcn/ui Components in TypeScript/React
DESCRIPTION: This TypeScript/React import statement demonstrates how to use components from the `ui` package within your application. Components are imported from their specific paths within the `@workspace/ui` alias, making them available for use in your UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from ""@workspace/ui/components/button""
```

----------------------------------------

TITLE: Customize Resizable Handle with `withHandle` Prop
DESCRIPTION: This example illustrates how to explicitly show a visual handle on the `ResizableHandle` component by setting the `withHandle` prop to `true`. This provides a clearer visual cue for users to interact with the resizer.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/resizable.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from ""@/components/ui/resizable""

export default function Example() {
  return (
    <ResizablePanelGroup direction=""horizontal"">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle withHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}
```

----------------------------------------

TITLE: Adjust Sheet Component Size with CSS Classes
DESCRIPTION: Provides an example of how to customize the width of the Sheet component using Tailwind CSS classes applied to the SheetContent, allowing for responsive size adjustments.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent className=""w-[400px] sm:w-[540px]"">
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

----------------------------------------

TITLE: Basic Menubar component structure in TSX
DESCRIPTION: This example illustrates the fundamental JSX structure for rendering a Menubar component. It includes a top-level menu, a trigger, content, individual items, separators, and a shortcut, showcasing a common desktop application menu pattern.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Menubar>
  <MenubarMenu>
    <MenubarTrigger>File</MenubarTrigger>
    <MenubarContent>
      <MenubarItem>
        New Tab <MenubarShortcut>⌘T</MenubarShortcut>
      </MenubarItem>
      <MenubarItem>New Window</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Share</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Print</MenubarItem>
    </MenubarContent>
  </MenubarMenu>
</Menubar>
```

----------------------------------------

TITLE: Render Label component in JSX
DESCRIPTION: This example demonstrates how to use the `Label` component in a React/JSX application. The `htmlFor` prop is used to associate the label with an input element, improving accessibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Label htmlFor=""email"">Your email address</Label>
```

----------------------------------------

TITLE: Configure PostCSS for Tailwind CSS
DESCRIPTION: Creates a `postcss.config.ts` file at the root of the project. This configuration enables the `@tailwindcss/postcss` plugin, allowing PostCSS to process Tailwind CSS directives.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export default {
  ""plugins"": {
    ""@tailwindcss/postcss"": {},
  },
}
```

----------------------------------------

TITLE: Define custom theme variables in shadcn/ui
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-theme'. It allows adding custom CSS variables like font families and box shadows to the theme object, which can then be used throughout the application to maintain a consistent design system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-theme"",
  ""type"": ""registry:theme"",
  ""cssVars"": {
    ""theme"": {
      ""font-heading"": ""Inter, sans-serif"",
      ""shadow-card"": ""0 0 0 1px rgba(0, 0, 0, 0.1)""
    }
  }
}
```

----------------------------------------

TITLE: Import Sheet Components in TypeScript/React
DESCRIPTION: Demonstrates how to import the necessary components for the Shadcn UI Sheet, including Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, and SheetTrigger, from the project's UI library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from ""@/components/ui/sheet""
```

----------------------------------------

TITLE: Fork Repository with Git
DESCRIPTION: Clones the shadcn/ui repository to your local machine, preparing it for contributions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/blocks.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/shadcn-ui/ui.git
```

----------------------------------------

TITLE: Import and Use shadcn/ui Button in TanStack Router
DESCRIPTION: Demonstrates how to import and render a shadcn/ui `Button` component within a TanStack Router route file. This example shows the basic structure for defining a route using `createFileRoute` and embedding React components, including the newly added shadcn/ui button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { createFileRoute } from ""@tanstack/react-router""

import { Button } from ""@/components/ui/button""

export const Route = createFileRoute(""/"")({
  component: App,
})

function App() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Initialize shadcn UI Project
DESCRIPTION: Initializes a new shadcn UI project. This command installs necessary dependencies, integrates the `cn` utility, configures `tailwind.config.js`, and sets up CSS variables, preparing the project for shadcn UI components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn init
```

----------------------------------------

TITLE: Add Custom Colors to an Existing shadcn/ui Style
DESCRIPTION: This JSON configuration demonstrates how to add a custom `brand` color to an existing `shadcn/ui` style. It extends the default `shadcn/ui` settings and defines the `brand` CSS variable with `oklch` color values for both light and dark modes. This allows for targeted color customization without redefining the entire style.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-style"",
  ""type"": ""registry:style"",
  ""cssVars"": {
    ""light"": {
      ""brand"": ""oklch(0.99 0.00 0)""
    },
    ""dark"": {
      ""brand"": ""oklch(0.14 0.00 286)""
    }
  }
}
```

----------------------------------------

TITLE: Import and Use shadcn/ui Button in TanStack Router
DESCRIPTION: Demonstrates how to import and render a shadcn/ui `Button` component within a TanStack Router route file. This example shows the basic structure for defining a route using `createFileRoute` and embedding React components, including the newly added shadcn/ui button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack-router.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { createFileRoute } from ""@tanstack/react-router""

import { Button } from ""@/components/ui/button""

export const Route = createFileRoute(""/"")({
  component: App,
})

function App() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Initialize a New shadcn/ui Monorepo Project
DESCRIPTION: This command initializes a new shadcn/ui monorepo project using the canary version of the CLI. It prompts the user to select 'Next.js (Monorepo)' to set up a project with 'web' and 'ui' workspaces and Turborepo.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

LANGUAGE: bash
CODE:
```
? Would you like to start a new project?
    Next.js
❯   Next.js (Monorepo)
```

----------------------------------------

TITLE: Import Tooltip Components for React/TypeScript
DESCRIPTION: This snippet shows the necessary import statements for using the Tooltip, TooltipContent, TooltipProvider, and TooltipTrigger components. These components are typically imported from a local UI library path, such as `@/components/ui/tooltip`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from ""@/components/ui/tooltip""
```

----------------------------------------

TITLE: Import and use shadcn/ui Button component in React
DESCRIPTION: Shows how to import the `Button` component from `shadcn/ui` and integrate it into a React functional component. This example demonstrates basic usage within a Gatsby application's page or component file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Implementing SidebarHeader with Dropdown Menu in React
DESCRIPTION: This example demonstrates how to use the `SidebarHeader` component to create a sticky header for the sidebar. It includes integration with a `DropdownMenu` for selecting a workspace, showcasing how to nest interactive elements within the header for enhanced UI functionality.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader>
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton>
              Select Workspace
              <ChevronDown className=""ml-auto"" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent className=""w-[--radix-popper-anchor-width]"">
            <DropdownMenuItem>
              <span>Acme Inc</span>
            </DropdownMenuItem>
            <DropdownMenuItem>
              <span>Acme Corp.</span>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  </SidebarHeader>
</Sidebar>
```

----------------------------------------

TITLE: Implement a basic Combobox component with React and Shadcn UI
DESCRIPTION: This example demonstrates how to create a reusable Combobox component using React, TypeScript, and Shadcn UI's Popover and Command components. It allows users to select from a predefined list of frameworks, featuring search functionality and dynamic selection updates. The component manages its open state and selected value internally.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/combobox.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import { CheckIcon, ChevronsUpDownIcon } from ""lucide-react""

import { cn } from ""@/lib/utils""
import { Button } from ""@/components/ui/button""
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from ""@/components/ui/command""
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from ""@/components/ui/popover""

const frameworks = [
  {
    value: ""next.js"",
    label: ""Next.js"",
  },
  {
    value: ""sveltekit"",
    label: ""SvelteKit"",
  },
  {
    value: ""nuxt.js"",
    label: ""Nuxt.js"",
  },
  {
    value: ""remix"",
    label: ""Remix"",
  },
  {
    value: ""astro"",
    label: ""Astro"",
  },
]

export function ExampleCombobox() {
  const [open, setOpen] = React.useState(false)
  const [value, setValue] = React.useState("""")

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant=""outline""
          role=""combobox""
          aria-expanded={open}
          className=""w-[200px] justify-between""
        >
          {value
            ? frameworks.find((framework) => framework.value === value)?.label
            : ""Select framework...""}
          <ChevronsUpDownIcon className=""ml-2 h-4 w-4 shrink-0 opacity-50"" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className=""w-[200px] p-0"">
        <Command>
          <CommandInput placeholder=""Search framework..."" />
          <CommandList>
            <CommandEmpty>No framework found.</CommandEmpty>
            <CommandGroup>
              {frameworks.map((framework) => (
                <CommandItem
                  key={framework.value}
                  value={framework.value}
                  onSelect={(currentValue) => {
                    setValue(currentValue === value ? """" : currentValue)
                    setOpen(false)
                  }}
                >
                  <CheckIcon
                    className={cn(
                      ""mr-2 h-4 w-4"",
                      value === framework.value ? ""opacity-100"" : ""opacity-0""
                    )}
                  />
                  {framework.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Define a Complex shadcn/ui Component Structure
DESCRIPTION: This JSON configuration defines a complex shadcn/ui registry item, illustrating how to bundle multiple file types like pages, components, hooks, utilities, and configuration files into a single installable unit. It specifies the `path` and `type` for each file, and optionally a `target` for installation location.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/faq.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""title"": ""Hello World"",
  ""type"": ""registry:block"",
  ""description"": ""A complex hello world component"",
  ""files"": [
    {
      ""path"": ""registry/new-york/hello-world/page.tsx"",
      ""type"": ""registry:page"",
      ""target"": ""app/hello/page.tsx""
    },
    {
      ""path"": ""registry/new-york/hello-world/components/hello-world.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/components/formatted-message.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/hooks/use-hello.ts"",
      ""type"": ""registry:hook""
    },
    {
      ""path"": ""registry/new-york/hello-world/lib/format-date.ts"",
      ""type"": ""registry:utils""
    },
    {
      ""path"": ""registry/new-york/hello-world/hello.config.ts"",
      ""type"": ""registry:file"",
      ""target"": ""~/hello.config.ts""
    }
  ]
}
```

----------------------------------------

TITLE: Render Content with AspectRatio Component in TypeScript/React
DESCRIPTION: This example illustrates how to wrap an `Image` component with `AspectRatio` to enforce a 16:9 ratio. It ensures that the enclosed content maintains its specified aspect ratio, which is crucial for consistent visual presentation in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/aspect-ratio.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<AspectRatio ratio={16 / 9}>
  <Image src=""..."" alt=""Image"" className=""rounded-md object-cover"" />
</AspectRatio>
```

----------------------------------------

TITLE: Example React Router Home Route with shadcn/ui Button
DESCRIPTION: Illustrates the usage of the `shadcn/ui` Button component within a React Router application's home route. It includes importing the component, defining route metadata, and rendering the button within a functional component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/react-router.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Button } from ""~/components/ui/button""

import type { Route } from ""./+types/home""

export function meta({}: Route.MetaArgs) {
  return [
    { title: ""New React Router App"" },
    { name: ""description"", content: ""Welcome to React Router!"" }
  ]
}

export default function Home() {
  return (
    <div className=""flex min-h-svh flex-col items-center justify-center"">
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Render Basic Toggle Group with Single Selection
DESCRIPTION: Provides a JSX example for rendering a `ToggleGroup` component configured for single selection, containing three `ToggleGroupItem` elements with distinct values.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle-group.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ToggleGroup type=""single"">
  <ToggleGroupItem value=""a"">A</ToggleGroupItem>
  <ToggleGroupItem value=""b"">B</ToggleGroupItem>
  <ToggleGroupItem value=""c"">C</ToggleGroupItem>
</ToggleGroup>
```

----------------------------------------

TITLE: Add Custom Colors to an Existing shadcn/ui Style
DESCRIPTION: This JSON configuration demonstrates how to add a custom `brand` color to an existing `shadcn/ui` style. It extends the default `shadcn/ui` settings and defines the `brand` CSS variable with `oklch` color values for both light and dark modes. This allows for targeted color customization without redefining the entire style.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-style"",
  ""type"": ""registry:style"",
  ""cssVars"": {
    ""light"": {
      ""brand"": ""oklch(0.99 0.00 0)""
    },
    ""dark"": {
      ""brand"": ""oklch(0.14 0.00 286)""
    }
  }
}
```

----------------------------------------

TITLE: Basic Alert component usage in TypeScript JSX
DESCRIPTION: This TypeScript JSX example shows a basic implementation of the `Alert` component, including an icon (`Terminal`), a title (`AlertTitle`), and a description (`AlertDescription`). It illustrates how to structure an alert message within a React or Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Alert>
  <Terminal className=""h-4 w-4"" />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>
```

----------------------------------------

TITLE: Initialize shadcn/ui monorepo project with CLI
DESCRIPTION: Use the `init` command to set up a new shadcn/ui project. Select the 'Next.js (Monorepo)' option during the prompt to configure a monorepo with 'web' and 'ui' workspaces, utilizing Turborepo for build management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@canary init
```

----------------------------------------

TITLE: Render Basic Shadcn UI Table Structure in TSX
DESCRIPTION: This example shows the basic JSX structure for rendering a Shadcn UI Table component. It includes a TableCaption, TableHeader with TableHead elements, and a TableBody containing a single TableRow with TableCell elements, demonstrating a simple table layout.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Table>
  <TableCaption>A list of your recent invoices.</TableCaption>
  <TableHeader>
    <TableRow>
      <TableHead className=""w-[100px]"">Invoice</TableHead>
      <TableHead>Status</TableHead>
      <TableHead>Method</TableHead>
      <TableHead className=""text-right"">Amount</TableHead>
    </TableRow>
  </TableHeader>
  <TableBody>
    <TableRow>
      <TableCell className=""font-medium"">INV001</TableCell>
      <TableCell>Paid</TableCell>
      <TableCell>Credit Card</TableCell>
      <TableCell className=""text-right"">$250.00</TableCell>
    </TableRow>
  </TableBody>
</Table>
```

----------------------------------------

TITLE: Define Chart Data and Configuration for Legend
DESCRIPTION: Example TypeScript code defining sample chart data and a configuration object tailored for legend usage. The `chartConfig` maps data keys to display labels and colors, which are then used by the legend component for rendering.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_28

LANGUAGE: tsx
CODE:
```
const chartData = [
  { browser: ""chrome"", visitors: 187, fill: ""var(--color-chrome)"" },
  { browser: ""safari"", visitors: 200, fill: ""var(--color-safari)"" }
]

const chartConfig = {
  chrome: {
    label: ""Chrome"",
    color: ""hsl(var(--chart-1))""
  },
  safari: {
    label: ""Safari"",
    color: ""hsl(var(--chart-2))""
  }
} satisfies ChartConfig
```

----------------------------------------

TITLE: Structuring Sidebar Content with SidebarContent and SidebarGroup
DESCRIPTION: This example demonstrates the usage of the `SidebarContent` component to wrap the main content area of the sidebar. It highlights how `SidebarGroup` components are nested within `SidebarContent` to organize and display sidebar items, making the content scrollable and modular.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent } from ""@/components/ui/sidebar""

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Install Shadcn UI Pagination Component via CLI
DESCRIPTION: Provides the command-line interface instruction to add the Shadcn UI Pagination component to a project using npx.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add pagination
```

----------------------------------------

TITLE: Render Basic Slider Component in TSX
DESCRIPTION: Renders a basic `Slider` component with a default value, maximum range, and step increment. This example demonstrates a simple, uncontrolled slider.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Slider defaultValue={[33]} max={100} step={1} />
```

----------------------------------------

TITLE: Define a Complex shadcn/ui Component Registry Item
DESCRIPTION: Illustrates the structure of a complex shadcn/ui registry item, detailing how to register multiple file types including pages, components, hooks, utilities, and configuration files within a single component definition.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""title"": ""Hello World"",
  ""type"": ""registry:block"",
  ""description"": ""A complex hello world component"",
  ""files"": [
    {
      ""path"": ""registry/new-york/hello-world/page.tsx"",
      ""type"": ""registry:page"",
      ""target"": ""app/hello/page.tsx""
    },
    {
      ""path"": ""registry/new-york/hello-world/components/hello-world.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/components/formatted-message.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/hooks/use-hello.ts"",
      ""type"": ""registry:hook""
    },
    {
      ""path"": ""registry/new-york/hello-world/lib/format-date.ts"",
      ""type"": ""registry:utils""
    },
    {
      ""path"": ""registry/new-york/hello-world/hello.config.ts"",
      ""type"": ""registry:file"",
      ""target"": ""~/hello.config.ts""
    }
  ]
}
```

----------------------------------------

TITLE: Import Tooltip components in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the necessary components (Tooltip, TooltipContent, TooltipTrigger) from the local UI library path, making them available for use in your React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tooltip.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Tooltip,
  TooltipContent,
  TooltipTrigger,
} from ""@/components/ui/tooltip""
```

----------------------------------------

TITLE: Basic Input OTP Component Usage with 6 Digits
DESCRIPTION: This example shows the fundamental structure for rendering a 6-digit Input OTP component. It utilizes `InputOTPGroup` to logically group slots and `InputOTPSeparator` to visually divide the input into two groups, enhancing readability for OTPs.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input-otp.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<InputOTP maxLength={6}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
    <InputOTPSlot index={2} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={3} />
    <InputOTPSlot index={4} />
    <InputOTPSlot index={5} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Import Shadcn UI Pagination Components
DESCRIPTION: Imports the necessary components for building pagination from the Shadcn UI library, including the main Pagination container, content wrapper, individual items, links, and navigation elements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from ""@/components/ui/pagination""
```

----------------------------------------

TITLE: Override Tailwind CSS Variables in shadcn/ui Theme
DESCRIPTION: This JSON configuration shows how to override default Tailwind CSS variables, such as spacing and breakpoints, within a shadcn/ui theme definition. This enables fine-grained control over the design system's foundational values to match specific project requirements, ensuring responsive and consistent layouts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/examples.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-theme"",
  ""type"": ""registry:theme"",
  ""cssVars"": {
    ""theme"": {
      ""spacing"": ""0.2rem"",
      ""breakpoint-sm"": ""640px"",
      ""breakpoint-md"": ""768px"",
      ""breakpoint-lg"": ""1024px"",
      ""breakpoint-xl"": ""1280px"",
      ""breakpoint-2xl"": ""1536px""
    }
  }
}
```

----------------------------------------

TITLE: Install Input OTP Component via CLI
DESCRIPTION: Installs the Input OTP component using the shadcn/ui CLI, adding necessary files and configurations to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add input-otp
```

----------------------------------------

TITLE: Add New Tailwind Colors to shadcn/ui Registry Item
DESCRIPTION: Demonstrates how to extend Tailwind CSS colors within a shadcn/ui registry item. It provides examples for both Tailwind CSS v4 and v3, showing the necessary `cssVars` and `tailwind.config` modifications to define new custom colors.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""title"": ""Hello World"",
  ""type"": ""registry:block"",
  ""description"": ""A complex hello world component"",
  ""files"": [
    // ...
  ],
  ""cssVars"": {
    ""light"": {
      ""brand-background"": ""20 14.3% 4.1%"",
      ""brand-accent"": ""20 14.3% 4.1%""
    },
    ""dark"": {
      ""brand-background"": ""20 14.3% 4.1%"",
      ""brand-accent"": ""20 14.3% 4.1%""
    }
  }
}
```

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""title"": ""Hello World"",
  ""type"": ""registry:block"",
  ""description"": ""A complex hello world component"",
  ""files"": [
    // ...
  ],
  ""cssVars"": {
    ""light"": {
      ""brand-background"": ""20 14.3% 4.1%"",
      ""brand-accent"": ""20 14.3% 4.1%""
    },
    ""dark"": {
      ""brand-background"": ""20 14.3% 4.1%"",
      ""brand-accent"": ""20 14.3% 4.1%""
    }
  },
  ""tailwind"": {
    ""config"": {
      ""theme"": {
        ""extend"": {
          ""colors"": {
            ""brand"": {
              ""DEFAULT"": ""hsl(var(--brand-background))"",
              ""accent"": ""hsl(var(--brand-accent))""
            }
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Local CLI Development and Testing Workflow
DESCRIPTION: A step-by-step workflow for developing and testing the shadcn-ui CLI locally. This involves ensuring the registry is up-to-date, running the CLI's development script, executing CLI commands for general testing, testing in a specific application context, and running dedicated tests for the CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm v4:dev
```

LANGUAGE: bash
CODE:
```
pnpm shadcn:dev
```

LANGUAGE: bash
CODE:
```
pnpm shadcn
```

LANGUAGE: bash
CODE:
```
pnpm shadcn <init | add | ...> -c ~/Desktop/my-app
```

LANGUAGE: bash
CODE:
```
pnpm --filter=shadcn test
```

----------------------------------------

TITLE: Update input-otp.tsx for composition pattern
DESCRIPTION: This diff shows the necessary modifications within the `input-otp.tsx` file to transition from the `SlotProps` and render prop pattern to a composition-based approach using `OTPInputContext`. It updates imports and the `InputOTPSlot` component signature.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_8

LANGUAGE: diff
CODE:
```
- import { OTPInput, SlotProps } from ""input-otp""
+ import { OTPInput, OTPInputContext } from ""input-otp""

 const InputOTPSlot = React.forwardRef<
   React.ElementRef<""div"">,
-   SlotProps & React.ComponentPropsWithoutRef<""div"">
-  >(({ char, hasFakeCaret, isActive, className, ...props }, ref) => {
+   React.ComponentPropsWithoutRef<""div""> & { index: number }
+  >(({ index, className, ...props }, ref) => {
+   const inputOTPContext = React.useContext(OTPInputContext)
+   const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]
```

----------------------------------------

TITLE: Render basic Shadcn UI Card component in TSX
DESCRIPTION: Demonstrates the basic JSX structure for rendering a Shadcn UI Card component. This example includes the main Card container, along with its header, content, and footer sections, showcasing how to structure a typical card display.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/card.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Card>
  <CardHeader>
    <CardTitle>Card Title</CardTitle>
    <CardDescription>Card Description</CardDescription>
    <CardAction>Card Action</CardAction>
  </CardHeader>
  <CardContent>
    <p>Card Content</p>
  </CardContent>
  <CardFooter>
    <p>Card Footer</p>
  </CardFooter>
</Card>
```

----------------------------------------

TITLE: Implement Vertical Resizable Panel Group
DESCRIPTION: This full example demonstrates how to configure a `ResizablePanelGroup` for vertical resizing by setting the `direction` prop to 'vertical'. It creates a layout where panels are stacked vertically and their heights can be adjusted.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/resizable.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from ""@/components/ui/resizable""

export default function Example() {
  return (
    <ResizablePanelGroup direction=""vertical"">
      <ResizablePanel>One</ResizablePanel>
      <ResizableHandle />
      <ResizablePanel>Two</ResizablePanel>
    </ResizablePanelGroup>
  )
}
```

----------------------------------------

TITLE: Initialize shadcn/ui components.json
DESCRIPTION: This command initializes the `components.json` file in your project, which is essential when using the shadcn/ui CLI to add components. It sets up the foundational configuration required for component generation and management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Pass options to Carousel component
DESCRIPTION: Configures the Carousel behavior by passing an `opts` prop with specific options like `align` and `loop`, leveraging Embla Carousel's underlying API for advanced customization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
<Carousel
  opts={{
    align: ""start"",
    loop: true,
  }}
>
  <CarouselContent>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
    <CarouselItem>...</CarouselItem>
  </CarouselContent>
</Carousel>
```

----------------------------------------

TITLE: Run Type Checking Across Project with TypeScript
DESCRIPTION: This command executes the TypeScript compiler to perform type checking across the entire project. It helps identify type-related errors and ensures type consistency, enhancing code quality and maintainability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_13

LANGUAGE: sh
CODE:
```
npm run typecheck
```

----------------------------------------

TITLE: Basic Form Field Example
DESCRIPTION: Demonstrates a simple usage of `<FormField>` for a username input. It integrates with `useForm` from React Hook Form to manage form state and uses `Input` component for the actual field, along with `FormLabel`, `FormDescription`, and `FormMessage` for enhanced user experience.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
const form = useForm()

<FormField
  control={form.control}
  name=""username""
  render={({ field }) => (
    <FormItem>
      <FormLabel>Username</FormLabel>
      <FormControl>
        <Input placeholder=""shadcn"" {...field} />
      </FormControl>
      <FormDescription>This is your public display name.</FormDescription>
      <FormMessage />
    </FormItem>
  )}
/>
```

----------------------------------------

TITLE: Basic Sheet Component Usage in React
DESCRIPTION: Illustrates the fundamental structure and usage of the Sheet component, showing how to combine SheetTrigger, SheetContent, SheetHeader, SheetTitle, and SheetDescription to create a functional sheet.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent>
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

----------------------------------------

TITLE: Define shadcn/ui registry blocks configuration
DESCRIPTION: Defines a configuration array for shadcn/ui registry blocks, detailing component names, authors, titles, descriptions, dependencies, and file paths for various UI components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
export const blocks = [
  // ...
  {
    name: ""dashboard-01"",
    author: ""shadcn (https://ui.shadcn.com)"",
    title: ""Dashboard"",
    description: ""A simple dashboard with a hello world component."",
    type: ""registry:block"",
    registryDependencies: [""input"", ""button"", ""card""],
    dependencies: [""zod""],
    files: [
      {
        path: ""blocks/dashboard-01/page.tsx"",
        type: ""registry:page"",
        target: ""app/dashboard/page.tsx""
      },
      {
        path: ""blocks/dashboard-01/components/hello-world.tsx"",
        type: ""registry:component""
      },
      {
        path: ""blocks/dashboard-01/components/example-card.tsx"",
        type: ""registry:component""
      },
      {
        path: ""blocks/dashboard-01/hooks/use-hello-world.ts"",
        type: ""registry:hook""
      },
      {
        path: ""blocks/dashboard-01/lib/format-date.ts"",
        type: ""registry:lib""
      }
    ],
    categories: [""dashboard""]
  }
]
```

----------------------------------------

TITLE: Override Tailwind CSS variables in shadcn/ui theme
DESCRIPTION: This JSON configuration defines a custom registry item named 'custom-theme'. It demonstrates how to override default Tailwind CSS variables, such as spacing units and breakpoint values, within the shadcn/ui theme object. This enables fine-grained control over the responsive design and layout.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/examples.mdx#_snippet_7

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""custom-theme"",
  ""type"": ""registry:theme"",
  ""cssVars"": {
    ""theme"": {
      ""spacing"": ""0.2rem"",
      ""breakpoint-sm"": ""640px"",
      ""breakpoint-md"": ""768px"",
      ""breakpoint-lg"": ""1024px"",
      ""breakpoint-xl"": ""1280px"",
      ""breakpoint-2xl"": ""1536px""
    }
  }
}
```

----------------------------------------

TITLE: Install Pagination Component via CLI
DESCRIPTION: Installs the pagination component using the shadcn/ui CLI tool, which automatically adds the necessary files to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add pagination
```

----------------------------------------

TITLE: Mark SidebarMenuButton as Active
DESCRIPTION: This example illustrates the use of the `isActive` prop to visually designate a `SidebarMenuButton` as the currently active menu item. This prop typically applies specific styling to highlight the selected navigation link.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_26

LANGUAGE: tsx
CODE:
```
<SidebarMenuButton asChild isActive>
  <a href=""#"">Home</a>
</SidebarMenuButton>
```

----------------------------------------

TITLE: Install Aspect Ratio Component
DESCRIPTION: Instructions for installing the `AspectRatio` component using either the `shadcn/ui` CLI or manually by installing `@radix-ui/react-aspect-ratio`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add aspect-ratio
```

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-aspect-ratio
```

----------------------------------------

TITLE: Render Calendar Component with Single Date Selection
DESCRIPTION: Provides a practical example of how to integrate and render the Calendar component within a React functional component. It shows state management for a single selected date and basic styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
const [date, setDate] = React.useState<Date | undefined>(new Date())

return (
  <Calendar
    mode=""single""
    selected={date}
    onSelect={setDate}
    className=""rounded-md border""
  />
)
```

----------------------------------------

TITLE: Define Custom CSS Variables for Theming
DESCRIPTION: Example of defining custom CSS variables, `--primary` and `--primary-foreground`, using the `oklch` color format. These variables can then be referenced in Tailwind CSS classes for consistent theming.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_4

LANGUAGE: css
CODE:
```
--primary: oklch(0.205 0 0);
--primary-foreground: oklch(0.985 0 0);
```

----------------------------------------

TITLE: Initialize shadcn/ui project
DESCRIPTION: Runs the `shadcn/ui` initialization command. This sets up the project's `components.json` file and prompts the user for configuration options like base color.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Configure Tailwind CSS integration in components.json
DESCRIPTION: Defines how the shadcn/ui CLI interacts with your project's Tailwind CSS setup. This comprehensive configuration includes paths to Tailwind's config and CSS files, the base color for theming, whether to use CSS variables, and any custom utility class prefixes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
tailwind: object
  Configuration to help the CLI understand how Tailwind CSS is set up in your project.

  tailwind.config: string
    Path to where your `tailwind.config.js` or `tailwind.config.ts` file is located.
    For Tailwind CSS v4, leave this blank.
    Example:
      {
        ""tailwind"": {
          ""config"": ""tailwind.config.js"" | ""tailwind.config.ts""
        }
      }

  tailwind.css: string
    Path to the CSS file that imports Tailwind CSS into your project.
    Example:
      {
        ""tailwind"": {
          ""css"": ""styles/global.css""
        }
      }

  tailwind.baseColor: string
    This is used to generate the default color palette for your components.
    This cannot be changed after initialization.
    Allowed values: ""gray"" | ""neutral"" | ""slate"" | ""stone"" | ""zinc""
    Example:
      {
        ""tailwind"": {
          ""baseColor"": ""gray"" | ""neutral"" | ""slate"" | ""stone"" | ""zinc""
        }
      }

  tailwind.cssVariables: boolean
    Choose between using CSS variables or Tailwind CSS utility classes for theming.
    Set to `true` for CSS variables, `false` for utility classes.
    This cannot be changed after initialization; requires re-installation of components to switch.
    Example:
      {
        ""tailwind"": {
          ""cssVariables"": true | false
        }
      }

  tailwind.prefix: string
    The prefix to use for your Tailwind CSS utility classes.
    Components will be added with this prefix.
    Example:
      {
        ""tailwind"": {
          ""prefix"": ""tw-""
        }
      }
```

----------------------------------------

TITLE: Create Persistent Volumes for Fly.io SQLite Database
DESCRIPTION: These commands create persistent volumes named 'data' with a size of 1GB for both production and staging Fly.io applications. These volumes are essential for storing the SQLite database persistently across deployments.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_8

LANGUAGE: sh
CODE:
```
fly volumes create data --size 1 --app indie-stack-template
```

LANGUAGE: sh
CODE:
```
fly volumes create data --size 1 --app indie-stack-template-staging
```

----------------------------------------

TITLE: Render DropdownMenu within SidebarMenuAction
DESCRIPTION: This example demonstrates how to embed a `DropdownMenu` component inside a `SidebarMenuAction`. This pattern is useful for providing contextual actions, such as 'Edit Project' or 'Delete Project', directly associated with a sidebar menu item.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_28

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton asChild>
    <a href=""#"">
      <Home />
      <span>Home</span>
    </a>
  </SidebarMenuButton>
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <SidebarMenuAction>
        <MoreHorizontal />
      </SidebarMenuAction>
    </DropdownMenuTrigger>
    <DropdownMenuContent side=""right"" align=""start"">
      <DropdownMenuItem>
        <span>Edit Project</span>
      </DropdownMenuItem>
      <DropdownMenuItem>
        <span>Delete Project</span>
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</SidebarMenuItem>
```

----------------------------------------

TITLE: Fetch data for SidebarMenu using React Server Components in TSX
DESCRIPTION: Demonstrates a `NavProjects` server component that asynchronously fetches project data. It then maps this data to `SidebarMenuItem` components, showcasing how to populate dynamic content within a sidebar using React Server Components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_37

LANGUAGE: tsx
CODE:
```
async function NavProjects() {
  const projects = await fetchProjects()

  return (
    <SidebarMenu>
      {projects.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Define React Hook Form with Zod Resolver and Submit Handler
DESCRIPTION: This comprehensive example shows the full setup of a React Hook Form. It imports `zodResolver` to connect the Zod schema, initializes the form with `useForm` including default values, and defines a type-safe `onSubmit` handler to process validated form data. This structure forms the core logic for form management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
""use client""

import { zodResolver } from ""@hookform/resolvers/zod""
import { useForm } from ""react-hook-form""
import { z } from ""zod""

const formSchema = z.object({
  username: z.string().min(2, {
    message: ""Username must be at least 2 characters."",
  }),
})

export function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: """",
    },
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    console.log(values)
  }
}
```

----------------------------------------

TITLE: Install Shadcn UI Sheet Component via CLI
DESCRIPTION: Instructions to add the Sheet component to your project using the Shadcn UI command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sheet
```

----------------------------------------

TITLE: Apply Themed Colors to Chart Components
DESCRIPTION: Example of applying a themed color variable (`--color-desktop`) to the `fill` prop of a `<Bar>` component. This allows individual chart elements to inherit colors defined in the theme, ensuring visual consistency.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
<Bar dataKey=""desktop"" fill=""var(--color-desktop)"" />
```

----------------------------------------

TITLE: Import and Basic Usage of Shadcn UI Button
DESCRIPTION: Demonstrates how to import the Button component from the Shadcn UI library and use it with a basic variant, such as 'outline'.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/button.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""
```

LANGUAGE: tsx
CODE:
```
<Button variant=""outline"">Button</Button>
```

----------------------------------------

TITLE: Display Selected Row Count in DataTable
DESCRIPTION: This snippet demonstrates how to display the number of currently selected rows in a `DataTable` using the `table.getFilteredSelectedRowModel()` API. It provides a visual indicator of the selection status, showing both selected and total filtered rows.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
<div className=""flex-1 text-sm text-muted-foreground"">
  {table.getFilteredSelectedRowModel().rows.length} of{"" ""}
  {table.getFilteredRowModel().rows.length} row(s) selected.
</div>
```

----------------------------------------

TITLE: Create a new Remix project
DESCRIPTION: Initializes a new Remix application using the `create-remix` CLI tool, setting up the basic project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-remix@latest my-app
```

----------------------------------------

TITLE: Implement Dropdown Menu in Sidebar Menu Action
DESCRIPTION: Provides an example of integrating a `DropdownMenu` component within a `SidebarMenuAction`. This allows for complex actions like editing or deleting items to be nested under a single menu action, improving UI organization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_27

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton asChild>
    <a href=""#"">
      <Home />
      <span>Home</span>
    </a>
  </SidebarMenuButton>
  <DropdownMenu>
    <DropdownMenuTrigger asChild>
      <SidebarMenuAction>
        <MoreHorizontal />
      </SidebarMenuAction>
    </DropdownMenuTrigger>
    <DropdownMenuContent side=""right"" align=""start"">
      <DropdownMenuItem>
        <span>Edit Project</span>
      </DropdownMenuItem>
      <DropdownMenuItem>
        <span>Delete Project</span>
      </DropdownMenuItem>
    </DropdownMenuContent>
  </DropdownMenu>
</SidebarMenuItem>
```

----------------------------------------

TITLE: Install npm package
DESCRIPTION: Installs a specified npm package into the project's `node_modules` directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install foo
```

----------------------------------------

TITLE: Create Block Directory Structure
DESCRIPTION: Demonstrates the required directory structure for a new block within the `apps/www/registry/new-york/blocks` path.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/blocks.mdx#_snippet_4

LANGUAGE: txt
CODE:
```
apps\n└── www\n    └── registry\n        └── new-york\n            └── blocks\n                └── dashboard-01
```

----------------------------------------

TITLE: Configure shadcn/ui components.json for JavaScript
DESCRIPTION: This JSON configuration file defines various settings for a shadcn/ui project, including styling, Tailwind CSS paths, React Server Components (RSC) enablement, and crucially, the `tsx` flag to opt out of TypeScript, allowing the use of JavaScript components. It also sets up import aliases for common paths.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/javascript.mdx#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""style"": ""default"",
  ""tailwind"": {
    ""config"": ""tailwind.config.js"",
    ""css"": ""src/app/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""rsc"": false,
  ""tsx"": false,
  ""aliases"": {
    ""utils"": ""~/lib/utils"",
    ""components"": ""~/components""
  }
}
```

----------------------------------------

TITLE: Initialize shadcn/ui in Next.js Project
DESCRIPTION: This command initializes the shadcn/ui library in a new or existing Next.js project, setting up the necessary configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Configure ESLint Parser Options for Type-Aware Linting in TypeScript
DESCRIPTION: This JavaScript snippet demonstrates how to configure the `parserOptions` within an ESLint configuration file. It's crucial for enabling type-aware linting rules in TypeScript projects by specifying the ECMAScript version, module source type, and paths to the TypeScript configuration files (`tsconfig.json`). This setup allows ESLint to leverage TypeScript's type information for more robust code analysis.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/vite-with-tailwind/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
export default {
  // other rules...
  parserOptions: {
    ecmaVersion: 'latest',
    sourceType: 'module',
    project: ['./tsconfig.json', './tsconfig.node.json'],
    tsconfigRootDir: __dirname,
  },
}
```

----------------------------------------

TITLE: Install Button Component via shadcn CLI
DESCRIPTION: Installs the Button component using the shadcn/ui command-line interface, simplifying the setup process by automatically adding necessary files and configurations.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Define Block File Structure
DESCRIPTION: Illustrates the typical files included in a block, such as page components, reusable components, hooks, and utility libraries.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/blocks.mdx#_snippet_5

LANGUAGE: txt
CODE:
```
dashboard-01\n└── page.tsx\n└── components\n    └── hello-world.tsx\n    └── example-card.tsx\n└── hooks\n    └── use-hello-world.ts\n└── lib\n    └── format-date.ts
```

----------------------------------------

TITLE: Implement basic Date Picker in React/TypeScript
DESCRIPTION: This snippet demonstrates how to create a basic date picker component using React, TypeScript, and shadcn/ui components (Popover, Calendar, Button). It utilizes `date-fns` for date formatting and `lucide-react` for icons. The component allows users to select a single date, which is then displayed in a button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/date-picker.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import { format } from ""date-fns""
import { Calendar as CalendarIcon } from ""lucide-react""

import { cn } from ""@/lib/utils""
import { Button } from ""@/components/ui/button""
import { Calendar } from ""@/components/ui/calendar""
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from ""@/components/ui/popover""

export function DatePickerDemo() {
  const [date, setDate] = React.useState<Date>()

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={""outline""}
          className={cn(
            ""w-[280px] justify-start text-left font-normal"",
            !date && ""text-muted-foreground""
          )}
        >
          <CalendarIcon className=""mr-2 h-4 w-4"" />
          {date ? format(date, ""PPP"") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className=""w-auto p-0"">
        <Calendar
          mode=""single""
          selected={date}
          onSelect={setDate}
          initialFocus
        />
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Import Input OTP Components in TypeScript/React
DESCRIPTION: Imports the necessary React components (`InputOTP`, `InputOTPGroup`, `InputOTPSeparator`, `InputOTPSlot`) from the shadcn/ui library for building an Input OTP field.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot
} from ""@/components/ui/input-otp""
```

----------------------------------------

TITLE: Create Basic Horizontal Resizable Panel Group
DESCRIPTION: This example shows the fundamental structure for creating a horizontal resizable panel group using `ResizablePanelGroup`, `ResizablePanel`, and `ResizableHandle`. It defines two panels separated by a draggable handle, allowing users to adjust their widths.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/resizable.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ResizablePanelGroup direction=""horizontal"">
  <ResizablePanel>One</ResizablePanel>
  <ResizableHandle />
  <ResizablePanel>Two</ResizablePanel>
</ResizablePanelGroup>
```

----------------------------------------

TITLE: Styling Sidebar Menu Actions Based on Active State
DESCRIPTION: Illustrates how to apply conditional styling to a `SidebarMenuAction` component based on the active state of its associated `SidebarMenuButton`. This example uses Tailwind CSS peer variants to make the action visible when the button is active.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_42

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton />
  <SidebarMenuAction className=""peer-data-[active=true]/menu-button:opacity-100"" />
</SidebarMenuItem>
```

----------------------------------------

TITLE: Create a custom Sidebar toggle button using useSidebar hook in TSX
DESCRIPTION: Provides an example of creating a custom component, `CustomTrigger`, that toggles the sidebar. It achieves this by importing the `useSidebar` hook and utilizing its `toggleSidebar` function on a standard HTML button click event.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_34

LANGUAGE: tsx
CODE:
```
import { useSidebar } from ""@/components/ui/sidebar""

export function CustomTrigger() {
  const { toggleSidebar } = useSidebar()

  return <button onClick={toggleSidebar}>Toggle Sidebar</button>
}
```

----------------------------------------

TITLE: Clone Shadcn UI Repository
DESCRIPTION: Clones the official shadcn/ui GitHub repository to set up the local development environment for contributing blocks.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/shadcn-ui/ui.git
```

----------------------------------------

TITLE: Configure shadcn/ui for CSS variable theming
DESCRIPTION: Configures `components.json` to enable CSS variable-based theming for shadcn/ui, setting `tailwind.cssVariables` to `true` for consistent styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  ""style"": ""default"",
  ""rsc"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""app/globals.css"",
    ""baseColor"": ""neutral"",
    ""cssVariables"": true
  },
  ""aliases"": {
    ""components"": ""@/components"",
    ""utils"": ""@/lib/utils"",
    ""ui"": ""@/registry/new-york-v4/ui"",
    ""lib"": ""@/lib"",
    ""hooks"": ""@/hooks""
  },
  ""iconLibrary"": ""lucide""
}
```

----------------------------------------

TITLE: Styling Sidebar Elements Based on Collapsible State
DESCRIPTION: Provides an example of conditionally styling a `SidebarGroup` component based on the `collapsible` state of the parent `Sidebar`. This snippet demonstrates how to hide an element when the sidebar is in 'icon' mode using Tailwind CSS data attributes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_41

LANGUAGE: tsx
CODE:
```
<Sidebar collapsible=""icon"">
  <SidebarContent>
    <SidebarGroup className=""group-data-[collapsible=icon]:hidden"" />
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Create a new React project with Vite
DESCRIPTION: Initializes a new React project using Vite's command-line interface. Selects the React + TypeScript template for development.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest
```

----------------------------------------

TITLE: Install Tooltip component using shadcn/ui CLI
DESCRIPTION: This command utilizes the shadcn/ui CLI to automatically add the Tooltip component and its required dependencies to your project, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tooltip.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add tooltip
```

----------------------------------------

TITLE: Build shadcn registry JSON files for component metadata
DESCRIPTION: The `build` command generates registry JSON files from `registry.json` and places them in the `public/r` directory by default. This process is crucial for serving component metadata, with an option to customize the output directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/cli.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest build
```

LANGUAGE: APIDOC
CODE:
```
Usage: shadcn build [options] [registry]

build components for a shadcn registry

Arguments:
  registry             path to registry.json file (default: ""./registry.json"")

Options:
  -o, --output <path>  destination directory for json files (default: ""./public/r"")
  -c, --cwd <cwd>      the working directory. defaults to the current directory.
  -h, --help           display help for command
```

LANGUAGE: bash
CODE:
```
npx shadcn@latest build --output ./public/registry
```

----------------------------------------

TITLE: Add Column Visibility Toggle to Shadcn UI DataTable
DESCRIPTION: This example shows how to incorporate a column visibility toggle component, `DataTableViewOptions`, into a `DataTable`. By providing the `table` instance, users can dynamically show or hide columns. This enhances user control over the table's display.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
<DataTableViewOptions table={table} />
```

----------------------------------------

TITLE: Install Sidebar Component via shadcn CLI
DESCRIPTION: Installs the `sidebar.tsx` component and its dependencies using the shadcn CLI tool, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sidebar
```

----------------------------------------

TITLE: Input OTP with Custom Separator Placement
DESCRIPTION: This example illustrates how to customize the visual separation within the Input OTP component using `<InputOTPSeparator />`. It shows a 4-digit OTP divided into two groups of two digits, improving user experience for specific OTP layouts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input-otp.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from ""@/components/ui/input-otp""

...

<InputOTP maxLength={4}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={2} />
    <InputOTPSlot index={3} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Configure shadcn/ui for Utility Class Theming
DESCRIPTION: Shows the `components.json` configuration to enable utility class-based theming in shadcn/ui. Setting `tailwind.cssVariables` to `false` ensures that Tailwind's default utility classes are used for styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""style"": ""default"",
  ""rsc"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""app/globals.css"",
    ""baseColor"": ""neutral"",
    ""cssVariables"": false
  },
  ""aliases"": {
    ""components"": ""@/components"",
    ""utils"": ""@/lib/utils"",
    ""ui"": ""@/components/ui"",
    ""lib"": ""@/lib"",
    ""hooks"": ""@/hooks""
  },
  ""iconLibrary"": ""lucide""
}
```

----------------------------------------

TITLE: Install Input OTP Dependency Manually
DESCRIPTION: Installs the `input-otp` package as a direct dependency using npm, which is required for manual setup of the component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npm install input-otp
```

----------------------------------------

TITLE: shadcn/ui Monorepo File Structure Overview
DESCRIPTION: This outlines the typical file structure created by the shadcn/ui CLI for a monorepo project, separating application code (`apps/web`) from shared UI components and dependencies (`packages/ui`), and including key configuration files like `components.json` and `package.json`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_4

LANGUAGE: txt
CODE:
```
apps
└── web         # Your app goes here.
    ├── app
    │   └── page.tsx
    ├── components
    │   └── login-form.tsx
    ├── components.json
    └── package.json
packages
└── ui          # Your components and dependencies are installed here.
    ├── src
    │   ├── components
    │   │   └── button.tsx
    │   ├── hooks
    │   ├── lib
    │   │   └── utils.ts
    │   └── styles
    │       └── globals.css
    ├── components.json
    └── package.json
package.json
turbo.json
```

----------------------------------------

TITLE: Import Alert components in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the necessary Alert, AlertDescription, and AlertTitle components into a TypeScript or React file. The import path assumes a typical shadcn UI project structure where components are located under `@/components/ui/alert`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Alert, AlertDescription, AlertTitle } from ""@/components/ui/alert""
```

----------------------------------------

TITLE: Render Alert component with title and description in JSX
DESCRIPTION: This example shows how to use the Alert component in a React application. It illustrates setting a variant (default or destructive), including an icon (Terminal), and populating the Alert with a title and a descriptive message using AlertTitle and AlertDescription sub-components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Alert variant=""default | destructive"">
  <Terminal />
  <AlertTitle>Heads up!</AlertTitle>
  <AlertDescription>
    You can add components and dependencies to your app using the cli.
  </AlertDescription>
</Alert>
```

----------------------------------------

TITLE: Show CSS import change with diff
DESCRIPTION: Demonstrates a `diff` output showing a change from a Tailwind CSS plugin import to a direct CSS import for `tw-animate-css`, indicating a refactoring or update.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_10

LANGUAGE: diff
CODE:
```
- @plugin 'tailwindcss-animate';
+ @import ""tw-animate-css"";
```

----------------------------------------

TITLE: Install Tooltip Dependencies Manually with npm
DESCRIPTION: This command installs the core `@radix-ui/react-tooltip` package, which is the foundational dependency for the Tooltip component. It's a prerequisite for manual integration into a React project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-tooltip
```

----------------------------------------

TITLE: Adjust Sheet content size with CSS classes in TSX
DESCRIPTION: Illustrates how to customize the width of the SheetContent component using Tailwind CSS classes (`w-[400px] sm:w-[540px]`) for responsive sizing. This example shows how to apply custom styling to control the sheet's dimensions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sheet.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<Sheet>
  <SheetTrigger>Open</SheetTrigger>
  <SheetContent className=""w-[400px] sm:w-[540px]"">
    <SheetHeader>
      <SheetTitle>Are you absolutely sure?</SheetTitle>
      <SheetDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </SheetDescription>
    </SheetHeader>
  </SheetContent>
</Sheet>
```

----------------------------------------

TITLE: Define Sortable and Hideable Column Header for DataTable
DESCRIPTION: This example shows how to define a column in a `DataTable` that supports sorting and visibility toggling. It uses an `accessorKey` for data mapping and a custom `header` render function that wraps the column title with `DataTableColumnHeader`. This pattern allows for reusable and interactive column headers.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
export const columns = [
  {
    accessorKey: ""email"",
    header: ({ column }) => (
      <DataTableColumnHeader column={column} title=""Email"" />
    ),
  },
]
```

----------------------------------------

TITLE: Import Drawer Components in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the necessary Drawer components (Drawer, DrawerClose, DrawerContent, etc.) from the Shadcn UI library into a TypeScript or React project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from ""@/components/ui/drawer""
```

----------------------------------------

TITLE: Install Input OTP Component via Shadcn CLI
DESCRIPTION: This command uses the `shadcn/ui` CLI to automatically add the `input-otp` component and its dependencies to your project. It simplifies the setup process by handling file creation and configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input-otp.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add input-otp
```

----------------------------------------

TITLE: Display Selected Row Count in Shadcn UI DataTable
DESCRIPTION: This snippet illustrates how to dynamically display the number of selected rows in a `DataTable`. It leverages the `table.getFilteredSelectedRowModel().rows.length` API to count selected and filtered rows, and `table.getFilteredRowModel().rows.length` for the total number of rows. This provides immediate feedback to the user about their selections.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
<div className=""text-muted-foreground flex-1 text-sm"">
  {table.getFilteredSelectedRowModel().rows.length} of{"" ""}
  {table.getFilteredRowModel().rows.length} row(s) selected.
</div>
```

----------------------------------------

TITLE: Install Skeleton component via CLI
DESCRIPTION: Installs the Shadcn UI Skeleton component using the `npx shadcn@latest add` command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add skeleton
```

----------------------------------------

TITLE: Import shadcn/ui components and utilities in a monorepo
DESCRIPTION: In a shadcn/ui monorepo, components, hooks, and utility functions are imported from the `@workspace/ui` package. This standardized import path simplifies module resolution across different workspaces.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Button } from ""@workspace/ui/components/button""
```

LANGUAGE: tsx
CODE:
```
import { useTheme } from ""@workspace/ui/hooks/use-theme""
import { cn } from ""@workspace/ui/lib/utils""
```

----------------------------------------

TITLE: Import Accordion components in React/TypeScript
DESCRIPTION: This snippet demonstrates how to import the necessary Accordion components (Accordion, AccordionContent, AccordionItem, AccordionTrigger) from the Shadcn UI library into a React or TypeScript file, preparing them for use in your application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/accordion.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Accordion,
  AccordionContent,
  AccordionItem,
  AccordionTrigger,
} from ""@/components/ui/accordion""
```

----------------------------------------

TITLE: Create a new React project with Vite
DESCRIPTION: Initializes a new React project using Vite, prompting for template selection. Select 'React + TypeScript' during the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm create vite@latest
```

----------------------------------------

TITLE: Install Sheet component using CLI
DESCRIPTION: Installs the Shadcn UI Sheet component using the `npx shadcn@latest add` command-line interface, providing a quick setup method.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sheet.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sheet
```

----------------------------------------

TITLE: Render shadcn/ui Button component
DESCRIPTION: Renders a basic shadcn/ui Button component in a TSX file, displaying 'Click me' as its content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Button>Click me</Button>
```

----------------------------------------

TITLE: npm ERESOLVE Error for Unresolved React 19 Peer Dependency
DESCRIPTION: Displays an example of the `ERESOLVE` error message generated by npm when a project's dependencies conflict with a package's peer dependency requirements, specifically when React 19 is not listed as a supported version.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/react-19.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm error code ERESOLVE
npm error ERESOLVE unable to resolve dependency tree
npm error
npm error While resolving: my-app@0.1.0
npm error Found: react@19.0.0-rc-69d4b800-20241021
npm error node_modules/react
npm error   react@""19.0.0-rc-69d4b800-20241021"" from the root project
```

----------------------------------------

TITLE: Manually install Tooltip core dependency
DESCRIPTION: This command installs the primary `@radix-ui/react-tooltip` package, which is the foundational dependency for the Tooltip component when performing a manual installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tooltip.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-tooltip
```

----------------------------------------

TITLE: Install Tooltip Component via shadcn/ui CLI
DESCRIPTION: This command uses the shadcn/ui CLI to automatically add the Tooltip component and its dependencies to your project. It simplifies the setup process by handling file creation and configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tooltip.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add tooltip
```

----------------------------------------

TITLE: Configure JavaScript Import Aliases with jsconfig.json
DESCRIPTION: This `jsconfig.json` file is used to configure import aliases for JavaScript and TypeScript projects, allowing cleaner module imports. It maps the `@/*` alias to the project root for easier path resolution.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/index.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  ""compilerOptions"": {
    ""paths"": {
      ""@/*"": [""./*""]
    }
  }
}
```

----------------------------------------

TITLE: Example npm ERESOLVE Error for React 19 Peer Dependency
DESCRIPTION: Demonstrates the `ERESOLVE` error message that npm displays when a project's React version (e.g., React 19) conflicts with a package's declared peer dependencies, indicating an inability to resolve the dependency tree.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm error code ERESOLVE
npm error ERESOLVE unable to resolve dependency tree
npm error
npm error While resolving: my-app@0.1.0
npm error Found: react@19.0.0-rc-69d4b800-20241021
npm error node_modules/react
npm error   react@""19.0.0-rc-69d4b800-20241021"" from the root project
```

----------------------------------------

TITLE: Import AspectRatio Component in TypeScript/React
DESCRIPTION: This snippet demonstrates the standard way to import the `AspectRatio` component from the local UI library path within a TypeScript React application, making it available for use in your JSX.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/aspect-ratio.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { AspectRatio } from ""@/components/ui/aspect-ratio""
```

----------------------------------------

TITLE: Install Carousel Component via CLI
DESCRIPTION: Installs the shadcn/ui Carousel component using the `npx shadcn@latest add` command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add carousel
```

----------------------------------------

TITLE: Install Core Dependencies for shadcn/ui
DESCRIPTION: Installs essential npm packages required for shadcn/ui components, including `class-variance-authority`, `clsx`, `tailwind-merge`, `lucide-react`, and `tw-animate-css`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install class-variance-authority clsx tailwind-merge lucide-react tw-animate-css
```

----------------------------------------

TITLE: Override Tailwind Theme Variables in shadcn/ui Registry Item
DESCRIPTION: Illustrates how to add or override Tailwind CSS theme variables within a shadcn/ui registry item. It provides examples for both Tailwind CSS v4 and v3, showing how to modify `cssVars.theme` or `tailwind.config.theme.extend` to customize theme properties like text size, easing functions, or fonts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/faq.mdx#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""title"": ""Hello World"",
  ""type"": ""registry:block"",
  ""description"": ""A complex hello world component"",
  ""files"": [
    // ...
  ],
  ""cssVars"": {
    ""theme"": {
      ""text-base"": ""3rem"",
      ""ease-in-out"": ""cubic-bezier(0.4, 0, 0.2, 1)"",
      ""font-heading"": ""Poppins, sans-serif""
    }
  }
}
```

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema/registry-item.json"",
  ""name"": ""hello-world"",
  ""title"": ""Hello World"",
  ""type"": ""registry:block"",
  ""description"": ""A complex hello world component"",
  ""files"": [
    // ...
  ],
  ""tailwind"": {
    ""config"": {
      ""theme"": {
        ""extend"": {
          ""text"": {
            ""base"": ""3rem""
          }
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure path aliases for components in components.json
DESCRIPTION: Defines import aliases used by the CLI to correctly place generated components within your project structure. These aliases must correspond to the `paths` configurations defined in your `tsconfig.json` or `jsconfig.json` file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
aliases: object
  The CLI uses these values and the `paths` config from your `tsconfig.json` or `jsconfig.json` file to place generated components in the correct location.

  aliases.utils: string
    Import alias for your utility functions.
    Example:
      {
        ""aliases"": {
          ""utils"": ""@/lib/utils""
        }
      }

  aliases.components: string
    Import alias for your components.
    Example:
      {
        ""aliases"": {
          ""components"": ""@/components""
        }
      }

  aliases.ui: string
    Import alias for `ui` components.
    The CLI will use the `aliases.ui` value to determine where to place your `ui` components.
    Example:
      {
        ""aliases"": {
          ""ui"": ""@/app/ui""
        }
      }

  aliases.lib: string
    Import alias for `lib` functions such as `format-date` or `generate-id`.
    Example:
      {
        ""aliases"": {
          ""lib"": ""@/lib""
        }
      }

  aliases.hooks: string
    Import alias for `hooks` such as `use-media-query` or `use-toast`.
    Example:
      {
        ""aliases"": {
          ""hooks"": ""@/hooks""
        }
      }
```

----------------------------------------

TITLE: Install Core Dependencies for shadcn/ui
DESCRIPTION: Installs essential npm packages required for shadcn/ui components, including `class-variance-authority`, `clsx`, `tailwind-merge`, `lucide-react`, and `tw-animate-css`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install class-variance-authority clsx tailwind-merge lucide-react tw-animate-css
```

----------------------------------------

TITLE: Initialize shadcn/ui in Next.js Project
DESCRIPTION: This command initializes `shadcn/ui` in a new or existing Next.js project. It sets up the necessary configuration files and project structure for `shadcn/ui` integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Refined CSS Variable Management with @theme inline and HSL Wrappers
DESCRIPTION: Demonstrates an improved approach for CSS variable handling. This involves moving `:root` and `.dark` definitions outside `@layer`, wrapping color values directly in `hsl()`, and utilizing `@theme inline` to simplify direct variable access without redundant `hsl()` wrappers.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_5

LANGUAGE: css
CODE:
```
:root {
  --background: hsl(0 0% 100%); // <-- Wrap in hsl
  --foreground: hsl(0 0% 3.9%);
}

.dark {
  --background: hsl(0 0% 3.9%); // <-- Wrap in hsl
  --foreground: hsl(0 0% 98%);
}

@theme inline {
  --color-background: var(--background); // <-- Remove hsl
  --color-foreground: var(--foreground);
}
```

----------------------------------------

TITLE: Create a new Gatsby project
DESCRIPTION: Initializes a new Gatsby project using the `create-gatsby` command-line tool, which sets up the basic project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/gatsby.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm init gatsby
```

----------------------------------------

TITLE: Install Sheet component manual dependencies
DESCRIPTION: Installs the required `@radix-ui/react-dialog` dependency using npm, which is necessary for the manual setup of the Sheet component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sheet.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dialog
```

----------------------------------------

TITLE: Add shadcn/ui Components to a Specific Application
DESCRIPTION: This command adds specific shadcn/ui components, such as a button, to a designated application within the monorepo. The `-c` flag specifies the target application directory where the components should be placed, typically within `apps/web`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/templates/monorepo-next/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pnpm dlx shadcn@latest add button -c apps/web
```

----------------------------------------

TITLE: Initialize shadcn project configuration and dependencies using CLI
DESCRIPTION: The `init` command sets up a new shadcn project by installing necessary dependencies, adding the `cn` utility, and configuring CSS variables. It prepares the project for component integration, allowing customization of template, base color, and directory structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/cli.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

LANGUAGE: APIDOC
CODE:
```
Usage: shadcn init [options] [components...]

initialize your project and install dependencies

Arguments:
  components         name, url or local path to component

Options:
  -t, --template <template>      the template to use. (next, next-monorepo)
  -b, --base-color <base-color>  the base color to use. (neutral, gray, zinc, stone, slate)
  -y, --yes                      skip confirmation prompt. (default: true)
  -f, --force                    force overwrite of existing configuration. (default: false)
  -c, --cwd <cwd>                the working directory. defaults to the current directory.
  -s, --silent                   mute output. (default: false)
  --src-dir                      use the src directory when creating a new project. (default: false)
  --no-src-dir                   do not use the src directory when creating a new project.
  --css-variables                use css variables for theming. (default: true)
  --no-css-variables             do not use css variables for theming.
  -h, --help                     display help for command
```

----------------------------------------

TITLE: Import and use shadcn/ui Button component in React
DESCRIPTION: Demonstrates how to import the `Button` component from the shadcn/ui library and integrate it into a React functional component, rendering it within a basic layout.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

function App() {
  return (
    <div className=""flex flex-col items-center justify-center min-h-svh"">
      <Button>Click me</Button>
    </div>
  )
}

export default App
```

----------------------------------------

TITLE: Render Basic Button Component in TSX
DESCRIPTION: Demonstrates how to render a basic `Button` component with an 'outline' variant, showcasing its fundamental usage in a TypeScript React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Button variant=""outline"">Button</Button>
```

----------------------------------------

TITLE: Implement Input OTP with Custom Separator
DESCRIPTION: Illustrates how to integrate the `<InputOTPSeparator />` component to add visual separation between groups of OTP input slots, improving readability for users.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot
} from ""@/components/ui/input-otp""

...

<InputOTP maxLength={4}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={2} />
    <InputOTPSlot index={3} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Create a new Astro project with Tailwind CSS and React
DESCRIPTION: This command initializes a new Astro project named 'astro-app'. It includes Tailwind CSS for styling, installs dependencies, adds React support, and sets up a Git repository, providing a solid foundation for shadcn/ui integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/astro.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-astro@latest astro-app  --template with-tailwindcss --install --add react --git
```

----------------------------------------

TITLE: Import and use a shadcn/ui component in a React/TypeScript file
DESCRIPTION: This TypeScript/React snippet demonstrates how to import a shadcn/ui component (like 'Switch') from its generated path. It then shows how to render the component within a React functional component, making it available in your application's UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Switch } from ""@/components/ui/switch""

const MyPage = () => {
  return (
    <div>
      <Switch />
    </div>
  )
}

export default MyPage
```

----------------------------------------

TITLE: Enhance SidebarProvider's setOpen Callback with Cookie Persistence
DESCRIPTION: Provides an updated `React.useCallback` implementation for the `setOpen` function in `SidebarProvider`. This version supports both direct boolean values and functional updates, propagates the state, and ensures the sidebar's open state is persisted in a document cookie for user preference.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_45

LANGUAGE: tsx
CODE:
```
const setOpen = React.useCallback(
  (value: boolean | ((value: boolean) => boolean)) => {
    const openState = typeof value === ""function"" ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }

    // This sets the cookie to keep the sidebar state.
    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  },
  [setOpenProp, open]
)
```

----------------------------------------

TITLE: Enable React Server Components support in components.json
DESCRIPTION: Controls whether support for React Server Components is enabled. When set to `true`, the CLI automatically adds a `use client` directive to client components, facilitating seamless RSC integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""rsc"": true | false
}
```

----------------------------------------

TITLE: Connect to Deployed SQLite Database via SSH
DESCRIPTION: This command allows you to connect directly to the live SQLite database residing at '/data/sqlite.db' within your deployed Fly.io application. It provides a command-line interface for database interaction.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_9

LANGUAGE: sh
CODE:
```
fly ssh console -C database-cli
```

----------------------------------------

TITLE: Initialize shadcn/ui in Remix
DESCRIPTION: Runs the shadcn/ui initialization command to set up the project configuration. This step is crucial for integrating shadcn/ui components and generating the `components.json` file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Create Basic AppSidebar Component Structure
DESCRIPTION: This snippet shows the basic structure of the `AppSidebar` component, utilizing `Sidebar`, `SidebarContent`, `SidebarFooter`, `SidebarGroup`, and `SidebarHeader` from the UI library to form a complete sidebar layout.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarHeader,
} from ""@/components/ui/sidebar""

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader />
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
      <SidebarFooter />
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: shadcn/ui CLI Prompt for React 19 Peer Dependencies
DESCRIPTION: Displays the interactive prompt from the `shadcn/ui` CLI during initialization when React 19 is detected. It offers users options to resolve potential peer dependency issues, such as using `--force` or `--legacy-peer-deps`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
It looks like you are using React 19.
Some packages may fail to install due to peer dependency issues (see https://ui.shadcn.com/react-19).

? How would you like to proceed? › - Use arrow-keys. Return to submit.
❯   Use --force
    Use --legacy-peer-deps
```

----------------------------------------

TITLE: Install Project Dependencies with pnpm
DESCRIPTION: Installs all necessary project dependencies using the pnpm package manager, required before running development servers.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/blocks.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Install Project Dependencies with pnpm
DESCRIPTION: Installs all required project dependencies using pnpm, ensuring all necessary packages are available for development and building the blocks.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm install
```

----------------------------------------

TITLE: Import buttonVariants Helper for Link Styling
DESCRIPTION: Imports the `buttonVariants` helper function, which allows applying button-like styling to other components, such as links, to maintain visual consistency.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { buttonVariants } from ""@/components/ui/button""
```

----------------------------------------

TITLE: Initialize shadcn/ui in Remix project
DESCRIPTION: Runs the `shadcn` CLI `init` command to set up `shadcn/ui` configuration files and dependencies in the current project, preparing it for component installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Import Shadcn UI Select components
DESCRIPTION: This TypeScript/TSX snippet shows how to import the necessary components for the Shadcn UI Select. It includes `Select`, `SelectContent`, `SelectItem`, `SelectTrigger`, and `SelectValue` from the local UI components path.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from ""@/components/ui/select""
```

----------------------------------------

TITLE: Install shadcn/ui Sidebar Component via CLI
DESCRIPTION: Run this command to automatically add the `sidebar.tsx` component to your project using the shadcn/ui CLI, simplifying the installation process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sidebar
```

----------------------------------------

TITLE: Create Basic AppSidebar Component Structure
DESCRIPTION: This snippet shows the basic structure of `AppSidebar` component, utilizing `Sidebar`, `SidebarContent`, `SidebarFooter`, `SidebarGroup`, and `SidebarHeader` from `@/components/ui/sidebar` to define the layout of the sidebar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarGroup,
  SidebarHeader,
} from ""@/components/ui/sidebar""

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarHeader />
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
      <SidebarFooter />
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Create New TanStack Router Project
DESCRIPTION: Initializes a new TanStack Router application using `create-tsrouter-app`. This command sets up a file-based router, integrates Tailwind CSS for styling, and includes shadcn/ui add-ons for component management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-tsrouter-app@latest my-app --template file-router --tailwind --add-ons shadcn
```

----------------------------------------

TITLE: Install Shadcn UI Toast via CLI
DESCRIPTION: Use the Shadcn UI CLI to quickly add the Toast component and its dependencies to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add toast
```

----------------------------------------

TITLE: Define Files for shadcn-ui Registry Items
DESCRIPTION: This JSON configuration defines the files associated with a shadcn-ui registry item. Each file entry specifies its `path`, `type` (e.g., `registry:page`, `registry:component`, `registry:hook`, `registry:file`), and an optional `target` property. The `target` is crucial for `registry:page` and `registry:file` types, indicating where the file should be placed in the user's project, with `~` referring to the project root.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  ""files"": [
    {
      ""path"": ""registry/new-york/hello-world/page.tsx"",
      ""type"": ""registry:page"",
      ""target"": ""app/hello/page.tsx""
    },
    {
      ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/use-hello-world.ts"",
      ""type"": ""registry:hook""
    },
    {
      ""path"": ""registry/new-york/hello-world/.env"",
      ""type"": ""registry:file"",
      ""target"": ""~/.env""
    }
  ]
}
```

----------------------------------------

TITLE: Import Input OTP Components in React/Next.js
DESCRIPTION: This snippet demonstrates how to import the necessary `InputOTP` components from the `@/components/ui/input-otp` path. These imports are essential for using the `InputOTP`, `InputOTPGroup`, `InputOTPSeparator`, and `InputOTPSlot` components in a TSX file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input-otp.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  InputOTP,
  InputOTPGroup,
  InputOTPSeparator,
  InputOTPSlot,
} from ""@/components/ui/input-otp""
```

----------------------------------------

TITLE: Manual migration: `forwardRef` to `ComponentProps` (Before)
DESCRIPTION: Shows the original implementation of a React component using `React.forwardRef`. This pattern is being deprecated in favor of a simpler approach using `React.ComponentProps` for component typing.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn(""border-b last:border-b-0"", className)}
    {...props}
  />
))
AccordionItem.displayName = ""AccordionItem""
```

----------------------------------------

TITLE: Implement Pagination Controls for React Table
DESCRIPTION: Adds user interface controls (Previous/Next buttons) to navigate between pages in a `@tanstack/react-table` instance. It leverages `table.previousPage()`, `table.nextPage()`, and `table.getCanPreviousPage()`/`table.getCanNextPage()` methods for interactive pagination.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  return (
    <div>
      <div className=""rounded-md border"">
        <Table>
          { // .... }
        </Table>
      </div>
      <div className=""flex items-center justify-end space-x-2 py-4"">
        <Button
          variant=""outline""
          size=""sm""
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant=""outline""
          size=""sm""
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Configure Files for shadcn-ui Registry Items
DESCRIPTION: The `files` property defines the assets included in a registry item, specifying their `path`, `type`, and an optional `target` location within a project. The `target` property is mandatory for `registry:page` and `registry:file` types, indicating where the file should be placed. Paths can use `~` to denote the project root.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/registry-item-json.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  ""files"": [
    {
      ""path"": ""registry/new-york/hello-world/page.tsx"",
      ""type"": ""registry:page"",
      ""target"": ""app/hello/page.tsx""
    },
    {
      ""path"": ""registry/new-york/hello-world/hello-world.tsx"",
      ""type"": ""registry:component""
    },
    {
      ""path"": ""registry/new-york/hello-world/use-hello-world.ts"",
      ""type"": ""registry:hook""
    },
    {
      ""path"": ""registry/new-york/hello-world/.env"",
      ""type"": ""registry:file"",
      ""target"": ""~/.env""
    }
  ]
}
```

----------------------------------------

TITLE: shadcn/ui CLI Prompt for React 19 Peer Dependency Resolution
DESCRIPTION: Illustrates the interactive prompt displayed by the `shadcn/ui` CLI when initializing a project (`npx shadcn@latest init -d`) and detecting React 19, offering users options to resolve potential peer dependency issues.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/react-19.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
It looks like you are using React 19.
Some packages may fail to install due to peer dependency issues (see https://ui.shadcn.com/react-19).

? How would you like to proceed? › - Use arrow-keys. Return to submit.
❯   Use --force
    Use --legacy-peer-deps
```

----------------------------------------

TITLE: Import and use shadcn/ui Button in Astro
DESCRIPTION: Demonstrates how to import the `Button` component from the `shadcn/ui` library into an Astro page. The component is then rendered within the HTML structure, showcasing its usage in a typical Astro setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#_snippet_4

LANGUAGE: astro
CODE:
```
--- 
import { Button } from ""@/components/ui/button""
---

<html lang=""en"">
	<head>
		<meta charset=""utf-8"" />
		<meta name=""viewport"" content=""width=device-width"" />
		<link rel=""icon"" type=""image/svg+xml"" href=""/favicon.svg"" />
		<meta name=""generator"" content={Astro.generator} />
		<title>Astro + TailwindCSS</title>
	</head>

	<body>
		<div class=""grid place-items-center h-screen content-center"">
			<Button>Button</Button>
		</div>
	</body>
</html>
```

----------------------------------------

TITLE: Create New TanStack Router Project
DESCRIPTION: Initializes a new TanStack Router application using `create-tsrouter-app`. This command sets up a file-based router, integrates Tailwind CSS for styling, and includes shadcn/ui add-ons for component management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack-router.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-tsrouter-app@latest my-app --template file-router --tailwind --add-ons shadcn
```

----------------------------------------

TITLE: Fetch data for SidebarMenu using React Query in TSX
DESCRIPTION: Illustrates how to fetch and display project data within a `SidebarMenu` using the React Query library. Similar to SWR, it includes logic for managing loading states and rendering the dynamic content once the data has been successfully retrieved.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_40

LANGUAGE: tsx
CODE:
```
function NavProjects() {
  const { data, isLoading } = useQuery()

  if (isLoading) {
    return (
      <SidebarMenu>
        {Array.from({ length: 5 }).map((_, index) => (
          <SidebarMenuItem key={index}>
            <SidebarMenuSkeleton showIcon />
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    )
  }

  if (!data) {
    return ...
  }

  return (
    <SidebarMenu>
      {data.map((project) => (
        <SidebarMenuItem key={project.name}>
          <SidebarMenuButton asChild>
            <a href={project.url}>
              <project.icon />
              <span>{project.name}</span>
            </a>
          </SidebarMenuButton>
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Add shadcn/ui component
DESCRIPTION: Adds a specific shadcn/ui component, such as a button, to the project's component registry.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Configure JSON Schema for components.json
DESCRIPTION: Specifies the JSON Schema URL for `components.json`, enabling validation and autocompletion in compatible editors. This ensures the configuration adheres to the defined structure and helps prevent errors.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json""
}
```

----------------------------------------

TITLE: Sidebar Component Props Reference
DESCRIPTION: Comprehensive documentation for the `Sidebar` component's configurable properties, including its position, visual style, and collapsibility behavior. These props allow for extensive customization of the sidebar's appearance and interaction.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Sidebar Component Props:

Property: side
  Type: ""left"" | ""right""
  Description: Specifies the side of the screen where the sidebar will be displayed.
  Options:
    - ""left"": Sidebar appears on the left.
    - ""right"": Sidebar appears on the right.
  Example Usage:
    import { Sidebar } from ""@/components/ui/sidebar""

    export function AppSidebar() {
      return <Sidebar side=""left | right"" />
    }

Property: variant
  Type: ""sidebar"" | ""floating"" | ""inset""
  Description: Defines the visual style and behavior of the sidebar.
  Options:
    - ""sidebar"": Standard sidebar behavior.
    - ""floating"": A sidebar that floats over content.
    - ""inset"": A sidebar that is integrated into the layout.
  Note: If using ""inset"" variant, wrap main content in a `SidebarInset` component.
  Example Usage:
    import { Sidebar } from ""@/components/ui/sidebar""

    export function AppSidebar() {
      return <Sidebar variant=""sidebar | floating | inset"" />
    }
    <SidebarProvider>
      <Sidebar variant=""inset"" />
      <SidebarInset>
        <main>{children}</main>
      </SidebarInset>
    </SidebarProvider>

Property: collapsible
  Type: ""offcanvas"" | ""icon"" | ""none""
  Description: Configures the sidebar's collapsibility behavior.
  Options:
    - ""offcanvas"": A collapsible sidebar that slides in from the left or right.
    - ""icon"": A sidebar that collapses to display only icons.
    - ""none"": The sidebar is not collapsible.
  Example Usage:
    import { Sidebar } from ""@/components/ui/sidebar""

    export function AppSidebar() {
      return <Sidebar collapsible=""offcanvas | icon | none"" />
    }
```

----------------------------------------

TITLE: Import and render Shadcn UI Badge component
DESCRIPTION: Demonstrates how to import the Badge component from the local UI library path and render a basic instance with an 'outline' variant in a TypeScript/React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/badge.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Badge } from ""@/components/ui/badge""
```

LANGUAGE: tsx
CODE:
```
<Badge variant=""outline"">Badge</Badge>
```

----------------------------------------

TITLE: Integrate Next.js Link Component with PaginationLink
DESCRIPTION: Modifies the `PaginationLink` component to utilize Next.js's `Link` component instead of a standard `<a>` tag, enabling client-side routing and improved navigation within Next.js applications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_3

LANGUAGE: diff
CODE:
```
+ import Link from ""next/link""

- type PaginationLinkProps = ... & React.ComponentProps<""a"">
+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>

const PaginationLink = ({...props }: ) => (
  <PaginationItem>
-   <a>
+   <Link>
      // ...
-   </a>
+   </Link>
  </PaginationItem>
)
```

----------------------------------------

TITLE: Implement Pagination Controls for React Table
DESCRIPTION: Adds user interface controls (Previous/Next buttons) to navigate between pages in a `@tanstack/react-table` instance. It leverages `table.previousPage()`, `table.nextPage()`, and `table.getCanPreviousPage()`/`table.getCanNextPage()` methods for interactive pagination.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  return (
    <div>
      <div className=""rounded-md border"">
        <Table>
          { // .... }
        </Table>
      </div>
      <div className=""flex items-center justify-end space-x-2 py-4"">
        <Button
          variant=""outline""
          size=""sm""
          onClick={() => table.previousPage()}
          disabled={!table.getCanPreviousPage()}
        >
          Previous
        </Button>
        <Button
          variant=""outline""
          size=""sm""
          onClick={() => table.nextPage()}
          disabled={!table.getCanNextPage()}
        >
          Next
        </Button>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Basic Popover Component Usage in React
DESCRIPTION: Demonstrates a minimal implementation of the Popover component, showing how to wrap content with PopoverTrigger and PopoverContent to create an interactive popover.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/popover.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Popover>
  <PopoverTrigger>Open</PopoverTrigger>
  <PopoverContent>Place content for the popover here.</PopoverContent>
</Popover>
```

----------------------------------------

TITLE: Add shadcn/ui Component to Project
DESCRIPTION: This command adds a specific `shadcn/ui` component, such as a button, to your project. It fetches the component's code and integrates it into your local codebase, making it available for import and use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Implement Sidebar with Dynamic Menu Items and Icons
DESCRIPTION: This snippet demonstrates how to populate the `AppSidebar` with dynamic menu items using `SidebarMenu`, `SidebarMenuButton`, and `SidebarMenuItem`. It includes an array of menu items with titles, URLs, and Lucide icons, rendered within `SidebarGroup` and `SidebarGroupContent` to create a functional navigation menu.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Calendar, Home, Inbox, Search, Settings } from ""lucide-react""

import {
  Sidebar,
  SidebarContent,
  SidebarGroup,
  SidebarGroupContent,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from ""@/components/ui/sidebar""

// Menu items.
const items = [
  {
    title: ""Home"",
    url: ""#"",
    icon: Home,
  },
  {
    title: ""Inbox"",
    url: ""#"",
    icon: Inbox,
  },
  {
    title: ""Calendar"",
    url: ""#"",
    icon: Calendar,
  },
  {
    title: ""Search"",
    url: ""#"",
    icon: Search,
  },
  {
    title: ""Settings"",
    url: ""#"",
    icon: Settings,
  },
]

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupContent>
            <SidebarMenu>
              {items.map((item) => (
                <SidebarMenuItem key={item.title}>
                  <SidebarMenuButton asChild>
                    <a href={item.url}>
                      <item.icon />
                      <span>{item.title}</span>
                    </a>
                  </SidebarMenuButton>
                </SidebarMenuItem>
              ))}
            </SidebarMenu>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Cypress Utility for Authenticated User Login
DESCRIPTION: This Cypress command provides a utility to log in a new user for testing authenticated features without going through the full login flow. It simplifies end-to-end test setup for user-specific functionalities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/test/fixtures/frameworks/remix-indie-stack/README.md#_snippet_11

LANGUAGE: ts
CODE:
```
cy.login();
```

----------------------------------------

TITLE: Import Table Components in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the various sub-components of the Shadcn UI Table, such as `Table`, `TableBody`, `TableCell`, `TableHead`, `TableHeader`, `TableRow`, and `TableCaption`. These components are imported from the `@/components/ui/table` path, preparing them for use within a React/TypeScript application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/table.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from ""@/components/ui/table""
```

----------------------------------------

TITLE: shadcn-ui components.json Configuration for Tailwind CSS v4
DESCRIPTION: These configurations define the `components.json` file for shadcn-ui projects using Tailwind CSS v4. They specify styling, RSC, TSX, icon library, and crucial aliases for component, hook, and utility imports. A key difference for v4 is that the `tailwind.config` path is intentionally left empty.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": true,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""../../packages/ui/src/styles/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""iconLibrary"": ""lucide"",
  ""aliases"": {
    ""components"": ""@/components"",
    ""hooks"": ""@/hooks"",
    ""lib"": ""@/lib"",
    ""utils"": ""@workspace/ui/lib/utils"",
    ""ui"": ""@workspace/ui/components""
  }
}
```

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": true,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""src/styles/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""iconLibrary"": ""lucide"",
  ""aliases"": {
    ""components"": ""@workspace/ui/components"",
    ""utils"": ""@workspace/ui/lib/utils"",
    ""hooks"": ""@workspace/ui/hooks"",
    ""lib"": ""@workspace/ui/lib"",
    ""ui"": ""@workspace/ui/components""
  }
}
```

----------------------------------------

TITLE: Import Menubar components for TSX usage
DESCRIPTION: This TypeScript React snippet demonstrates how to import all necessary sub-components of the Menubar from the `@/components/ui/menubar` path, preparing them for use in your application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Menubar,
  MenubarContent,
  MenubarItem,
  MenubarMenu,
  MenubarSeparator,
  MenubarShortcut,
  MenubarTrigger,
} from ""@/components/ui/menubar""
```

----------------------------------------

TITLE: Navigate to Application Workspace for Component Addition
DESCRIPTION: Before adding components, navigate into the specific application workspace (e.g., `apps/web`) where the components will be used and where the `components.json` file for that application resides.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd apps/web
```

----------------------------------------

TITLE: Run All Project Tests
DESCRIPTION: This command executes all tests configured within the shadcn/ui project using Vitest. It should be run from the root directory of the repository. Developers are required to ensure all tests pass before submitting a pull request, and to include new tests for any added features.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/CONTRIBUTING.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm test
```

----------------------------------------

TITLE: Default shadcn/ui monorepo file structure
DESCRIPTION: This outlines the typical directory structure generated by the shadcn/ui CLI for a monorepo. It clearly separates application-specific code (`apps/web`) from shared UI components and utilities (`packages/ui`), facilitating modular development.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_4

LANGUAGE: txt
CODE:
```
apps
└── web         # Your app goes here.
    ├── app
    │   └── page.tsx
    ├── components
    │   └── login-form.tsx
    ├── components.json
    └── package.json
packages
└── ui          # Your components and dependencies are installed here.
    ├── src
    │   ├── components
    │   │   └── button.tsx
    │   ├── hooks
    │   ├── lib
    │   │   └── utils.ts
    │   └── styles
    │       └── globals.css
    ├── components.json
    └── package.json
package.json
turbo.json
```

----------------------------------------

TITLE: Add a shadcn/ui component to the project
DESCRIPTION: Uses the shadcn/ui CLI to add a specific component, such as 'Button', to the project's component library, making it available for use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Sidebar Component Props Reference
DESCRIPTION: Comprehensive documentation for the `Sidebar` component's configurable properties, including its position, visual style, and collapsibility behavior. These props allow for extensive customization of the sidebar's appearance and interaction.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Sidebar Component Props:

Property: side
  Type: ""left"" | ""right""
  Description: Specifies the side of the screen where the sidebar will be displayed.
  Options:
    - ""left"": Sidebar appears on the left.
    - ""right"": Sidebar appears on the right.
  Example Usage:
    import { Sidebar } from ""@/components/ui/sidebar""

    export function AppSidebar() {
      return <Sidebar side=""left | right"" />
    }

Property: variant
  Type: ""sidebar"" | ""floating"" | ""inset""
  Description: Defines the visual style and behavior of the sidebar.
  Options:
    - ""sidebar"": Standard sidebar behavior.
    - ""floating"": A sidebar that floats over content.
    - ""inset"": A sidebar that is integrated into the layout.
  Note: If using ""inset"" variant, wrap main content in a `SidebarInset` component.
  Example Usage:
    import { Sidebar } from ""@/components/ui/sidebar""

    export function AppSidebar() {
      return <Sidebar variant=""sidebar | floating | inset"" />
    }
    <SidebarProvider>
      <Sidebar variant=""inset"" />
      <SidebarInset>
        <main>{children}</main>
      </SidebarInset>
    </SidebarProvider>

Property: collapsible
  Type: ""offcanvas"" | ""icon"" | ""none""
  Description: Configures the sidebar's collapsibility behavior.
  Options:
    - ""offcanvas"": A collapsible sidebar that slides in from the left or right.
    - ""icon"": A sidebar that collapses to display only icons.
    - ""none"": The sidebar is not collapsible.
  Example Usage:
    import { Sidebar } from ""@/components/ui/sidebar""

    export function AppSidebar() {
      return <Sidebar collapsible=""offcanvas | icon | none"" />
    }
```

----------------------------------------

TITLE: Migrate React Components from forwardRef to ComponentProps
DESCRIPTION: Demonstrates the refactoring process for React components, moving away from `React.forwardRef` to a more direct use of `React.ComponentProps`. This includes removing the `ref` prop and optionally adding a `data-slot` attribute for styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn(""border-b last:border-b-0"", className)}
    {...props}
  />
))
AccordionItem.displayName = ""AccordionItem""
```

LANGUAGE: tsx
CODE:
```
function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot=""accordion-item""
      className={cn(""border-b last:border-b-0"", className)}
      {...props}
    />
  )
}
```

----------------------------------------

TITLE: Initialize shadcn/ui project configuration
DESCRIPTION: Runs the shadcn/ui initialization command, which prompts the user to configure `components.json` for the project, including base color selection and other preferences.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: New Block Directory Structure
DESCRIPTION: Illustrates the required directory structure for a new block within the `shadcn/ui` project, specifically under the `new-york` registry, using kebab-case for the block name.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_4

LANGUAGE: txt
CODE:
```
apps
└── www
    └── registry
        └── new-york
            └── blocks
                └── dashboard-01
```

----------------------------------------

TITLE: Create a new Laravel project with React and Inertia
DESCRIPTION: This command initializes a new Laravel application. It includes Inertia.js and React.js for building single-page applications, streamlining frontend development.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/laravel.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
laravel new my-app --react
```

----------------------------------------

TITLE: Interactive configuration for shadcn/ui components.json
DESCRIPTION: Prompts the user to configure `components.json` for `shadcn/ui`. This interactive process allows specifying preferences such as TypeScript usage, styling, global CSS file location, and import aliases for components and utilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#_snippet_5

LANGUAGE: txt
CODE:
```
Would you like to use TypeScript (recommended)? no / yes
Which style would you like to use? › Default
Which color would you like to use as base color? › Slate
Where is your global CSS file? › › ./src/styles/globals.css
Do you want to use CSS variables for colors? › no / yes
Where is your tailwind.config.js located? › tailwind.config.js
Configure the import alias for components: › @/components
Configure the import alias for utils: › @/lib/utils
Are you using React Server Components? › no
```

----------------------------------------

TITLE: Install Table Component using Shadcn CLI
DESCRIPTION: This command utilizes the `npx shadcn@latest add` utility to automatically add the Table component and its necessary dependencies to your project. This method simplifies the setup process by handling file creation and configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/table.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

----------------------------------------

TITLE: Install Button Component Manual Dependencies
DESCRIPTION: Installs the required `@radix-ui/react-slot` dependency, which is essential for the Button component's functionality when performing a manual installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-slot
```

----------------------------------------

TITLE: Install Shadcn UI Hover Card via CLI
DESCRIPTION: Use the shadcn/ui CLI to quickly add the Hover Card component and its dependencies to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/hover-card.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add hover-card
```

----------------------------------------

TITLE: Install Radix UI Menubar dependencies manually
DESCRIPTION: This command installs `@radix-ui/react-menubar`, the foundational primitive library that the shadcn/ui Menubar component builds upon, as part of a manual installation process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-menubar
```

----------------------------------------

TITLE: Replace render prop with composition in InputOTP usage
DESCRIPTION: This snippet illustrates how to refactor the usage of the `InputOTP` component by replacing the `render` prop with direct composition of `InputOTPSlot` components, each assigned an `index` prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_9

LANGUAGE: diff
CODE:
```
<InputOTP maxLength={6}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
    <InputOTPSlot index={2} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={3} />
    <InputOTPSlot index={4} />
    <InputOTPSlot index={5} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Add shadcn/ui Component to Project
DESCRIPTION: Adds a specific shadcn/ui component, such as 'button', to the project using the `shadcn` CLI. This command fetches and integrates the component's code into the local project structure, making it available for import and use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/tanstack-router.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@canary add button
```

----------------------------------------

TITLE: Update input-otp package to latest version
DESCRIPTION: This snippet provides the command to update the `input-otp` package to its latest version using npm, which is a prerequisite for applying the composition pattern changes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npm install input-otp@latest
```

----------------------------------------

TITLE: Add shadcn/ui Component to Project
DESCRIPTION: Adds a specific shadcn/ui component, such as 'button', to the project using the `shadcn` CLI. This command fetches and integrates the component's code into the local project structure, making it available for import and use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/tanstack-router.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@canary add button
```

----------------------------------------

TITLE: Chart Tooltip Component Properties
DESCRIPTION: Documentation for the `ChartTooltip` component's customizable properties. These props allow fine-grained control over the tooltip's appearance, data mapping, and indicator style.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_25

LANGUAGE: APIDOC
CODE:
```
Prop            | Type                     | Description
:-------------- | :----------------------- | :-------------------------------------------
`labelKey`      | string                   | The config or data key to use for the label.
`nameKey`       | string                   | The config or data key to use for the name.
`indicator`     | `dot` `line` or `dashed` | The indicator style for the tooltip.
`hideLabel`     | boolean                  | Whether to hide the label.
`hideIndicator` | boolean                  | Whether to hide the indicator.
```

----------------------------------------

TITLE: Update project dependencies using pnpm
DESCRIPTION: Provides a `pnpm` command to update specific project dependencies to their latest versions. This ensures the project uses the most recent and compatible packages for `@radix-ui/*`, `cmdk`, `lucide-react`, `recharts`, `tailwind-merge`, and `clsx`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
pnpm up ""@radix-ui/*"" cmdk lucide-react recharts tailwind-merge clsx --latest
```

----------------------------------------

TITLE: Add Client-Side Filtering to Shadcn UI Data Table (React Table)
DESCRIPTION: This TypeScript React component, `DataTable`, illustrates how to integrate client-side filtering into a data table built with `@tanstack/react-table` and Shadcn UI. It manages `columnFilters` state, uses `getFilteredRowModel`, and provides an `Input` component to filter data based on the 'email' column, enhancing user interaction for data exploration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from ""@tanstack/react-table""

import { Button } from ""@/components/ui/button""
import { Input } from ""@/components/ui/input""

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
  })

  return (
    <div>
      <div className=""flex items-center py-4"">
        <Input
          placeholder=""Filter emails...""
          value={(table.getColumn(""email"")?.getFilterValue() as string) ?? """"}
          onChange={(event) =>
            table.getColumn(""email"")?.setFilterValue(event.target.value)
          }
          className=""max-w-sm""
        />
      </div>
      <div className=""rounded-md border"">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: Install shadcn/ui Separator via CLI
DESCRIPTION: Use the shadcn/ui CLI to automatically add the Separator component and its dependencies to your project. This is the recommended installation method for quick setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add separator
```

----------------------------------------

TITLE: Install Shadcn UI Table Component via CLI
DESCRIPTION: This command uses `npx` to add the Table component from the Shadcn UI library to your project via the command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

----------------------------------------

TITLE: Install Menubar component using shadcn/ui CLI
DESCRIPTION: Installs the Menubar component and its dependencies using the shadcn/ui command-line interface, automating the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/menubar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add menubar
```

----------------------------------------

TITLE: Create Reusable DataTable Component with React Table and Shadcn UI
DESCRIPTION: This component defines a generic `DataTable` using `@tanstack/react-table` for data management and `shadcn/ui` for visual rendering. It accepts `ColumnDef` and `TData` props, providing a flexible way to display tabular data. The component handles rendering headers, rows, and cells, including a 'No results' fallback.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
""use client""

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from ""@tanstack/react-table""

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from ""@/components/ui/table""

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className=""rounded-md border"">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow
                key={row.id}
                data-state={row.getIsSelected() && ""selected""}
              >
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className=""h-24 text-center"">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
```

----------------------------------------

TITLE: Updating Sidebar `setOpen` Callback for Cookie Persistence
DESCRIPTION: Details an update to the `setOpen` callback within the `SidebarProvider` to include logic for persisting the sidebar's open state using a browser cookie. This ensures the sidebar's state is maintained across page loads or sessions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_43

LANGUAGE: tsx
CODE:
```
const setOpen = React.useCallback(
  (value: boolean | ((value: boolean) => boolean)) => {
    const openState = typeof value === ""function"" ? value(open) : value
    if (setOpenProp) {
      setOpenProp(openState)
    } else {
      _setOpen(openState)
    }

    // This sets the cookie to keep the sidebar state.
    document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`
  },
  [setOpenProp, open]
)
```

----------------------------------------

TITLE: Create a new Remix project
DESCRIPTION: Initializes a new Remix application using the `create-remix` command-line tool. This command sets up the basic project structure and dependencies for a Remix project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-remix@latest my-app
```

----------------------------------------

TITLE: Configure shadcn/ui for CSS Variables Theming
DESCRIPTION: Shows the `components.json` configuration required to enable CSS variable-based theming in shadcn/ui. Setting `tailwind.cssVariables` to `true` directs the framework to use CSS variables for color management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""style"": ""default"",
  ""rsc"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""app/globals.css"",
    ""baseColor"": ""neutral"",
    ""cssVariables"": true
  },
  ""aliases"": {
    ""components"": ""@/components"",
    ""utils"": ""@/lib/utils"",
    ""ui"": ""@/components/ui"",
    ""lib"": ""@/lib"",
    ""hooks"": ""@/hooks""
  },
  ""iconLibrary"": ""lucide""
}
```

----------------------------------------

TITLE: Add a shadcn/ui component
DESCRIPTION: Uses the `shadcn/ui` CLI to add a specific component (e.g., `Button`) to the project. This command fetches the component's code and integrates it into the local codebase.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Manually Install Input OTP Dependencies
DESCRIPTION: This command installs the core `input-otp` package from npm, which is a prerequisite for manual integration of the component. After installation, the component's source code typically needs to be copied into the project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input-otp.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install input-otp
```

----------------------------------------

TITLE: Import Skeleton component in TypeScript/React
DESCRIPTION: Imports the Skeleton component from the Shadcn UI library into a TypeScript/React project, making it available for use in your application's UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/skeleton.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Skeleton } from ""@/components/ui/skeleton""
```

----------------------------------------

TITLE: Modify PaginationLink for Next.js Link Component
DESCRIPTION: Shows the necessary code changes using a diff format to integrate Next.js's `Link` component into the `PaginationLink` component, allowing for client-side routing within the pagination system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/pagination.mdx#_snippet_3

LANGUAGE: diff
CODE:
```
+ import Link from ""next/link""

- type PaginationLinkProps = ... & React.ComponentProps<""a"">
+ type PaginationLinkProps = ... & React.ComponentProps<typeof Link>

const PaginationLink = ({...props }: ) => (
  <PaginationItem>
-   <a>
+   <Link>
      // ...
-   </a>
+   </Link>
  </PaginationItem>
)
```

----------------------------------------

TITLE: Initial CSS Variable Setup with @theme Directive
DESCRIPTION: Illustrates the initial configuration of CSS variables within a `@layer base` block, referencing `:root` variables, and their subsequent mapping using the `@theme` directive. This setup serves as a baseline before further refinements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_4

LANGUAGE: css
CODE:
```
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
  }
}

@theme {
  --color-background: hsl(var(--background));
  --color-foreground: hsl(var(--foreground));
}
```

----------------------------------------

TITLE: shadcn-ui components.json Configuration for Tailwind CSS v3
DESCRIPTION: These configurations define the `components.json` file for shadcn-ui projects using Tailwind CSS v3. They specify styling, RSC, TSX, icon library, and crucial aliases for component, hook, and utility imports. For v3, the `tailwind.config` path is explicitly defined.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_6

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": true,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": ""../../packages/ui/tailwind.config.ts"",
    ""css"": ""../../packages/ui/src/styles/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""iconLibrary"": ""lucide"",
  ""aliases"": {
    ""components"": ""@/components"",
    ""hooks"": ""@/hooks"",
    ""lib"": ""@/lib"",
    ""utils"": ""@workspace/ui/lib/utils"",
    ""ui"": ""@workspace/ui/components""
  }
}
```

LANGUAGE: json
CODE:
```
{
  ""$schema"": ""https://ui.shadcn.com/schema.json"",
  ""style"": ""new-york"",
  ""rsc"": true,
  ""tsx"": true,
  ""tailwind"": {
    ""config"": ""tailwind.config.ts"",
    ""css"": ""src/styles/globals.css"",
    ""baseColor"": ""zinc"",
    ""cssVariables"": true
  },
  ""iconLibrary"": ""lucide"",
  ""aliases"": {
    ""components"": ""@workspace/ui/components"",
    ""utils"": ""@workspace/ui/lib/utils"",
    ""hooks"": ""@workspace/ui/hooks"",
    ""lib"": ""@workspace/ui/lib"",
    ""ui"": ""@workspace/ui/components""
  }
}
```

----------------------------------------

TITLE: Import and Basic Usage of Toggle Group Component
DESCRIPTION: Demonstrates how to import the ToggleGroup and ToggleGroupItem components and set up a basic single-selection toggle group in a React/TypeScript application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/toggle-group.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { ToggleGroup, ToggleGroupItem } from ""@/components/ui/toggle-group""
```

LANGUAGE: tsx
CODE:
```
<ToggleGroup type=""single"">
  <ToggleGroupItem value=""a"">A</ToggleGroupItem>
  <ToggleGroupItem value=""b"">B</ToggleGroupItem>
  <ToggleGroupItem value=""c"">C</ToggleGroupItem>
</ToggleGroup>
```

----------------------------------------

TITLE: Basic Navigation Menu Usage
DESCRIPTION: Demonstrates how to import and structure the core Navigation Menu components to create a functional navigation item with a trigger and content.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuIndicator,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport
} from ""@/components/ui/navigation-menu""
```

LANGUAGE: tsx
CODE:
```
<NavigationMenu>
  <NavigationMenuList>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>
      <NavigationMenuContent>
        <NavigationMenuLink>Link</NavigationMenuLink>
      </NavigationMenuContent>
    </NavigationMenuItem>
  </NavigationMenuList>
</NavigationMenu>
```

----------------------------------------

TITLE: Install Alert component using shadcn CLI
DESCRIPTION: This command adds the Alert component and its dependencies to your project using the shadcn UI command-line interface. It simplifies the setup process by automating file creation and configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert
```

----------------------------------------

TITLE: Use Aspect Ratio Component in Next.js
DESCRIPTION: Demonstrates how to import the `AspectRatio` component and use it with a Next.js `Image` component to maintain a 16:9 ratio within a specified width.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/aspect-ratio.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import Image from ""next/image""

import { AspectRatio } from ""@/components/ui/aspect-ratio""

<div className=""w-[450px]"">
  <AspectRatio ratio={16 / 9}>
    <Image src=""..."" alt=""Image"" className=""rounded-md object-cover"" />
  </AspectRatio>
</div>
```

----------------------------------------

TITLE: Configure shadcn/ui for utility class theming
DESCRIPTION: Configures `components.json` to disable CSS variable-based theming for shadcn/ui, setting `tailwind.cssVariables` to `false` to rely on direct utility classes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  ""style"": ""default"",
  ""rsc"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""app/globals.css"",
    ""baseColor"": ""slate"",
    ""cssVariables"": false
  },
  ""aliases"": {
    ""components"": ""@/components"",
    ""utils"": ""@/lib/utils"",
    ""ui"": ""@/registry/new-york-v4/ui"",
    ""lib"": ""@/lib"",
    ""hooks"": ""@/hooks""
  },
  ""iconLibrary"": ""lucide""
}
```

----------------------------------------

TITLE: Install shadcn/ui Context Menu
DESCRIPTION: Provides two methods for installing the shadcn/ui Context Menu component: using the shadcn CLI for automated setup or manually installing the core Radix UI dependency via npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/context-menu.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add context-menu
```

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-context-menu
```

----------------------------------------

TITLE: Import Pagination Components in TSX
DESCRIPTION: Imports various pagination-related components (Pagination, PaginationContent, PaginationItem, etc.) from the local UI library for use in a TypeScript React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from ""@/components/ui/pagination""
```

----------------------------------------

TITLE: Add a shadcn/ui component
DESCRIPTION: Uses the shadcn/ui CLI to add a specific component, such as the `Button`, to the project. This command fetches the component's code and integrates it into your local project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Install Card Component via shadcn/ui CLI
DESCRIPTION: This snippet demonstrates how to quickly add the Card component to your project using the shadcn/ui command-line interface, streamlining the setup process by automatically configuring necessary files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add card
```

----------------------------------------

TITLE: Import Popover components in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the necessary Popover components (Popover, PopoverContent, PopoverTrigger) from the Shadcn UI library, making them available for use in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/popover.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from ""@/components/ui/popover""
```

----------------------------------------

TITLE: Import and use shadcn/ui Button component in Remix
DESCRIPTION: Demonstrates how to import the newly added `Button` component from `shadcn/ui` and integrate it into a Remix React component for display and interaction.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import { Button } from ""~/components/ui/button""

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Import Chart Tooltip Components for Shadcn UI
DESCRIPTION: Imports the `ChartTooltip` and `ChartTooltipContent` components from the Shadcn UI chart library. These components are foundational for creating interactive tooltips that appear on hover over chart elements.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_21

LANGUAGE: tsx
CODE:
```
import { ChartTooltip, ChartTooltipContent } from ""@/components/ui/chart""
```

----------------------------------------

TITLE: Create React Router Project
DESCRIPTION: Initializes a new React Router application using the `create-react-router` command-line tool. This sets up the basic project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/react-router.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-react-router@latest my-app
```

----------------------------------------

TITLE: Install Radix UI Dialog Dependency Manually
DESCRIPTION: Installs the required Radix UI React Dialog dependency, which the Shadcn UI Sheet component extends, for projects opting for manual setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sheet.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dialog
```

----------------------------------------

TITLE: Install TanStack React Table Dependency
DESCRIPTION: Installs the core TanStack React Table library, which provides the headless UI logic necessary for building advanced and customizable data tables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @tanstack/react-table
```

----------------------------------------

TITLE: Add Client-Side Filtering to Shadcn UI Data Table (React Table)
DESCRIPTION: This TypeScript React component, `DataTable`, illustrates how to integrate client-side filtering into a data table built with `@tanstack/react-table` and Shadcn UI. It manages `columnFilters` state, uses `getFilteredRowModel`, and provides an `Input` component to filter data based on the 'email' column, enhancing user interaction for data exploration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  flexRender,
  getCoreRowModel,
  getFilteredRowModel,
  getPaginationRowModel,
  getSortedRowModel,
  useReactTable,
} from ""@tanstack/react-table""

import { Button } from ""@/components/ui/button""
import { Input } from ""@/components/ui/input""

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const [sorting, setSorting] = React.useState<SortingState>([])
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  )

  const table = useReactTable({
    data,
    columns,
    onSortingChange: setSorting,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    getFilteredRowModel: getFilteredRowModel(),
    state: {
      sorting,
      columnFilters,
    },
  })

  return (
    <div>
      <div className=""flex items-center py-4"">
        <Input
          placeholder=""Filter emails...""
          value={(table.getColumn(""email"")?.getFilterValue() as string) ?? """"}
          onChange={(event) =>
            table.getColumn(""email"")?.setFilterValue(event.target.value)
          }
          className=""max-w-sm""
        />
      </div>
      <div className=""rounded-md border"">
        <Table>{ ... }</Table>
      </div>
    </div>
  )
}
```

----------------------------------------

TITLE: React Calendar Component Structure and Sub-components
DESCRIPTION: This TypeScript/React snippet illustrates the internal structure of a Calendar component, showing how custom `Chevron` icons (left, right, down) and `WeekNumber` elements are rendered. It leverages `cn` for dynamic class names and passes props to sub-components, demonstrating a flexible component composition pattern.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/calendar.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
            data-slot=""calendar""
            ref={rootRef}
            className={cn(className)}
            {...props}
          )
        },
        Chevron: ({ className, orientation, ...props }) => {
          if (orientation === ""left"") {
            return (
              <ChevronLeftIcon className={cn(""size-4"", className)} {...props} />
            )
          }

          if (orientation === ""right"") {
            return (
              <ChevronRightIcon
                className={cn(""size-4"", className)}
                {...props}
              />
            )
          }

          return (
            <ChevronDownIcon className={cn(""size-4"", className)} {...props} />
          )
        },
        DayButton: CalendarDayButton,
        WeekNumber: ({ children, ...props }) => {
          return (
            <td {...props}>
              <div className=""flex size-[--cell-size] items-center justify-center text-center"">
                {children}
              </div>
            </td>
          )
        },
        ...components,
      }}
      {...props}
    />
  )
}
```

----------------------------------------

TITLE: Install TanStack React Table Dependency
DESCRIPTION: Installs the core TanStack React Table library, which provides the headless UI logic necessary for building advanced and customizable data tables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @tanstack/react-table
```

----------------------------------------

TITLE: Install Switch component using shadcn CLI
DESCRIPTION: Installs the Switch component into your project using the shadcn/ui command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/switch.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add switch
```

----------------------------------------

TITLE: Install Input component via Shadcn UI CLI
DESCRIPTION: Installs the Shadcn UI Input component using the npx command-line interface, adding it to your project's components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add input
```

----------------------------------------

TITLE: Initialize shadcn Project Configuration
DESCRIPTION: Use the `init` command to set up a new shadcn project, installing dependencies, configuring CSS variables, and adding the `cn` utility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Configure Global CSS Styles for Shadcn UI
DESCRIPTION: This CSS snippet defines global styles for a Shadcn UI project, including importing Tailwind CSS and `tw-animate-css`, defining custom CSS variables for light and dark themes using Oklch color space, and setting up base styles with `@apply` directives. It also maps these variables to a theme for inline usage.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/manual.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import ""tailwindcss"";
@import ""tw-animate-css"";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

----------------------------------------

TITLE: Basic usage of Shadcn UI Select component
DESCRIPTION: This TypeScript/TSX snippet demonstrates the basic structure and usage of the Shadcn UI Select component. It includes a trigger, a placeholder, and several selectable items, allowing users to choose from predefined options.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Select>
  <SelectTrigger className=""w-[180px]"">
    <SelectValue placeholder=""Theme"" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value=""light"">Light</SelectItem>
    <SelectItem value=""dark"">Dark</SelectItem>
    <SelectItem value=""system"">System</SelectItem>
  </SelectContent>
</Select>
```

----------------------------------------

TITLE: Install Vaul dependency manually
DESCRIPTION: Installs the core 'vaul' library, which the Shadcn UI Drawer component is built upon, using npm for manual project setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/drawer.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install vaul
```

----------------------------------------

TITLE: Configure TypeScript base URL and paths in tsconfig.app.json
DESCRIPTION: Adds `baseUrl` and `paths` to the `compilerOptions` section of `tsconfig.app.json` to help IDEs resolve absolute path imports, improving development experience.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
{
  ""compilerOptions"": {
    // ...
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [
        ""./src/*""
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Install Shadcn UI Button Component
DESCRIPTION: Instructions for installing the Shadcn UI Button component using either the CLI for automated setup or manual dependency installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/button.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-slot
```

----------------------------------------

TITLE: Update Project Dependencies with pnpm
DESCRIPTION: Provides a `pnpm` command to update specific project dependencies to their latest available versions. This ensures the project utilizes the most recent features and bug fixes from the specified packages.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
pnpm up ""@radix-ui/*"" cmdk lucide-react recharts tailwind-merge clsx --latest
```

----------------------------------------

TITLE: Choose TypeScript or JavaScript components in components.json
DESCRIPTION: Determines whether generated components use TypeScript (`.tsx`) or JavaScript (`.jsx`). Setting this option to `false` will result in components being added with the `.jsx` file extension.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components-json.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""tsx"": true | false
}
```

----------------------------------------

TITLE: Import Chart Tooltip Components
DESCRIPTION: Imports the necessary `ChartTooltip` and `ChartTooltipContent` components from the `@/components/ui/chart` path. These components are essential building blocks for creating and customizing chart tooltips.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_23

LANGUAGE: tsx
CODE:
```
import { ChartTooltip, ChartTooltipContent } from ""@/components/ui/chart""
```

----------------------------------------

TITLE: Install shadcn/ui Menubar component via CLI
DESCRIPTION: This command utilizes the shadcn/ui CLI to quickly add the Menubar component and its required dependencies to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/menubar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add menubar
```

----------------------------------------

TITLE: Install next-themes Package
DESCRIPTION: Installs the `next-themes` package, a lightweight and flexible library for managing themes in Next.js applications, using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/next.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm install next-themes
```

----------------------------------------

TITLE: Manually install react-resizable-panels dependency
DESCRIPTION: Installs the core `react-resizable-panels` library, which the shadcn/ui Resizable component is built upon, as a direct project dependency using npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install react-resizable-panels
```

----------------------------------------

TITLE: Controlling Sidebar State with React
DESCRIPTION: Demonstrates how to manage the open/closed state of the Shadcn UI Sidebar component using React's `useState` hook and the `SidebarProvider`'s `open` and `onOpenChange` props for controlled behavior.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_39

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  const [open, setOpen] = React.useState(false)

  return (
    <SidebarProvider open={open} onOpenChange={setOpen}>
      <Sidebar />
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Install Shadcn UI Dialog Component via CLI
DESCRIPTION: Installs the Shadcn UI Dialog component and its dependencies using the `npx shadcn@latest add dialog` command-line interface tool. This is the recommended method for quick setup and integration into an existing Shadcn UI project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dialog.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add dialog
```

----------------------------------------

TITLE: Basic Shadcn UI Dialog Implementation
DESCRIPTION: Demonstrates the fundamental structure of a Shadcn UI Dialog component. It includes a `DialogTrigger` to open the dialog and `DialogContent` containing a `DialogHeader` with a `DialogTitle` and `DialogDescription` for displaying information to the user.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dialog.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Dialog>
  <DialogTrigger>Open</DialogTrigger>
  <DialogContent>
    <DialogHeader>
      <DialogTitle>Are you absolutely sure?</DialogTitle>
      <DialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </DialogDescription>
    </DialogHeader>
  </DialogContent>
</Dialog>
```

----------------------------------------

TITLE: Install Dialog component using shadcn CLI
DESCRIPTION: Installs the Dialog component and its dependencies using the shadcn/ui command-line interface, providing a quick setup method.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add dialog
```

----------------------------------------

TITLE: Navigate to application workspace for component addition
DESCRIPTION: Before adding components, navigate into your specific application's directory, such as `apps/web`. This ensures that the shadcn/ui CLI installs components and updates paths correctly within that workspace.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
cd apps/web
```

----------------------------------------

TITLE: Install Shadcn UI Slider via CLI
DESCRIPTION: Installs the Shadcn UI Slider component using the `npx shadcn@latest add` command, providing a quick setup method for integrating the component into your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/slider.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add slider
```

----------------------------------------

TITLE: Basic Hover Card JSX implementation
DESCRIPTION: Demonstrates a minimal JSX structure for the Hover Card component, showing how to wrap a trigger element and define the content that appears on hover.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/hover-card.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<HoverCard>
  <HoverCardTrigger>Hover</HoverCardTrigger>
  <HoverCardContent>
    The React Framework – created and maintained by @vercel.
  </HoverCardContent>
</HoverCard>
```

----------------------------------------

TITLE: Install Label component using shadcn CLI
DESCRIPTION: Installs the Label component into your project using the shadcn/ui CLI tool, which automates dependency management and component file creation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/label.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add label
```

----------------------------------------

TITLE: Implement Submenus with SidebarMenuSub
DESCRIPTION: This snippet illustrates the usage of `SidebarMenuSub` to create nested submenus within a `SidebarMenu`. It shows the proper structure for rendering sub-items using `<SidebarMenuSubItem />` and `<SidebarMenuSubButton />` components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_29

LANGUAGE: tsx
CODE:
```
<SidebarMenuItem>
  <SidebarMenuButton />
  <SidebarMenuSub>
    <SidebarMenuSubItem>
      <SidebarMenuSubButton />
    </SidebarMenuSubItem>
    <SidebarMenuSubItem>
      <SidebarMenuSubButton />
    </SidebarMenuSubItem>
  </SidebarMenuSub>
</SidebarMenuItem>
```

----------------------------------------

TITLE: Configure shadcn/ui for Utility Class Theming
DESCRIPTION: Configuration for `components.json` to enable utility class-based theming in shadcn/ui. Setting `tailwind.cssVariables` to `false` ensures that direct Tailwind utility classes are used for color definitions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/theming.mdx#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""style"": ""default"",
  ""rsc"": true,
  ""tailwind"": {
    ""config"": """",
    ""css"": ""app/globals.css"",
    ""baseColor"": ""slate"",
    ""cssVariables"": false
  },
  ""aliases"": {
    ""components"": ""@/components"",
    ""utils"": ""@/lib/utils"",
    ""ui"": ""@/registry/new-york-v4/ui"",
    ""lib"": ""@/lib"",
    ""hooks"": ""@/hooks""
  },
  ""iconLibrary"": ""lucide""
}
```

----------------------------------------

TITLE: Define a Reusable DataTable Component with React Table and Shadcn UI
DESCRIPTION: This TypeScript React component defines a generic `DataTable` using `@tanstack/react-table` and Shadcn UI's `Table` components. It accepts `columns` and `data` props to dynamically render tabular data, providing a flexible and reusable solution for displaying data tables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
""use client""

import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  useReactTable,
} from ""@tanstack/react-table""

import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from ""@/components/ui/table""

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[]
  data: TData[]
}

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
  })

  return (
    <div className=""rounded-md border"">
      <Table>
        <TableHeader>
          {table.getHeaderGroups().map((headerGroup) => (
            <TableRow key={headerGroup.id}>
              {headerGroup.headers.map((header) => {
                return (
                  <TableHead key={header.id}>
                    {header.isPlaceholder
                      ? null
                      : flexRender(
                          header.column.columnDef.header,
                          header.getContext()
                        )}
                  </TableHead>
                )
              })}
            </TableRow>
          ))}
        </TableHeader>
        <TableBody>
          {table.getRowModel().rows?.length ? (
            table.getRowModel().rows.map((row) => (
              <TableRow
                key={row.id}
                data-state={row.getIsSelected() && ""selected""}
              >
                {row.getVisibleCells().map((cell) => (
                  <TableCell key={cell.id}>
                    {flexRender(cell.column.columnDef.cell, cell.getContext())}
                  </TableCell>
                ))}
              </TableRow>
            ))
          ) : (
            <TableRow>
              <TableCell colSpan={columns.length} className=""h-24 text-center"">
                No results.
              </TableCell>
            </TableRow>
          )}
        </TableBody>
      </Table>
    </div>
  )
}
```

----------------------------------------

TITLE: Render a basic Drawer component in TSX
DESCRIPTION: Demonstrates the basic structure and usage of the Shadcn UI Drawer component, including a trigger, header with title and description, footer with buttons, and a close button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/drawer.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Drawer>
  <DrawerTrigger>Open</DrawerTrigger>
  <DrawerContent>
    <DrawerHeader>
      <DrawerTitle>Are you absolutely sure?</DrawerTitle>
      <DrawerDescription>This action cannot be undone.</DrawerDescription>
    </DrawerHeader>
    <DrawerFooter>
      <Button>Submit</Button>
      <DrawerClose>
        <Button variant=""outline"">Cancel</Button>
      </DrawerClose>
    </DrawerFooter>
  </DrawerContent>
</Drawer>
```

----------------------------------------

TITLE: Create a new Astro project
DESCRIPTION: Initializes a new Astro project using `create-astro`, pre-configured with Tailwind CSS, React, and Git integration. This command sets up the basic project structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-astro@latest astro-app  --template with-tailwindcss --install --add react --git
```

----------------------------------------

TITLE: Initialize shadcn/ui in a project
DESCRIPTION: Runs the shadcn/ui initialization command to set up the necessary configuration and files within an existing project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Install Select Component Dependencies Manually
DESCRIPTION: Installs the core dependencies for the Shadcn UI Select component using npm, which is required for manual setup before copying the component code.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/select.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-select
```

----------------------------------------

TITLE: Create a new React Router project
DESCRIPTION: Initializes a new React Router application using the `create-react-router` command-line tool.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-react-router@latest my-app
```

----------------------------------------

TITLE: Create a new Gatsby project
DESCRIPTION: Initializes a new Gatsby project using the `create-gatsby` command-line tool. This command sets up the basic project structure and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npm init gatsby
```

----------------------------------------

TITLE: Install Resizable component via shadcn/ui CLI
DESCRIPTION: Installs the Resizable component and its dependencies using the shadcn/ui command-line interface, integrating it into your project with minimal effort.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add resizable
```

----------------------------------------

TITLE: Initialize shadcn/ui project
DESCRIPTION: Runs the `shadcn/ui` initialization command to set up the project for using shadcn/ui components. This command prepares the project by creating necessary configuration files and directories.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/gatsby.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Install shadcn/ui Accordion via CLI
DESCRIPTION: Installs the Accordion component and its dependencies using the shadcn/ui command-line interface. This is the recommended method for quick setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add accordion
```

----------------------------------------

TITLE: Manual migration: `forwardRef` to `ComponentProps` (After)
DESCRIPTION: Shows the updated implementation of a React component after manually migrating from `React.forwardRef` to `React.ComponentProps`. This version simplifies the component signature and adds a `data-slot` attribute for styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
function AccordionItem({
  className,
  ...props
}: React.ComponentProps<typeof AccordionPrimitive.Item>) {
  return (
    <AccordionPrimitive.Item
      data-slot=""accordion-item""
      className={cn(""border-b last:border-b-0"", className)}
      {...props}
    />
  )
}
```

----------------------------------------

TITLE: Add shadcn/ui components using the CLI
DESCRIPTION: Execute the `add` command within your application's workspace to install shadcn/ui components. The CLI intelligently places shared components in `packages/ui` and updates import paths in your application, handling dependencies automatically.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/monorepo.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@canary add [COMPONENT]
```

----------------------------------------

TITLE: Install Radix UI Slider dependency manually
DESCRIPTION: Installs the `@radix-ui/react-slider` package, a required dependency for manually setting up the Slider component. This step is necessary if not using the Shadcn UI CLI for installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/slider.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-slider
```

----------------------------------------

TITLE: Install Dialog manual dependencies
DESCRIPTION: Installs the required `@radix-ui/react-dialog` package, which is a core dependency for manually setting up the Dialog component in a project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dialog
```

----------------------------------------

TITLE: Render Basic Pagination Component in TSX
DESCRIPTION: Demonstrates the basic JSX structure for rendering a pagination component, including previous, next, and link items, within a PaginationContent wrapper.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/pagination.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Pagination>
  <PaginationContent>
    <PaginationItem>
      <PaginationPrevious href=""#"" />
    </PaginationItem>
    <PaginationItem>
      <PaginationLink href=""#"">1</PaginationLink>
    </PaginationItem>
    <PaginationItem>
      <PaginationEllipsis />
    </PaginationItem>
    <PaginationItem>
      <PaginationNext href=""#"" />
    </PaginationItem>
  </PaginationContent>
</Pagination>
```

----------------------------------------

TITLE: Import Shadcn UI Avatar Components
DESCRIPTION: This TypeScript/TSX snippet demonstrates how to import the Avatar, AvatarFallback, and AvatarImage components from the local shadcn/ui library path, making them available for use in your React components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/avatar.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Avatar, AvatarFallback, AvatarImage } from ""@/components/ui/avatar""
```

----------------------------------------

TITLE: Refine CSS variable usage with @theme inline
DESCRIPTION: Demonstrates refining CSS variable usage by wrapping root variables in `hsl()` directly, moving `:root` and `.dark` out of `@layer`, and using `@theme inline` to simplify color access and improve maintainability.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_5

LANGUAGE: css
CODE:
```
:root {
  --background: hsl(0 0% 100%); // <-- Wrap in hsl
  --foreground: hsl(0 0% 3.9%);
}

.dark {
  --background: hsl(0 0% 3.9%); // <-- Wrap in hsl
  --foreground: hsl(0 0% 98%);
}

@theme inline {
  --color-background: var(--background); // <-- Remove hsl
  --color-foreground: var(--foreground);
}
```

----------------------------------------

TITLE: Configure TypeScript base URL and paths in tsconfig.app.json
DESCRIPTION: Adds `baseUrl` and `paths` properties to the `compilerOptions` in `tsconfig.app.json`. This ensures proper path resolution for the IDE, complementing the main `tsconfig.json`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
{
  ""compilerOptions"": {
    // ...
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [
        ""./src/*""
      ]
    }
    // ...
  }
}
```

----------------------------------------

TITLE: Import Input component in TypeScript/React
DESCRIPTION: Imports the Input component from the Shadcn UI library's UI components directory, making it available for use in your React/TypeScript files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/input.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Input } from ""@/components/ui/input""
```

----------------------------------------

TITLE: Adding Autoplay Plugin to shadcn-ui Carousel
DESCRIPTION: This snippet demonstrates how to extend the carousel's functionality by integrating plugins. It specifically shows the inclusion of the `Autoplay` plugin from `embla-carousel-autoplay` and how to configure its delay property directly within the `Carousel` component's `plugins` prop.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import Autoplay from ""embla-carousel-autoplay""

export function Example() {
  return (
    <Carousel
      plugins={[
        Autoplay({
          delay: 2000,
        }),
      ]}
    >
      // ...
    </Carousel>
  )
}
```

----------------------------------------

TITLE: Install Hover Card component using Shadcn CLI
DESCRIPTION: Installs the Shadcn UI Hover Card component using the `npx shadcn@latest add` command, simplifying the setup process by automatically adding necessary files and configurations.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add hover-card
```

----------------------------------------

TITLE: Build a Theme Toggle Component with Dropdown
DESCRIPTION: This React component creates a user interface for switching themes. It leverages the `useTheme` hook to change the application's theme and uses `shadcn/ui` components (Button, DropdownMenu) along with `lucide-react` icons to provide a visually appealing and functional theme selection dropdown.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/vite.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Moon, Sun } from ""lucide-react""

import { Button } from ""@/components/ui/button""
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from ""@/components/ui/dropdown-menu""
import { useTheme } from ""@/components/theme-provider""

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant=""outline"" size=""icon"">
          <Sun className=""h-[1.2rem] w-[1.2rem] scale-100 rotate-0 transition-all dark:scale-0 dark:-rotate-90"" />
          <Moon className=""absolute h-[1.2rem] w-[1.2rem] scale-0 rotate-90 transition-all dark:scale-100 dark:rotate-0"" />
          <span className=""sr-only"">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align=""end"">
        <DropdownMenuItem onClick={() => setTheme(""light"")}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme(""dark"")}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme(""system"")}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Create a Basic shadcn/ui Bar Chart with Recharts
DESCRIPTION: Demonstrates how to construct a fundamental bar chart using Recharts components (Bar, BarChart) integrated with shadcn/ui's ChartContainer and ChartTooltipContent for a composable charting solution.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { Bar, BarChart } from ""recharts""

import { ChartContainer, ChartTooltipContent } from ""@/components/ui/charts""

export function MyChart() {
  return (
    <ChartContainer>
      <BarChart data={data}>
        <Bar dataKey=""value"" />
        <ChartTooltip content={<ChartTooltipContent />} />
      </BarChart>
    </ChartContainer>
  )
}
```

----------------------------------------

TITLE: Anatomy of Shadcn UI Form and FormField Components
DESCRIPTION: This snippet illustrates the basic structural components of a form built with `shadcn/ui`, showing how `<Form>` wraps `<FormField>`, which in turn renders various form elements like labels, controls, descriptions, and messages within a `<FormItem>`. It highlights the composable nature of these components for building accessible forms.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
<Form>
  <FormField
    control={...}
    name=""...""
    render={() => (
      <FormItem>
        <FormLabel />
        <FormControl>
          { /* Your form field */}
        </FormControl>
        <FormDescription />
        <FormMessage />
      </FormItem>
    )}
  />
</Form>
```

----------------------------------------

TITLE: Import Dialog components in TypeScript/React
DESCRIPTION: Imports the necessary Dialog components (Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger) from the shadcn/ui dialog module, making them available for use in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dialog.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from ""@/components/ui/dialog""
```

----------------------------------------

TITLE: Import Resizable components for usage
DESCRIPTION: Imports the necessary components (`ResizableHandle`, `ResizablePanel`, `ResizablePanelGroup`) from the shadcn/ui library, making them available for building resizable layouts in your React/TypeScript project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from ""@/components/ui/resizable""
```

----------------------------------------

TITLE: Add shadcn UI Component
DESCRIPTION: Adds a specified shadcn UI component to your project. This command also handles the installation of all required dependencies for the component, ensuring it functions correctly within your application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/packages/shadcn/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn add [component]
```

----------------------------------------

TITLE: Configure Vite for React, Tailwind CSS, and path aliases
DESCRIPTION: Modifies `vite.config.ts` to include React and Tailwind CSS plugins, and sets up a path alias (`@`) to resolve imports from the `src` directory, streamlining module imports.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import path from ""path""
import tailwindcss from ""@tailwindcss/vite""
import react from ""@vitejs/plugin-react""
import { defineConfig } from ""vite""

// https://vite.dev/config/
export default defineConfig({
  plugins: [react(), tailwindcss()],
  resolve: {
    alias: {
      ""@"": path.resolve(__dirname, ""./src""),
    },
  },
})
```

----------------------------------------

TITLE: Provide CLI Documentation for shadcn-ui Registry Items
DESCRIPTION: This property allows defining a custom message or documentation string that will be displayed to the user when the shadcn-ui registry item is installed via the CLI. It's useful for providing important setup instructions, warnings, or additional information relevant to the installed component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  ""docs"": ""Remember to add the FOO_BAR environment variable to your .env file.""
}
```

----------------------------------------

TITLE: Configure TypeScript base URL and paths in tsconfig.json
DESCRIPTION: Adds `baseUrl` and `paths` to the `compilerOptions` section of `tsconfig.json` to enable absolute path imports, simplifying module resolution from the `src` directory.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
{
  ""files"": [],
  ""references"": [
    {
      ""path"": ""./tsconfig.app.json""
    },
    {
      ""path"": ""./tsconfig.node.json""
    }
  ],
  ""compilerOptions"": {
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [""./src/*""]
    }
  }
}
```

----------------------------------------

TITLE: Install Radix UI Select dependencies manually
DESCRIPTION: This command installs the `@radix-ui/react-select` package, which is a core dependency for the Shadcn UI Select component when performing a manual installation. It uses npm to add the package to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-select
```

----------------------------------------

TITLE: Import Resizable Components in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the necessary components (`ResizableHandle`, `ResizablePanel`, `ResizablePanelGroup`) from the `shadcn/ui` library for use in a TypeScript React application. These components are essential for constructing resizable layouts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/resizable.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  ResizableHandle,
  ResizablePanel,
  ResizablePanelGroup,
} from ""@/components/ui/resizable""
```

----------------------------------------

TITLE: Install Badge Component via CLI
DESCRIPTION: Installs the Shadcn UI Badge component into your project using the command-line interface, which automatically sets up the necessary files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/badge.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add badge
```

----------------------------------------

TITLE: Install Shadcn UI Alert component via CLI
DESCRIPTION: This command uses the `npx` utility to add the Alert component to your project using the Shadcn UI CLI. It automates the process of adding the component's files and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert
```

----------------------------------------

TITLE: Integrate Pagination Controls into Shadcn UI DataTable
DESCRIPTION: This snippet demonstrates the integration of a dedicated pagination component, `DataTablePagination`, into a `DataTable`. By passing the `table` instance, the component gains access to pagination state and actions. This simplifies adding page size selection and navigation controls to the table.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_19

LANGUAGE: tsx
CODE:
```
<DataTablePagination table={table} />
```

----------------------------------------

TITLE: Import Navigation Menu Components
DESCRIPTION: Imports all necessary components for constructing a navigation menu, including `NavigationMenu`, `NavigationMenuContent`, `NavigationMenuItem`, and related elements from the shadcn/ui library.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/navigation-menu.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  NavigationMenu,
  NavigationMenuContent,
  NavigationMenuIndicator,
  NavigationMenuItem,
  NavigationMenuLink,
  NavigationMenuList,
  NavigationMenuTrigger,
  NavigationMenuViewport,
} from ""@/components/ui/navigation-menu""
```

----------------------------------------

TITLE: Install Shadcn UI Input component via CLI
DESCRIPTION: Installs the Input component into your project using the Shadcn UI CLI tool. This command automatically handles dependencies and file placement, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add input
```

----------------------------------------

TITLE: Update React Peer Dependencies for React 19
DESCRIPTION: Illustrates the necessary modifications in a `package.json` file to include React 19 as a valid peer dependency for both `react` and `react-dom` packages, enabling broader compatibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/react-19.mdx#_snippet_0

LANGUAGE: diff
CODE:
```
""peerDependencies"": {
-  ""react"": ""^16.8 || ^17.0 || ^18.0"",
+  ""react"": ""^16.8 || ^17.0 || ^18.0 || ^19.0"",
-  ""react-dom"": ""^16.8 || ^17.0 || ^18.0""
+  ""react-dom"": ""^16.8 || ^17.0 || ^18.0 || ^19.0""
}
```

----------------------------------------

TITLE: Install Select Component via CLI
DESCRIPTION: Installs the Shadcn UI Select component using the command-line interface, adding it to your project with a single command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/select.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add select
```

----------------------------------------

TITLE: Install Radix UI Hover Card dependency
DESCRIPTION: Manually install the core `@radix-ui/react-hover-card` package, which is a foundational dependency for the shadcn/ui Hover Card component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/hover-card.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-hover-card
```

----------------------------------------

TITLE: Create a basic horizontal resizable panel group
DESCRIPTION: Demonstrates how to construct a simple horizontal layout with two resizable panels separated by a handle, allowing users to adjust their relative widths dynamically.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/resizable.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<ResizablePanelGroup direction=""horizontal"">
  <ResizablePanel>One</ResizablePanel>
  <ResizableHandle />
  <ResizablePanel>Two</ResizablePanel>
</ResizablePanelGroup>
```

----------------------------------------

TITLE: ChartTooltip Component Props Reference
DESCRIPTION: Defines the customizable properties for the ChartTooltip component, including keys for labels and names, and indicator styling. These props allow developers to control the appearance and data mapping of the tooltip.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_23

LANGUAGE: APIDOC
CODE:
```
ChartTooltip Props:
  labelKey: string
    Description: The config or data key to use for the label.
  nameKey: string
    Description: The config or data key to use for the name.
  indicator: 'dot' | 'line' | 'dashed'
    Description: The indicator style for the tooltip.
  hideLabel: boolean
    Description: Whether to hide the label.
  hideIndicator: boolean
    Description: Whether to hide the indicator.
```

----------------------------------------

TITLE: Install Shadcn UI Select component via CLI
DESCRIPTION: This command installs the Shadcn UI Select component using the `npx shadcn@latest add` command-line interface. It automates the setup process for the component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/select.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add select
```

----------------------------------------

TITLE: Install Radix UI Aspect Ratio Dependency Manually
DESCRIPTION: This command installs the core `@radix-ui/react-aspect-ratio` package, which is a fundamental dependency required for manually integrating the Shadcn UI Aspect Ratio component into your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/aspect-ratio.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-aspect-ratio
```

----------------------------------------

TITLE: Implement a basic Combobox component with React and TypeScript
DESCRIPTION: This snippet demonstrates how to create a reusable Combobox component using shadcn/ui's Button, Command, and Popover components in a React application. It manages state for opening/closing the combobox and selecting a value from a predefined list of frameworks, showcasing common UI patterns for interactive selection.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/combobox.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import { Check, ChevronsUpDown } from ""lucide-react""

import { cn } from ""@/lib/utils""
import { Button } from ""@/components/ui/button""
import {
  Command,
  CommandEmpty,
  CommandGroup,
  CommandInput,
  CommandItem,
  CommandList,
} from ""@/components/ui/command""
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from ""@/components/ui/popover""

const frameworks = [
  {
    value: ""next.js"",
    label: ""Next.js"",
  },
  {
    value: ""sveltekit"",
    label: ""SvelteKit"",
  },
  {
    value: ""nuxt.js"",
    label: ""Nuxt.js"",
  },
  {
    value: ""remix"",
    label: ""Remix"",
  },
  {
    value: ""astro"",
    label: ""Astro"",
  },
]

export function ComboboxDemo() {
  const [open, setOpen] = React.useState(false)
  const [value, setValue] = React.useState("""")

  return (
    <Popover open={open} onOpenChange={setOpen}>
      <PopoverTrigger asChild>
        <Button
          variant=""outline""
          role=""combobox""
          aria-expanded={open}
          className=""w-[200px] justify-between""
        >
          {value
            ? frameworks.find((framework) => framework.value === value)?.label
            : ""Select framework...""}
          <ChevronsUpDown className=""ml-2 h-4 w-4 shrink-0 opacity-50"" />
        </Button>
      </PopoverTrigger>
      <PopoverContent className=""w-[200px] p-0"">
        <Command>
          <CommandInput placeholder=""Search framework..."" />
          <CommandList>
            <CommandEmpty>No framework found.</CommandEmpty>
            <CommandGroup>
              {frameworks.map((framework) => (
                <CommandItem
                  key={framework.value}
                  value={framework.value}
                  onSelect={(currentValue) => {
                    setValue(currentValue === value ? """" : currentValue)
                    setOpen(false)
                  }}
                >
                  <Check
                    className={cn(
                      ""mr-2 h-4 w-4"",
                      value === framework.value ? ""opacity-100"" : ""opacity-0""
                    )}
                  />
                  {framework.label}
                </CommandItem>
              ))}
            </CommandGroup>
          </CommandList>
        </Command>
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Create a React Theme Provider for Dark Mode in Vite
DESCRIPTION: This component provides a context-based theme management system for React applications, enabling dark, light, and system themes. It uses `localStorage` to persist the user's theme preference and `useEffect` to apply the theme to the document's root element, handling system theme preference changes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { createContext, useContext, useEffect, useState } from ""react""

type Theme = ""dark"" | ""light"" | ""system""

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: ""system"",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = ""system"",
  storageKey = ""vite-ui-theme"",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove(""light"", ""dark"")

    if (theme === ""system"") {
      const systemTheme = window.matchMedia(""(prefers-color-scheme: dark)"")
        .matches
        ? ""dark""
        : ""light""

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error(""useTheme must be used within a ThemeProvider"")

  return context
}
```

----------------------------------------

TITLE: Add shadcn components to an existing project via CLI
DESCRIPTION: The `add` command integrates specified components and their dependencies into an existing shadcn project. It allows for selective or bulk addition of UI components, with options to skip prompts, overwrite files, and specify output paths.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/cli.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add [component]
```

LANGUAGE: APIDOC
CODE:
```
Usage: shadcn add [options] [components...]

add a component to your project

Arguments:
  components         name, url or local path to component

Options:
  -y, --yes           skip confirmation prompt. (default: false)
  -o, --overwrite     overwrite existing files. (default: false)
  -c, --cwd <cwd>     the working directory. defaults to the current directory.
  -a, --all           add all available components (default: false)
  -p, --path <path>   the path to add the component to.
  -s, --silent        mute output. (default: false)
  --src-dir           use the src directory when creating a new project. (default: false)
  --no-src-dir        do not use the src directory when creating a new project.
  --css-variables     use css variables for theming. (default: true)
  --no-css-variables  do not use css variables for theming.
  -h, --help          display help for command
```

----------------------------------------

TITLE: Render a basic Menubar component in React
DESCRIPTION: Demonstrates the basic JSX structure for rendering a Menubar with a 'File' menu, including menu items, separators, and keyboard shortcuts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/menubar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Menubar>
  <MenubarMenu>
    <MenubarTrigger>File</MenubarTrigger>
    <MenubarContent>
      <MenubarItem>
        New Tab <MenubarShortcut>⌘T</MenubarShortcut>
      </MenubarItem>
      <MenubarItem>New Window</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Share</MenubarItem>
      <MenubarSeparator />
      <MenubarItem>Print</MenubarItem>
    </MenubarContent>
  </MenubarMenu>
</Menubar>
```

----------------------------------------

TITLE: Install Skeleton component using shadcn CLI
DESCRIPTION: Installs the Skeleton UI component into your project using the shadcn CLI tool. This command automatically adds the necessary files and dependencies for the component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/skeleton.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add skeleton
```

----------------------------------------

TITLE: Import Alert components in TypeScript JSX
DESCRIPTION: This TypeScript JSX snippet demonstrates how to import the `Alert`, `AlertDescription`, and `AlertTitle` components from the Shadcn UI library, typically located in `@/components/ui/alert`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Alert, AlertDescription, AlertTitle } from ""@/components/ui/alert""
```

----------------------------------------

TITLE: Import ChartTooltip and ChartTooltipContent
DESCRIPTION: Imports `ChartTooltip` and `ChartTooltipContent` from `@/components/ui/chart`, which are custom components designed to provide interactive tooltips on charts.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import { ChartTooltip, ChartTooltipContent } from ""@/components/ui/chart""
```

----------------------------------------

TITLE: Import Dialog Components in TSX
DESCRIPTION: Imports the necessary components for the Shadcn UI Dialog, including `Dialog`, `DialogContent`, `DialogDescription`, `DialogHeader`, `DialogTitle`, and `DialogTrigger`, from the local UI library path. These imports are essential for using the Dialog component in a React/Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dialog.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from ""@/components/ui/dialog""
```

----------------------------------------

TITLE: Install Alert Dialog using shadcn/ui CLI
DESCRIPTION: Installs the Alert Dialog component using the shadcn/ui command-line interface, adding it to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert-dialog
```

----------------------------------------

TITLE: Add shadcn/ui components to a Laravel project
DESCRIPTION: This command uses the shadcn/ui CLI to add a specific component (e.g., 'switch') to your project. The component's code will be placed in the designated UI components directory, typically `resources/js/components/ui/`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add switch
```

----------------------------------------

TITLE: Install shadcn/ui Table Component
DESCRIPTION: Adds the pre-built Table component from shadcn/ui to your project, providing a foundational UI element for data tables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

----------------------------------------

TITLE: Integrate SidebarProvider and AppSidebar in Next.js Layout
DESCRIPTION: This snippet demonstrates how to wrap your application's main content with `SidebarProvider` and include `AppSidebar` and `SidebarTrigger` components in a Next.js `app/layout.tsx` file. It sets up the global context for the sidebar and enables its toggling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { SidebarProvider, SidebarTrigger } from ""@/components/ui/sidebar""
import { AppSidebar } from ""@/components/app-sidebar""

export default function Layout({ children }: { children: React.ReactNode }) {
  return (
    <SidebarProvider>
      <AppSidebar />
      <main>
        <SidebarTrigger />
        {children}
      </main>
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Install Alert Dialog using shadcn CLI
DESCRIPTION: Installs the Alert Dialog component into your project using the shadcn/ui command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert-dialog.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add alert-dialog
```

----------------------------------------

TITLE: Install Calendar Component via Shadcn CLI
DESCRIPTION: Installs the Calendar component using the shadcn/ui command-line interface, providing a quick and automated setup process for integrating the component into a project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add calendar
```

----------------------------------------

TITLE: Import Collapsible components in TypeScript/React
DESCRIPTION: Imports the `Collapsible`, `CollapsibleContent`, and `CollapsibleTrigger` components from the local UI library path, typically for use in a React/TypeScript application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/collapsible.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from ""@/components/ui/collapsible""
```

----------------------------------------

TITLE: Install Radix UI Separator dependency manually
DESCRIPTION: Manually install the core dependency for the Separator component, `@radix-ui/react-separator`, using npm. This step is necessary if you are integrating the component without the shadcn/ui CLI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-separator
```

----------------------------------------

TITLE: Install shadcn/ui Table Component
DESCRIPTION: Adds the pre-built Table component from shadcn/ui to your project, providing a foundational UI element for data tables.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add table
```

----------------------------------------

TITLE: Import Button Component in TSX
DESCRIPTION: Imports the `Button` component from the shadcn/ui library, making it available for use within a TypeScript React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/button.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""
```

----------------------------------------

TITLE: Initialize shadcn/ui in Project
DESCRIPTION: Runs the `shadcn` CLI `init` command to configure and set up `shadcn/ui` within an existing project, preparing it for component integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/react-router.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Import Collapsible Components in TypeScript/TSX
DESCRIPTION: Imports the necessary Collapsible, CollapsibleContent, and CollapsibleTrigger components from the Shadcn UI library, making them available for use in your TypeScript or TSX files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from ""@/components/ui/collapsible""
```

----------------------------------------

TITLE: Install shadcn/ui Chart Component via CLI
DESCRIPTION: Provides the command-line interface command to automatically add the shadcn/ui chart component to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add chart
```

----------------------------------------

TITLE: Install Radix UI Alert Dialog dependency manually
DESCRIPTION: Installs the core `@radix-ui/react-alert-dialog` package via npm, which is a prerequisite for manual integration of the Alert Dialog component into a React project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert-dialog.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-alert-dialog
```

----------------------------------------

TITLE: Integrate ThemeProvider into Remix Root Layout
DESCRIPTION: Demonstrates how to integrate `ThemeProvider` from `remix-themes` into the root layout of a Remix application. It includes a loader function to retrieve the current theme from session storage and wraps the main `App` component with `ThemeProvider` to provide theme context throughout the application. It also shows how to apply the theme class to the `html` element to enable global dark mode styling.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/remix.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import clsx from ""clsx""
import { PreventFlashOnWrongTheme, ThemeProvider, useTheme } from ""remix-themes""

import { themeSessionResolver } => ""./sessions.server""

// Return the theme from the session storage using the loader
export async function loader({ request }: LoaderFunctionArgs) {
  const { getTheme } = await themeSessionResolver(request)
  return {
    theme: getTheme(),
  }
}
// Wrap your app with ThemeProvider.
// `specifiedTheme` is the stored theme in the session storage.
// `themeAction` is the action name that's used to change the theme in the session storage.
export default function AppWithProviders() {
  const data = useLoaderData<typeof loader>()
  return (
    <ThemeProvider specifiedTheme={data.theme} themeAction=""/action/set-theme"">
      <App />
    </ThemeProvider>
  )
}

export function App() {
  const data = useLoaderData<typeof loader>()
  const [theme] = useTheme()
  return (
    <html lang=""en"" className={clsx(theme)}>
      <head>
        <meta charSet=""utf-8"" />
        <meta name=""viewport"" content=""width=device-width, initial-scale=1"" />
        <Meta />
        <PreventFlashOnWrongTheme ssrTheme={Boolean(data.theme)} />
        <Links />
      </head>
      <body>
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  )
}
```

----------------------------------------

TITLE: Install Accordion component using Shadcn UI CLI
DESCRIPTION: This command utilizes the Shadcn UI CLI to automatically add the Accordion component and its required dependencies to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/accordion.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add accordion
```

----------------------------------------

TITLE: Install Shadcn UI Drawer Component via CLI
DESCRIPTION: This command uses the Shadcn UI CLI to automatically add the Drawer component and its dependencies to your project, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add drawer
```

----------------------------------------

TITLE: Implement UI Component for Theme Toggle
DESCRIPTION: Develops a reusable `ModeToggle` React component that provides a user interface for switching between light and dark themes. It integrates with `remix-themes`' `useTheme` hook to update the theme state and uses `lucide-react` icons and `shadcn/ui` components for a polished dropdown menu interface.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/remix.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Moon, Sun } from ""lucide-react""
import { Theme, useTheme } from ""remix-themes""

import { Button } from ""./ui/button""
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
} from ""./ui/dropdown-menu""

export function ModeToggle() {
  const [, setTheme] = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant=""ghost"" size=""icon"">
          <Sun className=""h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0"" />
          <Moon className=""absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100"" />
          <span className=""sr-only"">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align=""end"">
        <DropdownMenuItem onClick={() => setTheme(Theme.LIGHT)}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme(Theme.DARK)}>
          Dark
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}
```

----------------------------------------

TITLE: Migrate from tailwindcss-animate to tw-animate-css
DESCRIPTION: Outlines the necessary changes in the `globals.css` file to switch from the deprecated `tailwindcss-animate` plugin to the new `tw-animate-css` library. This involves removing the plugin directive and adding an `@import` statement.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_10

LANGUAGE: diff
CODE:
```
- @plugin 'tailwindcss-animate';
+ @import ""tw-animate-css"";
```

----------------------------------------

TITLE: Install Hover Card manual dependencies
DESCRIPTION: Installs the core `@radix-ui/react-hover-card` dependency, which is required for the manual setup of the Hover Card component in a React project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/hover-card.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-hover-card
```

----------------------------------------

TITLE: Update React Peer Dependencies for React 19
DESCRIPTION: Illustrates the necessary changes in a `package.json` file to include React 19 as a valid peer dependency for both `react` and `react-dom`, allowing packages to support the new React version.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/react-19.mdx#_snippet_0

LANGUAGE: diff
CODE:
```
""peerDependencies"": {
-  ""react"": ""^16.8 || ^17.0 || ^18.0"",
+  ""react"": ""^16.8 || ^17.0 || ^18.0 || ^19.0"",
-  ""react-dom"": ""^16.8 || ^17.0 || ^18.0""
+  ""react-dom"": ""^16.8 || ^17.0 || ^18.0 || ^19.0""
},
```

----------------------------------------

TITLE: Enable Client-Side Pagination in React Table
DESCRIPTION: Configures the `@tanstack/react-table` hook to enable automatic client-side pagination. This involves adding `getPaginationRowModel` to the `useReactTable` options, allowing the table to manage row display in pages.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from ""@tanstack/react-table""

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  // ...
}
```

----------------------------------------

TITLE: Add a shadcn/ui component to Gatsby project
DESCRIPTION: Demonstrates how to add a specific `shadcn/ui` component, such as the 'Button', to the project using the `shadcn` CLI. This command fetches and integrates the component's code into your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Enable Client-Side Pagination in React Table
DESCRIPTION: Configures the `@tanstack/react-table` hook to enable automatic client-side pagination. This involves adding `getPaginationRowModel` to the `useReactTable` options, allowing the table to manage row display in pages.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/data-table.mdx#_snippet_8

LANGUAGE: tsx
CODE:
```
import {
  ColumnDef,
  flexRender,
  getCoreRowModel,
  getPaginationRowModel,
  useReactTable,
} from ""@tanstack/react-table""

export function DataTable<TData, TValue>({
  columns,
  data,
}: DataTableProps<TData, TValue>) {
  const table = useReactTable({
    data,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
  })

  // ...
}
```

----------------------------------------

TITLE: Build shadcn Registry JSON Files
DESCRIPTION: Execute the `build` command to generate registry JSON files from `registry.json`, typically outputting them to `public/r`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npx shadcn@latest build
```

----------------------------------------

TITLE: Install Menubar core dependency manually
DESCRIPTION: Installs the primary `@radix-ui/react-menubar` package, which provides the foundational components for the Menubar.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/menubar.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-menubar
```

----------------------------------------

TITLE: Add shadcn/ui Button Component
DESCRIPTION: This command adds the 'Button' component from shadcn/ui to your project, making it available for use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/next.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Create a React Theme Provider for Dark Mode
DESCRIPTION: This TypeScript React component defines a flexible `ThemeProvider` and `useTheme` hook. It manages dark, light, and system themes, persists user preferences in local storage, and dynamically applies the selected theme to the document's root element, including handling system theme changes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/vite.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { createContext, useContext, useEffect, useState } from ""react""

type Theme = ""dark"" | ""light"" | ""system""

type ThemeProviderProps = {
  children: React.ReactNode
  defaultTheme?: Theme
  storageKey?: string
}

type ThemeProviderState = {
  theme: Theme
  setTheme: (theme: Theme) => void
}

const initialState: ThemeProviderState = {
  theme: ""system"",
  setTheme: () => null,
}

const ThemeProviderContext = createContext<ThemeProviderState>(initialState)

export function ThemeProvider({
  children,
  defaultTheme = ""system"",
  storageKey = ""vite-ui-theme"",
  ...props
}: ThemeProviderProps) {
  const [theme, setTheme] = useState<Theme>(
    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme
  )

  useEffect(() => {
    const root = window.document.documentElement

    root.classList.remove(""light"", ""dark"")

    if (theme === ""system"") {
      const systemTheme = window.matchMedia(""(prefers-color-scheme: dark)"")
        .matches
        ? ""dark""
        : ""light""

      root.classList.add(systemTheme)
      return
    }

    root.classList.add(theme)
  }, [theme])

  const value = {
    theme,
    setTheme: (theme: Theme) => {
      localStorage.setItem(storageKey, theme)
      setTheme(theme)
    },
  }

  return (
    <ThemeProviderContext.Provider {...props} value={value}>
      {children}
    </ThemeProviderContext.Provider>
  )
}

export const useTheme = () => {
  const context = useContext(ThemeProviderContext)

  if (context === undefined)
    throw new Error(""useTheme must be used within a ThemeProvider"")

  return context
}
```

----------------------------------------

TITLE: Import Badge Component
DESCRIPTION: Imports the Badge component from the Shadcn UI library, making it available for use in your React or Next.js application files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/badge.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Badge } from ""@/components/ui/badge""
```

----------------------------------------

TITLE: Create Link Styled as Badge
DESCRIPTION: Illustrates how to use the `asChild` prop with the Badge component to apply badge styling to another component, such as a Next.js Link, without rendering an additional DOM element.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/badge.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Link } from ""next/link""

import { Badge } from ""@/components/ui/badge""

export function LinkAsBadge() {
  return (
    <Badge asChild>
      <Link href=""/"">Badge</Link>
    </Badge>
  )
}
```

----------------------------------------

TITLE: Install Shadcn UI Aspect Ratio Component via CLI
DESCRIPTION: This command utilizes the Shadcn UI command-line interface to automatically add the Aspect Ratio component and its necessary dependencies to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/aspect-ratio.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add aspect-ratio
```

----------------------------------------

TITLE: Import Tailwind CSS into main stylesheet
DESCRIPTION: Replaces the content of `src/index.css` to import Tailwind CSS, making its utility classes available throughout the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import ""tailwindcss"";
```

----------------------------------------

TITLE: Capture Block Screenshots
DESCRIPTION: Captures screenshots of the block for documentation and preview purposes, typically generating both light and dark mode images required for pull requests.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
pnpm registry:capture
```

----------------------------------------

TITLE: Render Basic Badge Component
DESCRIPTION: Demonstrates how to render the Badge component with various predefined variants such as default, outline, secondary, and destructive styles.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/badge.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
<Badge variant=""default |outline | secondary | destructive"">Badge</Badge>
```

----------------------------------------

TITLE: Install Accordion dependencies manually
DESCRIPTION: Installs the `@radix-ui/react-accordion` dependency required for manual setup. This step is crucial before copying the component's source code.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-accordion
```

----------------------------------------

TITLE: Import Menubar components in TypeScript/React
DESCRIPTION: Imports the necessary Menubar components (Menubar, MenubarContent, MenubarItem, etc.) from the local UI library for use in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/menubar.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Menubar,
  MenubarContent,
  MenubarItem,
  MenubarMenu,
  MenubarSeparator,
  MenubarShortcut,
  MenubarTrigger
} from ""@/components/ui/menubar""
```

----------------------------------------

TITLE: Configure Global CSS Styles for Shadcn UI Theming
DESCRIPTION: This CSS snippet defines global styles for a Shadcn UI project, utilizing CSS variables for a comprehensive theming system. It includes definitions for light and dark mode, imports Tailwind CSS and 'tw-animate-css', and sets up base styles for elements, ensuring consistent visual appearance across the application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_2

LANGUAGE: css
CODE:
```
@import ""tailwindcss"";
@import ""tw-animate-css"";

@custom-variant dark (&:is(.dark *));

:root {
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --destructive-foreground: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --radius: 0.625rem;
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.145 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.145 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.985 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.269 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.396 0.141 25.723);
  --destructive-foreground: oklch(0.637 0.237 25.331);
  --border: oklch(0.269 0 0);
  --input: oklch(0.269 0 0);
  --ring: oklch(0.439 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(0.269 0 0);
  --sidebar-ring: oklch(0.439 0 0);
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --color-card: var(--card);
  --color-card-foreground: var(--card-foreground);
  --color-popover: var(--popover);
  --color-popover-foreground: var(--popover-foreground);
  --color-primary: var(--primary);
  --color-primary-foreground: var(--primary-foreground);
  --color-secondary: var(--secondary);
  --color-secondary-foreground: var(--secondary-foreground);
  --color-muted: var(--muted);
  --color-muted-foreground: var(--muted-foreground);
  --color-accent: var(--accent);
  --color-accent-foreground: var(--accent-foreground);
  --color-destructive: var(--destructive);
  --color-destructive-foreground: var(--destructive-foreground);
  --color-border: var(--border);
  --color-input: var(--input);
  --color-ring: var(--ring);
  --color-chart-1: var(--chart-1);
  --color-chart-2: var(--chart-2);
  --color-chart-3: var(--chart-3);
  --color-chart-4: var(--chart-4);
  --color-chart-5: var(--chart-5);
  --radius-sm: calc(var(--radius) - 4px);
  --radius-md: calc(var(--radius) - 2px);
  --radius-lg: var(--radius);
  --radius-xl: calc(var(--radius) + 4px);
  --color-sidebar: var(--sidebar);
  --color-sidebar-foreground: var(--sidebar-foreground);
  --color-sidebar-primary: var(--sidebar-primary);
  --color-sidebar-primary-foreground: var(--sidebar-primary-foreground);
  --color-sidebar-accent: var(--sidebar-accent);
  --color-sidebar-accent-foreground: var(--sidebar-accent-foreground);
  --color-sidebar-border: var(--sidebar-border);
  --color-sidebar-ring: var(--sidebar-ring);
}

@layer base {
  * {
    @apply border-border outline-ring/50;
  }
  body {
    @apply bg-background text-foreground;
  }
}
```

----------------------------------------

TITLE: Install Drawer component via Shadcn CLI
DESCRIPTION: Installs the Shadcn UI Drawer component using the command-line interface, adding it to your project with a single command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/drawer.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add drawer
```

----------------------------------------

TITLE: Create Next.js ThemeProvider Component
DESCRIPTION: This TypeScript React component defines a custom `ThemeProvider` that wraps the `NextThemesProvider` from the `next-themes` library. It serves as a central point for managing and applying themes across your application by passing children and props directly to the underlying provider.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/next.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import { ThemeProvider as NextThemesProvider } from ""next-themes""

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
```

----------------------------------------

TITLE: Install Radix UI Switch dependency manually
DESCRIPTION: Installs the underlying @radix-ui/react-switch dependency, which is required for the manual setup of the Switch component in a React project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/switch.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-switch
```

----------------------------------------

TITLE: Add a shadcn/ui component using CLI
DESCRIPTION: Uses the `shadcn` CLI `add` command to install a specific component, such as the `Button` component, into the project's designated UI components folder.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Install Collapsible Component Manual Dependencies
DESCRIPTION: Installs the core `@radix-ui/react-collapsible` dependency, which is required for the manual setup of the Collapsible component in your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-collapsible
```

----------------------------------------

TITLE: Build Registry Blocks
DESCRIPTION: Executes the pnpm command to build the registry blocks, compiling and preparing them for local viewing and eventual publication. This step is crucial after defining or updating a block.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_7

LANGUAGE: bash
CODE:
```
pnpm registry:build
```

----------------------------------------

TITLE: Create Navigation Menu Link with asChild Prop
DESCRIPTION: Illustrates how to use the `asChild` prop with `NavigationMenuLink` to wrap a `next/link` component, allowing external links to function as navigation menu triggers while inheriting the menu's styling and behavior.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/navigation-menu.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { Link } from ""next/link""

export function NavigationMenuDemo() {
  return (
    <NavigationMenuItem>
      <NavigationMenuLink asChild>
        <Link href=""/docs"">Documentation</Link>
      </NavigationMenuLink>
    </NavigationMenuItem>
  )
}
```

----------------------------------------

TITLE: Create a Link that Looks Like a Button with asChild Prop
DESCRIPTION: Shows how to use the `asChild` prop with the Shadcn UI Button component to render another component, such as a Next.js Link, while applying button styling. This allows for semantic HTML elements to retain their native behavior while appearing as a button.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/button.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Link } from ""next/link""

import { Button } from ""@/components/ui/button""

export function LinkAsButton() {
  return (
    <Button asChild>
      <Link href=""/login"">Login</Link>
    </Button>
  )
}
```

----------------------------------------

TITLE: Render DataTable Component in a Next.js Page
DESCRIPTION: This Next.js page component demonstrates how to integrate and render the `DataTable` component. It includes an asynchronous `getData` function to simulate data fetching and passes the retrieved data and column definitions to the `DataTable` for display.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Payment, columns } from ""./columns""
import { DataTable } from ""./data-table""

async function getData(): Promise<Payment[]> {
  // Fetch data from your API here.
  return [
    {
      id: ""728ed52f"",
      amount: 100,
      status: ""pending"",
      email: ""m@example.com"",
    },
    // ...
  ]
}

export default async function DemoPage() {
  const data = await getData()

  return (
    <div className=""container mx-auto py-10"">
      <DataTable columns={columns} data={data} />
    </div>
  )
}
```

----------------------------------------

TITLE: Install Manual Dependencies for Calendar Component
DESCRIPTION: Installs the required external libraries, react-day-picker and date-fns, which are essential dependencies for manually setting up and using the Calendar component in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install react-day-picker date-fns
```

----------------------------------------

TITLE: Install Slider Component via Shadcn CLI
DESCRIPTION: Installs the Slider component into your project using the shadcn/ui CLI, which automates dependency management and component setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/slider.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add slider
```

----------------------------------------

TITLE: Install Dropdown Menu Manual Dependencies
DESCRIPTION: For manual installation, this command installs the core `@radix-ui/react-dropdown-menu` package, which is a prerequisite for the shadcn/ui Dropdown Menu component. This step is necessary before copying the component's source code.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dropdown-menu.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dropdown-menu
```

----------------------------------------

TITLE: Install Card component using Shadcn UI CLI
DESCRIPTION: Installs the Shadcn UI Card component using the `npx shadcn@latest add card` command-line interface. This command automates the setup process by adding the necessary files to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/card.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add card
```

----------------------------------------

TITLE: Import Shadcn UI Input component
DESCRIPTION: Imports the Input component from the Shadcn UI library into a TypeScript/React file. This line is necessary to make the component available for use within your application's JSX.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Input } from ""@/components/ui/input""
```

----------------------------------------

TITLE: Render a basic Avatar component with image and fallback
DESCRIPTION: Demonstrates how to render a basic Avatar component, including an image source and a fallback element for when the image is unavailable or fails to load.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Avatar>
  <AvatarImage src=""https://github.com/shadcn.png"" />
  <AvatarFallback>CN</AvatarFallback>
</Avatar>
```

----------------------------------------

TITLE: Install shadcn/ui Tabs component via CLI
DESCRIPTION: This command uses the shadcn/ui CLI to automatically add the Tabs component to your project, including its dependencies and source files. It's the recommended way for quick setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tabs.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add tabs
```

----------------------------------------

TITLE: Build a Client-Side Validated Form with Shadcn UI, React Hook Form, and Zod
DESCRIPTION: This TypeScript React snippet demonstrates the construction of a form using Shadcn UI's `Form` components, `react-hook-form` for managing form state and submission, and `zod` for defining a validation schema. It showcases how to create a `FormField` for a username input with client-side validation messages.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
""use client""

import { zodResolver } from ""@hookform/resolvers/zod""
import { useForm } from ""react-hook-form""
import { z } from ""zod""

import { Button } from ""@/components/ui/button""
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from ""@/components/ui/form""
import { Input } from ""@/components/ui/input""

const formSchema = z.object({
  username: z.string().min(2, {
    message: ""Username must be at least 2 characters."",
  }),
})

export function ProfileForm() {
  // ...

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className=""space-y-8"">
        <FormField
          control={form.control}
          name=""username""
          render={({ field }) => (
            <FormItem>
              <FormLabel>Username</FormLabel>
              <FormControl>
                <Input placeholder=""shadcn"" {...field} />
              </FormControl>
              <FormDescription>
                This is your public display name.
              </FormDescription>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type=""submit"">Submit</Button>
      </form>
    </Form>
  )
}
```

----------------------------------------

TITLE: Install Progress Component via CLI
DESCRIPTION: Installs the Shadcn UI Progress component using the command-line interface tool, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add progress
```

----------------------------------------

TITLE: Install Tabs Component via Shadcn CLI
DESCRIPTION: Installs the Tabs UI component using the shadcn/ui command-line interface, adding it to your project with a single command.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add tabs
```

----------------------------------------

TITLE: Migrate to Tailwind `size-*` utility
DESCRIPTION: Illustrates the migration from separate `w-*` and `h-*` utility classes to the new combined `size-*` utility in Tailwind CSS. This new utility is fully supported by `tailwind-merge`, streamlining sizing declarations.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_7

LANGUAGE: diff
CODE:
```
- w-4 h-4
+ size-4
```

----------------------------------------

TITLE: Implement Basic 6-Digit Input OTP Component
DESCRIPTION: Demonstrates the fundamental structure for creating a 6-digit Input OTP component. It utilizes `InputOTPGroup` to logically group slots and `InputOTPSlot` for individual input fields.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/input-otp.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<InputOTP maxLength={6}>
  <InputOTPGroup>
    <InputOTPSlot index={0} />
    <InputOTPSlot index={1} />
    <InputOTPSlot index={2} />
  </InputOTPGroup>
  <InputOTPSeparator />
  <InputOTPGroup>
    <InputOTPSlot index={3} />
    <InputOTPSlot index={4} />
    <InputOTPSlot index={5} />
  </InputOTPGroup>
</InputOTP>
```

----------------------------------------

TITLE: Manually install Radix UI Accordion dependency
DESCRIPTION: This command installs the core `@radix-ui/react-accordion` package, which is a foundational dependency for the Shadcn UI Accordion component when performing a manual installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/accordion.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-accordion
```

----------------------------------------

TITLE: Import Alert Dialog components in TSX
DESCRIPTION: Imports all necessary sub-components for the Alert Dialog from the local `components/ui/alert-dialog` path, enabling their use in a React/TypeScript application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert-dialog.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger
} from ""@/components/ui/alert-dialog""
```

----------------------------------------

TITLE: Import Card Components in TSX
DESCRIPTION: This code snippet shows the necessary import statement for using the Card and its sub-components (CardContent, CardDescription, CardFooter, CardHeader, CardTitle) within a TypeScript React (TSX) file, typically from the `@/components/ui/card` path in a shadcn/ui project setup.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/card.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Card,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from ""@/components/ui/card""
```

----------------------------------------

TITLE: Install Textarea component using shadcn/ui CLI
DESCRIPTION: This command utilizes the shadcn/ui command-line interface to automatically add the Textarea component and its necessary dependencies to your project, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/textarea.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add textarea
```

----------------------------------------

TITLE: Install Radix UI Avatar Dependencies Manually
DESCRIPTION: This command installs the core `@radix-ui/react-avatar` package, which is a prerequisite for manual integration of the shadcn/ui Avatar component, providing the foundational primitives.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/avatar.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-avatar
```

----------------------------------------

TITLE: Import Separator component in TypeScript/React
DESCRIPTION: Import the Separator component from your project's UI library path. This line is required to make the component available for use in your TSX files and React components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/separator.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Separator } from ""@/components/ui/separator""
```

----------------------------------------

TITLE: Configure TypeScript base URL and paths in tsconfig.json
DESCRIPTION: Adds `baseUrl` and `paths` properties to the `compilerOptions` in `tsconfig.json`. This configuration allows for absolute imports using the `@/` alias, improving module resolution.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/vite.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
{
  ""files"": [],
  ""references"": [
    {
      ""path"": ""./tsconfig.app.json""
    },
    {
      ""path"": ""./tsconfig.node.json""
    }
  ],
  ""compilerOptions"": {
    ""baseUrl"": ""."",
    ""paths"": {
      ""@/*"": [""./src/*""]
    }
  }
}
```

----------------------------------------

TITLE: Import Calendar Component in TypeScript React
DESCRIPTION: Demonstrates the standard import statement for bringing the Calendar component into a TypeScript React file, making it available for use within the application's UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/calendar.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Calendar } from ""@/components/ui/calendar""
```

----------------------------------------

TITLE: Import Shadcn UI Hover Card components
DESCRIPTION: Import the `HoverCard`, `HoverCardContent`, and `HoverCardTrigger` components from your local shadcn/ui library for use in a React or Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/hover-card.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  HoverCard,
  HoverCardContent,
  HoverCardTrigger,
} from ""@/components/ui/hover-card""
```

----------------------------------------

TITLE: Import and Use shadcn/ui Button Component in Next.js
DESCRIPTION: This TypeScript React (TSX) snippet demonstrates how to import and use a `shadcn/ui` Button component within a Next.js application. After adding the component via the `add` command, it can be imported from `@/components/ui/button` and rendered as a standard React component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/next.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Button } from ""@/components/ui/button""

export default function Home() {
  return (
    <div>
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Basic Navigation Menu Structure
DESCRIPTION: Demonstrates the fundamental JSX structure for creating a simple navigation menu with a single menu item, a trigger, and associated content containing a link.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/navigation-menu.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<NavigationMenu>
  <NavigationMenuList>
    <NavigationMenuItem>
      <NavigationMenuTrigger>Item One</NavigationMenuTrigger>
      <NavigationMenuContent>
        <NavigationMenuLink>Link</NavigationMenuLink>
      </NavigationMenuContent>
    </NavigationMenuItem>
  </NavigationMenuList>
</NavigationMenu>
```

----------------------------------------

TITLE: Using useSidebar Hook for Sidebar State Management (TypeScript)
DESCRIPTION: Demonstrates how to import and destructure properties from the `useSidebar` hook, provided by `@/components/ui/sidebar`. This hook offers reactive state (`state`, `open`, `isMobile`) and control functions (`setOpen`, `setOpenMobile`, `toggleSidebar`) for managing sidebar visibility and responsiveness across different device types.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_14

LANGUAGE: tsx
CODE:
```
import { useSidebar } from ""@/components/ui/sidebar""

export function AppSidebar() {
  const {
    state,
    open,
    setOpen,
    openMobile,
    setOpenMobile,
    isMobile,
    toggleSidebar,
  } = useSidebar()
}
```

----------------------------------------

TITLE: Import Tabs components in TSX
DESCRIPTION: This import statement brings the necessary components (Tabs, TabsContent, TabsList, TabsTrigger) from your local shadcn/ui library into a TypeScript React file, making them available for use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tabs.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Tabs, TabsContent, TabsList, TabsTrigger } from ""@/components/ui/tabs""
```

----------------------------------------

TITLE: Import Tailwind CSS into Remix root component
DESCRIPTION: Imports the `tailwind.css` file into the `app/root.tsx` file and adds it as a stylesheet link, making global Tailwind styles available throughout the Remix application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_6

LANGUAGE: js
CODE:
```
import styles from ""./tailwind.css?url""

export const links: LinksFunction = () => [
  { rel: ""stylesheet"", href: styles },
  ...(cssBundleHref ? [{ rel: ""stylesheet"", href: cssBundleHref }] : []),
]
```

----------------------------------------

TITLE: Install Carousel component via shadcn CLI
DESCRIPTION: Installs the Carousel component using the shadcn CLI tool, adding it to the project's components directory and configuring it for use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/carousel.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add carousel
```

----------------------------------------

TITLE: Create a Collapsible Sidebar Group with Shadcn UI
DESCRIPTION: Illustrates how to create a collapsible `SidebarGroup` by integrating it with the `Collapsible` component. This setup allows users to expand and collapse the group's content, enhancing navigation flexibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  return (
    <Collapsible defaultOpen className=""group/collapsible"">
      <SidebarGroup>
        <SidebarGroupLabel asChild>
          <CollapsibleTrigger>
            Help
            <ChevronDown className=""ml-auto transition-transform group-data-[state=open]/collapsible:rotate-180"" />
          </CollapsibleTrigger>
        </SidebarGroupLabel>
        <CollapsibleContent>
          <SidebarGroupContent />
        </CollapsibleContent>
      </SidebarGroup>
    </Collapsible>
  )
}
```

----------------------------------------

TITLE: Install Manual Calendar Dependencies
DESCRIPTION: Installs the core dependencies required for the Calendar component when setting it up manually. This includes `react-day-picker` for date selection functionality and `date-fns` for date manipulation utilities.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/calendar.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install react-day-picker date-fns
```

----------------------------------------

TITLE: Install Tailwind CSS and Autoprefixer
DESCRIPTION: Installs the necessary development dependencies for Tailwind CSS and Autoprefixer, which are essential for styling `shadcn/ui` components in a Remix project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/remix.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install -D tailwindcss@latest autoprefixer@latest
```

----------------------------------------

TITLE: Migrate to Tailwind CSS size-* Utility
DESCRIPTION: Illustrates the adoption of the new `size-*` utility in Tailwind CSS (introduced in v3.4). This utility provides a more concise way to define both width and height, replacing the separate `w-*` and `h-*` classes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_7

LANGUAGE: diff
CODE:
```
- w-4 h-4
+ size-4
```

----------------------------------------

TITLE: Basic Select Component Usage in TSX
DESCRIPTION: Demonstrates a basic implementation of the Shadcn UI Select component, including a trigger, value display, and selectable options for 'Light', 'Dark', and 'System' themes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/select.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Select>
  <SelectTrigger className=""w-[180px]"">
    <SelectValue placeholder=""Theme"" />
  </SelectTrigger>
  <SelectContent>
    <SelectItem value=""light"">Light</SelectItem>
    <SelectItem value=""dark"">Dark</SelectItem>
    <SelectItem value=""system"">System</SelectItem>
  </SelectContent>
</Select>
```

----------------------------------------

TITLE: Import Drawer components in TSX
DESCRIPTION: Imports various sub-components of the Drawer from the Shadcn UI library, including Drawer, DrawerClose, DrawerContent, etc., for use in a React/TypeScriptX project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/drawer.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerDescription,
  DrawerFooter,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from ""@/components/ui/drawer""
```

----------------------------------------

TITLE: Install Progress Component via CLI
DESCRIPTION: Installs the Shadcn UI Progress component using the command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/progress.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add progress
```

----------------------------------------

TITLE: Define React Home component with line numbers
DESCRIPTION: Defines a simple React functional component named Home, demonstrating how to display line numbers in code blocks for documentation purposes.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/styleguide.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
// With line numbers
export default function Home() {
  return <div>Hello</div>
}
```

----------------------------------------

TITLE: Create a new Laravel project with Inertia and React
DESCRIPTION: This command initializes a new Laravel project, configuring it with Inertia.js and React for a modern full-stack application setup. It's the first step to building a Laravel application with a React frontend.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/laravel.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
laravel new my-app --react
```

----------------------------------------

TITLE: Install Radix UI Progress Dependency Manually
DESCRIPTION: Installs the core `@radix-ui/react-progress` dependency required for manual setup and integration of the Progress component into a project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/progress.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-progress
```

----------------------------------------

TITLE: Update shadcn-ui Components for New Dark Mode Colors
DESCRIPTION: Provides a sequence of Git and CLI commands to update existing shadcn-ui components, particularly for applying new dark mode color schemes. It emphasizes committing changes first and then using the CLI with `--overwrite`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/tailwind-v4.mdx#_snippet_11

LANGUAGE: bash
CODE:
```
git add .
git commit -m ""...""
```

LANGUAGE: bash
CODE:
```
npx shadcn@latest add --all --overwrite
```

----------------------------------------

TITLE: Basic Alert Dialog JSX structure
DESCRIPTION: Demonstrates the basic JSX structure for an Alert Dialog, including a trigger to open it, a header with title and description, and a footer with cancel and action buttons.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<AlertDialog>
  <AlertDialogTrigger>Open</AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```

----------------------------------------

TITLE: Install Embla Carousel React Dependency Manually
DESCRIPTION: Installs the core `embla-carousel-react` dependency required for the manual setup of the Carousel component, providing the underlying carousel functionality.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/carousel.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install embla-carousel-react
```

----------------------------------------

TITLE: Install Radix UI Collapsible dependency manually
DESCRIPTION: Installs the `@radix-ui/react-collapsible` package, which is a required dependency for the manual installation of the Shadcn UI Collapsible component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/collapsible.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-collapsible
```

----------------------------------------

TITLE: Basic SidebarGroup Usage in React
DESCRIPTION: Demonstrates the fundamental structure of a `SidebarGroup` component, including `SidebarContent`, `SidebarGroupLabel`, `SidebarGroupAction`, and `SidebarGroupContent` within a `Sidebar` component to create a basic sidebar section.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent, SidebarGroup } from ""@/components/ui/sidebar""

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Application</SidebarGroupLabel>
          <SidebarGroupAction>
            <Plus /> <span className=""sr-only"">Add Project</span>
          </SidebarGroupAction>
          <SidebarGroupContent></SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Install Radix UI Checkbox Dependency Manually
DESCRIPTION: Installs the `@radix-ui/react-checkbox` package, a required dependency for manual setup of the Shadcn UI Checkbox component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/checkbox.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-checkbox
```

----------------------------------------

TITLE: Implement basic Accordion in React/TSX
DESCRIPTION: Demonstrates a basic implementation of the Accordion component with a single collapsible item. It includes an `AccordionItem`, `AccordionTrigger` for interaction, and `AccordionContent` to display information.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/accordion.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
<Accordion type=""single"" collapsible>
  <AccordionItem value=""item-1"">
    <AccordionTrigger>Is it accessible?</AccordionTrigger>
    <AccordionContent>
      Yes. It adheres to the WAI-ARIA design pattern.
    </AccordionContent>
  </AccordionItem>
</Accordion>
```

----------------------------------------

TITLE: Install Label component using Shadcn CLI
DESCRIPTION: This command uses the Shadcn UI CLI to automatically add the Label component and its dependencies to your project, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/label.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add label
```

----------------------------------------

TITLE: Full List of shadcn/ui CSS Variables
DESCRIPTION: Provides a comprehensive list of CSS variables used in shadcn/ui for various components and states, including definitions for both light (`:root`) and dark (`.dark`) modes. This block showcases the extensive customization options available for the theming system.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/theming.mdx#_snippet_6

LANGUAGE: css
CODE:
```
:root {
  --radius: 0.625rem;
  --background: oklch(1 0 0);
  --foreground: oklch(0.145 0 0);
  --card: oklch(1 0 0);
  --card-foreground: oklch(0.145 0 0);
  --popover: oklch(1 0 0);
  --popover-foreground: oklch(0.145 0 0);
  --primary: oklch(0.205 0 0);
  --primary-foreground: oklch(0.985 0 0);
  --secondary: oklch(0.97 0 0);
  --secondary-foreground: oklch(0.205 0 0);
  --muted: oklch(0.97 0 0);
  --muted-foreground: oklch(0.556 0 0);
  --accent: oklch(0.97 0 0);
  --accent-foreground: oklch(0.205 0 0);
  --destructive: oklch(0.577 0.245 27.325);
  --border: oklch(0.922 0 0);
  --input: oklch(0.922 0 0);
  --ring: oklch(0.708 0 0);
  --chart-1: oklch(0.646 0.222 41.116);
  --chart-2: oklch(0.6 0.118 184.704);
  --chart-3: oklch(0.398 0.07 227.392);
  --chart-4: oklch(0.828 0.189 84.429);
  --chart-5: oklch(0.769 0.188 70.08);
  --sidebar: oklch(0.985 0 0);
  --sidebar-foreground: oklch(0.145 0 0);
  --sidebar-primary: oklch(0.205 0 0);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.97 0 0);
  --sidebar-accent-foreground: oklch(0.205 0 0);
  --sidebar-border: oklch(0.922 0 0);
  --sidebar-ring: oklch(0.708 0 0);
}

.dark {
  --background: oklch(0.145 0 0);
  --foreground: oklch(0.985 0 0);
  --card: oklch(0.205 0 0);
  --card-foreground: oklch(0.985 0 0);
  --popover: oklch(0.269 0 0);
  --popover-foreground: oklch(0.985 0 0);
  --primary: oklch(0.922 0 0);
  --primary-foreground: oklch(0.205 0 0);
  --secondary: oklch(0.269 0 0);
  --secondary-foreground: oklch(0.985 0 0);
  --muted: oklch(0.269 0 0);
  --muted-foreground: oklch(0.708 0 0);
  --accent: oklch(0.371 0 0);
  --accent-foreground: oklch(0.985 0 0);
  --destructive: oklch(0.704 0.191 22.216);
  --border: oklch(1 0 0 / 10%);
  --input: oklch(1 0 0 / 15%);
  --ring: oklch(0.556 0 0);
  --chart-1: oklch(0.488 0.243 264.376);
  --chart-2: oklch(0.696 0.17 162.48);
  --chart-3: oklch(0.769 0.188 70.08);
  --chart-4: oklch(0.627 0.265 303.9);
  --chart-5: oklch(0.645 0.246 16.439);
  --sidebar: oklch(0.205 0 0);
  --sidebar-foreground: oklch(0.985 0 0);
  --sidebar-primary: oklch(0.488 0.243 264.376);
  --sidebar-primary-foreground: oklch(0.985 0 0);
  --sidebar-accent: oklch(0.269 0 0);
  --sidebar-accent-foreground: oklch(0.985 0 0);
  --sidebar-border: oklch(1 0 0 / 10%);
  --sidebar-ring: oklch(0.439 0 0);
}
```

----------------------------------------

TITLE: Basic Chart Tooltip Implementation
DESCRIPTION: Demonstrates the basic usage of `ChartTooltip` with `ChartTooltipContent` to add a default tooltip to a chart. This provides standard tooltip functionality out-of-the-box with minimal configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_24

LANGUAGE: tsx
CODE:
```
<ChartTooltip content={<ChartTooltipContent />} />
```

----------------------------------------

TITLE: Install Tailwind CSS and Autoprefixer
DESCRIPTION: Installs the necessary development dependencies for Tailwind CSS and Autoprefixer using npm. These packages are essential for styling shadcn/ui components and processing CSS.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/remix.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install -D tailwindcss@latest autoprefixer@latest
```

----------------------------------------

TITLE: Add New Category to Shadcn UI Registry
DESCRIPTION: Demonstrates how to extend the `registryCategories` array in `apps/www/registry/registry-categories.ts` to introduce a new category for organizing UI blocks within the shadcn/ui registry. This allows for better categorization and discoverability of components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/blocks.mdx#_snippet_9

LANGUAGE: tsx
CODE:
```
export const registryCategories = [
  // ...
  {
    name: ""Input"",
    slug: ""input"",
    hidden: false,
  },
]
```

----------------------------------------

TITLE: Install shadcn/ui Chart Component via CLI
DESCRIPTION: This command installs the shadcn/ui chart component using the `npx shadcn@latest add` utility. It's the recommended and quickest way to add the chart component and its dependencies to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npx shadcn@latest add chart
```

----------------------------------------

TITLE: Install Vaul Dependency Manually
DESCRIPTION: This command installs 'vaul', the underlying library that the Shadcn UI Drawer component is built upon, as a project dependency.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/drawer.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install vaul
```

----------------------------------------

TITLE: Implement loading skeleton for SidebarMenu with React Server Components in TSX
DESCRIPTION: Presents a `NavProjectsSkeleton` component designed to display a loading state within a `SidebarMenu`. This skeleton is particularly useful when fetching data with React Server Components and integrating with React Suspense to provide immediate UI feedback.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_36

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton showIcon />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Define New Block in Registry
DESCRIPTION: Adds a new block definition to `registry-blocks.ts`, specifying its name, author, description, type, registry dependencies, external dependencies, and the paths of its constituent files, adhering to the shadcn/ui registry schema.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/blocks.mdx#_snippet_6

LANGUAGE: tsx
CODE:
```
export const blocks = [
  // ...
  {
    name: ""dashboard-01"",
    author: ""shadcn (https://ui.shadcn.com)"",
    title: ""Dashboard"",
    description: ""A simple dashboard with a hello world component."",
    type: ""registry:block"",
    registryDependencies: [""input"", ""button"", ""card""],
    dependencies: [""zod""],
    files: [
      {
        path: ""blocks/dashboard-01/page.tsx"",
        type: ""registry:page"",
        target: ""app/dashboard/page.tsx""
      },
      {
        path: ""blocks/dashboard-01/components/hello-world.tsx"",
        type: ""registry:component""
      },
      {
        path: ""blocks/dashboard-01/components/example-card.tsx"",
        type: ""registry:component""
      },
      {
        path: ""blocks/dashboard-01/hooks/use-hello-world.ts"",
        type: ""registry:hook""
      },
      {
        path: ""blocks/dashboard-01/lib/format-date.ts"",
        type: ""registry:lib""
      }
    ],
    categories: [""dashboard""]
  },
]
```

----------------------------------------

TITLE: Create Tailwind CSS Class Name Utility Helper in TypeScript
DESCRIPTION: This TypeScript function, `cn`, acts as a utility helper for combining and merging Tailwind CSS class names. It leverages the `clsx` library for conditionally joining class values and `tailwind-merge` for resolving conflicting Tailwind classes, providing a robust and efficient way to manage dynamic styling in components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/manual.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import { clsx, type ClassValue } from ""clsx""
import { twMerge } from ""tailwind-merge""

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}
```

----------------------------------------

TITLE: Import Alert Dialog components in TypeScript/React
DESCRIPTION: Imports various sub-components of the Alert Dialog from the local UI components path, making them available for use in a React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from ""@/components/ui/alert-dialog""
```

----------------------------------------

TITLE: Implement Controlled Sidebar State with React and shadcn/ui
DESCRIPTION: Demonstrates how to manage the open/closed state of a shadcn/ui sidebar using React's `useState` hook. It utilizes `SidebarProvider` with `open` and `onOpenChange` props for full control over the sidebar's visibility.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_41

LANGUAGE: tsx
CODE:
```
export function AppSidebar() {
  const [open, setOpen] = React.useState(false)

  return (
    <SidebarProvider open={open} onOpenChange={setOpen}>
      <Sidebar />
    </SidebarProvider>
  )
}
```

----------------------------------------

TITLE: Navigation Menu with Next.js Link Integration
DESCRIPTION: Illustrates how to integrate the Navigation Menu with Next.js's Link component, ensuring proper styling for client-side routing using `navigationMenuTriggerStyle()`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/navigation-menu.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { navigationMenuTriggerStyle } from ""@/components/ui/navigation-menu""
```

LANGUAGE: tsx
CODE:
```
<NavigationMenuItem>
  <Link href=""/docs"" legacyBehavior passHref>
    <NavigationMenuLink className={navigationMenuTriggerStyle()}>
      Documentation
    </NavigationMenuLink>
  </Link>
</NavigationMenuItem>
```

----------------------------------------

TITLE: Render a Sidebar Separator in React
DESCRIPTION: Demonstrates the basic structure for integrating the `SidebarSeparator` component within a `Sidebar` to visually divide content sections, enhancing readability and organization.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_33

LANGUAGE: tsx
CODE:
```
<Sidebar>
  <SidebarHeader />
  <SidebarSeparator />
  <SidebarContent>
    <SidebarGroup />
    <SidebarSeparator />
    <SidebarGroup />
  </SidebarContent>
</Sidebar>
```

----------------------------------------

TITLE: Initialize shadcn/ui in Astro project
DESCRIPTION: Runs the `shadcn/ui` initialization command to set up the necessary configuration files and directories within the Astro project. This prepares the project for adding shadcn/ui components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/astro.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Add shadcn/ui Components to Monorepo Application
DESCRIPTION: This command adds a specified shadcn/ui component to the current application workspace. The CLI automatically installs component files to `packages/ui` and updates import paths in the application, handling dependencies like `button`, `label`, `input`, and `card` for complex components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/(root)/monorepo.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@canary add [COMPONENT]
```

----------------------------------------

TITLE: Install Radix UI Context Menu dependency
DESCRIPTION: Installs the core `@radix-ui/react-context-menu` package, which is a prerequisite for the shadcn UI Context Menu component when performing a manual installation. This command fetches the necessary library from npm.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/context-menu.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-context-menu
```

----------------------------------------

TITLE: Import and use shadcn/ui Button in React Router
DESCRIPTION: Illustrates how to import the `Button` component from shadcn/ui and integrate it into a React Router route, including setting page metadata and rendering the component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/react-router.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Button } from ""~/components/ui/button""

import type { Route } from ""./+types/home""

export function meta({}: Route.MetaArgs) {
  return [
    { title: ""New React Router App"" },
    { name: ""description"", content: ""Welcome to React Router!"" }
  ]
}

export default function Home() {
  return (
    <div className=""flex flex-col items-center justify-center min-h-svh"">
      <Button>Click me</Button>
    </div>
  )
}
```

----------------------------------------

TITLE: Create a React 'Open in v0' Button Component
DESCRIPTION: This JSX component defines a reusable React button that, when clicked, opens a specified URL in v0.dev. It utilizes the `@/components/ui/button` component and includes a custom SVG icon for the v0 logo. The component expects a `url` prop, which should be the link to the registry item to be opened.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/registry/open-in-v0.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { Button } from ""@/components/ui/button""

export function OpenInV0Button({ url }: { url: string }) {
  return (
    <Button
      aria-label=""Open in v0""
      className=""h-8 gap-1 rounded-[6px] bg-black px-3 text-xs text-white hover:bg-black hover:text-white dark:bg-white dark:text-black""
      asChild
    >
      <a
        href={`https://v0.dev/chat/api/open?url=${url}`}
        target=""_blank""
        rel=""noreferrer""
      >
        Open in {"" ""}
        <svg
          viewBox=""0 0 40 20""
          fill=""none""
          xmlns=""http://www.w3.org/2000/svg""
          className=""h-5 w-5 text-current""
        >
          <path
            d=""M23.3919 0H32.9188C36.7819 0 39.9136 3.13165 39.9136 6.99475V16.0805H36.0006V6.99475C36.0006 6.90167 35.9969 6.80925 35.9898 6.71766L26.4628 16.079C26.4949 16.08 26.5272 16.0805 26.5595 16.0805H36.0006V19.7762H26.5595C22.6964 19.7762 19.4788 16.6139 19.4788 12.7508V3.68923H23.3919V12.7508C23.3919 12.9253 23.4054 13.0977 23.4316 13.2668L33.1682 3.6995C33.0861 3.6927 33.003 3.68923 32.9188 3.68923H23.3919V0Z""
            fill=""currentColor""
          ></path>
          <path
            d=""M13.7688 19.0956L0 3.68759H5.53933L13.6231 12.7337V3.68759H17.7535V17.5746C17.7535 19.6705 15.1654 20.6584 13.7688 19.0956Z""
            fill=""currentColor""
          ></path>
        </svg>
      </a>
    </Button>
  )
}
```

----------------------------------------

TITLE: Implement React Hook Form with Zod Resolver
DESCRIPTION: Illustrates the complete setup of a form using `useForm` from React Hook Form, integrating `zodResolver` for schema validation. It defines the form structure, default values, and a submit handler to process form data, ensuring type-safe and validated submissions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
""use client""

import { zodResolver } from ""@hookform/resolvers/zod""
import { useForm } from ""react-hook-form""
import { z } from ""zod""

const formSchema = z.object({
  username: z.string().min(2, {
    message: ""Username must be at least 2 characters."",
  }),
})

export function ProfileForm() {
  // 1. Define your form.
  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      username: """",
    },
  })

  // 2. Define a submit handler.
  function onSubmit(values: z.infer<typeof formSchema>) {
    // Do something with the form values.
    // ✅ This will be type-safe and validated.
    console.log(values)
  }
}
```

----------------------------------------

TITLE: Install Collapsible Component via Shadcn CLI
DESCRIPTION: Installs the Collapsible component into your project using the Shadcn UI command-line interface, automating the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/collapsible.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add collapsible
```

----------------------------------------

TITLE: Install Calendar Component via CLI
DESCRIPTION: Installs the shadcn/ui Calendar component using the command-line interface. This command adds the component and its dependencies to your project, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/calendar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add calendar
```

----------------------------------------

TITLE: Integrate React Server Components with Suspense for Sidebar in TSX
DESCRIPTION: Illustrates how to use `React.Suspense` to manage the loading state for `NavProjects` (a React Server Component) within an `AppSidebar`. The `fallback` prop is used to display `NavProjectsSkeleton` while the data is being fetched, providing a smooth user experience.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_38

LANGUAGE: tsx
CODE:
```
function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup>
          <SidebarGroupLabel>Projects</SidebarGroupLabel>
          <SidebarGroupContent>
            <React.Suspense fallback={<NavProjectsSkeleton />}>
              <NavProjects />
            </React.Suspense>
          </SidebarGroupContent>
        </SidebarGroup>
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Import Textarea component in TypeScript/React
DESCRIPTION: This snippet demonstrates how to import the Textarea component from the local UI components path. It makes the component available for use within your React or Next.js application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { Textarea } from ""@/components/ui/textarea""
```

----------------------------------------

TITLE: Install Radix UI Dialog Dependencies Manually
DESCRIPTION: Installs the core `@radix-ui/react-dialog` package, which is a prerequisite for manually setting up the Shadcn UI Dialog component. This step is part of the manual installation process, typically followed by copying component source code.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/dialog.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-dialog
```

----------------------------------------

TITLE: Import useToast hook for toast functionality
DESCRIPTION: Import the `useToast` hook from your project's hooks directory to access the `toast` function, which is the primary method for programmatically displaying notifications.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { useToast } from ""@/hooks/use-toast""
```

----------------------------------------

TITLE: Initialize shadcn/ui in Gatsby project
DESCRIPTION: Executes the `shadcn` initialization command to set up the `shadcn/ui` library within the Gatsby project. This command prepares the environment for integrating `shadcn/ui` components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/gatsby.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npx shadcn@latest init
```

----------------------------------------

TITLE: Add Components with shadcn CLI
DESCRIPTION: Use the `add` command to integrate new components and their required dependencies into your existing shadcn project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/cli.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add [component]
```

----------------------------------------

TITLE: Install Radix UI Toast dependencies manually
DESCRIPTION: For manual installation, install the core `@radix-ui/react-toast` package, which serves as the underlying primitive for the Shadcn UI Toast component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toast.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-toast
```

----------------------------------------

TITLE: Import Sheet components in TSX
DESCRIPTION: Imports various Sheet-related components (Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger) from the local UI components path, making them available for use in a TypeScript React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sheet.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from ""@/components/ui/sheet""
```

----------------------------------------

TITLE: Create a Next.js Theme Provider Component
DESCRIPTION: Defines a reusable React component, `ThemeProvider`, that wraps `next-themes`'s `NextThemesProvider`. This component allows for easy integration of theme management throughout a Next.js application, passing down theme-related props and children.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/dark-mode/next.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import { ThemeProvider as NextThemesProvider } from ""next-themes""

export function ThemeProvider({
  children,
  ...props
}: React.ComponentProps<typeof NextThemesProvider>) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
```

----------------------------------------

TITLE: Install Collapsible component using Shadcn CLI
DESCRIPTION: Installs the Shadcn UI Collapsible component using the `npx shadcn@latest add` command, which automatically adds the component to your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/collapsible.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add collapsible
```

----------------------------------------

TITLE: Add shadcn/ui Button component
DESCRIPTION: Adds the `Button` component from shadcn/ui to the project. This command fetches the component's code and integrates it into the local project, making it available for use.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/installation/gatsby.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
npx shadcn@latest add button
```

----------------------------------------

TITLE: Import and Use Shadcn UI Toggle Component in TSX
DESCRIPTION: Demonstrates how to import the Toggle component from the Shadcn UI library and render it within a TypeScript React (TSX) file.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/toggle.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Toggle } from ""@/components/ui/toggle""
```

LANGUAGE: tsx
CODE:
```
<Toggle>Toggle</Toggle>
```

----------------------------------------

TITLE: Import Shadcn UI Table Components in TSX
DESCRIPTION: This snippet demonstrates how to import various sub-components of the Shadcn UI Table component, such as Table, TableBody, TableCaption, TableCell, TableHead, TableHeader, and TableRow, from the local UI library path in a TypeScript React (TSX) project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/table.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from ""@/components/ui/table""
```

----------------------------------------

TITLE: Install Radix UI Tabs Dependencies Manually
DESCRIPTION: Installs the core `@radix-ui/react-tabs` package, which is a prerequisite for manual integration of the Tabs component into a React project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/tabs.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-tabs
```

----------------------------------------

TITLE: Import ChartLegend Components
DESCRIPTION: Imports the `ChartLegend` and `ChartLegendContent` components from the shadcn-ui chart library. These imports are essential for integrating a legend into your chart visualizations.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_26

LANGUAGE: tsx
CODE:
```
import { ChartLegend, ChartLegendContent } from ""@/components/ui/chart""
```

----------------------------------------

TITLE: Structuring Sidebar Content with SidebarContent and Groups (React/TypeScript)
DESCRIPTION: Explains the use of the `SidebarContent` component as a wrapper for the main, scrollable content area of a sidebar. It illustrates how `SidebarGroup` components can be nested within `SidebarContent` to organize and categorize sidebar items effectively.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/sidebar.mdx#_snippet_18

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent } from ""@/components/ui/sidebar""

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent>
        <SidebarGroup />
        <SidebarGroup />
      </SidebarContent>
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Render Basic ChartLegend
DESCRIPTION: Illustrates the basic usage of the `ChartLegend` component. This snippet shows how to render a legend with its default content component, automatically referencing colors from the chart configuration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_27

LANGUAGE: tsx
CODE:
```
<ChartLegend content={<ChartLegendContent />} />
```

----------------------------------------

TITLE: Basic Date Picker Component in React
DESCRIPTION: This React component demonstrates a basic date picker using Shadcn UI's Button, Calendar, and Popover components, along with `date-fns` for date formatting. It allows a user to select a single date, which is then displayed in a formatted string.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/date-picker.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
""use client""

import * as React from ""react""
import { format } from ""date-fns""
import { Calendar as CalendarIcon } from ""lucide-react""

import { cn } from ""@/lib/utils""
import { Button } from ""@/components/ui/button""
import { Calendar } from ""@/components/ui/calendar""
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from ""@/components/ui/popover""

export function DatePickerDemo() {
  const [date, setDate] = React.useState<Date>()

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant=""outline""
          data-empty={!date}
          className=""data-[empty=true]:text-muted-foreground w-[280px] justify-start text-left font-normal""
        >
          <CalendarIcon />
          {date ? format(date, ""PPP"") : <span>Pick a date</span>}
        </Button>
      </PopoverTrigger>
      <PopoverContent className=""w-auto p-0"">
        <Calendar mode=""single"" selected={date} onSelect={setDate} />
      </PopoverContent>
    </Popover>
  )
}
```

----------------------------------------

TITLE: Manual Installation of Form Dependencies
DESCRIPTION: Lists the `npm` command to install necessary dependencies for manual setup of the form component. These include `@radix-ui/react-label`, `@radix-ui/react-slot`, `react-hook-form`, `@hookform/resolvers`, and `zod`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-label @radix-ui/react-slot react-hook-form @hookform/resolvers zod
```

----------------------------------------

TITLE: Install Shadcn UI Avatar component via CLI
DESCRIPTION: Installs the Avatar component into your project using the Shadcn UI command-line interface, simplifying the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add avatar
```

----------------------------------------

TITLE: Manually Install Recharts Dependency
DESCRIPTION: Provides the npm command to manually install the Recharts library, which is a fundamental dependency for shadcn/ui chart components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/chart.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npm install recharts
```

----------------------------------------

TITLE: Install shadcn/ui Calendar Block via CLI
DESCRIPTION: This bash command demonstrates how to install the latest version of the `calendar-02` block using the `shadcn` command-line interface. This is a common method for adding pre-built UI components from the shadcn/ui library to a project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/calendar.mdx#_snippet_10

LANGUAGE: bash
CODE:
```
npx shadcn@latest add calendar-02
```

----------------------------------------

TITLE: Install Radix UI Avatar dependencies manually
DESCRIPTION: Installs the core `@radix-ui/react-avatar` package, which is a prerequisite for manual integration of the Avatar component into your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/avatar.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-avatar
```

----------------------------------------

TITLE: Install Radix UI Tabs dependency manually
DESCRIPTION: For manual installation of the shadcn/ui Tabs component, this command installs the underlying @radix-ui/react-tabs package from Radix UI, which provides the core functionality.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/tabs.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-tabs
```

----------------------------------------

TITLE: Import Popover Components in TypeScript/React
DESCRIPTION: Imports the necessary Popover components (Popover, PopoverContent, PopoverTrigger) from the local UI library path, making them available for use in a React component.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/popover.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from ""@/components/ui/popover""
```

----------------------------------------

TITLE: Install Alert Dialog dependencies manually
DESCRIPTION: Installs the core @radix-ui/react-alert-dialog dependency required for the Alert Dialog component when performing a manual installation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/alert-dialog.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-alert-dialog
```

----------------------------------------

TITLE: Install Progress Component Dependencies Manually
DESCRIPTION: Installs the required `@radix-ui/react-progress` dependency, which is essential for manually setting up the Progress component in your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/progress.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-progress
```

----------------------------------------

TITLE: Install Textarea component using shadcn CLI
DESCRIPTION: This command adds the Textarea component to your project using the shadcn CLI. It automatically handles dependencies and creates the necessary component files.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/textarea.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add textarea
```

----------------------------------------

TITLE: Define Sample Chart Data for Recharts
DESCRIPTION: This TypeScript snippet defines sample data for a chart, representing monthly desktop and mobile user counts. The data structure is an array of objects, where each object contains a `month` string and numerical values for `desktop` and `mobile`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/chart.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
const chartData = [
  { month: ""January"", desktop: 186, mobile: 80 },
  { month: ""February"", desktop: 305, mobile: 200 },
  { month: ""March"", desktop: 237, mobile: 120 },
  { month: ""April"", desktop: 73, mobile: 190 },
  { month: ""May"", desktop: 209, mobile: 130 },
  { month: ""June"", desktop: 214, mobile: 140 },
]
```

----------------------------------------

TITLE: Display Loading State with SidebarMenuSkeleton
DESCRIPTION: This code demonstrates how to use `SidebarMenuSkeleton` to render a loading state for a `SidebarMenu`. This is particularly useful for improving user experience during data fetching operations with React Server Components, SWR, or react-query.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_32

LANGUAGE: tsx
CODE:
```
function NavProjectsSkeleton() {
  return (
    <SidebarMenu>
      {Array.from({ length: 5 }).map((_, index) => (
        <SidebarMenuItem key={index}>
          <SidebarMenuSkeleton />
        </SidebarMenuItem>
      ))}
    </SidebarMenu>
  )
}
```

----------------------------------------

TITLE: Install Shadcn UI Form Component via CLI
DESCRIPTION: This command-line instruction uses `npx` to add the `form` component from the `shadcn/ui` library to your project. It's the recommended way to quickly set up the form components and their dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/form.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add form
```

----------------------------------------

TITLE: Install Dropdown Menu component using shadcn CLI
DESCRIPTION: This command utilizes the `shadcn` CLI to automatically add the `dropdown-menu` component to your project. It handles the necessary file creation and dependency management, streamlining the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/dropdown-menu.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add dropdown-menu
```

----------------------------------------

TITLE: Define Minimal AppSidebar Component
DESCRIPTION: This snippet illustrates the most basic implementation of the `AppSidebar` component, containing only `Sidebar` and `SidebarContent` to establish a collapsible sidebar structure.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sidebar.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { Sidebar, SidebarContent } from ""@/components/ui/sidebar""

export function AppSidebar() {
  return (
    <Sidebar>
      <SidebarContent />
    </Sidebar>
  )
}
```

----------------------------------------

TITLE: Integrate Theme Provider into React Root Layout
DESCRIPTION: This snippet demonstrates how to wrap your main application component (`App.tsx`) with the `ThemeProvider`. It initializes the theme with a default value and specifies a storage key for persistence, ensuring theme settings are applied globally across your Vite application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/dark-mode/vite.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { ThemeProvider } from ""@/components/theme-provider""

function App() {
  return (
    <ThemeProvider defaultTheme=""dark"" storageKey=""vite-ui-theme"">
      {children}
    </ThemeProvider>
  )
}

export default App
```

----------------------------------------

TITLE: Basic Alert Dialog JSX structure
DESCRIPTION: Demonstrates the fundamental JSX structure for an Alert Dialog, including the trigger, content, header, title, description, footer, and action/cancel buttons for user interaction.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/alert-dialog.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<AlertDialog>
  <AlertDialogTrigger>Open</AlertDialogTrigger>
  <AlertDialogContent>
    <AlertDialogHeader>
      <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
      <AlertDialogDescription>
        This action cannot be undone. This will permanently delete your account
        and remove your data from our servers.
      </AlertDialogDescription>
    </AlertDialogHeader>
    <AlertDialogFooter>
      <AlertDialogCancel>Cancel</AlertDialogCancel>
      <AlertDialogAction>Continue</AlertDialogAction>
    </AlertDialogFooter>
  </AlertDialogContent>
</AlertDialog>
```

----------------------------------------

TITLE: Install shadcn/ui Toggle Group via CLI
DESCRIPTION: Installs the Toggle Group component into your project using the shadcn/ui command-line interface, automating setup and dependency management.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/toggle-group.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add toggle-group
```

----------------------------------------

TITLE: Update shadcn/ui components using CLI
DESCRIPTION: Provides a `npx` command to update all existing shadcn/ui components to their latest versions. This command will overwrite local component files, so committing changes beforehand is recommended.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/tailwind-v4.mdx#_snippet_12

LANGUAGE: bash
CODE:
```
npx shadcn@latest add --all --overwrite
```

----------------------------------------

TITLE: Basic Command Menu Component Structure
DESCRIPTION: Demonstrates the fundamental JSX structure for a shadcn/ui Command menu. It includes `CommandInput` for search, `CommandList` to display results, `CommandEmpty` for no results, and `CommandGroup` with `CommandItem` for categorized suggestions.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/command.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
<Command>
  <CommandInput placeholder=""Type a command or search..."" />
  <CommandList>
    <CommandEmpty>No results found.</CommandEmpty>
    <CommandGroup heading=""Suggestions"">
      <CommandItem>Calendar</CommandItem>
      <CommandItem>Search Emoji</CommandItem>
      <CommandItem>Calculator</CommandItem>
    </CommandGroup>
    <CommandSeparator />
    <CommandGroup heading=""Settings"">
      <CommandItem>Profile</CommandItem>
      <CommandItem>Billing</CommandItem>
      <CommandItem>Settings</CommandItem>
    </CommandGroup>
  </CommandList>
</Command>
```

----------------------------------------

TITLE: Import Radio Group and Label Components
DESCRIPTION: This snippet demonstrates the necessary import statements for using the `Label` component from shadcn/ui and the `RadioGroup` and `RadioGroupItem` components from the shadcn/ui Radio Group module in a TypeScript React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/radio-group.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Label } from ""@/components/ui/label""
import { RadioGroup, RadioGroupItem } from ""@/components/ui/radio-group""
```

----------------------------------------

TITLE: React CalendarDayButton Component Implementation
DESCRIPTION: This TypeScript/React code defines the `CalendarDayButton` component, responsible for rendering individual day buttons within a calendar. It manages focus using `useRef` and `useEffect`, applies extensive conditional styling via `data-` attributes based on selection and range states, and integrates with a `Button` component for consistent UI.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/calendar.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
function CalendarDayButton({
  className,
  day,
  modifiers,
  ...props
}: React.ComponentProps<typeof DayButton>) {
  const defaultClassNames = getDefaultClassNames()

  const ref = React.useRef<HTMLButtonElement>(null)
  React.useEffect(() => {
    if (modifiers.focused) ref.current?.focus()
  }, [modifiers.focused])

  return (
    <Button
      ref={ref}
      variant=""ghost""
      size=""icon""
      data-day={day.date.toLocaleDateString()}
      data-selected-single={
        modifiers.selected &&
        !modifiers.range_start &&
        !modifiers.range_end &&
        !modifiers.range_middle
      }
      data-range-start={modifiers.range_start}
      data-range-end={modifiers.range_end}
      data-range-middle={modifiers.range_middle}
      className={cn(
        ""data-[selected-single=true]:bg-primary data-[selected-single=true]:text-primary-foreground data-[range-middle=true]:bg-accent data-[range-middle=true]:text-accent-foreground data-[range-start=true]:bg-primary data-[range-start=true]:text-primary-foreground data-[range-end=true]:bg-primary data-[range-end=true]:text-primary-foreground group-data-[focused=true]/day:border-ring group-data-[focused=true]/day:ring-ring/50 flex aspect-square h-auto w-full min-w-[--cell-size] flex-col gap-1 font-normal leading-none data-[range-end=true]:rounded-md data-[range-middle=true]:rounded-none data-[range-start=true]:rounded-md group-data-[focused=true]/day:relative group-data-[focused=true]/day:z-10 group-data-[focused=true]/day:ring-[3px] [&>span]:text-xs [&>span]:opacity-70"",
        defaultClassNames.day,
        className
      )}
      {...props}
    />
  )
}

export { Calendar, CalendarDayButton }
```

----------------------------------------

TITLE: Install shadcn/ui Command Component via CLI
DESCRIPTION: Installs the shadcn/ui Command component and its dependencies into your project using the `npx shadcn@latest add` command, simplifying setup and integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/command.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add command
```

----------------------------------------

TITLE: Install Sonner via shadcn/ui CLI
DESCRIPTION: Runs the shadcn/ui CLI command to add the Sonner component to your project. This is the recommended way to install shadcn/ui components.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/sonner.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add sonner
```

----------------------------------------

TITLE: Install shadcn/ui Toggle Component via CLI
DESCRIPTION: Installs the Toggle UI component using the shadcn/ui command-line interface, adding it to your project with default configurations and dependencies.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/toggle.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add toggle
```

----------------------------------------

TITLE: Manually Install Radix UI Separator Dependency
DESCRIPTION: This command installs the core `@radix-ui/react-separator` package, which is a foundational dependency for the shadcn/ui Separator component. This step is part of the manual installation process, typically followed by copying the component's source code.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/separator.mdx#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @radix-ui/react-separator
```

----------------------------------------

TITLE: Add Custom CSS Rules to shadcn-ui Registry Items
DESCRIPTION: This configuration block allows adding custom CSS rules directly to the project's CSS file when a shadcn-ui registry item is installed. It supports various CSS constructs like `@plugin` directives, `@layer base`, `@layer components`, `@utility` definitions, and `@keyframes` animations. This provides fine-grained control over styling integration.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/registry/registry-item-json.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  ""css"": {
    ""@plugin @tailwindcss/typography"": {},
    ""@plugin foo"": {},
    ""@layer base"": {
      ""body"": {
        ""font-size"": ""var(--text-base)"",
        ""line-height"": ""1.5""
      }
    },
    ""@layer components"": {
      ""button"": {
        ""background-color"": ""var(--color-primary)"",
        ""color"": ""var(--color-white)""
      }
    },
    ""@utility text-magic"": {
      ""font-size"": ""var(--text-base)"",
      ""line-height"": ""1.5""
    },
    ""@keyframes wiggle"": {
      ""0%, 100%"": {
        ""transform"": ""rotate(-3deg)""
      },
      ""50%"": {
        ""transform"": ""rotate(3deg)""
      }
    }
  }
}
```

----------------------------------------

TITLE: Import Progress Component
DESCRIPTION: Imports the Progress component from the local UI library, making it available for use within a TypeScript React application.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/progress.mdx#_snippet_2

LANGUAGE: tsx
CODE:
```
import { Progress } from ""@/components/ui/progress""
```

----------------------------------------

TITLE: Install Form Component via CLI
DESCRIPTION: Provides the command-line interface command to add the form component using `shadcn/ui`'s CLI tool. This is the recommended and easiest way to integrate the form component into your project.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/form.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx shadcn@latest add form
```

----------------------------------------

TITLE: Install Checkbox Component via CLI
DESCRIPTION: Installs the shadcn/ui Checkbox component using the npx command-line interface, which automates the setup process.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/v4/content/docs/components/checkbox.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx shadcn@latest add checkbox
```

----------------------------------------

TITLE: Integrate Pagination Controls into DataTable
DESCRIPTION: This snippet demonstrates the integration of a `DataTablePagination` component into a `DataTable`. This component provides controls for navigating through pages, adjusting page size, and displaying selection counts, improving table usability and navigation.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/components/data-table.mdx#_snippet_20

LANGUAGE: tsx
CODE:
```
<DataTablePagination table={table} />
```

----------------------------------------

TITLE: Install Node.js types for Vite configuration
DESCRIPTION: Installs `@types/node` as a development dependency, providing TypeScript type definitions for Node.js modules used in `vite.config.ts`.
SOURCE: https://github.com/shadcn-ui/ui/blob/main/apps/www/content/docs/installation/vite.mdx#_snippet_5

LANGUAGE: bash
CODE:
```
npm install -D @types/node
```","shadcn",""