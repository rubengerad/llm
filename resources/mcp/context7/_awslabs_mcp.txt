"mcp aws","TITLE: Authenticating to AWS Bedrock Runtime Client with Boto3 in Python
DESCRIPTION: This Python snippet shows how to authenticate and create a `boto3` client for AWS Bedrock Runtime. It prioritizes using an `AWS_PROFILE` environment variable for session configuration, falls back to default credentials, and allows the AWS region to be specified via `AWS_REGION`, including error handling for client creation.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_24

LANGUAGE: python
CODE:
```
import boto3
import os

# Bedrock Runtime Client
aws_region: str = os.environ.get('AWS_REGION', 'us-east-1')

try:
    if aws_profile := os.environ.get('AWS_PROFILE'):
        bedrock_runtime_client = boto3.Session(
            profile_name=aws_profile, region_name=aws_region
        ).client('bedrock-runtime')
    else:
        bedrock_runtime_client = boto3.Session(region_name=aws_region).client('bedrock-runtime')
except Exception as e:
    logger.error(f'Error creating bedrock runtime client: {str(e)}')
    raise
```

----------------------------------------

TITLE: Configuring MCP Servers for Amazon Q CLI
DESCRIPTION: This JSON snippet provides an example configuration for the Amazon Q CLI MCP client, typically located at `~/.aws/amazonq/mcp.json`. It defines multiple `awslabs` MCP servers, each specifying the `command` to execute (`uvx`), `args` for the server package, and `env` variables for specific configurations like AWS profiles, regions, logging levels, and service-specific parameters (e.g., `FUNCTION_PREFIX` for Lambda, `VALKEY_HOST` for Valkey). Some entries also include `disabled` and `autoApprove` flags.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.core-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.core-mcp-server@latest""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.nova-canvas-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.nova-canvas-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.bedrock-kb-retrieval-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.bedrock-kb-retrieval-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.cost-analysis-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.cost-analysis-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.cdk-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.cdk-mcp-server@latest""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.aws-documentation-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.aws-documentation-mcp-server@latest""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.lambda-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.lambda-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FUNCTION_PREFIX"": ""your-function-prefix"",
        ""FUNCTION_LIST"": ""your-first-function, your-second-function"",
        ""FUNCTION_TAG_KEY"": ""your-tag-key"",
        ""FUNCTION_TAG_VALUE"": ""your-tag-value""
      }
    },
    ""awslabs.terraform-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.terraform-mcp-server@latest""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.frontend-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.frontend-mcp-server@latest""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.valkey-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.valkey-mcp-server@latest""
      ],
      ""env"": {
        ""VALKEY_HOST"": ""127.0.0.1"",
        ""VALKEY_PORT"": ""6379"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""autoApprove"": [],
      ""disabled"": false
    },
    ""awslabs.aws-location-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.aws-location-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.memcached-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.memcached-mcp-server@latest""
      ],
      ""env"": {
        ""MEMCACHED_HOST"": ""127.0.0.1"",
        ""MEMCACHED_PORT"": ""11211"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""autoApprove"": [],
      ""disabled"": false
    },
    ""awslabs.git-repo-research-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.git-repo-research-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""GITHUB_TOKEN"": ""your-github-token""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.cloudformation"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.cfn-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring Terraform S3 Backend with DynamoDB Locking
DESCRIPTION: This snippet shows how to configure Terraform to store state remotely in an Amazon S3 bucket and use a DynamoDB table for state locking. This prevents concurrent modifications and reduces errors. Requires an existing S3 bucket and DynamoDB table.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_8

LANGUAGE: HCL
CODE:
```
terraform {
  backend ""s3"" {
    bucket         = ""myorg-terraform-states""
    key            = ""myapp/production/tfstate""
    region         = ""us-east-1""
    dynamodb_table = ""TerraformStateLocking""
  }
}
```

----------------------------------------

TITLE: Implementing Robust Error Handling in an MCP Python Tool
DESCRIPTION: This Python snippet illustrates comprehensive error handling within an mcp.tool function. It uses a try-except block to catch exceptions, logs errors with context, reports failures to the MCP context using ctx.error, and re-raises exceptions for upstream handling, ensuring graceful failure and informative feedback.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_26

LANGUAGE: Python
CODE:
```
@mcp.tool(name='generate_image')
async def mcp_generate_image(
    ctx: Context,
    prompt: str = Field(...),
    # ... other parameters
) -> McpImageGenerationResponse:
    """"""Generate an image using Amazon Nova Canvas with text prompt.""""""

    try:
        logger.info(f'Generating image with text prompt, quality: {quality}')
        response = await generate_image_with_text(
            # ... parameters
        )

        if response.status == 'success':
            return McpImageGenerationResponse(
                status='success',
                paths=[f'file://{path}' for path in response.paths],
            )
        else:
            logger.error(f'Image generation returned error status: {response.message}')
            await ctx.error(f'Failed to generate image: {response.message}')
            raise Exception(f'Failed to generate image: {response.message}')
    except Exception as e:
        logger.error(f'Error in mcp_generate_image: {str(e)}')
        await ctx.error(f'Error generating image: {str(e)}')
        raise
```

----------------------------------------

TITLE: Performing Reverse Geocoding in Python
DESCRIPTION: This Python function signature for `reverse_geocode` converts geographical coordinates (longitude and latitude) into a human-readable address. It takes `longitude` and `latitude` as float parameters. This tool is essential for applications that need to display addresses based on user-provided or device-detected coordinates, returning the address details in a dictionary.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_6

LANGUAGE: python
CODE:
```
reverse_geocode(longitude: float, latitude: float) -> dict
```

----------------------------------------

TITLE: Implementing Structured Logging with AWS Lambda Powertools (Python)
DESCRIPTION: This snippet demonstrates how to initialize and use the `aws_lambda_powertools.Logger` within an AWS Lambda function. It shows initializing the logger globally, using the `@logger.inject_lambda_lambda_context` decorator to automatically add request context, logging informational messages with extra business context, and using `logger.exception` to automatically capture exception details and stack traces.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/logging.md#_snippet_0

LANGUAGE: python
CODE:
```
from aws_lambda_powertools import Logger
from aws_lambda_powertools.utilities.typing import LambdaContext

# Initialize once as a global variable
logger = Logger(service=""payment-service"")

@logger.inject_lambda_context  # Automatically captures request_id, cold start, etc.
def lambda_handler(event, context: LambdaContext):
    try:
        # Log with structured context
        logger.info(""Processing request"", extra={""event_type"": event.get(""type"")})

        # Process request
        result = process_data(event)

        logger.info(""Request processed successfully"")
        return result
    except Exception:
        # Automatically captures exception details and stack trace
        logger.exception(""Error processing request"")
        raise
```

----------------------------------------

TITLE: Configure Terraform AWS Provider to Assume Role (HCL)
DESCRIPTION: This Terraform HCL configuration block for the AWS provider specifies that the provider should automatically assume a given IAM role using its ARN and a session name. This allows Terraform to use the temporary credentials provided by the assumed role without manual intervention.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_6

LANGUAGE: HCL
CODE:
```
provider ""aws"" {
assume_role {
role_arn     = ""arn:aws:iam::111122223333:role/terraform-execution""
session_name = ""terraform-session-example""
}
}
```

----------------------------------------

TITLE: Configuring Environment Variables in Python
DESCRIPTION: This snippet demonstrates how to retrieve configuration values from environment variables using Python's os.environ.get() method. It shows how to provide default values for optional settings, ensuring the application has fallback configurations if variables are not explicitly set.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_25

LANGUAGE: Python
CODE:
```
LOG_LEVEL = os.environ.get('FASTMCP_LOG_LEVEL', 'WARNING')
AWS_REGION = os.environ.get('AWS_REGION', 'us-east-1')
AWS_PROFILE = os.environ.get('AWS_PROFILE')
CUSTOM_SETTING = os.environ.get('CUSTOM_SETTING', 'default_value')
```

----------------------------------------

TITLE: Configuring AWS CLI Profile (Shell)
DESCRIPTION: Configures the AWS Command Line Interface (CLI) with a specific profile, prompting for access key ID, secret access key, default region, and output format. This is necessary for interacting with AWS services.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_0

LANGUAGE: shell
CODE:
```
aws configure --profile [your-profile]
AWS Access Key ID [None]: xxxxxx
AWS Secret Access Key [None]:yyyyyyyyyy
Default region name [None]: us-east-1
Default output format [None]: json
```

----------------------------------------

TITLE: Calculating Route Between Locations - Amazon Location Service (Python)
DESCRIPTION: This function calculates a route between a departure and a destination position using Amazon Location Service. It allows specifying the travel mode (e.g., 'Car', 'Walking') and optimization preference ('FastestRoute' or 'ShortestRoute'). It returns route geometry, distance, duration, and turn-by-turn directions.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_9

LANGUAGE: python
CODE:
```
calculate_route(
    departure_position: list,  # [longitude, latitude]
    destination_position: list,  # [longitude, latitude]
    travel_mode: str = 'Car',  # 'Car', 'Truck', 'Walking', or 'Bicycle'
    optimize_for: str = 'FastestRoute'  # 'FastestRoute' or 'ShortestRoute'
) -> dict
```

----------------------------------------

TITLE: Implementing Bedrock Agent Action with Lambda Powertools (Python)
DESCRIPTION: This snippet demonstrates how to define a Bedrock Agent action handler using AWS Lambda Powertools for Python. It shows the setup of the BedrockAgentResolver, definition of Pydantic models for type safety, creation of an API route (`/products`), and the main Lambda handler function. It requires the Lambda Powertools library to be available in a Lambda layer.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/bedrock.md#_snippet_0

LANGUAGE: python
CODE:
```
from typing import Dict, List, Optional
from aws_lambda_powertools import Logger
from aws_lambda_powertools.event_handler import BedrockAgentResolver
from aws_lambda_powertools.event_handler.openapi.params import Query
from pydantic import BaseModel, Field

# Initialize Powertools
logger = Logger(service=""agent-actions"")
app = BedrockAgentResolver()

# Define request/response models with type hints
class Product(BaseModel):
    product_id: str = Field(description=""Unique product identifier"")
    name: str = Field(description=""Product name"")
    price: float = Field(description=""Product price in USD"")

@app.get(""/products"", description=""List all products"")
def list_products(
    category: Optional[str] = Query(None, description=""Filter by category"")
) -> List[Product]:
    """"""Get a list of products, optionally filtered by category""""""
    logger.info(""Listing products"", extra={""category"": category})

    # Your business logic here
    products = get_products_from_database(category)

    return products

@logger.inject_lambda_context
def lambda_handler(event, context):
    """"""Main Lambda handler for Bedrock Agent actions""""""
    return app.resolve(event, context)
```

----------------------------------------

TITLE: Basic Reusable Module Structure - Terraform HCL
DESCRIPTION: This snippet shows the recommended basic directory structure for a reusable Terraform module. It includes standard HCL files and an 'examples' directory containing subdirectories for different usage examples of the module.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_10

LANGUAGE: Terraform Structure
CODE:
```
.
### data.tf
### examples
#   ### multi-az-new-vpc
#   #   ### data.tf
#   #   ### locals.tf
#   #   ### main.tf
#   #   ### outputs.tf
#   #   ### providers.tf
#   #   ### README.md
#   #   ### terraform.tfvars
#   #   ### variables.tf
#   #   ### versions.tf
#   #   ### vpc.tf
#   ### single-az-existing-vpc
#   #   ### data.tf
#   #   ### locals.tf
#   #   ### main.tf
#   #   ### outputs.tf
#   #   ### providers.tf
#   #   ### README.md
#   #   ### terraform.tfvars
#   #   ### variables.tf
#   #   ### versions.tf
### iam.tf
### locals.tf
### main.tf
### outputs.tf
### README.md
### variables.tf
### versions.tf
```

----------------------------------------

TITLE: Tracing Lambda Handler and Method with Powertools Python
DESCRIPTION: Demonstrates how to use the AWS Lambda Powertools Tracer decorators `@tracer.capture_lambda_handler` and `@tracer.capture_method` to automatically trace Lambda function invocations and internal function calls. It also shows how to add custom annotations and metadata for business context.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/tracing.md#_snippet_0

LANGUAGE: python
CODE:
```
from aws_lambda_powertools import Logger, Tracer
from aws_lambda_powertools.utilities.typing import LambdaContext

logger = Logger(service=""payment-service"")
tracer = Tracer(service=""payment-service"")

@tracer.capture_method
def process_payment(payment_id: str):
    # This function is automatically traced
    # Add business-relevant annotations
    tracer.put_annotation(key=""PaymentId"", value=payment_id)
    tracer.put_metadata(key=""PaymentMethod"", value=""credit_card"")

    # Your business logic here
    return {""status"": ""processed""}

@logger.inject_lambda_context
@tracer.capture_lambda_handler  # Automatically traces Lambda invocations
def lambda_handler(event, context: LambdaContext):
    payment_id = event.get(""payment_id"")
    logger.info(""Processing payment"", extra={""payment_id"": payment_id})

    result = process_payment(payment_id)
    return result
```

----------------------------------------

TITLE: Configuring Multi-Cloud Platform (MCP) Servers in JSON
DESCRIPTION: This JSON snippet defines the configuration for multiple Multi-Cloud Platform (MCP) servers. Each server entry specifies the `command` to execute, `args` (arguments) for the command, and `env` (environment variables) to be set for the server's process. Some servers require AWS credentials (`AWS_PROFILE`, `AWS_REGION`), while others configure logging (`FASTMCP_LOG_LEVEL`) or specific service parameters (e.g., `FUNCTION_PREFIX` for Lambda, `VALKEY_HOST` for Valkey). The `disabled` and `autoApprove` fields control server behavior.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_8

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.core-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.core-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.nova-canvas-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.nova-canvas-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.bedrock-kb-retrieval-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.bedrock-kb-retrieval-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.cost-analysis-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.cost-analysis-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.cdk-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.cdk-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.aws-documentation-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.aws-documentation-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.lambda-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.lambda-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FUNCTION_PREFIX"": ""your-function-prefix"",
        ""FUNCTION_LIST"": ""your-first-function, your-second-function"",
        ""FUNCTION_TAG_KEY"": ""your-tag-key"",
        ""FUNCTION_TAG_VALUE"": ""your-tag-value""
      }
    },
    ""awslabs.terraform-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.terraform-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.frontend-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.frontend-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.valkey-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.valkey-mcp-server@latest""],
      ""env"": {
        ""VALKEY_HOST"": ""127.0.0.1"",
        ""VALKEY_PORT"": ""6379"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""autoApprove"": [],
      ""disabled"": false
    },
    ""awslabs.aws-location-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.aws-location-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.memcached-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.memcached-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    }
  }
}
```

----------------------------------------

TITLE: Example of Constants Definition in Python consts.py
DESCRIPTION: Illustrates best practices for organizing constants in a dedicated `consts.py` file, including using UPPER_CASE for names, grouping related constants, and adding docstrings for clarity and valid values.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_8

LANGUAGE: Python
CODE:
```
""""""Constants for the MCP server.""""""

# Default configuration values
DEFAULT_WIDTH = 1024
DEFAULT_HEIGHT = 1024
DEFAULT_QUALITY = 'standard'
DEFAULT_CFG_SCALE = 6.5
DEFAULT_NUMBER_OF_IMAGES = 1

# Documentation content
PROMPT_INSTRUCTIONS = """"""
An effective prompt often includes short descriptions of:
1. The subject
2. The environment
3. (optional) The position or pose of the subject
4. (optional) Lighting description
5. (optional) Camera position/framing
6. (optional) The visual style or medium (""photo"", ""illustration"", ""painting"", etc.)
""""""

# API endpoints and configuration
API_ENDPOINT = ""https://api.example.com/v1""
API_TIMEOUT = 30  # seconds
```

----------------------------------------

TITLE: Defining Lambda Layer and Function with CDK (TypeScript)
DESCRIPTION: This TypeScript snippet demonstrates how to define a Lambda layer for AWS Powertools and a Python Lambda function using AWS CDK. It shows how to create a `PythonLayerVersion` pointing to a local directory containing dependencies and how to create a `PythonFunction` attaching the created layer and configuring Powertools environment variables and X-Ray tracing.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/cdk.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import * as path from ""path"";
import { PythonFunction } from ""@aws-cdk/aws-lambda-python-alpha"";
import { Runtime, Tracing } from ""aws-cdk-lib/aws-lambda"";
import { PythonLayerVersion } from ""@aws-cdk/aws-lambda-python-alpha"";

// Create Lambda layer for Powertools
const powertoolsLayer = new PythonLayerVersion(this, ""PowertoolsLayer"", {
  entry: path.join(__dirname, '../layers/powertools'),  // Directory with requirements.txt
  compatibleRuntimes: [Runtime.PYTHON_3_13],
  description: ""Lambda Powertools for Python"",
});

// Create Lambda function with Powertools
const myFunction = new PythonFunction(this, 'MyFunction', {
  entry: path.join(__dirname, '../src/my_function'),
  runtime: Runtime.PYTHON_3_13,
  layers: [powertoolsLayer],  // Attach the Powertools layer
  tracing: Tracing.ACTIVE,    // Enable X-Ray tracing
  environment: {
    POWERTOOLS_SERVICE_NAME: ""my-service"",
    POWERTOOLS_METRICS_NAMESPACE: ""MyService"",
    LOG_LEVEL: ""INFO""
  }
});
```

----------------------------------------

TITLE: Optional CDK Nag using CDK Context Parameters - TypeScript & Bash
DESCRIPTION: This snippet shows how to make CDK Nag application conditional based on a CDK context parameter (enableCdkNag). The accompanying bash command illustrates how to pass this context parameter when deploying the CDK application.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_NAG_GUIDANCE.md#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { AwsSolutionsChecks } from 'cdk-nag';
import { App } from 'aws-cdk-lib';

// Create your CDK app
const app = new App();

// Add your stacks
new MyStack(app, 'MyStack');

// Apply CDK Nag conditionally based on context parameter
if (app.node.tryGetContext('enableCdkNag') === 'true') {
  console.log('CDK Nag enabled - checking for security issues');
  AwsSolutionsChecks.check(app);
} else {
  console.log('CDK Nag disabled - skipping security checks');
}
```

LANGUAGE: Bash
CODE:
```
cdk deploy --context enableCdkNag=true
```

----------------------------------------

TITLE: Configuring AWS Authentication Environment Variables
DESCRIPTION: This JSON snippet illustrates the environment variables used by the MCP server for AWS authentication. `AWS_PROFILE` specifies the AWS credentials profile to use, while `AWS_REGION` sets the AWS region for service interactions. These variables ensure the server can securely access Amazon Bedrock and Nova Canvas services.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/nova-canvas-mcp-server/README.md#_snippet_4

LANGUAGE: json
CODE:
```
""env"": {
  ""AWS_PROFILE"": ""your-aws-profile"",
  ""AWS_REGION"": ""us-east-1""
}
```

----------------------------------------

TITLE: Managing AWS CDK Applications
DESCRIPTION: Essential CDK CLI commands for managing the application development lifecycle. `cdk synth` synthesizes the CloudFormation template, `cdk deploy` deploys the stack, and `cdk diff` compares the current state with the deployed stack.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_GENERAL_GUIDANCE.md#_snippet_1

LANGUAGE: bash
CODE:
```
cdk synth
```

LANGUAGE: bash
CODE:
```
cdk deploy
```

LANGUAGE: bash
CODE:
```
cdk diff
```

----------------------------------------

TITLE: Configuring Multiple AWS Providers with Aliases
DESCRIPTION: This Terraform configuration demonstrates how to set up multiple AWS provider blocks with aliases. The primary provider targets 'us-west-1', while the secondary provider targets 'us-east-1' and assumes a specific IAM role in a different account, enabling resource management across regions and accounts within a single Terraform configuration.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_0

LANGUAGE: Terraform
CODE:
```
# Configure the primary AWS Provider
provider ""aws"" {
  region = ""us-west-1""
  alias  = ""primary""
}

# Configure a secondary AWS Provider for the replica Region and account
provider ""aws"" {
  region      = ""us-east-1""
  alias       = ""replica""
  assume_role {
    role_arn     = ""arn:aws:iam::<replica-account-id>:role/<role-name>""
    session_name = ""terraform-session""
  }
}
```

----------------------------------------

TITLE: Executing Pandas Code Safely (Python)
DESCRIPTION: Illustrates how to execute arbitrary pandas code within the MCP server's restricted environment. It requires the pandas code string, a workspace directory for temporary files, and an output directory for results.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/syntheticdata-mcp-server/README.md#_snippet_3

LANGUAGE: python
CODE:
```
response = await server.execute_pandas_code(
    code=""your_pandas_code_here"",
    workspace_dir=""/path/to/workspace"",
    output_dir=""data""
)
```

----------------------------------------

TITLE: Initializing FastMCP Server with Embedded Instructions and Dependencies
DESCRIPTION: This Python snippet demonstrates the initialization of a FastMCP server, specifying its name, embedding detailed instructions for LLMs on available tools and prompt best practices, and listing required Python dependencies. This setup ensures the server is self-documenting and provides clear guidance for its consumers.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_28

LANGUAGE: Python
CODE:
```
mcp = FastMCP(
    'awslabs-nova-canvas-mcp-server',
    instructions=f""""""
# Amazon Nova Canvas Image Generation

This MCP server provides tools for generating images using Amazon Nova Canvas through Amazon Bedrock.

## Available Tools

### generate_image
Generate an image from a text prompt using Amazon Nova Canvas.

### generate_image_with_colors
Generate an image from a text prompt and color palette using Amazon Nova Canvas.

## Prompt Best Practices

{PROMPT_INSTRUCTIONS}
"""""",
    dependencies=[
        'pydantic',
        'boto3',
    ],
)
```

----------------------------------------

TITLE: Defining Image Generation Configuration with Pydantic in Python
DESCRIPTION: This snippet defines `Quality` as an Enum for image quality options and `ImageGenerationConfig` as a Pydantic BaseModel. It includes fields for image dimensions, quality, and generation settings, along with validators to ensure width/height are divisible by 16 and to enforce aspect ratio and total pixel count constraints. It requires `pydantic` and `enum`.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_9

LANGUAGE: python
CODE:
```
from enum import Enum
from pydantic import BaseModel, Field, field_validator, model_validator
from typing import Dict, List, Literal, Optional

class Quality(str, Enum):
    """"""Quality options for image generation.

    Attributes:
        STANDARD: Standard quality image generation.
        PREMIUM: Premium quality image generation with enhanced details.
    """"""

    STANDARD = 'standard'
    PREMIUM = 'premium'

class ImageGenerationConfig(BaseModel):
    """"""Configuration for image generation.

    This model defines the parameters that control the image generation process,
    including dimensions, quality, and generation settings.

    Attributes:
        width: Width of the generated image (320-4096, must be divisible by 16).
        height: Height of the generated image (320-4096, must be divisible by 16).
        quality: Quality level of the generated image (standard or premium).
        cfgScale: How strongly the image adheres to the prompt (1.1-10.0).
        seed: Seed for reproducible generation (0-858993459).
        numberOfImages: Number of images to generate (1-5).
    """"""

    width: int = Field(default=1024, ge=320, le=4096)
    height: int = Field(default=1024, ge=320, le=4096)
    quality: Quality = Quality.STANDARD
    cfgScale: float = Field(default=6.5, ge=1.1, le=10.0)
    seed: int = Field(default_factory=lambda: random.randint(0, 858993459), ge=0, le=858993459)
    numberOfImages: int = Field(default=1, ge=1, le=5)

    @field_validator('width', 'height')
    @classmethod
    def must_be_divisible_by_16(cls, v: int) -> int:
        """"""Validate that width and height are divisible by 16.""""""
        if v % 16 != 0:
            raise ValueError('Value must be divisible by 16')
        return v

    @model_validator(mode='after')
    def validate_aspect_ratio_and_total_pixels(self):
        """"""Validate aspect ratio and total pixel count.""""""
        width = self.width
        height = self.height

        # Check aspect ratio between 1:4 and 4:1
        aspect_ratio = width / height
        if aspect_ratio < 0.25 or aspect_ratio > 4.0:
            raise ValueError('Aspect ratio must be between 1:4 and 4:1')

        # Check total pixel count
        total_pixels = width * height
        if total_pixels >= 4194304:
            raise ValueError('Total pixel count must be less than 4,194,304')

        return self
```

----------------------------------------

TITLE: Retrieve EC2 Instance Metadata Security Credentials (Shell)
DESCRIPTION: This shell script uses `curl` to retrieve temporary security credentials from the EC2 instance metadata service. It first obtains a metadata token and then uses the token to query the `iam/security-credentials/` endpoint, which is used when an instance profile is attached to the EC2 instance.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_7

LANGUAGE: Shell
CODE:
```
TOKEN=$(curl -s -X PUT ""http://169.254.169.254/latest/api/token"" -H ""X-aws-ec2-
metadata-token-ttl-seconds: 21600"")
curl -H ""X-aws-ec2-metadata-token: $TOKEN"" -s http://169.254.169.254/latest/meta-data/
iam/security-credentials/
```

----------------------------------------

TITLE: Cleaning Up Deployed Resources with SAM CLI - Bash
DESCRIPTION: This command removes all resources deployed by the AWS SAM CLI for a specific stack. It requires the stack name as an argument to identify and delete the associated AWS resources, ensuring a clean removal of the application.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/examples/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
sam delete --stack-name <your-stack-name>
```

----------------------------------------

TITLE: Applying Resource-Level Nag Suppression in AWS CDK (TypeScript)
DESCRIPTION: This snippet demonstrates how to suppress a specific CDK Nag rule (AwsSolutions-IAM4) for an individual AWS IAM Role resource using NagSuppressions.addResourceSuppressions. It requires importing NagSuppressions and the resource type (Role).
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_NAG_GUIDANCE.md#_snippet_5

LANGUAGE: typescript
CODE:
```
// HUMAN DEVELOPER RESPONSIBILITY - DO NOT IMPLEMENT AUTOMATICALLY
// This code must only be added after careful security review
import { NagSuppressions } from 'cdk-nag';
import { Role, ServicePrincipal, ManagedPolicy } from 'aws-cdk-lib/aws-iam';

// Create a role with a managed policy
const role = new Role(this, 'MyRole', {
  assumedBy: new ServicePrincipal('lambda.amazonaws.com'),
});
role.addManagedPolicy(ManagedPolicy.fromAwsManagedPolicyName('AmazonS3ReadOnlyAccess'));

// Suppress the warning for this specific role
NagSuppressions.addResourceSuppressions(role, [
  {
    id: 'AwsSolutions-IAM4',
    reason: 'REQUIRES SPECIFIC HUMAN JUSTIFICATION',
  },
]);
```

----------------------------------------

TITLE: Specifying AWS Lambda Powertools Dependencies in requirements.txt
DESCRIPTION: Shows how to list AWS Lambda Powertools with specific extras (tracer, all) and version constraints in a requirements.txt file for dependency management systems like those used in CDK deployments.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/dependencies.md#_snippet_1

LANGUAGE: text
CODE:
```
# For specific features
aws-lambda-powertools[tracer]>=2.0.0

# OR for all features
aws-lambda-powertools[all]>=2.0.0
```

----------------------------------------

TITLE: Implementing Timeout Handler for Python Operations
DESCRIPTION: This function serves as a signal handler for implementing timeouts in Python. When triggered by a signal (e.g., SIGALRM), it raises a TimeoutError exception, effectively terminating a long-running operation and preventing resource exhaustion.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_20

LANGUAGE: python
CODE:
```
def timeout_handler(signum, frame):
    raise TimeoutError(f'Operation timed out after {timeout} seconds')
```

----------------------------------------

TITLE: Creating a Basic MCP Lambda Handler - Python
DESCRIPTION: This Python code demonstrates how to initialize an `MCPLambdaHandler` instance, define a simple MCP tool (`add_two_numbers`) using the `@mcp.tool()` decorator, and expose it via a standard AWS Lambda handler function. It illustrates the core setup for building an MCP endpoint.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mcp-lambda-handler/README.md#_snippet_1

LANGUAGE: python
CODE:
```
from awslabs.mcp_lambda_handler import MCPLambdaHandler

mcp = MCPLambdaHandler(name=""mcp-lambda-server"", version=""1.0.0"")

@mcp.tool()
def add_two_numbers(a: int, b: int) -> int:
    """"""Add two numbers together.""""""
    return a + b

def lambda_handler(event, context):
    """"""AWS Lambda handler function.""""""
    return mcp.handle_request(event, context)
```

----------------------------------------

TITLE: Defining a Document Processing Tool with Multiple AI Instructions in Python
DESCRIPTION: This example showcases an `mcp.tool` definition for `process_document`, demonstrating how to embed multiple AI instructions within parameter descriptions. It includes `output_format` with an 'IMPORTANT' instruction for AI to select based on user needs, and `workspace_dir` with a 'CRITICAL' instruction for providing the current IDE directory for output files. The `output_format` parameter uses `Literal` for type-safe enumeration of allowed formats.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_12

LANGUAGE: Python
CODE:
```
@mcp.tool(name='process_document')
async def process_document(
    ctx: Context,
    document_text: str = Field(
        ...,
        description='The text content of the document to process'
    ),
    output_format: Literal[""markdown"", ""html"", ""text""] = Field(
        ""markdown"",
        description='The desired output format. IMPORTANT: Assistant should select format based on user needs.'
    ),
    workspace_dir: Optional[str] = Field(
        default=None,
        description=""""""Directory where output files will be saved.
        CRITICAL: Assistant must always provide the current IDE workspace directory.""""""
    ),
) -> str:
    """"""Process a document and convert it to the specified format.""""""
    # ... implementation
```

----------------------------------------

TITLE: Configuring Pre-commit Hooks with Ruff (YAML)
DESCRIPTION: This YAML configuration defines pre-commit hooks to enforce code style and quality using `ruff` and `ruff-format`. It ensures that code is automatically fixed and checked before commits, preventing non-compliant code from being pushed into the repository.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_29

LANGUAGE: YAML
CODE:
```
repos:
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.0.291
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
      - id: ruff-format
```

----------------------------------------

TITLE: Defining Primary AWS RDS Instance (Terraform)
DESCRIPTION: This Terraform resource block defines the primary Amazon RDS database instance. It explicitly uses the AWS provider configured with the alias 'primary', which is typically associated with a specific AWS region and account. The configuration details for the RDS instance are represented by the placeholder '# ... RDS instance configuration'.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_1

LANGUAGE: HCL
CODE:
```
resource ""aws_db_instance"" ""primary"" {

provider = aws.primary

# ... RDS instance configuration

}
```

----------------------------------------

TITLE: Creating SSH Tunnel to ElastiCache Valkey via EC2
DESCRIPTION: This command establishes an SSH tunnel from your local host through an EC2 instance to your Amazon ElastiCache Valkey cache. It forwards a local port on your machine to the ElastiCache endpoint's remote port, enabling secure access to the cache from your local environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/ELASTICACHECONNECT.md#_snippet_1

LANGUAGE: Bash
CODE:
```
ssh -i YOUR_EC2_KEY EC2_USER@EC2_HOST -p EC2_TUNNEL_PORT -L LOCAL_PORT:ELASTICACHE_ENDPOINT:REMOTE_PORT -N -f
```

----------------------------------------

TITLE: Suppressing CDK Nag Violations at Stack Level - TypeScript
DESCRIPTION: ⚠️ CRITICAL: This code snippet demonstrates the syntax for suppressing a specific CDK Nag rule (AwsSolutions-IAM4) for an entire stack. This action requires careful human review, analysis, and detailed justification and should NEVER be automated by AI or clients.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_NAG_GUIDANCE.md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
// HUMAN DEVELOPER RESPONSIBILITY - DO NOT IMPLEMENT AUTOMATICALLY
// This code must only be added after careful security review
import { NagSuppressions } from 'cdk-nag';
import { Stack } from 'aws-cdk-lib';

// Create your stack
const stack = new MyStack(app, 'MyStack');

// Suppress a rule for the entire stack
NagSuppressions.addStackSuppressions(stack, [
  {
    id: 'AwsSolutions-IAM4',
    reason: 'REQUIRES SPECIFIC HUMAN JUSTIFICATION',
  },
]);

```

----------------------------------------

TITLE: IAM Write Operations Policy for EKS MCP Server
DESCRIPTION: This JSON policy grants write permissions necessary for the Amazon EKS MCP server to manage resources. It allows actions like creating, updating, and deleting CloudFormation stacks, and putting IAM role policies. A condition is included to restrict these actions to resources tagged with `CreatedBy: EksMcpServer`, ensuring that the server only modifies resources it created.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/eks-mcp-server/README.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""Version"": ""2012-10-17"",
  ""Statement"": [
    {
      ""Effect"": ""Allow"",
      ""Action"": [
        ""cloudformation:CreateStack"",
        ""cloudformation:UpdateStack"",
        ""cloudformation:DeleteStack"",
        ""iam:PutRolePolicy""
      ],
      ""Resource"": ""*"",
      ""Condition"": {
        ""StringEquals"": {
          ""aws:RequestTag/CreatedBy"": ""EksMcpServer""
        }
      }
    }
  ]
}
```

----------------------------------------

TITLE: Activating Virtual Environment (Bash)
DESCRIPTION: Activates the Python virtual environment created by `uv sync`. This ensures that subsequent Python commands use the installed dependencies within this isolated environment, preventing conflicts with system-wide packages.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Checking for Dangerous Functions in Python Code
DESCRIPTION: This function identifies the presence of known dangerous Python functions or patterns (e.g., exec, eval, os.system) within a given code string. It iterates through lines of code and a predefined list of patterns, returning a list of dictionaries indicating the detected function, line number, and the relevant code snippet.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_18

LANGUAGE: python
CODE:
```
def check_dangerous_functions(code: str) -> List[Dict[str, Any]]:
    """"""Check for dangerous functions like exec, eval, etc.""""""
    dangerous_patterns = [
        'exec(',
        'eval(',
        'subprocess.',
        'os.system',
        'os.popen',
        '__import__',
        'pickle.loads',
    ]

    results = []
    lines = code.splitlines()

    for i, line in enumerate(lines):
        for pattern in dangerous_patterns:
            if pattern in line:
                results.append(
                    {
                        'function': pattern.rstrip('('),
                        'line': i + 1,
                        'code': line.strip(),
                    }
                )

    return results
```

----------------------------------------

TITLE: Assume IAM Role using AWS CLI
DESCRIPTION: This AWS CLI command uses the `sts assume-role` action to obtain temporary security credentials for a specified IAM role ARN. It requires the role ARN and a session name to identify the session.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_4

LANGUAGE: AWS CLI
CODE:
```
aws sts assume-role --role-arn arn:aws:iam::111122223333:role/terraform-execution --
role-session-name terraform-session-example
```

----------------------------------------

TITLE: Configuring Structured Logging with Loguru in Python
DESCRIPTION: This snippet demonstrates how to configure structured logging using the Loguru library in Python. It removes the default handler, adds a custom handler directing logs to `sys.stderr`, and sets the log level based on the `FASTMCP_LOG_LEVEL` environment variable, providing examples for different log severities.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_23

LANGUAGE: python
CODE:
```
import sys
from loguru import logger

# Remove default handler and add custom configuration
logger.remove()
logger.add(sys.stderr, level=os.getenv('FASTMCP_LOG_LEVEL', 'WARNING'))

# Usage examples
logger.debug(""Detailed information, typically of interest only when diagnosing problems"")
logger.info(""Confirmation that things are working as expected"")
logger.warning(""Indication that something unexpected happened, but the application still works"")
logger.error(""The application has failed to perform some function"")
logger.critical(""A serious error, indicating that the program itself may be unable to continue running"")
```

----------------------------------------

TITLE: Applying Path-Based Nag Suppression in AWS CDK (TypeScript)
DESCRIPTION: This snippet shows how to suppress a CDK Nag rule (AwsSolutions-IAM5) for a construct and all its child resources by specifying the construct's path using NagSuppressions.addResourceSuppressionsByPath. It requires importing NagSuppressions and Construct.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_NAG_GUIDANCE.md#_snippet_6

LANGUAGE: typescript
CODE:
```
// HUMAN DEVELOPER RESPONSIBILITY - DO NOT IMPLEMENT AUTOMATICALLY
// This code must only be added after careful security review
import { NagSuppressions } from 'cdk-nag';
import { Construct } from 'constructs';

// Create a construct
const myConstruct = new MyConstruct(this, 'MyConstruct');

// Suppress a rule for the construct and all its children
NagSuppressions.addResourceSuppressionsByPath(
  stack,
  '/MyStack/MyConstruct',
  [
    {
      id: 'AwsSolutions-IAM5',
      reason: 'REQUIRES SPECIFIC HUMAN JUSTIFICATION',
    },
  ]
);
```

----------------------------------------

TITLE: Fixing Missing NetworkConfiguration in AWS ECS Service (YAML)
DESCRIPTION: This YAML snippet provides a sample CloudFormation configuration to correct an AWS ECS Service that failed due to a missing NetworkConfiguration. It demonstrates how to properly define the AwsvpcConfiguration for Fargate launch types, including public IP assignment, subnets, and security groups. Users should replace the placeholder subnet and security group IDs with their actual resource IDs.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/01_cloudformation_failure/04_evaluation.md#_snippet_0

LANGUAGE: YAML
CODE:
```
# Example fix for the NetworkConfiguration issue:
ECSService:
  Type: AWS::ECS::Service
  Properties:
    ServiceName: test-failure-stack-service
    Cluster: !Ref ECSCluster
    TaskDefinition: !Ref TaskDefinition
    DesiredCount: 1
    LaunchType: FARGATE
    NetworkConfiguration:
      AwsvpcConfiguration:
        AssignPublicIp: ENABLED
        Subnets:
          - subnet-12345678  # Replace with actual subnet IDs
        SecurityGroups:
          - sg-12345678      # Replace with actual security group ID
```

----------------------------------------

TITLE: Identifying VPC-Compatible Resources in AWS ECS Bash Scripts
DESCRIPTION: This bash script snippet demonstrates how to programmatically identify the default VPC, and then retrieve a compatible subnet and security group ID from that specific VPC. This ensures that resources used for ECS task network configuration belong to the same VPC, preventing InvalidParameterException errors related to VPC/security group mismatches.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/SCRIPT_IMPROVEMENTS.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Get default VPC
VPC_ID=$(aws ec2 describe-vpcs --filters ""Name=isDefault,Values=true"" --query ""Vpcs[0].VpcId"" --output text)

# Get a subnet from this VPC
SUBNET_ID=$(aws ec2 describe-subnets --filters ""Name=vpc-id,Values=$VPC_ID"" --query ""Subnets[0].SubnetId"" --output text)

# Get a security group from this VPC
SG_ID=$(aws ec2 describe-security-groups --filters ""Name=vpc-id,Values=$VPC_ID"" --query ""SecurityGroups[0].GroupId"" --output text)
```

----------------------------------------

TITLE: Configuring SSL/TLS for Memcached Connection (Bash)
DESCRIPTION: This Bash snippet provides environment variables for enabling and configuring SSL/TLS encryption for the Memcached connection. It includes `MEMCACHED_USE_TLS`, `MEMCACHED_TLS_CERT_PATH`, `MEMCACHED_TLS_KEY_PATH`, `MEMCACHED_TLS_CA_CERT_PATH`, and `MEMCACHED_TLS_VERIFY` to manage encryption, client certificates, and CA verification.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
# SSL/TLS settings
MEMCACHED_USE_TLS=true                           # Enable SSL/TLS
MEMCACHED_TLS_CERT_PATH=/path/to/client-cert.pem # Client certificate
MEMCACHED_TLS_KEY_PATH=/path/to/client-key.pem   # Client private key
MEMCACHED_TLS_CA_CERT_PATH=/path/to/ca-cert.pem  # CA certificate
MEMCACHED_TLS_VERIFY=true                        # Enable cert verification
```

----------------------------------------

TITLE: Define Dependencies in pyproject.toml
DESCRIPTION: Example snippet showing where dependencies are defined within the pyproject.toml configuration file for the server.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_8

LANGUAGE: TOML
CODE:
```
dependencies =[]
```

----------------------------------------

TITLE: Create Python Lambda with Insights, Powertools, X-Ray (CDK TypeScript)
DESCRIPTION: This AWS CDK TypeScript snippet demonstrates how to define a Python Lambda function resource. It shows how to attach a Lambda Powertools layer, enable AWS Lambda Insights using `insightsVersion`, configure AWS X-Ray tracing, and set environment variables required by Powertools.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/insights.md#_snippet_0

LANGUAGE: typescript
CODE:
```
import { LambdaInsightsVersion } from 'aws-cdk-lib/aws-lambda';
import { PythonFunction } from '@aws-cdk/aws-lambda-python-alpha';
import { Runtime, Tracing } from 'aws-cdk-lib/aws-lambda';
import { PythonLayerVersion } from '@aws-cdk/aws-lambda-python-alpha';
import * as path from 'path';

// Create Lambda function with both Lambda Insights and Powertools
const myFunction = new PythonFunction(this, 'MyFunction', {
  entry: path.join(__dirname, '../src/my_function'),
  runtime: Runtime.PYTHON_3_13,

  // Attach Lambda layer (see lambda-powertools://cdk)
  layers: [powertoolsLayer],

  // Enable Lambda Insights
  insightsVersion: LambdaInsightsVersion.VERSION_1_0_119_0,

  // Enable X-Ray tracing
  tracing: Tracing.ACTIVE,

  // Configure Powertools environment variables
  environment: {
    POWERTOOLS_SERVICE_NAME: ""my-service"",
    POWERTOOLS_METRICS_NAMESPACE: ""MyService"",
    LOG_LEVEL: ""INFO"",
  },
});
```

----------------------------------------

TITLE: Committing Changes with Conventional Commit Message (Shell)
DESCRIPTION: Demonstrates how to commit changes to a Git repository using a conventional commit message format. This is recommended for clarity and automation.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_10

LANGUAGE: Shell
CODE:
```
git commit -m 'chore(doc): update main README.md'
```

----------------------------------------

TITLE: Implementing Main Entry Point for MCP Server (Python)
DESCRIPTION: This Python snippet demonstrates the recommended `main()` function implementation within `server.py` for an MCP server. It serves as the single entry point, handling command-line arguments, environment setup, and initialization of the MCP server, ensuring a consistent application startup.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_1

LANGUAGE: Python
CODE:
```
def main():
    """"""Run the MCP server with CLI argument support.""""""
    mcp.run()


if __name__ == '__main__':
    main()
```

----------------------------------------

TITLE: Opening EC2 Instance Connect Tunnel (AWS CLI)
DESCRIPTION: This command initiates a secure tunnel from your local machine to a specified EC2 instance using AWS EC2 Instance Connect. It forwards local port 11211 to the EC2 instance, serving as the initial step for accessing private resources like ElastiCache.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/ELASTICACHECONNECT.md#_snippet_0

LANGUAGE: Bash
CODE:
```
aws ec2-instance-connect open-tunnel --instance-id ec2-instance-ID --local-port 11211
```

----------------------------------------

TITLE: Defining an Image Generation Tool with Workspace Directory in Python
DESCRIPTION: This snippet defines an asynchronous tool, `mcp_generate_image`, using the `@mcp.tool` decorator. It includes a `workspace_dir` parameter, marked as 'CRITICAL' in its description, instructing AI models to always provide the current IDE workspace directory for saving generated images. This ensures files are saved to the user's active project.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_11

LANGUAGE: Python
CODE:
```
@mcp.tool(name='generate_image')
async def mcp_generate_image(
    ctx: Context,
    prompt: str = Field(...),
    # ... other parameters
    workspace_dir: Optional[str] = Field(
        default=None,
        description=""""""The current workspace directory where the image should be saved.
        CRITICAL: Assistant must always provide the current IDE workspace directory parameter to save images to the user's current project."""""",
    ),
) -> McpImageGenerationResponse:
    """"""Generate an image using Amazon Nova Canvas with text prompt.""""""
    # ... implementation
```

----------------------------------------

TITLE: Setting Up Controlled Python Execution Environment
DESCRIPTION: This snippet illustrates how to create a secure and isolated execution environment for user-provided Python code. It sets up a dedicated namespace, explicitly imports only allowed modules, and implements a signal-based timeout mechanism to prevent long-running operations, ensuring resource control during code execution.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_19

LANGUAGE: python
CODE:
```
# Create a namespace for execution
namespace = {}

# Import necessary modules directly in the namespace
exec('import os', namespace)
exec('import diagrams', namespace)
exec('from diagrams import Diagram, Cluster, Edge', namespace)
# [Additional imports specific to the allowed functionality]

# Set up a timeout handler
def timeout_handler(signum, frame):
    raise TimeoutError(f'Diagram generation timed out after {timeout} seconds')

# Register the timeout handler
signal.signal(signal.SIGALRM, timeout_handler)
signal.alarm(timeout)

# Execute the code in the controlled namespace
exec(code, namespace)

# Cancel the alarm
signal.alarm(0)
```

----------------------------------------

TITLE: Collecting Metrics in Python Lambda Function
DESCRIPTION: This snippet demonstrates how to initialize and use AWS Lambda Powertools Logger, Tracer, and Metrics within a Python Lambda function. It shows how to add custom metrics with specific units and dimensions, and how to use the `@metrics.log_metrics` decorator for automatic emission.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/metrics.md#_snippet_0

LANGUAGE: python
CODE:
```
from aws_lambda_powertools import Logger, Metrics, Tracer
from aws_lambda_powertools.metrics import MetricUnit
from aws_lambda_powertools.utilities.typing import LambdaContext

logger = Logger(service=""payment-service"")
tracer = Tracer(service=""payment-service"")
metrics = Metrics(namespace=""PaymentService"", service=""payment-service"")

@metrics.log_metrics  # Automatically emits metrics at the end of the function
def lambda_handler(event, context: LambdaContext):
    payment_id = event.get(""payment_id"")
    amount = event.get(""amount"", 0)

    try:
        # Record business metrics
        metrics.add_metric(name=""PaymentProcessed"", unit=MetricUnit.Count, value=1)
        metrics.add_metric(name=""PaymentAmount"", unit=MetricUnit.Dollars, value=amount)

        # Add dimensions for filtering
        metrics.add_dimension(name=""PaymentMethod"", value=""credit_card"")

        # Your business logic here
        result = process_payment(payment_id, amount)

        # Record successful outcome
        metrics.add_metric(name=""SuccessfulPayment"", unit=MetricUnit.Count, value=1)

        return result
    except Exception:
        # Record failed outcome
        metrics.add_metric(name=""FailedPayment"", unit=MetricUnit.Count, value=1)
        logger.exception(""Payment processing failed"")
        raise
```

----------------------------------------

TITLE: Applying the AwsSolutions Rule Pack - TypeScript
DESCRIPTION: This is the standard way to apply the default AwsSolutions rule pack provided by CDK Nag to your entire CDK application. This rule pack contains checks based on AWS Solutions best practices and the AWS Well-Architected Framework.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_NAG_GUIDANCE.md#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { AwsSolutionsChecks } from 'cdk-nag';
import { App } from 'aws-cdk-lib';

// Create your CDK app
const app = new App();

// Add your stacks
new MyStack(app, 'MyStack');

// Apply AwsSolutions checks
AwsSolutionsChecks.check(app);

```

----------------------------------------

TITLE: Defining MCP Tool Function Parameters with Pydantic Field in Python
DESCRIPTION: This snippet demonstrates how to define an asynchronous MCP tool function, `query_knowledge_bases_tool`, using Pydantic's `Field` for detailed parameter descriptions and validation. It specifies required parameters using `...`, provides default values for optional ones, and uses `Literal` for fixed-value options, enhancing clarity for AI models consuming the tool. It requires `mcp.tool` and `pydantic.Field`.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_10

LANGUAGE: python
CODE:
```
@mcp.tool(name='QueryKnowledgeBases')
async def query_knowledge_bases_tool(
    query: str = Field(
        ..., description='A natural language query to search the knowledge base with'
    ),
    knowledge_base_id: str = Field(
        ...,
        description='The knowledge base ID to query. It must be a valid ID from the resource://knowledgebases MCP resource',
    ),
    number_of_results: int = Field(
        10,
        description='The number of results to return. Use smaller values for focused results and larger values for broader coverage.',
    ),
    reranking: bool = Field(
        True,
        description='Whether to rerank the results. Useful for improving relevance and sorting.',
    ),
    reranking_model_name: Literal['COHERE', 'AMAZON'] = Field(
        'AMAZON',
        description=""The name of the reranking model to use. Options: 'COHERE', 'AMAZON'"",
    ),
    data_source_ids: Optional[List[str]] = Field(
        None,
        description='The data source IDs to filter the knowledge base by. It must be a list of valid data source IDs from the resource://knowledgebases MCP resource',
    ),
) -> str:
    """"""Query an Amazon Bedrock Knowledge Base using natural language.

    ## Usage Requirements
    - You MUST first use the `resource://knowledgebases` resource to get valid knowledge base IDs
    - You can query different knowledge bases or make multiple queries to the same knowledge base

    [Detailed function documentation...]
    """"""
```

----------------------------------------

TITLE: Creating SSH Tunnel to ElastiCache (Bash)
DESCRIPTION: This SSH command establishes a persistent tunnel from your local host to the ElastiCache Memcached cache, routing through an EC2 instance. It forwards a local port to the ElastiCache endpoint's port on the remote side, enabling direct access to the cache from your local machine.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/ELASTICACHECONNECT.md#_snippet_1

LANGUAGE: Bash
CODE:
```
ssh -i YOUR_EC2_KEY EC2_USER@EC2_HOST -p EC2_TUNNEL_PORT -L LOCAL_PORT:ELASTICACHE_ENDPOINT:REMOTE_PORT -N -f
```

----------------------------------------

TITLE: Installing Pre-commit Hooks (Shell)
DESCRIPTION: Installs the pre-commit hooks configured for the repository. These hooks run automatically before each commit to enforce code quality, style, and security checks, providing fast feedback during development.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_3

LANGUAGE: shell
CODE:
```
pre-commit install
```

----------------------------------------

TITLE: Example Docker Environment Variables for AWS Credentials
DESCRIPTION: This fictitious `.env` file demonstrates how temporary AWS credentials (access key, secret key, and session token) can be provided to a Docker container. These credentials are used by the MCP server running inside the container to authenticate with AWS services like Amazon Bedrock and Nova Canvas.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/nova-canvas-mcp-server/README.md#_snippet_1

LANGUAGE: text
CODE:
```
# fictitious `.env` file with AWS temporary credentials
AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk
```

----------------------------------------

TITLE: Referencing Module from Generic Git VCS (HTTPS) - HCL
DESCRIPTION: Shows how to source a module from a generic Git repository accessible via HTTPS. It uses the `git::https://` prefix and the `ref` argument to specify a release tag (`v1.1.0`).
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_19

LANGUAGE: HCL
CODE:
```
module ""eks_karpenter"" {
  source = ""git::https://example.com/terraform-aws-eks.git?ref=v1.1.0""
  ...
  enable_karpenter = true
}
```

----------------------------------------

TITLE: Configuring Amazon Bedrock Knowledge Base Retrieval MCP Server (JSON)
DESCRIPTION: This JSON configuration snippet demonstrates how to integrate the `awslabs.bedrock-kb-retrieval-mcp-server` into an MCP client, such as Amazon Q Developer CLI. It defines the command and arguments for execution, sets environment variables like AWS profile, region, logging level, and optional knowledge base filtering tags, and controls the global reranking behavior. This setup allows the MCP client to discover and interact with the Bedrock Knowledge Base server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.bedrock-kb-retrieval-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.bedrock-kb-retrieval-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-profile-name"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""KB_INCLUSION_TAG_KEY"": ""optional-tag-key-to-filter-kbs"",
        ""BEDROCK_KB_RERANKING_ENABLED"": ""false""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server for Docker Deployment
DESCRIPTION: This JSON configuration snippet shows how to integrate the Amazon Nova Canvas MCP server when running it via Docker. It defines the Docker command, arguments for running the container (including environment variables and an env-file), and specifies the Docker image to use. This setup enables the MCP server to operate within a Dockerized environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/nova-canvas-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.nova-canvas-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""AWS_REGION=us-east-1"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/nova-canvas-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Installing AWS Lambda Powertools with pip
DESCRIPTION: This snippet shows how to install the AWS Lambda Powertools library using pip. It provides examples for installing all features or specific features like tracer or validation.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/index.md#_snippet_0

LANGUAGE: bash
CODE:
```
# For all features
pip install ""aws-lambda-powertools[all]""

# For specific features
pip install ""aws-lambda-powertools[tracer]""  # For tracing only
pip install ""aws-lambda-powertools[validation]""  # For validation only
```

----------------------------------------

TITLE: Running All Tests Directly with Pytest - Bash
DESCRIPTION: This command runs all tests within the `tests/` directory directly using `pytest`. The `-xvs` flags provide detailed output: `-x` stops on first failure, `-v` enables verbose output, and `-s` prevents capturing of stdout/stderr, allowing print statements to show.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/tests/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pytest -xvs tests/
```

----------------------------------------

TITLE: Generating Basic Test Coverage Report - Bash
DESCRIPTION: This command generates a basic test coverage report for the `awslabs.lambda_tool_mcp_server` module by running tests in the `tests/` directory. It uses the `pytest-cov` plugin to measure code coverage.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/tests/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.lambda_tool_mcp_server tests/
```

----------------------------------------

TITLE: Deploying Bedrock Agent and Actions with CDK (TypeScript)
DESCRIPTION: This CDK snippet shows how to deploy the necessary AWS resources for the Bedrock Agent integration. It defines a Python Lambda layer for Lambda Powertools, creates a Python Lambda function for the agent actions (attaching the layer), and sets up a Bedrock Agent with an action group linked to the Lambda function and an OpenAPI schema asset.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/bedrock.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { bedrock } from '@cdklabs/generative-ai-cdk-constructs';
import { PythonFunction } from '@aws-cdk/aws-lambda-python-alpha';
import { Runtime, Tracing } from 'aws-cdk-lib/aws-lambda';
import { PythonLayerVersion } from '@aws-cdk/aws-lambda-python-alpha';
import * as path from 'path';

// Create Lambda layer for Powertools
const powertoolsLayer = new PythonLayerVersion(this, ""PowertoolsLayer"", {
  entry: path.join(__dirname, '../layers/powertools'),
  compatibleRuntimes: [Runtime.PYTHON_3_13],
  description: ""Lambda Powertools for Python""
});

// Create Lambda function for Bedrock Agent actions
const actionFunction = new PythonFunction(this, 'AgentActionFunction', {
  entry: path.join(__dirname, '../src/agent_actions'),
  runtime: Runtime.PYTHON_3_13,
  tracing: Tracing.ACTIVE,
  layers: [powertoolsLayer],  // Attach the Powertools layer
  environment: {
    POWERTOOLS_SERVICE_NAME: ""agent-actions"",
    LOG_LEVEL: ""INFO""
  }
});

// Create a Bedrock Agent with action group
const agent = new bedrock.Agent(this, 'Agent', {
  name: 'PowertoolsAgent',
  foundationModel: bedrock.BedrockFoundationModel.ANTHROPIC_CLAUDE_3_5_HAIKU_V1_0,
  instruction: 'You are a helpful assistant that can perform product-related actions.'
});

agent.addActionGroup(
  new bedrock.AgentActionGroup({
    name: 'product-actions',
    description: 'Actions for managing products',
    executor: bedrock.ActionGroupExecutor.fromlambdaFunction(actionFunction),
    apiSchema: bedrock.ApiSchema.fromAsset(
      path.join(__dirname, '../schema/product_actions.json')
    )
  })
);
```

----------------------------------------

TITLE: Configuring AWS Serverless MCP Server with Temporary Credentials (JSON)
DESCRIPTION: This JSON configuration snippet demonstrates how to configure the AWS Serverless MCP Server using temporary AWS credentials. It includes environment variables for `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_SESSION_TOKEN`, along with the `AWS_REGION`. This setup is ideal for scenarios requiring short-lived credentials for enhanced security or specific access patterns.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/README.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-serverless-mcp-server"": {
        ""command"": ""uvx"",
        ""args"": [""awslabs.aws-serverless-mcp-server@latest""],
        ""env"": {
          ""AWS_ACCESS_KEY_ID"": ""your-temporary-access-key"",
          ""AWS_SECRET_ACCESS_KEY"": ""your-temporary-secret-key"",
          ""AWS_SESSION_TOKEN"": ""your-session-token"",
          ""AWS_REGION"": ""us-east-1""
        },
        ""disabled"": false,
        ""autoApprove"": [],
        ""timeout"": 60
    }
  }
}
```

----------------------------------------

TITLE: Configuring Finch MCP Server: Default Read-only Mode (JSON)
DESCRIPTION: This JSON configuration snippet sets up the Finch MCP server in a default, read-only mode for AWS resources. It specifies the command to run the server (`uvx awslabs.finch-mcp-server@latest`), environment variables for AWS profile and region, and sets the log level. In this mode, `finch_build_container_image` works, but `finch_create_ecr_repo` and `finch_push_image` will return errors and not modify AWS resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/finch-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.finch-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.finch-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""default"",
        ""AWS_REGION"": ""us-west-2"",
        ""FASTMCP_LOG_LEVEL"": ""INFO""
      },
      ""transportType"": ""stdio"",
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Implementing Operation Timeouts with Signal in Python
DESCRIPTION: This snippet demonstrates how to implement operation timeouts in Python using `signal.SIGALRM`. It registers a `timeout_handler` for the alarm signal, sets an alarm for a specified duration, and cancels it upon successful completion of the operation. If a `TimeoutError` occurs, it returns an `ErrorResponse`.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_21

LANGUAGE: python
CODE:
```
# Register the timeout handler
signal.signal(signal.SIGALRM, timeout_handler)
signal.alarm(timeout)

try:
    # Long-running operation
    result = operation()

    # Cancel the alarm
    signal.alarm(0)
    return result
except TimeoutError as e:
    return ErrorResponse(status='error', message=str(e))
```

----------------------------------------

TITLE: Knowledge Base Cost Calculation Example
DESCRIPTION: Illustrates how to calculate the cost for a Bedrock Knowledge Base, primarily based on OpenSearch Serverless OCU-hours, showing the unit price, usage calculation, and total cost.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cost-analysis-mcp-server/awslabs/cost_analysis_mcp_server/static/patterns/BEDROCK.md#_snippet_1

LANGUAGE: Calculation Example
CODE:
```
Unit Price: $0.20 per OCU-hour (OpenSearch Serverless)
Usage: 2 OCUs (minimum) × 24 hours × 30 days = 1,440 OCU-hours
Calculation: $0.20 × 1,440 OCU-hours = $288.00
```

----------------------------------------

TITLE: Agent Cost Calculation Example
DESCRIPTION: Explains that Agent pricing is primarily based on the underlying foundation model usage (tokens) and mentions potential additional costs like Lambda invocations for action groups.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cost-analysis-mcp-server/awslabs/cost_analysis_mcp_server/static/patterns/BEDROCK.md#_snippet_2

LANGUAGE: Calculation Example
CODE:
```
Pricing: Based on foundation model usage (input/output tokens)
Usage: Agent with 10,000 requests using Claude 3.5 Haiku
Calculation: Foundation model costs based on tokens processed
Additional costs: Lambda invocations for action groups (if used)
Note: Refer to AWS documentation for the most current pricing details
```

----------------------------------------

TITLE: Configuring Required IAM Permissions for AWS MCP Server
DESCRIPTION: This JSON policy defines the minimum IAM permissions required for the AWS Infrastructure as Code MCP Server to operate. It grants 'cloudcontrol' actions for resource management (List, Get, Create, Delete, Update) and 'cloudformation' actions for generated templates (Create, Describe, Get) across all resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cfn-mcp-server/README.md#_snippet_4

LANGUAGE: json
CODE:
```
{
    ""Version"": ""2012-10-17"",
    ""Statement"": [
        {
            ""Effect"": ""Allow"",
            ""Action"": [
                ""cloudcontrol:ListResources"",
                ""cloudcontrol:GetResource"",
                ""cloudcontrol:CreateResource"",
                ""cloudcontrol:DeleteResource"",
                ""cloudcontrol:UpdateResource"",
                ""cloudformation:CreateGeneratedTemplate"",
                ""cloudformation:DescribeGeneratedTemplate"",
                ""cloudformation:GetGeneratedTemplate""
            ],
            ""Resource"": ""*""
        }
    ]
}
```

----------------------------------------

TITLE: Performing Concurrent Operations with asyncio.gather (Python)
DESCRIPTION: This example illustrates how to use asyncio.gather within an MCP tool to execute multiple asynchronous operations concurrently. It demonstrates handling potential exceptions from concurrent tasks and processing the results before returning a JSON-serialized string.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_15

LANGUAGE: python
CODE:
```
import asyncio

@mcp.tool(name='parallel_operations')
async def perform_parallel_operations(ctx: Context, query: str = Field(...)) -> str:
    """"""Performs multiple operations concurrently.""""""

    # Execute operations concurrently
    results = await asyncio.gather(
        operation1(query),
        operation2(query),
        operation3(query),
        return_exceptions=True
    )

    # Process results
    valid_results = [r for r in results if not isinstance(r, Exception)]

    return json.dumps(valid_results)
```

----------------------------------------

TITLE: Scanning Python Code for Security Issues
DESCRIPTION: This asynchronous function scans Python code for security vulnerabilities and syntax errors. It leverages AST for syntax validation, integrates with security tools like Bandit, and performs custom checks for dangerous functions (e.g., exec, eval). It returns a CodeScanResult object detailing any issues found, including severity, confidence, and line numbers.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_17

LANGUAGE: python
CODE:
```
async def scan_python_code(code: str) -> CodeScanResult:
    """"""Use ast and bandit to scan the python code for security issues.""""""
    # Get code metrics
    metrics = await count_code_metrics(code)

    # Check syntax
    syntax_valid, syntax_error = await validate_syntax(code)
    if not syntax_valid:
        return CodeScanResult(
            has_errors=True, syntax_valid=False, error_message=syntax_error, metrics=metrics
        )

    # Check security
    security_issues = await check_security(code)

    # Check for dangerous functions explicitly
    dangerous_functions = check_dangerous_functions(code)
    if dangerous_functions:
        for func in dangerous_functions:
            security_issues.append(
                SecurityIssue(
                    severity='HIGH',
                    confidence='HIGH',
                    line=func['line'],
                    issue_text=f""Dangerous function '{func['function']}' detected"",
                    issue_type='DangerousFunctionDetection',
                )
            )

    # Determine if there are errors
    has_errors = bool(security_issues)

    # Generate error message if needed
    error_message = None
    if has_errors:
        messages = [f'{issue.issue_type}: {issue.issue_text}' for issue in security_issues]
        error_message = '\n'.join(messages) if messages else None

    return CodeScanResult(
        has_errors=has_errors,
        syntax_valid=True,
        security_issues=security_issues,
        error_message=error_message,
        metrics=metrics,
    )
```

----------------------------------------

TITLE: Configuring MCP Server with Temporary AWS Credentials in JSON
DESCRIPTION: This JSON configuration demonstrates how to configure the MCP server using temporary AWS credentials (access key ID, secret access key, and session token). It's ideal for environments utilizing AWS STS, IAM roles, or federation, ensuring secure, short-lived access to Amazon Location Service. The `AWS_REGION` and `FASTMCP_LOG_LEVEL` are also specified.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-location-mcp-server"": {
        ""command"": ""uvx"",
        ""args"": [""awslabs.aws-location-mcp-server@latest""],
        ""env"": {
          ""AWS_ACCESS_KEY_ID"": ""your-temporary-access-key"",
          ""AWS_SECRET_ACCESS_KEY"": ""your-temporary-secret-key"",
          ""AWS_SESSION_TOKEN"": ""your-session-token"",
          ""AWS_REGION"": ""us-east-1"",
          ""FASTMCP_LOG_LEVEL"": ""ERROR""
        },
        ""disabled"": false,
        ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Example AWS Temporary Credentials in .env File
DESCRIPTION: This snippet shows a fictitious .env file containing temporary AWS credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN). These credentials are used by the MCP server to interact with AWS services. It's important to note that these credentials need to be regularly refreshed.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/README.md#_snippet_1

LANGUAGE: plaintext
CODE:
```
AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk
```

----------------------------------------

TITLE: Deploying Serverless Application with Guided SAM CLI - Bash
DESCRIPTION: This command initiates a guided deployment of the serverless application using the AWS SAM CLI. It prompts the user for configuration details such as stack name, AWS Region, and IAM role creation, saving these settings for future deployments.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/examples/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
sam deploy --guided
```

----------------------------------------

TITLE: Guided Deployment of SAM Application (Bash)
DESCRIPTION: This command initiates a guided deployment of the SAM application. It prompts the user for configuration details such as the stack name, AWS Region, and confirmation for IAM role creation, typically used for the initial deployment.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/stepfunctions-tool-mcp-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
sam deploy --guided
```

----------------------------------------

TITLE: Configuring EKS MCP Server with Arguments
DESCRIPTION: This JSON snippet demonstrates how to configure the Amazon EKS MCP Server with various command-line arguments. It includes enabling write access (`--allow-write`) and sensitive data access (`--allow-sensitive-data-access`), and setting AWS profile and region via environment variables.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/eks-mcp-server/README.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.eks-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.eks-mcp-server@latest"",
        ""--allow-write"",
        ""--allow-sensitive-data-access""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-profile"",
        ""AWS_REGION"": ""us-east-1""
      }
    }
  }
}
```

----------------------------------------

TITLE: Running a Specific Test Case with Pytest (Bash)
DESCRIPTION: This command targets and executes a single, specific test method within a test class in a given file using pytest. This allows for granular testing of individual functionalities.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/tests/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest tests/test_models.py::TestTerraformExecutionRequest::test_terraform_execution_request_creation
```

----------------------------------------

TITLE: Installing GenAI CDK Constructs
DESCRIPTION: Install the AWS CDK constructs for generative AI services and import them into your project. This provides specialized constructs for services like Bedrock and SageMaker.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_GENERAL_GUIDANCE.md#_snippet_2

LANGUAGE: typescript
CODE:
```
// TypeScript
npm install @cdklabs/generative-ai-cdk-constructs
import * as genai from '@cdklabs/generative-ai-cdk-constructs';
```

LANGUAGE: python
CODE:
```
# Python
pip install cdklabs.generative-ai-cdk-constructs
import cdklabs.generative_ai_cdk_constructs
```

----------------------------------------

TITLE: Updating ECS Task Definition and Service with Valid Image (Bash)
DESCRIPTION: This Bash script demonstrates how to correct an ECS service image pull failure. It first registers a new task definition revision with a valid container image (amazon/amazon-ecs-sample) and then updates the existing ECS service to use this newly registered task definition, resolving the image pull issue.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/02_service_failure/04_evaluation.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Step 1: Update the task definition with a valid image
aws ecs register-task-definition \
  --family failing-task-def \
  --requires-compatibilities FARGATE \
  --network-mode awsvpc \
  --cpu 256 \
  --memory 512 \
  --execution-role-arn <ecsTaskExecutionRoleArn> \
  --container-definitions '[\n    {\n      ""name"": ""failing-container"",\n      ""image"": ""amazon/amazon-ecs-sample"",\n      ""essential"": true,\n      ""portMappings"": [{""containerPort"": 80, ""hostPort"": 80}]\n    }\n  ]'

# Step 2: Update the service to use the new task definition revision
aws ecs update-service \
  --cluster test-failure-cluster \
  --service failing-service \
  --task-definition failing-task-def
```

----------------------------------------

TITLE: Mock AWS Amplify Backend Configuration (JSON)
DESCRIPTION: This JSON snippet defines a mock `amplify_outputs.json` file, crucial for local development. It simulates AWS Amplify backend resources like authentication (user pool, client ID, identity pool) and API endpoints, allowing developers to test applications without a live backend. This file is intended to be updated by an external build process in a production environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/frontend-mcp-server/awslabs/frontend_mcp_server/static/react/essential-knowledge.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  ""auth"": {
    ""userPoolId"": ""mock-user-pool-id"",
    ""userPoolWebClientId"": ""mock-client-id"",
    ""region"": ""us-east-1"",
    ""identityPoolId"": ""mock-identity-pool-id""
  },
  ""api"": {
    ""endpoints"": [
      {
        ""name"": ""TasksAPI"",
        ""endpoint"": ""https://example.com/api/tasks"",
        ""region"": ""us-east-1""
      }
    ]
  }
}
```

----------------------------------------

TITLE: Planning Terraform Changes (Python)
DESCRIPTION: This snippet illustrates how to generate a Terraform execution plan using `ExecuteTerraformCommand` with the 'plan' command. The plan outlines changes that would be applied and can be saved to a specified output file. The `working_directory` indicates the project path, and `output_file` specifies where to save the plan.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_4

LANGUAGE: Python
CODE:
```
ExecuteTerraformCommand(TerraformExecutionRequest(command=""plan"", working_directory=""./my_project"", output_file=""tfplan""))
```

----------------------------------------

TITLE: Querying DocumentDB with MCP Tool (Python)
DESCRIPTION: This snippet demonstrates how to perform a read operation using the `use_mcp_tool` function to query a DocumentDB collection. It specifies the `server_name`, `tool_name` as 'find', and arguments including `connection_id`, `database`, `collection`, and a `query` object to filter documents.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/documentdb-mcp-server/README.md#_snippet_3

LANGUAGE: Python
CODE:
```
query_result = await use_mcp_tool(
    server_name=""awslabs.aws-documentdb-mcp-server"",
    tool_name=""find"",
    arguments={
        ""connection_id"": connection_id,
        ""database"": ""my_database"",
        ""collection"": ""users"",
        ""query"": {""active"": True}
    }
)
```

----------------------------------------

TITLE: Referencing Module from GitHub VCS (HTTPS) - HCL
DESCRIPTION: Provides an example of sourcing a module directly from a GitHub repository using the HTTPS protocol. It demonstrates using the `ref` argument to specify a release tag (`v1.1.0`) for version control.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_18

LANGUAGE: HCL
CODE:
```
module ""eks_karpenter"" {
  source = ""github.com/my-org/terraform-aws-eks.git?ref=v1.1.0""
  ...
  enable_karpenter = true
}
```

----------------------------------------

TITLE: Enabling X-Ray Tracing for Lambda in AWS CDK
DESCRIPTION: Shows how to configure an AWS Lambda function resource in an AWS Cloud Development Kit (CDK) application to enable AWS X-Ray tracing. This is a required step for the AWS Lambda Powertools Tracer to send trace data to X-Ray.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/tracing.md#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Tracing } from ""aws-cdk-lib/aws-lambda"";

const function = new Function(this, 'MyFunction', {
  // ... other properties
  tracing: Tracing.ACTIVE,  // Enable X-Ray tracing
});
```

----------------------------------------

TITLE: Example .env file for AWS Temporary Credentials
DESCRIPTION: This fictitious `.env` file demonstrates how to store AWS temporary credentials (access key ID, secret access key, and session token) for use with applications, particularly when running the MCP server via Docker. These credentials would typically be obtained from an AWS profile or an IAM role.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-mq-mcp-server/README.md#_snippet_2

LANGUAGE: file
CODE:
```
# fictitious `.env` file with AWS temporary credentials
AWS_ACCESS_KEY_ID=<from the profile you set up>
AWS_SECRET_ACCESS_KEY=<from the profile you set up>
AWS_SESSION_TOKEN=<from the profile you set up>
```

----------------------------------------

TITLE: Manually Creating AWS Temporary Credentials .env File
DESCRIPTION: This snippet shows the structure of a `.env` file used to store AWS temporary credentials (access key ID, secret access key, and session token). This file is typically used when running the MCP server via Docker to provide necessary authentication.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aurora-dsql-mcp-server/README.md#_snippet_1

LANGUAGE: file
CODE:
```
# fictitious `.env` file with AWS temporary credentials
AWS_ACCESS_KEY_ID=<from the profile you set up>
AWS_SECRET_ACCESS_KEY=<from the profile you set up>
AWS_SESSION_TOKEN=<from the profile you set up>
```

----------------------------------------

TITLE: Comprehensive Docstring for a Python Bedrock Knowledge Base Query Tool
DESCRIPTION: This extensive Python docstring provides detailed documentation for a function that queries an Amazon Bedrock Knowledge Base. It covers usage requirements, query tips for optimal results, the expected output format, and best practices for interpreting the retrieved information, guiding users on effective interaction with the tool.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_27

LANGUAGE: Python
CODE:
```
""""""Query an Amazon Bedrock Knowledge Base using natural language.

## Usage Requirements
- You MUST first use the `resource://knowledgebases` resource to get valid knowledge base IDs
- You can query different knowledge bases or make multiple queries to the same knowledge base

## Query Tips
- Use clear, specific natural language queries for best results
- You can use this tool MULTIPLE TIMES with different queries to gather comprehensive information
- Break complex questions into multiple focused queries
- Consider querying for factual information and explanations separately

## Tool output format
The response contains multiple JSON objects (one per line), each representing a retrieved document with:
- content: The text content of the document
- location: The source location of the document
- score: The relevance score of the document


## Interpretation Best Practices
1. Extract and combine key information from multiple results
2. Consider the source and relevance score when evaluating information
3. Use follow-up queries to clarify ambiguous or incomplete information
4. If the response is not relevant, try a different query, knowledge base, and/or data source
5. After a few attempts, ask the user for clarification or a different query.
""""""
```

----------------------------------------

TITLE: Exporting AWS Credentials to .env File using aws configure (Bash)
DESCRIPTION: This Bash command exports AWS temporary credentials from a specified AWS profile (`your-profile-name`) into an `.env` file named `temp_aws_credentials.env`. The `sed` command removes the 'export ' prefix, making the file suitable for direct use with Docker's `--env-file` option.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aurora-dsql-mcp-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
aws configure export-credentials --profile your-profile-name --format env > temp_aws_credentials.env | sed 's/^export //' > temp_aws_credentials.env
```

----------------------------------------

TITLE: Building and Tagging Docker Image for MCP Server (Bash)
DESCRIPTION: This command navigates into the MCP server's source directory and builds a Docker image, tagging it with a specific name. This prepares the server for containerized deployment.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cd src/nova-canvas-mcp-server
docker build -t awslabs/nova-canvas-mcp-server .
```

----------------------------------------

TITLE: Building Docker Image for Bedrock KB Retrieval MCP Server (Shell)
DESCRIPTION: This shell command builds a Docker image for the Amazon Bedrock Knowledge Base Retrieval MCP Server. It tags the resulting image as `awslabs/bedrock-kb-retrieval-mcp-server`, allowing for containerized deployment and execution of the server. This is a prerequisite step for running the MCP server within a Docker environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker build -t awslabs/bedrock-kb-retrieval-mcp-server .
```

----------------------------------------

TITLE: Configuring AWS MCP Server for Amazon Q Developer CLI (JSON)
DESCRIPTION: This JSON snippet configures the `awslabs.frontend-mcp-server` within the Amazon Q Developer CLI's MCP settings, typically found in `~/.aws/amazonq/mcp.json`. It specifies the command (`uvx`), arguments (`awslabs.frontend-mcp-server@latest`), environment variables (e.g., `FASTMCP_LOG_LEVEL`), and sets `disabled` to `false` and `autoApprove` to an empty array. This configuration enables the Amazon Q Developer CLI to interact with the Frontend MCP Server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/frontend-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.frontend-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.frontend-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring Read-Only AWS CloudFormation MCP Server with Docker
DESCRIPTION: This JSON configuration outlines running the AWS CloudFormation MCP Server via Docker in read-only mode. It specifies Docker run arguments, including mounting an environment file for credentials and the `--readonly` flag to restrict actions.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cfn-mcp-server/README.md#_snippet_3

LANGUAGE: json
CODE:
```
{
    ""mcpServers"": {
      ""awslabs.cfn-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/cfn-mcp-server:latest"",
          ""--readonly""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Starting AWS DocumentDB MCP Server (Bash)
DESCRIPTION: This snippet provides examples for starting the AWS DocumentDB MCP server using the command line. It covers basic execution, specifying a custom port and host, and enabling write operations by using the `--allow-write` flag.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/documentdb-mcp-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
python -m awslabs.documentdb_mcp_server.server
```

LANGUAGE: bash
CODE:
```
python -m awslabs.documentdb_mcp_server.server --port 9000 --host 0.0.0.0
```

LANGUAGE: bash
CODE:
```
python -m awslabs.documentdb_mcp_server.server --allow-write
```

----------------------------------------

TITLE: Configuring AWS Lambda Tool MCP Server for Amazon Q Developer CLI
DESCRIPTION: This JSON snippet provides the configuration for integrating the AWS Lambda Tool MCP Server with Amazon Q Developer CLI. It defines the command to run the server, arguments, and environment variables for specifying AWS profile, region, function prefixes, lists, and tag keys for schema discovery.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.lambda-tool-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.lambda-tool-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FUNCTION_PREFIX"": ""your-function-prefix"",
        ""FUNCTION_LIST"": ""your-first-function, your-second-function"",
        ""FUNCTION_TAG_KEY"": ""your-tag-key"",
        ""FUNCTION_TAG_VALUE"": ""your-tag-value"",
        ""FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY"": ""your-function-tag-for-input-schema""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring ALLOW_WRITE for ECS MCP Server
DESCRIPTION: This snippet shows how to configure the `ALLOW_WRITE` environment variable for the ECS MCP Server. Setting it to `true` enables write operations like creating or deleting infrastructure, while `false` (the default) disables them, enhancing production safety.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
# Enable write operations
""ALLOW_WRITE"": ""true""

# Disable write operations (default)
""ALLOW_WRITE"": ""false""
```

----------------------------------------

TITLE: Configuring Finch MCP Server: AWS Resource Write Mode (JSON)
DESCRIPTION: This JSON configuration snippet enables AWS resource creation and modification for the Finch MCP server by including the `--enable-aws-resource-write` flag in the arguments. Similar to the default mode, it defines the command, environment variables for AWS profile and region, and log level. This mode allows tools like `finch_create_ecr_repo` and `finch_push_image` to create or modify AWS resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/finch-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.finch-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.finch-mcp-server@latest"",
        ""--enable-aws-resource-write""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""default"",
        ""AWS_REGION"": ""us-west-2"",
        ""FASTMCP_LOG_LEVEL"": ""INFO""
      },
      ""transportType"": ""stdio"",
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Query Bedrock Knowledge Base with MCP Tool Command
DESCRIPTION: This snippet shows how to use the `QueryKnowledgeBases` tool on the `awslabs.bedrock-kb-retrieval-mcp-server`. It allows querying a specified knowledge base (`knowledge_base_id`) with a given `query` and limiting the `number_of_results`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_1

LANGUAGE: MCP Tool Command
CODE:
```
# Getting domain guidance
<use_mcp_tool>
<server_name>awslabs.bedrock-kb-retrieval-mcp-server</server_name>
<tool_name>QueryKnowledgeBases</tool_name>
<arguments>
{
  ""query"": ""what services are allowed internally on aws"",
  ""knowledge_base_id"": ""KBID"",
  ""number_of_results"": 10
}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Defining and Returning Structured Pydantic Responses (Python)
DESCRIPTION: This snippet shows how to define a Pydantic BaseModel for standardizing API responses. It demonstrates how an MCP tool can construct and return an instance of this model, ensuring consistent data structure and proper URI formatting for file paths.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_16

LANGUAGE: python
CODE:
```
class McpImageGenerationResponse(BaseModel):
    """"""Response from image generation API.""""""
    status: str
    paths: List[str]

@mcp.tool(name='generate_image')
async def mcp_generate_image(...) -> McpImageGenerationResponse:
    # ... implementation
    return McpImageGenerationResponse(
        status='success',
        paths=[f'file://{path}' for path in response.paths],
    )
```

----------------------------------------

TITLE: Configuring MCP Server with Docker for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration integrates the MCP server via Docker, specifying the `docker run` command, arguments including environment variables and an environment file, to launch the `awslabs/cost-analysis-mcp-server` container.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cost-analysis-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.cost-analysis-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/cost-analysis-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Installing Development Dependencies (Python/uv)
DESCRIPTION: This command uses `uv` to install the project's development dependencies in editable mode, ensuring all necessary packages for development and testing are available within the activated virtual environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv pip install -e "".[dev]""
```

----------------------------------------

TITLE: Configuring LLM Client to Run MCP Server via Docker
DESCRIPTION: This JSON configuration snippet demonstrates how to configure an LLM client to run the AWS Labs Postgres MCP server using Docker. It specifies the `docker` command and arguments, including `-e` flags for passing AWS credentials and region as environment variables, and arguments for resource ARN, secret ARN, database name, and read-only mode. This setup allows the LLM client to launch and interact with the MCP server as a Docker container, ensuring proper isolation and dependency management.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/postgres-mcp-server/README.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.postgres-mcp-server"": {
      ""command"": ""docker"",
      ""args"": [
        ""run"",
        ""-i"",
        ""--rm"",
        ""-e"", ""AWS_ACCESS_KEY_ID=[your data]"",
        ""-e"", ""AWS_SECRET_ACCESS_KEY=[your data]"",
        ""-e"", ""AWS_REGION=[your data]"",
        ""awslabs/postgres-mcp-server:latest"",
        ""--resource_arn"", ""[your data]"",
        ""--secret_arn"", ""[your data]"",
        ""--database"", ""[your data]"",
        ""--region"", ""[your data]"",
        ""--readonly"", ""True""
      ]
    }
  }
}
```

----------------------------------------

TITLE: Initializing AWS CDK Project
DESCRIPTION: Initialize a new AWS CDK application project using the CDK CLI. This command sets up the basic project structure, dependencies, and configuration files for the specified language.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_GENERAL_GUIDANCE.md#_snippet_0

LANGUAGE: bash
CODE:
```
cdk init app --language typescript
```

LANGUAGE: bash
CODE:
```
cdk init app --language python
```

----------------------------------------

TITLE: Updating ECS Task Definition with Environment Variable (JSON)
DESCRIPTION: This JSON snippet illustrates the required structure for adding an environment variable, specifically 'DATABASE_URL', to a container definition within an Amazon ECS task definition. This configuration is essential for applications that depend on specific environment variables to connect to databases or other services, preventing task failures due to missing dependencies.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/03_task_exit_failure/04_evaluation.md#_snippet_0

LANGUAGE: JSON
CODE:
```
""containerDefinitions"": [
  {
    ""name"": ""exit-code-container"",
    ""image"": ""amazonlinux:2"",
    ""essential"": true,
    ""environment"": [
      {
        ""name"": ""DATABASE_URL"",
        ""value"": ""postgresql://username:password@hostname:port/database""
      }
    ]
    /* Other container configuration would go here */
  }
]
```

----------------------------------------

TITLE: Configuring Core, Nova Canvas, and Terraform MCP Servers - JSON
DESCRIPTION: This JSON snippet illustrates the configuration of Core, Nova Canvas, and Terraform AWS Model Context Protocol (MCP) servers within the `mcp_config.json` file. Each server defines its `command` (using `uvx`), `args` to specify the server version, and `env` variables for operational settings like `FASTMCP_LOG_LEVEL`, `AWS_PROFILE`, `AWS_REGION`, and `MCP_SETTINGS_PATH`. It also shows `disabled` and `autoApprove` flags, providing a comprehensive example of how to integrate and manage various MCP servers.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_10

LANGUAGE: JSON
CODE:
```
 {
   ""mcpServers"": {
     ""awslabs.core-mcp-server"": {
       ""command"": ""uvx"",
       ""args"": [""awslabs.core-mcp-server@latest""],
       ""env"": {
         ""FASTMCP_LOG_LEVEL"": ""ERROR"",
         ""MCP_SETTINGS_PATH"": ""path to your mcp settings file""
       }
     },
     ""awslabs.nova-canvas-mcp-server"": {
       ""command"": ""uvx"",
       ""args"": [""awslabs.nova-canvas-mcp-server@latest""],
       ""env"": {
         ""AWS_PROFILE"": ""your-aws-profile"",
         ""AWS_REGION"": ""us-east-1"",
         ""FASTMCP_LOG_LEVEL"": ""ERROR""
       }
     },
     ""awslabs.terraform-mcp-server"": {
       ""command"": ""uvx"",
       ""args"": [""awslabs.terraform-mcp-server@latest""],
       ""env"": {
         ""FASTMCP_LOG_LEVEL"": ""ERROR""
       },
       ""disabled"": false,
       ""autoApprove"": []
     }
    }
  }
```

----------------------------------------

TITLE: Configuring AWS MCP Servers in Cline Settings (JSON)
DESCRIPTION: This JSON configuration defines various AWS MCP servers for Cline, specifying their command, arguments, and environment variables. It includes settings for `core-mcp-server`, `nova-canvas-mcp-server`, and `terraform-mcp-server`, allowing for custom AWS profiles, regions, and logging levels.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.core-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.core-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""MCP_SETTINGS_PATH"": ""path to your mcp settings file""
      }
    },
    ""awslabs.nova-canvas-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.nova-canvas-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      }
    },
    ""awslabs.terraform-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.terraform-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Defining MCP Server Project Structure (Python)
DESCRIPTION: This snippet illustrates the recommended directory structure for an MCP server project written in Python. It outlines the placement of documentation, configuration files (`pyproject.toml`), source code under `awslabs/`, and a dedicated `tests/` directory, promoting a clear and organized codebase.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_0

LANGUAGE: Python
CODE:
```
mcp-server-project/
├── README.md               # Project description, setup instructions
├── CHANGELOG.md            # Version history and changes
├── LICENSE                 # License information
├── NOTICE                  # Additional copyright notices
├── pyproject.toml          # Project configuration
├── .gitignore              # Git ignore patterns
├── .pre-commit-config.yaml # Pre-commit hooks
├── awslabs/                # Source code directory
│   ├── __init__.py         # Package initialization
│   └── your_mcp_server/    # Main server package
│       ├── __init__.py     # Package version and metadata
│       ├── models.py       # Pydantic models
│       ├── server.py       # MCP server implementation
│       ├── consts.py       # Constants definition
│       └── ...             # Additional modules
└── tests/                  # Test directory
```

----------------------------------------

TITLE: Optional CDK Nag using Environment Variables - TypeScript
DESCRIPTION: This snippet demonstrates how to conditionally apply CDK Nag checks based on the presence and value of an environment variable (ENABLE_CDK_NAG). This is useful for enabling or disabling checks during different phases like development or CI/CD.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_NAG_GUIDANCE.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { AwsSolutionsChecks } from 'cdk-nag';
import { App } from 'aws-cdk-lib';

// Create your CDK app
const app = new App();

// Add your stacks
new MyStack(app, 'MyStack');

// Apply CDK Nag conditionally based on environment variable
if (process.env.ENABLE_CDK_NAG === 'true') {
  console.log('CDK Nag enabled - checking for security issues');
  AwsSolutionsChecks.check(app);
} else {
  console.log('CDK Nag disabled - skipping security checks');
}
```

----------------------------------------

TITLE: Installing AWS Lambda Powertools with Extras (Bash)
DESCRIPTION: Demonstrates how to install AWS Lambda Powertools using pip with specific extras (tracer, validation, all) to include required dependencies for different feature sets.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/dependencies.md#_snippet_0

LANGUAGE: bash
CODE:
```
# For tracing only
pip install ""aws-lambda-powertools[tracer]""

# For validation and parser features
pip install ""aws-lambda-powertools[validation]""

# For all features
pip install ""aws-lambda-powertools[all]""
```

----------------------------------------

TITLE: Configuring AWS Serverless MCP Server for AI Clients - JSON
DESCRIPTION: This JSON snippet illustrates the configuration required to integrate the AWS Serverless MCP server with AI clients. It defines the server's command path, environment variables like `AWS_PROFILE` and `AWS_REGION`, and settings for enabling/disabling the server and auto-approval of operations. This configuration allows AI clients to interact with the MCP server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/README.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-serverless-mcp-server"": {
        ""command"": ""mcp/src/aws-serverless-mcp-server/bin/awslabs.aws-serverless-mcp-server/"",
        ""env"": {
          ""AWS_PROFILE"": ""your-aws-profile"",
          ""AWS_REGION"": ""us-east-1""
        },
        ""disabled"": false,
        ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring AWS DynamoDB MCP Server with Docker for Amazon Q Developer CLI
DESCRIPTION: This JSON snippet illustrates how to configure the AWS DynamoDB MCP Server to run as a Docker container within the Amazon Q Developer CLI's `mcp.json` file. It defines `docker` as the command, specifies Docker run arguments including `--rm`, `--interactive`, and `--env FASTMCP_LOG_LEVEL=ERROR`, and points to the `awslabs/dynamodb-mcp-server:latest` image. This setup allows the MCP server to operate within a containerized environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/dynamodb-mcp-server/README.md#_snippet_1

LANGUAGE: JSON
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.dynamodb-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""awslabs/dynamodb-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Example .env File for AWS Credentials (Environment Variables)
DESCRIPTION: This snippet shows an example `.env` file used to store sensitive AWS temporary credentials. These variables can then be passed to Docker containers for secure access to AWS services.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_4

LANGUAGE: env
CODE:
```
# contents of a .env file with fictitious AWS temporary credentials
AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk
```

----------------------------------------

TITLE: Generating Overall Test Coverage Report (Python/Pytest)
DESCRIPTION: This command uses `pytest` with the `pytest-cov` plugin to generate a comprehensive test coverage report for the `awslabs.ecs_mcp_server` module, indicating which parts of the code are covered by tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_14

LANGUAGE: bash
CODE:
```
python -m pytest --cov=awslabs.ecs_mcp_server tests/
```

----------------------------------------

TITLE: IAM Read-Only Policy for EKS MCP Server
DESCRIPTION: This JSON policy grants read-only permissions required by the Amazon EKS MCP server. It allows actions such as describing EKS clusters, CloudFormation stacks, retrieving CloudWatch metrics, querying logs, and accessing IAM role and policy information, along with specific `eks-mcpserver:QueryKnowledgeBase` permissions. These permissions are essential for the server to gather information about the cluster state and related AWS resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/eks-mcp-server/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""Version"": ""2012-10-17"",
  ""Statement"": [
    {
      ""Effect"": ""Allow"",
      ""Action"": [
        ""eks:DescribeCluster"",
        ""cloudformation:DescribeStacks"",
        ""cloudwatch:GetMetricData"",
        ""logs:StartQuery"",
        ""logs:GetQueryResults"",
        ""iam:GetRole"",
        ""iam:GetRolePolicy"",
        ""iam:ListRolePolicies"",
        ""iam:ListAttachedRolePolicies"",
        ""iam:GetPolicy"",
        ""iam:GetPolicyVersion"",
        ""eks-mcpserver:QueryKnowledgeBase""
      ],
      ""Resource"": ""*""
    }
  ]
}
```

----------------------------------------

TITLE: Cloning Repository and Installing Dependencies - Bash
DESCRIPTION: This snippet provides the necessary bash commands to clone the `awslabs/mcp` starter kit repository, navigate into its frontend directory, and install the required Node.js packages using npm. It's a foundational step for setting up the development environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/frontend-mcp-server/awslabs/frontend_mcp_server/static/react/essential-knowledge.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Clone repository into [app-name] folder
git clone -b starterkits https://github.com/awslabs/mcp.git [app-name]
# navigate to the frontend folder
cd [app-name]/frontend
# install packages
npm install
```

----------------------------------------

TITLE: Running Amazon ECS MCP Server from a Local Clone
DESCRIPTION: This snippet shows how to clone the `awslabs/mcp` GitHub repository and then run the ECS MCP server directly from the local source directory using the `uv` command-line tool. This method is useful for development, testing, or contributing to the project without a formal package installation.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
# Clone the awslabs repository
git clone https://github.com/awslabs/mcp.git

# Run the server directly using uv
uv --directory /path/to/ecs-mcp-server/src/ecs-mcp-server/awslabs/ecs_mcp_server run main.py
```

----------------------------------------

TITLE: Configuring Core MCP Server with UVX for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration snippet shows how to integrate the `awslabs.core-mcp-server` with Amazon Q Developer CLI using `uvx`. It specifies the command, arguments, and environment variables for running the server, disabling it by default and setting the log level to ERROR.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.core-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.core-mcp-server@latest""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""autoApprove"": [],
      ""disabled"": false
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Client for Amazon MQ MCP Server (Docker)
DESCRIPTION: This JSON snippet configures the MCP client to run the Amazon MQ MCP Server using Docker. It specifies the `docker` command and includes arguments for running the container, such as `--rm` (remove container on exit), `--interactive`, and `--env-file` to load AWS credentials from an external file. The `awslabs/amazon-mq-mcp-server:latest` image is used.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-mq-mcp-server/README.md#_snippet_3

LANGUAGE: json
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.amazon-mq-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/amazon-mq-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Add Dependencies with uv
DESCRIPTION: Add required dependencies for your server using the uv package manager. Alternatively, dependencies can be added directly to the pyproject.toml file.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_7

LANGUAGE: Shell
CODE:
```
uv add {your dependencies}
```

----------------------------------------

TITLE: Environment-Specific CDK Nag Application - TypeScript
DESCRIPTION: This code demonstrates applying CDK Nag checks only to specific environments (e.g., 'production', 'staging') determined by a context parameter. This allows for stricter checks in production-like environments while potentially skipping them in development.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/CDK_NAG_GUIDANCE.md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import { AwsSolutionsChecks } from 'cdk-nag';
import { App, Stack } from 'aws-cdk-lib';

// Create your CDK app
const app = new App();

// Get environment from context
const environment = app.node.tryGetContext('environment') || 'development';

// Add your stacks
const stack = new MyStack(app, 'MyStack');

// Apply CDK Nag only to production and staging environments
if (['production', 'staging'].includes(environment)) {
  console.log(`Applying CDK Nag checks for ${environment} environment`);
  AwsSolutionsChecks.check(stack);
}
```

----------------------------------------

TITLE: Validating Terraform Configuration (Python)
DESCRIPTION: This snippet shows how to validate a Terraform configuration using `ExecuteTerraformCommand` with the 'validate' command. This checks for syntactic validity and internal consistency before planning or applying changes. The `working_directory` parameter specifies the path to the configuration to be validated.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_5

LANGUAGE: Python
CODE:
```
ExecuteTerraformCommand(TerraformExecutionRequest(
    command=""validate"",
    working_directory=""./project_dir""
))
```

----------------------------------------

TITLE: Building Serverless Application with SAM CLI - Bash
DESCRIPTION: This command uses the AWS SAM CLI to build the serverless application, preparing the Lambda functions and their dependencies for deployment. It compiles and packages the code according to the 'template.yaml' file.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/examples/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
sam build
```

----------------------------------------

TITLE: Basic Root Module Structure - Terraform HCL
DESCRIPTION: This snippet illustrates the recommended basic directory structure for a Terraform root module. It includes standard files like main.tf, variables.tf, outputs.tf, providers.tf, and directories for environments (envs) and data files.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_9

LANGUAGE: Terraform Structure
CODE:
```
.
### data.tf
### envs
#   ### dev
#   #   ### terraform.tfvars
#   ### prod
#   #   ### terraform.tfvars
#   ### test
#       ### terraform.tfvars
### locals.tf
### main.tf
### outputs.tf
### providers.tf
### README.md
### terraform.tfvars
### variables.tf
### versions.tf
```

----------------------------------------

TITLE: AWS Profile Environment Variable Configuration (JSON)
DESCRIPTION: Specifies the `AWS_PROFILE` environment variable within the MCP server configuration, which determines the AWS credentials used for authentication. If not set, the 'default' profile is used.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/syntheticdata-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
""env"": {
  ""AWS_PROFILE"": ""your-aws-profile""
}
```

----------------------------------------

TITLE: Generating a Serverless Application Diagram with Python
DESCRIPTION: This Python code snippet provides a quick example of generating an AWS serverless application diagram using the `diagrams` package. It illustrates how to define AWS components like API Gateway, Lambda, and DynamoDB, and establish their connections within a diagram.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/README.md#_snippet_2

LANGUAGE: python
CODE:
```
from diagrams import Diagram
from diagrams.aws.compute import Lambda
from diagrams.aws.database import Dynamodb
from diagrams.aws.network import APIGateway

with Diagram(""Serverless Application"", show=False):
    api = APIGateway(""API Gateway"")
    function = Lambda(""Function"")
    database = Dynamodb(""DynamoDB"")

    api >> function >> database
```

----------------------------------------

TITLE: Running Valkey MCP Server Docker Container
DESCRIPTION: This bash command illustrates how to run the Valkey MCP server as a Docker container. It maps port 8080 from the container to the host and sets environment variables to configure the Valkey host and port for the running server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
docker run -p 8080:8080 \
  -e VALKEY_HOST=host.docker.internal \
  -e VALKEY_PORT=6379 \
  awslabs/valkey-mcp-server
```

----------------------------------------

TITLE: Building ECS MCP Server Python Package (Bash)
DESCRIPTION: This snippet provides the bash commands required to navigate into the 'src/ecs-mcp-server' directory and then build the Python package using the 'python -m build' command. This is a crucial step for preparing the server component for deployment or publishing.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_16

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server
python -m build
```

----------------------------------------

TITLE: Configuring EKS MCP Server Environment Variables
DESCRIPTION: This JSON configuration illustrates how to define environment variables for the Amazon EKS MCP Server. It sets the `FASTMCP_LOG_LEVEL` to `ERROR`, and specifies `AWS_PROFILE` and `AWS_REGION` for AWS credential and region configuration.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/eks-mcp-server/README.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.eks-mcp-server"": {
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""AWS_PROFILE"": ""my-profile"",
        ""AWS_REGION"": ""us-west-2""
      }
    }
  }
}
```

----------------------------------------

TITLE: Validating and Saving Data Structures (Python)
DESCRIPTION: Shows how to validate and save structured data (e.g., JSON Lines) using the MCP server. It takes a dictionary of data, a workspace directory, and an output directory, performing validation and conversion to CSV.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/syntheticdata-mcp-server/README.md#_snippet_4

LANGUAGE: python
CODE:
```
response = await server.validate_and_save_data(
    data={
        ""customers"": [{""id"": 1, ""name"": ""John""}],
        ""orders"": [{""id"": 101, ""customer_id"": 1}]
    },
    workspace_dir=""/path/to/workspace"",
    output_dir=""data""
)
```

----------------------------------------

TITLE: Docker Configuration for Bedrock KB Retrieval MCP Server
DESCRIPTION: This JSON snippet defines the configuration for an `awslabs.bedrock-kb-retrieval-mcp-server` within the `mcpServers` block. It specifies a Docker command to run the server, passing various environment variables like `FASTMCP_LOG_LEVEL`, `KB_INCLUSION_TAG_KEY`, `BEDROCK_KB_RERANKING_ENABLED`, and `AWS_REGION`. It also references an external `.env` file for credentials and sets the Docker image to `awslabs/bedrock-kb-retrieval-mcp-server:latest`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/README.md#_snippet_3

LANGUAGE: JSON
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.bedrock-kb-retrieval-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""--env"",
          ""KB_INCLUSION_TAG_KEY=optional-tag-key-to-filter-kbs"",
          ""--env"",
          ""BEDROCK_KB_RERANKING_ENABLED=false"",
          ""--env"",
          ""AWS_REGION=us-east-1"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/bedrock-kb-retrieval-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Configuring AWS CloudWatch Logs MCP Server for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration snippet is used to integrate the `awslabs.cloudwatch-logs-mcp-server` with the Amazon Q Developer CLI. It specifies the command to run (`uvx`), arguments, environment variables for AWS profile and region, and sets the transport type to `stdio`. The `autoApprove` and `disabled` fields control server behavior and access.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cloudwatch-logs-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.cloudwatch-logs-mcp-server"": {
      ""autoApprove"": [],
      ""disabled"": false,
      ""timeout"": 60,
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.cloudwatch-logs-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""[The AWS Profile Name to use for AWS access]"",
        ""AWS_REGION"": ""[The AWS region to run in]"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""transportType"": ""stdio""
    }
  }
}
```

----------------------------------------

TITLE: Initializing LambdaToSns Construct in Java
DESCRIPTION: This snippet illustrates how to initialize the `LambdaToSns` construct in Java using AWS CDK. It configures a new Lambda function with a specified runtime, handler, and code asset, linking it to an SNS topic. This is a minimal deployable pattern.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/tests/resources/lambda_sns_raw.html#_snippet_2

LANGUAGE: Java
CODE:
```
import software.constructs.Construct;  import software.amazon.awscdk.Stack; import software.amazon.awscdk.StackProps; import software.amazon.awscdk.services.lambda.*; import software.amazon.awscdk.services.lambda.Runtime; import software.amazon.awsconstructs.services.lambdasns.*;  new LambdaToSns(this, ""test-lambda-sns-stack"", new LambdaToSnsProps.Builder()         .lambdaFunctionProps(new FunctionProps.Builder()                 .runtime(Runtime.NODEJS_20_X)                 .code(Code.fromAsset(""lambda""))                 .handler(""index.handler"")                 .build())         .build());
```

----------------------------------------

TITLE: Installing Amazon ECS MCP Server with pip or uv
DESCRIPTION: This snippet demonstrates how to install the `awslabs.ecs-mcp-server` package using either the `uv` package manager or the standard `pip` package manager. These commands fetch and install the server from PyPI, making it available for use in your environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
# Install using uv
uv pip install awslabs.ecs-mcp-server

# Or install using pip
pip install awslabs.ecs-mcp-server
```

----------------------------------------

TITLE: Subsequent Deployment of Serverless Application with SAM CLI - Bash
DESCRIPTION: This command performs a subsequent deployment of the serverless application using the AWS SAM CLI. After an initial guided deployment, this command can be used for faster updates without re-entering configuration details.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/examples/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
sam deploy
```

----------------------------------------

TITLE: Installing Dependencies with uv (Bash)
DESCRIPTION: Uses the uv package manager to synchronize and install the project dependencies listed in the requirements file.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-nova-canvas/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
uv sync
```

----------------------------------------

TITLE: Running All Pytest Tests (Bash)
DESCRIPTION: Command to execute all tests within the project using pytest from the root directory. This command will run all discovered tests and generate a coverage report by default.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Setting AWS_PROFILE Environment Variable in MCP Configuration
DESCRIPTION: This JSON snippet illustrates how to set the `AWS_PROFILE` environment variable within the MCP server configuration, which dictates which AWS profile from your local configuration file will be used for authentication with AWS services.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cost-analysis-mcp-server/README.md#_snippet_3

LANGUAGE: json
CODE:
```
""env"": {
  ""AWS_PROFILE"": ""your-aws-profile""
}
```

----------------------------------------

TITLE: Enabling Write Operations for DocumentDB MCP Server (Bash)
DESCRIPTION: This bash command illustrates how to launch the AWS DocumentDB MCP server with write operations enabled. By default, the server runs in read-only mode, so the `--allow-write` flag is necessary to permit `insert`, `update`, and `delete` operations.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/documentdb-mcp-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
python -m awslabs.documentdb_mcp_server.server --allow-write
```

----------------------------------------

TITLE: Setting AWS Profile Environment Variable (JSON)
DESCRIPTION: This JSON snippet illustrates how to set the `AWS_PROFILE` environment variable within the MCP server configuration. This variable determines which AWS profile from your local AWS configuration file will be used for authentication with AWS services like RDS Data API and AWS Secrets Manager. If not specified, the 'default' profile is used.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mysql-mcp-server/README.md#_snippet_3

LANGUAGE: JSON
CODE:
```
""env"": {
  ""AWS_PROFILE"": ""your-aws-profile""
}
```

----------------------------------------

TITLE: Setting AWS Profile Environment Variable for MCP Server
DESCRIPTION: This JSON snippet illustrates how to define the `AWS_PROFILE` environment variable within the MCP server's configuration. This variable dictates which AWS profile, from your local AWS configuration file, the MCP server will use for authenticating with AWS services like RDS Data API and Secrets Manager. If not explicitly set, the server defaults to the 'default' profile.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/postgres-mcp-server/README.md#_snippet_3

LANGUAGE: JSON
CODE:
```
""env"": {
  ""AWS_PROFILE"": ""your-aws-profile""
}
```

----------------------------------------

TITLE: Running Development Tests for Valkey MCP Server
DESCRIPTION: This sequence of bash commands outlines the process for setting up a development environment and executing tests for the Valkey MCP server. It involves creating a virtual environment, activating it, synchronizing dependencies, and then running `pytest`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
uv venv
source .venv/bin/activate
uv sync
uv run --frozen pytest
```

----------------------------------------

TITLE: Running Nova Canvas MCP Server Tests (Bash)
DESCRIPTION: This bash snippet shows the commands to navigate to the server directory and execute the test script. The script handles setting up the environment, installing dependencies, running pytest, generating coverage, and performing code quality checks.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/nova-canvas-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd src/nova-canvas-mcp-server
./run_tests.sh
```

----------------------------------------

TITLE: Scanning and Auditing Secrets with detect-secrets
DESCRIPTION: These commands are used to manage the `.secrets.baseline` file. The first command scans the project and updates the baseline with newly detected secrets. The second command opens an interactive audit tool to review and remediate the findings in the baseline.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_16

LANGUAGE: shell
CODE:
```
% detect-secrets scan --baseline .secrets.baseline # which might add detected secrets to the baseline.
% detect-secrets audit .secrets.baseline # to remediate updates in the baseline.
```

----------------------------------------

TITLE: Configuring Core MCP Server with Docker
DESCRIPTION: This JSON configuration snippet demonstrates how to integrate the `awslabs.core-mcp-server` using Docker. It defines the command to run the Docker container, including arguments for interactive mode, removing the container on exit, and setting the `FASTMCP_LOG_LEVEL` environment variable.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.core-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""awslabs/core-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Configuring Valkey MCP Server with Docker
DESCRIPTION: This JSON configuration snippet shows how to set up the Valkey MCP server to run as a Docker container within the MCP framework. It uses the `docker run` command with arguments to remove the container on exit, run interactively, and pass environment variables for log level, Valkey host, and port.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.valkey-mcp-server"": {
      ""command"": ""docker"",
      ""args"": [
        ""run"",
        ""--rm"",
        ""--interactive"",
        ""--env"",
        ""FASTMCP_LOG_LEVEL=ERROR"",
        ""--env"",
        ""VALKEY_HOST=127.0.0.1"",
        ""--env"",
        ""VALKEY_PORT=6379"",
        ""awslabs/valkey-mcp-server:latest""
      ],
      ""env"": {},
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Installing Development Dependencies for AWS Diagram MCP Server (Bash)
DESCRIPTION: This Bash command uses `uv pip` to install the development dependencies for the AWS Diagram MCP Server. The `-e "".[dev]""` flag installs the project in editable mode and includes all dependencies specified in the `dev` extra, such as `pytest` and `pytest-cov`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
uv pip install -e "".[dev]""
```

----------------------------------------

TITLE: Configuring EKS MCP Server for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration defines the Amazon EKS MCP Server for integration with the Amazon Q Developer CLI. It sets the server command, arguments, and environment variables, specifically disabling write access by default and setting the log level to `ERROR`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/eks-mcp-server/README.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.eks-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.eks-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""autoApprove"": [],
      ""disabled"": false
    }
  }
}
```

----------------------------------------

TITLE: Running Specific Test Method with Pytest - Bash
DESCRIPTION: This command executes a single, specific test method, `test_empty_prefix_and_list`, within the `TestValidateFunctionName` class in `tests/test_server.py`. The `-xvs` flags provide verbose output, prevent output capture, and stop on the first failure.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/tests/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pytest -xvs tests/test_server.py::TestValidateFunctionName::test_empty_prefix_and_list
```

----------------------------------------

TITLE: Running Specific Test Class with Pytest - Bash
DESCRIPTION: This command targets and runs all tests within a specific test class, `TestValidateFunctionName`, located in `tests/test_server.py`. The `-xvs` flags ensure verbose output, prevent output capture, and stop on the first failure.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/tests/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest -xvs tests/test_server.py::TestValidateFunctionName
```

----------------------------------------

TITLE: Running a Specific Pytest Method (Bash)
DESCRIPTION: This command runs a single, specific test method, such as `test_sam_build_tool` within `TestSamBuildTool`. It's ideal for debugging or re-running individual failed tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pytest tests/test_server.py::TestSamBuildTool::test_sam_build_tool
```

----------------------------------------

TITLE: Running Specific Unit Test Case Verbose (Python/Pytest)
DESCRIPTION: This command runs a single, specific test case (`test_server_tools` within `TestMain` in `test_main.py`) using `pytest` with verbose output, which is useful for detailed debugging and understanding test execution.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_12

LANGUAGE: bash
CODE:
```
python -m pytest tests/unit/test_main.py::TestMain::test_server_tools -v
```

----------------------------------------

TITLE: Referencing Module from Terraform Enterprise Registry - HCL
DESCRIPTION: Illustrates referencing a module hosted on a private Terraform Enterprise registry. Similar to HCP Terraform, it uses the custom registry address (`terraform.mydomain.com/my-org/eks/aws`) and includes a version constraint.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_17

LANGUAGE: HCL
CODE:
```
module ""eks_karpenter"" {
  source = ""terraform.mydomain.com/my-org/eks/aws""
  version = ""1.1.0""
  ...
  enable_karpenter = true
}
```

----------------------------------------

TITLE: Python Function Signature for Searching Documentation
DESCRIPTION: This Python function signature defines `search_documentation`, which searches AWS documentation using the official API. It accepts a `search_phrase` (string) and an integer `limit`, returning a list of dictionaries representing search results.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/README.md#_snippet_3

LANGUAGE: python
CODE:
```
search_documentation(search_phrase: str, limit: int) -> list[dict]
```

----------------------------------------

TITLE: Configuring MCP Server with Docker Command (JSON)
DESCRIPTION: This JSON configuration defines how to run the `awslabs.cdk-mcp-server` using a Docker container. It specifies Docker run arguments including removing the container on exit, interactive mode, setting `FASTMCP_LOG_LEVEL` to `ERROR`, and using the `awslabs/cdk-mcp-server:latest` image. The server is enabled with no automatic approvals.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    ""mcpServers"": {
      ""awslabs.cdk-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""awslabs/cdk-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Getting Coordinates for Location - Amazon Location Service (Python)
DESCRIPTION: This function retrieves the geographical coordinates (latitude and longitude) for a given location name or address using Amazon Location Service's geocoding capabilities. It takes a string representing the location as input and returns a dictionary containing the coordinates.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_10

LANGUAGE: python
CODE:
```
get_coordinates(location: str) -> dict
```

----------------------------------------

TITLE: Referencing Module from HCP Terraform Registry - HCL
DESCRIPTION: Shows how to reference a module published to an HCP Terraform private registry. It uses the registry address format (`app.terraform.io/my-org/eks/aws`) and specifies a required version constraint (`version`).
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_16

LANGUAGE: HCL
CODE:
```
module ""eks_karpenter"" {
  source = ""app.terraform.io/my-org/eks/aws""
  version = ""1.1.0""
  ...
  enable_karpenter = true
}
```

----------------------------------------

TITLE: Installing MCP Server with uvx (JSON)
DESCRIPTION: This JSON configuration snippet demonstrates how to set up the `awslabs.memcached-mcp-server` using `uvx`. It specifies the command, arguments, and environment variables like `FASTMCP_LOG_LEVEL`, `MEMCACHED_HOST`, and `MEMCACHED_PORT` for connecting to a Memcached instance. This method is suitable for integration with tools like Amazon Q Developer CLI.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.memcached-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.memcached-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""MEMCACHED_HOST"": ""your-memcached-host"",
        ""MEMCACHED_PORT"": ""11211""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Adding Custom Instructions for Cline Prompts (Plain Text)
DESCRIPTION: This plain text snippet provides custom instructions to be pasted into Cline's settings. It ensures that the `mcp-core` server is always used as the starting point for new projects and that a list of used MCP servers is included after task completion.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_7

LANGUAGE: Plain Text
CODE:
```
For every new project, always look at your MCP servers and use mcp-core as the starting point every time. Also after a task completion include the list of MCP servers used in the operation.
```

----------------------------------------

TITLE: Configuring EKS MCP Server Auto-Approval in JSON
DESCRIPTION: This JSON snippet demonstrates how to configure the `autoApprove` array within the EKS MCP Server definition. It lists specific tool names that will bypass user confirmation, allowing the EKS MCP Server client to automatically approve their execution. This configuration is part of the server's definition and helps streamline operations for trusted tools.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/eks-mcp-server/README.md#_snippet_6

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.eks-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.eks-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""eks-mcp-readonly-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""INFO""
      },
      ""autoApprove"": [
        ""manage_eks_stacks"",
        ""manage_k8s_resource"",
        ""list_k8s_resources"",
        ""get_pod_logs"",
        ""get_k8s_events"",
        ""get_cloudwatch_logs"",
        ""get_cloudwatch_metrics"",
        ""get_policies_for_role"",
        ""search_eks_troubleshoot_guide"",
        ""list_api_versions""
      ]
    }
  }
}
```

----------------------------------------

TITLE: Running All Pytest Unit Tests (Bash)
DESCRIPTION: This command executes all unit tests configured for the AWS Lambda MCP Server using the pytest framework. It's the default method for running the entire test suite.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Installing MCP Server with Docker (JSON)
DESCRIPTION: This JSON configuration snippet shows how to integrate the `awslabs.memcached-mcp-server` using a Docker container. It defines the `docker` command, `run` arguments including `--rm`, `--interactive`, and environment variables for `FASTMCP_LOG_LEVEL`, `MEMCACHED_HOST`, and `MEMCACHED_PORT`. This approach is used after building the Docker image.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.memcached-mcp-server"": {
      ""command"": ""docker"",
      ""args"": [
        ""run"",
        ""--rm"",
        ""--interactive"",
        ""--env"",
        ""FASTMCP_LOG_LEVEL=ERROR"",
        ""--env"",
        ""MEMCACHED_HOST=your-memcached-host"",
        ""--env"",
        ""MEMCACHED_PORT=11211"",
        ""awslabs/memcached-mcp-server:latest""
      ],
      ""env"": {},
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Get AWS Pricing with Cost Analysis MCP Tool Command
DESCRIPTION: This snippet shows how to use the `get_pricing_from_web` tool on the `awslabs.cost-analysis-mcp-server`. It is used to retrieve pricing information for a specific AWS service by providing its `service_code`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_4

LANGUAGE: MCP Tool Command
CODE:
```
# Getting pricing information
<use_mcp_tool>
<server_name>awslabs.cost-analysis-mcp-server</server_name>
<tool_name>get_pricing_from_web</tool_name>
<arguments>
{
  ""service_code"": ""lambda""
}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Example .env File for AWS Temporary Credentials
DESCRIPTION: This `.env` file example demonstrates how to store AWS temporary credentials, including `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, and `AWS_SESSION_TOKEN`. These are essential for authenticating the Dockerized MCP server with AWS.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cfn-mcp-server/README.md#_snippet_2

LANGUAGE: file
CODE:
```
# fictitious `.env` file with AWS temporary credentials
AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk
```

----------------------------------------

TITLE: Configuring MCP Server in Amazon Q Developer CLI
DESCRIPTION: This JSON snippet shows how to configure the Amazon SNS/SQS MCP server within the Amazon Q Developer CLI's `mcp.json` file. It specifies the command to run the server (`uvx`), its arguments, and environment variables like `AWS_PROFILE` and `AWS_REGION` for AWS authentication.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-sns-sqs-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.amazon-sns-sqs-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.amazon-sns-sqs-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1""
      }
    }
  }
}
```

----------------------------------------

TITLE: Running Specific Test Method with Pytest - Bash
DESCRIPTION: This command executes a single, specific test method, such as `test_empty_prefix_and_list`, within a designated test class and file. This granular control is ideal for debugging or re-running individual failed tests quickly.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/tests/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pytest -xvs tests/test_validate_state_machine_name.py::TestValidateStateMachineName::test_empty_prefix_and_list
```

----------------------------------------

TITLE: Delete Deployed SAM Resources (Bash)
DESCRIPTION: This command removes all resources deployed by the specified AWS CloudFormation stack. Replace `<your-stack-name>` with the actual name of the deployed stack to clean up all associated resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/stepfunctions-tool-mcp-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
sam delete --stack-name <your-stack-name>
```

----------------------------------------

TITLE: Declare AWS Provider Requirement (Minimum Version)
DESCRIPTION: This Terraform block declares the required version for Terraform itself and specifies the minimum required version for the AWS provider using the greater-than-or-equal-to operator (>=). This ensures that the configuration is compatible with the specified provider version or any later compatible version.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_11

LANGUAGE: HCL
CODE:
```
terraform {
  required_version = "">= 1.0.0""
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = "">= 4.0.0""
    }
  }
}
```

----------------------------------------

TITLE: Creating Documentation Context (Python)
DESCRIPTION: The `create_context` asynchronous function initializes a `DocumentationContext` object, which serves as the central state container for the documentation process. It requires the `project_root` path and a completed `ProjectAnalysis` object, which contains detailed project metadata, to set up the context for subsequent documentation steps.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/code-doc-gen-mcp-server/README.md#_snippet_2

LANGUAGE: python
CODE:
```
async def create_context(
    project_root: str = Field(..., description='Path to the code repository'),
    analysis: ProjectAnalysis = Field(..., description='Completed ProjectAnalysis'),
    ctx: Context = None,
) -> DocumentationContext
```

----------------------------------------

TITLE: Building Local Docker Image for CloudWatch Logs MCP Server
DESCRIPTION: This command builds a Docker image for the CloudWatch Logs MCP server locally. It tags the image as `awslabs/cloudwatch-logs-mcp-server:latest`, allowing it to be run as a container. This is a prerequisite for running the server via Docker.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cloudwatch-logs-mcp-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker build -t awslabs/cloudwatch-logs-mcp-server:latest .
```

----------------------------------------

TITLE: Configuring MCP Server for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration snippet defines how the Amazon Nova Canvas MCP server is integrated with Amazon Q Developer CLI. It specifies the command to run the server, arguments, environment variables like AWS profile and region, and logging level. This allows Amazon Q Developer CLI to discover and interact with the MCP server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/nova-canvas-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.nova-canvas-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.nova-canvas-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server with uvx Command (JSON)
DESCRIPTION: This JSON configuration defines how to run the `awslabs.cdk-mcp-server` using the `uvx` command. It specifies the command arguments, sets the `FASTMCP_LOG_LEVEL` environment variable to `ERROR`, and indicates that the server is enabled with no automatic approvals.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.cdk-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.cdk-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring Valkey MCP Server with Amazon Q Developer CLI
DESCRIPTION: This JSON configuration snippet demonstrates how to integrate the Valkey MCP server with Amazon Q Developer CLI. It specifies the `uvx` command for execution, passes the server's package name as an argument, and sets environment variables for the Valkey host, port, and FastMCP log level.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.valkey-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.valkey-mcp-server@latest""
      ],
      ""env"": {
        ""VALKEY_HOST"": ""127.0.0.1"",
        ""VALKEY_PORT"": ""6379"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""autoApprove"": [],
      ""disabled"": false
    }
  }
}
```

----------------------------------------

TITLE: MCP Server Installation Configuration (JSON)
DESCRIPTION: Configuration for the `awslabs.syntheticdata-mcp-server` within an MCP environment, specifying the command, arguments, environment variables (including log level, AWS profile, and region), auto-approval settings, and disabled status.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/syntheticdata-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.syntheticdata-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.syntheticdata-mcp-server""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1""
      },
      ""autoApprove"": [],
      ""disabled"": false
    }
  }
}
```

----------------------------------------

TITLE: Troubleshooting Dependency Installation (Bash)
DESCRIPTION: Re-runs the dependency synchronization using `uv sync` as a troubleshooting step if `boto3` or `streamlit` are not found. This ensures all required packages are installed in the virtual environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
uv sync
```

----------------------------------------

TITLE: Building Local Docker Image for Postgres MCP Server
DESCRIPTION: These commands outline the steps to build a Docker image for the AWS Labs Postgres MCP server locally. First, clone the repository, then navigate into the specific server directory, and finally execute the `docker build` command to create the image tagged `awslabs/postgres-mcp-server:latest`. This image is a prerequisite for running the MCP server within a Docker container on the same host as your LLM client.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/postgres-mcp-server/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
git clone https://github.com/awslabs/mcp.git
cd src/postgres-mcp-server/
docker build -t awslabs/postgres-mcp-server:latest .
```

----------------------------------------

TITLE: Deleting Indexed Repository (Python)
DESCRIPTION: The `delete_research_repository` function is used to remove an existing indexed repository. It requires either the `repository_name_or_path` of the repository to be deleted or an optional `index_directory` if the index is stored in a custom location. This operation helps manage storage and remove outdated indexes.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_5

LANGUAGE: python
CODE:
```
delete_research_repository(
    repository_name_or_path: str,
    index_directory: Optional[str] = None
) -> Dict
```

----------------------------------------

TITLE: Run All Tests (Bash)
DESCRIPTION: Navigate to the server directory and execute all pytest tests within the 'tests/' directory.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd mcp/src/bedrock-kb-retrieval-mcp-server
pytest tests/
```

----------------------------------------

TITLE: Executing Terragrunt Destroy Command (Python)
DESCRIPTION: This snippet illustrates how to programmatically execute the `terragrunt destroy` command via a Python wrapper. This command is used to destroy all infrastructure managed by the Terragrunt configuration and is typically executed when the infrastructure is no longer needed, such as during decommissioning.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_11

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(
    command=""destroy"",
    working_directory=""./project_dir""
))
```

----------------------------------------

TITLE: Configuring MCP Server with uvx Command (JSON)
DESCRIPTION: This JSON configuration snippet defines how to integrate the `awslabs.amazon-kendra-index-mcp-server` into an MCP client, such as Amazon Q Developer CLI. It specifies the `uvx` command for execution, sets environment variables like `FASTMCP_LOG_LEVEL`, `KENDRA_INDEX_ID`, `AWS_PROFILE`, and `AWS_REGION`, and enables the server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-kendra-index-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
      ""mcpServers"": {
            ""awslabs.amazon-kendra-index-mcp-server"": {
                  ""command"": ""uvx"",
                  ""args"": [""awslabs.amazon-kendra-index-mcp-server""],
                  ""env"": {
                    ""FASTMCP_LOG_LEVEL"": ""ERROR"",
                    ""KENDRA_INDEX_ID"": ""[Your Kendra Index Id]"",
                    ""AWS_PROFILE"": ""[Your AWS Profile Name]"",
                    ""AWS_REGION"": ""[Region where your Kendra Index resides]""
                  },
                  ""disabled"": false,
                  ""autoApprove"": []
                }
      }
}
```

----------------------------------------

TITLE: Configuring AWS CloudFormation MCP Server for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration integrates the AWS CloudFormation MCP Server with Amazon Q Developer CLI, specifying the `uvx` command and an AWS profile. It enables the MCP server for full read/write operations on AWS resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cfn-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.cfn-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.cfn-mcp-server@latest""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-named-profile""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server with uvx for Amazon Q Developer CLI
DESCRIPTION: This configuration snippet demonstrates how to set up the `awslabs.terraform-mcp-server` using `uvx` for integration with Amazon Q Developer CLI. It specifies the command to execute, arguments for the server, environment variables like `FASTMCP_LOG_LEVEL`, and sets `disabled` to false. This allows the Amazon Q Developer CLI to discover and interact with the MCP server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.terraform-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.terraform-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Running Tests with Verbose Output (Bash)
DESCRIPTION: This command runs the tests with Pytest, providing more detailed output for each test case. The '-v' flag enables verbose mode, which is useful for debugging and understanding test execution flow.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-sns-sqs-mcp-server/tests/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pytest -v tests/
```

----------------------------------------

TITLE: Loading Data to S3 Storage (Python)
DESCRIPTION: Demonstrates how to load generated or validated data to a specified storage target, such as an S3 bucket. It accepts the data and a list of target configurations, including bucket name, prefix, and format.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/syntheticdata-mcp-server/README.md#_snippet_5

LANGUAGE: python
CODE:
```
response = await server.load_to_storage(
    data={
        ""customers"": [{""id"": 1, ""name"": ""John""}]
    },
    targets=[{
        ""type"": ""s3"",
        ""config"": {
            ""bucket"": ""my-bucket"",
            ""prefix"": ""data/"",
            ""format"": ""parquet""
        }
    }]
)
```

----------------------------------------

TITLE: Configuring MCP Server with AWS Profile in JSON
DESCRIPTION: This JSON configuration snippet shows how to set up the `awslabs.aws-location-mcp-server` in an MCP configuration file. It specifies the command to run the server using `uvx`, passes the package name as an argument, and sets environment variables for `AWS_PROFILE`, `AWS_REGION`, and `FASTMCP_LOG_LEVEL`. This method is suitable for users managing AWS credentials via profiles.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-location-mcp-server"": {
        ""command"": ""uvx"",
        ""args"": [""awslabs.aws-location-mcp-server@latest""],
        ""env"": {
          ""AWS_PROFILE"": ""your-aws-profile"",
          ""AWS_REGION"": ""us-east-1"",
          ""FASTMCP_LOG_LEVEL"": ""ERROR""
        },
        ""disabled"": false,
        ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Generating Code Coverage Report (Bash)
DESCRIPTION: This command executes the tests and generates a code coverage report for the 'awslabs.amazon_sns_sqs_mcp_server' module. The '--cov' flag integrates Pytest with the coverage tool to analyze which parts of the code are exercised by the tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-sns-sqs-mcp-server/tests/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.amazon_sns_sqs_mcp_server tests/
```

----------------------------------------

TITLE: Running Pytest with Coverage for AWS Diagram MCP Server (Bash)
DESCRIPTION: This Bash command executes `pytest` with code coverage analysis for the AWS Diagram MCP Server. It generates a report showing which parts of the code are covered by tests and highlights missing coverage, aiding in identifying untested areas.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.aws_diagram_mcp_server --cov-report=term-missing tests/
```

----------------------------------------

TITLE: Referencing Module from Generic Git VCS (SSH) - HCL
DESCRIPTION: Demonstrates sourcing a module from a generic Git repository using the SSH protocol. It requires configuring credentials for private repositories and uses the `git::ssh://` prefix with the `ref` argument for versioning.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_20

LANGUAGE: HCL
CODE:
```
module ""eks_karpenter"" {
  source = ""git::ssh://username@example.com/terraform-aws-eks.git?ref=v1.1.0""
  ...
  enable_karpenter = true
}
```

----------------------------------------

TITLE: Defining an MCP Tool for Image Generation (Python)
DESCRIPTION: This snippet demonstrates how to define an asynchronous tool using the @mcp.tool decorator. It shows the structure for accepting parameters with Field and returning a structured Pydantic response, emphasizing the use of Context for error reporting and detailed parameter descriptions.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_14

LANGUAGE: python
CODE:
```
@mcp.tool(name='generate_image')
async def mcp_generate_image(
    ctx: Context,
    prompt: str = Field(...),
    negative_prompt: Optional[str] = Field(default=None),
    # ... other parameters
) -> McpImageGenerationResponse:
    """"""Generate an image using Amazon Nova Canvas with text prompt.""""""

    # ... implementation
```

----------------------------------------

TITLE: Generating Pytest Coverage Report (Bash)
DESCRIPTION: Run tests and generate a code coverage report for the `awslabs.aws_serverless_mcp_server` module. This command displays the coverage summary directly in the terminal.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.aws_serverless_mcp_server
```

----------------------------------------

TITLE: Configuring MCP Server Package Entry Point (TOML)
DESCRIPTION: This TOML snippet illustrates how to configure the package entry point for an MCP server within `pyproject.toml`. It maps a command-line script name (`awslabs.your-mcp-server`) to the `main` function located in the `server.py` module, enabling the server to be executed directly as a package script.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_2

LANGUAGE: TOML
CODE:
```
[project.scripts]
""awslabs.your-mcp-server"" = ""awslabs.your_mcp_server.server:main""
```

----------------------------------------

TITLE: Running Tests - Bash
DESCRIPTION: This command executes the `pytest` test suite for the `mcp-lambda-handler` library. Running tests is crucial during development to verify functionality, catch regressions, and ensure the quality of the codebase.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mcp-lambda-handler/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest
```

----------------------------------------

TITLE: Configuring MCP Client for Amazon MQ MCP Server (uvx command)
DESCRIPTION: This JSON snippet shows how to configure an MCP client (e.g., Amazon Q Developer CLI) to use the Amazon MQ MCP Server. It specifies the `uvx` command to run the server, passing `awslabs.amazon-mq-mcp-server@latest` as an argument. Environment variables `AWS_PROFILE` and `AWS_REGION` are set to define the AWS context for the server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-mq-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.amazon-mq-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.amazon-mq-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring Aurora DSQL MCP Server with uv (JSON)
DESCRIPTION: This JSON snippet demonstrates how to configure the Aurora DSQL MCP server within an MCP client configuration file, typically `~/.aws/amazonq/mcp.json`. It specifies the command to run the server using `uvx`, arguments for cluster endpoint, region, database user, and AWS profile, along with environment variables and auto-approval settings.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aurora-dsql-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aurora-dsql-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.aurora-dsql-mcp-server@latest"",
        ""--cluster_endpoint"",
        ""[your dsql cluster endpoint]"",
        ""--region"",
        ""[your dsql cluster region, e.g. us-east-1]"",
        ""--database_user"",
        ""[your dsql username]"",
        ""--profile"", ""default""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Building Docker Image for Valkey MCP Server
DESCRIPTION: This bash command demonstrates how to build a Docker image for the Valkey MCP server. The command tags the image as `awslabs/valkey-mcp-server` for easy identification and management.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
docker build -t awslabs/valkey-mcp-server .
```

----------------------------------------

TITLE: Retrieving Data Generation Instructions (Python)
DESCRIPTION: Demonstrates how to call the `get_data_gen_instructions` method on the MCP server, providing a business description as input. This method generates structured data generation instructions based on the provided text.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/syntheticdata-mcp-server/README.md#_snippet_2

LANGUAGE: python
CODE:
```
response = await server.get_data_gen_instructions(
    business_description=""An e-commerce platform with customers, orders, and products""
)
```

----------------------------------------

TITLE: Performing Semantic Search in Indexed Repository (Python)
DESCRIPTION: The `search_research_repository` function performs a semantic search within an already indexed repository. It requires the `index_path` to the FAISS index and a natural language `query`. Optional parameters include `limit` for the number of results and `threshold` for result relevance, returning a dictionary of relevant code snippets.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_2

LANGUAGE: python
CODE:
```
search_research_repository(
    index_path: str,
    query: str,
    limit: int = 10,
    threshold: float = 0.0
) -> Dict
```

----------------------------------------

TITLE: Configuring MCP Client for Neptune Query (JSON)
DESCRIPTION: This JSON configuration snippet shows how to set up an MCP client to connect to the Amazon Neptune MCP server. It specifies the command to run the server, arguments, and environment variables like logging level and the Neptune endpoint.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-neptune-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""Neptune Query"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.amazon-neptune-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""INFO"",
        ""NEPTUNE_ENDPOINT"": ""<INSERT NEPTUNE ENDPOINT IN FORMAT SPECIFIED BELOW>""
      }
    }
  }
}
```

----------------------------------------

TITLE: Running MCP FastAPI Server (Bash)
DESCRIPTION: Starts the FastAPI server component of the application using `uvicorn`. The server handles the MCP client and server logic and interacts with the Bedrock Knowledge Base. The `--reload` flag enables automatic server restarts on code changes.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
uvicorn clients.client_server:app --reload
```

----------------------------------------

TITLE: Running the FastAPI Server (Bash)
DESCRIPTION: Starts the FastAPI server for the MCP client/server implementation using uvicorn, enabling auto-reloading on code changes.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-nova-canvas/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
uvicorn clients.client_server:app --reload
```

----------------------------------------

TITLE: Initializing Terraform Working Directory (Python)
DESCRIPTION: This snippet shows how to initialize a Terraform working directory using `ExecuteTerraformCommand` with the 'init' command. This step downloads necessary provider plugins and sets up modules for the project. The `working_directory` parameter specifies the path where Terraform should be initialized.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_3

LANGUAGE: Python
CODE:
```
ExecuteTerraformCommand(TerraformExecutionRequest(command=""init"", working_directory=""./my_project""))
```

----------------------------------------

TITLE: Example State Machine Description for Tool Documentation
DESCRIPTION: This snippet provides an example of a state machine's `Description` field, which serves as the base tool description for AI models. It outlines the purpose of the state machine and its expected input parameters.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_4

LANGUAGE: plaintext
CODE:
```
Retrieve customer status on the CRM system based on { 'customerId' } or { 'customerEmail' }
```

----------------------------------------

TITLE: Installing Python Dependencies for MCP Server - Bash
DESCRIPTION: This `bash` command uses `pip` to install the necessary Python dependencies for the AWS Serverless MCP server in editable mode. This is a crucial step after cloning the repository to ensure all required packages are available for the server to run correctly.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pip install -e .
```

----------------------------------------

TITLE: Refreshing MCP Server to Latest Version (Bash)
DESCRIPTION: This command updates a specified MCP server to its latest available version and adds it to the `uv` cache. Replace `<tool>` with the server identifier, for example, 'awslabs.lambda-mcp-server'.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
uvx <tool>@latest
```

----------------------------------------

TITLE: Configuring Dockerized MCP Server in MCP Client
DESCRIPTION: This JSON snippet demonstrates how to configure the MCP client to run the Amazon SNS/SQS MCP server as a Docker container. It specifies the `docker` command, arguments for running the container (including `--env-file` for AWS credentials), and options like `disabled` and `autoApprove`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-sns-sqs-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.sns-sqs-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/amazon-sns-sqs-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Configuring Aurora DSQL MCP Server with Docker (JSON)
DESCRIPTION: This JSON snippet illustrates how to configure the Aurora DSQL MCP server for execution via Docker within an MCP client configuration. It specifies the `docker run` command, including options for interactive mode, automatic removal, and loading environment variables from a specified `.env` file, along with mandatory cluster and database parameters.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aurora-dsql-mcp-server/README.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aurora-dsql-mcp-server"": {
      ""command"": ""docker"",
      ""args"": [
        ""run"",
        ""-i"",
        ""--rm"",
        ""--env-file"",
        ""/full/path/to/file/above/.env"",
        ""awslabs/aurora-dsql-mcp-server:latest"",
        ""--cluster_endpoint"", ""[your data]"",
        ""--database_user"", ""[your data]"",
        ""--region"", ""[your data]""
      ]
    }
  }
}
```

----------------------------------------

TITLE: Running Streamlit User Interface (Bash)
DESCRIPTION: Starts the Streamlit web application which provides the user interface for interacting with the chatbot. This command should be run in a separate terminal after the FastAPI server is running.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
streamlit run user_interfaces/chat_bedrock_st.py
```

----------------------------------------

TITLE: Running Pytest Directly for AWS Diagram MCP Server (Bash)
DESCRIPTION: This Bash command directly invokes `pytest` to run tests located in the `tests/` directory. The `-xvs` flags provide detailed output, stop on the first failure, and ensure verbose reporting during the testing process.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pytest -xvs tests/
```

----------------------------------------

TITLE: Run Specific Test Case (Bash)
DESCRIPTION: Execute a single, specific test method within a test file using the full path and method name.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/tests/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pytest tests/test_models.py::TestDataSource::test_data_source_creation
```

----------------------------------------

TITLE: Creating and Activating Virtual Environment (Windows)
DESCRIPTION: These commands navigate to the server's source directory, create a new virtual environment using `uv`, and then activate it for Windows systems, isolating project dependencies.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_2

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server
uv venv
.venv\Scripts\activate
```

----------------------------------------

TITLE: Inspecting Local MCP Development Server (Shell)
DESCRIPTION: Provides the specific command to run the MCP Inspector tool against a local development server, specifying the server's execution command (`uv run server.py`) and directory.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_13

LANGUAGE: Shell
CODE:
```
npx @modelcontextprotocol/inspector \
  uv \
  --directory <absolute path to your server code> \
  run \
  server.py
```

----------------------------------------

TITLE: Configuring LLM Client to Run CloudWatch Logs MCP Server via Docker
DESCRIPTION: This JSON configuration snippet updates an LLM client's settings to run the `awslabs.cloudwatch-logs-mcp-server` as a Docker container. It specifies `docker` as the command and includes arguments to run the container interactively, remove it on exit, and pass AWS profile and region as environment variables.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cloudwatch-logs-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.cloudwatch-logs-mcp-server"": {
      ""command"": ""docker"",
      ""args"": [
        ""run"",
        ""-i"",
        ""--rm"",
        ""-e"", ""AWS_PROFILE=[your data]"",
        ""-e"", ""AWS_REGION=[your data]"",
        ""awslabs/cloudwatch-logs-mcp-server:latest""
      ]
    }
  }
}
```

----------------------------------------

TITLE: Defining a Knowledge Base Resource Endpoint in Python
DESCRIPTION: This snippet defines an `mcp.resource` endpoint, `knowledgebases_resource`, which provides a list of Amazon Bedrock Knowledge Bases and their data sources. It specifies a URI (`resource://knowledgebases`), name (`KnowledgeBases`), and MIME type (`application/json`). The comprehensive docstring details the expected JSON response structure, including knowledge base IDs, names, and associated data sources, along with instructions on how to consume this information for tools like `QueryKnowledgeBases`.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_13

LANGUAGE: Python
CODE:
```
@mcp.resource(uri='resource://knowledgebases', name='KnowledgeBases', mime_type='application/json')
async def knowledgebases_resource() -> str:
    """"""List all available Amazon Bedrock Knowledge Bases and their data sources.

    This resource returns a mapping of knowledge base IDs to their details, including:
    - name: The human-readable name of the knowledge base
    - data_sources: A list of data sources within the knowledge base, each with:
      - id: The unique identifier of the data source
      - name: The human-readable name of the data source

    ## Example response structure:
    ```json
    {
        ""kb-12345"": {
            ""name"": ""Customer Support KB"",
            ""data_sources"": [
                {""id"": ""ds-abc123"", ""name"": ""Technical Documentation""},
                {""id"": ""ds-def456"", ""name"": ""FAQs""}
            ]
        },
        ""kb-67890"": {
            ""name"": ""Product Information KB"",
            ""data_sources"": [
                {""id"": ""ds-ghi789"", ""name"": ""Product Specifications""}
            ]
        }
    }
    ```

    ## How to use this information:
    1. Extract the knowledge base IDs (like ""kb-12345"") for use with the QueryKnowledgeBases tool
    2. Note the data source IDs if you want to filter queries to specific data sources
    3. Use the names to determine which knowledge base and data source(s) are most relevant to the user's query
    """"""
    return json.dumps(await discover_knowledge_bases(kb_agent_mgmt_client))
```

----------------------------------------

TITLE: Documenting Application Analysis Checklist in Markdown
DESCRIPTION: This snippet provides an example of a `CHECKLIST.md` file structure for documenting application analysis. It details the application overview, prioritized core features with success criteria and backend integration needs, a complete page list with components and data, and required data models. This serves as a template for project planning and ensures all critical aspects are considered before implementation.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/frontend-mcp-server/awslabs/frontend_mcp_server/static/react/essential-knowledge.md#_snippet_0

LANGUAGE: markdown
CODE:
```
# TaskFlow Application Analysis

## Application Overview
- **Name**: TaskFlow
- **Description**: A collaborative task tracking application for small teams
- **Target Users**: Small teams (5-15 people), project managers, freelancers
- **Primary Purpose**: Simplify task management and improve team coordination

## Core Features (Prioritized)
1. **Task Management**
   - Create, edit, delete tasks with title, description, due date, priority
   - Assign tasks to team members
   - Success criteria: Users can perform all CRUD operations on tasks
   - Backend integration: Required for persistent storage

2. **Task Board Views**
   - Kanban board with customizable columns (Todo, In Progress, Done)
   - List view with sorting and filtering options
   - Success criteria: Users can switch between views and drag-drop tasks
   - Backend integration: Required for state persistence

3. **Team Collaboration**
   - Comment on tasks
   - @mention team members
   - Success criteria: Users receive notifications when mentioned
   - Backend integration: Required for notifications

## Page List
1. **Dashboard**
   - Purpose: Overview of tasks, recent activity, and team performance
   - Components: Task summary cards, activity feed, progress charts
   - Data: Task counts by status, recent activities, completion rates

2. **Task Board**
   - Purpose: Visual kanban-style task management
   - Components: Drag-drop columns, task cards, filtering controls
   - Data: All tasks with status, assignee, priority information

3. **Task Details**
   - Purpose: View and edit detailed task information
   - Components: Form fields, comments section, activity log
   - Data: Single task with full details and comment history

4. **Team Members**
   - Purpose: Manage team members and view their tasks
   - Components: User list, user profile cards, assigned tasks
   - Data: User profiles and task assignments

5. **Settings**
   - Purpose: Configure application preferences
   - Components: Form fields for notification settings, theme options
   - Data: User preferences

## Data Models
1. **Task**
   - id, title, description, status, priority, dueDate, assigneeId, createdAt

2. **User**
   - id, name, email, avatar, role

3. **Comment**
   - id, taskId, userId, content, createdAt
```

----------------------------------------

TITLE: Configuring MCP Server with Docker in JSON
DESCRIPTION: This JSON configuration illustrates how to run the `awslabs.aws-location-mcp-server` within a Docker container. It sets the `command` to `docker` and provides `args` to run the built image, ensuring the container is removed after execution. Environment variables for `AWS_PROFILE` and `AWS_REGION` are passed to the container, facilitating credential management.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-location-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""-i"",
          ""awslabs/aws-location-mcp-server""
        ],
        ""env"": {
          ""AWS_PROFILE"": ""your-aws-profile"",
          ""AWS_REGION"": ""us-east-1""
        },
        ""disabled"": false,
        ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Running a Specific Pytest Class (Bash)
DESCRIPTION: Execute all tests within a particular test class, like `TestSamBuildTool` inside `tests/test_server.py`. This targets a specific group of related tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest tests/test_server.py::TestSamBuildTool
```

----------------------------------------

TITLE: Configuring MCP Server for Docker Execution (JSON)
DESCRIPTION: This JSON configuration defines how an MCP server, specifically 'awslabs.nova-canvas-mcp-server', should be run within a Docker container. It specifies the Docker command, arguments for running the container (including environment variables and volume mounts), and an empty `env` object for internal use.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.nova-canvas-mcp-server"": {
      ""command"": ""docker"",
      ""args"": [
        ""run"",
        ""--rm"",
        ""--interactive"",
        ""--env"",
        ""FASTMCP_LOG_LEVEL=ERROR"",
        ""--env"",
        ""AWS_REGION=us-east-1"",
        ""--env-file"",
        ""/full/path/to/.env"",
        ""--volume"",
        ""/full/path/to/.aws:/app/.aws"",
        ""awslabs/nova-canvas-mcp-server:latest""
      ],
      ""env"": {}
    }
  }
}
```

----------------------------------------

TITLE: Running Specific Pytest File (Bash)
DESCRIPTION: Command to execute tests contained within a single specified test file, for example, 'tests/test_server.py'.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/tests/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pytest tests/test_server.py
```

----------------------------------------

TITLE: Cloning ECS MCP Server Repository (Bash)
DESCRIPTION: This command sequence clones the ECS MCP Server project from its GitHub repository and navigates into the newly created 'mcp' directory, serving as the initial step for local development setup.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/awslabs/mcp.git
cd mcp
```

----------------------------------------

TITLE: Installing Dependencies with uv (Bash)
DESCRIPTION: Uses the `uv` package manager to synchronize and install the project's dependencies based on the requirements specified in the project files. This sets up the necessary Python libraries for the application.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
uv sync
```

----------------------------------------

TITLE: Cloning Repository and Navigating - Bash
DESCRIPTION: These commands are used to clone the `awslabs/mcp` GitHub repository and then navigate into the `mcp-lambda-handler` source directory. This is a prerequisite step for local development, allowing access to the project files.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mcp-lambda-handler/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
git clone https://github.com/awslabs/mcp.git
cd mcp/src/mcp-lambda-handler
```

----------------------------------------

TITLE: Running MCP Inspector via npx (Shell)
DESCRIPTION: Shows the basic command structure for running the MCP Inspector developer tool using npx, which does not require prior installation.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_12

LANGUAGE: Shell
CODE:
```
$ npx @modelcontextprotocol/inspector <command> <args>
```

----------------------------------------

TITLE: Build SAM Application (Bash)
DESCRIPTION: This command builds the serverless application defined in the SAM template. It compiles source code, downloads dependencies, and prepares the necessary deployment artifacts.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/stepfunctions-tool-mcp-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
sam build
```

----------------------------------------

TITLE: Running All Tests with Provided Script (Bash)
DESCRIPTION: This command navigates to the Terraform MCP server's test directory and executes all tests using a convenience shell script. This script likely wraps the pytest command with additional configurations.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/tests/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd mcp/src/terraform-mcp-server
./run_tests.sh
```

----------------------------------------

TITLE: Cloning Repository for Direct Server Run (Bash)
DESCRIPTION: This command clones the ECS MCP Server project from GitHub, providing the necessary source code for running the server directly from a local clone without a full development environment setup.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_5

LANGUAGE: bash
CODE:
```
git clone https://github.com/awslabs/mcp.git
```

----------------------------------------

TITLE: Subsequent Deployment of SAM Application (Bash)
DESCRIPTION: This command deploys the SAM application using previously saved configuration arguments from the `samconfig.toml` file. It is intended for subsequent deployments after the initial guided setup.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/stepfunctions-tool-mcp-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
sam deploy
```

----------------------------------------

TITLE: Installing and Running AWS Support MCP Server with uv
DESCRIPTION: These bash commands demonstrate an alternative method to install and run the AWS Support MCP server using `uv`. The first command installs the project in editable mode, and the second command executes the server script.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-support-mcp-server/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
uv pip install -e .
uv run awslabs/aws_support_mcp_server/server.py
```

----------------------------------------

TITLE: Execute Terraform Command using MCP Tool
DESCRIPTION: This snippet shows how to execute a Terraform command (`plan`) using the `ExecuteTerraformCommand` tool on the `awslabs.terraform-mcp-server`. It specifies the working directory and provides variable overrides.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_6

LANGUAGE: Custom Macro
CODE:
```
# Execute Terraform commands
<use_mcp_tool>
<server_name>awslabs.terraform-mcp-server</server_name>
<tool_name>ExecuteTerraformCommand</tool_name>
<arguments>
{
  ""command"": ""plan"",
  ""working_directory"": ""/path/to/terraform/project"",
  ""variables"": {
    ""environment"": ""dev"",
    ""region"": ""us-west-2""
  }
}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Configuring MCP Server for Amazon Q/Claude (JSON)
DESCRIPTION: This JSON snippet demonstrates how to configure the `awslabs.git-repo-research-mcp-server` within an MCP configuration file. It specifies the command to run the server, arguments for `uvx`, and environment variables like `AWS_PROFILE`, `AWS_REGION`, `FASTMCP_LOG_LEVEL`, and `GITHUB_TOKEN` for proper operation and authentication.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.git-repo-research-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.git-repo-research-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-profile-name"",
        ""AWS_REGION"": ""us-west-2"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""GITHUB_TOKEN"": ""your-github-token""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Starting AWS Support MCP Server via Python Module
DESCRIPTION: This command shows how to start the AWS Support MCP server by running its main module directly using Python. It indicates that additional options can be passed to configure the server's behavior, such as port, debug mode, and log file location.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-support-mcp-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
python -m awslabs.aws_support_mcp_server.server [options]
```

----------------------------------------

TITLE: Configuring AWS Diagram MCP Server with uvx
DESCRIPTION: This JSON configuration snippet shows how to integrate the AWS Diagram MCP Server with `uvx` for Amazon Q Developer CLI. It defines the command, arguments, environment variables, and auto-approval settings for the MCP server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-diagram-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.aws-diagram-mcp-server""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""autoApprove"": [],
      ""disabled"": false
    }
  }
}
```

----------------------------------------

TITLE: Running All Tests for AWS Diagram MCP Server (Bash)
DESCRIPTION: This Bash script command executes the comprehensive test suite for the AWS Diagram MCP Server. It automates the installation of `pytest` and its dependencies if they are not already present, ensuring the server's functionality is thoroughly validated.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
./run_tests.sh
```

----------------------------------------

TITLE: Running MCP Server with Resource Creation Disabled
DESCRIPTION: This Bash command demonstrates how to start the Amazon SNS/SQS MCP server with the `--disallow-resource-creation` flag. When enabled, this flag prevents the server from creating or deleting new Amazon SNS/SQS resources, which is useful for testing or restricting AI model actions.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-sns-sqs-mcp-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
uv run awslabs.amazon-sns-sqs-mcp-server --disallow-resource-creation
```

----------------------------------------

TITLE: Running ECS MCP Server Directly with uv (Bash)
DESCRIPTION: This command executes the ECS MCP Server's `main.py` script directly using `uv`, specifying the server's source directory. This method allows running the server without explicit virtual environment activation.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_6

LANGUAGE: bash
CODE:
```
uv --directory /path/to/ecs-mcp-server/src/ecs-mcp-server/awslabs/ecs_mcp_server run main.py
```

----------------------------------------

TITLE: Configuring Memcached, Git Repo Research, and CloudFormation MCP Servers (Fragment) - JSON
DESCRIPTION: This JSON snippet provides a partial configuration for several AWS Model Context Protocol (MCP) servers, including Memcached, Git Repo Research, and CloudFormation. It defines their `uvx` commands, arguments, and environment variables such as `AWS_PROFILE`, `AWS_REGION`, `GITHUB_TOKEN`, and `FASTMCP_LOG_LEVEL`. This fragment is typically part of a larger `mcp_config.json` file, demonstrating how to set up server commands and their specific environment variables for operation within the Windsurf environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_9

LANGUAGE: JSON
CODE:
```
          ""MEMCACHED_HOST"": ""127.0.0.1"",
          ""MEMCACHED_PORT"": ""11211"",
          ""FASTMCP_LOG_LEVEL"": ""ERROR""
        },
        ""autoApprove"": [],
        ""disabled"": false
    },
    ""awslabs.git-repo-research-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.git-repo-research-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""GITHUB_TOKEN"": ""your-github-token""
      },
      ""disabled"": false,
      ""autoApprove"": []
    },
    ""awslabs.cloudformation"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.cfn-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Initializing Terragrunt Configuration (Python)
DESCRIPTION: This snippet demonstrates how to initialize a Terragrunt working directory using `ExecuteTerragruntCommand` with the 'init' command. This prepares the underlying Terraform modules and provider plugins. The `working_directory` parameter specifies the path where Terragrunt should be initialized.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_6

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(
    command=""init"",
    working_directory=""./project_dir""
))
```

----------------------------------------

TITLE: Configuring MCP Client for ECS MCP Server (JSON)
DESCRIPTION: This JSON configuration snippet defines how the MCP client should interact with the ECS MCP Server. It specifies the command (`uv`) and arguments to run the server, along with environment variables for AWS profile, region, and logging settings (level and file path).
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_9

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.ecs-mcp-server"": {
      ""command"": ""uv"",
      ""args"": [
        ""--directory"",
        ""/path/to/ecs-mcp-server/src/ecs-mcp-server/awslabs/ecs_mcp_server"",
        ""run"",
        ""main.py""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""your-aws-region"",
        ""FASTMCP_LOG_LEVEL"": ""DEBUG"",
        ""FASTMCP_LOG_FILE"": ""/path/to/logs/ecs-mcp-server.log""
      }
    }
  }
}
```

----------------------------------------

TITLE: Verifying ElastiCache Valkey Connection with Valkey CLI
DESCRIPTION: This command uses the Valkey CLI to connect to the ElastiCache Valkey cache via the local port configured in the SSH tunnel. It verifies that the connection to the cache is successfully established from the local machine, confirming the tunnel's functionality.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/ELASTICACHECONNECT.md#_snippet_2

LANGUAGE: Bash
CODE:
```
valkey-cli -h 127.0.0.1 -p LOCAL_PORT
```

----------------------------------------

TITLE: Generate New Server Project with Cookiecutter
DESCRIPTION: Optionally use uvx and cookiecutter to generate a new server project structure based on a template from the mcp repository. The new files will be created under the specified output directory.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_5

LANGUAGE: Shell
CODE:
```
uvx cookiecutter https://github.com/awslabs/mcp.git --checkout cookiecutters --output-dir ./src --directory python
```

----------------------------------------

TITLE: Searching GitHub Repositories by Keywords (Python)
DESCRIPTION: The `search_repositories_on_github` function allows searching for GitHub repositories based on a list of `keywords`. By default, it scopes searches to AWS-related organizations (aws-samples, aws-solutions-library-samples, awslabs) and can limit the `num_results`. A `GITHUB_TOKEN` environment variable can be set for higher rate limits.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_3

LANGUAGE: python
CODE:
```
search_repositories_on_github(
    keywords: List[str],
    num_results: int = 5
) -> Dict
```

----------------------------------------

TITLE: Troubleshooting: Re-installing Dependencies and Activating Env (Bash)
DESCRIPTION: Provides troubleshooting steps to resolve issues like missing packages by re-synchronizing dependencies with uv and reactivating the virtual environment.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-nova-canvas/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
uv sync
source .venv/bin/activate
```

----------------------------------------

TITLE: Troubleshooting Virtual Environment Activation (Bash)
DESCRIPTION: Re-activates the virtual environment as a troubleshooting step if dependencies are not found. This confirms that the correct environment containing the installed packages is active before running the application components.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: AWS Labs MCP Development Workflow Diagram - Mermaid
DESCRIPTION: A flowchart illustrating the development workflow for Terraform and Terragrunt projects, from initial code editing through validation, security scanning, initialization, and planning, culminating in code readiness for deployment. It highlights decision points and iteration loops.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_0

LANGUAGE: Mermaid
CODE:
```
flowchart TD
    start([Start Development]) --> detectConfig[Identify Project Type:\nTerraform or Terragrunt]

    detectConfig --> edit[Edit Code]

    %% Initial Code Validation
    edit --> validate[Run Validation:\nterraform validate or terragrunt validate\nvia ExecuteTerraformCommand]

    %% Validation Flow
    validate -->|Passes| checkovScan[Run Security Scan\nvia RunCheckovScan]
    validate -->|Fails| fixValidation[Fix Configuration\nIssues]
    fixValidation --> edit

    %% Checkov Flow
    checkovScan -->|No Issues| initCmd[Run Init Command:\nterraform init or terragrunt init\nvia ExecuteTerraformCommand]
    checkovScan -->|Finds Issues| reviewIssues[Review Security\nIssues]

    reviewIssues --> manualFix[Fix Security Issues]
    manualFix --> edit

    %% Init & Plan (No Apply)
    initCmd -->|Success| planCmd[Run Plan Command:\nterraform plan or terragrunt plan\nvia ExecuteTerraformCommand]
    initCmd -->|Fails| fixInit[Fix Provider/Module\nIssues]
    fixInit --> edit

    %% Final Review & Handoff to Developer
    planCmd -->|Plan Generated| reviewPlan[Review Planned Changes]
    planCmd -->|Issues Detected| edit

    reviewPlan --> codeReady[Valid, Secure Code Ready\nfor Developer Review]

    %% Iteration for Improvements
    codeReady --> newChanges{Need Code\nImprovements?}
    newChanges -->|Yes| edit
    newChanges -->|No| handoff([Hand Off to Developer\nfor Deployment Decision])

    %% Styling
    classDef success fill:#bef5cb,stroke:#28a745
    classDef warning fill:#fff5b1,stroke:#dbab09
    classDef error fill:#ffdce0,stroke:#cb2431
    classDef process fill:#f1f8ff,stroke:#0366d6
    classDef decision fill:#d1bcf9,stroke:#8a63d2
    classDef mcptool fill:#d0f0fd,stroke:#0969da,font-style:italic
    classDef handoff fill:#ffdfb6,stroke:#f9a03f

    class codeReady success
    class reviewIssues,reviewPlan warning
    class fixValidation,fixInit,manualFix error
    class edit process
    class detectConfig,newChanges decision
    class validate,checkovScan,initCmd,planCmd mcptool
    class handoff handoff
```

----------------------------------------

TITLE: Accessing File or Directory Contents (Python)
DESCRIPTION: The `access_file` function provides a way to retrieve the contents of a specified `filepath`, which can be within an indexed repository or on the local filesystem. It supports accessing both text and binary content, returning either a dictionary for text or an `ImageContent` object for images.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_4

LANGUAGE: python
CODE:
```
access_file(
    filepath: str
) -> Dict | ImageContent
```

----------------------------------------

TITLE: Running All Tests with Script - Bash
DESCRIPTION: This command executes all tests for the `stepfunctions-tool-mcp-server` using a convenience script. The script automatically handles the installation of `pytest` and its dependencies if they are not already present, simplifying the test execution process.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
./run_tests.sh
```

----------------------------------------

TITLE: Get CDK Guidance with MCP Tool Command
DESCRIPTION: This snippet illustrates using the `CDKGeneralGuidance` tool on the `awslabs.cdk-mcp-server`. It is used to obtain general guidance related to AWS Cloud Development Kit (CDK) infrastructure setup, requiring an empty arguments object.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_2

LANGUAGE: MCP Tool Command
CODE:
```
# Getting CDK infrastructure guidance
<use_mcp_tool>
<server_name>awslabs.cdk-mcp-server</server_name>
<tool_name>CDKGeneralGuidance</tool_name>
<arguments>
{}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Configuring MCP Client with Docker for Neptune (JSON)
DESCRIPTION: This JSON configuration snippet demonstrates how to configure an MCP client to run the Amazon Neptune MCP server within a Docker container. It includes Docker-specific commands and arguments, along with environment variables for logging and the Neptune endpoint.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-neptune-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.amazon-neptune-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""-i"",
          ""awslabs/amazon-neptune-mcp-server""
        ],
        ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""INFO"",
        ""NEPTUNE_ENDPOINT"": ""<INSERT NEPTUNE ENDPOINT IN FORMAT SPECIFIED BELOW>""
        },
        ""disabled"": false,
        ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring AWS Serverless MCP Server with Default Profile (JSON)
DESCRIPTION: This JSON configuration snippet sets up the AWS Serverless MCP Server within an MCP client. It specifies the command and arguments for launching the server, allowing for custom AWS profile and region settings via environment variables. This configuration enables write access and sensitive data access, suitable for standard development environments.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-serverless-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.aws-serverless-mcp-server@latest"",
        ""--allow-write"",
        ""--allow-sensitive-data-access""
      ],
      ""env"": {
          ""AWS_PROFILE"": ""your-aws-profile"",
          ""AWS_REGION"": ""us-east-1""
        },
      ""disabled"": false,
      ""autoApprove"": [],
      ""timeout"": 60
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server with Docker
DESCRIPTION: This JSON configuration shows how to integrate the `awslabs.terraform-mcp-server` by running it as a Docker container. It defines the `command` as ""docker"" and provides `args` for running the container, including removing it after exit (`--rm`), running interactively (`--interactive`), and setting the `FASTMCP_LOG_LEVEL` environment variable. This setup is used after successfully building the Docker image.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.terraform-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""awslabs/terraform-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Running Integration/LLM Tests (Bash Script)
DESCRIPTION: These commands navigate to the integration testing directory and execute the `run_tests.sh` script, which orchestrates the setup, execution, and cleanup of integration and LLM-specific test scenarios.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_13

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server/tests/llm_testing
./run_tests.sh
```

----------------------------------------

TITLE: Running the Streamlit App (Bash)
DESCRIPTION: Launches the Streamlit user interface for the image generator, making it accessible via a web browser.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-nova-canvas/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
streamlit run user_interfaces/image_generator_st.py
```

----------------------------------------

TITLE: Retrieving Place Details by ID in Python
DESCRIPTION: This Python function signature for `get_place` enables fetching detailed information about a specific location using its unique `place_id`. An optional `mode` parameter, defaulting to 'summary', allows control over the level of detail returned. The function is designed to return a dictionary containing the place's details.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_5

LANGUAGE: python
CODE:
```
get_place(place_id: str, mode: str = 'summary') -> dict
```

----------------------------------------

TITLE: Searching Open Places with Radius Expansion - Amazon Location Service (Python)
DESCRIPTION: This function searches for places that are currently open. It supports radius expansion to find results within a larger area if initial attempts are unsuccessful. Key parameters include the search query, maximum results, initial search radius, maximum allowed radius, and the expansion factor.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_8

LANGUAGE: python
CODE:
```
search_places_open_now(query: str, max_results: int = 5, initial_radius: int = 500,
                       max_radius: int = 50000, expansion_factor: float = 2.0) -> dict
```

----------------------------------------

TITLE: Searching Nearby Places in Python
DESCRIPTION: This Python function signature for `search_nearby` allows searching for places within a specified radius of a given longitude and latitude. It includes optional parameters for `radius`, `max_results`, a `query` string, `max_radius`, and `expansion_factor` to refine the search. The `mode` parameter controls the output detail, and the function returns a dictionary of nearby places.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_7

LANGUAGE: python
CODE:
```
search_nearby(longitude: float, latitude: float, radius: int = 500, max_results: int = 5,
              query: str = None, max_radius: int = 10000, expansion_factor: float = 2.0,
              mode: str = 'summary') -> dict
```

----------------------------------------

TITLE: Expected CloudFormation Stack Failure Output (Shell)
DESCRIPTION: This snippet displays the expected output when a CloudFormation stack fails due to a missing NetworkConfiguration for an AWS ECS Fargate service. It shows the DescribeStackEvents output, highlighting the InvalidRequest error and the specific reason for the failure, which is the requirement for NetworkConfiguration.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/01_cloudformation_failure/03_prompts.txt#_snippet_0

LANGUAGE: Shell
CODE:
```
✅ Stack has failed as expected.
Fetching error details...
---------------------------------------------------------------------------------------------------------
|                                       DescribeStackEvents                                             |
+---------------------------+--------------------------------------------------------------------------|
|         Resource          |                               Reason                                      |
+---------------------------+--------------------------------------------------------------------------|
|  ECSService               |  Resource handler returned message: ""Resource handler returned message:   |
|                           |  ""NetworkConfiguration is required for AWS::ECS::Service resources with   |
|                           |  LaunchType FARGATE"""" (RequestToken: 123abc-456def-789ghi,               |
|                           |  HandlerErrorCode: InvalidRequest)                                        |
+---------------------------+--------------------------------------------------------------------------|
```

----------------------------------------

TITLE: Python Function Signature for Reading Documentation
DESCRIPTION: This Python function signature defines `read_documentation`, which fetches an AWS documentation page and converts it to markdown. It takes a `url` (string) as input and returns the converted content as a string.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/README.md#_snippet_2

LANGUAGE: python
CODE:
```
read_documentation(url: str) -> str
```

----------------------------------------

TITLE: Configuring AWS Labs Postgres MCP Server with uvx
DESCRIPTION: This JSON configuration snippet demonstrates how to integrate the AWS Labs Postgres MCP server with an LLM client, such as Amazon Q Developer CLI, using the `uvx` command. It specifies the command, arguments for resource, secret, database, region, and read-only mode, along with environment variables for AWS profile and logging level. This setup allows the LLM client to interact with the Aurora Postgres database via the MCP server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/postgres-mcp-server/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.postgres-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.postgres-mcp-server@latest"",
        ""--resource_arn"", ""[your data]"",
        ""--secret_arn"", ""[your data]"",
        ""--database"", ""[your data]"",
        ""--region"", ""[your data]"",
        ""--readonly"", ""True""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring AWS Step Functions MCP Server with Docker
DESCRIPTION: This JSON snippet configures the `awslabs.stepfunctions-tool-mcp-server` within the MCP framework. It specifies the Docker command and arguments to run the server, including environment variables for AWS region, state machine filtering (prefix, list, tags), and a path to an `.env` file for credentials. It also shows `env`, `disabled`, and `autoApprove` properties.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_3

LANGUAGE: json
CODE:
```
{
    ""mcpServers"": {
      ""awslabs.stepfunctions-tool-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""AWS_REGION=us-east-1"",
          ""--env"",
          ""STATE_MACHINE_PREFIX=your-state-machine-prefix"",
          ""--env"",
          ""STATE_MACHINE_LIST=your-first-state-machine,your-second-state-machine"",
          ""--env"",
          ""STATE_MACHINE_TAG_KEY=your-tag-key"",
          ""--env"",
          ""STATE_MACHINE_TAG_VALUE=your-tag-value"",
          ""--env"",
          ""STATE_MACHINE_INPUT_SCHEMA_ARN_TAG_KEY=your-state-machine-tag-for-input-schema"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/stepfunctions-tool-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: AWS CLI Assume Role Output (JSON)
DESCRIPTION: This JSON object represents the output of the `aws sts assume-role` command. It contains the temporary `AccessKeyId`, `SecretAccessKey`, and `SessionToken` needed to authenticate with AWS using the assumed role's permissions, along with the expiration time.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_5

LANGUAGE: JSON
CODE:
```
{
""AssumedRoleUser"": {
""AssumedRoleId"": ""AROA3XFRBF535PLBIFPI4:terraform-session-example"",
""Arn"": ""arn:aws:sts::111122223333:assumed-role/terraform-execution/terraform-
session-example""
},
""Credentials"": {
""SecretAccessKey"": "" wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"",
""SessionToken"": "" AQoEXAMPLEH4aoAH0gNCAPyJxz4BlCFFxWNE1OPTgk5TthT
+FvwqnKwRcOIfrRh3c/LTo6UDdyJwOOvEVPvLXCrrrUtdnniCEXAMPLE/
IvU1dYUg2RVAJBanLiHb4IgRmpRV3zrkuvWJOgQs8IZZaIv2BXIa2R4OlgkBN9bkUDNCJiBeb/
AXlzBBko7b15fjrBs2+cTQtpZ3CYWFXG8C5zqx37wnOE49mRl/+OtkIKGO7fAE"",
""Expiration"": ""2024-03-15T00:05:07Z"",
""AccessKeyId"": ...
}
}
```

----------------------------------------

TITLE: Configuring AWS Support MCP Server with uvx for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration snippet shows how to set up the AWS Support MCP server using `uvx` as the command, typically for integration with Amazon Q Developer CLI. It specifies the module to run, enables debug logging, directs logs to a file, and sets an AWS profile environment variable.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-support-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
   ""mcpServers"": {
      ""awslabs_support_mcp_server"": {
         ""command"": ""uvx"",
         ""args"": [
            ""-m"", ""awslabs.aws-support-mcp-server@latest"",
            ""--debug"",
            ""--log-file"",
            ""./logs/mcp_support_server.log""
         ],
         ""env"": {
            ""AWS_PROFILE"": ""your-aws-profile""
         }
      }
   }
}
```

----------------------------------------

TITLE: Configuring MCP Server with uvx Command in Amazon Q Developer CLI
DESCRIPTION: This JSON configuration block defines how to integrate the AWS Documentation MCP server using the `uvx` command. It specifies the command, arguments, environment variables (like `FASTMCP_LOG_LEVEL`), and approval settings for automatic server startup within the Amazon Q Developer CLI.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-documentation-mcp-server"": {
        ""command"": ""uvx"",
        ""args"": [""awslabs.aws-documentation-mcp-server@latest""],
        ""env"": {
          ""FASTMCP_LOG_LEVEL"": ""ERROR""
        },
        ""disabled"": false,
        ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Defining Package Name in pyproject.toml
DESCRIPTION: Illustrates the `awslabs` namespace and hyphenated package naming convention within the `pyproject.toml` file, which is used for Python project configuration.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_3

LANGUAGE: TOML
CODE:
```
name = ""awslabs.nova-canvas-mcp-server""
```

----------------------------------------

TITLE: Running Unit Tests with Coverage (Shell)
DESCRIPTION: Executes unit tests for the server using `uv run` and `pytest`, including flags for collecting and reporting code coverage information.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_15

LANGUAGE: Shell
CODE:
```
uv run --frozen pytest --cov --cov-branch --cov-report=term-missing
```

----------------------------------------

TITLE: Configuring MCP Server for Input Schema ARN Tag Key
DESCRIPTION: This JSON snippet demonstrates how to configure the `STATE_MACHINE_INPUT_SCHEMA_ARN_TAG_KEY` environment variable within the MCP server's configuration. This setting tells the server which tag key to look for on state machines to retrieve their associated input schema ARNs.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_7

LANGUAGE: json
CODE:
```
{
       ""env"": {
         ""STATE_MACHINE_INPUT_SCHEMA_ARN_TAG_KEY"": ""your-schema-arn-tag-key""
       }
     }
```

----------------------------------------

TITLE: Standard Directory Structure for AWS MCP Samples (Bash)
DESCRIPTION: This snippet illustrates the standard directory structure for samples within the AWS MCP Servers project. Each 'project-name' directory contains a 'README.md' and its associated sample code and resources, ensuring consistent organization across all examples.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
samples/
├── project-name/
│   ├── README.md
│   └── (sample code and resources)
```

----------------------------------------

TITLE: Configuring MCP Server with uvx for Local Execution (JSON)
DESCRIPTION: This JSON snippet configures the AWS Labs MySQL MCP server for local execution using `uvx`. It specifies the command, arguments for resource and secret ARNs, database, region, and read-only mode. Environment variables like `AWS_PROFILE`, `AWS_REGION`, and `FASTMCP_LOG_LEVEL` are also set. This configuration is typically found in `~/.aws/amazonq/mcp.json` for Amazon Q Developer CLI.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mysql-mcp-server/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.mysql-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.mysql-mcp-server@latest"",
        ""--resource_arn"", ""[your data]"",
        ""--secret_arn"", ""[your data]"",
        ""--database"", ""[your data]"",
        ""--region"", ""[your data]"",
        ""--readonly"", ""True""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server with Docker for LLM Client (JSON)
DESCRIPTION: This JSON snippet configures an LLM client to use the AWS Labs MySQL MCP server via Docker. It defines the `command` as 'docker' and provides `args` to run the Docker container, passing AWS credentials and Aurora MySQL connection details as environment variables and command-line arguments. By default, it enables read-only queries, which can be changed by setting `--readonly` to `False`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mysql-mcp-server/README.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.mysql-mcp-server"": {
      ""command"": ""docker"",
      ""args"": [
        ""run"",
        ""-i"",
        ""--rm"",
        ""-e"", ""AWS_ACCESS_KEY_ID=[your data]"",
        ""-e"", ""AWS_SECRET_ACCESS_KEY=[your data]"",
        ""-e"", ""AWS_REGION=[your data]"",
        ""awslabs/mysql-mcp-server:latest"",
        ""--resource_arn"", ""[your data]"",
        ""--secret_arn"", ""[your data]"",
        ""--database"", ""[your data]"",
        ""--region"", ""[your data]"",
        ""--readonly"", ""True""
      ]
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server for Amazon Q Developer CLI
DESCRIPTION: This JSON snippet provides an example configuration for integrating the `awslabs.stepfunctions-tool-mcp-server` with an MCP client, such as the Amazon Q Developer CLI. It defines the command to execute the server (`uvx`), arguments, and environment variables for AWS profile, region, state machine filtering (prefix, list, tags), and input schema ARN tag.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.stepfunctions-tool-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.stepfunctions-tool-mcp-server@latest""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1"",
        ""STATE_MACHINE_PREFIX"": ""your-state-machine-prefix"",
        ""STATE_MACHINE_LIST"": ""your-first-state-machine, your-second-state-machine"",
        ""STATE_MACHINE_TAG_KEY"": ""your-tag-key"",
        ""STATE_MACHINE_TAG_VALUE"": ""your-tag-value"",
        ""STATE_MACHINE_INPUT_SCHEMA_ARN_TAG_KEY"": ""your-state-machine-tag-for-input-schema""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring AWS Lambda MCP Server with Docker
DESCRIPTION: This JSON snippet illustrates the configuration for the 'awslabs.lambda-tool-mcp-server' within an MCP server setup. It specifies the Docker command and arguments, including environment variables for AWS region, function filtering (prefix, list, tags), schema ARN tag key, and references an external .env file for credentials.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
{
    ""mcpServers"": {
      ""awslabs.lambda-tool-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""AWS_REGION=us-east-1"",
          ""--env"",
          ""FUNCTION_PREFIX=your-function-prefix"",
          ""--env"",
          ""FUNCTION_LIST=your-first-function,your-second-function"",
          ""--env"",
          ""FUNCTION_TAG_KEY=your-tag-key"",
          ""--env"",
          ""FUNCTION_TAG_VALUE=your-tag-value"",
          ""--env"",
          ""FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY=your-function-tag-for-input-schema"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/lambda-tool-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Connecting and Querying DocumentDB with MCP (Python)
DESCRIPTION: This Python example demonstrates how to connect to an AWS DocumentDB cluster using the MCP server, perform a `find` operation to query documents from a collection, and then disconnect. It highlights the use of `use_mcp_tool` for interacting with the server's `connect`, `find`, and `disconnect` functionalities.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/documentdb-mcp-server/README.md#_snippet_1

LANGUAGE: python
CODE:
```
connection_result = await use_mcp_tool(
    server_name=""awslabs.aws-documentdb-mcp-server"",
    tool_name=""connect"",
    arguments={
        ""connection_string"": ""mongodb://<username>:<password>@docdb-cluster.cluster-xyz.us-west-2.docdb.amazonaws.com:27017/?tls=true&tlsCAFile=global-bundle.pem""
    }
)
connection_id = connection_result[""connection_id""]

# Query documents
query_result = await use_mcp_tool(
    server_name=""awslabs.aws-documentdb-mcp-server"",
    tool_name=""find"",
    arguments={
        ""connection_id"": connection_id,
        ""database"": ""my_database"",
        ""collection"": ""users"",
        ""query"": {""active"": True},
        ""limit"": 5
    }
)

# Close the connection when done
await use_mcp_tool(
    server_name=""awslabs.aws-documentdb-mcp-server"",
    tool_name=""disconnect"",
    arguments={""connection_id"": connection_id}
)
```

----------------------------------------

TITLE: Generating Pytest HTML Coverage Report (Bash)
DESCRIPTION: Command to run tests, collect coverage for the specified module, and generate an HTML report in the 'htmlcov' directory.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/tests/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.core_mcp_server --cov-report=html
```

----------------------------------------

TITLE: Configuring MCP Client with Resource Creation Flag (uvx command)
DESCRIPTION: This configuration extends the basic MCP client setup by including the `--allow-resource-creation` flag in the `args` array. This flag enables the MCP server to create new Amazon MQ resources, such as brokers and configurations, within the specified AWS account. It's useful for scenarios where resource creation is explicitly permitted.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-mq-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.amazon-mq-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.amazon-mq-mcp-server@latest"", ""--allow-resource-creation""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""us-east-1""
      }
    }
  }
}
```

----------------------------------------

TITLE: Defining Package Version in Python __init__.py
DESCRIPTION: Shows how to declare the package version using the `__version__` variable within the `__init__.py` file, which is a standard practice for Python packages and is used for version synchronization.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_5

LANGUAGE: Python
CODE:
```
""""""awslabs Your MCP Server.""""""

__version__ = ""0.1.0""
```

----------------------------------------

TITLE: Generating HTML Coverage Report (Bash)
DESCRIPTION: This command runs the tests with coverage enabled and then generates a detailed HTML coverage report. The report is typically saved in an `htmlcov` directory, providing a visual overview of code coverage.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/tests/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
./run_tests.sh --coverage --report
```

----------------------------------------

TITLE: Generating Test Coverage Report with Pytest - Bash
DESCRIPTION: This command generates a basic test coverage report for the `awslabs.stepfunctions_tool_mcp_server` module. It uses `pytest-cov` to analyze which lines of code are executed during the tests, providing insights into the test suite's thoroughness.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/tests/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.stepfunctions_tool_mcp_server tests/
```

----------------------------------------

TITLE: Preparing Repository for Analysis (Python)
DESCRIPTION: The `prepare_repository` asynchronous function is designed to extract the directory structure from a given code repository using `repomix`. It takes the `project_root` path and an optional `Context` object, returning a `ProjectAnalysis` template. This template includes the directory structure, which the MCP client then reviews and populates with further project details.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/code-doc-gen-mcp-server/README.md#_snippet_1

LANGUAGE: python
CODE:
```
async def prepare_repository(
    project_root: str = Field(..., description='Path to the code repository'),
    ctx: Context = None,
) -> ProjectAnalysis
```

----------------------------------------

TITLE: Defining and Checking Explicit Allowlists in Python
DESCRIPTION: This Python snippet defines an `ALLOWED_MODULES` dictionary to specify which modules and their functions are permitted for import. The `is_import_allowed` function checks if a given module or a specific function within that module is present in the allowlist, enforcing granular security permissions.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_22

LANGUAGE: python
CODE:
```
# Allowlisted modules that can be safely imported
ALLOWED_MODULES = {
    'os': ['path.join', 'path.basename', 'path.dirname', 'makedirs', 'path.exists'],
    'diagrams': ['*'],  # All diagrams functionality is permitted
    'json': ['dumps', 'loads'],
    # Additional allowed modules and functions
}

def is_import_allowed(module_name, function_name=None):
    """"""Check if a module or function import is allowed.""""""
    if module_name not in ALLOWED_MODULES:
        return False

    if function_name is None:
        return True  # The module itself is allowed

    allowed_functions = ALLOWED_MODULES[module_name]
    if '*' in allowed_functions:
        return True  # All functions from this module are allowed

    return function_name in allowed_functions
```

----------------------------------------

TITLE: Running All Tests Directly with Pytest - Bash
DESCRIPTION: This command uses pytest to run all tests located within the `tests/` directory. The `-x` flag stops the test run on the first failure, `-v` enables verbose output, and `-s` prevents output capture, allowing print statements to be seen.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/tests/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pytest -xvs tests/
```

----------------------------------------

TITLE: Running Specific Test File with Pytest - Bash
DESCRIPTION: This command executes all tests contained within a specified Python test file, such as `test_validate_state_machine_name.py`. The `-xvs` flags ensure verbose output and stop on the first failure, providing immediate feedback on the targeted tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/tests/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pytest -xvs tests/test_validate_state_machine_name.py
```

----------------------------------------

TITLE: Configuring AWS DynamoDB MCP Server with uvx for Amazon Q Developer CLI
DESCRIPTION: This JSON snippet demonstrates how to configure the AWS DynamoDB MCP Server as an `mcpServer` within the Amazon Q Developer CLI's `mcp.json` file. It specifies `uvx` as the command, `awslabs.dynamodb-mcp-server@latest` as arguments, and sets environment variables like `DDB-MCP-READONLY`, `AWS_PROFILE`, `AWS_REGION`, and `FASTMCP_LOG_LEVEL` for server behavior and AWS credentials.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/dynamodb-mcp-server/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.dynamodb-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.dynamodb-mcp-server@latest""],
      ""env"": {
        ""DDB-MCP-READONLY"": ""true"",
        ""AWS_PROFILE"": ""default"",
        ""AWS_REGION"": ""us-west-2"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring ECS MCP Server from Local Repository in MCP Client
DESCRIPTION: This JSON snippet illustrates configuring the ECS MCP Server in the MCP client when running from a local repository. It uses the `uv` command with a directory path to execute `main.py` and includes environment variables for AWS credentials, logging, and security settings such as `ALLOW_WRITE` and `ALLOW_SENSITIVE_DATA`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/README.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.ecs-mcp-server"": {
      ""command"": ""uv"",
      ""args"": [
        ""--directory"",
        ""/path/to/ecs-mcp-server/src/ecs-mcp-server/awslabs/ecs_mcp_server"",
        ""run"",
        ""main.py""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""your-aws-region"",
        ""FASTMCP_LOG_LEVEL"": ""DEBUG"",
        ""FASTMCP_LOG_FILE"": ""/path/to/ecs-mcp-server.log"",
        ""ALLOW_WRITE"": ""false"",
        ""ALLOW_SENSITIVE_DATA"": ""false""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configuring MCP Server with Docker and Temporary AWS Credentials in JSON
DESCRIPTION: This JSON configuration shows how to integrate temporary AWS credentials when running the MCP server via Docker. It passes `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_SESSION_TOKEN`, and `AWS_REGION` as environment variables to the Docker container. This setup is useful for ephemeral environments or CI/CD pipelines requiring temporary access.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.aws-location-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""-i"",
          ""awslabs/aws-location-mcp-server""
        ],
        ""env"": {
          ""AWS_ACCESS_KEY_ID"": ""your-temporary-access-key"",
          ""AWS_SECRET_ACCESS_KEY"": ""your-temporary-secret-key"",
          ""AWS_SESSION_TOKEN"": ""your-session-token"",
          ""AWS_REGION"": ""us-east-1""
        },
        ""disabled"": false,
        ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Configuring ECS MCP Server with uvx Command in MCP Client
DESCRIPTION: This JSON snippet demonstrates how to configure the ECS MCP Server within the MCP client using the `uvx` command. It sets up the server with arguments for fetching from a package and defines environment variables for AWS profile, region, logging, and security controls like `ALLOW_WRITE` and `ALLOW_SENSITIVE_DATA`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.ecs-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""--from"", ""awslabs-ecs-mcp-server"", ""ecs-mcp-server""],
      ""env"": {
        ""AWS_PROFILE"": ""your-aws-profile"",
        ""AWS_REGION"": ""your-aws-region"",
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""FASTMCP_LOG_FILE"": ""/path/to/ecs-mcp-server.log"",
        ""ALLOW_WRITE"": ""false"",
        ""ALLOW_SENSITIVE_DATA"": ""false""
      }
    }
  }
}
```

----------------------------------------

TITLE: Using LambdaLayerDocumentationProvider (Python)
DESCRIPTION: This snippet shows how to invoke the `LambdaLayerDocumentationProvider` tool, likely a command-line tool or script, to generate documentation or guidance specifically for creating a Python Lambda layer. It specifies the layer type as ""python"".
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cdk-mcp-server/awslabs/cdk_mcp_server/static/lambda_powertools/cdk.md#_snippet_0

LANGUAGE: python
CODE:
```
LambdaLayerDocumentationProvider(layer_type=""python"")
```

----------------------------------------

TITLE: Cleaning UV Cache for MCP Server (Bash)
DESCRIPTION: This command removes a specified MCP server from the `uv` cache, allowing for a fresh installation. Replace `<tool>` with the exact server identifier, such as 'awslabs.lambda-mcp-server'.
SOURCE: https://github.com/awslabs/mcp/blob/main/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
uv cache clean <tool>
```

----------------------------------------

TITLE: Navigating to Sample Directory (Bash)
DESCRIPTION: Changes the current directory to the specific sample location within the cloned `mcp` repository that contains the Bedrock Knowledge Base integration code. This is necessary to proceed with the setup steps.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd mcp/samples/mcp-integration-with-kb
```

----------------------------------------

TITLE: Inserting Documents into DocumentDB with MCP Tool (Python)
DESCRIPTION: This snippet illustrates how to perform a write operation to insert documents into a DocumentDB collection using the `use_mcp_tool` function. For this operation to succeed, the MCP server must be started with the `--allow-write` flag; otherwise, it will result in a `ValueError` indicating read-only mode.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/documentdb-mcp-server/README.md#_snippet_4

LANGUAGE: Python
CODE:
```
insert_result = await use_mcp_tool(
    server_name=""awslabs.aws-documentdb-mcp-server"",
    tool_name=""insert"",
    arguments={
        ""connection_id"": connection_id,
        ""database"": ""my_database"",
        ""collection"": ""users"",
        ""documents"": {""name"": ""New User"", ""active"": True}
    }
)
```

----------------------------------------

TITLE: Running Pytest with Coverage (Bash)
DESCRIPTION: Command to run tests and collect code coverage data for the specified module, 'awslabs.core_mcp_server'.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/tests/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.core_mcp_server
```

----------------------------------------

TITLE: Running Specific Unit Test File (Python/Pytest)
DESCRIPTION: This command executes `pytest` to run all test cases within the specified `test_main.py` file, allowing developers to focus on testing particular components or features.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_11

LANGUAGE: bash
CODE:
```
python -m pytest tests/unit/test_main.py
```

----------------------------------------

TITLE: Run Tests with Coverage (Bash)
DESCRIPTION: Execute tests and collect coverage data for the specified module using pytest-cov.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/tests/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.bedrock_kb_retrieval_mcp_server tests/
```

----------------------------------------

TITLE: Diagnosing ECS Failures with fetch_task_failures Tool
DESCRIPTION: This prompt specifically instructs the AI to use the 'fetch_task_failures' tool to diagnose an ECS task failure, highlighting symptoms like a failing stress test command.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/05_resource_constraint_failure/03_prompts.txt#_snippet_1

LANGUAGE: Plain Text
CODE:
```
My ECS task ""[TASK_FAMILY]"" in cluster ""[CLUSTER_NAME]"" is failing after starting. Can you use the fetch_task_failures tool to check what might be causing these failures? I see the container is trying to run stress tests but failing.
```

----------------------------------------

TITLE: Example State Machine Comment Field for Workflow Context
DESCRIPTION: This JSON snippet illustrates the `Comment` field within a state machine definition. This field is used by the MCP server to add workflow context to the tool documentation, explaining the flow and purpose of the state machine.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_5

LANGUAGE: json
CODE:
```
{
     ""Comment"": ""This workflow first looks up a customer ID from email, then retrieves their info"",
     ""StartAt"": ""GetCustomerId"",
     ""States"": { ... }
   }
```

----------------------------------------

TITLE: Indexing Git Repository with Bedrock Embeddings (Python)
DESCRIPTION: The `create_research_repository` function indexes a Git repository, either local or remote, to create a searchable FAISS index using Amazon Bedrock embeddings. It accepts parameters for the repository path, optional output path, embedding model, include/exclude patterns for files, and chunking parameters to control how content is processed.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_1

LANGUAGE: python
CODE:
```
create_research_repository(
    repository_path: str,
    output_path: Optional[str] = None,
    embedding_model: str = ""amazon.titan-embed-text-v2:0"",
    include_patterns: Optional[List[str]] = None,
    exclude_patterns: Optional[List[str]] = None,
    chunk_size: int = 1000,
    chunk_overlap: int = 200
) -> Dict
```

----------------------------------------

TITLE: Configuring MCP Server with Docker Command (JSON)
DESCRIPTION: This JSON configuration snippet demonstrates how to integrate the `awslabs.amazon-kendra-index-mcp-server` into an MCP client using Docker. It specifies the `docker run` command, passes an environment file (`--env-file`), and sets the Docker image to use, allowing the MCP server to run as a container.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-kendra-index-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
  {
    ""mcpServers"": {
      ""awslabs.amazon-kendra-index-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env-file"",
          ""/full/path/to/file/above/.env"",
          ""awslabs/amazon-kendra-index-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Defining Security Group Rules (Avoided Pattern) - Terraform
DESCRIPTION: This snippet demonstrates the discouraged pattern of defining ingress and egress rules directly within the `aws_security_group` resource block. This approach can lead to cause-and-effect issues and is less modular than using separate rule resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_13

LANGUAGE: HCL
CODE:
```
resource ""aws_security_group"" ""allow_tls"" {
...
ingress {
description      = ""TLS from VPC""
from_port        = 443
to_port          = 443
protocol         = ""tcp""
cidr_blocks      = [aws_vpc.main.cidr_block]
ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block]
}
egress {
from_port        = 0
to_port          = 0
protocol         = ""-1""
cidr_blocks      = [""0.0.0.0/0""]
ipv6_cidr_blocks = [""::/0""]
}
}
```

----------------------------------------

TITLE: Generate Image with Nova Canvas MCP Tool Command
DESCRIPTION: This snippet demonstrates using the `generate_image` tool on the `awslabs.nova-canvas-mcp-server` to create visual assets like architecture diagrams. It takes parameters for the image `prompt`, `negative_prompt`, `width`, `height`, `quality`, and a `workspace_dir`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_3

LANGUAGE: MCP Tool Command
CODE:
```
# Generating architecture visualization
<use_mcp_tool>
<server_name>awslabs.nova-canvas-mcp-server</server_name>
<tool_name>generate_image</tool_name>
<arguments>
{
  ""prompt"": ""3D isometric view of AWS cloud architecture with Lambda functions, API Gateway, and DynamoDB tables, professional technical diagram style"",
  ""negative_prompt"": ""text labels, blurry, distorted"",
  ""width"": 1024,
  ""height"": 1024,
  ""quality"": ""premium"",
  ""workspace_dir"": ""/path/to/workspace""
}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Configuring AWS Temporary Credentials in .env
DESCRIPTION: This snippet shows how to define temporary AWS credentials (access key ID, secret access key, and session token) in a `.env` file. These credentials are used by applications to authenticate with AWS services. It's crucial to keep these credentials refreshed as they are temporary.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk
```

----------------------------------------

TITLE: Running All Tests with Script - Bash
DESCRIPTION: This command executes the `run_tests.sh` script located in the project's root directory. It automatically handles the installation of pytest and its dependencies, providing a convenient way to run all tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
./run_tests.sh
```

----------------------------------------

TITLE: Executing Individual CloudFormation Failure Scenario (Bash)
DESCRIPTION: This snippet illustrates the steps to manually run a single test scenario, specifically the CloudFormation stack failure. It involves navigating to the scenario directory, executing the creation script, validating the failure, and finally cleaning up the created resources. This allows for focused testing and debugging of specific failure types.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server/tests/llm_testing/scenarios/01_cloudformation_failure
./01_create.sh
# Wait for resources to be created and fail
./02_validate.sh
# Test with Cline using prompts from 03_prompts.txt
# When testing is complete
./05_cleanup.sh
```

----------------------------------------

TITLE: Configuring AWS Support MCP Server with direct Python path
DESCRIPTION: This JSON configuration snippet illustrates how to set up the AWS Support MCP server by directly specifying the Python executable path. It defines the module to run, enables debug logging, directs logs to a file, and sets a specific AWS profile environment variable for manual enterprise setup.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-support-mcp-server/README.md#_snippet_2

LANGUAGE: json
CODE:
```
{
   ""mcpServers"": {
      ""awslabs_support_mcp_server"": {
         ""command"": ""path-to-python"",
         ""args"": [
            ""-m"",
            ""awslabs.aws_support_mcp_server.server"",
            ""--debug"",
            ""--log-file"",
            ""./logs/mcp_support_server.log""
         ],
         ""env"": {
            ""AWS_PROFILE"": ""manual_enterprise""
         }
      }
   }
}
```

----------------------------------------

TITLE: Example AWS Temporary Credentials in .env
DESCRIPTION: This snippet shows a fictitious `.env` file containing temporary AWS credentials (access key ID, secret access key, and session token). These credentials are used by applications to authenticate with AWS services, and will need to be kept refreshed from the host.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk
```

----------------------------------------

TITLE: Configuring Ruff Linting and Formatting (TOML)
DESCRIPTION: This TOML configuration for `pyproject.toml` sets up `ruff` linting and formatting rules for Python projects. It specifies the line length, target Python version, selected linting rules, ignored rules, known first-party imports for `isort`, and formatting preferences like quote style and indentation.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_30

LANGUAGE: TOML
CODE:
```
[tool.ruff]
line-length = 99
target-version = ""py310""

[tool.ruff.lint]
select = [""E"", ""F"", ""I"", ""B"", ""Q""]
ignore = [""E203"", ""E501""]

[tool.ruff.lint.isort]
known-first-party = [""awslabs""]

[tool.ruff.format]
quote-style = ""single""
indent-style = ""space""
line-ending = ""auto""
```

----------------------------------------

TITLE: Defining Security Group Rules (Preferred Pattern) - Terraform
DESCRIPTION: This snippet shows the recommended practice of using separate `aws_security_group_rule` resources to attach rules to an `aws_security_group`. This method improves clarity, modularity, and avoids potential side effects associated with embedded rules.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_14

LANGUAGE: HCL
CODE:
```
resource ""aws_security_group"" ""allow_tls"" {
...
}

resource ""aws_security_group_rule"" ""example"" {
type              = ""ingress""
description      = ""TLS from VPC""
from_port        = 443
to_port          = 443
protocol         = ""tcp""
cidr_blocks      = [aws_vpc.main.cidr_block]
ipv6_cidr_blocks = [aws_vpc.main.ipv6_cidr_block]
security_group_id = aws_security_group.allow_tls.id
}
```

----------------------------------------

TITLE: Searching Places using Amazon Location Service in Python
DESCRIPTION: This Python function signature defines the `search_places` tool, which allows users to search for locations using Amazon Location Service's geocoding capabilities. It takes a `query` string, an optional `max_results` integer (defaulting to 5), and a `mode` string (defaulting to 'summary') to control the output detail. The function returns a dictionary containing the search results.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_4

LANGUAGE: python
CODE:
```
search_places(query: str, max_results: int = 5, mode: str = 'summary') -> dict
```

----------------------------------------

TITLE: Configuring Basic Memcached Connection (Bash)
DESCRIPTION: This Bash snippet illustrates environment variables used to configure basic connection settings for the Memcached server. It includes `MEMCACHED_HOST`, `MEMCACHED_PORT`, `MEMCACHED_TIMEOUT`, `MEMCACHED_CONNECT_TIMEOUT`, `MEMCACHED_RETRY_TIMEOUT`, and `MEMCACHED_MAX_RETRIES` to control host, port, and various timeout/retry behaviors.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
# Basic settings
MEMCACHED_HOST=127.0.0.1          # Memcached server hostname
MEMCACHED_PORT=11211              # Memcached server port
MEMCACHED_TIMEOUT=1              # Operation timeout in seconds
MEMCACHED_CONNECT_TIMEOUT=5      # Connection timeout in seconds
MEMCACHED_RETRY_TIMEOUT=1        # Retry delay in seconds
MEMCACHED_MAX_RETRIES=3         # Maximum number of retry attempts
```

----------------------------------------

TITLE: Importing Python Module with Underscores
DESCRIPTION: Demonstrates how to import a Python module that follows the `awslabs` namespace and uses underscores in its name, reflecting the package naming convention for Python imports.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_4

LANGUAGE: Python
CODE:
```
from awslabs.nova_canvas_mcp_server import models
```

----------------------------------------

TITLE: Running All Unit Tests (Python/Pytest)
DESCRIPTION: These commands navigate to the server's source directory and then execute all unit tests located in the `tests/unit` directory using `pytest`, ensuring core functionalities work as expected.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_10

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server
python -m pytest tests/unit
```

----------------------------------------

TITLE: Analyze Prompt with MCP Tool Command
DESCRIPTION: This snippet demonstrates how to use the `prompt_understanding` tool on the `awslabs.core-mcp-server`. It is intended for analyzing user requirements or prompts, taking an empty arguments object.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_0

LANGUAGE: MCP Tool Command
CODE:
```
# Understanding the user's requirements
<use_mcp_tool>
<server_name>awslabs.core-mcp-server</server_name>
<tool_name>prompt_understanding</tool_name>
<arguments>
{}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Initializing LambdaToSns Construct in TypeScript
DESCRIPTION: This snippet demonstrates how to initialize the `LambdaToSns` construct in TypeScript using AWS CDK. It configures a new Lambda function with a specified runtime, handler, and code asset, connecting it to an SNS topic. This is a minimal deployable pattern.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/tests/resources/lambda_sns_raw.html#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { Construct } from 'constructs'; import { Stack, StackProps } from 'aws-cdk-lib'; import { LambdaToSns, LambdaToSnsProps } from ""@aws-solutions-constructs/aws-lambda-sns""; import * as lambda from 'aws-cdk-lib/aws-lambda';  new LambdaToSns(this, 'test-lambda-sns', {   lambdaFunctionProps: {     runtime: lambda.Runtime.NODEJS_20_X,     handler: 'index.handler',     code: lambda.Code.fromAsset(`lambda`)   } });
```

----------------------------------------

TITLE: Declare AWS Provider Requirement (Pessimistic Constraint)
DESCRIPTION: This Terraform block demonstrates using the pessimistic constraint operator (~>) for the AWS provider version. This allows only the rightmost version component to increment, ensuring compatibility within a major version series (e.g., 4.x) but preventing automatic upgrades to a new major version (e.g., 5.0.0).
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_12

LANGUAGE: HCL
CODE:
```
terraform {
  required_version = "">= 1.0.0""
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 4.0""
    }
  }
}
```

----------------------------------------

TITLE: Configuring AWS AI Assistant MCP Server
DESCRIPTION: This JSON snippet demonstrates how to configure the `awslabs.code-doc-gen-mcp-server` within an AWS AI assistant's MCP configuration. It specifies the command to execute (`uvx`), arguments for the server, environment variables like `FASTMCP_LOG_LEVEL`, and settings for disabling the server or auto-approving actions.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/code-doc-gen-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.code-doc-gen-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.code-doc-gen-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Executing Terragrunt Run-All Apply Command (Python)
DESCRIPTION: This snippet demonstrates how to programmatically execute the `terragrunt run-all apply` command using a Python wrapper. This command recursively applies changes across all child Terragrunt modules within a directory tree, making it suitable for applying changes across an entire environment or stack from a root coordination folder.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_12

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(
    command=""run-all apply"",
    working_directory=""./live/production""
))
```

----------------------------------------

TITLE: Configuring MCP Server with Docker Command
DESCRIPTION: This JSON configuration block illustrates how to integrate the AWS Documentation MCP server using a Docker container. It defines the `docker` command, runtime arguments (e.g., `--rm`, `--interactive`, `--env`), and the Docker image name, allowing the server to run as a containerized application.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    ""mcpServers"": {
      ""awslabs.aws-documentation-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""awslabs/aws-documentation-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Initializing LambdaToSns Construct in Python
DESCRIPTION: This snippet shows how to initialize the `LambdaToSns` construct in Python using AWS CDK. It defines a new Lambda function with a specified runtime, handler, and code asset, establishing a connection to an SNS topic. This is a minimal deployable pattern.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/tests/resources/lambda_sns_raw.html#_snippet_1

LANGUAGE: Python
CODE:
```
from aws_solutions_constructs.aws_lambda_sns import LambdaToSns from aws_cdk import (     aws_lambda as _lambda,     Stack ) from constructs import Construct  LambdaToSns(     self, 'test-lambda-sns-stack',     lambda_function_props=_lambda.FunctionProps(         code=_lambda.Code.from_asset('lambda'),         runtime=_lambda.Runtime.Python_3_11,         handler='index.handler'     ) )
```

----------------------------------------

TITLE: Running Checkov Security Scan (Python)
DESCRIPTION: This snippet demonstrates how to initiate a security scan using the `RunCheckovScan` tool. It scans the specified working directory for security misconfigurations and compliance issues, specifically targeting Terraform configurations. The `working_directory` parameter specifies the path to the project, and `framework` indicates the IaC framework to scan.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_2

LANGUAGE: Python
CODE:
```
RunCheckovScan(CheckovScanRequest(working_directory=""./my_project"", framework=""terraform""))
```

----------------------------------------

TITLE: Optimizing Waypoint Order - Amazon Location Service (Python)
DESCRIPTION: This function optimizes the order of a list of waypoints between an origin and a destination using the Amazon Location Service geo-routes API. It can be configured with a specific travel mode and returns the optimized sequence of waypoints along with the total distance and duration of the optimized route.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-location-mcp-server/README.md#_snippet_11

LANGUAGE: python
CODE:
```
optimize_waypoints(
    origin_position: list,  # [longitude, latitude]
    destination_position: list,  # [longitude, latitude]
    waypoints: list,  # List of waypoints, each as a dict with at least Position [longitude, latitude]
    travel_mode: str = 'Car',
    mode: str = 'summary'
) -> dict
```

----------------------------------------

TITLE: Configuring EKS MCP Server for Cursor IDE
DESCRIPTION: This JSON configuration defines the Amazon EKS MCP Server for use with the Cursor IDE. It specifies the command to run the server (`uvx awslabs.eks-mcp-server@latest`), enables write access via `--allow-write` flag, and sets the logging level to `ERROR`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/eks-mcp-server/README.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.eks-mcp-server"": {
      ""autoApprove"": [],
      ""disabled"": false,
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.eks-mcp-server@latest"",
        ""--allow-write""
      ],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR""
      },
      ""transportType"": ""stdio""
    }
  }
}
```

----------------------------------------

TITLE: Defining AWS RDS Read Replica (Terraform)
DESCRIPTION: This Terraform resource block defines an Amazon RDS read replica. It uses the AWS provider configured with the alias 'replica', intended for a different AWS region or account. The `replicate_source_db` attribute links this replica to the primary database defined elsewhere, using its ID.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_2

LANGUAGE: HCL
CODE:
```
resource ""aws_db_instance"" ""read_replica"" {

## AWS Prescriptive Guidance Best practices for using the Terraform AWS Provider

provider = aws.replica

# ... RDS read replica configuration

replicate_source_db = aws_db_instance.primary.id

}
```

----------------------------------------

TITLE: Generating Document Structures - Python
DESCRIPTION: This asynchronous function generates document structures, including sections, which the MCP client will later populate with content. It requires a `DocumentationPlan` to guide the generation, `doc_context` for documentation details, and `ctx` for general context, returning a list of `GeneratedDocument` objects.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/code-doc-gen-mcp-server/README.md#_snippet_4

LANGUAGE: Python
CODE:
```
async def generate_documentation(
    plan: DocumentationPlan,
    doc_context: DocumentationContext,
    ctx: Context,
) -> List[GeneratedDocument]
```

----------------------------------------

TITLE: Executing Terragrunt Plan Command (Python)
DESCRIPTION: This snippet demonstrates how to programmatically execute the `terragrunt plan` command using a Python wrapper. Its purpose is to create an execution plan for infrastructure changes, allowing a preview of modifications before they are applied. It's typically used after validation passes.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_9

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(
    command=""plan"",
    working_directory=""./project_dir"",
))
```

----------------------------------------

TITLE: Running All LLM Tests in ECS MCP Server (Bash)
DESCRIPTION: This snippet demonstrates how to execute the main script for the ECS MCP Server LLM testing framework. It navigates to the testing directory and runs `run_tests.sh`, which can sequentially execute all defined failure scenarios or allow selection of a specific one. This is the primary entry point for initiating the testing process.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server/tests/llm_testing
./run_tests.sh
```

----------------------------------------

TITLE: Example .env File for Docker (Text)
DESCRIPTION: This snippet shows a fictitious `.env` file used to provide AWS temporary credentials (AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, AWS_SESSION_TOKEN) to a Docker container. This file is referenced when running the MCP server via Docker to ensure the container has the necessary AWS authentication.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-kendra-index-mcp-server/README.md#_snippet_1

LANGUAGE: text
CODE:
```
# fictitious `.env` file with AWS temporary credentials
AWS_ACCESS_KEY_ID=<from the profile you set up>
AWS_SECRET_ACCESS_KEY=<from the profile you set up>
AWS_SESSION_TOKEN=<from the profile you set up>
```

----------------------------------------

TITLE: Referencing Module from Terraform Registry (Git Source) - HCL
DESCRIPTION: Demonstrates how to reference a module hosted on a public Terraform registry using a Git source URL. It shows pinning to a specific commit hash (`ref`) for stability and security, as recommended to avoid supply chain attacks.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_15

LANGUAGE: HCL
CODE:
```
module ""lambda"" {
  source = ""github.com/terraform-aws-modules/terraform-aws-lambda.git?
ref=e78cdf1f82944897ca6e30d6489f43cf24539374"" #--> v4.18.0
  ...
}
```

----------------------------------------

TITLE: Comprehensive ECS Task Diagnosis with Multiple Tools
DESCRIPTION: This prompt challenges the AI to perform a comprehensive diagnosis of a Fargate task failure by integrating and utilizing 'fetch_task_failures', 'fetch_task_logs', and 'ecs_resource_management' tools to pinpoint issues like missing commands and memory allocation failures.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/05_resource_constraint_failure/03_prompts.txt#_snippet_5

LANGUAGE: Plain Text
CODE:
```
I'm having issues with a Fargate task ""[TASK_FAMILY]"" in cluster ""[CLUSTER_NAME]"". It starts but then fails quickly. I see errors about a missing ""stress"" command and memory allocation failures. Can you perform a comprehensive diagnosis using fetch_task_failures, fetch_task_logs, and ecs_resource_management to determine the exact issues and how to fix them?
```

----------------------------------------

TITLE: Planning Terragrunt Changes (Python)
DESCRIPTION: This snippet demonstrates how to generate a Terragrunt execution plan using `ExecuteTerragruntCommand` with the 'plan' command. The plan previews changes and can be saved to a specified output file. The `working_directory` indicates the project path, and `output_file` specifies where to save the plan.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_7

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(command=""plan"", working_directory=""./my_project"", output_file=""tfplan""))
```

----------------------------------------

TITLE: Configuring AWS CLI Credentials (Bash)
DESCRIPTION: This command initiates the AWS CLI configuration process, prompting the user to enter their AWS Access Key ID, Secret Access Key, default region (e.g., `us-east-1`), and preferred output format (e.g., `json`) for programmatic AWS access.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_4

LANGUAGE: bash
CODE:
```
aws configure
AWS Access Key ID [None]: your-access-key
AWS Secret Access Key [None]: your-secret-key
Default region name [None]: us-east-1
Default output format [None]: json
```

----------------------------------------

TITLE: Listing Indexed Repositories by Directory (Resource Identifier)
DESCRIPTION: This resource identifier allows listing all indexed repositories that reside within a specific custom index directory. By providing the `{index_directory}` path, users can filter and view repositories from a particular storage location, which is useful for managing multiple sets of indexes.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_8

LANGUAGE: Resource Identifier
CODE:
```
repositories:///path/to/custom/index/directory
```

----------------------------------------

TITLE: Opening EC2 Instance Connect Tunnel with AWS CLI
DESCRIPTION: This command uses the AWS EC2 Instance Connect service to open a secure tunnel from your local machine to a specified EC2 instance on a given local port. It's a prerequisite for establishing further SSH tunnels to private resources, allowing direct access to the EC2 instance.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/valkey-mcp-server/ELASTICACHECONNECT.md#_snippet_0

LANGUAGE: Bash
CODE:
```
aws ec2-instance-connect open-tunnel --instance-id ec2-instance-ID --local-port 6379
```

----------------------------------------

TITLE: Example .env File for AWS Temporary Credentials
DESCRIPTION: This fictitious `.env` file demonstrates how to provide AWS temporary credentials (access key, secret key, and session token) to a Docker container, which are necessary for the MCP server to authenticate with AWS services.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cost-analysis-mcp-server/README.md#_snippet_1

LANGUAGE: file
CODE:
```
# fictitious `.env` file with AWS temporary credentials
AWS_ACCESS_KEY_ID=ASIAIOSFODNN7EXAMPLE
AWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY
AWS_SESSION_TOKEN=AQoEXAMPLEH4aoAH0gNCAPy...truncated...zrkuWJOgQs8IZZaIv2BXIa2R4Olgk
```

----------------------------------------

TITLE: Running Amazon MQ MCP Server with Resource Creation Enabled (uv)
DESCRIPTION: This bash command demonstrates how to run the Amazon MQ MCP Server using `uv` and enable the `--allow-resource-creation` flag. This flag activates tools within the server that permit the creation of new Amazon MQ brokers and configurations in the user's AWS account, which is disabled by default for security.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-mq-mcp-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
uv run awslabs.amazon-mq-mcp-server --allow-resource-creation
```

----------------------------------------

TITLE: Configuring ALLOW_SENSITIVE_DATA for ECS MCP Server
DESCRIPTION: This snippet demonstrates configuring the `ALLOW_SENSITIVE_DATA` environment variable for the ECS MCP Server. Setting it to `true` allows tools to return sensitive information like logs and detailed resource data, whereas `false` (the default) restricts this access, crucial for production environments.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
# Enable access to sensitive data
""ALLOW_SENSITIVE_DATA"": ""true""

# Disable access to sensitive data (default)
""ALLOW_SENSITIVE_DATA"": ""false""
```

----------------------------------------

TITLE: Creating and Activating Virtual Environment (Unix/macOS)
DESCRIPTION: These commands navigate to the server's source directory, create a new virtual environment using `uv`, and then activate it for Unix/macOS systems, isolating project dependencies.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server
uv venv
source .venv/bin/activate
```

----------------------------------------

TITLE: Configuring MCP Server with uvx for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration defines how the MCP server is integrated with Amazon Q Developer CLI, specifying the command to run (`uvx`), arguments, and environment variables like `FASTMCP_LOG_LEVEL` and `AWS_PROFILE` for authentication.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cost-analysis-mcp-server/README.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.cost-analysis-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [""awslabs.cost-analysis-mcp-server@latest""],
      ""env"": {
        ""FASTMCP_LOG_LEVEL"": ""ERROR"",
        ""AWS_PROFILE"": ""your-aws-profile""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Generating Detailed HTML Coverage Report with Pytest - Bash
DESCRIPTION: This command generates a comprehensive HTML test coverage report, which is saved in the `htmlcov` directory. Opening `htmlcov/index.html` in a web browser provides an interactive, detailed view of code coverage, highlighting covered and uncovered lines.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/tests/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.stepfunctions_tool_mcp_server --cov-report=html tests/
```

----------------------------------------

TITLE: Running a Specific Test File with Pytest (Bash)
DESCRIPTION: This command executes all tests contained within a single specified test file, `test_models.py`, using pytest. It's useful for focusing on a particular set of related tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/tests/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pytest tests/test_models.py
```

----------------------------------------

TITLE: Activating the Virtual Environment (Bash)
DESCRIPTION: Activates the Python virtual environment created by uv, making the installed packages available in the current terminal session.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-nova-canvas/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
source .venv/bin/activate
```

----------------------------------------

TITLE: Running ECS MCP Server Locally via Python Module (Bash)
DESCRIPTION: These commands navigate to the server's source directory and then execute the ECS MCP Server as a Python module, which is a standard way to run Python applications locally during development.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_7

LANGUAGE: bash
CODE:
```
cd src/ecs-mcp-server
python -m awslabs.ecs_mcp_server.main
```

----------------------------------------

TITLE: Creating Documentation Plan - Python
DESCRIPTION: This asynchronous function creates a documentation plan based on project analysis. It determines the required document types and establishes appropriate document structures. It takes `doc_context` for documentation-specific information and `ctx` for general context, returning a `DocumentationPlan`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/code-doc-gen-mcp-server/README.md#_snippet_3

LANGUAGE: Python
CODE:
```
async def plan_documentation(
    doc_context: DocumentationContext,
    ctx: Context,
) -> DocumentationPlan
```

----------------------------------------

TITLE: Getting Indexed Repository Summary (Resource Identifier)
DESCRIPTION: This resource identifier provides a summary of a specific indexed repository. By replacing `{repository_name}` with the actual name of an indexed repository, users can retrieve information about its structure and identify key files like READMEs, offering a quick overview of the repository's contents.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_6

LANGUAGE: Resource Identifier
CODE:
```
repositories://awslabs_mcp/summary
```

----------------------------------------

TITLE: Listing All Indexed Repositories (Resource Identifier)
DESCRIPTION: Accessing the `repositories://` resource identifier lists all currently indexed repositories. This provides a comprehensive overview of all available research repositories, along with detailed information about each, enabling users to manage and select which repositories to query.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/git-repo-research-mcp-server/README.md#_snippet_7

LANGUAGE: Resource Identifier
CODE:
```
repositories://
```

----------------------------------------

TITLE: Running All Tests with Pytest (Bash)
DESCRIPTION: This command navigates to the Terraform MCP server's test directory and executes all tests using pytest. It's the standard way to run the entire test suite from the repository root.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd mcp/src/terraform-mcp-server
pytest tests/
```

----------------------------------------

TITLE: Running Basic Tests with Pytest (Bash)
DESCRIPTION: This command executes all tests located in the 'tests/' directory using Pytest. It's the standard way to run the test suite for the Amazon SNS and SQS MCP Server.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/amazon-sns-sqs-mcp-server/tests/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pytest tests/
```

----------------------------------------

TITLE: Architecture Diagram for MCP2StepFunctions Server
DESCRIPTION: This Mermaid diagram illustrates the high-level architecture of the MCP2StepFunctions server, showing how a generative AI model interacts with the server via an MCP client to execute AWS Step Functions state machines, which in turn interact with other AWS services, the internet, or VPCs. It highlights the central role of the MCP server as a bridge.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_0

LANGUAGE: mermaid
CODE:
```
graph LR
    A[Model] <--> B[MCP Client]
    B <--> C[""MCP2StepFunctions<br>(MCP Server)""]
    C <--> D[State Machine]
    D <--> E[Other AWS Services]
    D <--> F[Internet]
    D <--> G[VPC]

    style A fill:#f9f,stroke:#333,stroke-width:2px
    style B fill:#bbf,stroke:#333,stroke-width:2px
    style C fill:#bfb,stroke:#333,stroke-width:4px
    style D fill:#fbb,stroke:#333,stroke-width:2px
    style E fill:#fbf,stroke:#333,stroke-width:2px
    style F fill:#dff,stroke:#333,stroke-width:2px
    style G fill:#ffd,stroke:#333,stroke-width:2px
```

----------------------------------------

TITLE: Getting ECS Troubleshooting Guidance with get_ecs_troubleshooting_guidance Tool
DESCRIPTION: This prompt directs the AI to use the 'get_ecs_troubleshooting_guidance' tool to analyze specific symptoms ('command not found', 'Failed to allocate memory') and recommend next steps for an ECS task failure.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/05_resource_constraint_failure/03_prompts.txt#_snippet_2

LANGUAGE: Plain Text
CODE:
```
I need help diagnosing why my ECS task ""[TASK_FAMILY]"" in cluster ""[CLUSTER_NAME]"" is failing. The logs show ""sh: stress: command not found"" followed by ""Failed to allocate memory"". Can you use the get_ecs_troubleshooting_guidance tool to analyze the symptoms and recommend next steps?
```

----------------------------------------

TITLE: Expected ECS Service Image Pull Failure Output (Shell)
DESCRIPTION: This snippet shows the expected output when an ECS service fails to start due to an image pull access denied error. It includes a confirmation message, service events detailing the image pull failure, and a target group registration issue.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/02_service_failure/03_prompts.txt#_snippet_0

LANGUAGE: Shell
CODE:
```
✅ Service has failed tasks as expected.
Service events (showing image pull failures):
[
    ""service failing-service-abcde was unable to place a task because no container instance met all of its requirements."",
    ""(deployment ecs-svc/9876543210987) Failed to start task: failed to pull the image configuration: pull access denied for non-existent-repo/non-existent-image"",
    ""failed to register targets in target group arn:aws:elasticloadbalancing:...""
]
```

----------------------------------------

TITLE: Search User-Provided Terraform Module using MCP Tool
DESCRIPTION: This snippet demonstrates searching for documentation for a user-provided Terraform module by specifying its URL (`terraform-aws-modules/vpc/aws`) and version (`5.0.0`) using the `SearchUserProvidedModule` tool on the `awslabs.terraform-mcp-server`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_8

LANGUAGE: Custom Macro
CODE:
```
# Search for user-provided Terraform modules
<use_mcp_tool>
<server_name>awslabs.terraform-mcp-server</server_name>
<tool_name>SearchUserProvidedModule</tool_name>
<arguments>
{
  ""module_url"": ""terraform-aws-modules/vpc/aws"",
  ""version"": ""5.0.0""
}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Configuring AWS Diagram MCP Server with Docker
DESCRIPTION: This JSON configuration snippet demonstrates how to set up the AWS Diagram MCP Server using Docker. It specifies the Docker command, arguments for running the container, and environment variables, indicating a containerized deployment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    ""mcpServers"": {
      ""awslabs.aws-diagram-mcp-server"": {
        ""command"": ""docker"",
        ""args"": [
          ""run"",
          ""--rm"",
          ""--interactive"",
          ""--env"",
          ""FASTMCP_LOG_LEVEL=ERROR"",
          ""awslabs/aws-diagram-mcp-server:latest""
        ],
        ""env"": {},
        ""disabled"": false,
        ""autoApprove"": []
      }
    }
  }
```

----------------------------------------

TITLE: Configuring MCP Server for Schema ARN Tag Key
DESCRIPTION: This JSON configuration snippet demonstrates how to set the 'FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY' environment variable within the MCP server's configuration. This setting tells the MCP server which tag key to look for on Lambda functions to retrieve their associated EventBridge Schema Registry ARN.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/README.md#_snippet_5

LANGUAGE: json
CODE:
```
{
     ""env"": {
       ""FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY"": ""your-schema-arn-tag-key""
     }
   }
```

----------------------------------------

TITLE: Running Docker Container for MCP Server (Bash)
DESCRIPTION: This Bash command shows how to run the built Docker container for the MCP server. It maps port 8080, sets environment variables for `MEMCACHED_HOST` and `MEMCACHED_PORT` to connect to the Memcached instance, and specifies the Docker image to run.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
docker run -p 8080:8080 \
  -e MEMCACHED_HOST=host.docker.internal \
  -e MEMCACHED_PORT=11211 \
  awslabs/memcached-mcp-server
```

----------------------------------------

TITLE: Unified Tool Documentation Format for AI Models
DESCRIPTION: This snippet illustrates the combined documentation format generated by the MCP server. It integrates the state machine description, workflow comment, and input schema into a single, comprehensive output for AI models to understand the tool's purpose and technical requirements.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_8

LANGUAGE: plaintext
CODE:
```
[State Machine Description]

Workflow Description: [Comment from state machine definition]

Input Schema:
[JSON Schema from EventBridge Schema Registry]
```

----------------------------------------

TITLE: Executing Terragrunt Apply Command (Python)
DESCRIPTION: This snippet shows how to programmatically execute the `terragrunt apply` command using a Python wrapper. This command applies the planned infrastructure changes and is typically used after the plan output has been reviewed and approved by the developer.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_10

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(
    command=""apply"",
    working_directory=""./project_dir""
))
```

----------------------------------------

TITLE: Examining ECS Resource Specifications with ecs_resource_management Tool
DESCRIPTION: This prompt asks the AI to use the 'ecs_resource_management' tool to inspect a task definition for resource or configuration issues, given that the task exits with errors related to missing commands and memory.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/05_resource_constraint_failure/03_prompts.txt#_snippet_3

LANGUAGE: Plain Text
CODE:
```
Can you examine the task definition ""[TASK_FAMILY]"" in cluster ""[CLUSTER_NAME]"" to see if there are any issues with the resource specifications or container configuration that might be causing failures? The task starts but then exits with errors about missing commands and memory allocation.
```

----------------------------------------

TITLE: Define IAM Role Trust Relationship Policy (JSON)
DESCRIPTION: This JSON policy document defines a trust relationship for an IAM role, allowing a specified AWS principal (another role in this case) to assume it. This is a necessary prerequisite for using the `sts:AssumeRole` action.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/AWS_TERRAFORM_BEST_PRACTICES.md#_snippet_3

LANGUAGE: JSON
CODE:
```
{
""Version"": ""2012-10-17"",
""Statement"": [
{
""Effect"": ""Allow"",
""Principal"": {
""AWS"": ""arn:aws:iam::111122223333:role/terraform-execution""
},
""Action"": ""sts:AssumeRole""
}
]
}
```

----------------------------------------

TITLE: Running Tests for MCP Server (Bash)
DESCRIPTION: This Bash snippet outlines the steps to run tests for the MCP server. It involves creating a Python virtual environment using `uv venv`, activating it, synchronizing dependencies with `uv sync`, and then executing tests using `uv run --frozen pytest`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
uv venv
source .venv/bin/activate
uv sync
uv run --frozen pytest
```

----------------------------------------

TITLE: Configuring Read-Only AWS CloudFormation MCP Server for Amazon Q Developer CLI
DESCRIPTION: This JSON configuration sets up the AWS CloudFormation MCP Server in read-only mode for Amazon Q Developer CLI by including the `--readonly` argument. This prevents the server from performing any create, update, or delete actions on AWS resources.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cfn-mcp-server/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""mcpServers"": {
    ""awslabs.cfn-mcp-server"": {
      ""command"": ""uvx"",
      ""args"": [
        ""awslabs.cfn-mcp-server@latest"",
        ""--readonly""
      ],
      ""env"": {
        ""AWS_PROFILE"": ""your-named-profile""
      },
      ""disabled"": false,
      ""autoApprove"": []
    }
  }
}
```

----------------------------------------

TITLE: Validating Terraform/Terragrunt Code - Python
DESCRIPTION: Examples demonstrating how to use the `ExecuteTerraformCommand` and `ExecuteTerragruntCommand` tools to validate Terraform or Terragrunt configuration files. These commands perform syntax and configuration checks without interacting with AWS, identifying errors and reference issues.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_1

LANGUAGE: Python
CODE:
```
ExecuteTerraformCommand(TerraformExecutionRequest(command=""validate"", working_directory=""./my_project""))
```

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(command=""validate"", working_directory=""./my_project""))
```

----------------------------------------

TITLE: Configuring Commitizen for Version Bumping in pyproject.toml
DESCRIPTION: Configuration for `commitizen` in `pyproject.toml` to automate version updates. It specifies the conventional commits standard, version format, and the files to update (`pyproject.toml` and `__init__.py`) upon a version bump.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_6

LANGUAGE: TOML
CODE:
```
[tool.commitizen]
name = ""cz_conventional_commits""
version = ""0.0.0""
tag_format = ""$version""
version_files = [
    ""pyproject.toml:version"",
    ""awslabs/your_mcp_server/__init__.py:__version__""
]
update_changelog_on_bump = true
```

----------------------------------------

TITLE: Validating Terragrunt Configuration (Python)
DESCRIPTION: This snippet shows how to validate a Terragrunt configuration using `ExecuteTerragruntCommand` with the 'validate' command. This checks the underlying Terraform configuration for syntax and reference issues. The `working_directory` parameter specifies the path to the configuration to be validated.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/awslabs/terraform_mcp_server/static/TERRAFORM_WORKFLOW_GUIDE.md#_snippet_8

LANGUAGE: Python
CODE:
```
ExecuteTerragruntCommand(TerragruntExecutionRequest(
    command=""validate"",
    working_directory=""./project_dir""
))
```

----------------------------------------

TITLE: Running Specific Test Class with Pytest - Bash
DESCRIPTION: This command targets and runs all tests defined within a specific test class, for example, `TestValidateStateMachineName`, located in a given test file. This is useful for focusing on a subset of related tests without running the entire file.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/tests/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest -xvs tests/test_validate_state_machine_name.py::TestValidateStateMachineName
```

----------------------------------------

TITLE: Tagging AWS Lambda Function with Schema ARN
DESCRIPTION: This snippet shows the key-value pair used to tag an AWS Lambda function with its corresponding EventBridge Schema Registry ARN. This tag enables the MCP server to fetch and include the formal JSON Schema documentation for the function's inputs.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/README.md#_snippet_4

LANGUAGE: plaintext
CODE:
```
Key: FUNCTION_INPUT_SCHEMA_ARN_TAG_KEY (configurable)
Value: arn:aws:schemas:region:account:schema/registry-name/schema-name
```

----------------------------------------

TITLE: Configuring Local MCP Server in Client Settings (JSON)
DESCRIPTION: Provides a JSON configuration snippet for setting up a local MCP server within a client's settings file. It specifies the command, arguments, environment variables, and status for the server.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_11

LANGUAGE: JSON
CODE:
```
""awslabs.aws-documentation-mcp-server"": {
    ""command"": ""uv"",
    ""args"": [
    ""--directory"",
    ""<absolute path to your server code>"",
    ""run"",
    ""server.py""
    ],
    ""env"": {
    ""FASTMCP_LOG_LEVEL"": ""ERROR""
    },
    ""disabled"": false,
    ""autoApprove"": []
}
```

----------------------------------------

TITLE: Foundation Model Inference Cost Calculation Example
DESCRIPTION: Provides a step-by-step calculation example for determining the cost of Foundation Model inference based on input and output token usage and their respective unit prices.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/cost-analysis-mcp-server/awslabs/cost_analysis_mcp_server/static/patterns/BEDROCK.md#_snippet_0

LANGUAGE: Calculation Example
CODE:
```
Unit Price: $0.0008 per 1K input tokens, $0.0016 per 1K output tokens
Usage: 1,000,000 input tokens, 500,000 output tokens
Calculation: ($0.0008/1K × 1,000K input) + ($0.0016/1K × 500K output) = $0.80 + $0.80 = $1.60
```

----------------------------------------

TITLE: Tagging State Machine with EventBridge Schema ARN
DESCRIPTION: This snippet shows how to tag a state machine with the ARN of an EventBridge Schema Registry schema. This tag links the state machine to its formal JSON Schema input definition, enabling the MCP server to include it in the tool documentation.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/stepfunctions-tool-mcp-server/README.md#_snippet_6

LANGUAGE: plaintext
CODE:
```
Key: STATE_MACHINE_INPUT_SCHEMA_ARN_TAG_KEY (configurable)
Value: arn:aws:schemas:region:account:schema/registry-name/schema-name
```

----------------------------------------

TITLE: Example Usage and Responses for finch_create_ecr_repo
DESCRIPTION: This section provides examples of the input payload for the `finch_create_ecr_repo` tool and various possible JSON responses, including success cases for existing and newly created repositories, and an error case for read-only server mode.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/finch-mcp-server/README.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{
  ""app_name"": ""my-app"",
  ""region"": ""us-west-2""
}
```

LANGUAGE: JSON
CODE:
```
{
  ""status"": ""success"",
  ""message"": ""ECR repository 'my-app' already exists.""
}
```

LANGUAGE: JSON
CODE:
```
{
  ""status"": ""success"",
  ""message"": ""Successfully created ECR repository 'my-app'.""
}
```

LANGUAGE: JSON
CODE:
```
{
  ""status"": ""error"",
  ""message"": ""Server running in read-only mode, unable to perform the action""
}
```

----------------------------------------

TITLE: Example AWS Lambda Function Description for MCP Tool
DESCRIPTION: This plaintext example demonstrates how to write a clear and concise description for an AWS Lambda function. This description is crucial as it is used as the MCP tool description, guiding the model on when and how to use the function, including its required parameters.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/README.md#_snippet_3

LANGUAGE: plaintext
CODE:
```
Retrieve customer status on the CRM system based on { 'customerId' } or { 'customerEmail' }
```

----------------------------------------

TITLE: Running Specific Test File with Pytest - Bash
DESCRIPTION: This command executes tests contained within a specific Python test file, `tests/test_server.py`, using pytest. The flags `-xvs` provide verbose output, prevent output capture, and stop on the first failure.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/tests/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pytest -xvs tests/test_server.py
```

----------------------------------------

TITLE: Opening Project in VSCode (Shell)
DESCRIPTION: Opens the current directory (the project root) in Visual Studio Code (VSCode). This command assumes VSCode is installed and configured to be launched from the command line. Users of other editors should adapt this step.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_2

LANGUAGE: shell
CODE:
```
code .
```

----------------------------------------

TITLE: Installing Development Dependencies - Bash
DESCRIPTION: This command installs the `mcp-lambda-handler` package in editable mode, along with its development dependencies. This is typically used for local development and testing, allowing changes to the source code to be reflected without reinstallation.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mcp-lambda-handler/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
pip install -e .[dev]
```

----------------------------------------

TITLE: Generating Detailed HTML Test Coverage Report (Python/Pytest)
DESCRIPTION: This command generates an interactive HTML test coverage report for the `awslabs.ecs_mcp_server` module, providing a visual breakdown of code coverage that can be viewed in a web browser for detailed analysis.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_15

LANGUAGE: bash
CODE:
```
python -m pytest --cov=awslabs.ecs_mcp_server --cov-report=html tests/
```

----------------------------------------

TITLE: Building Docker Image for MCP Server (Bash)
DESCRIPTION: This Bash command demonstrates how to build the Docker image for the `awslabs/memcached-mcp-server`. The `docker build` command is used with the `-t` flag to tag the image, allowing for easy identification and deployment.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
docker build -t awslabs/memcached-mcp-server .
```

----------------------------------------

TITLE: Running Pytest Tests with Verbose Output (Bash)
DESCRIPTION: Use this command to run tests with verbose output, providing more detailed information about each test's execution status and results. The `-v` flag enables this mode.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pytest -v
```

----------------------------------------

TITLE: Running Tests with Verbose Output (Bash)
DESCRIPTION: This command executes the test suite using the `run_tests.sh` script, enabling verbose output. This provides more detailed information during test execution, such as individual test names and their outcomes.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/tests/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
./run_tests.sh --verbose
```

----------------------------------------

TITLE: Running ECS MCP Server Locally via uv (Bash)
DESCRIPTION: This command runs the ECS MCP Server's `main.py` using `uv`, specifying the server's root directory. It provides an alternative to the Python module execution for local server operation.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/DEVELOPMENT.md#_snippet_8

LANGUAGE: bash
CODE:
```
uv --directory /path/to/ecs-mcp-server/src/ecs-mcp-server/awslabs/ecs_mcp_server run main.py
```

----------------------------------------

TITLE: Running Tests with Coverage Report (Bash)
DESCRIPTION: This command executes the test suite using the provided `run_tests.sh` script, enabling code coverage analysis. It's used to determine which parts of the codebase are exercised by the tests.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/terraform-mcp-server/tests/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
./run_tests.sh --coverage
```

----------------------------------------

TITLE: Installing Amazon Nova Canvas MCP Server via Smithery CLI
DESCRIPTION: This command demonstrates how to install the Amazon Nova Canvas MCP Server using the Smithery CLI. The `npx` command executes the `@smithery/cli` package to install the specified MCP server for the 'claude' client, automating the setup process.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/nova-canvas-mcp-server/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx -y @smithery/cli install @awslabs/nova-canvas-mcp-server --client claude
```

----------------------------------------

TITLE: Running AWS Serverless MCP Server Locally - Bash
DESCRIPTION: This `bash` command executes the AWS Serverless MCP server using Python's module execution. It starts the server, making it available for interaction, and is the final step in setting up and running the server for local development and testing.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
python -m awslabs.aws_serverless_mcp_server.server
```

----------------------------------------

TITLE: Building Docker Image for MySQL MCP Server (Shell)
DESCRIPTION: This shell command builds a Docker image for the AWS Labs MySQL MCP server. It tags the image as `awslabs/mysql-mcp-server:latest` from the current directory's Dockerfile. This step is a prerequisite for running the MCP server within a Docker container.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/mysql-mcp-server/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
docker build -t awslabs/mysql-mcp-server:latest .
```

----------------------------------------

TITLE: Generating Detailed HTML Test Coverage Report - Bash
DESCRIPTION: This command generates a detailed HTML test coverage report for the `awslabs.lambda_tool_mcp_server` module. The `--cov-report=html` option instructs `pytest-cov` to output the report in HTML format, typically to an `htmlcov` directory.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/tests/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.lambda_tool_mcp_server --cov-report=html tests/
```

----------------------------------------

TITLE: Running Live Pytest API Calls (Bash)
DESCRIPTION: This command executes tests marked with `@pytest.mark.live`, which interact with live AWS APIs. These tests are skipped by default and require the `--run-live` option.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
pytest --run-live
```

----------------------------------------

TITLE: Generating HTML Pytest Coverage Report (Bash)
DESCRIPTION: Execute tests and produce a detailed HTML code coverage report for the `awslabs.aws_serverless_mcp_server` module. The report is saved in the `htmlcov` directory for browser viewing.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.aws_serverless_mcp_server --cov-report=html
```

----------------------------------------

TITLE: Running a Specific Pytest File (Bash)
DESCRIPTION: This command allows you to execute tests contained within a single specified Python test file, such as `tests/test_server.py`, useful for focused testing.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/tests/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pytest tests/test_server.py
```

----------------------------------------

TITLE: Python Function Signature for Content Recommendations
DESCRIPTION: This Python function signature defines `recommend`, which provides content recommendations for an AWS documentation page. It takes a `url` (string) as input and returns a list of dictionaries containing recommendation data.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-documentation-mcp-server/README.md#_snippet_4

LANGUAGE: python
CODE:
```
recommend(url: str) -> list[dict]
```

----------------------------------------

TITLE: Verifying ElastiCache Connection (Telnet)
DESCRIPTION: This command uses telnet to verify active connectivity to the Amazon ElastiCache Memcached cache through the established SSH tunnel. It attempts to connect to the local forwarded port (127.0.0.1:LOCAL_PORT), confirming that the tunnel is functional and the cache is reachable.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/memcached-mcp-server/ELASTICACHECONNECT.md#_snippet_2

LANGUAGE: Bash
CODE:
```
telnet 127.0.0.1 LOCAL_PORT
```

----------------------------------------

TITLE: Generate HTML Coverage Report (Bash)
DESCRIPTION: Execute tests with coverage and generate an HTML report in the 'htmlcov' directory for detailed analysis.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/tests/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
pytest --cov=awslabs.bedrock_kb_retrieval_mcp_server --cov-report=html tests/
```

----------------------------------------

TITLE: Running Pytest Live Tests (Bash)
DESCRIPTION: Command to include and run tests marked as 'live' which are skipped by default because they make actual API calls.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/tests/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
pytest --run-live
```

----------------------------------------

TITLE: Search AWS Documentation using MCP Tool
DESCRIPTION: This snippet demonstrates using the `search_documentation` tool on the `awslabs.aws-documentation-mcp-server`. It searches for the phrase 'Lambda function URLs' and limits the results to 5.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_5

LANGUAGE: Custom Macro
CODE:
```
# Searching AWS documentation
<use_mcp_tool>
<server_name>awslabs.aws-documentation-mcp-server</server_name>
<tool_name>search_documentation</tool_name>
<arguments>
{
  ""search_phrase"": ""Lambda function URLs"",
  ""limit"": 5
}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Calling GetReactDocsByTopic Tool (Python)
DESCRIPTION: This Python snippet demonstrates how to call the `get_react_docs_by_topic` tool, which is provided by the Frontend MCP Server. It takes a topic string as a parameter, such as 'essential-knowledge', to retrieve comprehensive markdown documentation. The expected output is a `result` variable containing the documentation for the specified topic, including explanations and code examples.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/frontend-mcp-server/README.md#_snippet_1

LANGUAGE: python
CODE:
```
result = await get_react_docs_by_topic('essential-knowledge')
```

----------------------------------------

TITLE: Search AWSCC Provider Docs using MCP Tool
DESCRIPTION: This snippet illustrates searching for documentation related to a specific AWS Cloud Control API resource (`awscc_lambda_function`) using the `SearchAwsccProviderDocs` tool on the `awslabs.terraform-mcp-server`.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/awslabs/core_mcp_server/static/PROMPT_UNDERSTANDING.md#_snippet_7

LANGUAGE: Custom Macro
CODE:
```
# Search AWSCC provider documentation
<use_mcp_tool>
<server_name>awslabs.terraform-mcp-server</server_name>
<tool_name>SearchAwsccProviderDocs</tool_name>
<arguments>
{
  ""asset_name"": ""awscc_lambda_function"",
  ""asset_type"": ""resource""
}
</arguments>
</use_mcp_tool>
```

----------------------------------------

TITLE: Standard Apache 2.0 License Header for Python Files
DESCRIPTION: Provides the standard Apache License, Version 2.0 header that must be included at the top of each source file to ensure proper copyright and licensing information is present.
SOURCE: https://github.com/awslabs/mcp/blob/main/DESIGN_GUIDELINES.md#_snippet_7

LANGUAGE: Python
CODE:
```
# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the ""License""). You may not use this file except in compliance
# with the License. A copy of the License is located at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# or in the 'license' file accompanying this file. This file is distributed on an 'AS IS' BASIS, WITHOUT WARRANTIES
# OR CONDITIONS OF ANY KIND, express or implied. See the License for the specific language governing permissions
# and limitations under the License.
```

----------------------------------------

TITLE: Navigating to Sample Functions Directory - Bash
DESCRIPTION: This command changes the current directory to the location where the sample Lambda functions are stored, which is a prerequisite for building and deploying them using the AWS SAM CLI.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/lambda-tool-mcp-server/examples/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd src/lambda-tool-mcp-server/Examples/sample_functions
```

----------------------------------------

TITLE: Cloning the MCP Repository (Bash)
DESCRIPTION: Clones the Model Context Protocol (MCP) repository from GitHub to your local machine.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-nova-canvas/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/awslabs/mcp.git
```

----------------------------------------

TITLE: Run All Tests via Script - Bash
DESCRIPTION: Execute the entire test suite using the provided shell script from the project root directory. This script handles dependency installation if necessary.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-diagram-mcp-server/tests/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
./run_tests.sh
```

----------------------------------------

TITLE: Running Specific Pytest Method (Bash)
DESCRIPTION: Command to execute a single specific test method within a class, for example, 'test_get_prompt_understanding' in 'TestPromptUnderstanding' in 'tests/test_server.py'.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/tests/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
pytest tests/test_server.py::TestPromptUnderstanding::test_get_prompt_understanding
```

----------------------------------------

TITLE: Running Specific Pytest Class (Bash)
DESCRIPTION: Command to execute tests within a specific test class inside a file, for example, 'TestPromptUnderstanding' in 'tests/test_server.py'.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/core-mcp-server/tests/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pytest tests/test_server.py::TestPromptUnderstanding
```

----------------------------------------

TITLE: Create Virtual Environment and Sync Dependencies with uv
DESCRIPTION: Create a Python virtual environment and install all dependencies listed in the project files using uv.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_9

LANGUAGE: Shell
CODE:
```
uv venv && uv sync --all-groups
```

----------------------------------------

TITLE: Checkout Git Branch
DESCRIPTION: Optionally switch to a new or existing Git branch in your forked repository before starting work on the server.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_4

LANGUAGE: Shell
CODE:
```
git checkout -b your-branch-name
```

----------------------------------------

TITLE: Run Specific Test File (Bash)
DESCRIPTION: Execute all pytest tests contained within a single specified test file.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/bedrock-kb-retrieval-mcp-server/tests/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
pytest tests/test_models.py
```

----------------------------------------

TITLE: Navigating to Sample Directory and Copying Env File (Bash)
DESCRIPTION: Changes the current directory to the Nova Canvas sample folder and copies the example environment file to a new .env file for configuration.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-nova-canvas/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd mcp/samples/mcp-integration-with-nova-canvas
cp .env.example .env
```

----------------------------------------

TITLE: Cloning MCP Repository for Local Development - Bash
DESCRIPTION: This snippet provides the `bash` commands to clone the `awslabs/mcp` GitHub repository and navigate into the specific `aws-serverless-mcp-server` directory, which is the first step for local development. It sets up the local environment for further configuration and execution.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/aws-serverless-mcp-server/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
git clone https://github.com/awslabs/mcp.git
cd mcp/src/aws-serverless-mcp-server
```

----------------------------------------

TITLE: Copying Environment File (Bash)
DESCRIPTION: Copies the example environment file (`.env.example`) to `.env`. This file is used to store configuration variables, such as AWS credentials, required by the application. Users must then edit `.env` to add their specific credentials.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.example .env
```

----------------------------------------

TITLE: Analyzing Fargate Task Logs with fetch_task_logs Tool
DESCRIPTION: This prompt requests the AI to use the 'fetch_task_logs' tool to review logs for a failing Fargate task, suspecting issues with command execution or resource limits.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/05_resource_constraint_failure/03_prompts.txt#_snippet_4

LANGUAGE: Plain Text
CODE:
```
My Fargate task ""[TASK_FAMILY]"" in cluster ""[CLUSTER_NAME]"" is failing. Can you look at the logs using the fetch_task_logs tool to help me understand what's happening? I think it might be failing to run a command or hitting resource limits.
```

----------------------------------------

TITLE: Changing Directory to Project Root (Shell)
DESCRIPTION: Changes the current directory in the terminal to the 'mcp' directory, which is the root of the cloned repository. This is where subsequent commands and development activities should take place.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_1

LANGUAGE: shell
CODE:
```
cd mcp
```

----------------------------------------

TITLE: Changing Directory to Server Source (Shell)
DESCRIPTION: A simple shell command to navigate into the source directory of an example MCP server, typically done before running tests or other server-specific commands.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_14

LANGUAGE: Shell
CODE:
```
cd src/example-mcp-server
```

----------------------------------------

TITLE: Navigate to Sample Functions Directory (Bash)
DESCRIPTION: This command changes the current directory to the location of the sample functions within the project structure. This step is a prerequisite for building and deploying the application using the AWS SAM CLI.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/stepfunctions-tool-mcp-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd src/stepfunctions-tool-mcp-server/examples/sample_functions
```

----------------------------------------

TITLE: Navigate to Server Directory
DESCRIPTION: Change the current directory to the specific server's source directory where the server files are located.
SOURCE: https://github.com/awslabs/mcp/blob/main/DEVELOPER_GUIDE.md#_snippet_6

LANGUAGE: Shell
CODE:
```
cd src/example-mcp-server
```

----------------------------------------

TITLE: Troubleshooting ECS Task Failures - General Prompt
DESCRIPTION: This prompt provides a general scenario of an ECS task failing with 'command not found' and memory allocation issues, asking for broad troubleshooting assistance.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/ecs-mcp-server/tests/llm_testing/scenarios/05_resource_constraint_failure/03_prompts.txt#_snippet_0

LANGUAGE: Plain Text
CODE:
```
I've created a task definition ""[TASK_FAMILY]"" in cluster ""[CLUSTER_NAME]"", but when I try to run a task, it fails. The task logs show ""sh: stress: command not found"" and mentions attempting to allocate memory. Can you help me troubleshoot why this task won't run successfully?
```

----------------------------------------

TITLE: Cloning MCP Repository (Bash)
DESCRIPTION: Clones the `mcp` GitHub repository to your local machine, which contains the sample code for integrating with Amazon Bedrock Knowledge Bases. This is the first step in setting up the project.
SOURCE: https://github.com/awslabs/mcp/blob/main/samples/mcp-integration-with-kb/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/awslabs/mcp.git
```

----------------------------------------

TITLE: Moving/Renaming Files - Bash
DESCRIPTION: This bash command demonstrates how to move or rename files and directories. It's specifically highlighted for use in moving generated `favicon.png` and `splash.png` images to their correct locations, ensuring compatibility across different operating systems.
SOURCE: https://github.com/awslabs/mcp/blob/main/src/frontend-mcp-server/awslabs/frontend_mcp_server/static/react/essential-knowledge.md#_snippet_2

LANGUAGE: bash
CODE:
```
mv source-folder/file destination-folder/file
```","mcp aws",""