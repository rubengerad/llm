"tailwind","TITLE: Tailwind CSS Core Concepts and Getting Started
DESCRIPTION: This section outlines the foundational topics for getting started with and understanding the core principles of Tailwind CSS. It includes guides on installation, editor setup, compatibility, upgrading, and fundamental styling concepts like utility classes, states, responsive design, dark mode, and custom styles.
SOURCE: https://tailwindcss.com/docs/place-content

LANGUAGE: APIDOC
CODE:
```
Getting Started:
  - Installation: Guide to setting up Tailwind CSS in a project.
  - Editor Setup: Configuration for IDEs to enhance Tailwind CSS development.
  - Compatibility: Information on browser and environment compatibility.
  - Upgrade Guide: Instructions for migrating to newer versions of Tailwind CSS.

Core Concepts:
  - Styling with Utility Classes: Explanation of Tailwind's utility-first approach.
  - Hover, Focus, and Other States: How to apply styles based on element states.
  - Responsive Design: Techniques for creating responsive layouts.
  - Dark Mode: Implementing dark themes using Tailwind utilities.
  - Theme Variables: Customizing design tokens like colors, fonts, and spacing.
  - Colors: Overview of Tailwind's default color palette and custom color definition.
  - Adding Custom Styles: Methods for extending Tailwind with custom CSS.
  - Detecting Classes in Source Files: How Tailwind scans files for utility classes.
  - Functions and Directives: Usage of Tailwind's custom CSS functions and directives (e.g., @apply, @tailwind).
```

----------------------------------------

TITLE: Basic HTML Example for Tailwind color-scheme Utilities
DESCRIPTION: Demonstrates the application of `scheme-light`, `scheme-dark`, and `scheme-light-dark` utility classes to HTML div elements. This example shows how these classes influence the rendering of an input type='date' field based on the specified color scheme.
SOURCE: https://tailwindcss.com/docs/color-scheme

LANGUAGE: HTML
CODE:
```
<div class=""scheme-light ..."">  <input type=""date"" /></div><div class=""scheme-dark ..."">  <input type=""date"" /></div><div class=""scheme-light-dark ..."">  <input type=""date"" /></div>
```

----------------------------------------

TITLE: Start SvelteKit Development Server
DESCRIPTION: Command to start the SvelteKit development server, which will compile and serve the application with Tailwind CSS integrated.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: Shell
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Tailwind CSS Getting Started & Core Concepts
DESCRIPTION: This section outlines the initial steps for setting up Tailwind CSS, including installation and editor configuration, along with fundamental concepts for styling with utility classes, responsive design, dark mode, and custom styles.
SOURCE: https://tailwindcss.com/docs/visibility

LANGUAGE: APIDOC
CODE:
```
Getting Started:
  - Installation: /docs/installation
  - Editor setup: /docs/editor-setup
  - Compatibility: /docs/compatibility
  - Upgrade guide: /docs/upgrade-guide

Core Concepts:
  - Styling with utility classes: /docs/styling-with-utility-classes
  - Hover, focus, and other states: /docs/hover-focus-and-other-states
  - Responsive design: /docs/responsive-design
  - Dark mode: /docs/dark-mode
  - Theme variables: /docs/theme
  - Colors: /docs/colors
  - Adding custom styles: /docs/adding-custom-styles
  - Detecting classes in source files: /docs/detecting-classes-in-source-files
  - Functions and directives: /docs/functions-and-directives

Base Styles:
  - Preflight: /docs/preflight
```

----------------------------------------

TITLE: Tailwind CSS Getting Started and Core Concepts
DESCRIPTION: This section outlines the initial setup and fundamental principles for using Tailwind CSS. It covers installation, editor configuration, compatibility, upgrade procedures, and core concepts like utility-first styling, responsive design, dark mode, and custom styles.
SOURCE: https://tailwindcss.com/docs/letter-spacing

LANGUAGE: APIDOC
CODE:
```
Getting Started:
  - Installation: Steps to set up Tailwind CSS in your project.
  - Editor setup: Configuration for IDEs to enhance Tailwind development.
  - Compatibility: Information on browser and environment compatibility.
  - Upgrade guide: Instructions for upgrading to newer versions.

Core Concepts:
  - Styling with utility classes: Understanding the utility-first approach.
  - Hover, focus, and other states: Applying styles based on element states.
  - Responsive design: Implementing responsive layouts with breakpoints.
  - Dark mode: Configuring and using dark mode styles.
  - Theme variables: Customizing design tokens via the theme configuration.
  - Colors: Managing and applying color palettes.
  - Adding custom styles: Extending Tailwind with custom CSS.
  - Detecting classes in source files: How Tailwind processes and purges unused CSS.
  - Functions and directives: Using Tailwind's custom CSS functions and directives.
```

----------------------------------------

TITLE: Start Project Build Process
DESCRIPTION: This command initiates the project's build process, typically defined in the `package.json` scripts. Running `npm run start` is a common way to launch a development server or compile assets for a web application.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/emberjs

LANGUAGE: Terminal
CODE:
```
npm run start
```

----------------------------------------

TITLE: Web API: window.matchMedia() and localStorage
DESCRIPTION: This API documentation describes the `window.matchMedia()` method for querying media features and `localStorage` for client-side data persistence, both crucial for implementing dynamic theme switching based on user preference and system settings.
SOURCE: https://tailwindcss.com/docs/dark-mode

LANGUAGE: APIDOC
CODE:
```
window.matchMedia(mediaQueryString)
  - Description: Returns a new `MediaQueryList` object that can be used to determine if the document matches the passed media query string, as well as to monitor the document to see when it changes to match (or unmatch) the media query.
  - Parameters:
    - `mediaQueryString`: (string) A string representing the media query to parse.
  - Returns: `MediaQueryList` object.
  - Example Usage:
    `window.matchMedia(""(prefers-color-scheme: dark)"").matches` - Checks if the user's system prefers a dark color scheme.

localStorage
  - Description: A read-only property that allows you to access a `Storage` object for the `Document`'s origin; the stored data is saved across browser sessions.
  - Methods:
    - `localStorage.setItem(key, value)`: Adds or updates a key-value pair.
      - `key`: (string) The name of the key.
      - `value`: (string) The value to store.
    - `localStorage.getItem(key)`: Retrieves the value associated with a key.
      - `key`: (string) The name of the key.
      - Returns: (string | null) The value if found, otherwise `null`.
    - `localStorage.removeItem(key)`: Removes a key-value pair.
      - `key`: (string) The name of the key to remove.
  - Example Usage:
    `localStorage.theme = ""dark"";`
    `localStorage.getItem(""theme"");`
    `localStorage.removeItem(""theme"");`
```

----------------------------------------

TITLE: Tailwind CSS Transition and Animation Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities that define how elements transition between states and apply custom animations.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
Transitions & Animation Properties:
- transition-property
- transition-behavior
- transition-duration
- transition-timing-function
- transition-delay
- animation
```

----------------------------------------

TITLE: Start Nuxt.js Development Server
DESCRIPTION: Executes the `npm run dev` command to start the Nuxt.js development server, which compiles the application and serves it locally, allowing for real-time development.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nuxt

LANGUAGE: Terminal
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Start Vite development server
DESCRIPTION: Executes the `npm run dev` command, which typically starts the development server configured in your `package.json`. This command allows you to preview your application in a browser and benefits from hot module reloading.
SOURCE: https://tailwindcss.com/docs/installation

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Start Development Build Process
DESCRIPTION: This command initiates the development build process, typically configured in `package.json`, to compile and serve your application with Tailwind CSS.
SOURCE: https://tailwindcss.com/docs/installation/using-postcss

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities that control user interaction with elements, including cursor styles, scroll behavior, and user selection.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
Interactivity Properties:
- accent-color
- appearance
- caret-color
- color-scheme
- cursor
- field-sizing
- pointer-events
- resize
- scroll-behavior
- scroll-margin
- scroll-padding
- scroll-snap-align
- scroll-snap-stop
- scroll-snap-type
- touch-action
- user-select
- will-change
```

----------------------------------------

TITLE: Tailwind CSS Transitions and Animation Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes that manage CSS transitions and animations. These utilities control properties, duration, timing functions, delays, and general animation behavior.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
transition-property: Specifies the CSS properties to which a transition effect should be applied.
transition-behavior: Defines whether a transition is applied to discrete properties.
transition-duration: Sets the duration of a transition effect.
transition-timing-function: Specifies the speed curve of a transition effect.
transition-delay: Specifies when the transition effect will start.
animation: A shorthand property for all the animation properties.
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes that control user interaction and interface behavior. These utilities manage cursor styles, user selection, scrolling, and form element appearance.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
accent-color: Sets the accent color for user-interface controls generated by the element.
appearance: Controls the native appearance of UI widgets.
caret-color: Sets the color of the caret (text input cursor).
color-scheme: Sets the color scheme for an element (e.g., light or dark).
cursor: Sets the type of mouse cursor to display when pointing over an element.
field-sizing: Controls the sizing of form fields.
pointer-events: Sets whether an element is the target of mouse events.
resize: Sets whether an element is resizable by the user.
scroll-behavior: Sets the behavior for a scrolling box when scrolling is triggered by the navigation or CSSOM scrolling APIs.
scroll-margin: Sets the margin of the scroll snap area.
scroll-padding: Sets the padding of the scroll snap area.
scroll-snap-align: Specifies the snap position for a scroll container.
scroll-snap-stop: Specifies whether the scroll container must snap to a snap point or can pass over it.
scroll-snap-type: Specifies how strictly snap points are enforced on the scroll container.
touch-action: Specifies how a touch event should be handled.
user-select: Controls whether the user can select text.
will-change: Hints to browsers about what kinds of changes to expect on an element.
```

----------------------------------------

TITLE: Tailwind CSS Effects Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes related to visual effects such as shadows, opacity, and blend modes. These utilities allow for fine-grained control over element appearance.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
box-shadow: Controls the box shadow of an element.
text-shadow: Controls the text shadow of an element.
opacity: Sets the opacity level of an element.
mix-blend-mode: Specifies how an element's content should blend with its background.
background-blend-mode: Specifies how an element's background images should blend with each other and with the element's background color.
mask-clip: Specifies the mask painting area.
mask-composite: Specifies the compositing operation used to combine the current mask with the mask below it.
mask-image: Specifies an image to be used as a mask layer.
mask-mode: Specifies whether the mask image is interpreted as a luminance mask or an alpha mask.
mask-origin: Specifies the mask positioning area.
mask-position: Sets the initial position of a mask image.
mask-repeat: Sets how mask images are repeated.
mask-size: Specifies the size of the mask images.
mask-type: Specifies whether the mask is a luminance mask or an alpha mask.
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Run the development server to begin building your application. This command typically watches for file changes, recompiles assets, and serves your application locally, allowing for live development.
SOURCE: https://tailwindcss.com/docs/installation/using-vite

LANGUAGE: Terminal
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Import Tailwind CSS into Application Stylesheet
DESCRIPTION: CSS content for `src/app.css` to import the Tailwind CSS base styles, components, and utilities into the project's main stylesheet.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: CSS
CODE:
```
@import ""tailwindcss"";
```

----------------------------------------

TITLE: Create a New SvelteKit Project
DESCRIPTION: Initial command to create a new SvelteKit project using `npx sv create` and navigate into the newly created project directory.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: Shell
CODE:
```
npx sv create my-project
cd my-project
```

----------------------------------------

TITLE: Tailwind CSS Effects Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities related to visual effects, including shadows, opacity, and various mask properties.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
Effects Properties:
- box-shadow
- text-shadow
- opacity
- mix-blend-mode
- background-blend-mode
- mask-clip
- mask-composite
- mask-image
- mask-mode
- mask-origin
- mask-position
- mask-repeat
- mask-size
- mask-type
```

----------------------------------------

TITLE: Tailwind CSS Opacity Utility Class Reference
DESCRIPTION: Documents the `opacity` utility class in Tailwind CSS, detailing its various syntaxes for setting element opacity, including numeric values, custom properties, and arbitrary values.
SOURCE: https://tailwindcss.com/docs/opacity

LANGUAGE: APIDOC
CODE:
```
Class | Styles
| --- | ---
| `opacity-<number>` | `opacity: <number>%;`
| `opacity-(<custom-property>)` | `opacity: var(<custom-property>);`
| `opacity-[<value>]` | `opacity: <value>;`
```

----------------------------------------

TITLE: Integrate Tailwind CSS in a Twig HTML Template
DESCRIPTION: This snippet illustrates a foundational HTML5 document structure within a Twig template, demonstrating the inclusion of compiled CSS (likely via Webpack Encore) and the direct application of Tailwind CSS utility classes to an `<h1>` element for basic styling. It serves as a minimal example to get started with Tailwind in a templated environment.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/symfony

LANGUAGE: HTML
CODE:
```
<!doctype html><html>  <head>    <meta charset=""utf-8"" />    <meta      name=""viewport""      content=""width=device-width, initial-scale=1.0""    />    {% block stylesheets %}      {{ encore_entry_link_tags('app') }}    {% endblock %}  </head>  <body>    <h1 class=""text-3xl font-bold underline"">      Hello world!    </h1>  </body></html>
```

----------------------------------------

TITLE: Tailwind CSS Resize Utilities API Documentation
DESCRIPTION: Comprehensive API documentation for Tailwind CSS `resize` utilities, detailing class names and their corresponding CSS properties to control element resizing behavior. Includes options for no resizing, resizing in both directions, or specific vertical/horizontal resizing.
SOURCE: https://tailwindcss.com/docs/resize

LANGUAGE: APIDOC
CODE:
```
Utilities for controlling how an element can be resized.

Class | Styles
--- | ---
`resize-none` | `resize: none;`
`resize` | `resize: both;`
`resize-y` | `resize: vertical;`
`resize-x` | `resize: horizontal;`
```

----------------------------------------

TITLE: TailwindCSS Interactivity Utilities
DESCRIPTION: Documentation for TailwindCSS utilities that manage user interaction, including cursor styles, scroll behavior, user selection, and form element appearance.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
accent-color
appearance
caret-color
color-scheme
cursor
field-sizing
pointer-events
resize
scroll-behavior
scroll-margin
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
touch-action
user-select
will-change
```

----------------------------------------

TITLE: HTML Examples for Tailwind CSS Backdrop Brightness Utilities
DESCRIPTION: Provides HTML code examples demonstrating the application of Tailwind CSS `backdrop-brightness` utility classes. These examples show how to use predefined numeric values and custom arbitrary values to control the backdrop brightness of elements.
SOURCE: https://tailwindcss.com/docs/backdrop-filter-brightness

LANGUAGE: HTML
CODE:
```
<div class=""bg-[url(/img/mountains.jpg)]"">
  <div class=""bg-white/30 backdrop-brightness-50 ...""></div>
</div>
<div class=""bg-[url(/img/mountains.jpg)]"">
  <div class=""bg-white/30 backdrop-brightness-150 ...""></div>
</div>
```

LANGUAGE: HTML
CODE:
```
<div class=""backdrop-brightness-[1.75] ..."">
  <!-- ... -->
</div>
```

LANGUAGE: HTML
CODE:
```
<div class=""backdrop-brightness-(--my-backdrop-brightness) ..."">
  <!-- ... -->
</div>
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts and Setup Documentation
DESCRIPTION: This section outlines the foundational documentation topics for Tailwind CSS, including installation guides, editor configurations, compatibility information, and core styling principles like utility classes, responsive design, and dark mode.
SOURCE: https://tailwindcss.com/docs/object-fit

LANGUAGE: APIDOC
CODE:
```
### Getting started
- Installation
- Editor setup
- Compatibility
- Upgrade guide

### Core concepts
- Styling with utility classes
- Hover, focus, and other states
- Responsive design
- Dark mode
- Theme variables
- Colors
- Adding custom styles
- Detecting classes in source files
- Functions and directives

### Base styles
- Preflight
```

----------------------------------------

TITLE: Start Laravel Development Server with Vite
DESCRIPTION: This command initiates the development server for your Laravel project, leveraging Vite for fast compilation and hot module replacement. It's used during development to see changes instantly.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/vite

LANGUAGE: Shell
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Set Border Start Color to Violet 300
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-300` to set the inline start border color to a medium violet shade (violet-300). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-300
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-300); /* oklch(81.1% 0.111 293.571) */
```

----------------------------------------

TITLE: TailwindCSS Transition and Animation Utilities
DESCRIPTION: Documentation for TailwindCSS utilities used to define CSS transitions and animations, including properties to animate, duration, timing functions, and delays.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
transition-property
transition-behavior
transition-duration
transition-timing-function
transition-delay
animation
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 800
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-800` to set the inline start border color to a very dark indigo shade (indigo-800). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-800); /* oklch(39.8% 0.195 277.366) */
```

----------------------------------------

TITLE: Set Border Start Color to Violet 600
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-600` to set the inline start border color to a dark violet shade (violet-600). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-600
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-600); /* oklch(54.1% 0.281 293.009) */
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts and Setup
DESCRIPTION: This section outlines the foundational aspects of using Tailwind CSS, including installation, editor configuration, compatibility, and fundamental styling principles like utility classes, responsive design, and dark mode.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: APIDOC
CODE:
```
Installation: /docs/installation
Editor setup: /docs/editor-setup
Compatibility: /docs/compatibility
Upgrade guide: /docs/upgrade-guide
Styling with utility classes: /docs/styling-with-utility-classes
Hover, focus, and other states: /docs/hover-focus-and-other-states
Responsive design: /docs/responsive-design
Dark mode: /docs/dark-mode
Theme variables: /docs/theme
Colors: /docs/colors
Adding custom styles: /docs/adding-custom-styles
Detecting classes in source files: /docs/detecting-classes-in-source-files
Functions and directives: /docs/functions-and-directives
Base styles (Preflight): /docs/preflight
```

----------------------------------------

TITLE: Tailwind CSS Accessibility Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes related to accessibility. This includes utilities like `forced-color-adjust` which helps adapt content for forced color modes.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust: Controls whether the user agent may adjust the colors of the element to conform to a forced colors mode.
```

----------------------------------------

TITLE: Set Border Start Color to Purple 500
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-500` to set the inline start border color to a standard purple shade (purple-500). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-500
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-500); /* oklch(62.7% 0.265 303.9) */
```

----------------------------------------

TITLE: Tailwind CSS User Select Utilities
DESCRIPTION: Provides API documentation for Tailwind CSS `user-select` utilities, which control how users can select text within an element. It details the available classes and their corresponding CSS properties.
SOURCE: https://tailwindcss.com/docs/user-select

LANGUAGE: APIDOC
CODE:
```
user-select Utilities:
  Class        | Styles
  -------------|------------------
  `select-none`| `user-select: none;`
  `select-text`| `user-select: text;`
  `select-all` | `user-select: all;`
  `select-auto`| `user-select: auto;`
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 300
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-300` to set the inline start border color to a medium indigo shade (indigo-300). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-300
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-300); /* oklch(78.5% 0.115 274.713) */
```

----------------------------------------

TITLE: TailwindCSS Effects Utilities
DESCRIPTION: Documentation for TailwindCSS utilities related to visual effects like shadows, opacity, and blend modes, allowing control over how elements appear and interact visually.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
box-shadow
text-shadow
opacity
mix-blend-mode
background-blend-mode
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-type
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts and Setup
DESCRIPTION: Documents fundamental aspects of using Tailwind CSS, including installation, editor setup, compatibility, upgrade guidance, and core styling principles like utility classes, states, responsive design, and theme customization.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Getting started:
  - Installation
  - Editor setup
  - Compatibility
  - Upgrade guide
Core concepts:
  - Styling with utility classes
  - Hover, focus, and other states
  - Responsive design
  - Dark mode
  - Theme variables
  - Colors
  - Adding custom styles
  - Detecting classes in source files
  - Functions and directives
```

----------------------------------------

TITLE: Set Border Start Color to Purple 200
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-200` to set the inline start border color to a light-medium purple shade (purple-200). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-200
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-200); /* oklch(90.2% 0.063 306.703) */
```

----------------------------------------

TITLE: Tailwind CSS Utility Categories and Properties Reference
DESCRIPTION: A structured reference of core Tailwind CSS utility categories and the CSS properties they control, including effects, filters, table styling, transitions, animations, transforms, interactivity, SVG, and accessibility.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow
  - text-shadow
  - opacity
  - mix-blend-mode
  - background-blend-mode
  - mask-clip
  - mask-composite
  - mask-image
  - mask-mode
  - mask-origin
  - mask-position
  - mask-repeat
  - mask-size
  - mask-type

Filters:
  - filter
    - blur
    - brightness
    - contrast
    - drop-shadow
    - grayscale
    - hue-rotate
    - invert
    - saturate
    - sepia
  - backdrop-filter
    - blur
    - brightness
    - contrast
    - grayscale
    - hue-rotate
    - invert
    - opacity
    - saturate
    - sepia

Tables:
  - border-collapse
  - border-spacing
  - table-layout
  - caption-side

Transitions & Animation:
  - transition-property
  - transition-behavior
  - transition-duration
  - transition-timing-function
  - transition-delay
  - animation

Transforms:
  - backface-visibility
  - perspective
  - perspective-origin
  - rotate
  - scale
  - skew
  - transform
  - transform-origin
  - transform-style
  - translate

Interactivity:
  - accent-color
  - appearance
  - caret-color
  - color-scheme
  - cursor
  - field-sizing
  - pointer-events
  - resize
  - scroll-behavior
  - scroll-margin
  - scroll-padding
  - scroll-snap-align
  - scroll-snap-stop
  - scroll-snap-type
  - touch-action
  - user-select
  - will-change

SVG:
  - fill
  - stroke
  - stroke-width

Accessibility:
  - forced-color-adjust
```

----------------------------------------

TITLE: Set Border Start Color to Violet 500
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-500` to set the inline start border color to a standard violet shade (violet-500). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-500
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-500); /* oklch(60.6% 0.25 292.717) */
```

----------------------------------------

TITLE: Tailwind CSS Hyphenation Utilities API
DESCRIPTION: API documentation for Tailwind CSS utility classes that control text hyphenation behavior, mapping to standard CSS `hyphens` property values. These utilities allow developers to prevent, manually control, or automatically enable hyphenation.
SOURCE: https://tailwindcss.com/docs/hyphens

LANGUAGE: APIDOC
CODE:
```
hyphens-none:
  CSS Property: hyphens: none;
  Description: Prevents words from being hyphenated, even if soft hyphens (&shy;) are present.
hyphens-manual:
  CSS Property: hyphens: manual;
  Description: Allows hyphenation only at explicitly defined points (e.g., using &shy;).
hyphens-auto:
  CSS Property: hyphens: auto;
  Description: Allows the browser to automatically choose hyphenation points based on the language of the content. Soft hyphens (&shy;) will be preferred over automatic points.
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts and Setup
DESCRIPTION: This section outlines the fundamental concepts of using Tailwind CSS, including installation, editor setup, compatibility, and how to style elements using utility classes, manage states, implement responsive design, and handle dark mode. It also covers theme variables, custom styles, and detecting classes.
SOURCE: https://tailwindcss.com/docs/background-position

LANGUAGE: APIDOC
CODE:
```
Installation: Guide to setting up Tailwind CSS in a project.
Editor setup: Configuration for IDEs to enhance Tailwind CSS development.
Compatibility: Information on browser and framework compatibility.
Upgrade guide: Instructions for migrating between Tailwind CSS versions.
Styling with utility classes: Principles of applying styles directly in HTML using utility classes.
Hover, focus, and other states: Applying styles based on element states.
Responsive design: Techniques for creating responsive layouts using breakpoints.
Dark mode: Implementing dark themes with Tailwind CSS.
Theme variables: Customizing design tokens like colors, fonts, and spacing.
Colors: Managing and using color palettes.
Adding custom styles: Extending Tailwind CSS with custom CSS or utility classes.
Detecting classes in source files: How Tailwind's JIT engine scans for used classes.
Functions and directives: Using Tailwind's `@apply`, `@tailwind`, and `theme()` functions in CSS.
Preflight: Tailwind's opinionated base styles for cross-browser consistency.
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 400
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-400` to set the inline start border color to a medium-dark indigo shade (indigo-400). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-400
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-400); /* oklch(67.3% 0.182 276.935) */
```

----------------------------------------

TITLE: Tailwind CSS Table Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes used for styling HTML tables. These utilities control aspects like border collapsing, spacing, table layout, and caption positioning.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
border-collapse: Sets whether table borders are collapsed into a single border or separated.
border-spacing: Sets the distance between the borders of adjacent cells.
table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
caption-side: Specifies the placement of a table caption.
```

----------------------------------------

TITLE: Use Tailwind CSS in Svelte Component with PostCSS
DESCRIPTION: Example Svelte component (`+page.svelte`) demonstrating the use of Tailwind's utility classes for styling and how to integrate PostCSS for theme-based styling within `<style>` blocks.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: HTML
CODE:
```
<h1 class=""text-3xl font-bold underline"">
  Hello world!
</h1>
<style lang=""postcss"">
  @reference ""tailwindcss"";
  :global(html) {
    background-color: theme(--color-gray-100);
  }
</style>
```

----------------------------------------

TITLE: HTML Example for mix-blend-mode Utilities
DESCRIPTION: Demonstrates the usage of `mix-blend-overlay` and `mix-blend-soft-light` utility classes within an HTML structure to blend elements, specifically showing two divs with different background colors and `mix-blend-multiply` applied.
SOURCE: https://tailwindcss.com/docs/mix-blend-mode

LANGUAGE: HTML
CODE:
```
<div class=""flex justify-center -space-x-14"">  <div class=""bg-blue-500 mix-blend-multiply ...""></div>  <div class=""bg-pink-500 mix-blend-multiply ...""></div></div>
```

----------------------------------------

TITLE: Tailwind CSS Flex Grow Utilities Reference
DESCRIPTION: Documentation for Tailwind CSS `flex-grow` utilities, controlling how flex items grow to fill available space. Includes class names, corresponding CSS styles, and options for custom values or CSS variables.
SOURCE: https://tailwindcss.com/docs/flex-grow

LANGUAGE: APIDOC
CODE:
```
flex-grow Utilities:

Class | Styles
--- | ---
`grow` | `flex-grow: 1;`
`grow-<number>` | `flex-grow: <number>;`
`grow-[<value>]` | `flex-grow: <value>;`
`grow-(<custom-property>)` | `flex-grow: var(<custom-property>);`
```

----------------------------------------

TITLE: Set Border Start Color to Purple 700
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-700` to set the inline start border color to a darker purple shade (purple-700). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-700); /* oklch(49.6% 0.265 301.924) */
```

----------------------------------------

TITLE: Apply Basic Opacity to HTML Buttons
DESCRIPTION: Demonstrates how to apply different levels of opacity to HTML button elements using Tailwind CSS `opacity-<number>` utility classes.
SOURCE: https://tailwindcss.com/docs/opacity

LANGUAGE: HTML
CODE:
```
<button class=""bg-indigo-500 opacity-100 ...""></button><button class=""bg-indigo-500 opacity-75 ...""></button><button class=""bg-indigo-500 opacity-50 ...""></button><button class=""bg-indigo-500 opacity-25 ...""></button>
```

----------------------------------------

TITLE: Tailwind CSS font-variant-numeric Utilities API
DESCRIPTION: Documents the Tailwind CSS utility classes for controlling the variant of numbers, including normal, ordinal, slashed zero, lining, oldstyle, proportional, tabular, diagonal, and stacked fractions. Each class maps to a specific `font-variant-numeric` CSS property value.
SOURCE: https://tailwindcss.com/docs/font-variant-numeric

LANGUAGE: APIDOC
CODE:
```
font-variant-numeric: Utilities for controlling the variant of numbers.

Class: normal-nums
  Styles: font-variant-numeric: normal;
Class: ordinal
  Styles: font-variant-numeric: ordinal;
Class: slashed-zero
  Styles: font-variant-numeric: slashed-zero;
Class: lining-nums
  Styles: font-variant-numeric: lining-nums;
Class: oldstyle-nums
  Styles: font-variant-numeric: oldstyle-nums;
Class: proportional-nums
  Styles: font-variant-numeric: proportional-nums;
Class: tabular-nums
  Styles: font-variant-numeric: tabular-nums;
Class: diagonal-fractions
  Styles: font-variant-numeric: diagonal-fractions;
Class: stacked-fractions
  Styles: font-variant-numeric: stacked-fractions;
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 200
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-200` to set the inline start border color to a light-medium indigo shade (indigo-200). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-200
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-200); /* oklch(87% 0.065 274.039) */
```

----------------------------------------

TITLE: Set Border Start Color to Purple 900
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-900` to set the inline start border color to a deep purple shade (purple-900). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
undefined
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that control user interaction with elements, including cursor styles, scroll behavior, and user selection.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: APIDOC
CODE:
```
Interactivity:
  - accent-color: Sets the accent color for user-interface controls generated by the element.
  - appearance: Controls the native appearance of UI widgets.
  - caret-color: Sets the color of the text insertion caret.
  - color-scheme: Specifies the color scheme an element should be rendered with.
  - cursor: Specifies the type of cursor to be displayed when pointing over an element.
  - field-sizing: Controls the sizing of form fields.
  - pointer-events: Specifies whether an element is the target of mouse events.
  - resize: Specifies whether an element is resizable by the user.
  - scroll-behavior: Specifies the scrolling behavior for a scrolling box.
  - scroll-margin: Defines the margin of the scroll snap area.
  - scroll-padding: Defines the padding of the scroll snap area.
  - scroll-snap-align: Specifies the snap position for a scroll container.
  - scroll-snap-stop: Specifies whether a scroll container is allowed to 'pass over' snap positions.
  - scroll-snap-type: Specifies how strictly snap points are enforced on the scroll container.
  - touch-action: Determines how a touch event should be handled.
  - user-select: Controls whether the user can select text.
  - will-change: Hints to browsers about what changes are expected on an element.
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: This command initiates the development server for the project, allowing you to preview your application in a browser and benefit from features like hot module reloading during development.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/react-router

LANGUAGE: Terminal
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Create a New Laravel Project
DESCRIPTION: This command initializes a new Laravel project using the Laravel installer. It sets up the basic directory structure and necessary files for a new application.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/vite

LANGUAGE: Shell
CODE:
```
laravel new my-project
cd my-project
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 950
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-950` to set the inline start border color to a very deep indigo shade (indigo-950). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-950
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-950); /* oklch(25.7% 0.09 281.288) */
```

----------------------------------------

TITLE: Tailwind CSS Accessibility Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities that enhance accessibility, such as adjusting colors for forced color modes.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
Accessibility Properties:
- forced-color-adjust
```

----------------------------------------

TITLE: Set Border Start Color to Violet 100
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-100` to set the inline start border color to a light violet shade (violet-100). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-100
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-100); /* oklch(94.3% 0.029 294.588) */
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts and Base Styles
DESCRIPTION: Documents fundamental concepts and base styles in Tailwind CSS, including how to use utility classes, handle states like hover and focus, implement responsive design, manage dark mode, define theme variables, work with colors, add custom styles, detect classes, and utilize functions and directives. It also covers the Preflight base styles.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: APIDOC
CODE:
```
Core Concepts:
  - Styling with utility classes: Apply styles directly in HTML using predefined classes.
  - Hover, focus, and other states: Apply styles conditionally based on element states.
  - Responsive design: Create responsive layouts using breakpoint prefixes.
  - Dark mode: Implement dark mode styling.
  - Theme variables: Customize design tokens like colors, spacing, and fonts.
  - Colors: Utilize Tailwind's default color palette or define custom colors.
  - Adding custom styles: Extend Tailwind with custom CSS or utility classes.
  - Detecting classes in source files: How Tailwind scans files for class usage.
  - Functions and directives: Use `@apply`, `@tailwind`, `@layer` in CSS.

Base Styles:
  - Preflight: Tailwind's opinionated base styles to normalize browser inconsistencies.
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 900
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-900` to set the inline start border color to a deep indigo shade (indigo-900). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-900
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-900); /* oklch(35.9% 0.144 278.697) */
```

----------------------------------------

TITLE: TailwindCSS Accessibility Utilities
DESCRIPTION: Documentation for TailwindCSS utilities that enhance accessibility, such as adjusting colors for forced color modes.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust
```

----------------------------------------

TITLE: Create a New Nuxt.js Project
DESCRIPTION: Initializes a new Nuxt.js project using the Nuxt Command Line Interface (CLI) and navigates into the newly created project directory.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nuxt

LANGUAGE: Terminal
CODE:
```
npx nuxi init my-project
cd my-project
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 50
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-50` to set the inline start border color to a very light indigo shade (indigo-50). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-50
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-50); /* oklch(96.2% 0.018 272.314) */
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 600
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-600` to set the inline start border color to a dark indigo shade (indigo-600). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-600
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-600); /* oklch(51.1% 0.262 276.966) */
```

----------------------------------------

TITLE: Set Border Start Color to Violet 50
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-50` to set the inline start border color to a very light violet shade (violet-50). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-50
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-50); /* oklch(96.9% 0.016 293.756) */
```

----------------------------------------

TITLE: Tailwind CSS justify-items-start Example
DESCRIPTION: Demonstrates the use of the `justify-items-start` utility class to align grid items to the start of their inline axis within a grid container.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: html
CODE:
```
<div class=""grid justify-items-start ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
  <div>04</div>
  <div>05</div>
  <div>06</div>
</div>
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 700
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-700` to set the inline start border color to a darker indigo shade (indigo-700). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-700); /* oklch(45.7% 0.24 277.023) */
```

----------------------------------------

TITLE: React Component for Vacation Card
DESCRIPTION: Illustrates how to create a reusable React component (`VacationCard`) that encapsulates structure and styles. This approach promotes a single source of truth for styles, making updates easier across multiple instances.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: JavaScript
CODE:
```
export function VacationCard({ img, imgAlt, eyebrow, title, pricing, url }) {  return (    <div>      <img className=""rounded-lg"" src={img} alt={imgAlt} />      <div className=""mt-4"">        <div className=""text-xs font-bold text-sky-500"">{eyebrow}</div>        <div className=""mt-1 font-bold text-gray-700"">          <a href={url} className=""hover:underline"">            {title}          </a>        </div>        <div className=""mt-2 text-sm text-gray-600"">{pricing}</div>      </div>    </div>  );}
```

----------------------------------------

TITLE: Set Border Start Color to Blue 900
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-blue-900` to set the inline start border color to a deep blue shade (blue-900). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-900
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-900); /* oklch(37.9% 0.146 265.522) */
```

----------------------------------------

TITLE: Tailwind CSS Transitions and Animation Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that manage CSS transitions and animations, allowing for smooth changes in element properties over time.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: APIDOC
CODE:
```
transition-property: Utilities for controlling which CSS properties transition.
transition-behavior: Utilities for controlling the transition behavior.
transition-duration: Utilities for controlling the duration of CSS transitions.
transition-timing-function: Utilities for controlling the timing function of CSS transitions.
transition-delay: Utilities for controlling the delay of CSS transitions.
animation: Utilities for controlling CSS animations.
```

----------------------------------------

TITLE: Set Border Start Color to Blue 950
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-blue-950` to set the inline start border color to a very dark blue shade (blue-950). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-950
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-950); /* oklch(28.2% 0.091 267.935) */
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 500
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-500` to set the inline start border color to a standard indigo shade (indigo-500). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-500
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-500); /* oklch(58.5% 0.233 277.117) */
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Properties
DESCRIPTION: Documentation for Tailwind CSS utilities that manage user interaction with elements, including cursor styles, scroll behavior, and user selection.
SOURCE: https://tailwindcss.com/docs/width

LANGUAGE: APIDOC
CODE:
```
accent-color: Sets the accent color for user-interface controls generated by the element.
appearance: Controls the native appearance of UI widgets.
caret-color: Sets the color of the caret (text input cursor).
color-scheme: Allows an element to indicate which color schemes it is comfortable with.
cursor: Specifies the type of cursor to be displayed when pointing over an element.
field-sizing: Controls the sizing of form fields.
pointer-events: Sets under what circumstances (if any) a graphic element can be the target of pointer events.
resize: Specifies whether an element is resizable by the user.
scroll-behavior: Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSS scroll-snap positioning.
scroll-margin: Defines the scroll margin of an element.
scroll-padding: Defines the scroll padding of an element.
scroll-snap-align: Specifies the snap position for a scroll container.
scroll-snap-stop: Specifies whether the scroll container must snap to a snap point or can pass over it.
scroll-snap-type: Specifies how strictly snap points are enforced on the scroll container.
touch-action: Determines how a touch event may be handled.
user-select: Controls whether the user can select text.
will-change: Hints to browsers how an element is expected to change.
```

----------------------------------------

TITLE: Tailwind CSS Contrast Filter Utility API
DESCRIPTION: Documents the `contrast` filter utility in Tailwind CSS, explaining its available classes, their corresponding CSS styles, and how to use custom values or CSS variables to apply contrast filters to elements.
SOURCE: https://tailwindcss.com/docs/filter-contrast

LANGUAGE: APIDOC
CODE:
```
contrast-<number>
  - Styles: filter: contrast(<number>%);
  - Description: Applies a contrast filter with a numeric percentage value (e.g., contrast-50, contrast-100).
contrast-(<custom-property>)
  - Styles: filter: contrast(var(<custom-property>));
  - Description: Applies a contrast filter using a CSS custom property. This is a shorthand for contrast-[var(<custom-property>)].
contrast-[<value>]
  - Styles: filter: contrast(<value>);
  - Description: Applies a contrast filter with a completely custom value, allowing for arbitrary CSS values.
```

----------------------------------------

TITLE: Set Border Start Color to Violet 900
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-900` to set the inline start border color to a deep violet shade (violet-900). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-900
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-900); /* oklch(38% 0.189 293.745) */
```

----------------------------------------

TITLE: Install AdonisJS and Tailwind CSS via npm
DESCRIPTION: Commands to initialize a new AdonisJS project and install Tailwind CSS with its Vite plugin dependencies using npm, followed by the command to start the development server.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/adonisjs

LANGUAGE: Shell
CODE:
```
npm init adonisjs@latest my-project -- --kit=webcd my-project
npm install tailwindcss @tailwindcss/vite
npm run dev
```

----------------------------------------

TITLE: Tailwind CSS SVG Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities specifically designed for styling SVG elements, controlling fill, stroke, and stroke width.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
SVG Properties:
- fill
- stroke
- stroke-width
```

----------------------------------------

TITLE: Set Border Start Color to Purple 800
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-800` to set the inline start border color to a very dark purple shade (purple-800). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-800); /* oklch(43.8% 0.218 303.724) */
```

----------------------------------------

TITLE: Tailwind CSS Backdrop Filter Utility Classes API Reference
DESCRIPTION: This API documentation outlines the utility classes available in Tailwind CSS for applying backdrop filters to elements. It specifies the class names and their corresponding CSS styles, allowing developers to control the visual effects behind an element.
SOURCE: https://tailwindcss.com/docs/backdrop-filter

LANGUAGE: APIDOC
CODE:
```
Utility: backdrop-filter
Description: Utilities for applying backdrop filters to an element.

Class: `backdrop-filter-none`
  Styles: `backdrop-filter: none;`

Class: `backdrop-filter-(<custom-property>)`
  Styles: `backdrop-filter: var(<custom-property>);`

Class: `backdrop-filter-[<value>]`
  Styles: `backdrop-filter: <value>;`

Related Utilities:
  - blur: `/docs/backdrop-filter-blur`
  - brightness: `/docs/backdrop-filter-brightness`
  - contrast: `/docs/backdrop-filter-contrast`
  - grayscale: `/docs/backdrop-filter-grayscale`
  - hue-rotate: `/docs/backdrop-filter-hue-rotate`
  - invert: `/docs/backdrop-filter-invert`
  - opacity: `/docs/backdrop-filter-opacity`
  - saturate: `/docs/backdrop-filter-saturate`
  - sepia: `/docs/backdrop-filter-sepia`
```

----------------------------------------

TITLE: Set Border Start Color to Violet 700
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-700` to set the inline start border color to a darker violet shade (violet-700). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-700); /* oklch(49.1% 0.27 292.581) */
```

----------------------------------------

TITLE: Using custom utility classes in HTML
DESCRIPTION: Shows how to apply a custom utility class, defined using the `@utility` directive, directly within HTML markup. This demonstrates the integration of custom utilities into the standard Tailwind workflow.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: HTML
CODE:
```
<div class=""content-auto"">  <!-- ... --></div>
```

----------------------------------------

TITLE: Set Border Start Color to Violet 400
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-400` to set the inline start border color to a medium-dark violet shade (violet-400). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-400
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-400); /* oklch(70.2% 0.183 293.541) */
```

----------------------------------------

TITLE: TailwindCSS SVG Utilities
DESCRIPTION: Documentation for TailwindCSS utilities specifically for styling SVG elements, controlling their fill, stroke, and stroke width properties.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
fill
stroke
stroke-width
```

----------------------------------------

TITLE: Tailwind CSS Filter Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes that apply graphical filters to elements. This includes general filters and backdrop filters, with various effects like blur, brightness, contrast, and color adjustments.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
filter: Applies graphical effects like blur, brightness, contrast, drop-shadow, grayscale, hue-rotate, invert, saturate, and sepia to an element.
  blur: Applies a blur effect.
  brightness: Adjusts the brightness.
  contrast: Adjusts the contrast.
  drop-shadow: Applies a drop shadow.
  grayscale: Converts to grayscale.
  hue-rotate: Rotates the hue.
  invert: Inverts colors.
  saturate: Adjusts saturation.
  sepia: Applies a sepia tone.
backdrop-filter: Applies graphical effects to the area behind an element. Similar effects as 'filter' but applied to the backdrop.
  blur: Applies a blur effect to the backdrop.
  brightness: Adjusts the backdrop brightness.
  contrast: Adjusts the backdrop contrast.
  grayscale: Converts backdrop to grayscale.
  hue-rotate: Rotates backdrop hue.
  invert: Inverts backdrop colors.
  opacity: Adjusts backdrop opacity.
  saturate: Adjusts backdrop saturation.
  sepia: Applies a sepia tone to the backdrop.
```

----------------------------------------

TITLE: HTML Examples for Tailwind CSS align-content Utilities
DESCRIPTION: Demonstrates the practical application of various Tailwind CSS `align-content` utility classes within HTML, showing how to position rows in grid containers using `content-start`, `content-center`, `content-end`, and `content-between`.
SOURCE: https://tailwindcss.com/docs/align-content

LANGUAGE: html
CODE:
```
<div class=""grid h-56 grid-cols-3 content-start gap-4 ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
  <div>04</div>
  <div>05</div>
</div>
```

LANGUAGE: html
CODE:
```
<div class=""grid h-56 grid-cols-3 content-center gap-4 ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
  <div>04</div>
  <div>05</div>
</div>
```

LANGUAGE: html
CODE:
```
<div class=""grid h-56 grid-cols-3 content-end gap-4 ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
  <div>04</div>
  <div>05</div>
</div>
```

LANGUAGE: html
CODE:
```
<div class=""grid h-56 grid-cols-3 content-between gap-4 ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
  <div>04</div>
  <div>05</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Transition and Animation Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities used to define CSS transitions and animations, including property, duration, timing function, delay, and animation properties.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: APIDOC
CODE:
```
Transitions & Animation:
  - transition-property: Specifies the CSS properties to which a transition effect should be applied.
  - transition-behavior: Specifies whether a transition should be applied to discrete properties.
  - transition-duration: Specifies how many seconds or milliseconds a transition effect takes to complete.
  - transition-timing-function: Specifies the speed curve of the transition effect.
  - transition-delay: Specifies when the transition effect will start.
  - animation: A shorthand property for all the animation properties.
```

----------------------------------------

TITLE: Set Border Start Color to Indigo 100
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-indigo-100` to set the inline start border color to a light indigo shade (indigo-100). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-indigo-100
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-indigo-100); /* oklch(93% 0.034 272.788) */
```

----------------------------------------

TITLE: Set Border Start Color to Purple 100
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-100` to set the inline start border color to a light purple shade (purple-100). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-100
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-100); /* oklch(94.6% 0.033 307.174) */
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts and Base Styles
DESCRIPTION: Documents fundamental aspects of using Tailwind CSS, including installation, editor setup, compatibility, upgrade guidance, and core styling principles like utility classes, responsive design, dark mode, and custom style integration. It also covers the Preflight base styles.
SOURCE: https://tailwindcss.com/docs/list-style-type

LANGUAGE: APIDOC
CODE:
```
### Getting started
- Installation: Guide to setting up Tailwind CSS in a project.
- Editor setup: Configuration for IDEs to enhance Tailwind development.
- Compatibility: Information on browser and environment compatibility.
- Upgrade guide: Steps to migrate between Tailwind CSS versions.

### Core concepts
- Styling with utility classes: Explains the utility-first approach.
- Hover, focus, and other states: How to apply styles based on element states.
- Responsive design: Techniques for building responsive layouts.
- Dark mode: Implementing dark themes.
- Theme variables: Customizing design tokens.
- Colors: Working with Tailwind's color palette.
- Adding custom styles: Extending Tailwind with custom CSS.
- Detecting classes in source files: How Tailwind scans for utility classes.
- Functions and directives: Using Tailwind's custom CSS functions and directives.

### Base styles
- Preflight: Tailwind's opinionated base styles for cross-browser consistency.
```

----------------------------------------

TITLE: Tailwind CSS flex-basis Utility Classes
DESCRIPTION: API documentation for Tailwind CSS utilities that control the initial size of flex items. These classes map to various `flex-basis` CSS properties, including fixed sizes, fractions, and responsive container sizes.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
Class: basis-<number>
Styles: flex-basis: calc(var(--spacing) * <number>);
Description: Sets flex-basis based on the spacing scale.

Class: basis-<fraction>
Styles: flex-basis: calc(<fraction> * 100%);
Description: Sets flex-basis as a percentage based on a fraction (e.g., 1/2, 1/3).

Class: basis-full
Styles: flex-basis: 100%;
Description: Sets flex-basis to 100%.

Class: basis-auto
Styles: flex-basis: auto;
Description: Sets flex-basis to auto, allowing content to determine size.

Class: basis-3xs
Styles: flex-basis: var(--container-3xs); /* 16rem (256px) */
Description: Sets flex-basis to a predefined extra-small container size.

Class: basis-2xs
Styles: flex-basis: var(--container-2xs); /* 18rem (288px) */
Description: Sets flex-basis to a predefined extra-small container size.

Class: basis-xs
Styles: flex-basis: var(--container-xs); /* 20rem (320px) */
Description: Sets flex-basis to a predefined small container size.

Class: basis-sm
Styles: flex-basis: var(--container-sm); /* 24rem (384px) */
Description: Sets flex-basis to a predefined small container size.

Class: basis-md
Styles: flex-basis: var(--container-md); /* 28rem (448px) */
Description: Sets flex-basis to a predefined medium container size.

Class: basis-lg
Styles: flex-basis: var(--container-lg); /* 32rem (512px) */
Description: Sets flex-basis to a predefined large container size.

Class: basis-xl
Styles: flex-basis: var(--container-xl); /* 36rem (576px) */
Description: Sets flex-basis to a predefined extra-large container size.

Class: basis-2xl
Styles: flex-basis: var(--container-2xl); /* 42rem (672px) */
Description: Sets flex-basis to a predefined 2x-large container size.

Class: basis-3xl
Styles: flex-basis: var(--container-3xl); /* 48rem (768px) */
Description: Sets flex-basis to a predefined 3x-large container size.

Class: basis-4xl
Styles: flex-basis: var(--container-4xl); /* 56rem (896px) */
Description: Sets flex-basis to a predefined 4x-large container size.

Class: basis-5xl
Styles: flex-basis: var(--container-5xl); /* 64rem (1024px) */
Description: Sets flex-basis to a predefined 5x-large container size.

Class: basis-6xl
Styles: flex-basis: var(--container-6xl); /* 72rem (1152px) */
Description: Sets flex-basis to a predefined 6x-large container size.

Class: basis-7xl
Styles: flex-basis: var(--container-7xl); /* 80rem (1280px) */
Description: Sets flex-basis to a predefined 7x-large container size.

Class: basis-(<custom-property>)
Styles: flex-basis: var(<custom-property>);
Description: Sets flex-basis using a custom CSS variable.

Class: basis-[<value>]
Styles: flex-basis: <value>;
Description: Sets flex-basis to an arbitrary CSS value.
```

----------------------------------------

TITLE: Set Border Start Color to Violet 200
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-200` to set the inline start border color to a light-medium violet shade (violet-200). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-200
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-200); /* oklch(89.4% 0.057 293.283) */
```

----------------------------------------

TITLE: Set Border Start Color to Violet 800
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-800` to set the inline start border color to a very dark violet shade (violet-800). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-800); /* oklch(43.2% 0.232 292.759) */
```

----------------------------------------

TITLE: TailwindCSS Grid Column Utilities API
DESCRIPTION: Documents the TailwindCSS utility classes for controlling how elements are sized and placed across grid columns, including spanning, starting, and ending columns. Each utility class maps directly to specific CSS `grid-column` or `grid-column-start`/`grid-column-end` properties.
SOURCE: https://tailwindcss.com/docs/grid-column

LANGUAGE: APIDOC
CODE:
```
TailwindCSS Grid Column Utilities:

- col-span-<number>: grid-column: span <number> / span <number>;
- col-span-full: grid-column: 1 / -1;
- col-span-(<custom-property>): grid-column: span var(<custom-property>) / span var(<custom-property>);
- col-span-[<value>]: grid-column: span <value> / span <value>;
- col-start-<number>: grid-column-start: <number>;
- -col-start-<number>: grid-column-start: calc(<number> * -1);
- col-start-auto: grid-column-start: auto;
- col-start-(<custom-property>): grid-column-start: var(<custom-property>);
- col-start-[<value>]: grid-column-start: <value>;
- col-end-<number>: grid-column-end: <number>;
- -col-end-<number>: grid-column-end: calc(<number> * -1);
- col-end-auto: grid-column-end: auto;
- col-end-(<custom-property>): grid-column-end: var(<custom-property>);
- col-end-[<value>]: grid-column-end: <value>;
- col-auto: grid-column: auto;
- col-<number>: grid-column: <number>;
- -col-<number>: grid-column: calc(<number> * -1);
- col-(<custom-property>): grid-column: var(<custom-property>);
- col-[<value>]: grid-column: <value>;
```

----------------------------------------

TITLE: Set Border Start Color to Purple 400
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-400` to set the inline start border color to a medium-dark purple shade (purple-400). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-400
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-400); /* oklch(71.4% 0.203 305.504) */
```

----------------------------------------

TITLE: Tailwind CSS Responsive Flex Direction Example
DESCRIPTION: Demonstrates how to apply `flex-direction` utilities responsively using breakpoint variants. The example shows changing from a column layout to a row layout at medium screen sizes and above.
SOURCE: https://tailwindcss.com/docs/flex-direction

LANGUAGE: HTML
CODE:
```
<div class=""flex flex-col md:flex-row ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: TailwindCSS Transform Utilities
DESCRIPTION: Documentation for TailwindCSS utilities that apply 2D and 3D transformations like rotation, scaling, skewing, and translation to elements.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
backface-visibility
perspective
perspective-origin
rotate
scale
skew
transform
transform-origin
transform-style
translate
```

----------------------------------------

TITLE: Set Border Start Color to Purple 50
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-50` to set the inline start border color to a very light purple shade (purple-50). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-50
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-50); /* oklch(97.7% 0.014 308.299) */
```

----------------------------------------

TITLE: Tailwind CSS font-stretch Utility Classes API
DESCRIPTION: API documentation for Tailwind CSS `font-stretch` utilities, which control the width of a font face. This table maps specific utility classes to their corresponding CSS `font-stretch` property values, including percentage-based and custom property/value options.
SOURCE: https://tailwindcss.com/docs/font-stretch

LANGUAGE: APIDOC
CODE:
```
font-stretch utility classes:
  Class                       | Styles
  ----------------------------|------------------------------------------
  `font-stretch-ultra-condensed` | `font-stretch: ultra-condensed; /* 50% */`
  `font-stretch-extra-condensed` | `font-stretch: extra-condensed; /* 62.5% */`
  `font-stretch-condensed`    | `font-stretch: condensed; /* 75% */`
  `font-stretch-semi-condensed` | `font-stretch: semi-condensed; /* 87.5% */`
  `font-stretch-normal`       | `font-stretch: normal; /* 100% */`
  `font-stretch-semi-expanded` | `font-stretch: semi-expanded; /* 112.5% */`
  `font-stretch-expanded`     | `font-stretch: expanded; /* 125% */`
  `font-stretch-extra-expanded` | `font-stretch: extra-expanded; /* 150% */`
  `font-stretch-ultra-expanded` | `font-stretch: ultra-expanded; /* 200% */`
  `font-stretch-<percentage>` | `font-stretch: <percentage>;`
  `font-stretch-(<custom-property>)` | `font-stretch: var(<custom-property>);`
  `font-stretch-[<value>]`    | `font-stretch: <value>;`
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS Blur Utilities
DESCRIPTION: Demonstrates the application of various Tailwind CSS blur utility classes to image elements within an HTML structure. This example shows how different blur levels can be applied directly using class names.
SOURCE: https://tailwindcss.com/docs/filter-blur

LANGUAGE: HTML
CODE:
```
<img class=""blur-none"" src=""/img/mountains.jpg"" /><img class=""blur-sm"" src=""/img/mountains.jpg"" /><img class=""blur-lg"" src=""/img/mountains.jpg"" /><img class=""blur-2xl"" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: Combine Theme, Bare, and Arbitrary Values in Tailwind CSS Utilities
DESCRIPTION: These CSS snippets illustrate how to combine theme-based, bare, and arbitrary values within a single Tailwind CSS utility definition. Multiple `--value()` declarations are used, and any declarations that fail to resolve will be omitted, allowing flexible value resolution. The first example shows `tab-size` with theme, bare integer, and arbitrary integer values. The second example shows `opacity` with arbitrary percentage, bare integer (converted to percentage), and theme-based values.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: CSS
CODE:
```
@theme {  --tab-size-github: 8;}@utility tab-* {  tab-size: --value([integer]);  tab-size: --value(integer);  tab-size: --value(--tab-size-*);}
```

LANGUAGE: CSS
CODE:
```
@utility opacity-* {  opacity: --value([percentage]);  opacity: calc(--value(integer) * 1%);  opacity: --value(--opacity-*);}
```

----------------------------------------

TITLE: Tailwind CSS color-scheme Utility Class API
DESCRIPTION: Documents the utility classes provided by Tailwind CSS for controlling the color scheme of an element, detailing each class name and its corresponding CSS style. This allows developers to explicitly set an element's preferred color scheme.
SOURCE: https://tailwindcss.com/docs/color-scheme

LANGUAGE: APIDOC
CODE:
```
color-scheme: Utilities for controlling the color scheme of an element.

Class | Styles
--- | ---
`scheme-normal` | `color-scheme: normal;`
`scheme-dark` | `color-scheme: dark;`
`scheme-light` | `color-scheme: light;`
`scheme-light-dark` | `color-scheme: light dark;`
`scheme-only-dark` | `color-scheme: only dark;`
`scheme-only-light` | `color-scheme: only light;`
```

----------------------------------------

TITLE: Set Border Start Color to Violet 950
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-violet-950` to set the inline start border color to a very deep violet shade (violet-950). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-violet-950
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-violet-950); /* oklch(28.3% 0.141 291.089) */
```

----------------------------------------

TITLE: Set Border Start Color to Purple 600
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-600` to set the inline start border color to a dark purple shade (purple-600). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-600
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-600); /* oklch(55.8% 0.288 302.321) */
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS transition-behavior Utility
DESCRIPTION: Demonstrates the use of `transition-normal` and `transition-discrete` utilities in HTML. This example shows how `transition-discrete` allows properties like `display: hidden` to `display: block` to transition smoothly, while `transition-normal` results in an immediate change.
SOURCE: https://tailwindcss.com/docs/transition-behavior

LANGUAGE: HTML
CODE:
```
<label class=""peer ..."">  <input type=""checkbox"" checked /></label><button class=""hidden transition-all not-peer-has-checked:opacity-0 peer-has-checked:block ..."">  I hide</button><label class=""peer ..."">  <input type=""checkbox"" checked /></label><button class=""hidden transition-all transition-discrete not-peer-has-checked:opacity-0 peer-has-checked:block ..."">  I fade out</button>
```

----------------------------------------

TITLE: Install Tailwind CSS and Vite Plugin
DESCRIPTION: Command to install Tailwind CSS and its Vite plugin, along with peer dependencies, using npm in a SvelteKit project.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: Shell
CODE:
```
npm install tailwindcss @tailwindcss/vite
```

----------------------------------------

TITLE: Start Rspack Development Server
DESCRIPTION: Runs the development build process for the Rspack project, typically starting a local server and enabling live reloading.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/rspack/react

LANGUAGE: shell
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Dynamic Contributors List with Templating Loop
DESCRIPTION: This snippet demonstrates how to dynamically render a list of contributors using a templating loop (e.g., Svelte, Nunjucks, or similar syntax). Instead of hardcoding each contributor's image, it iterates over a 'contributors' data array, rendering an `<img>` tag for each user. This approach significantly reduces code duplication, making the UI scalable and easier to maintain as the list of contributors changes.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: HTML
CODE:
```
<div>  <div class=""flex items-center space-x-2 text-base"">    <h4 class=""font-semibold text-slate-900"">Contributors</h4>    <span class=""bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700 ..."">204</span>  </div>  <div class=""mt-3 flex -space-x-2 overflow-hidden"">    {#each contributors as user}      <img class=""inline-block h-12 w-12 rounded-full ring-2 ring-white"" src={user.avatarUrl} alt={user.handle} />    {/each}  </div>  <div class=""mt-3 text-sm font-medium"">    <a href=""#"" class=""text-blue-500"">+ 198 others</a>  </div></div>
```

----------------------------------------

TITLE: Set Border Start Color to Purple 300
DESCRIPTION: Applies the Tailwind CSS utility class `border-s-purple-300` to set the inline start border color to a medium purple shade (purple-300). This class compiles to the `border-inline-start-color` CSS property, using a CSS variable for the color value.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-purple-300
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-purple-300); /* oklch(82.7% 0.119 306.383) */
```

----------------------------------------

TITLE: Tailwind CSS SVG Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes specifically for styling SVG elements. These utilities control the fill color, stroke color, and stroke width of SVG paths and shapes.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
fill: Sets the color of the interior of an SVG shape.
stroke: Sets the color of the outline of an SVG shape.
stroke-width: Sets the width of the outline of an SVG shape.
```

----------------------------------------

TITLE: Tailwind CSS @starting-style Variant
DESCRIPTION: This example uses the `starting` variant to define the initial appearance of an element when it is first rendered or transitions from `display: none` to visible. Specifically, `starting:open:opacity-0` sets the initial opacity to 0 for a popover when it opens, allowing for smooth transition effects.
SOURCE: https://tailwindcss.com/docs/hover-focus-and-other-states

LANGUAGE: HTML
CODE:
```
<div>
  <button popovertarget=""my-popover"">Check for updates</button>
  <div popover id=""my-popover"" class=""opacity-0 starting:open:opacity-0 ..."">
    <!-- ... -->
  </div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Transitions and Animation Properties
DESCRIPTION: Documentation for Tailwind CSS utilities that control CSS transitions and animations, enabling smooth changes in element properties over time.
SOURCE: https://tailwindcss.com/docs/width

LANGUAGE: APIDOC
CODE:
```
transition-property: Specifies the CSS properties to which a transition effect should be applied.
transition-behavior: Defines whether a transition is applied to discrete properties.
transition-duration: Specifies how long a transition animation should take to complete.
transition-timing-function: Specifies the speed curve of the transition effect.
transition-delay: Specifies when the transition effect will start.
animation: A shorthand property for all animation properties.
```

----------------------------------------

TITLE: Integrate Tailwind CSS in HTML
DESCRIPTION: This snippet demonstrates how to include Tailwind CSS in a basic HTML file and use its utility classes. It shows the necessary <link> tag for the compiled CSS and an example of applying text-3xl, font-bold, and underline classes to an <h1> element. Ensure /dist/styles.css is your compiled Tailwind CSS file.
SOURCE: https://tailwindcss.com/docs/installation/using-postcss

LANGUAGE: HTML
CODE:
```
<!doctype html><html><head>  <meta charset=""UTF-8"">  <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"">  <link href=""/dist/styles.css"" rel=""stylesheet""></head><body>  <h1 class=""text-3xl font-bold underline"">    Hello world!  </h1></body></html>
```

----------------------------------------

TITLE: Tailwind CSS Transitions and Animation Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for defining and controlling CSS transitions and animations, including properties, duration, timing functions, and delays.
SOURCE: https://tailwindcss.com/docs/table-layout

LANGUAGE: APIDOC
CODE:
```
transition-property: Utilities for controlling which CSS properties transition.
transition-behavior: Utilities for controlling the transition behavior.
transition-duration: Utilities for controlling the duration of CSS transitions.
transition-timing-function: Utilities for controlling the timing function of CSS transitions.
transition-delay: Utilities for controlling the delay of CSS transitions.
animation: Utilities for controlling CSS animations.
```

----------------------------------------

TITLE: Tailwind CSS justify-self-center-safe Example
DESCRIPTION: Demonstrates the `justify-self-center-safe` utility, which aligns a grid item to the center, but falls back to the start if there isn't enough space.
SOURCE: https://tailwindcss.com/docs/justify-self

LANGUAGE: HTML
CODE:
```
<div class=""grid justify-items-stretch ..."">  <!-- ... -->  <div class=""justify-self-center-safe ..."">02</div>  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Filter Blur Utility Classes API
DESCRIPTION: Documents the Tailwind CSS utility classes for applying blur filters to elements. This API specification details each class name, its corresponding CSS style, and the pixel value of the blur effect, including options for custom properties and arbitrary values.
SOURCE: https://tailwindcss.com/docs/filter-blur

LANGUAGE: APIDOC
CODE:
```
filter: blur() Utility Classes:
- blur-xs: filter: blur(var(--blur-xs)); /* 4px */
- blur-sm: filter: blur(var(--blur-sm)); /* 8px */
- blur-md: filter: blur(var(--blur-md)); /* 12px */
- blur-lg: filter: blur(var(--blur-lg)); /* 16px */
- blur-xl: filter: blur(var(--blur-xl)); /* 24px */
- blur-2xl: filter: blur(var(--blur-2xl)); /* 40px */
- blur-3xl: filter: blur(var(--blur-3xl)); /* 64px */
- blur-none: filter: ;
- blur-(<custom-property>): filter: blur(var(<custom-property>));
- blur-[<value>]: filter: blur(<value>);
```

----------------------------------------

TITLE: Define Custom Components with Tailwind CSS v4 @utility API
DESCRIPTION: This CSS snippet shows how to define custom component classes using the `@utility` API in Tailwind CSS v4. This approach allows component utilities to be easily overwritten by other Tailwind utilities due to sorting based on property count.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: css
CODE:
```
@layer components {  .btn {    border-radius: 0.5rem;    padding: 0.5rem 1rem;    background-color: ButtonFace;  }}@utility btn {  border-radius: 0.5rem;  padding: 0.5rem 1rem;  background-color: ButtonFace;}
```

----------------------------------------

TITLE: CSS Transitions and Animation Properties
DESCRIPTION: Documentation for CSS properties that enable smooth transitions between property values and define complex animations.
SOURCE: https://tailwindcss.com/docs/margin

LANGUAGE: APIDOC
CODE:
```
transition-property: Specifies the name of the CSS properties to which a transition effect should be applied.
transition-behavior: Specifies whether a transition should be applied to discrete properties.
transition-duration: Specifies the length of time a transition takes to complete.
transition-timing-function: Specifies the speed curve of the transition effect.
transition-delay: Specifies when the transition effect will start.
animation: A shorthand property for all the animation properties.
```

----------------------------------------

TITLE: Tailwind CSS Custom mask-size Value Example
DESCRIPTION: Provides examples of using arbitrary values and CSS custom properties with the `mask-size` utility in Tailwind CSS to define custom mask image sizes.
SOURCE: https://tailwindcss.com/docs/mask-size

LANGUAGE: HTML
CODE:
```
<div class=""mask-size-[auto_100px] ..."">  <!-- ... --></div>
```

LANGUAGE: HTML
CODE:
```
<div class=""mask-size-(--my-mask-size) ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS mask-composite Basic Usage
DESCRIPTION: Demonstrates the application of different `mask-composite` utilities (`mask-add`, `mask-subtract`, `mask-intersect`, `mask-exclude`) to HTML div elements. This example shows how multiple masks, defined using arbitrary values, interact based on the chosen composite mode.
SOURCE: https://tailwindcss.com/docs/mask-composite

LANGUAGE: HTML
CODE:
```
<div class=""mask-add mask-[url(/img/circle.png),url(/img/circle.png)] mask-[position:30%_50%,70%_50%] bg-[url(/img/mountains.jpg)]""></div><div class=""mask-subtract mask-[url(/img/circle.png),url(/img/circle.png)] mask-[position:30%_50%,70%_50%] bg-[url(/img/mountains.jpg)]""></div><div class=""mask-intersect mask-[url(/img/circle.png),url(/img/circle.png)] mask-[position:30%_50%,70%_50%] bg-[url(/img/mountains.jpg)]""></div><div class=""mask-exclude mask-[url(/img/circle.png),url(/img/circle.png)] mask-[position:30%_50%,70%_50%] bg-[url(/img/mountains.jpg)]""></div>
```

----------------------------------------

TITLE: Define Custom Utilities with Tailwind CSS v4 @utility API
DESCRIPTION: This CSS snippet demonstrates the new `@utility` API in Tailwind CSS v4 for defining custom utility classes. Unlike v3's `@layer utilities`, `@utility` is specifically designed for custom utilities and integrates with native cascade layers.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: css
CODE:
```
@layer utilities {  .tab-4 {    tab-size: 4;  }}@utility tab-4 {  tab-size: 4;}
```

----------------------------------------

TITLE: Tailwind CSS Flexbox and Grid Utilities
DESCRIPTION: Covers utility classes for building flexible and grid-based layouts, encompassing flex properties, grid templates, auto-flow, gaps, and alignment properties for both flex and grid containers.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Flexbox & Grid:
  - flex-basis
  - flex-direction
  - flex-wrap
  - flex
  - flex-grow
  - flex-shrink
  - order
  - grid-template-columns
  - grid-column
  - grid-template-rows
  - grid-row
  - grid-auto-flow
  - grid-auto-columns
  - grid-auto-rows
  - gap
  - justify-content
  - justify-items
  - justify-self
  - align-content
  - align-items
  - align-self
  - place-content
  - place-items
  - place-self
```

----------------------------------------

TITLE: Tailwind CSS Flex Grow Example: Allowing Items to Grow
DESCRIPTION: Demonstrates how to use the `grow` utility class in Tailwind CSS to allow a flex item to expand and fill any remaining space within a flex container.
SOURCE: https://tailwindcss.com/docs/flex-grow

LANGUAGE: HTML
CODE:
```
<div class=""flex ..."">  <div class=""size-14 flex-none ..."">01</div>  <div class=""size-14 grow ..."">02</div>  <div class=""size-14 flex-none ..."">03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Filter Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities that apply graphical filters to elements, such as blur, brightness, contrast, and color adjustments.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
Filter Properties:
- filter
  - blur
  - brightness
  - contrast
  - drop-shadow
  - grayscale
  - hue-rotate
  - invert
  - saturate
  - sepia
- backdrop-filter
  - blur
  - brightness
  - contrast
  - grayscale
  - hue-rotate
  - invert
  - opacity
  - saturate
  - sepia
```

----------------------------------------

TITLE: TailwindCSS Transitions & Animation Utilities
DESCRIPTION: Documentation for TailwindCSS utilities that manage CSS transitions and animations. These utilities define properties to animate, duration, timing functions, delays, and custom animations.
SOURCE: https://tailwindcss.com/docs/color

LANGUAGE: APIDOC
CODE:
```
transition-property
transition-behavior
transition-duration
transition-timing-function
transition-delay
animation
```

----------------------------------------

TITLE: HTML Example: Specifying Grid Columns with Tailwind CSS
DESCRIPTION: Demonstrates how to use `grid-cols-<number>` utilities in HTML to create a grid with a specified number of equally sized columns. This example uses `grid-cols-4` to create a four-column grid.
SOURCE: https://tailwindcss.com/docs/grid-template-columns

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-cols-4 gap-4"">  <div>01</div>  <!-- ... -->  <div>09</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Flexbox Basic Example
DESCRIPTION: Demonstrates the use of `flex-1` to allow flex items to grow and shrink, ignoring their initial size. This example shows three flex items within a flex container, with one item having a fixed width and the other two distributing available space.
SOURCE: https://tailwindcss.com/docs/flex

LANGUAGE: HTML
CODE:
```
<div class=""flex"">  <div class=""w-14 flex-none ..."">01</div>  <div class=""w-64 flex-1 ..."">02</div>  <div class=""w-32 flex-1 ..."">03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS justify-items-end-safe Example
DESCRIPTION: Shows the `justify-items-end-safe` utility class, which aligns grid items to the end of their inline axis, but falls back to the start if there is insufficient space.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: html
CODE:
```
<div class=""grid grid-flow-col justify-items-end-safe ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
```

----------------------------------------

TITLE: TailwindCSS Table Layout Utilities
DESCRIPTION: Documentation for TailwindCSS utilities controlling table appearance and layout, including border collapsing, spacing between cells, and caption positioning.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
border-collapse
border-spacing
table-layout
caption-side
```

----------------------------------------

TITLE: Align Flex Items to Start with Tailwind CSS
DESCRIPTION: Illustrates how to use the `items-start` utility class to align flex items to the beginning of the container's cross axis.
SOURCE: https://tailwindcss.com/docs/align-items

LANGUAGE: html
CODE:
```
<div class=""flex items-start ..."">
  <div class=""py-4"">01</div>
  <div class=""py-12"">02</div>
  <div class=""py-8"">03</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Reference
DESCRIPTION: Comprehensive reference for various Tailwind CSS utility classes, categorized by their functional areas such as effects, filters, table styling, transitions, transforms, interactivity, SVG, and accessibility. Each entry links to more detailed documentation.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Effects:
  box-shadow
  text-shadow
  opacity
  mix-blend-mode
  background-blend-mode
  mask-clip
  mask-composite
  mask-image
  mask-mode
  mask-origin
  mask-position
  mask-repeat
  mask-size
  mask-type

Filters:
  filter
    blur
    brightness
    contrast
    drop-shadow
    grayscale
    hue-rotate
    invert
    saturate
    sepia
  backdrop-filter
    blur
    brightness
    contrast
    grayscale
    hue-rotate
    invert
    opacity
    saturate
    sepia

Tables:
  border-collapse
  border-spacing
  table-layout
  caption-side

Transitions & Animation:
  transition-property
  transition-behavior
  transition-duration
  transition-timing-function
  transition-delay
  animation

Transforms:
  backface-visibility
  perspective
  perspective-origin
  rotate
  scale
  skew
  transform
  transform-origin
  transform-style
  translate

Interactivity:
  accent-color
  appearance
  caret-color
  color-scheme
  cursor
  field-sizing
  pointer-events
  resize
  scroll-behavior
  scroll-margin
  scroll-padding
  scroll-snap-align
  scroll-snap-stop
  scroll-snap-type
  touch-action
  user-select
  will-change

SVG:
  fill
  stroke
  stroke-width

Accessibility:
  forced-color-adjust
```

----------------------------------------

TITLE: Tailwind CSS Border Inline Start Color Utilities
DESCRIPTION: These snippets demonstrate the Tailwind CSS utility classes for applying specific color shades to the `border-inline-start-color` property. Each utility class directly translates to a CSS rule setting the border's start color using a CSS variable, often with an `oklch` color function comment for reference.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
border-s-emerald-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-emerald-800); /* oklch(43.2% 0.095 166.913) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-emerald-900
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-emerald-900); /* oklch(37.8% 0.077 168.94) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-emerald-950
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-emerald-950); /* oklch(26.2% 0.051 172.552) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-50
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-50); /* oklch(98.4% 0.014 180.72) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-100
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-100); /* oklch(95.3% 0.051 180.801) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-200
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-200); /* oklch(91% 0.096 180.426) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-300
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-300); /* oklch(85.5% 0.138 181.071) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-400
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-400); /* oklch(77.7% 0.152 181.912) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-500
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-500); /* oklch(70.4% 0.14 182.503) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-600
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-600); /* oklch(60% 0.118 184.704) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-700); /* oklch(51.1% 0.096 186.391) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-800); /* oklch(43.7% 0.078 188.216) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-900
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-900); /* oklch(38.6% 0.063 188.416) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-teal-950
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-teal-950); /* oklch(27.7% 0.046 192.524) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-50
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-50); /* oklch(98.4% 0.019 200.873) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-100
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-100); /* oklch(95.6% 0.045 203.388) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-200
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-200); /* oklch(91.7% 0.08 205.041) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-300
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-300); /* oklch(86.5% 0.127 207.078) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-400
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-400); /* oklch(78.9% 0.154 211.53) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-500
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-500); /* oklch(71.5% 0.143 215.221) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-600
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-600); /* oklch(60.9% 0.126 221.723) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-700); /* oklch(52% 0.105 223.128) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-800); /* oklch(45% 0.085 224.283) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-900
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-900); /* oklch(39.8% 0.07 227.392) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-cyan-950
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-cyan-950); /* oklch(30.2% 0.056 229.695) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-50
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-50); /* oklch(97.7% 0.013 236.62) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-100
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-100); /* oklch(95.1% 0.026 236.824) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-200
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-200); /* oklch(90.1% 0.058 230.902) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-300
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-300); /* oklch(82.8% 0.111 230.318) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-400
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-400); /* oklch(74.6% 0.16 232.661) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-500
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-500); /* oklch(68.5% 0.169 237.323) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-600
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-600); /* oklch(58.8% 0.158 241.966) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-700); /* oklch(50% 0.134 242.749) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-800); /* oklch(44.3% 0.11 240.79) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-900
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-900); /* oklch(39.1% 0.09 240.876) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-sky-950
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-sky-950); /* oklch(29.3% 0.066 243.157) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-50
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-50); /* oklch(97% 0.014 254.604) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-100
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-100); /* oklch(93.2% 0.032 255.585) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-200
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-200); /* oklch(88.2% 0.059 254.128) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-300
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-300); /* oklch(80.9% 0.105 251.813) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-400
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-400); /* oklch(70.7% 0.165 254.624) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-500
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-500); /* oklch(62.3% 0.214 259.815) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-600
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-600); /* oklch(54.6% 0.245 262.881) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-700); /* oklch(48.8% 0.243 264.376) */
```

LANGUAGE: Tailwind CSS
CODE:
```
border-s-blue-800
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-blue-800); /* oklch(42.4% 0.199 265.638) */
```

----------------------------------------

TITLE: Start the development build process with npm
DESCRIPTION: Executes the `npm run watch` command, which typically starts a development server and continuously monitors source files for changes, automatically recompiling assets as needed.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/symfony

LANGUAGE: Shell
CODE:
```
npm run watch
```

----------------------------------------

TITLE: Tailwind CSS Background Blend Mode HTML Example
DESCRIPTION: Demonstrates the application of Tailwind CSS `background-blend-mode` utility classes within HTML elements. This example shows how to combine a background color, a background image, and different blend modes (`bg-blend-multiply`, `bg-blend-soft-light`, `bg-blend-overlay`) to achieve various visual effects.
SOURCE: https://tailwindcss.com/docs/background-blend-mode

LANGUAGE: HTML
CODE:
```
<div class=""bg-blue-500 bg-[url(/img/mountains.jpg)] bg-blend-multiply ...""></div><div class=""bg-blue-500 bg-[url(/img/mountains.jpg)] bg-blend-soft-light ...""></div><div class=""bg-blue-500 bg-[url(/img/mountains.jpg)] bg-blend-overlay ...""></div>
```

----------------------------------------

TITLE: Tailwind CSS Transform Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities that apply 2D and 3D transformations to elements, such as rotation, scaling, skewing, and translation.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
Transforms Properties:
- backface-visibility
- perspective
- perspective-origin
- rotate
- scale
- skew
- transform
- transform-origin
- transform-style
- translate
```

----------------------------------------

TITLE: Tailwind CSS border-s- Utility Classes for Inline Start Border Color
DESCRIPTION: These Tailwind CSS utility classes set the `border-inline-start-color` property, allowing control over the logical start edge border color. They map to various predefined color palettes (gray, zinc, neutral, stone) and support custom values via arbitrary properties or square bracket notation.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
border-s-gray-900: border-inline-start-color: var(--color-gray-900); /* oklch(21% 0.034 264.665) */
border-s-gray-950: border-inline-start-color: var(--color-gray-950); /* oklch(13% 0.028 261.692) */
border-s-zinc-50: border-inline-start-color: var(--color-zinc-50); /* oklch(98.5% 0 0) */
border-s-zinc-100: border-inline-start-color: var(--color-zinc-100); /* oklch(96.7% 0.001 286.375) */
border-s-zinc-200: border-inline-start-color: var(--color-zinc-200); /* oklch(92% 0.004 286.32) */
border-s-zinc-300: border-inline-start-color: var(--color-zinc-300); /* oklch(87.1% 0.006 286.286) */
border-s-zinc-400: border-inline-start-color: var(--color-zinc-400); /* oklch(70.5% 0.015 286.067) */
border-s-zinc-500: border-inline-start-color: var(--color-zinc-500); /* oklch(55.2% 0.016 285.938) */
border-s-zinc-600: border-inline-start-color: var(--color-zinc-600); /* oklch(44.2% 0.017 285.786) */
border-s-zinc-700: border-inline-start-color: var(--color-zinc-700); /* oklch(37% 0.013 285.805) */
border-s-zinc-800: border-inline-start-color: var(--color-zinc-800); /* oklch(27.4% 0.006 286.033) */
border-s-zinc-900: border-inline-start-color: var(--color-zinc-900); /* oklch(21% 0.006 285.885) */
border-s-zinc-950: border-inline-start-color: var(--color-zinc-950); /* oklch(14.1% 0.005 285.823) */
border-s-neutral-50: border-inline-start-color: var(--color-neutral-50); /* oklch(98.5% 0 0) */
border-s-neutral-100: border-inline-start-color: var(--color-neutral-100); /* oklch(97% 0 0) */
border-s-neutral-200: border-inline-start-color: var(--color-neutral-200); /* oklch(92.2% 0 0) */
border-s-neutral-300: border-inline-start-color: var(--color-neutral-300); /* oklch(87% 0 0) */
border-s-neutral-400: border-inline-start-color: var(--color-neutral-400); /* oklch(70.8% 0 0) */
border-s-neutral-500: border-inline-start-color: var(--color-neutral-500); /* oklch(55.6% 0 0) */
border-s-neutral-600: border-inline-start-color: var(--color-neutral-600); /* oklch(43.9% 0 0) */
border-s-neutral-700: border-inline-start-color: var(--color-neutral-700); /* oklch(37.1% 0 0) */
border-s-neutral-800: border-inline-start-color: var(--color-neutral-800); /* oklch(26.9% 0 0) */
border-s-neutral-900: border-inline-start-color: var(--color-neutral-900); /* oklch(20.5% 0 0) */
border-s-neutral-950: border-inline-start-color: var(--color-neutral-950); /* oklch(14.5% 0 0) */
border-s-stone-50: border-inline-start-color: var(--color-stone-50); /* oklch(98.5% 0.001 106.423) */
border-s-stone-100: border-inline-start-color: var(--color-stone-100); /* oklch(97% 0.001 106.424) */
border-s-stone-200: border-inline-start-color: var(--color-stone-200); /* oklch(92.3% 0.003 48.717) */
border-s-stone-300: border-inline-start-color: var(--color-stone-300); /* oklch(86.9% 0.005 56.366) */
border-s-stone-400: border-inline-start-color: var(--color-stone-400); /* oklch(70.9% 0.01 56.259) */
border-s-stone-500: border-inline-start-color: var(--color-stone-500); /* oklch(55.3% 0.013 58.071) */
border-s-stone-600: border-inline-start-color: var(--color-stone-600); /* oklch(44.4% 0.011 73.639) */
border-s-stone-700: border-inline-start-color: var(--color-stone-700); /* oklch(37.4% 0.01 67.558) */
border-s-stone-800: border-inline-start-color: var(--color-stone-800); /* oklch(26.8% 0.007 34.298) */
border-s-stone-900: border-inline-start-color: var(--color-stone-900); /* oklch(21.6% 0.006 56.043) */
border-s-stone-950: border-inline-start-color: var(--color-stone-950); /* oklch(14.7% 0.004 49.25) */
border-s-(<custom-property>): border-inline-start-color: var(<custom-property>);
border-s-[<value>]: border-inline-start-color: <value>;
```

----------------------------------------

TITLE: Start Project Build Process with Mix
DESCRIPTION: This command initiates the project's build and development server process. For Phoenix applications, `mix phx.server` compiles assets, starts the server, and watches for file changes, enabling live reloading during development.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/phoenix

LANGUAGE: Shell
CODE:
```
mix phx.server
```

----------------------------------------

TITLE: Basic Tailwind CSS max-height HTML Example
DESCRIPTION: Demonstrates the application of `max-h-<number>` utilities within HTML to set different maximum heights for nested `div` elements. This example showcases how various fixed maximum heights based on the spacing scale affect the rendering of child elements within a parent container.
SOURCE: https://tailwindcss.com/docs/max-height

LANGUAGE: html
CODE:
```
<div class=""h-96 ..."">
  <div class=""h-full max-h-80 ..."">max-h-80</div>
  <div class=""h-full max-h-64 ..."">max-h-64</div>
  <div class=""h-full max-h-48 ..."">max-h-48</div>
  <div class=""h-full max-h-40 ..."">max-h-40</div>
  <div class=""h-full max-h-32 ..."">max-h-32</div>
  <div class=""h-full max-h-24 ..."">max-h-24</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts and Setup
DESCRIPTION: This section outlines fundamental concepts and initial setup procedures for Tailwind CSS. It covers installation, editor configuration, compatibility, and upgrade guidelines, along with core styling principles like utility classes, responsive design, and dark mode.
SOURCE: https://tailwindcss.com/docs/scroll-snap-stop

LANGUAGE: APIDOC
CODE:
```
Getting started:
  - Installation: /docs/installation
  - Editor setup: /docs/editor-setup
  - Compatibility: /docs/compatibility
  - Upgrade guide: /docs/upgrade-guide

Core concepts:
  - Styling with utility classes: /docs/styling-with-utility-classes
  - Hover, focus, and other states: /docs/hover-focus-and-other-states
  - Responsive design: /docs/responsive-design
  - Dark mode: /docs/dark-mode
  - Theme variables: /docs/theme
  - Colors: /docs/colors
  - Adding custom styles: /docs/adding-custom-styles
  - Detecting classes in source files: /docs/detecting-classes-in-source-files
  - Functions and directives: /docs/functions-and-directives

Base styles:
  - Preflight: /docs/preflight
```

----------------------------------------

TITLE: Apply Logical Border Properties in Tailwind CSS
DESCRIPTION: Explains how to use logical properties like `border-s-*` (start) and `border-e-*` (end) for border colors, which adapt based on text direction (LTR/RTL).
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div dir=""ltr"">  <div class=""border-s-indigo-500 ...""></div></div><div dir=""rtl"">  <div class=""border-s-indigo-500 ...""></div></div>
```

----------------------------------------

TITLE: Tailwind CSS transition-delay Utility Reference
DESCRIPTION: Comprehensive documentation for the `transition-delay` utility in Tailwind CSS, detailing its purpose, available class formats, and how to apply custom values or responsive variants to control CSS transition delays.
SOURCE: https://tailwindcss.com/docs/transition-delay

LANGUAGE: APIDOC
CODE:
```
transition-delay: Utilities for controlling the delay of CSS transitions.

Classes:
- delay-<number>: transition-delay: <number>ms;
  (e.g., delay-150, delay-700)
- delay-(<custom-property>): transition-delay: var(<custom-property>);
  (shorthand for delay-[var(<custom-property>)])
- delay-[<value>]: transition-delay: <value>;
  (e.g., delay-[1s,250ms])

Usage Examples:
- Basic: <button class=""transition delay-150 duration-300 ease-in-out ..."">Button A</button>
- Custom Value: <button class=""delay-[1s,250ms] ..."">  <!-- ... --></button>
- Custom Property: <button class=""delay-(--my-delay) ..."">  <!-- ... --></button>
- Responsive: <button class=""delay-150 md:delay-300 ..."">  <!-- ... --></button>
```

----------------------------------------

TITLE: Tailwind CSS background-origin Utility Classes
DESCRIPTION: Documents the utility classes provided by Tailwind CSS for controlling how an element's background image is positioned relative to its borders, padding, and content boxes.
SOURCE: https://tailwindcss.com/docs/background-origin

LANGUAGE: APIDOC
CODE:
```
Class: bg-origin-border
  Style: background-origin: border-box;
Class: bg-origin-padding
  Style: background-origin: padding-box;
Class: bg-origin-content
  Style: background-origin: content-box;
```

----------------------------------------

TITLE: Tailwind CSS Table Layout Utilities
DESCRIPTION: API documentation for Tailwind CSS utilities used to control the layout and appearance of HTML tables, including border handling and caption positioning.
SOURCE: https://tailwindcss.com/docs/text-decoration-color

LANGUAGE: APIDOC
CODE:
```
Table Properties:
- border-collapse
- border-spacing
- table-layout
- caption-side
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utilities
DESCRIPTION: Documents utility classes for controlling user interaction with elements, including cursor styles, scroll behavior, and user selection.
SOURCE: https://tailwindcss.com/docs/border-width

LANGUAGE: APIDOC
CODE:
```
Interactivity:
  accent-color: Utility for setting the accent color for user-interface controls generated by the browser.
  appearance: Utility for controlling the native appearance of UI widgets.
  caret-color: Utility for setting the color of the text insertion caret.
  color-scheme: Utility for setting the color scheme of the element.
  cursor: Utility for setting the type of cursor to display when the mouse pointer is over an element.
  field-sizing: Utility for controlling the sizing of form fields.
  pointer-events: Utility for setting whether an element can be the target of mouse events.
  resize: Utility for setting whether an element is resizable by the user.
  scroll-behavior: Utility for setting the scroll behavior of a scrolling box.
  scroll-margin: Utility for setting the margin of the scroll snap area.
  scroll-padding: Utility for setting the padding of the scroll snap area.
  scroll-snap-align: Utility for specifying the snap position of an element within its scroll container.
  scroll-snap-stop: Utility for specifying whether the scroll container must snap to a snap point.
  scroll-snap-type: Utility for specifying how strictly snap points are enforced on the scroll container.
  touch-action: Utility for setting how an element's region can be manipulated by a touchscreen user.
  user-select: Utility for controlling whether the user can select text.
  will-change: Utility for hinting to browsers about what changes are expected on an element.
```

----------------------------------------

TITLE: Tailwind CSS Core Utility Categories and Properties
DESCRIPTION: This section outlines the various categories of Tailwind CSS utilities and the specific properties or sub-utilities available within each. It serves as a high-level API reference for the framework's styling capabilities.
SOURCE: https://tailwindcss.com/docs/min-width

LANGUAGE: APIDOC
CODE:
```
Effects:
  box-shadow
  text-shadow
  opacity
  mix-blend-mode
  background-blend-mode
  mask-clip
  mask-composite
  mask-image
  mask-mode
  mask-origin
  mask-position
  mask-repeat
  mask-size
  mask-type

Filters:
  filter
    blur
    brightness
    contrast
    drop-shadow
    grayscale
    hue-rotate
    invert
    saturate
    sepia
  backdrop-filter
    blur
    brightness
    contrast
    grayscale
    hue-rotate
    invert
    opacity
    saturate
    sepia

Tables:
  border-collapse
  border-spacing
  table-layout
  caption-side

Transitions & Animation:
  transition-property
  transition-behavior
  transition-duration
  transition-timing-function
  transition-delay
  animation

Transforms:
  backface-visibility
  perspective
  perspective-origin
  rotate
  scale
  skew
  transform
  transform-origin
  transform-style
  translate

Interactivity:
  accent-color
  appearance
  caret-color
  color-scheme
  cursor
  field-sizing
  pointer-events
  resize
  scroll-behavior
  scroll-margin
  scroll-padding
  scroll-snap-align
  scroll-snap-stop
  scroll-snap-type
  touch-action
  user-select
  will-change

SVG:
  fill
  stroke
  stroke-width

Accessibility:
  forced-color-adjust
```

----------------------------------------

TITLE: Start Rspack Build Process
DESCRIPTION: Executes the development build process for your Rspack project. This command compiles your assets, including Tailwind CSS, and typically starts a development server.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/rspack/vue

LANGUAGE: Terminal
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that control how users interact with elements, including cursor styles, pointer events, and scroll behavior.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: APIDOC
CODE:
```
accent-color: Utilities for controlling the accent color of UI controls.
appearance: Utilities for controlling the native appearance of UI controls.
caret-color: Utilities for controlling the color of the text input cursor.
color-scheme: Utilities for controlling the color scheme of an element.
cursor: Utilities for controlling the type of cursor displayed when hovering over an element.
field-sizing: Utilities for controlling the sizing of form fields.
pointer-events: Utilities for controlling whether an element reacts to pointer events.
resize: Utilities for controlling whether an element can be resized by the user.
scroll-behavior: Utilities for controlling the scrolling behavior of an element.
scroll-margin: Utilities for controlling the scroll margin of an element.
scroll-padding: Utilities for controlling the scroll padding of an element.
scroll-snap-align: Utilities for controlling the alignment of scroll snap points.
scroll-snap-stop: Utilities for controlling whether scroll snapping stops after a single snap point.
scroll-snap-type: Utilities for controlling the scroll snap type of an element.
touch-action: Utilities for controlling how an element's touch gestures are handled.
user-select: Utilities for controlling whether text can be selected by the user.
will-change: Utilities for informing the browser of changes to an element's properties.
```

----------------------------------------

TITLE: HTML Example for `forced-color-adjust-none` Utility
DESCRIPTION: Demonstrates the usage of the `forced-color-adjust-none` utility class within an HTML form. This example shows how to apply the utility to a `div` containing color choices, ensuring that these specific elements retain their intended colors even when a user has enabled a forced color mode, thereby preserving the visual design and usability.
SOURCE: https://tailwindcss.com/docs/forced-color-adjust

LANGUAGE: html
CODE:
```
<form>
  <img src=""/img/shirt.jpg"" />
  <div>
    <h3>Basic Tee</h3>
    <h3>$35</h3>
    <fieldset>
      <legend class=""sr-only"">Choose a color</legend>
      <div class=""forced-color-adjust-none ..."">
        <label>
          <input class=""sr-only"" type=""radio"" name=""color-choice"" value=""White"" />
          <span class=""sr-only"">White</span>
          <span class=""size-6 rounded-full border border-black/10 bg-white""></span>
        </label>
        <!-- ... -->
      </div>
    </fieldset>
  </div>
</form>
```

----------------------------------------

TITLE: Tailwind CSS Saturate Filter Utilities API
DESCRIPTION: Defines the utility classes for applying saturation filters in Tailwind CSS, including numeric, custom property, and arbitrary value syntax. These classes directly map to the `filter: saturate()` CSS property.
SOURCE: https://tailwindcss.com/docs/filter-saturate

LANGUAGE: APIDOC
CODE:
```
saturate-<number>
  - Class: `saturate-<number>`
  - Styles: `filter: saturate(<number>%);`
  - Description: Applies a saturation filter with a predefined numeric percentage.

saturate-(<custom-property>)
  - Class: `saturate-(<custom-property>)`
  - Styles: `filter: saturate(var(<custom-property>));`
  - Description: Applies a saturation filter using a CSS custom property as the value.

saturate-[<value>]
  - Class: `saturate-[<value>]`
  - Styles: `filter: saturate(<value>);`
  - Description: Applies a saturation filter with an arbitrary custom value.
```

----------------------------------------

TITLE: Create a New Vite Project
DESCRIPTION: Initiate a new Vite project using the `npm create vite` command. This command scaffolds a new project directory and navigates into it, preparing the environment for further development.
SOURCE: https://tailwindcss.com/docs/installation/using-vite

LANGUAGE: Terminal
CODE:
```
npm create vite@latest my-project
cd my-project
```

----------------------------------------

TITLE: Tailwind CSS Default Border Color Change
DESCRIPTION: Details the change in Tailwind CSS v4 where `border-*` and `divide-*` utilities now default to `currentColor` instead of `gray-200`. Provides examples for explicitly setting the color or restoring the v3 behavior with base styles.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: HTML
CODE:
```
<div class=""border border-gray-200 px-2 py-3 ..."">  <!-- ... --></div>
```

LANGUAGE: CSS
CODE:
```
@layer base {  *,  ::after,  ::before,  ::backdrop,  ::file-selector-button {    border-color: var(--color-gray-200, currentColor);  }}
```

----------------------------------------

TITLE: Tailwind CSS place-items Utility Classes
DESCRIPTION: Documents the `place-items` utility in Tailwind CSS, which controls how grid or flex items are justified and aligned simultaneously. It lists available classes and their corresponding CSS styles, providing a comprehensive reference for configuring item placement.
SOURCE: https://tailwindcss.com/docs/place-items

LANGUAGE: APIDOC
CODE:
```
place-items:
  - place-items-start: place-items: start;
  - place-items-end: place-items: end;
  - place-items-end-safe: place-items: safe end;
  - place-items-center: place-items: center;
  - place-items-center-safe: place-items: safe center;
  - place-items-baseline: place-items: baseline;
  - place-items-stretch: place-items: stretch;
```

----------------------------------------

TITLE: Create a new Vite project
DESCRIPTION: Initializes a new Vite project using `npm create vite` and navigates into the newly created project directory. This is the first step to set up a modern web development environment.
SOURCE: https://tailwindcss.com/docs/installation

LANGUAGE: bash
CODE:
```
npm create vite@latest my-project
cd my-project
```

----------------------------------------

TITLE: Tailwind CSS Cursor Utilities API
DESCRIPTION: Defines Tailwind CSS utility classes for controlling the cursor style when hovering over an element. This API documentation maps each utility class to its corresponding CSS `cursor` property value, including support for custom properties and arbitrary values.
SOURCE: https://tailwindcss.com/docs/cursor

LANGUAGE: APIDOC
CODE:
```
cursor-auto: cursor: auto;
cursor-default: cursor: default;
cursor-pointer: cursor: pointer;
cursor-wait: cursor: wait;
cursor-text: cursor: text;
cursor-move: cursor: move;
cursor-help: cursor: help;
cursor-not-allowed: cursor: not-allowed;
cursor-none: cursor: none;
cursor-context-menu: cursor: context-menu;
cursor-progress: cursor: progress;
cursor-cell: cursor: cell;
cursor-crosshair: cursor: crosshair;
cursor-vertical-text: cursor: vertical-text;
cursor-alias: cursor: alias;
cursor-copy: cursor: copy;
cursor-no-drop: cursor: no-drop;
cursor-grab: cursor: grab;
cursor-grabbing: cursor: grabbing;
cursor-all-scroll: cursor: all-scroll;
cursor-col-resize: cursor: col-resize;
cursor-row-resize: cursor: row-resize;
cursor-n-resize: cursor: n-resize;
cursor-e-resize: cursor: e-resize;
cursor-s-resize: cursor: s-resize;
cursor-w-resize: cursor: w-resize;
cursor-ne-resize: cursor: ne-resize;
cursor-nw-resize: cursor: nw-resize;
cursor-se-resize: cursor: se-resize;
cursor-sw-resize: cursor: sw-resize;
cursor-ew-resize: cursor: ew-resize;
cursor-ns-resize: cursor: ns-resize;
cursor-nesw-resize: cursor: nesw-resize;
cursor-nwse-resize: cursor: nwse-resize;
cursor-zoom-in: cursor: zoom-in;
cursor-zoom-out: cursor: zoom-out;
cursor-(<custom-property>): cursor: var(<custom-property>);
cursor-[<value>]: cursor: <value>;
```

----------------------------------------

TITLE: Update Tailwind CLI Commands for v4
DESCRIPTION: This example illustrates the necessary change when using the Tailwind CLI in v4. The CLI functionality has moved from the main `tailwindcss` package to a dedicated `@tailwindcss/cli` package, requiring an update to any build commands that invoke the CLI.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: Terminal
CODE:
```
npx tailwindcss -i input.css -o output.css
npx @tailwindcss/cli -i input.css -o output.css
```

----------------------------------------

TITLE: Handle Modifiers in Tailwind CSS Utilities
DESCRIPTION: This CSS snippet demonstrates the use of the `--modifier()` function, which operates similarly to `--value()` but applies to modifiers. If a modifier is not present, any declaration depending on it is omitted. This example shows its use for `line-height` with a `text-*` utility.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: CSS
CODE:
```
@utility text-* {  font-size: --value(--text-*, [length]);  line-height: --modifier(--leading-*, [length], [*]);}
```

----------------------------------------

TITLE: HTML Example: Scaling Down Image with object-scale-down
DESCRIPTION: Provides an example of using the `object-scale-down` utility class in HTML. This class displays the image at its original size but scales it down if necessary to fit within the container, behaving like `none` or `contain` depending on which results in a smaller image.
SOURCE: https://tailwindcss.com/docs/object-fit

LANGUAGE: HTML
CODE:
```
<img class=""h-48 w-96 object-scale-down ..."" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: HTML Example: Resizing Image to Cover Container with object-cover
DESCRIPTION: Demonstrates how to use the `object-cover` utility class in HTML to make an image cover its container while preserving its aspect ratio, potentially cropping parts of the image.
SOURCE: https://tailwindcss.com/docs/object-fit

LANGUAGE: HTML
CODE:
```
<img class=""h-48 w-96 object-cover ..."" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: Tailwind CSS Layout Utilities
DESCRIPTION: Provides documentation for Tailwind CSS utility classes related to controlling the layout of elements, including aspect ratio, column management, break behaviors, box model properties, display types, floats, clearing, isolation, object fitting, positioning, visibility, and z-index.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: APIDOC
CODE:
```
Layout Utilities:
  - aspect-ratio: Control the aspect ratio of an element.
  - columns: Define the number of columns for multi-column layouts.
  - break-after: Control page/column breaks after an element.
  - break-before: Control page/column breaks before an element.
  - break-inside: Control page/column breaks inside an element.
  - box-decoration-break: Control how box fragments are rendered across line breaks.
  - box-sizing: Set the box model (content-box or border-box).
  - display: Control the display type of an element (e.g., block, inline, flex, grid).
  - float: Float elements to the left or right.
  - clear: Prevent elements from floating next to cleared elements.
  - isolation: Control whether an element creates a new stacking context.
  - object-fit: Specify how an `<img>` or `<video>` should be resized to fit its container.
  - object-position: Specify how an `<img>` or `<video>` is positioned within its container.
  - overflow: Control how content overflows an element's box.
  - overscroll-behavior: Control how the browser behaves when reaching the boundary of a scrolling area.
  - position: Control the positioning method of an element (e.g., static, relative, absolute, fixed, sticky).
  - top / right / bottom / left: Position elements relative to their container.
  - visibility: Control the visibility of an element without affecting layout.
  - z-index: Control the stacking order of positioned elements.
```

----------------------------------------

TITLE: Apply Tailwind CSS Classes in Handlebars Template
DESCRIPTION: This example shows how to integrate Tailwind CSS utility classes directly into an Ember.js Handlebars template. It applies `text-3xl`, `font-bold`, and `underline` classes to an `<h1>` element, demonstrating basic styling with Tailwind CSS.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/emberjs

LANGUAGE: HTML
CODE:
```
{{page-title ""MyProject""}}<h1 class=""text-3xl font-bold underline"">  Hello world!</h1>{{outlet}}
```

----------------------------------------

TITLE: Escape Underscores in JSX Arbitrary Values with String.raw()
DESCRIPTION: Provides a solution for JSX environments where backslashes might be stripped, demonstrating the use of `String.raw()` to ensure underscores are correctly escaped and preserved within arbitrary values.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: JavaScript
CODE:
```
<div className={String.raw`before:content-['hello\_world']`}>  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS `content` Utility Class Reference
DESCRIPTION: This API documentation outlines the utility classes available in Tailwind CSS for controlling the `content` property of `::before` and `::after` pseudo-elements. It covers setting static values, referencing custom properties, and explicitly removing content.
SOURCE: https://tailwindcss.com/docs/content

LANGUAGE: APIDOC
CODE:
```
content-[<value>]
  - Styles: content: <value>;
  - Description: Sets the content of the pseudo-element to a specific string or value.
content-(<custom-property>)
  - Styles: content: var(<custom-property>);
  - Description: Sets the content of the pseudo-element to the value of a CSS custom property.
content-none
  - Styles: content: none;
  - Description: Removes any content from the pseudo-element.
```

----------------------------------------

TITLE: Tailwind CSS v4 Transitioning Outline Color
DESCRIPTION: The `transition` and `transition-color` utilities in Tailwind CSS v4 now include the `outline-color` property. This can cause outlines to transition from a default color. The provided HTML examples demonstrate how to set the outline color unconditionally or for both states to prevent unwanted transitions.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: HTML
CODE:
```
<button class=""transition hover:outline-2 hover:outline-cyan-500""></button><button class=""outline-cyan-500 transition hover:outline-2""></button>
```

----------------------------------------

TITLE: Import Application Stylesheet in SvelteKit Layout
DESCRIPTION: Svelte component code for `src/routes/+layout.svelte` to import the `app.css` file, ensuring Tailwind CSS styles are applied globally across the SvelteKit application.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: HTML
CODE:
```
<script>
  let { children } = $props();
  import ""../app.css"";
</script>

{@render children()}
```

----------------------------------------

TITLE: Apply All-Side Padding with Tailwind CSS
DESCRIPTION: Demonstrates how to use the `p-<number>` utility class to apply uniform padding to all sides of an HTML element. This is a basic example for controlling overall element spacing.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: HTML
CODE:
```
<div class=""p-8 ..."">p-8</div>
```

----------------------------------------

TITLE: TailwindCSS Filter Utilities
DESCRIPTION: Documentation for TailwindCSS utilities that apply graphical effects such as blur, brightness, contrast, and color adjustments to elements or their backdrops.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
filter:
  blur
  brightness
  contrast
  drop-shadow
  grayscale
  hue-rotate
  invert
  saturate
  sepia
backdrop-filter:
  blur
  brightness
  contrast
  grayscale
  hue-rotate
  invert
  opacity
  saturate
  sepia
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS Grid Row Spanning
DESCRIPTION: Demonstrates how to use `row-span` and `col-span` utilities in HTML to control the layout of elements within a CSS Grid. This example creates a multi-row and multi-column structure, showcasing how elements can span multiple grid tracks.
SOURCE: https://tailwindcss.com/docs/grid-row

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-flow-col grid-rows-3 gap-4"">
  <div class=""row-span-3 ..."">01</div>
  <div class=""col-span-2 ..."">02</div>
  <div class=""col-span-2 row-span-2 ..."">03</div>
</div>
```

----------------------------------------

TITLE: Apply Tailwind CSS Scroll Margin to HTML Elements
DESCRIPTION: Demonstrates how to apply `scroll-margin` utilities like `scroll-ml-6` to HTML elements within a `snap-x` container to control the scroll offset. This example uses `snap-start` to align elements at the start of the scroll area, ensuring proper spacing when scrolling.
SOURCE: https://tailwindcss.com/docs/scroll-margin

LANGUAGE: HTML
CODE:
```
<div class=""snap-x ..."">  <div class=""snap-start scroll-ml-6 ..."">    <img src=""/img/vacation-01.jpg""/>  </div>  <div class=""snap-start scroll-ml-6 ..."">    <img src=""/img/vacation-02.jpg""/>  </div>  <div class=""snap-start scroll-ml-6 ..."">    <img src=""/img/vacation-03.jpg""/>  </div>  <div class=""snap-start scroll-ml-6 ..."">    <img src=""/img/vacation-04.jpg""/>  </div>  <div class=""snap-start scroll-ml-6 ..."">    <img src=""/img/vacation-05.jpg""/>  </div></div>
```

----------------------------------------

TITLE: Tailwind CSS SVG Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities specifically for styling SVG elements, including fill, stroke, and stroke width properties.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: APIDOC
CODE:
```
SVG:
  - fill: Sets the color of the interior of an SVG shape.
  - stroke: Sets the color of the outline of an SVG shape.
  - stroke-width: Sets the width of the outline of an SVG shape.
```

----------------------------------------

TITLE: Tailwind CSS Border Start Color Utility Classes
DESCRIPTION: A comprehensive list of Tailwind CSS utility classes used to apply specific colors to the `border-inline-start` property. Each utility class maps to a CSS `border-inline-start-color` property, referencing a CSS variable for the color value and including the Oklch color representation in comments.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Border Start Color Utilities:

border-s-fuchsia-800: border-inline-start-color: var(--color-fuchsia-800); /* oklch(45.2% 0.211 324.591) */
border-s-fuchsia-900: border-inline-start-color: var(--color-fuchsia-900); /* oklch(40.1% 0.17 325.612) */
border-s-fuchsia-950: border-inline-start-color: var(--color-fuchsia-950); /* oklch(29.3% 0.136 325.661) */
border-s-pink-50: border-inline-start-color: var(--color-pink-50); /* oklch(97.1% 0.014 343.198) */
border-s-pink-100: border-inline-start-color: var(--color-pink-100); /* oklch(94.8% 0.028 342.258) */
border-s-pink-200: border-inline-start-color: var(--color-pink-200); /* oklch(89.9% 0.061 343.231) */
border-s-pink-300: border-inline-start-color: var(--color-pink-300); /* oklch(82.3% 0.12 346.018) */
border-s-pink-400: border-inline-start-color: var(--color-pink-400); /* oklch(71.8% 0.202 349.761) */
border-s-pink-500: border-inline-start-color: var(--color-pink-500); /* oklch(65.6% 0.241 354.308) */
border-s-pink-600: border-inline-start-color: var(--color-pink-600); /* oklch(59.2% 0.249 0.584) */
border-s-pink-700: border-inline-start-color: var(--color-pink-700); /* oklch(52.5% 0.223 3.958) */
border-s-pink-800: border-inline-start-color: var(--color-pink-800); /* oklch(45.9% 0.187 3.815) */
border-s-pink-900: border-inline-start-color: var(--color-pink-900); /* oklch(40.8% 0.153 2.432) */
border-s-pink-950: border-inline-start-color: var(--color-pink-950); /* oklch(28.4% 0.109 3.907) */
border-s-rose-50: border-inline-start-color: var(--color-rose-50); /* oklch(96.9% 0.015 12.422) */
border-s-rose-100: border-inline-start-color: var(--color-rose-100); /* oklch(94.1% 0.03 12.58) */
border-s-rose-200: border-inline-start-color: var(--color-rose-200); /* oklch(89.2% 0.058 10.001) */
border-s-rose-300: border-inline-start-color: var(--color-rose-300); /* oklch(81% 0.117 11.638) */
border-s-rose-400: border-inline-start-color: var(--color-rose-400); /* oklch(71.2% 0.194 13.428) */
border-s-rose-500: border-inline-start-color: var(--color-rose-500); /* oklch(64.5% 0.246 16.439) */
border-s-rose-600: border-inline-start-color: var(--color-rose-600); /* oklch(58.6% 0.253 17.585) */
border-s-rose-700: border-inline-start-color: var(--color-rose-700); /* oklch(51.4% 0.222 16.935) */
border-s-rose-800: border-inline-start-color: var(--color-rose-800); /* oklch(45.5% 0.188 13.697) */
border-s-rose-900: border-inline-start-color: var(--color-rose-900); /* oklch(41% 0.159 10.272) */
border-s-rose-950: border-inline-start-color: var(--color-rose-950); /* oklch(27.1% 0.105 12.094) */
border-s-slate-50: border-inline-start-color: var(--color-slate-50); /* oklch(98.4% 0.003 247.858) */
border-s-slate-100: border-inline-start-color: var(--color-slate-100); /* oklch(96.8% 0.007 247.896) */
border-s-slate-200: border-inline-start-color: var(--color-slate-200); /* oklch(92.9% 0.013 255.508) */
border-s-slate-300: border-inline-start-color: var(--color-slate-300); /* oklch(86.9% 0.022 252.894) */
border-s-slate-400: border-inline-start-color: var(--color-slate-400); /* oklch(70.4% 0.04 256.788) */
border-s-slate-500: border-inline-start-color: var(--color-slate-500); /* oklch(55.4% 0.046 257.417) */
border-s-slate-600: border-inline-start-color: var(--color-slate-600); /* oklch(44.6% 0.043 257.281) */
border-s-slate-700: border-inline-start-color: var(--color-slate-700); /* oklch(37.2% 0.044 257.287) */
border-s-slate-800: border-inline-start-color: var(--color-slate-800); /* oklch(27.9% 0.041 260.031) */
border-s-slate-900: border-inline-start-color: var(--color-slate-900); /* oklch(20.8% 0.042 265.755) */
border-s-slate-950: border-inline-start-color: var(--color-slate-950); /* oklch(12.9% 0.042 264.695) */
border-s-gray-50: border-inline-start-color: var(--color-gray-50); /* oklch(98.5% 0.002 247.839) */
border-s-gray-100: border-inline-start-color: var(--color-gray-100); /* oklch(96.7% 0.003 264.542) */
border-s-gray-200: border-inline-start-color: var(--color-gray-200); /* oklch(92.8% 0.006 264.531) */
border-s-gray-300: border-inline-start-color: var(--color-gray-300); /* oklch(87.2% 0.01 258.338) */
border-s-gray-400: border-inline-start-color: var(--color-gray-400); /* oklch(70.7% 0.022 261.325) */
border-s-gray-500: border-inline-start-color: var(--color-gray-500); /* oklch(55.1% 0.027 264.364) */
border-s-gray-600: border-inline-start-color: var(--color-gray-600); /* oklch(44.6% 0.03 256.802) */
border-s-gray-700: border-inline-start-color: var(--color-gray-700); /* oklch(37.3% 0.034 259.733) */
border-s-gray-800: border-inline-start-color: var(--color-gray-800); /* oklch(27.8% 0.033 256.848) */
```

----------------------------------------

TITLE: Configure Tailwind CSS Vite Plugin in SvelteKit
DESCRIPTION: Configuration for `vite.config.ts` to integrate the `@tailwindcss/vite` plugin with SvelteKit's Vite setup, enabling Tailwind CSS processing during development and build.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/sveltekit

LANGUAGE: TypeScript
CODE:
```
import { sveltekit } from '@sveltejs/kit/vite';
import { defineConfig } from 'vite';
import tailwindcss from '@tailwindcss/vite';

export default defineConfig({
  plugins: [
    tailwindcss(),
    sveltekit(),
  ],
});
```

----------------------------------------

TITLE: Tailwind CSS justify-self-start Example
DESCRIPTION: Illustrates how to use the `justify-self-start` utility to align a grid item to the beginning of its inline axis.
SOURCE: https://tailwindcss.com/docs/justify-self

LANGUAGE: HTML
CODE:
```
<div class=""grid justify-items-stretch ..."">  <!-- ... -->  <div class=""justify-self-start ..."">02</div>  <!-- ... --></div>
```

----------------------------------------

TITLE: Apply Responsive place-self Utilities in Tailwind CSS
DESCRIPTION: This HTML example illustrates how to apply `place-self` utilities responsively using Tailwind CSS breakpoint variants. By prefixing `place-self-end` with `md:`, the item will align to the start by default and then align to the end only on medium screen sizes and above, adapting its position based on the viewport.
SOURCE: https://tailwindcss.com/docs/place-self

LANGUAGE: html
CODE:
```
<div class=""place-self-start md:place-self-end ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Create Next.js Project with TypeScript and ESLint
DESCRIPTION: This command initializes a new Next.js application using `create-next-app`. It configures the project with TypeScript, ESLint, and the App Router, then navigates into the newly created project directory.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nextjs

LANGUAGE: bash
CODE:
```
npx create-next-app@latest my-project --typescript --eslint --app
cd my-project
```

----------------------------------------

TITLE: Tailwind CSS: Snap Elements to Start of Scroll Container
DESCRIPTION: This HTML example illustrates the use of the `snap-start` utility for child elements inside a scrollable container. It causes elements to snap to the beginning edge of the viewport during scrolling. The parent container needs to specify the scroll snap axis with `snap-x` or `snap-y`.
SOURCE: https://tailwindcss.com/docs/scroll-snap-align

LANGUAGE: HTML
CODE:
```
<div class=""snap-x ..."">  <div class=""snap-start ..."">    <img src=""/img/vacation-01.jpg"" />  </div>  <div class=""snap-start ..."">    <img src=""/img/vacation-02.jpg"" />  </div>  <div class=""snap-start ..."">    <img src=""/img/vacation-03.jpg"" />  </div>  <div class=""snap-start ..."">    <img src=""/img/vacation-04.jpg"" />  </div>  <div class=""snap-start ..."">    <img src=""/img/vacation-05.jpg"" />  </div>  <div class=""snap-start ..."">    <img src=""/img/vacation-06.jpg"" />  </div></div>
```

----------------------------------------

TITLE: Tailwind CSS Transform Utilities
DESCRIPTION: API documentation for Tailwind CSS utility classes that apply 2D or 3D transformations to an element. These utilities control rotation, scaling, skewing, translation, and perspective effects.
SOURCE: https://tailwindcss.com/docs/flex-basis

LANGUAGE: APIDOC
CODE:
```
backface-visibility: Defines whether or not the back face of an element is visible when facing the user.
perspective: Defines how far the user is from the z-plane.
perspective-origin: Sets the origin for the perspective property.
rotate: Rotates an element.
scale: Scales an element.
skew: Skews an element.
transform: Applies a 2D or 3D transformation to an element.
transform-origin: Sets the origin for transformations.
transform-style: Specifies how nested elements are rendered in 3D space.
translate: Moves an element along the X, Y, or Z axis.
```

----------------------------------------

TITLE: Static HTML Markup for Contributors List
DESCRIPTION: This snippet presents a static HTML structure for displaying a list of contributors. Each contributor's image and details are hardcoded directly into the HTML, leading to duplication if the list grows or changes. It utilizes Tailwind CSS classes for styling the layout, text, and image presentation.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: HTML
CODE:
```
<div>  <div class=""flex items-center space-x-2 text-base"">    <h4 class=""font-semibold text-slate-900"">Contributors</h4>    <span class=""bg-slate-100 px-2 py-1 text-xs font-semibold text-slate-700 ..."">204</span>  </div>  <div class=""mt-3 flex -space-x-2 overflow-hidden"">    <img class=""inline-block h-12 w-12 rounded-full ring-2 ring-white"" src=""https://images.unsplash.com/photo-1491528323818-fdd1faba62cc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"" alt="""" />    <img class=""inline-block h-12 w-12 rounded-full ring-2 ring-white"" src=""https://images.unsplash.com/photo-1550525811-e5869dd03032?ixlib=rb-1.2.1&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"" alt="""" />    <img class=""inline-block h-12 w-12 rounded-full ring-2 ring-white"" src=""https://images.unsplash.com/photo-1500648767791-00dcc994a43e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2.25&w=256&h=256&q=80"" alt="""" />    <img class=""inline-block h-12 w-12 rounded-full ring-2 ring-white"" src=""https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"" alt="""" />    <img class=""inline-block h-12 w-12 rounded-full ring-2 ring-white"" src=""https://images.unsplash.com/photo-1517365830460-955ce3ccd263?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"" alt="""" />  </div>  <div class=""mt-3 text-sm font-medium"">    <a href=""#"" class=""text-blue-500"">+ 198 others</a>  </div></div>
```

----------------------------------------

TITLE: Tailwind CSS border-s (Inline Start) Color Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for setting the `border-inline-start-color` property, which controls the color of the border on the inline-start side (e.g., left in LTR layouts). This includes generic color keywords and various shades from the red, orange, and amber color palettes.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
border-s-inherit: border-inline-start-color: inherit;
border-s-current: border-inline-start-color: currentColor;
border-s-transparent: border-inline-start-color: transparent;
border-s-black: border-inline-start-color: var(--color-black); /* #000 */
border-s-white: border-inline-start-color: var(--color-white); /* #fff */
border-s-red-50: border-inline-start-color: var(--color-red-50); /* oklch(97.1% 0.013 17.38) */
border-s-red-100: border-inline-start-color: var(--color-red-100); /* oklch(93.6% 0.032 17.717) */
border-s-red-200: border-inline-start-color: var(--color-red-200); /* oklch(88.5% 0.062 18.334) */
border-s-red-300: border-inline-start-color: var(--color-red-300); /* oklch(80.8% 0.114 19.571) */
border-s-red-400: border-inline-start-color: var(--color-red-400); /* oklch(70.4% 0.191 22.216) */
border-s-red-500: border-inline-start-color: var(--color-red-500); /* oklch(63.7% 0.237 25.331) */
border-s-red-600: border-inline-start-color: var(--color-red-600); /* oklch(57.7% 0.245 27.325) */
border-s-red-700: border-inline-start-color: var(--color-red-700); /* oklch(50.5% 0.213 27.518) */
border-s-red-800: border-inline-start-color: var(--color-red-800); /* oklch(44.4% 0.177 26.899) */
border-s-red-900: border-inline-start-color: var(--color-red-900); /* oklch(39.6% 0.141 25.723) */
border-s-red-950: border-inline-start-color: var(--color-red-950); /* oklch(25.8% 0.092 26.042) */
border-s-orange-50: border-inline-start-color: var(--color-orange-50); /* oklch(98% 0.016 73.684) */
border-s-orange-100: border-inline-start-color: var(--color-orange-100); /* oklch(95.4% 0.038 75.164) */
border-s-orange-200: border-inline-start-color: var(--color-orange-200); /* oklch(90.1% 0.076 70.697) */
border-s-orange-300: border-inline-start-color: var(--color-orange-300); /* oklch(83.7% 0.128 66.29) */
border-s-orange-400: border-inline-start-color: var(--color-orange-400); /* oklch(75% 0.183 55.934) */
border-s-orange-500: border-inline-start-color: var(--color-orange-500); /* oklch(70.5% 0.213 47.604) */
border-s-orange-600: border-inline-start-color: var(--color-orange-600); /* oklch(64.6% 0.222 41.116) */
border-s-orange-700: border-inline-start-color: var(--color-orange-700); /* oklch(55.3% 0.195 38.402) */
border-s-orange-800: border-inline-start-color: var(--color-orange-800); /* oklch(47% 0.157 37.304) */
border-s-orange-900: border-inline-start-color: var(--color-orange-900); /* oklch(40.8% 0.123 38.172) */
border-s-orange-950: border-inline-start-color: var(--color-orange-950); /* oklch(26.6% 0.079 36.259) */
border-s-amber-50: border-inline-start-color: var(--color-amber-50); /* oklch(98.7% 0.022 95.277) */
border-s-amber-100: border-inline-start-color: var(--color-amber-100); /* oklch(96.2% 0.059 95.617) */
border-s-amber-200: border-inline-start-color: var(--color-amber-200); /* oklch(92.4% 0.12 95.746) */
border-s-amber-300: border-inline-start-color: var(--color-amber-300); /* oklch(87.9% 0.169 91.605) */
border-s-amber-400: border-inline-start-color: var(--color-amber-400); /* oklch(82.8% 0.189 84.429) */
border-s-amber-500: border-inline-start-color: var(--color-amber-500); /* oklch(76.9% 0.188 70.08) */
border-s-amber-600: border-inline-start-color: var(--color-amber-600); /* oklch(66.6% 0.179 58.318) */
border-s-amber-700: border-inline-start-color: var(--color-amber-700); /* oklch(55.5% 0.163 48.998) */
```

----------------------------------------

TITLE: Traditional CSS Button Styling with Hover
DESCRIPTION: This example contrasts Tailwind's approach by showing how button styling, including hover effects, would typically be written in traditional CSS. A single `.btn` class contains both the default and hover styles within its definition.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: HTML
CODE:
```
<button class=""btn"">Save changes</button><style>  .btn {    background-color: var(--color-sky-500);    &:hover {      background-color: var(--color-sky-700);    }  }</style>
```

----------------------------------------

TITLE: Start Tailwind CLI Build Process with Watch Mode
DESCRIPTION: This command initiates the Tailwind CSS CLI build process. It scans your source files for Tailwind classes, generates the corresponding CSS, and outputs it to a specified file. The `--watch` flag enables continuous rebuilding upon file changes.
SOURCE: https://tailwindcss.com/docs/installation/tailwind-cli

LANGUAGE: npm
CODE:
```
npx @tailwindcss/cli -i ./src/input.css -o ./src/output.css --watch
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Reference
DESCRIPTION: A comprehensive reference of Tailwind CSS utility classes categorized by their functional areas, including effects, filters, tables, transitions, transforms, interactivity, SVG, and accessibility properties.
SOURCE: https://tailwindcss.com/docs/justify-self

LANGUAGE: APIDOC
CODE:
```
Effects:
  box-shadow
  text-shadow
  opacity
  mix-blend-mode
  background-blend-mode
  mask-clip
  mask-composite
  mask-image
  mask-mode
  mask-origin
  mask-position
  mask-repeat
  mask-size
  mask-type

Filters:
  filter
    blur
    brightness
    contrast
    drop-shadow
    grayscale
    hue-rotate
    invert
    saturate
    sepia
  backdrop-filter
    blur
    brightness
    contrast
    grayscale
    hue-rotate
    invert
    opacity
    saturate
    sepia

Tables:
  border-collapse
  border-spacing
  table-layout
  caption-side

Transitions & Animation:
  transition-property
  transition-behavior
  transition-duration
  transition-timing-function
  transition-delay
  animation

Transforms:
  backface-visibility
  perspective
  perspective-origin
  rotate
  scale
  skew
  transform
  transform-origin
  transform-style
  translate

Interactivity:
  accent-color
  appearance
  caret-color
  color-scheme
  cursor
  field-sizing
  pointer-events
  resize
  scroll-behavior
  scroll-margin
  scroll-padding
  scroll-snap-align
  scroll-snap-stop
  scroll-snap-type
  touch-action
  user-select
  will-change

SVG:
  fill
  stroke
  stroke-width

Accessibility:
  forced-color-adjust
```

----------------------------------------

TITLE: Apply Custom Opacity Value to HTML Button
DESCRIPTION: Shows how to set a precise, custom opacity value on an HTML button using Tailwind CSS arbitrary value syntax `opacity-[<value>]`.
SOURCE: https://tailwindcss.com/docs/opacity

LANGUAGE: HTML
CODE:
```
<button class=""opacity-[.67] ..."">  <!-- ... --></button>
```

----------------------------------------

TITLE: Tailwind CSS justify-center-safe Example
DESCRIPTION: This HTML snippet demonstrates the `justify-center-safe` utility class in Tailwind CSS. This class centers flex items along the main axis, but with a 'safe' fallback: if there isn't enough space, items will align to the start of the container instead of overflowing or being clipped, ensuring content visibility.
SOURCE: https://tailwindcss.com/docs/justify-content

LANGUAGE: HTML
CODE:
```
<div class=""flex justify-center-safe ..."">  <div>01</div>  <div>02</div>  <div>03</div>  <div>04</div></div>
```

----------------------------------------

TITLE: Apply Tailwind CSS outline-width for Basic Examples
DESCRIPTION: Demonstrates how to use `outline` or `outline-<number>` utilities like `outline-2` and `outline-4` to set the width of an element's outline in HTML.
SOURCE: https://tailwindcss.com/docs/outline-width

LANGUAGE: HTML
CODE:
```
<button class=""outline outline-offset-2 ..."">Button A</button><button class=""outline-2 outline-offset-2 ..."">Button B</button><button class=""outline-4 outline-offset-2 ..."">Button C</button>
```

----------------------------------------

TITLE: HTML Example: Basic text-underline-offset Usage
DESCRIPTION: Demonstrates how to apply different `underline-offset` utility classes to paragraph elements in HTML to vary the underline position relative to the text baseline.
SOURCE: https://tailwindcss.com/docs/text-underline-offset

LANGUAGE: HTML
CODE:
```
<p class=""underline underline-offset-1"">The quick brown fox...</p><p class=""underline underline-offset-2"">The quick brown fox...</p><p class=""underline underline-offset-4"">The quick brown fox...</p><p class=""underline underline-offset-8"">The quick brown fox...</p>
```

----------------------------------------

TITLE: Tailwind CSS Table Layout Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities controlling table appearance and layout, including border collapsing, spacing, and caption positioning.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: APIDOC
CODE:
```
Tables:
  - border-collapse: Specifies whether table borders should be collapsed into a single border or separated.
  - border-spacing: Specifies the distance between the borders of adjacent cells.
  - table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
  - caption-side: Specifies the placement of a table caption.
```

----------------------------------------

TITLE: HTML Example: Implementing a Subgrid with Tailwind CSS
DESCRIPTION: Illustrates the use of the `grid-cols-subgrid` utility in HTML. This utility allows a nested grid to adopt the column tracks defined by its parent grid, ensuring alignment and consistency.
SOURCE: https://tailwindcss.com/docs/grid-template-columns

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-cols-4 gap-4"">  <div>01</div>  <!-- ... -->  <div>05</div>  <div class=""col-span-3 grid grid-cols-subgrid gap-4"">    <div class=""col-start-2"">06</div>  </div></div>
```

----------------------------------------

TITLE: Tailwind CSS: Snap Elements to Center of Scroll Container
DESCRIPTION: This HTML example demonstrates applying the `snap-center` utility to child elements within a scroll container. It ensures that when scrolling, elements align precisely to the center of the viewport, providing a guided navigation experience. The parent container must define the scroll axis using `snap-x` or `snap-y`.
SOURCE: https://tailwindcss.com/docs/scroll-snap-align

LANGUAGE: HTML
CODE:
```
<div class=""snap-x ..."">  <div class=""snap-center ..."">    <img src=""/img/vacation-01.jpg"" />  </div>  <div class=""snap-center ..."">    <img src=""/img/vacation-02.jpg"" />  </div>  <div class=""snap-center ..."">    <img src=""/img/vacation-03.jpg"" />  </div>  <div class=""snap-center ..."">    <img src=""/img/vacation-04.jpg"" />  </div>  <div class=""snap-center ..."">    <img src=""/img/vacation-05.jpg"" />  </div>  <div class=""snap-center ..."">    <img src=""/img/vacation-06.jpg"" />  </div></div>
```

----------------------------------------

TITLE: Tailwind CSS Effects Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities related to visual effects like shadows, opacity, and blend modes, which modify the appearance of elements.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow: Controls the shadow effect around an element's frame.
  - text-shadow: Applies shadow effects to text.
  - opacity: Sets the transparency level of an element.
  - mix-blend-mode: Defines how an element's content should blend with its background.
  - background-blend-mode: Defines how an element's background images should blend with each other and with the element's background color.
  - mask-clip: Specifies the area which is affected by a mask.
  - mask-composite: Defines the compositing operation used to combine the current mask with the mask below it.
  - mask-image: Sets the image that is used as a mask layer for an element.
  - mask-mode: Specifies whether a mask layer is interpreted as a luminance mask or an alpha mask.
  - mask-origin: Specifies the origin of the mask layer.
  - mask-position: Sets the initial position of a mask image.
  - mask-repeat: Specifies how mask images are repeated.
  - mask-size: Specifies the size of the mask images.
  - mask-type: Specifies whether a mask layer is interpreted as a luminance mask or an alpha mask.
```

----------------------------------------

TITLE: Tailwind CSS Grid Row Start/End and Span Utilities
DESCRIPTION: Demonstrates how to use `row-start-<number>`, `row-end-<number>`, and `row-span-<number>` utilities in Tailwind CSS to control the placement and spanning of elements within a CSS Grid layout. This example shows elements starting and ending at specific grid lines, and spanning multiple rows.
SOURCE: https://tailwindcss.com/docs/grid-row

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-flow-col grid-rows-3 gap-4"">  <div class=""row-span-2 row-start-2 ..."">01</div>  <div class=""row-span-2 row-end-3 ..."">02</div>  <div class=""row-start-1 row-end-4 ..."">03</div></div>
```

----------------------------------------

TITLE: Defining complex custom utility classes with nesting
DESCRIPTION: Demonstrates how to create more complex custom utility classes that involve nested CSS rules (e.g., pseudo-elements) using the `@utility` directive. This allows for encapsulating multi-part styles into a single utility.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: CSS
CODE:
```
@utility scrollbar-hidden {  &::-webkit-scrollbar {    display: none;  }}
```

----------------------------------------

TITLE: Start Next.js Development Server
DESCRIPTION: This command initiates the development server for the Next.js application. Running this command allows you to view your application in a web browser and enables hot-reloading for development.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nextjs

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Apply Border Inline Color with Tailwind CSS
DESCRIPTION: Demonstrates how Tailwind CSS utility classes like `border-x-lime-800` map to the `border-inline-color` CSS property. These classes allow for setting the logical inline start and end borders' color, utilizing CSS variables for color values derived from Tailwind's extended color palette. The comments show the corresponding Tailwind class.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: css
CODE:
```
/* Tailwind Class: border-x-lime-800 */
border-inline-color: var(--color-lime-800); /* oklch(45.3% 0.124 130.933) */

/* Tailwind Class: border-x-green-500 */
border-inline-color: var(--color-green-500); /* oklch(72.3% 0.219 149.579) */

/* Tailwind Class: border-x-emerald-950 */
border-inline-color: var(--color-emerald-950); /* oklch(26.2% 0.051 172.552) */

/* Tailwind Class: border-x-teal-400 */
border-inline-color: var(--color-teal-400); /* oklch(77.7% 0.152 181.912) */

/* Tailwind Class: border-x-cyan-100 */
border-inline-color: var(--color-cyan-100); /* oklch(95.6% 0.045 203.388) */
```

----------------------------------------

TITLE: Tailwind CSS: Flex Wrap Utility Classes Reference
DESCRIPTION: Provides a quick reference for Tailwind CSS utility classes related to flex item wrapping, mapping each class to its corresponding CSS property and value. This serves as API documentation for the `flex-wrap` family of utilities.
SOURCE: https://tailwindcss.com/docs/flex-wrap

LANGUAGE: APIDOC
CODE:
```
flex-nowrap:
  CSS Property: flex-wrap
  CSS Value: nowrap
  Description: Prevents flex items from wrapping, forcing them onto a single line.

flex-wrap:
  CSS Property: flex-wrap
  CSS Value: wrap
  Description: Allows flex items to wrap onto multiple lines when the container's width is insufficient.

flex-wrap-reverse:
  CSS Property: flex-wrap
  CSS Value: wrap-reverse
  Description: Wraps flex items onto multiple lines in reverse order, with the first line appearing at the bottom.
```

----------------------------------------

TITLE: Tailwind CSS Accessibility Utilities
DESCRIPTION: This section provides Tailwind CSS utility classes related to accessibility, specifically for controlling forced color adjustments.
SOURCE: https://tailwindcss.com/docs/installation/tailwind-cli

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust: Utilities for controlling the forced color adjust property.
```

----------------------------------------

TITLE: Tailwind CSS Border Start Color Utility Classes and CSS Output
DESCRIPTION: This snippet provides a comprehensive list of Tailwind CSS utility classes for `border-inline-start-color` and their corresponding CSS outputs. Each utility class directly sets the `border-inline-start-color` property using a CSS variable that references a specific color from the Tailwind CSS palette, along with its Oklch color representation in comments.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS Class
CODE:
```
border-s-amber-800
border-s-amber-900
border-s-amber-950
border-s-yellow-50
border-s-yellow-100
border-s-yellow-200
border-s-yellow-300
border-s-yellow-400
border-s-yellow-500
border-s-yellow-600
border-s-yellow-700
border-s-yellow-800
border-s-yellow-900
border-s-yellow-950
border-s-lime-50
border-s-lime-100
border-s-lime-200
border-s-lime-300
border-s-lime-400
border-s-lime-500
border-s-lime-600
border-s-lime-700
border-s-lime-800
border-s-lime-900
border-s-lime-950
border-s-green-50
border-s-green-100
border-s-green-200
border-s-green-300
border-s-green-400
border-s-green-500
border-s-green-600
border-s-green-700
border-s-green-800
border-s-green-900
border-s-green-950
border-s-emerald-50
border-s-emerald-100
border-s-emerald-200
border-s-emerald-300
border-s-emerald-400
border-s-emerald-500
border-s-emerald-600
border-s-emerald-700
```

LANGUAGE: CSS
CODE:
```
border-inline-start-color: var(--color-amber-800); /* oklch(47.3% 0.137 46.201) */
border-inline-start-color: var(--color-amber-900); /* oklch(41.4% 0.112 45.904) */
border-inline-start-color: var(--color-amber-950); /* oklch(27.9% 0.077 45.635) */
border-inline-start-color: var(--color-yellow-50); /* oklch(98.7% 0.026 102.212) */
border-inline-start-color: var(--color-yellow-100); /* oklch(97.3% 0.071 103.193) */
border-inline-start-color: var(--color-yellow-200); /* oklch(94.5% 0.129 101.54) */
border-inline-start-color: var(--color-yellow-300); /* oklch(90.5% 0.182 98.111) */
border-inline-start-color: var(--color-yellow-400); /* oklch(85.2% 0.199 91.936) */
border-inline-start-color: var(--color-yellow-500); /* oklch(79.5% 0.184 86.047) */
border-inline-start-color: var(--color-yellow-600); /* oklch(68.1% 0.162 75.834) */
border-inline-start-color: var(--color-yellow-700); /* oklch(55.4% 0.135 66.442) */
border-inline-start-color: var(--color-yellow-800); /* oklch(47.6% 0.114 61.907) */
border-inline-start-color: var(--color-yellow-900); /* oklch(42.1% 0.095 57.708) */
border-inline-start-color: var(--color-yellow-950); /* oklch(28.6% 0.066 53.813) */
border-inline-start-color: var(--color-lime-50); /* oklch(98.6% 0.031 120.757) */
border-inline-start-color: var(--color-lime-100); /* oklch(96.7% 0.067 122.328) */
border-inline-start-color: var(--color-lime-200); /* oklch(93.8% 0.127 124.321) */
border-inline-start-color: var(--color-lime-300); /* oklch(89.7% 0.196 126.665) */
border-inline-start-color: var(--color-lime-400); /* oklch(84.1% 0.238 128.85) */
border-inline-start-color: var(--color-lime-500); /* oklch(76.8% 0.233 130.85) */
border-inline-start-color: var(--color-lime-600); /* oklch(64.8% 0.2 131.684) */
border-inline-start-color: var(--color-lime-700); /* oklch(53.2% 0.157 131.589) */
border-inline-start-color: var(--color-lime-800); /* oklch(45.3% 0.124 130.933) */
border-inline-start-color: var(--color-lime-900); /* oklch(40.5% 0.101 131.063) */
border-inline-start-color: var(--color-lime-950); /* oklch(27.4% 0.072 132.109) */
border-inline-start-color: var(--color-green-50); /* oklch(98.2% 0.018 155.826) */
border-inline-start-color: var(--color-green-100); /* oklch(96.2% 0.044 156.743) */
border-inline-start-color: var(--color-green-200); /* oklch(92.5% 0.084 155.995) */
border-inline-start-color: var(--color-green-300); /* oklch(87.1% 0.15 154.449) */
border-inline-start-color: var(--color-green-400); /* oklch(79.2% 0.209 151.711) */
border-inline-start-color: var(--color-green-500); /* oklch(72.3% 0.219 149.579) */
border-inline-start-color: var(--color-green-600); /* oklch(62.7% 0.194 149.214) */
border-inline-start-color: var(--color-green-700); /* oklch(52.7% 0.154 150.069) */
border-inline-start-color: var(--color-green-800); /* oklch(44.8% 0.119 151.328) */
border-inline-start-color: var(--color-green-900); /* oklch(39.3% 0.095 152.535) */
border-inline-start-color: var(--color-green-950); /* oklch(26.6% 0.065 152.934) */
border-inline-start-color: var(--color-emerald-50); /* oklch(97.9% 0.021 166.113) */
border-inline-start-color: var(--color-emerald-100); /* oklch(95% 0.052 163.051) */
border-inline-start-color: var(--color-emerald-200); /* oklch(90.5% 0.093 164.15) */
border-inline-start-color: var(--color-emerald-300); /* oklch(84.5% 0.143 164.978) */
border-inline-start-color: var(--color-emerald-400); /* oklch(76.5% 0.177 163.223) */
border-inline-start-color: var(--color-emerald-500); /* oklch(69.6% 0.17 162.48) */
border-inline-start-color: var(--color-emerald-600); /* oklch(59.6% 0.145 163.225) */
border-inline-start-color: var(--color-emerald-700); /* oklch(50.8% 0.118 165.612) */
```

----------------------------------------

TITLE: Tailwind CSS Flex Grow Example: Proportional Growth
DESCRIPTION: Illustrates the use of `grow-<number>` utilities (e.g., `grow-3`, `grow-7`) to make flex items grow proportionally based on a specified factor, distributing available space relative to each other.
SOURCE: https://tailwindcss.com/docs/flex-grow

LANGUAGE: HTML
CODE:
```
<div class=""flex ..."">  <div class=""size-14 grow-3 ..."">01</div>  <div class=""size-14 grow-7 ..."">02</div>  <div class=""size-14 grow-3 ..."">03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS background-clip Basic Usage Example
DESCRIPTION: Demonstrates the application of `bg-clip-border`, `bg-clip-padding`, and `bg-clip-content` utilities to control the background bounding box of div elements, showcasing how the background is clipped relative to the border, padding, or content box.
SOURCE: https://tailwindcss.com/docs/background-clip

LANGUAGE: html
CODE:
```
<div class=""border-4 bg-indigo-500 bg-clip-border p-3""></div><div class=""border-4 bg-indigo-500 bg-clip-padding p-3""></div><div class=""border-4 bg-indigo-500 bg-clip-content p-3""></div>
```

----------------------------------------

TITLE: Start Qwik development server
DESCRIPTION: Initiates the development server for the Qwik project, allowing real-time preview and development with Tailwind CSS enabled.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/qwik

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Apply Stacked Fractions with Tailwind CSS
DESCRIPTION: Shows how to apply the `stacked-fractions` utility class in Tailwind CSS to transform numbers separated by a slash into common stacked fraction glyphs, provided the font supports them.
SOURCE: https://tailwindcss.com/docs/font-variant-numeric

LANGUAGE: html
CODE:
```
<p class=""stacked-fractions ..."">1/2 3/4 5/6</p>
```

----------------------------------------

TITLE: Tailwind CSS Border Y-Axis Color Utilities (Violet, Purple, Fuchsia, Pink, Rose)
DESCRIPTION: These snippets illustrate the mapping between Tailwind CSS utility classes for setting vertical border colors and their generated CSS `border-block-color` properties. The examples cover a range of color shades from violet, purple, fuchsia, pink, and rose palettes, showing how Tailwind simplifies CSS styling.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-y-violet-400
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-violet-400); /* oklch(70.2% 0.183 293.541) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-violet-500
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-violet-500); /* oklch(60.6% 0.25 292.717) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-violet-600
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-violet-600); /* oklch(54.1% 0.281 293.009) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-violet-700
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-violet-700); /* oklch(49.1% 0.27 292.581) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-violet-800
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-violet-800); /* oklch(43.2% 0.232 292.759) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-violet-900
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-violet-900); /* oklch(38% 0.189 293.745) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-violet-950
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-violet-950); /* oklch(28.3% 0.141 291.089) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-50
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-50); /* oklch(97.7% 0.014 308.299) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-100
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-100); /* oklch(94.6% 0.033 307.174) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-200
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-200); /* oklch(90.2% 0.063 306.703) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-300
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-300); /* oklch(82.7% 0.119 306.383) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-400
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-400); /* oklch(71.4% 0.203 305.504) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-500
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-500); /* oklch(62.7% 0.265 303.9) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-600
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-600); /* oklch(55.8% 0.288 302.321) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-700
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-700); /* oklch(49.6% 0.265 301.924) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-800
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-800); /* oklch(43.8% 0.218 303.724) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-900
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-900); /* oklch(38.1% 0.176 304.987) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-purple-950
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-purple-950); /* oklch(29.1% 0.149 302.717) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-50
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-50); /* oklch(97.7% 0.017 320.058) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-100
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-100); /* oklch(95.2% 0.037 318.852) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-200
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-200); /* oklch(90.3% 0.076 319.62) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-300
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-300); /* oklch(83.3% 0.145 321.434) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-400
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-400); /* oklch(74% 0.238 322.16) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-500
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-500); /* oklch(66.7% 0.295 322.15) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-600
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-600); /* oklch(59.1% 0.293 322.896) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-700
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-700); /* oklch(51.8% 0.253 323.949) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-800
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-800); /* oklch(45.2% 0.211 324.591) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-900
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-900); /* oklch(40.1% 0.17 325.612) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-fuchsia-950
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-fuchsia-950); /* oklch(29.3% 0.136 325.661) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-50
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-50); /* oklch(97.1% 0.014 343.198) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-100
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-100); /* oklch(94.8% 0.028 342.258) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-200
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-200); /* oklch(89.9% 0.061 343.231) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-300
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-300); /* oklch(82.3% 0.12 346.018) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-400
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-400); /* oklch(71.8% 0.202 349.761) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-500
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-500); /* oklch(65.6% 0.241 354.308) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-600
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-600); /* oklch(59.2% 0.249 0.584) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-700
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-700); /* oklch(52.5% 0.223 3.958) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-800
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-800); /* oklch(45.9% 0.187 3.815) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-900
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-900); /* oklch(40.8% 0.153 2.432) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-pink-950
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-pink-950); /* oklch(28.4% 0.109 3.907) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-rose-50
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-rose-50); /* oklch(96.9% 0.015 12.422) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-rose-100
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-rose-100); /* oklch(94.1% 0.03 12.58) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-rose-200
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-rose-200); /* oklch(89.2% 0.058 10.001) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-rose-300
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-rose-300); /* oklch(81% 0.117 11.638) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-rose-400
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-rose-400); /* oklch(71.2% 0.194 13.428) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-rose-500
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-rose-500); /* oklch(64.5% 0.246 16.439) */
```

LANGUAGE: tailwindcss
CODE:
```
border-y-rose-600
```

LANGUAGE: css
CODE:
```
border-block-color: var(--color-rose-600); /* oklch(58.6% 0.253 17.585) */
```

----------------------------------------

TITLE: Create React Router Project
DESCRIPTION: This command initializes a new React Router project using `create-react-router` and then navigates into the newly created project directory, preparing it for further setup.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/react-router

LANGUAGE: Terminal
CODE:
```
npx create-react-router@latest my-project
cd my-project
```

----------------------------------------

TITLE: Add Custom Variants in Tailwind CSS
DESCRIPTION: These CSS snippets demonstrate how to add custom variants in Tailwind CSS using the `@custom-variant` directive. The first example shows a full definition with a nested slot, enabling `theme-midnight:bg-black`. The second shows a shorthand syntax for simpler variants. The third illustrates nesting multiple rules within a custom variant, such as `any-hover` combining media queries and hover states.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: CSS
CODE:
```
@custom-variant theme-midnight {
  &:where([data-theme=""midnight""] *) {
    @slot;
  }
}
```

LANGUAGE: CSS
CODE:
```
@custom-variant theme-midnight (&:where([data-theme=""midnight""] *));
```

LANGUAGE: CSS
CODE:
```
@custom-variant any-hover {
  @media (any-hover: hover) {
    &:hover {
      @slot;
    }
  }
}
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: Provides utility classes for styling text and fonts, covering properties like font family, size, weight, style, line height, text alignment, color, decoration, and overflow.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: APIDOC
CODE:
```
font-family: /docs/font-family
font-size: /docs/font-size
font-smoothing: /docs/font-smoothing
font-style: /docs/font-style
font-weight: /docs/font-weight
font-stretch: /docs/font-stretch
font-variant-numeric: /docs/font-variant-numeric
letter-spacing: /docs/letter-spacing
line-clamp: /docs/line-clamp
line-height: /docs/line-height
list-style-image: /docs/list-style-image
list-style-position: /docs/list-style-position
list-style-type: /docs/list-style-type
text-align: /docs/text-align
color: /docs/color
text-decoration-line: /docs/text-decoration-line
text-decoration-color: /docs/text-decoration-color
text-decoration-style: /docs/text-decoration-style
text-decoration-thickness: /docs/text-decoration-thickness
text-underline-offset: /docs/text-underline-offset
text-transform: /docs/text-transform
text-overflow: /docs/text-overflow
text-wrap: /docs/text-wrap
text-indent: /docs/text-indent
vertical-align: /docs/vertical-align
white-space: /docs/white-space
word-break: /docs/word-break
overflow-wrap: /docs/overflow-wrap
hyphens: /docs/hyphens
content: /docs/content
```

----------------------------------------

TITLE: Tailwind CSS Flex Grow Example: Custom Values
DESCRIPTION: Explains how to apply a custom flex grow factor using the `grow-[<value>]` syntax or a CSS variable with `grow-(<custom-property>)` for dynamic growth behavior.
SOURCE: https://tailwindcss.com/docs/flex-grow

LANGUAGE: HTML
CODE:
```
<div class=""grow-[25vw] ..."">  <!-- ... --></div>
```

LANGUAGE: HTML
CODE:
```
<div class=""grow-(--my-grow) ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Utility Classes Reference
DESCRIPTION: A comprehensive reference of Tailwind CSS utility classes categorized by their functional areas. These classes provide direct control over various CSS properties for rapid UI development, covering visual effects, filtering, table styling, animation, transformations, user interaction, SVG properties, and accessibility features.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/vite

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow
  - text-shadow
  - opacity
  - mix-blend-mode
  - background-blend-mode
  - mask-clip
  - mask-composite
  - mask-image
  - mask-mode
  - mask-origin
  - mask-position
  - mask-repeat
  - mask-size
  - mask-type

Filters:
  - filter
    - blur
    - brightness
    - contrast
    - drop-shadow
    - grayscale
    - hue-rotate
    - invert
    - saturate
    - sepia
  - backdrop-filter
    - blur
    - brightness
    - contrast
    - grayscale
    - hue-rotate
    - invert
    - opacity
    - saturate
    - sepia

Tables:
  - border-collapse
  - border-spacing
  - table-layout
  - caption-side

Transitions & Animation:
  - transition-property
  - transition-behavior
  - transition-duration
  - transition-timing-function
  - transition-delay
  - animation

Transforms:
  - backface-visibility
  - perspective
  - perspective-origin
  - rotate
  - scale
  - skew
  - transform
  - transform-origin
  - transform-style
  - translate

Interactivity:
  - accent-color
  - appearance
  - caret-color
  - color-scheme
  - cursor
  - field-sizing
  - pointer-events
  - resize
  - scroll-behavior
  - scroll-margin
  - scroll-padding
  - scroll-snap-align
  - scroll-snap-stop
  - scroll-snap-type
  - touch-action
  - user-select
  - will-change

SVG:
  - fill
  - stroke
  - stroke-width

Accessibility:
  - forced-color-adjust
```

----------------------------------------

TITLE: Tailwind CSS Table Utilities
DESCRIPTION: Provides documentation for Tailwind CSS utility classes used to style HTML tables, covering border behavior, spacing, layout algorithms, and caption positioning.
SOURCE: https://tailwindcss.com/docs/filter-drop-shadow

LANGUAGE: APIDOC
CODE:
```
border-collapse: Sets whether table borders are collapsed into a single border or separated.
border-spacing: Specifies the distance between the borders of adjacent cells.
table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
caption-side: Specifies the placement of a table caption.
```

----------------------------------------

TITLE: Apply Tailwind CSS background-origin Utilities
DESCRIPTION: Demonstrates the application of `bg-origin-border`, `bg-origin-padding`, and `bg-origin-content` utilities in HTML to control where an element's background is rendered relative to its box model.
SOURCE: https://tailwindcss.com/docs/background-origin

LANGUAGE: html
CODE:
```
<div class=""border-4 bg-[url(/img/mountains.jpg)] bg-origin-border p-3 ...""></div><div class=""border-4 bg-[url(/img/mountains.jpg)] bg-origin-padding p-3 ...""></div><div class=""border-4 bg-[url(/img/mountains.jpg)] bg-origin-content p-3 ...""></div>
```

----------------------------------------

TITLE: Start Meteor build process
DESCRIPTION: Executes the npm start script to initiate the Meteor development server and build process, compiling the project including Tailwind CSS.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/meteor

LANGUAGE: bash
CODE:
```
npm run start
```

----------------------------------------

TITLE: Tailwind CSS Flexbox & Grid Utilities
DESCRIPTION: Utility classes for building flexible and grid-based layouts, covering properties like flex basis, direction, wrap, grow, shrink, order, grid templates, auto flows, gaps, and alignment for content, items, and self.
SOURCE: https://tailwindcss.com/docs/visibility

LANGUAGE: APIDOC
CODE:
```
Flexbox & Grid Utilities:
  - flex-basis: /docs/flex-basis
  - flex-direction: /docs/flex-direction
  - flex-wrap: /docs/flex-wrap
  - flex: /docs/flex
  - flex-grow: /docs/flex-grow
  - flex-shrink: /docs/flex-shrink
  - order: /docs/order
  - grid-template-columns: /docs/grid-template-columns
  - grid-column: /docs/grid-column
  - grid-template-rows: /docs/grid-template-rows
  - grid-row: /docs/grid-row
  - grid-auto-flow: /docs/grid-auto-flow
  - grid-auto-columns: /docs/grid-auto-columns
  - grid-auto-rows: /docs/grid-auto-rows
  - gap: /docs/gap
  - justify-content: /docs/justify-content
  - justify-items: /docs/justify-items
  - justify-self: /docs/justify-self
  - align-content: /docs/align-content
  - align-items: /docs/align-items
  - align-self: /docs/align-self
  - place-content: /docs/place-content
  - place-items: /docs/place-items
  - place-self: /docs/place-self
```

----------------------------------------

TITLE: Apply Diagonal Fractions with Tailwind CSS
DESCRIPTION: Illustrates the use of the `diagonal-fractions` utility class in Tailwind CSS to convert numbers separated by a slash into common diagonal fraction glyphs, where supported by the font.
SOURCE: https://tailwindcss.com/docs/font-variant-numeric

LANGUAGE: html
CODE:
```
<p class=""diagonal-fractions ..."">1/2 3/4 5/6</p>
```

----------------------------------------

TITLE: Apply Inline Border Color with Tailwind CSS `border-x-` Utilities
DESCRIPTION: These Tailwind CSS utility classes provide a convenient way to set the `border-inline-color` property, which controls the color of the logical inline start and end borders of an element. The classes follow the pattern `border-x-<color>-<shade>`, where `<color>` refers to a predefined color palette (e.g., slate, gray, zinc, neutral, stone) and `<shade>` is a numerical value from 50 to 950, mapping to a specific CSS variable (`--color-<color>-<shade>`).
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: Tailwind CSS
CODE:
```
<div class=""border-x-slate-600"">...</div>
<div class=""border-x-gray-500"">...</div>
<div class=""border-x-zinc-900"">...</div>
```

LANGUAGE: CSS
CODE:
```
.border-x-slate-600 {
  border-inline-color: var(--color-slate-600);
}

.border-x-gray-500 {
  border-inline-color: var(--color-gray-500);
}

.border-x-zinc-900 {
  border-inline-color: var(--color-zinc-900);
}
```

----------------------------------------

TITLE: Tailwind CSS Flexbox and Grid Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for building flexible and grid-based layouts. This includes properties for flex container and item behavior, grid template and item placement, auto-flow, gaps, and alignment within both flexbox and grid contexts.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: APIDOC
CODE:
```
Flexbox & Grid Utilities:
  - flex-basis: Set the initial size of a flex item.
  - flex-direction: Define the direction of flex items.
  - flex-wrap: Control whether flex items wrap.
  - flex: Shorthand for flex-grow, flex-shrink, and flex-basis.
  - flex-grow: Allow a flex item to grow.
  - flex-shrink: Allow a flex item to shrink.
  - order: Control the visual order of flex items.
  - grid-template-columns: Define the columns in a grid layout.
  - grid-column: Control the size and placement of a grid item within columns.
  - grid-template-rows: Define the rows in a grid layout.
  - grid-row: Control the size and placement of a grid item within rows.
  - grid-auto-flow: Control how auto-placed grid items are inserted.
  - grid-auto-columns: Set the size of implicitly created grid columns.
  - grid-auto-rows: Set the size of implicitly created grid rows.
  - gap: Set the gap between grid or flex items.
  - justify-content: Align flex items or grid tracks along the main axis.
  - justify-items: Align grid items along the inline axis.
  - justify-self: Align a single grid item along the inline axis.
  - align-content: Align flex lines or grid tracks along the cross axis.
  - align-items: Align flex items or grid items along the cross axis.
  - align-self: Align a single flex item or grid item along the cross axis.
  - place-content: Shorthand for align-content and justify-content.
  - place-items: Shorthand for align-items and justify-items.
  - place-self: Shorthand for align-self and justify-self.
```

----------------------------------------

TITLE: Registering functional utilities with argument acceptance
DESCRIPTION: Explains how to define functional utility classes that accept an argument using the `@utility` directive and the special `--value()` function. This enables creating dynamic utilities where the value is passed directly in the class name.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: CSS
CODE:
```
@utility tab-* {  tab-size: --value(--tab-size-*);}
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that control the styling of text and fonts. This includes properties for font families, sizes, weights, styles, text alignment, decoration, transformation, and handling of text overflow and wrapping.
SOURCE: https://tailwindcss.com/docs/text-decoration-thickness

LANGUAGE: APIDOC
CODE:
```
Typography Utilities:
  font-family: Specifies the font for an element.
  font-size: Specifies the size of the font.
  font-smoothing: Controls font rendering for anti-aliasing.
  font-style: Specifies the font style for text (e.g., normal, italic).
  font-weight: Specifies the weight (or boldness) of the font.
  font-stretch: Selects a normal, condensed, or expanded face from a font family.
  font-variant-numeric: Controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.
  letter-spacing: Specifies the space between characters.
  line-clamp: Limits the content to a specified number of lines.
  line-height: Specifies the height of a line of text.
  list-style-image: Specifies an image as the list-item marker.
  list-style-position: Specifies the position of the list-item marker.
  list-style-type: Specifies the type of list-item marker.
  text-align: Specifies the horizontal alignment of text.
  color: Sets the color of the text.
  text-decoration-line: Specifies the kind of text decoration to use (e.g., underline, line-through).
  text-decoration-color: Specifies the color of the text decoration.
  text-decoration-style: Specifies the style of the text decoration line (e.g., solid, double, wavy).
  text-decoration-thickness: Specifies the thickness of the text decoration line.
  text-underline-offset: Specifies the offset of the underline from the text.
  text-transform: Controls the capitalization of text.
  text-overflow: Specifies how overflowed content that is not displayed should be signaled to the user.
  text-wrap: Specifies how text should be wrapped.
  text-indent: Specifies the indentation of the first line of text in a block.
  vertical-align: Sets the vertical alignment of an element.
  white-space: Specifies how white space inside an element is handled.
  word-break: Specifies how words should break when reaching the end of a line.
  overflow-wrap: Specifies whether or not the browser should insert line breaks within words to prevent overflow.
  hyphens: Specifies how words should be hyphenated when text wraps across lines.
  content: Used with pseudo-elements (::before, ::after) to insert generated content.
```

----------------------------------------

TITLE: Align Flex Items to End with Tailwind CSS
DESCRIPTION: Provides an example of using the `items-end` utility class to align flex items to the end of the container's cross axis.
SOURCE: https://tailwindcss.com/docs/align-items

LANGUAGE: html
CODE:
```
<div class=""flex items-end ..."">
  <div class=""py-4"">01</div>
  <div class=""py-12"">02</div>
  <div class=""py-8"">03</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS text-transform Utility Classes API
DESCRIPTION: Documents the Tailwind CSS utility classes for controlling text capitalization, including `uppercase`, `lowercase`, `capitalize`, and `normal-case`, along with their corresponding CSS properties.
SOURCE: https://tailwindcss.com/docs/text-transform

LANGUAGE: APIDOC
CODE:
```
Class       | Styles
------------|--------------------------
`uppercase` | `text-transform: uppercase;`
`lowercase` | `text-transform: lowercase;`
`capitalize`| `text-transform: capitalize;`
`normal-case`| `text-transform: none;`
```

----------------------------------------

TITLE: Tailwind CSS background-clip Text Cropping Example
DESCRIPTION: Illustrates how to use the `bg-clip-text` utility to crop an element's background to match the shape of the text. This is often combined with gradient backgrounds and transparent text to create visually appealing text effects.
SOURCE: https://tailwindcss.com/docs/background-clip

LANGUAGE: html
CODE:
```
<p class=""bg-linear-to-r from-pink-500 to-violet-500 bg-clip-text text-5xl font-extrabold text-transparent ..."">  Hello world</p>
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Reference
DESCRIPTION: A comprehensive reference for various Tailwind CSS utility classes categorized by their functional area, including visual effects, filters, table styling, transitions, animations, transformations, interactivity, SVG properties, and accessibility.
SOURCE: https://tailwindcss.com/docs/flex

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow
  - text-shadow
  - opacity
  - mix-blend-mode
  - background-blend-mode
  - mask-clip
  - mask-composite
  - mask-image
  - mask-mode
  - mask-origin
  - mask-position
  - mask-repeat
  - mask-size
  - mask-type

Filters:
  - filter:
    - blur
    - brightness
    - contrast
    - drop-shadow
    - grayscale
    - hue-rotate
    - invert
    - saturate
    - sepia
  - backdrop-filter:
    - blur
    - brightness
    - contrast
    - grayscale
    - hue-rotate
    - invert
    - opacity
    - saturate
    - sepia

Tables:
  - border-collapse
  - border-spacing
  - table-layout
  - caption-side

Transitions & Animation:
  - transition-property
  - transition-behavior
  - transition-duration
  - transition-timing-function
  - transition-delay
  - animation

Transforms:
  - backface-visibility
  - perspective
  - perspective-origin
  - rotate
  - scale
  - skew
  - transform
  - transform-origin
  - transform-style
  - translate

Interactivity:
  - accent-color
  - appearance
  - caret-color
  - color-scheme
  - cursor
  - field-sizing
  - pointer-events
  - resize
  - scroll-behavior
  - scroll-margin
  - scroll-padding
  - scroll-snap-align
  - scroll-snap-stop
  - scroll-snap-type
  - touch-action
  - user-select
  - will-change

SVG:
  - fill
  - stroke
  - stroke-width

Accessibility:
  - forced-color-adjust
```

----------------------------------------

TITLE: Start Astro development server
DESCRIPTION: Executes the `npm run dev` command to start the Astro development server. This compiles the project, watches for changes, and serves the application locally for development and testing.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/astro

LANGUAGE: Terminal
CODE:
```
npm run dev
```

----------------------------------------

TITLE: HTML Navigation Menu with Tailwind CSS
DESCRIPTION: Demonstrates a simple navigation menu structure using Tailwind CSS utility classes. This example is particularly suitable for quick, localized class updates using multi-cursor editing.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: HTML
CODE:
```
<nav class=""flex justify-center space-x-4"">  <a href=""/dashboard"" class=""font-medium rounded-lg px-3 py-2 text-gray-700 hover:bg-gray-100 hover:text-gray-900"">    Home  </a>  <a href=""/team"" class=""font-medium rounded-lg px-3 py-2 text-gray-700 hover:bg-gray-100 hover:text-gray-900"">    Team  </a>  <a href=""/projects"" class=""font-medium rounded-lg px-3 py-2 text-gray-700 hover:bg-gray-100 hover:text-gray-900"">    Projects  </a>  <a href=""/reports"" class=""font-medium rounded-lg px-3 py-2 text-gray-700 hover:bg-gray-100 hover:text-gray-900"">    Reports  </a></nav>
```

----------------------------------------

TITLE: Tailwind CSS mask-auto Example
DESCRIPTION: Shows the application of the `mask-auto` utility class in Tailwind CSS to display a mask image at its default, intrinsic size.
SOURCE: https://tailwindcss.com/docs/mask-size

LANGUAGE: HTML
CODE:
```
<div class=""mask-auto mask-[url(/img/scribble.png)] bg-[url(/img/mountains.jpg)] ...""></div>
```

----------------------------------------

TITLE: Tailwind CSS Layout Utilities
DESCRIPTION: Provides an overview of utility classes for controlling element layout, including aspect ratio, columns, breaks, box model, display, floats, positioning, visibility, and z-index.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Layout:
  - aspect-ratio
  - columns
  - break-after
  - break-before
  - break-inside
  - box-decoration-break
  - box-sizing
  - display
  - float
  - clear
  - isolation
  - object-fit
  - object-position
  - overflow
  - overscroll-behavior
  - position
  - top / right / bottom / left
  - visibility
  - z-index
```

----------------------------------------

TITLE: HTML Example: Stretching Image to Fill Container with object-fill
DESCRIPTION: Shows how to apply the `object-fill` utility class in HTML to stretch an image to completely fill its container, which may result in the image being distorted if its aspect ratio differs from the container's.
SOURCE: https://tailwindcss.com/docs/object-fit

LANGUAGE: HTML
CODE:
```
<img class=""h-48 w-96 object-fill ..."" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: Start the Gatsby development server
DESCRIPTION: Executes the `gatsby develop` command to start the local development server. This command compiles your Gatsby project, including Tailwind CSS, and provides a live-reloading environment for development.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/gatsby

LANGUAGE: bash
CODE:
```
gatsby develop
```

----------------------------------------

TITLE: Tailwind CSS Utility Categories and Properties Reference
DESCRIPTION: This entry lists various Tailwind CSS utility categories and the specific CSS properties they control. It serves as a high-level reference for understanding the scope of Tailwind's styling capabilities across different domains like visual effects, filters, and interactivity.
SOURCE: https://tailwindcss.com/docs/font-weight

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow
  - text-shadow
  - opacity
  - mix-blend-mode
  - background-blend-mode
  - mask-clip
  - mask-composite
  - mask-image
  - mask-mode
  - mask-origin
  - mask-position
  - mask-repeat
  - mask-size
  - mask-type

Filters:
  - filter
    - blur
    - brightness
    - contrast
    - drop-shadow
    - grayscale
    - hue-rotate
    - invert
    - saturate
    - sepia
  - backdrop-filter
    - blur
    - brightness
    - contrast
    - grayscale
    - hue-rotate
    - invert
    - opacity
    - saturate
    - sepia

Tables:
  - border-collapse
  - border-spacing
  - table-layout
  - caption-side

Transitions & Animation:
  - transition-property
  - transition-behavior
  - transition-duration
  - transition-timing-function
  - transition-delay
  - animation

Transforms:
  - backface-visibility
  - perspective
  - perspective-origin
  - rotate
  - scale
  - skew
  - transform
  - transform-origin
  - transform-style
  - translate

Interactivity:
  - accent-color
  - appearance
  - caret-color
  - color-scheme
  - cursor
  - field-sizing
  - pointer-events
  - resize
  - scroll-behavior
  - scroll-margin
  - scroll-padding
  - scroll-snap-align
  - scroll-snap-stop
  - scroll-snap-type
  - touch-action
  - user-select
  - will-change

SVG:
  - fill
  - stroke
  - stroke-width

Accessibility:
  - forced-color-adjust
```

----------------------------------------

TITLE: Tailwind CSS Flex Column Reversed Layout Example
DESCRIPTION: Provides an example of using `flex-col-reverse` to position flex items vertically in the opposite direction. This utility applies `flex-direction: column-reverse;` to the container.
SOURCE: https://tailwindcss.com/docs/flex-direction

LANGUAGE: HTML
CODE:
```
<div class=""flex flex-col-reverse ..."">  <div>01</div>  <div>02</div>  <div>03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Accessibility Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities related to accessibility, specifically for adjusting colors in forced color modes.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: APIDOC
CODE:
```
Accessibility:
  - forced-color-adjust: Controls how colors are adjusted in forced color modes (e.g., Windows High Contrast Mode).
```

----------------------------------------

TITLE: Integrate Tailwind CSS in AdonisJS Edge Template
DESCRIPTION: Example `home.edge` template demonstrating how to include compiled CSS and JavaScript assets using `@vite` and apply Tailwind CSS utility classes to HTML elements for styling.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/adonisjs

LANGUAGE: HTML
CODE:
```
<!doctype html>
<html>
  <head>
    <meta charset=""utf-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    @vite(['resources/css/app.css', 'resources/js/app.js'])
  </head>
  <body>
    <h1 class=""text-3xl font-bold underline"">
      Hello world!
    </h1>
  </body>
</html>
```

----------------------------------------

TITLE: Tailwind CSS list-style-image Utility Reference
DESCRIPTION: Reference for Tailwind CSS utilities controlling list item marker images, including class names and their corresponding CSS properties.
SOURCE: https://tailwindcss.com/docs/list-style-image

LANGUAGE: APIDOC
CODE:
```
Class | Styles
--- | ---
`list-image-[<value>]` | `list-style-image: <value>;`
`list-image-(<custom-property>)` | `list-style-image: var(<custom-property>);`
`list-image-none` | `list-style-image: none;`
```

----------------------------------------

TITLE: Tailwind CSS Transitions & Animation Utilities
DESCRIPTION: Documents utility classes for defining CSS transitions and animations, controlling properties like duration, timing, and delay.
SOURCE: https://tailwindcss.com/docs/border-width

LANGUAGE: APIDOC
CODE:
```
Transitions & Animation:
  transition-property: Utility for specifying the CSS properties to which a transition effect should be applied.
  transition-behavior: Utility for controlling how transitions behave.
  transition-duration: Utility for setting the duration of a transition effect.
  transition-timing-function: Utility for setting the speed curve of a transition effect.
  transition-delay: Utility for setting the delay before a transition effect starts.
  animation: Utility for applying a CSS animation.
```

----------------------------------------

TITLE: Align Flex Item to Start with self-start
DESCRIPTION: Apply the `self-start` utility to align an individual flex or grid item to the beginning of its container's cross axis. This overrides the container's `align-items` value, positioning the item at the start.
SOURCE: https://tailwindcss.com/docs/align-self

LANGUAGE: HTML
CODE:
```
<div class=""flex items-stretch ..."">  <div>01</div>  <div class=""self-start ..."">02</div>  <div>03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Text Shadow Utilities
DESCRIPTION: Provides a comprehensive set of Tailwind CSS utility classes for applying and customizing text shadows. This includes predefined shadow sizes, a 'none' option, custom property usage, arbitrary values, and a wide range of color utilities for the shadow color.
SOURCE: https://tailwindcss.com/docs/text-shadow

LANGUAGE: APIDOC
CODE:
```
text-shadow-2xs:
  Description: Applies a very small text shadow.
  CSS: text-shadow: var(--text-shadow-2xs); /* 0px 1px 0px rgb(0 0 0 / 0.15) */

text-shadow-xs:
  Description: Applies a small text shadow.
  CSS: text-shadow: var(--text-shadow-xs); /* 0px 1px 1px rgb(0 0 0 / 0.2) */

text-shadow-sm:
  Description: Applies a medium-small text shadow.
  CSS: text-shadow: var(--text-shadow-sm); /* 0px 1px 0px rgb(0 0 0 / 0.075), 0px 1px 1px rgb(0 0 0 / 0.075), 0px 2px 2px rgb(0 0 0 / 0.075) */

text-shadow-md:
  Description: Applies a medium text shadow.
  CSS: text-shadow: var(--text-shadow-md); /* 0px 1px 1px rgb(0 0 0 / 0.1), 0px 1px 2px rgb(0 0 0 / 0.1), 0px 2px 4px rgb(0 0 0 / 0.1) */

text-shadow-lg:
  Description: Applies a large text shadow.
  CSS: text-shadow: var(--text-shadow-lg); /* 0px 1px 2px rgb(0 0 0 / 0.1), 0px 3px 2px rgb(0 0 0 / 0.1), 0px 4px 8px rgb(0 0 0 / 0.1) */

text-shadow-none:
  Description: Removes any text shadow.
  CSS: text-shadow: none;

text-shadow-(<custom-property>):
  Description: Applies a text shadow using a custom CSS property.
  CSS: text-shadow: var(<custom-property>);

text-shadow-(color:<custom-property>):
  Description: Sets the text shadow color using a custom CSS property.
  CSS: --tw-shadow-color var(<custom-property>);

text-shadow-[<value>]:
  Description: Applies an arbitrary text shadow value.
  CSS: text-shadow: <value>;

text-shadow-inherit:
  Description: Sets the text shadow color to inherit from its parent.
  CSS: --tw-shadow-color inherit;

text-shadow-current:
  Description: Sets the text shadow color to the current text color.
  CSS: --tw-shadow-color currentColor;

text-shadow-transparent:
  Description: Sets the text shadow color to transparent.
  CSS: --tw-shadow-color transparent;

text-shadow-black:
  Description: Sets the text shadow color to black.
  CSS: --tw-text-shadow-color var(--color-black); /* #000 */

text-shadow-white:
  Description: Sets the text shadow color to white.
  CSS: --tw-text-shadow-color var(--color-white); /* #fff */

text-shadow-red-50 to text-shadow-red-950:
  Description: Sets the text shadow color to a shade of red from 50 to 950.
  CSS: --tw-text-shadow-color var(--color-red-[shade]);

text-shadow-orange-50 to text-shadow-orange-950:
  Description: Sets the text shadow color to a shade of orange from 50 to 950.
  CSS: --tw-text-shadow-color var(--color-orange-[shade]);

text-shadow-amber-50 to text-shadow-amber-900:
  Description: Sets the text shadow color to a shade of amber from 50 to 900.
  CSS: --tw-text-shadow-color var(--color-amber-[shade]);
```

----------------------------------------

TITLE: Tailwind CSS Spacing Utilities
DESCRIPTION: Describes utility classes for managing the external and internal spacing of elements, specifically padding and margin.
SOURCE: https://tailwindcss.com/docs/grid-column

LANGUAGE: APIDOC
CODE:
```
padding:
  - Utilities for controlling the padding of an element.
margin:
  - Utilities for controlling the margin of an element.
```

----------------------------------------

TITLE: Align Grid Item to Start with Tailwind CSS place-self-start
DESCRIPTION: This HTML snippet illustrates the use of the `place-self-start` utility class in Tailwind CSS. Applying this class aligns a grid item to the start of both the row and column axes within its grid container.
SOURCE: https://tailwindcss.com/docs/place-self

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-cols-3 gap-4 ..."">  <div>01</div>  <div class=""place-self-start ..."">02</div>  <div>03</div>  <div>04</div>  <div>05</div>  <div>06</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Background Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for styling element backgrounds. This includes properties for background attachment, clip, color, image, origin, position, repeat, and size.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: APIDOC
CODE:
```
Background Utilities:
  - background-attachment: Control whether the background image scrolls with the page.
  - background-clip: Control how the background extends into the element's content, padding, or border box.
  - background-color: Set the background color of an element.
  - background-image: Set the background image of an element.
  - background-origin: Control the positioning area of the background image.
  - background-position: Set the starting position of a background image.
  - background-repeat: Control how a background image repeats.
  - background-size: Set the size of the background image.
```

----------------------------------------

TITLE: Tailwind CSS Base Styles
DESCRIPTION: Details the base styles provided by Tailwind CSS, specifically focusing on Preflight for consistent cross-browser styling.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Base styles:
  - Preflight
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS Backdrop Hue Rotate
DESCRIPTION: Demonstrates the usage of Tailwind CSS `backdrop-hue-rotate` utility classes within HTML. This example applies different hue rotations (90, 180, and 270 degrees) to a semi-transparent overlay on a background image.
SOURCE: https://tailwindcss.com/docs/backdrop-filter-hue-rotate

LANGUAGE: html
CODE:
```
<div class=""bg-[url(/img/mountains.jpg)]"">  <div class=""bg-white/30 backdrop-hue-rotate-90 ...""></div></div><div class=""bg-[url(/img/mountains.jpg)]"">  <div class=""bg-white/30 backdrop-hue-rotate-180 ...""></div></div><div class=""bg-[url(/img/mountains.jpg)]"">  <div class=""bg-white/30 backdrop-hue-rotate-270 ...""></div></div>
```

----------------------------------------

TITLE: Tailwind CSS mask-cover Example
DESCRIPTION: Demonstrates the use of the `mask-cover` utility class in Tailwind CSS to scale a mask image to fill its container, potentially cropping the image.
SOURCE: https://tailwindcss.com/docs/mask-size

LANGUAGE: HTML
CODE:
```
<div class=""mask-cover mask-[url(/img/scribble.png)] bg-[url(/img/mountains.jpg)] ...""></div>
```

----------------------------------------

TITLE: Tailwind CSS Flexbox `flex-initial` Example
DESCRIPTION: Illustrates the `flex-initial` utility, which allows a flex item to shrink but not grow, respecting its initial size. This setup shows how items maintain their base width while adapting to available space.
SOURCE: https://tailwindcss.com/docs/flex

LANGUAGE: HTML
CODE:
```
<div class=""flex"">  <div class=""w-14 flex-none ..."">01</div>  <div class=""w-64 flex-initial ..."">02</div>  <div class=""w-32 flex-initial ..."">03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS mask-origin Utility API
DESCRIPTION: Defines the `mask-origin` utility classes in Tailwind CSS, specifying how an element's mask image is positioned relative to its box model. This API documentation includes class names and their corresponding CSS properties.
SOURCE: https://tailwindcss.com/docs/mask-origin

LANGUAGE: APIDOC
CODE:
```
mask-origin-border: mask-origin: border-box;
mask-origin-padding: mask-origin: padding-box;
mask-origin-content: mask-origin: content-box;
mask-origin-fill: mask-origin: fill-box;
mask-origin-stroke: mask-origin: stroke-box;
mask-origin-view: mask-origin: view-box;
```

----------------------------------------

TITLE: Tailwind CSS Flexbox & Grid Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that manage flexible box layouts (Flexbox) and grid layouts (CSS Grid). These utilities provide comprehensive control over alignment, distribution, sizing, and ordering of items within flex and grid containers.
SOURCE: https://tailwindcss.com/docs/text-decoration-thickness

LANGUAGE: APIDOC
CODE:
```
Flexbox & Grid Utilities:
  flex-basis: Specifies the initial main size of a flex item.
  flex-direction: Establishes the main-axis, thus defining the direction flex items are placed in the flex container.
  flex-wrap: Specifies whether flex items are forced into a single line or can be wrapped onto multiple lines.
  flex: A shorthand property that sets how a flex item will grow or shrink to fit the space available in its flex container.
  flex-grow: Specifies the flex grow factor of a flex item.
  flex-shrink: Specifies the flex shrink factor of a flex item.
  order: Specifies the order of a flex item relative to the rest of the flex items in the same container.
  grid-template-columns: Defines the column names and sizes of the grid.
  grid-column: Specifies a grid item's size and location within the grid column.
  grid-template-rows: Defines the row names and sizes of the grid.
  grid-row: Specifies a grid item's size and location within the grid row.
  grid-auto-flow: Controls how auto-placed items are inserted in the grid.
  grid-auto-columns: Specifies the size of implicitly created grid columns.
  grid-auto-rows: Specifies the size of implicitly created grid rows.
  gap: A shorthand for row-gap and column-gap, specifying the size of the gutters between grid rows and columns.
  justify-content: Aligns flex items along the main axis of the current line of the flex container.
  justify-items: Aligns grid items along the inline (row) axis.
  justify-self: Aligns a grid item inside a grid area along the inline (row) axis.
  align-content: Aligns a flex container's lines within the flex container when there is extra space in the cross-axis.
  align-items: Aligns flex items along the cross axis of the current line of the flex container.
  align-self: Aligns a flex item inside a flex container along the cross axis.
  place-content: A shorthand for align-content and justify-content.
  place-items: A shorthand for align-items and justify-items.
  place-self: A shorthand for align-self and justify-self.
```

----------------------------------------

TITLE: TailwindCSS Interactivity Utilities
DESCRIPTION: Documentation for TailwindCSS utilities that control user interaction and element behavior, such as accent colors, appearance, cursor styles, scroll behavior, and user selection.
SOURCE: https://tailwindcss.com/docs/color

LANGUAGE: APIDOC
CODE:
```
accent-color
appearance
caret-color
color-scheme
cursor
field-sizing
pointer-events
resize
scroll-behavior
scroll-margin
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
touch-action
user-select
will-change
```

----------------------------------------

TITLE: Align Grid Items to Start with Tailwind CSS place-content-start
DESCRIPTION: Illustrates the use of the `place-content-start` utility class in Tailwind CSS to pack grid items against the start of the block axis within a grid container. This aligns content to the top or left, depending on the writing mode.
SOURCE: https://tailwindcss.com/docs/place-content

LANGUAGE: HTML
CODE:
```
<div class=""grid h-48 grid-cols-2 place-content-start gap-4 ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
  <div>04</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utilities
DESCRIPTION: This section provides Tailwind CSS utility classes for controlling user interaction with elements, including cursor styles, pointer events, resizing behavior, scroll snapping, and user selection.
SOURCE: https://tailwindcss.com/docs/installation/tailwind-cli

LANGUAGE: APIDOC
CODE:
```
accent-color: Utilities for controlling the accent color of UI controls.
appearance: Utilities for controlling the native appearance of UI controls.
caret-color: Utilities for controlling the color of the text input cursor.
color-scheme: Utilities for controlling the color scheme of an element.
cursor: Utilities for controlling the cursor style when hovering over an element.
field-sizing: Utilities for controlling the field sizing property.
pointer-events: Utilities for controlling whether an element reacts to pointer events.
resize: Utilities for controlling whether an element can be resized by the user.
scroll-behavior: Utilities for controlling the scroll behavior of an element.
scroll-margin: Utilities for controlling the scroll margin of an element.
scroll-padding: Utilities for controlling the scroll padding of an element.
scroll-snap-align: Utilities for controlling the scroll snap align property.
scroll-snap-stop: Utilities for controlling the scroll snap stop property.
scroll-snap-type: Utilities for controlling the scroll snap type property.
touch-action: Utilities for controlling how an element's touch events are handled.
user-select: Utilities for controlling whether the user can select text.
will-change: Utilities for informing the browser about expected changes to an element.
```

----------------------------------------

TITLE: Tailwind CSS Box Shadow Utility Classes Reference
DESCRIPTION: This section details the various Tailwind CSS utility classes available for applying and customizing box shadows. It includes classes for predefined shadow sizes, custom shadow values, and a wide array of color options for the shadow, demonstrating how each class maps to underlying CSS properties.
SOURCE: https://tailwindcss.com/docs/box-shadow

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Box Shadow Utilities:

shadow-2xs: box-shadow: var(--shadow-2xs); /* 0 1px rgb(0 0 0 / 0.05) */
shadow-xs: box-shadow: var(--shadow-xs); /* 0 1px 2px 0 rgb(0 0 0 / 0.05) */
shadow-sm: box-shadow: var(--shadow-sm); /* 0 1px 3px 0 rgb(0 0 0 / 0.1), 0 1px 2px -1px rgb(0 0 0 / 0.1) */
shadow-md: box-shadow: var(--shadow-md); /* 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1) */
shadow-lg: box-shadow: var(--shadow-lg); /* 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1) */
shadow-xl: box-shadow: var(--shadow-xl); /* 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1) */
shadow-2xl: box-shadow: var(--shadow-2xl); /* 0 25px 50px -12px rgb(0 0 0 / 0.25) */
shadow-none: box-shadow: 0 0 #0000;
shadow-(<custom-property>): box-shadow: var(<custom-property>);
shadow-(color:<custom-property>): --tw-shadow-color: var(<custom-property>);
shadow-[<value>]: box-shadow: <value>;
shadow-inherit: --tw-shadow-color: inherit;
shadow-current: --tw-shadow-color: currentColor;
shadow-transparent: --tw-shadow-color: transparent;
shadow-black: --tw-shadow-color: var(--color-black); /* #000 */
shadow-white: --tw-shadow-color: var(--color-white); /* #fff */
shadow-red-50: --tw-shadow-color: var(--color-red-50); /* oklch(97.1% 0.013 17.38) */
shadow-red-100: --tw-shadow-color: var(--color-red-100); /* oklch(93.6% 0.032 17.717) */
shadow-red-200: --tw-shadow-color: var(--color-red-200); /* oklch(88.5% 0.062 18.334) */
shadow-red-300: --tw-shadow-color: var(--color-red-300); /* oklch(80.8% 0.114 19.571) */
shadow-red-400: --tw-shadow-color: var(--color-red-400); /* oklch(70.4% 0.191 22.216) */
shadow-red-500: --tw-shadow-color: var(--color-red-500); /* oklch(63.7% 0.237 25.331) */
shadow-red-600: --tw-shadow-color: var(--color-red-600); /* oklch(57.7% 0.245 27.325) */
shadow-red-700: --tw-shadow-color: var(--color-red-700); /* oklch(50.5% 0.213 27.518) */
shadow-red-800: --tw-shadow-color: var(--color-red-800); /* oklch(44.4% 0.177 26.899) */
shadow-red-900: --tw-shadow-color: var(--color-red-900); /* oklch(39.6% 0.141 25.723) */
shadow-red-950: --tw-shadow-color: var(--color-red-950); /* oklch(25.8% 0.092 26.042) */
shadow-orange-50: --tw-shadow-color: var(--color-orange-50); /* oklch(98% 0.016 73.684) */
shadow-orange-100: --tw-shadow-color: var(--color-orange-100); /* oklch(95.4% 0.038 75.164) */
shadow-orange-200: --tw-shadow-color: var(--color-orange-200); /* oklch(90.1% 0.076 70.697) */
shadow-orange-300: --tw-shadow-color: var(--color-orange-300); /* oklch(83.7% 0.128 66.29) */
shadow-orange-400: --tw-shadow-color: var(--color-orange-400); /* oklch(75% 0.183 55.934) */
shadow-orange-500: --tw-shadow-color: var(--color-orange-500); /* oklch(70.5% 0.213 47.604) */
shadow-orange-600: --tw-shadow-color: var(--color-orange-600); /* oklch(64.6% 0.222 41.116) */
shadow-orange-700: --tw-shadow-color: var(--color-orange-700); /* oklch(55.3% 0.195 38.402) */
shadow-orange-800: --tw-shadow-color: var(--color-orange-800); /* oklch(47% 0.157 37.304) */
shadow-orange-900: --tw-shadow-color: var(--color-orange-900); /* oklch(40.8% 0.123 38.172) */
shadow-orange-950: --tw-shadow-color: var(--color-orange-950); /* oklch(26.6% 0.079 36.259) */
shadow-amber-50: --tw-shadow-color: var(--color-amber-50); /* oklch(98.7% 0.022 95.277) */
shadow-amber-100: --tw-shadow-color: var(--color-amber-100); /* oklch(96.2% 0.059 95.617) */
shadow-amber-200: --tw-shadow-color: var(--color-amber-200); /* oklch(92.4% 0.12 95.746) */
shadow-amber-300: --tw-shadow-color: var(--color-amber-300); /* oklch(87.9% 0.169 91.605) */
shadow-amber-400: --tw-shadow-color: var(--color-amber-400); /* oklch(82.8% 0.189 84.429) */
shadow-amber-500: --tw-shadow-color: var(--color-amber-500); /* oklch(76.9% 0.188 70.08) */
shadow-amber-600: --tw-shadow-color: var(--color-amber-600); /* oklch(66.6% 0.179 58.318) */
shadow-amber-700: --tw-shadow-color: var(--color-amber-700); /* oklch(55.5% 0.163 48.998) */
shadow-amber-800: --tw-shadow-color: var(--color-amber-800); /* oklch(47.3% 0.137 46.201) */
shadow-amber-900: --tw-shadow-color: var(--color-amber-900); /* oklch(41.4% 0.112 45.904) */
shadow-amber-950: --tw-shadow-color: var(--color-amber-950); /* oklch(27.9% 0.077 45.635) */
shadow-yellow-50: --tw-shadow-color: var(--color-yellow-50); /* oklch(98.7% 0.026 102.212) */
shadow-yellow-100: --tw-shadow-color: var(--color-yellow-100); /* oklch(97.3% 0.071 103.193) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-
DESCRIPTION: undefined
SOURCE: https://tailwindcss.com/docs/border-color



----------------------------------------

TITLE: Tailwind CSS Invert Filter Utilities API
DESCRIPTION: Documentation for Tailwind CSS utility classes that apply invert filters to elements. These classes allow control over color inversion using predefined values, custom numbers, or CSS variables, directly translating to the `filter: invert()` CSS property.
SOURCE: https://tailwindcss.com/docs/filter-invert

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Invert Filter Utilities:

invert
  - Styles: filter: invert(100%);
  - Description: Applies a full 100% inversion to the element.

invert-<number>
  - Styles: filter: invert(<number>%);
  - Description: Applies a specific percentage of inversion (e.g., invert-20 for 20%).
  - Parameters:
    - <number>: A numeric value representing the percentage of inversion.

invert-(<custom-property>)
  - Styles: filter: invert(var(<custom-property>));
  - Description: Applies inversion based on a CSS custom property. This is a shorthand for `invert-[var(<custom-property>)]`.
  - Parameters:
    - <custom-property>: The name of a CSS custom property (e.g., --my-inversion).

invert-[<value>]
  - Styles: filter: invert(<value>);
  - Description: Applies a completely custom inversion value, allowing for arbitrary CSS values.
  - Parameters:
    - <value>: Any valid CSS value for the `invert()` function (e.g., .25, 50%, var(--my-invert-amount)).
```

----------------------------------------

TITLE: Apply Arbitrary Values for Colors, Font Sizes, and Pseudo-element Content in Tailwind CSS
DESCRIPTION: Illustrates the versatility of arbitrary values by applying custom background colors, specific font sizes, and dynamic content for pseudo-elements using the square bracket syntax.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: HTML
CODE:
```
<div class=""bg-[#bada55] text-[22px] before:content-['Festivus']"">  <!-- ... --></div>
```

----------------------------------------

TITLE: Apply Source Detection to Utilities Import
DESCRIPTION: This example demonstrates how to apply the `source()` function to the `utilities.css` import. Source detection affects how generated utilities are handled, and this function allows you to control that behavior, for instance, by disabling it with `source(none)`.
SOURCE: https://tailwindcss.com/docs/preflight

LANGUAGE: CSS
CODE:
```
@layer theme, base, components, utilities;@import ""tailwindcss/theme.css"" layer(theme);@import ""tailwindcss/utilities.css"" layer(utilities);@import ""tailwindcss/utilities.css"" layer(utilities) source(none);
```

----------------------------------------

TITLE: Install Tailwind CSS and Vite Plugin for Nuxt.js
DESCRIPTION: Installs the `tailwindcss` package and its Vite plugin (`@tailwindcss/vite`) along with their peer dependencies using npm, preparing the project for Tailwind CSS integration.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nuxt

LANGUAGE: Terminal
CODE:
```
npm install tailwindcss @tailwindcss/vite
```

----------------------------------------

TITLE: Tailwind CSS Core Concepts Utilities
DESCRIPTION: This section outlines fundamental Tailwind CSS utility classes related to styling, responsiveness, dark mode, and custom styles. These utilities provide direct control over CSS properties through concise class names.
SOURCE: https://tailwindcss.com/docs/gap

LANGUAGE: APIDOC
CODE:
```
Styling with utility classes: Apply direct CSS properties using single-purpose classes.
Hover, focus, and other states: Apply styles conditionally based on element states (e.g., hover:, focus:).
Responsive design: Apply styles conditionally based on screen size (e.g., sm:, md:, lg:).
Dark mode: Apply styles conditionally based on dark mode preference (e.g., dark:).
Theme variables: Customize design tokens like colors, spacing, and fonts.
Colors: Apply predefined or custom color palettes.
Adding custom styles: Extend Tailwind with custom CSS or utility classes.
Detecting classes in source files: How Tailwind scans files for class usage.
Functions and directives: Use @apply, @tailwind, @layer for advanced customization.
```

----------------------------------------

TITLE: TailwindCSS Effects Utilities
DESCRIPTION: Documentation for TailwindCSS utilities related to visual effects, including box and text shadows, opacity, and various blend and mask modes. These utilities control how elements are rendered visually.
SOURCE: https://tailwindcss.com/docs/color

LANGUAGE: APIDOC
CODE:
```
box-shadow
text-shadow
opacity
mix-blend-mode
background-blend-mode
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-type
```

----------------------------------------

TITLE: Resolve Ambiguity with CSS Data Type Hints in Tailwind CSS
DESCRIPTION: Demonstrates how to resolve ambiguity when using CSS variables as arbitrary values by providing a CSS data type hint (e.g., `length` for font size, `color` for color) to guide Tailwind's utility generation.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: HTML
CODE:
```
<!-- Will generate a font-size utility --><div class=""text-(length:--my-var)"">...</div>
```

LANGUAGE: HTML
CODE:
```
<!-- Will generate a color utility --><div class=""text-(color:--my-var)"">...</div>
```

----------------------------------------

TITLE: Tailwind CSS Background Utilities
DESCRIPTION: Documents utility classes for styling element backgrounds, including attachment, clipping, color, image, origin, position, repeat, and size.
SOURCE: https://tailwindcss.com/docs/grid-column

LANGUAGE: APIDOC
CODE:
```
background-attachment:
  - Utilities for controlling how a background image scrolls.
background-clip:
  - Utilities for controlling how an element's background is clipped.
background-color:
  - Utilities for controlling the background color of an element.
background-image:
  - Utilities for controlling the background image of an element.
background-origin:
  - Utilities for controlling the background positioning area.
background-position:
  - Utilities for controlling the position of a background image.
background-repeat:
  - Utilities for controlling how a background image repeats.
background-size:
  - Utilities for controlling the size of a background image.
```

----------------------------------------

TITLE: TailwindCSS Table Utilities
DESCRIPTION: Documentation for TailwindCSS utilities used to style HTML tables, controlling aspects like border collapsing, spacing between cells, table layout algorithms, and caption positioning.
SOURCE: https://tailwindcss.com/docs/color

LANGUAGE: APIDOC
CODE:
```
border-collapse
border-spacing
table-layout
caption-side
```

----------------------------------------

TITLE: Tailwind CSS backdrop-opacity Utility API Reference
DESCRIPTION: Documents the `backdrop-opacity` utility in Tailwind CSS, detailing its classes and the corresponding CSS `backdrop-filter: opacity()` styles. It explains how to apply varying levels of opacity to backdrop filters using predefined numeric classes, custom properties, or arbitrary values.
SOURCE: https://tailwindcss.com/docs/backdrop-filter-opacity

LANGUAGE: APIDOC
CODE:
```
backdrop-opacity-<number>
  - Styles: backdrop-filter: opacity(<number>%);
  - Description: Applies a specific percentage opacity to the backdrop filter.
backdrop-opacity-(<custom-property>)
  - Styles: backdrop-filter: opacity(var(<custom-property>));
  - Description: Applies opacity based on a CSS custom property.
backdrop-opacity-[<value>]
  - Styles: backdrop-filter: opacity(<value>);
  - Description: Applies an arbitrary opacity value to the backdrop filter.
```

----------------------------------------

TITLE: Tailwind CSS Custom Border Color Utilities
DESCRIPTION: Documentation for Tailwind CSS utility classes that allow applying custom border colors using CSS variables or arbitrary values. These classes provide flexibility for dynamic or non-standard color definitions.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Custom Border Color Utilities:

border-(<custom-property>): border-color: var(<custom-property>);
  - Allows setting border color using a custom CSS property (variable).
  - Example: `border-(--my-custom-color)` will apply `border-color: var(--my-custom-color);`

border-[<value>]: border-color: <value>;
  - Allows setting border color using an arbitrary value.
  - Example: `border-[#ff0000]` will apply `border-color: #ff0000;`
  - Example: `border-[rgb(255,0,0)]` will apply `border-color: rgb(255,0,0);`
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS mask-composite Responsive Design
DESCRIPTION: Illustrates how to apply `mask-composite` utilities conditionally based on screen size using Tailwind CSS's responsive variants. This example shows a `div` element that applies `mask-add` by default and switches to `mask-subtract` on medium screens and above.
SOURCE: https://tailwindcss.com/docs/mask-composite

LANGUAGE: HTML
CODE:
```
<div class=""mask-add md:mask-subtract ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Sizing Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for controlling the dimensions of elements, including width, height, and their minimum and maximum constraints.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: APIDOC
CODE:
```
Sizing Utilities:
  - width: Set the width of an element.
  - min-width: Set the minimum width of an element.
  - max-width: Set the maximum width of an element.
  - height: Set the height of an element.
  - min-height: Set the minimum height of an element.
  - max-height: Set the maximum height of an element.
```

----------------------------------------

TITLE: React Component for Conditional Layout Styling
DESCRIPTION: Demonstrates a React component (`Example`) that conditionally applies `grid` or `flex` classes based on a prop. This is a recommended approach to programmatically manage styles and avoid directly applying conflicting utility classes to an element.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: JavaScript
CODE:
```
export function Example({ gridLayout }) {
  return <div className={gridLayout ? ""grid"" : ""flex""}>{/* ... */}</div>;
}
```

----------------------------------------

TITLE: Responsive Tailwind CSS grid-auto-columns with Breakpoints
DESCRIPTION: Shows how to apply `grid-auto-columns` utilities responsively using Tailwind CSS breakpoint variants. This example demonstrates changing the implicit column sizing from `max-content` to `min-content` at medium screen sizes and above.
SOURCE: https://tailwindcss.com/docs/grid-auto-columns

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-flow-col auto-cols-max md:auto-cols-min ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Responsive Profile Card with Hover States
DESCRIPTION: This HTML example illustrates a more advanced profile card component built with Tailwind CSS, demonstrating responsive design and interactive states. It uses responsive prefixes like `sm:flex-row` for layout changes on small screens and state variants like `hover:bg-purple-600` and `active:bg-purple-700` for button styling, showcasing how complex UIs can be constructed purely with utility classes.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: HTML
CODE:
```
<div class=""flex flex-col gap-2 p-8 sm:flex-row sm:items-center sm:gap-6 sm:py-4 ..."">  <img class=""mx-auto block h-24 rounded-full sm:mx-0 sm:shrink-0"" src=""/img/erin-lindford.jpg"" alt="""" />  <div class=""space-y-2 text-center sm:text-left"">    <div class=""space-y-0.5"">      <p class=""text-lg font-semibold text-black"">Erin Lindford</p>      <p class=""font-medium text-gray-500"">Product Engineer</p>    </div>    <button class=""border-purple-200 text-purple-600 hover:border-transparent hover:bg-purple-600 hover:text-white active:bg-purple-700 ..."">      Message    </button>  </div></div>
```

----------------------------------------

TITLE: HTML Table with Tailwind CSS Border Collapse Example
DESCRIPTION: An HTML code example demonstrating the application of Tailwind CSS utility classes to create a table with collapsing borders. The `border-collapse` class is used on the table element to combine adjacent cell borders, and `border` classes are applied to cells for visibility.
SOURCE: https://tailwindcss.com/docs/border-collapse

LANGUAGE: HTML
CODE:
```
<table class=""border-collapse border border-gray-400 ..."">
  <thead>
    <tr>
      <th class=""border border-gray-300 ..."">State</th>
      <th class=""border border-gray-300 ..."">City</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td class=""border border-gray-300 ..."">Indiana</td>
      <td class=""border border-gray-300 ..."">Indianapolis</td>
    </tr>
    <tr>
      <td class=""border border-gray-300 ..."">Ohio</td>
      <td class=""border border-gray-300 ..."">Columbus</td>
    </tr>
    <tr>
      <td class=""border border-gray-300 ..."">Michigan</td>
      <td class=""border border-gray-300 ..."">Detroit</td>
    </tr>
  </tbody>
</table>
```

----------------------------------------

TITLE: Tailwind CSS Spacing Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for controlling the spacing around elements, specifically padding and margin.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: APIDOC
CODE:
```
Spacing Utilities:
  - padding: Control the inner spacing of an element.
  - margin: Control the outer spacing around an element.
```

----------------------------------------

TITLE: Tailwind CSS Grid Column Start and End Lines
DESCRIPTION: Demonstrates how to use `col-start-<number>` and `col-end-<number>` utilities to position elements within a CSS Grid layout, allowing them to start or end at specific grid lines. It also shows how these can be combined with `col-span-<number>` for more complex layouts.
SOURCE: https://tailwindcss.com/docs/grid-column

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-cols-6 gap-4"">  <div class=""col-span-4 col-start-2 ..."">01</div>  <div class=""col-start-1 col-end-3 ..."">02</div>  <div class=""col-span-2 col-end-7 ..."">03</div>  <div class=""col-start-1 col-end-7 ..."">04</div></div>
```

----------------------------------------

TITLE: Apply Opacity Using CSS Custom Property in Tailwind CSS
DESCRIPTION: Demonstrates how to apply opacity to an HTML button by referencing a CSS custom property using Tailwind CSS's `opacity-(<custom-property>)` syntax.
SOURCE: https://tailwindcss.com/docs/opacity

LANGUAGE: HTML
CODE:
```
<button class=""opacity-(--my-opacity) ..."">  <!-- ... --></button>
```

----------------------------------------

TITLE: Tailwind CSS Flexbox & Grid Utilities
DESCRIPTION: Provides utility classes for managing flexible box and grid layouts, including direction, wrapping, sizing, ordering, template definitions, auto-flow, and alignment properties.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: APIDOC
CODE:
```
flex-basis: /docs/flex-basis
flex-direction: /docs/flex-direction
flex-wrap: /docs/flex-wrap
flex: /docs/flex
flex-grow: /docs/flex-grow
flex-shrink: /docs/flex-shrink
order: /docs/order
grid-template-columns: /docs/grid-template-columns
grid-column: /docs/grid-column
grid-template-rows: /docs/grid-template-rows
grid-row: /docs/grid-row
grid-auto-flow: /docs/grid-auto-flow
grid-auto-columns: /docs/grid-auto-columns
grid-auto-rows: /docs/grid-auto-rows
gap: /docs/gap
justify-content: /docs/justify-content
justify-items: /docs/justify-items
justify-self: /docs/justify-self
align-content: /docs/align-content
align-items: /docs/align-items
align-self: /docs/align-self
place-content: /docs/place-content
place-items: /docs/place-items
place-self: /docs/place-self
```

----------------------------------------

TITLE: Tailwind CSS Background Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that control the background properties of elements. These include properties for background images, colors, positioning, repetition, and attachment behavior.
SOURCE: https://tailwindcss.com/docs/text-decoration-thickness

LANGUAGE: APIDOC
CODE:
```
Background Utilities:
  background-attachment: Specifies whether a background image scrolls with the rest of the page, or is fixed.
  background-clip: Specifies how the background of an element is clipped.
  background-color: Sets the background color of an element.
  background-image: Sets one or more background images for an element.
  background-origin: Specifies the positioning area of the background images.
  background-position: Specifies the position of the background image.
  background-repeat: Specifies if/how a background image will be repeated.
  background-size: Specifies the size of the background images.
```

----------------------------------------

TITLE: HTML Example: Ignoring Pointer Events with Tailwind CSS
DESCRIPTION: Demonstrates how to use `pointer-events-none` to make an element ignore pointer events, while `pointer-events-auto` maintains default behavior. The example shows nested elements where the parent ignores events but children can still trigger them.
SOURCE: https://tailwindcss.com/docs/pointer-events

LANGUAGE: HTML
CODE:
```
<div class=""relative ..."">  <div class=""pointer-events-auto absolute ..."">    <svg class=""absolute h-5 w-5 text-gray-400"">      <!-- ... -->    </svg>  </div>  <input type=""text"" placeholder=""Search"" class=""..."" /></div><div class=""relative ..."">  <div class=""pointer-events-none absolute ..."">    <svg class=""absolute h-5 w-5 text-gray-400"">      <!-- ... -->    </svg>  </div>  <input type=""text"" placeholder=""Search"" class=""..."" /></div>
```

----------------------------------------

TITLE: TailwindCSS Accessibility Utilities
DESCRIPTION: This section lists TailwindCSS utilities related to accessibility features. It includes the `forced-color-adjust` property, which helps in adapting content for users with forced color modes, enhancing overall accessibility.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust
```

----------------------------------------

TITLE: Apply Slashed Zeroes with Tailwind CSS
DESCRIPTION: Demonstrates how to use the `slashed-zero` utility class in Tailwind CSS to force a zero with a slash in fonts that support this feature. This can improve readability and distinction between the number '0' and the letter 'O'.
SOURCE: https://tailwindcss.com/docs/font-variant-numeric

LANGUAGE: HTML
CODE:
```
<p class=""slashed-zero ..."">0</p>
```

----------------------------------------

TITLE: Create a New Vite Project
DESCRIPTION: This command initializes a new Vite project using the `create-vite` tool. It sets up the basic project structure and dependencies, preparing it for further development. The `cd` command then navigates into the newly created project directory.
SOURCE: https://tailwindcss.com/docs/index

LANGUAGE: Terminal
CODE:
```
npm create vite@latest my-project
cd my-project
```

----------------------------------------

TITLE: Tailwind CSS Flexbox `flex-auto` Example
DESCRIPTION: Shows the application of `flex-auto`, enabling a flex item to grow and shrink while considering its initial size. This provides a balanced approach to space distribution within a flex container.
SOURCE: https://tailwindcss.com/docs/flex

LANGUAGE: HTML
CODE:
```
<div class=""flex ..."">  <div class=""w-14 flex-none ..."">01</div>  <div class=""w-64 flex-auto ..."">02</div>  <div class=""w-32 flex-auto ..."">03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Theme Variable Namespaces and Generated Utilities
DESCRIPTION: This API documentation outlines the various theme variable namespaces supported by Tailwind CSS and the corresponding utility classes or variants they generate. Defining new theme variables within these namespaces makes new utilities and variants available for use in your project, extending Tailwind's default capabilities.
SOURCE: https://tailwindcss.com/docs/theme

LANGUAGE: APIDOC
CODE:
```
Namespace: --color-*
  Utility classes: Color utilities like `bg-red-500`, `text-sky-300`, and many more

Namespace: --font-*
  Utility classes: Font family utilities like `font-sans`

Namespace: --text-*
  Utility classes: Font size utilities like `text-xl`

Namespace: --font-weight-*
  Utility classes: Font weight utilities like `font-bold`

Namespace: --tracking-*
  Utility classes: Letter spacing utilities like `tracking-wide`

Namespace: --leading-*
  Utility classes: Line height utilities like `leading-tight`

Namespace: --breakpoint-*
  Utility classes: Responsive breakpoint variants like `sm:*`

Namespace: --container-*
  Utility classes: Container query variants like `@sm:*` and size utilities like `max-w-md`

Namespace: --spacing-*
  Utility classes: Spacing and sizing utilities like `px-4`, `max-h-16`, and many more

Namespace: --radius-*
  Utility classes: Border radius utilities like `rounded-sm`

Namespace: --shadow-*
  Utility classes: Box shadow utilities like `shadow-md`

Namespace: --inset-shadow-*
  Utility classes: Inset box shadow utilities like `inset-shadow-xs`

Namespace: --drop-shadow-*
  Utility classes: Drop shadow filter utilities like `drop-shadow-md`

Namespace: --blur-*
  Utility classes: Blur filter utilities like `blur-md`

Namespace: --perspective-*
  Utility classes: Perspective utilities like `perspective-near`

Namespace: --aspect-*
  Utility classes: Aspect ratio utilities like `aspect-video`

Namespace: --ease-*
  Utility classes: Transition timing function utilities like `ease-out`

Namespace: --animate-*
  Utility classes: Animation utilities like `animate-spin`
```

----------------------------------------

TITLE: Tailwind CSS justify-self Utility Classes
DESCRIPTION: Documentation for Tailwind CSS `justify-self` utility classes, controlling individual grid item alignment along its inline axis. Includes class names, corresponding CSS styles, and usage examples for different alignment options.
SOURCE: https://tailwindcss.com/docs/justify-self

LANGUAGE: APIDOC
CODE:
```
justify-self:
  - Description: Utilities for controlling how an individual grid item is aligned along its inline axis.
  - Classes:
    - `justify-self-auto`: `justify-self: auto;`
    - `justify-self-start`: `justify-self: start;`
    - `justify-self-center`: `justify-self: center;`
    - `justify-self-center-safe`: `justify-self: safe center;`
    - `justify-self-end`: `justify-self: end;`
    - `justify-self-end-safe`: `justify-self: safe end;`
    - `justify-self-stretch`: `justify-self: stretch;`
```

----------------------------------------

TITLE: Responsive Item Alignment with Tailwind CSS
DESCRIPTION: This HTML example illustrates how to apply responsive `align-items` utilities in Tailwind CSS. By using breakpoint prefixes like `md:`, the `items-center` alignment is applied only from medium screen sizes upwards, while `items-stretch` is the default for smaller screens. This allows for flexible layout adjustments based on screen dimensions.
SOURCE: https://tailwindcss.com/docs/align-items

LANGUAGE: html
CODE:
```
<div class=""flex items-stretch md:items-center ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: TailwindCSS SVG Utilities
DESCRIPTION: Documentation for TailwindCSS utilities specifically designed for styling SVG elements, controlling fill, stroke color, and stroke width.
SOURCE: https://tailwindcss.com/docs/color

LANGUAGE: APIDOC
CODE:
```
fill
stroke
stroke-width
```

----------------------------------------

TITLE: Create a New Ember.js Project
DESCRIPTION: Initializes a new Ember.js application using Ember CLI, with Embroider enabled and the welcome page disabled. This command sets up the basic project structure and navigates into the new project directory.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/emberjs

LANGUAGE: Shell
CODE:
```
npx ember-cli new my-project --embroider --no-welcome
cd my-project
```

----------------------------------------

TITLE: TailwindCSS Effects Utilities
DESCRIPTION: This section lists TailwindCSS utilities related to visual effects, including shadows, opacity, blend modes, and various mask properties. These utilities allow for fine-grained control over an element's visual presentation.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
box-shadow
text-shadow
opacity
mix-blend-mode
background-blend-mode
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-type
```

----------------------------------------

TITLE: Tailwind CSS object-fit Utilities API
DESCRIPTION: Defines the Tailwind CSS utility classes for controlling how a replaced element's content (e.g., an image or video) should be resized to fit its container, including their corresponding CSS properties and behaviors.
SOURCE: https://tailwindcss.com/docs/object-fit

LANGUAGE: APIDOC
CODE:
```
object-fit Utilities:

object-contain:
  - CSS Property: object-fit: contain;
  - Description: Resizes the content to stay contained within its container. The aspect ratio is preserved, and the content is letterboxed if necessary.
object-cover:
  - CSS Property: object-fit: cover;
  - Description: Resizes the content to cover its container. The aspect ratio is preserved, and the content may be cropped.
object-fill:
  - CSS Property: object-fit: fill;
  - Description: Stretches the content to fill its container. The aspect ratio is not preserved, potentially distorting the content.
object-none:
  - CSS Property: object-fit: none;
  - Description: Displays the content at its original size. It will not be resized to fit the container, potentially overflowing.
object-scale-down:
  - CSS Property: object-fit: scale-down;
  - Description: Displays the content at its original size, but scales it down to fit the container if necessary (behaves like 'none' or 'contain', whichever results in a smaller concrete object size).
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: This section covers Tailwind CSS utility classes for styling text and fonts. These utilities provide control over font families, sizes, weights, line heights, text alignment, decoration, and more.
SOURCE: https://tailwindcss.com/docs/gap

LANGUAGE: APIDOC
CODE:
```
font-family: Control the font family of text.
font-size: Control the font size of text.
font-smoothing: Control font rendering (antialiasing).
font-style: Control the font style (e.g., italic, normal).
font-weight: Control the font weight (e.g., bold, normal).
font-stretch: Control the font stretch.
font-variant-numeric: Control numeric font features (e.g., tabular-nums).
letter-spacing: Control the space between characters.
line-clamp: Limit text to a specific number of lines.
line-height: Control the height of each line of text.
list-style-image: Set an image as the list item marker.
list-style-position: Control the position of the list item marker.
list-style-type: Set the type of list item marker.
text-align: Control the horizontal alignment of text.
color: Control the color of text.
text-decoration-line: Control the type of text decoration (e.g., underline, line-through).
text-decoration-color: Control the color of text decoration.
text-decoration-style: Control the style of text decoration (e.g., solid, wavy).
text-decoration-thickness: Control the thickness of text decoration.
text-underline-offset: Control the offset of the underline from the text.
text-transform: Control the capitalization of text (e.g., uppercase, lowercase).
text-overflow: Control how overflowing content is displayed.
text-wrap: Control how text wraps.
text-indent: Control the indentation of the first line of text.
vertical-align: Control the vertical alignment of inline elements.
white-space: Control how whitespace is handled within an element.
word-break: Control how words break when they overflow their container.
overflow-wrap: Control whether the browser can break lines within words to prevent overflow.
hyphens: Control how words are hyphenated.
content: Insert generated content before or after an element.
```

----------------------------------------

TITLE: Tailwind CSS Grayscale Filter HTML Usage Example
DESCRIPTION: Demonstrates how to apply various Tailwind CSS grayscale utility classes directly to image elements in HTML. This example shows how to achieve different levels of grayscale effect using `grayscale-0`, `grayscale-25`, `grayscale-50`, and `grayscale` classes.
SOURCE: https://tailwindcss.com/docs/filter-grayscale

LANGUAGE: HTML
CODE:
```
<img class=""grayscale-0 ..."" src=""/img/mountains.jpg"" /><img class=""grayscale-25 ..."" src=""/img/mountains.jpg"" /><img class=""grayscale-50 ..."" src=""/img/mountains.jpg"" /><img class=""grayscale ..."" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: Tailwind CSS Border Inline End Color Utilities Reference
DESCRIPTION: A comprehensive reference of Tailwind CSS utility classes used to apply `border-inline-end-color` with various predefined color palettes and shades. Each entry shows the utility class and its generated CSS output.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Border Inline End Color Utilities:

Utility Class: `border-e-cyan-800`
  CSS Output: `border-inline-end-color: var(--color-cyan-800); /* oklch(45% 0.085 224.283) */`
Utility Class: `border-e-cyan-900`
  CSS Output: `border-inline-end-color: var(--color-cyan-900); /* oklch(39.8% 0.07 227.392) */`
Utility Class: `border-e-cyan-950`
  CSS Output: `border-inline-end-color: var(--color-cyan-950); /* oklch(30.2% 0.056 229.695) */`
Utility Class: `border-e-sky-50`
  CSS Output: `border-inline-end-color: var(--color-sky-50); /* oklch(97.7% 0.013 236.62) */`
Utility Class: `border-e-sky-100`
  CSS Output: `border-inline-end-color: var(--color-sky-100); /* oklch(95.1% 0.026 236.824) */`
Utility Class: `border-e-sky-200`
  CSS Output: `border-inline-end-color: var(--color-sky-200); /* oklch(90.1% 0.058 230.902) */`
Utility Class: `border-e-sky-300`
  CSS Output: `border-inline-end-color: var(--color-sky-300); /* oklch(82.8% 0.111 230.318) */`
Utility Class: `border-e-sky-400`
  CSS Output: `border-inline-end-color: var(--color-sky-400); /* oklch(74.6% 0.16 232.661) */`
Utility Class: `border-e-sky-500`
  CSS Output: `border-inline-end-color: var(--color-sky-500); /* oklch(68.5% 0.169 237.323) */`
Utility Class: `border-e-sky-600`
  CSS Output: `border-inline-end-color: var(--color-sky-600); /* oklch(58.8% 0.158 241.966) */`
Utility Class: `border-e-sky-700`
  CSS Output: `border-inline-end-color: var(--color-sky-700); /* oklch(50% 0.134 242.749) */`
Utility Class: `border-e-sky-800`
  CSS Output: `border-inline-end-color: var(--color-sky-800); /* oklch(44.3% 0.11 240.79) */`
Utility Class: `border-e-sky-900`
  CSS Output: `border-inline-end-color: var(--color-sky-900); /* oklch(39.1% 0.09 240.876) */`
Utility Class: `border-e-sky-950`
  CSS Output: `border-inline-end-color: var(--color-sky-950); /* oklch(29.3% 0.066 243.157) */`
Utility Class: `border-e-blue-50`
  CSS Output: `border-inline-end-color: var(--color-blue-50); /* oklch(97% 0.014 254.604) */`
Utility Class: `border-e-blue-100`
  CSS Output: `border-inline-end-color: var(--color-blue-100); /* oklch(93.2% 0.032 255.585) */`
Utility Class: `border-e-blue-200`
  CSS Output: `border-inline-end-color: var(--color-blue-200); /* oklch(88.2% 0.059 254.128) */`
Utility Class: `border-e-blue-300`
  CSS Output: `border-inline-end-color: var(--color-blue-300); /* oklch(80.9% 0.105 251.813) */`
Utility Class: `border-e-blue-400`
  CSS Output: `border-inline-end-color: var(--color-blue-400); /* oklch(70.7% 0.165 254.624) */`
Utility Class: `border-e-blue-500`
  CSS Output: `border-inline-end-color: var(--color-blue-500); /* oklch(62.3% 0.214 259.815) */`
Utility Class: `border-e-blue-600`
  CSS Output: `border-inline-end-color: var(--color-blue-600); /* oklch(54.6% 0.245 262.881) */`
Utility Class: `border-e-blue-700`
  CSS Output: `border-inline-end-color: var(--color-blue-700); /* oklch(48.8% 0.243 264.376) */`
Utility Class: `border-e-blue-800`
  CSS Output: `border-inline-end-color: var(--color-blue-800); /* oklch(42.4% 0.199 265.638) */`
Utility Class: `border-e-blue-900`
  CSS Output: `border-inline-end-color: var(--color-blue-900); /* oklch(37.9% 0.146 265.522) */`
Utility Class: `border-e-blue-950`
  CSS Output: `border-inline-end-color: var(--color-blue-950); /* oklch(28.2% 0.091 267.935) */`
Utility Class: `border-e-indigo-50`
  CSS Output: `border-inline-end-color: var(--color-indigo-50); /* oklch(96.2% 0.018 272.314) */`
Utility Class: `border-e-indigo-100`
  CSS Output: `border-inline-end-color: var(--color-indigo-100); /* oklch(93% 0.034 272.788) */`
Utility Class: `border-e-indigo-200`
  CSS Output: `border-inline-end-color: var(--color-indigo-200); /* oklch(87% 0.065 274.039) */`
Utility Class: `border-e-indigo-300`
  CSS Output: `border-inline-end-color: var(--color-indigo-300); /* oklch(78.5% 0.115 274.713) */`
Utility Class: `border-e-indigo-400`
  CSS Output: `border-inline-end-color: var(--color-indigo-400); /* oklch(67.3% 0.182 276.935) */`
Utility Class: `border-e-indigo-500`
  CSS Output: `border-inline-end-color: var(--color-indigo-500); /* oklch(58.5% 0.233 277.117) */`
Utility Class: `border-e-indigo-600`
  CSS Output: `border-inline-end-color: var(--color-indigo-600); /* oklch(51.1% 0.262 276.966) */`
Utility Class: `border-e-indigo-700`
  CSS Output: `border-inline-end-color: var(--color-indigo-700); /* oklch(45.7% 0.24 277.023) */`
Utility Class: `border-e-indigo-800`
  CSS Output: `border-inline-end-color: var(--color-indigo-800); /* oklch(39.8% 0.195 277.366) */`
Utility Class: `border-e-indigo-900`
  CSS Output: `border-inline-end-color: var(--color-indigo-900); /* oklch(35.9% 0.144 278.697) */`
Utility Class: `border-e-indigo-950`
  CSS Output: `border-inline-end-color: var(--color-indigo-950); /* oklch(25.7% 0.09 281.288) */`
Utility Class: `border-e-violet-50`
  CSS Output: `border-inline-end-color: var(--color-violet-50); /* oklch(96.9% 0.016 293.756) */`
Utility Class: `border-e-violet-100`
  CSS Output: `border-inline-end-color: var(--color-violet-100); /* oklch(94.3% 0.029 294.588) */`
Utility Class: `border-e-violet-200`
  CSS Output: `border-inline-end-color: var(--color-violet-200); /* oklch(89.4% 0.057 293.283) */`
Utility Class: `border-e-violet-300`
  CSS Output: `border-inline-end-color: var(--color-violet-300); /* oklch(81.1% 0.111 293.571) */`
Utility Class: `border-e-violet-400`
  CSS Output: `border-inline-end-color: var(--color-violet-400); /* oklch(70.2% 0.183 293.541) */`
Utility Class: `border-e-violet-500`
  CSS Output: `border-inline-end-color: var(--color-violet-500); /* oklch(60.6% 0.25 292.717) */`
Utility Class: `border-e-violet-600`
  CSS Output: `border-inline-end-color: var(--color-violet-600); /* oklch(54.1% 0.281 293.009) */`
Utility Class: `border-e-violet-700`
  CSS Output: `border-inline-end-color: var(--color-violet-700); /* oklch(49.1% 0.27 292.581) */`
Utility Class: `border-e-violet-800`
  CSS Output: `border-inline-end-color: var(--color-violet-800); /* oklch(43.2% 0.232 292.759) */`
```

----------------------------------------

TITLE: Tailwind CSS mask-clip Utility Classes API
DESCRIPTION: Documents the Tailwind CSS utility classes for controlling the bounding box of an element's mask, mapping each class to its corresponding CSS `mask-clip` property value. This API reference details the available classes and their effects on the mask's clipping behavior.
SOURCE: https://tailwindcss.com/docs/mask-clip

LANGUAGE: APIDOC
CODE:
```
mask-clip: Utilities for controlling the bounding box of an element's mask.

Class | Styles
--- | ---
mask-clip-border | mask-clip: border-box;
mask-clip-padding | mask-clip: padding-box;
mask-clip-content | mask-clip: content-box;
mask-clip-fill | mask-clip: fill-box;
mask-clip-stroke | mask-clip: stroke-box;
mask-clip-view | mask-clip: view-box;
mask-no-clip | mask-clip: no-clip;
```

----------------------------------------

TITLE: Apply Responsive Background Images with Tailwind CSS
DESCRIPTION: This example illustrates how to make background image utilities responsive by prefixing them with breakpoint variants like `md:`. This ensures that the utility is only applied at the specified screen size and above, enabling adaptive designs.
SOURCE: https://tailwindcss.com/docs/background-image

LANGUAGE: html
CODE:
```
<div class=""from-purple-400 md:from-yellow-500 ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Reference
DESCRIPTION: This section lists various Tailwind CSS utility classes grouped by their functional categories, providing a quick reference to available styling options. Each utility corresponds to specific CSS properties.
SOURCE: https://tailwindcss.com/docs/caption-side

LANGUAGE: APIDOC
CODE:
```
### Effects
- box-shadow: Applies box shadow styles.
- text-shadow: Applies text shadow styles.
- opacity: Controls the opacity of an element.
- mix-blend-mode: Sets how an element's content should blend with its background.
- background-blend-mode: Sets how an element's background images should blend with each other and with the element's background color.
- mask-clip: Specifies the mask painting area.
- mask-composite: Defines how mask images are composited.
- mask-image: Sets the mask image.
- mask-mode: Specifies the mask mode.
- mask-origin: Specifies the mask positioning area.
- mask-position: Sets the initial position of a mask image.
- mask-repeat: Sets how mask images are repeated.
- mask-size: Specifies the size of the mask images.
- mask-type: Specifies whether a mask element is treated as a luminance mask or an alpha mask.

### Filters
- filter: Applies graphical effects like blur or color shifting.
  - blur: Applies a Gaussian blur.
  - brightness: Adjusts the brightness.
  - contrast: Adjusts the contrast.
  - drop-shadow: Applies a drop shadow.
  - grayscale: Converts to grayscale.
  - hue-rotate: Applies a hue rotation.
  - invert: Inverts colors.
  - saturate: Saturates colors.
  - sepia: Applies a sepia tone.
- backdrop-filter: Applies graphical effects to the area behind an element.
  - blur: Applies a Gaussian blur to the backdrop.
  - brightness: Adjusts the brightness of the backdrop.
  - contrast: Adjusts the contrast of the backdrop.
  - grayscale: Converts the backdrop to grayscale.
  - hue-rotate: Applies a hue rotation to the backdrop.
  - invert: Inverts colors of the backdrop.
  - opacity: Adjusts the opacity of the backdrop.
  - saturate: Saturates colors of the backdrop.
  - sepia: Applies a sepia tone to the backdrop.

### Tables
- border-collapse: Sets whether table borders are collapsed into a single border or separated.
- border-spacing: Sets the distance between the borders of adjacent cells.
- table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
- caption-side: Specifies the placement of a table caption.

### Transitions & Animation
- transition-property: Specifies the CSS properties to which a transition effect should be applied.
- transition-behavior: Defines whether a transition is interruptible.
- transition-duration: Sets the duration of a transition effect.
- transition-timing-function: Specifies the speed curve of a transition effect.
- transition-delay: Sets the delay before a transition effect starts.
- animation: A shorthand property for all animation properties.

### Transforms
- backface-visibility: Defines whether the back face of an element is visible when facing the user.
- perspective: Defines how far the object is from the user.
- perspective-origin: Defines the origin of the perspective.
- rotate: Applies a rotation transformation.
- scale: Applies a scaling transformation.
- skew: Applies a skew transformation.
- transform: Applies a 2D or 3D transformation to an element.
- transform-origin: Sets the origin for transformations.
- transform-style: Specifies how nested elements are rendered in 3D space.
- translate: Applies a translation transformation.

### Interactivity
- accent-color: Sets the accent color for user-interface controls.
- appearance: Controls the native appearance of UI widgets.
- caret-color: Sets the color of the caret (text input cursor).
- color-scheme: Sets the color scheme for an element.
- cursor: Sets the type of mouse cursor to display.
- field-sizing: Controls the sizing of form fields.
- pointer-events: Sets whether an element is the target of mouse events.
- resize: Sets whether an element is resizable by the user.
- scroll-behavior: Sets the behavior for a scrolling box when scrolling is triggered.
- scroll-margin: Sets the margin of the scroll snap area.
- scroll-padding: Sets the padding of the scroll snap area.
- scroll-snap-align: Specifies the snap position for a scroll container.
- scroll-snap-stop: Specifies whether a scroll container is allowed to 'pass over' snap positions.
- scroll-snap-type: Specifies how strictly snap points are enforced on the scroll container.
- touch-action: Sets how a touch-action property behaves.
- user-select: Controls whether the user can select text.
- will-change: Hints to browsers how an element is expected to change.

### SVG
- fill: Sets the color of the fill paint operation.
- stroke: Sets the color of the stroke paint operation.
- stroke-width: Sets the width of the stroke on the current object.

### Accessibility
- forced-color-adjust: Controls how user agents should adjust colors for forced colors modes.
```

----------------------------------------

TITLE: Tailwind CSS justify-self-center Example
DESCRIPTION: Shows the application of `justify-self-center` to align a grid item along the center of its inline axis.
SOURCE: https://tailwindcss.com/docs/justify-self

LANGUAGE: HTML
CODE:
```
<div class=""grid justify-items-stretch ..."">  <!-- ... -->  <div class=""justify-self-center ..."">02</div>  <!-- ... --></div>
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS min-height Utilities
DESCRIPTION: This HTML snippet demonstrates the application of various `min-h-*` utility classes from Tailwind CSS to div elements. It showcases how different minimum height values are applied, providing a visual representation of their effect.
SOURCE: https://tailwindcss.com/docs/min-height

LANGUAGE: HTML
CODE:
```
<div class=""h-20 ..."">  <div class=""min-h-80 ..."">min-h-80</div>  <div class=""min-h-64 ..."">min-h-64</div>  <div class=""min-h-48 ..."">min-h-48</div>  <div class=""min-h-40 ..."">min-h-40</div>  <div class=""min-h-32 ..."">min-h-32</div>  <div class=""min-h-24 ..."">min-h-24</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Spacing Utilities
DESCRIPTION: Details utility classes for controlling element spacing, specifically padding and margin.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Spacing:
  - padding
  - margin
```

----------------------------------------

TITLE: Import Tailwind CSS into Main Stylesheet
DESCRIPTION: This CSS `@import` rule includes the Tailwind CSS framework into your project's main stylesheet, making its utility classes available for use.
SOURCE: https://tailwindcss.com/docs/installation/using-postcss

LANGUAGE: css
CODE:
```
@import ""tailwindcss"";
```

----------------------------------------

TITLE: Tailwind CSS justify-self-auto Example
DESCRIPTION: Demonstrates the use of `justify-self-auto` utility to align a grid item based on the `justify-items` property of the grid container.
SOURCE: https://tailwindcss.com/docs/justify-self

LANGUAGE: HTML
CODE:
```
<div class=""grid justify-items-stretch ..."">  <!-- ... -->  <div class=""justify-self-auto ..."">02</div>  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Core Utility Classes Reference
DESCRIPTION: Comprehensive reference for various Tailwind CSS utility classes, categorized by their functional areas. Each entry lists the utility name and its corresponding documentation link, implying the CSS property it controls. This section covers effects, filters, table styling, transitions, transforms, interactivity, SVG, and accessibility.
SOURCE: https://tailwindcss.com/docs/font-stretch

LANGUAGE: APIDOC
CODE:
```
Effects:
  box-shadow: /docs/box-shadow
  text-shadow: /docs/text-shadow
  opacity: /docs/opacity
  mix-blend-mode: /docs/mix-blend-mode
  background-blend-mode: /docs/background-blend-mode
  mask-clip: /docs/mask-clip
  mask-composite: /docs/mask-composite
  mask-image: /docs/mask-image
  mask-mode: /docs/mask-mode
  mask-origin: /docs/mask-origin
  mask-position: /docs/mask-position
  mask-repeat: /docs/mask-repeat
  mask-size: /docs/mask-size
  mask-type: /docs/mask-type

Filters:
  filter: /docs/filter
    blur: /docs/filter-blur
    brightness: /docs/filter-brightness
    contrast: /docs/filter-contrast
    drop-shadow: /docs/filter-drop-shadow
    grayscale: /docs/filter-grayscale
    hue-rotate: /docs/filter-hue-rotate
    invert: /docs/filter-invert
    saturate: /docs/filter-saturate
    sepia: /docs/filter-sepia
  backdrop-filter: /docs/backdrop-filter
    blur: /docs/backdrop-filter-blur
    brightness: /docs/backdrop-filter-brightness
    contrast: /docs/backdrop-filter-contrast
    grayscale: /docs/backdrop-filter-grayscale
    hue-rotate: /docs/backdrop-filter-hue-rotate
    invert: /docs/backdrop-filter-invert
    opacity: /docs/backdrop-filter-opacity
    saturate: /docs/backdrop-filter-saturate
    sepia: /docs/backdrop-filter-sepia

Tables:
  border-collapse: /docs/border-collapse
  border-spacing: /docs/border-spacing
  table-layout: /docs/table-layout
  caption-side: /docs/caption-side

Transitions & Animation:
  transition-property: /docs/transition-property
  transition-behavior: /docs/transition-behavior
  transition-duration: /docs/transition-duration
  transition-timing-function: /docs/transition-timing-function
  transition-delay: /docs/transition-delay
  animation: /docs/animation

Transforms:
  backface-visibility: /docs/backface-visibility
  perspective: /docs/perspective
  perspective-origin: /docs/perspective-origin
  rotate: /docs/rotate
  scale: /docs/scale
  skew: /docs/skew
  transform: /docs/transform
  transform-origin: /docs/transform-origin
  transform-style: /docs/transform-style
  translate: /docs/translate

Interactivity:
  accent-color: /docs/accent-color
  appearance: /docs/appearance
  caret-color: /docs/caret-color
  color-scheme: /docs/color-scheme
  cursor: /docs/cursor
  field-sizing: /docs/field-sizing
  pointer-events: /docs/pointer-events
  resize: /docs/resize
  scroll-behavior: /docs/scroll-behavior
  scroll-margin: /docs/scroll-margin
  scroll-padding: /docs/scroll-padding
  scroll-snap-align: /docs/scroll-snap-align
  scroll-snap-stop: /docs/scroll-snap-stop
  scroll-snap-type: /docs/scroll-snap-type
  touch-action: /docs/touch-action
  user-select: /docs/user-select
  will-change: /docs/will-change

SVG:
  fill: /docs/fill
  stroke: /docs/stroke
  stroke-width: /docs/stroke-width

Accessibility:
  forced-color-adjust: /docs/forced-color-adjust
```

----------------------------------------

TITLE: Apply Tabular Figures with Tailwind CSS
DESCRIPTION: Demonstrates how to use the `tabular-nums` utility class in Tailwind CSS to render numeric glyphs with uniform widths, suitable for aligning columns of numbers in a tabular layout.
SOURCE: https://tailwindcss.com/docs/font-variant-numeric

LANGUAGE: html
CODE:
```
<p class=""tabular-nums ..."">12121</p><p class=""tabular-nums ..."">90909</p>
```

----------------------------------------

TITLE: Tailwind CSS Float Utilities
DESCRIPTION: Documentation for Tailwind CSS `float` utilities, which control the wrapping of content around an element. Includes classes for floating elements to the right, left, start, end, or disabling float.
SOURCE: https://tailwindcss.com/docs/float

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Float Utilities:
- Class: float-right
  Styles: float: right;
  Description: Floats an element to the right.
- Class: float-left
  Styles: float: left;
  Description: Floats an element to the left.
- Class: float-start
  Styles: float: inline-start;
  Description: Floats an element to the start of the inline direction.
- Class: float-end
  Styles: float: inline-end;
  Description: Floats an element to the end of the inline direction.
- Class: float-none
  Styles: float: none;
  Description: Disables floating for an element.
```

----------------------------------------

TITLE: Customize Tailwind CSS Theme Colors
DESCRIPTION: Demonstrates how to extend the Tailwind CSS theme with custom color variables, making them available as utility classes.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: CSS
CODE:
```
@theme {  --color-regal-blue: #243c5a; }
```

LANGUAGE: HTML
CODE:
```
<div class=""border-regal-blue"">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Spacing Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that control the spacing of elements, specifically padding and margin. These utilities provide fine-grained control over the space around and inside elements.
SOURCE: https://tailwindcss.com/docs/text-decoration-thickness

LANGUAGE: APIDOC
CODE:
```
Spacing Utilities:
  padding: Sets the padding area on all four sides of an element.
  margin: Sets the margin area on all four sides of an element.
```

----------------------------------------

TITLE: Apply Border Colors on Focus State in Tailwind CSS
DESCRIPTION: Illustrates how to apply a border color utility only when an element is in its focus state by prefixing with `focus:`.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<input class=""border-2 border-gray-700 focus:border-pink-600 ..."" />
```

----------------------------------------

TITLE: Tailwind CSS backdrop-filter: contrast() Utilities API
DESCRIPTION: Documents the utility classes provided by Tailwind CSS for applying contrast filters to an element's backdrop. This includes predefined numeric values, arbitrary custom values, and integration with CSS variables.
SOURCE: https://tailwindcss.com/docs/backdrop-filter-contrast

LANGUAGE: APIDOC
CODE:
```
backdrop-filter: contrast()

Utility Classes:
- `backdrop-contrast-<number>`: `backdrop-filter: contrast(<number>%);`
- `backdrop-contrast-(<custom-property>)`: `backdrop-filter: contrast(var(<custom-property>));`
- `backdrop-contrast-[<value>]`: `backdrop-filter: contrast(<value>);`

Usage Notes:
- `<number>`: A numeric value (e.g., 50, 100, 200) representing the contrast percentage.
- `<custom-property>`: A CSS custom property name (e.g., `--my-backdrop-contrast`). The utility automatically wraps it in `var()`.
- `<value>`: An arbitrary CSS value for the contrast function (e.g., `.25`, `1.5`, `var(--my-contrast-value)`).
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: This section provides an overview of Tailwind CSS utilities for styling text and fonts. It covers properties like font family, size, weight, style, letter spacing, line height, text alignment, color, decoration, overflow, and white space.
SOURCE: https://tailwindcss.com/docs/object-fit

LANGUAGE: APIDOC
CODE:
```
### Typography Utilities
- font-family
- font-size
- font-smoothing
- font-style
- font-weight
- font-stretch
- font-variant-numeric
- letter-spacing
- line-clamp
- line-height
- list-style-image
- list-style-position
- list-style-type
- text-align
- color
- text-decoration-line
- text-decoration-color
- text-decoration-style
- text-decoration-thickness
- text-underline-offset
- text-transform
- text-overflow
- text-wrap
- text-indent
- vertical-align
- white-space
- word-break
- overflow-wrap
- hyphens
- content
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Initiates the development server for the SolidJS project. This command compiles the application and serves it, allowing developers to see changes in real-time.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/solidjs

LANGUAGE: Bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Tailwind CSS SVG Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities specifically designed for styling SVG elements, controlling fill, stroke, and stroke width properties.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: APIDOC
CODE:
```
fill: Utilities for controlling the fill color of SVG elements.
stroke: Utilities for controlling the stroke color of SVG elements.
stroke-width: Utilities for controlling the stroke width of SVG elements.
```

----------------------------------------

TITLE: HTML Example for Tailwind CSS `backface-visibility`
DESCRIPTION: Demonstrates the usage of `backface-hidden` and `backface-visible` utility classes in an HTML structure, typically for 3D transformations like rotating a cube, showing how the backface visibility affects rendering.
SOURCE: https://tailwindcss.com/docs/backface-visibility

LANGUAGE: HTML
CODE:
```
<div class=""size-20 ..."">  <div class=""translate-z-12 rotate-x-0 bg-sky-300/75 backface-hidden ..."">1</div>  <div class=""-translate-z-12 rotate-y-18 bg-sky-300/75 backface-hidden ..."">2</div>  <div class=""translate-x-12 rotate-y-90 bg-sky-300/75 backface-hidden ..."">3</div>  <div class=""-translate-x-12 -rotate-y-90 bg-sky-300/75 backface-hidden ..."">4</div>  <div class=""-translate-y-12 rotate-x-90 bg-sky-300/75 backface-hidden ..."">5</div>  <div class=""translate-y-12 -rotate-x-90 bg-sky-300/75 backface-hidden ..."">6</div></div><div class=""size-20 ..."">  <div class=""translate-z-12 rotate-x-0 bg-sky-300/75 backface-visible ..."">1</div>  <div class=""-translate-z-12 rotate-y-18 bg-sky-300/75 backface-visible ..."">2</div>  <div class=""translate-x-12 rotate-y-90 bg-sky-300/75 backface-visible ..."">3</div>  <div class=""-translate-x-12 -rotate-y-90 bg-sky-300/75 backface-visible ..."">4</div>  <div class=""-translate-y-12 rotate-x-90 bg-sky-300/75 backface-visible ..."">5</div>  <div class=""translate-y-12 -rotate-x-90 bg-sky-300/75 backface-visible ..."">6</div></div>
```

----------------------------------------

TITLE: Apply Horizontal and Vertical Border Colors in Tailwind CSS
DESCRIPTION: Demonstrates how to set border colors simultaneously on horizontal (`border-x-*`) or vertical (`border-y-*`) sides of an element.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div class=""border-4 border-indigo-200 border-x-indigo-500 ...""></div><div class=""border-4 border-indigo-200 border-y-indigo-500 ...""></div>
```

----------------------------------------

TITLE: React Component with Dynamic Inline Styles
DESCRIPTION: Illustrates a React/JSX component (`BrandedButton`) that uses inline `style` attributes to apply dynamic `backgroundColor` and `color` based on props. This pattern is particularly useful when style values originate from a database or API.
SOURCE: https://tailwindcss.com/docs/styling-with-utility-classes

LANGUAGE: JSX
CODE:
```
export function BrandedButton({ buttonColor, textColor, children }) {  return (    <button      style={{        backgroundColor: buttonColor,        color: textColor,      }}      className=""rounded-md px-3 py-1.5 font-medium""    >      {children}    </button>  );}
```

----------------------------------------

TITLE: CSS Interactivity Properties
DESCRIPTION: Documentation for CSS properties that control user interaction aspects, including cursor appearance, scroll behavior, selection, and form element styling.
SOURCE: https://tailwindcss.com/docs/margin

LANGUAGE: APIDOC
CODE:
```
accent-color: Sets the accent color for user-interface controls generated by the element.
appearance: Allows an element to be rendered using platform-native styling.
caret-color: Sets the color of the text insertion caret.
color-scheme: Specifies the color scheme an element is comfortable with.
cursor: Specifies the type of cursor to be displayed when the mouse pointer is over an element.
field-sizing: Controls the sizing of form fields.
pointer-events: Sets under what circumstances (if any) a graphic element can be the target of mouse events.
resize: Specifies whether an element is resizable by the user.
scroll-behavior: Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSS scroll-snap positioning.
scroll-margin: Defines the margin of the scroll snap area around the box.
scroll-padding: Defines the padding of the scroll snap area around the box.
scroll-snap-align: Specifies the snap position for a scroll container.
scroll-snap-stop: Specifies whether a scroll container is allowed to 'pass over' possible snap positions.
scroll-snap-type: Specifies how strictly snap points are enforced on the scroll container.
touch-action: Determines how a touch-action property can be handled.
user-select: Controls whether the user can select text.
will-change: Hints to browsers how an element is expected to change.
```

----------------------------------------

TITLE: Import Tailwind CSS into Main CSS File
DESCRIPTION: Creates a `main.css` file (e.g., `./assets/css/main.css`) and adds an `@import` rule to include the core Tailwind CSS styles, making them available for use in the project.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nuxt

LANGUAGE: CSS
CODE:
```
@import ""tailwindcss"";
```

----------------------------------------

TITLE: HTML Example: text-underline-offset with CSS Variable
DESCRIPTION: Shows how to use a CSS custom property with the `underline-offset` utility class in HTML, leveraging Tailwind's shorthand syntax that automatically wraps the custom property in `var()`.
SOURCE: https://tailwindcss.com/docs/text-underline-offset

LANGUAGE: HTML
CODE:
```
<p class=""underline-offset-(--my-underline-offset) ..."">  Lorem ipsum dolor sit amet...</p>
```

----------------------------------------

TITLE: Tailwind CSS Background Utilities
DESCRIPTION: Provides utility classes for styling element backgrounds, including attachment, clip, color, image, origin, position, repeat, and size properties.
SOURCE: https://tailwindcss.com/docs/list-style-type

LANGUAGE: APIDOC
CODE:
```
### Background Utilities
- background-attachment: Specifies whether a background image scrolls with the rest of the page, or is fixed.
- background-clip: Specifies the painting area of the background.
- background-color: Sets the background color of an element.
- background-image: Sets one or more background images for an element.
- background-origin: Specifies the positioning area of the background images.
- background-position: Specifies the initial position of a background image.
- background-repeat: Specifies if/how a background image will be repeated.
- background-size: Specifies the size of the background images.
```

----------------------------------------

TITLE: Tailwind CSS justify-items-end Example
DESCRIPTION: Illustrates the `justify-items-end` utility class for aligning grid items to the end of their inline axis within a grid container.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: html
CODE:
```
<div class=""grid grid-flow-col justify-items-end ..."">
  <div>01</div>
  <div>02</div>
  <div>03</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Backdrop Invert Filter Utilities API
DESCRIPTION: Documents the Tailwind CSS utility classes for applying backdrop invert filters, detailing the class names and their corresponding CSS styles. This includes fixed inversion, numerical inversion, custom property usage, and arbitrary value support.
SOURCE: https://tailwindcss.com/docs/backdrop-filter-invert

LANGUAGE: APIDOC
CODE:
```
Class | Styles
--- | ---
`backdrop-invert` | `backdrop-filter: invert(100%);`
`backdrop-invert-<number>` | `backdrop-filter: invert(<number>%);`
`backdrop-invert-(<custom-property>)` | `backdrop-filter: invert(var(<custom-property>))`
`backdrop-invert-[<value>]` | `backdrop-filter: invert(<value>);`
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: This section provides a comprehensive set of Tailwind CSS utilities for styling text and fonts. It includes controls for font family, size, weight, style, line height, text alignment, decoration, transformation, and overflow, among others.
SOURCE: https://tailwindcss.com/docs/place-content

LANGUAGE: APIDOC
CODE:
```
Typography Utilities:
  - font-family: Sets the font family for text.
  - font-size: Sets the size of the font.
  - font-smoothing: Controls font rendering for anti-aliasing.
  - font-style: Sets the font style (e.g., italic, normal).
  - font-weight: Sets the weight (or boldness) of the font.
  - font-stretch: Controls the degree to which a font is condensed or expanded.
  - font-variant-numeric: Controls the usage of alternate glyphs for numbers, fractions, and ordinal markers.
  - letter-spacing: Sets the spacing behavior between text characters.
  - line-clamp: Clamps text to a specified number of lines.
  - line-height: Sets the height of a line of text.
  - list-style-image: Sets the image that will be used as the list item marker.
  - list-style-position: Specifies the position of the list-item marker.
  - list-style-type: Specifies the type of list-item marker.
  - text-align: Specifies the horizontal alignment of text.
  - color: Sets the foreground color of an element's text content.
  - text-decoration-line: Specifies the type of line placed on or through text.
  - text-decoration-color: Sets the color of the text-decoration line.
  - text-decoration-style: Sets the style of the text-decoration line.
  - text-decoration-thickness: Sets the thickness of the text-decoration line.
  - text-underline-offset: Sets the distance of the underline from the text.
  - text-transform: Controls the capitalization of text.
  - text-overflow: Specifies how overflowed content that is not displayed should be signaled to the user.
  - text-wrap: Controls how text is wrapped within its containing element.
  - text-indent: Specifies the indentation of the first line of text in a block.
  - vertical-align: Sets the vertical alignment of an inline or table-cell box.
  - white-space: Specifies how white space inside an element is handled.
  - word-break: Specifies how words should break when reaching the end of a line.
  - overflow-wrap: Specifies whether or not the browser should insert line breaks within words to prevent content from overflowing.
  - hyphens: Controls how words are hyphenated when text wraps.
  - content: Used with pseudo-elements (::before, ::after) to insert content.
```

----------------------------------------

TITLE: Add Dividers Between Child Elements in Tailwind CSS
DESCRIPTION: Shows how to use `divide-x-*` or `divide-y-*` utilities to apply a border color between child elements within a container.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-cols-3 divide-x-4 divide-indigo-500"">  <div>01</div>  <div>02</div>  <div>03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Spacing and Sizing Utilities
DESCRIPTION: Provides utility classes for controlling the spacing (padding and margin) and dimensions (width, height, min/max width/height) of elements.
SOURCE: https://tailwindcss.com/docs/list-style-type

LANGUAGE: APIDOC
CODE:
```
### Spacing Utilities
- padding: Sets the padding area on all four sides of an element.
- margin: Sets the margin area on all four sides of an element.

### Sizing Utilities
- width: Sets the width of an element.
- min-width: Sets the minimum width of an element.
- max-width: Sets the maximum width of an element.
- height: Sets the height of an element.
- min-height: Sets the minimum height of an element.
- max-height: Sets the maximum height of an element.
```

----------------------------------------

TITLE: Apply Basic Border Colors in Tailwind CSS
DESCRIPTION: Demonstrates how to apply basic border colors to elements using Tailwind CSS utility classes like `border-indigo-500`.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div class=""border-4 border-indigo-500 ...""></div><div class=""border-4 border-purple-500 ...""></div><div class=""border-4 border-sky-500 ...""></div>
```

----------------------------------------

TITLE: Tailwind CSS Table Layout Utilities
DESCRIPTION: This section provides Tailwind CSS utility classes for controlling the layout and appearance of HTML tables, including border collapsing, spacing, table layout algorithms, and caption positioning.
SOURCE: https://tailwindcss.com/docs/installation/tailwind-cli

LANGUAGE: APIDOC
CODE:
```
border-collapse: Utilities for controlling whether table borders are collapsed into a single border or separated.
border-spacing: Utilities for controlling the distance between the borders of adjacent cells.
table-layout: Utilities for controlling the algorithm used to lay out table cells, rows, and columns.
caption-side: Utilities for controlling the placement of a table's caption.
```

----------------------------------------

TITLE: Tailwind CSS Sizing Utilities
DESCRIPTION: Provides utility classes for managing the dimensions of elements, including width, min-width, max-width, height, min-height, and max-height.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Sizing:
  - width
  - min-width
  - max-width
  - height
  - min-height
  - max-height
```

----------------------------------------

TITLE: Tailwind CSS Sizing Utilities
DESCRIPTION: Offers utility classes for setting the width and height of elements, including minimum and maximum constraints.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: APIDOC
CODE:
```
width: /docs/width
min-width: /docs/min-width
max-width: /docs/max-width
height: /docs/height
min-height: /docs/min-height
max-height: /docs/max-height
```

----------------------------------------

TITLE: Configure PostCSS Plugin for Tailwind CSS
DESCRIPTION: This JavaScript configuration snippet for `postcss.config.mjs` adds the `@tailwindcss/postcss` plugin, enabling PostCSS to process Tailwind CSS directives.
SOURCE: https://tailwindcss.com/docs/installation/using-postcss

LANGUAGE: javascript
CODE:
```
export default {
  plugins: {
    ""@tailwindcss/postcss"": {},
  }
}
```

----------------------------------------

TITLE: Tailwind CSS Flexbox & Grid Utilities
DESCRIPTION: This section covers Tailwind CSS utility classes for building flexible and grid-based layouts. These utilities provide fine-grained control over flex container and item properties, as well as grid container and item properties.
SOURCE: https://tailwindcss.com/docs/gap

LANGUAGE: APIDOC
CODE:
```
flex-basis: Set the initial size of a flex item.
flex-direction: Establish the main-axis, defining the direction flex items are placed.
flex-wrap: Control whether flex items are forced onto one line or can wrap onto multiple lines.
flex: Control how a flex item will grow or shrink to fit the space available.
flex-grow: Control how a flex item grows.
flex-shrink: Control how a flex item shrinks.
order: Control the order of flex and grid items.
grid-template-columns: Define the columns of a grid.
grid-column: Control the size and placement of a grid item within the columns.
grid-template-rows: Define the rows of a grid.
grid-row: Control the size and placement of a grid item within the rows.
grid-auto-flow: Control how auto-placed grid items are inserted in the grid.
grid-auto-columns: Specify the size of implicitly created grid columns.
grid-auto-rows: Specify the size of implicitly created grid rows.
gap: Control the space between grid and flex items.
justify-content: Align flex items along the main axis.
justify-items: Align grid items along the inline (row) axis.
justify-self: Align a single grid item along the inline (row) axis.
align-content: Align flex lines along the cross axis.
align-items: Align flex items along the cross axis.
align-self: Align a single flex item along the cross axis.
place-content: Shorthand for align-content and justify-content.
place-items: Shorthand for align-items and justify-items.
place-self: Shorthand for align-self and justify-self.
```

----------------------------------------

TITLE: Tailwind CSS Effects Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities related to visual effects like shadows, opacity, and blend modes. These utilities map directly to standard CSS properties.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: APIDOC
CODE:
```
box-shadow: Utilities for controlling box shadows.
text-shadow: Utilities for controlling text shadows.
opacity: Utilities for controlling the opacity of an element.
mix-blend-mode: Utilities for controlling how an element's content should blend with its background.
background-blend-mode: Utilities for controlling how an element's background should blend with its background image.
mask-clip: Utilities for controlling the mask-clip CSS property.
mask-composite: Utilities for controlling the mask-composite CSS property.
mask-image: Utilities for controlling the mask-image CSS property.
mask-mode: Utilities for controlling the mask-mode CSS property.
mask-origin: Utilities for controlling the mask-origin CSS property.
mask-position: Utilities for controlling the mask-position CSS property.
mask-repeat: Utilities for controlling the mask-repeat CSS property.
mask-size: Utilities for controlling the mask-size CSS property.
mask-type: Utilities for controlling the mask-type CSS property.
```

----------------------------------------

TITLE: Control Border Color Opacity in Tailwind CSS
DESCRIPTION: Illustrates how to adjust the opacity of an element's border color using Tailwind's color opacity modifiers, such as `border-indigo-500/75`.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div class=""border-4 border-indigo-500/100 ...""></div><div class=""border-4 border-indigo-500/75 ...""></div><div class=""border-4 border-indigo-500/50 ...""></div>
```

----------------------------------------

TITLE: Apply Responsive Border Colors in Tailwind CSS
DESCRIPTION: Shows how to apply border color utilities conditionally based on screen size using responsive prefixes like `md:`.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div class=""border-blue-500 md:border-green-500 ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Create a new Qwik project
DESCRIPTION: Initializes a new Qwik application using the `create qwik` CLI command, setting up an empty project structure and navigating into the new project directory.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/qwik

LANGUAGE: bash
CODE:
```
npm create qwik@latest empty my-project
cd my-project
```

----------------------------------------

TITLE: HTML Example: Textarea with Content-Based Sizing
DESCRIPTION: Demonstrates how to use the `field-sizing-content` utility class on a `textarea` element. This allows the textarea to automatically adjust its width based on the length of its content, providing a dynamic user experience.
SOURCE: https://tailwindcss.com/docs/field-sizing

LANGUAGE: HTML
CODE:
```
<textarea class=""field-sizing-content ..."" rows=""2"">  Latex Salesman, Vanderlay Industries</textarea>
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-100 Utility Class
DESCRIPTION: Applies the sky-100 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-100 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-100
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-100); /* oklch(95.1% 0.026 236.824) */
```

----------------------------------------

TITLE: Applying Tailwind Utility Classes for Background Color
DESCRIPTION: An HTML example demonstrating the use of Tailwind utility classes to set background color and hover effects on a button. This approach promotes using Tailwind's predefined color palette and utility-first methodology over traditional preprocessor color functions.
SOURCE: https://tailwindcss.com/docs/compatibility

LANGUAGE: HTML
CODE:
```
<button class=""bg-indigo-500 hover:bg-indigo-600 ..."">  <!-- ... --></button>
```

----------------------------------------

TITLE: Tailwind CSS border-r-emerald-950 Utility Class
DESCRIPTION: Applies the emerald-950 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding emerald-950 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-emerald-950
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-emerald-950); /* oklch(26.2% 0.051 172.552) */
```

----------------------------------------

TITLE: Apply Responsive Tailwind CSS background-origin
DESCRIPTION: Illustrates how to use responsive design with Tailwind CSS `background-origin` utilities by applying different origin styles based on screen size using breakpoint variants like `md:`.
SOURCE: https://tailwindcss.com/docs/background-origin

LANGUAGE: html
CODE:
```
<div class=""bg-origin-border md:bg-origin-padding ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-800 Utility Class
DESCRIPTION: Applies the sky-800 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-800 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-800
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-800); /* oklch(44.3% 0.11 240.79) */
```

----------------------------------------

TITLE: HTML Example: Using Custom Grid Column Values with Tailwind CSS
DESCRIPTION: Shows how to define custom grid column values using arbitrary value syntax `grid-cols-[<value>]` in HTML. This allows for flexible grid layouts not covered by predefined utilities.
SOURCE: https://tailwindcss.com/docs/grid-template-columns

LANGUAGE: HTML
CODE:
```
<div class=""grid-cols-[200px_minmax(900px,_1fr)_100px] ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Core Properties Reference
DESCRIPTION: This section provides a comprehensive reference for various Tailwind CSS utility classes and their corresponding CSS properties, categorized by functionality. It details properties related to visual effects, image filters, table styling, animation and transitions, 2D/3D transformations, user interactivity, SVG elements, and accessibility features.
SOURCE: https://tailwindcss.com/docs/installation/using-vite

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow: Controls the shadow effect around an element's frame.
  - text-shadow: Controls the shadow effect around text.
  - opacity: Sets the transparency level of an element.
  - mix-blend-mode: Describes how an element's content should blend with its background.
  - background-blend-mode: Describes how an element's background images should blend with each other and with the element's background color.
  - mask-clip: Specifies the area which is affected by the mask.
  - mask-composite: Represents the compositing operation used on the current mask layer with the mask layers below it.
  - mask-image: Sets the image that is used as a mask layer for an element.
  - mask-mode: Specifies whether the mask image is treated as a luminance mask or an alpha mask.
  - mask-origin: Specifies the origin of the mask image.
  - mask-position: Sets the initial position for each background image.
  - mask-repeat: Sets how mask images are repeated.
  - mask-size: Specifies the size of the mask images.
  - mask-type: Specifies whether a mask element is treated as a luminance mask or an alpha mask.

Filters:
  - filter: Applies graphical effects like blur, brightness, contrast, drop-shadow, grayscale, hue-rotate, invert, saturate, and sepia to an element.
    - blur: Applies a Gaussian blur to the input image.
    - brightness: Applies a linear multiplier to the input image, making it brighter or darker.
    - contrast: Adjusts the contrast of the input image.
    - drop-shadow: Applies a drop shadow to the input image.
    - grayscale: Converts the input image to grayscale.
    - hue-rotate: Applies a hue rotation to the input image.
    - invert: Inverts the colors of the input image.
    - saturate: Saturates or desaturates the input image.
    - sepia: Converts the input image to sepia.
  - backdrop-filter: Applies graphical effects to the area behind an element.
    - blur: Applies a Gaussian blur to the backdrop.
    - brightness: Adjusts the brightness of the backdrop.
    - contrast: Adjusts the contrast of the backdrop.
    - grayscale: Converts the backdrop to grayscale.
    - hue-rotate: Applies a hue rotation to the backdrop.
    - invert: Inverts the colors of the backdrop.
    - opacity: Sets the transparency level of the backdrop.
    - saturate: Saturates or desaturates the backdrop.
    - sepia: Converts the backdrop to sepia.

Tables:
  - border-collapse: Sets whether table borders are collapsed into a single border or separated.
  - border-spacing: Sets the distance between the borders of adjacent cells.
  - table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
  - caption-side: Specifies the placement of a table caption.

Transitions & Animation:
  - transition-property: Specifies the CSS properties to which a transition effect should be applied.
  - transition-behavior: Defines whether a transition should be skipped when the element is first rendered.
  - transition-duration: Specifies how many seconds or milliseconds a transition effect takes to complete.
  - transition-timing-function: Specifies the speed curve of the transition effect.
  - transition-delay: Specifies when the transition effect will start.
  - animation: A shorthand property for all the animation properties.

Transforms:
  - backface-visibility: Defines whether or not the back face of an element is visible when facing the user.
  - perspective: Specifies the distance between the user and the z=0 plane, to give a 3D-positioned element some perspective.
  - perspective-origin: Sets the origin for the perspective property.
  - rotate: Rotates an element around a fixed point.
  - scale: Scales an element up or down.
  - skew: Skews an element along the X and Y axes.
  - transform: Applies a 2D or 3D transformation to an element.
  - transform-origin: Sets the origin for transformations of an element.
  - transform-style: Specifies how nested elements are rendered in 3D space.
  - translate: Moves an element from its current position.

Interactivity:
  - accent-color: Sets the accent color for user-interface controls generated by the element.
  - appearance: Controls the native appearance of UI widgets.
  - caret-color: Sets the color of the caret (text input cursor).
  - color-scheme: Allows an element to indicate which color schemes it is comfortable with.
  - cursor: Specifies the type of cursor to be displayed when pointing over an element.
  - field-sizing: Controls the sizing of form fields.
  - pointer-events: Sets under what circumstances (if any) a graphic element can be the target of pointer events.
  - resize: Specifies whether an element is resizable by the user.
  - scroll-behavior: Specifies the scrolling behavior for a scrolling box, when scrolling happens due to navigation or CSS scroll-snap positioning.
  - scroll-margin: Sets the margin of the scroll snap area around the box.
  - scroll-padding: Sets the padding of the scroll snap area around the box.
  - scroll-snap-align: Specifies the snap position for an element within its scroll container.
  - scroll-snap-stop: Specifies whether the scroll container must snap to a snap point or can pass over it.
  - scroll-snap-type: Specifies how strictly snap points are enforced on the scroll container.
  - touch-action: Determines how a touch event (or series of events) can be handled by the browser.
  - user-select: Controls whether the user can select text.
  - will-change: Hints to browsers how an element is expected to change.

SVG:
  - fill: Sets the color of the interior of an SVG shape.
  - stroke: Sets the color of the outline of an SVG shape.
  - stroke-width: Sets the width of the outline of an SVG shape.

Accessibility:
  - forced-color-adjust: Controls whether the user agent can make adjustments to colors to improve readability in forced color modes.
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-300 Utility Class
DESCRIPTION: Applies the teal-300 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-300 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-300
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-300); /* oklch(85.5% 0.138 181.071) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-700 Utility Class
DESCRIPTION: Applies the teal-700 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-700 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-700
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-700); /* oklch(51.1% 0.096 186.391) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-emerald-900 Utility Class
DESCRIPTION: Applies the emerald-900 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding emerald-900 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-emerald-900
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-emerald-900); /* oklch(37.8% 0.077 168.94) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-950 Utility Class
DESCRIPTION: Applies the teal-950 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-950 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-950
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-950); /* oklch(27.7% 0.046 192.524) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-500 Utility Class
DESCRIPTION: Applies the teal-500 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-500 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-500
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-500); /* oklch(70.4% 0.14 182.503) */
```

----------------------------------------

TITLE: Tailwind CSS Table Styling Properties
DESCRIPTION: Documentation for Tailwind CSS utilities used to style HTML tables, controlling aspects like border collapsing, spacing, layout, and caption positioning.
SOURCE: https://tailwindcss.com/docs/width

LANGUAGE: APIDOC
CODE:
```
border-collapse: Sets whether table borders are collapsed into a single border or separated.
border-spacing: Sets the distance between the borders of adjacent cells.
table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
caption-side: Specifies the placement of a table caption.
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-600 Utility Class
DESCRIPTION: Applies the sky-600 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-600 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-600
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-600); /* oklch(58.8% 0.158 241.966) */
```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: This command initiates the development server for your Vite project. It typically watches for file changes, recompiles assets, and serves your application locally, allowing for live development and testing.
SOURCE: https://tailwindcss.com/docs/index

LANGUAGE: Terminal
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Tailwind CSS Transition and Animation Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for controlling CSS transitions and animations, including properties, duration, timing functions, delays, and general animation definitions.
SOURCE: https://tailwindcss.com/docs/filter-drop-shadow

LANGUAGE: APIDOC
CODE:
```
transition-property: Specifies the CSS properties to which a transition effect should be applied.
transition-behavior: Defines whether a transition is applied to discrete properties.
transition-duration: Sets the duration of a transition effect.
transition-timing-function: Specifies the speed curve of a transition effect.
transition-delay: Specifies when the transition effect will start.
animation: A shorthand property for all animation properties.
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-200 Utility Class
DESCRIPTION: Applies the teal-200 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-200 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-200
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-200); /* oklch(91% 0.096 180.426) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-50 Utility Class
DESCRIPTION: Applies the cyan-50 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-50 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-50
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-50); /* oklch(98.4% 0.019 200.873) */
```

----------------------------------------

TITLE: Install Tailwind CSS and CLI via npm
DESCRIPTION: This command installs the `tailwindcss` package and the `@tailwindcss/cli` tool using npm, which are essential for setting up and building Tailwind CSS projects.
SOURCE: https://tailwindcss.com/docs/installation/tailwind-cli

LANGUAGE: npm
CODE:
```
npm install tailwindcss @tailwindcss/cli
```

----------------------------------------

TITLE: Tailwind CSS Flexbox & Grid Utilities
DESCRIPTION: Provides utility classes for building flexible box and grid layouts, including properties for item sizing, alignment, and flow within containers.
SOURCE: https://tailwindcss.com/docs/grid-column

LANGUAGE: APIDOC
CODE:
```
flex-basis:
  - Utilities for controlling the initial size of a flex item.
flex-direction:
  - Utilities for controlling the direction of flex items.
flex-wrap:
  - Utilities for controlling whether flex items wrap or not.
flex:
  - Utilities for controlling how flex items grow and shrink.
flex-grow:
  - Utilities for controlling how flex items grow.
flex-shrink:
  - Utilities for controlling how flex items shrink.
order:
  - Utilities for controlling the visual order of flex and grid items.
grid-template-columns:
  - Utilities for defining the columns in a grid layout.
grid-column:
  - Utilities for controlling the size and placement of an item within a grid column.
grid-template-rows:
  - Utilities for defining the rows in a grid layout.
grid-row:
  - Utilities for controlling the size and placement of an item within a grid row.
grid-auto-flow:
  - Utilities for controlling how auto-placed grid items are flowed.
grid-auto-columns:
  - Utilities for controlling the size of implicitly created grid columns.
grid-auto-rows:
  - Utilities for controlling the size of implicitly created grid rows.
gap:
  - Utilities for controlling the space between grid and flex items.
justify-content:
  - Utilities for controlling how flex and grid items are aligned along the main axis.
justify-items:
  - Utilities for controlling how grid items are aligned along the inline axis.
justify-self:
  - Utilities for controlling how an individual grid item is aligned along its inline axis.
align-content:
  - Utilities for controlling how flex and grid lines are aligned along the cross axis.
align-items:
  - Utilities for controlling how flex and grid items are aligned along the cross axis.
align-self:
  - Utilities for controlling how an individual flex or grid item is aligned along its cross axis.
place-content:
  - Utilities for simultaneously controlling align-content and justify-content.
place-items:
  - Utilities for simultaneously controlling align-items and justify-items.
place-self:
  - Utilities for simultaneously controlling align-self and justify-self.
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-300 Utility Class
DESCRIPTION: Applies the sky-300 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-300 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-300
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-300); /* oklch(82.8% 0.111 230.318) */
```

----------------------------------------

TITLE: Install Tailwind CSS and Vite Plugin
DESCRIPTION: This command installs Tailwind CSS and its Vite plugin, along with their peer dependencies, into the current project using npm. These packages are essential for integrating Tailwind CSS with a Vite-based build process.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/vite

LANGUAGE: Shell
CODE:
```
npm install tailwindcss @tailwindcss/vite
```

----------------------------------------

TITLE: Tailwind CSS `font-style` Utility Class Reference
DESCRIPTION: Documents the `font-style` utility classes in Tailwind CSS, mapping `italic` and `not-italic` classes to their corresponding CSS properties. This reference helps in understanding the direct CSS equivalent of Tailwind's typography utilities.
SOURCE: https://tailwindcss.com/docs/font-style

LANGUAGE: APIDOC
CODE:
```
font-style:
  italic: font-style: italic;
  not-italic: font-style: normal;
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-200 Utility Class
DESCRIPTION: Applies the sky-200 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-200 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-200
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-200); /* oklch(90.1% 0.058 230.902) */
```

----------------------------------------

TITLE: Install Tailwind CSS PostCSS Dependencies
DESCRIPTION: This command installs the necessary npm packages for integrating Tailwind CSS as a PostCSS plugin, including `tailwindcss`, `@tailwindcss/postcss`, and `postcss` itself.
SOURCE: https://tailwindcss.com/docs/installation/using-postcss

LANGUAGE: bash
CODE:
```
npm install tailwindcss @tailwindcss/postcss postcss
```

----------------------------------------

TITLE: Apply Tailwind CSS Translate Utilities in HTML
DESCRIPTION: Demonstrates how to apply Tailwind CSS `translate` utility classes to HTML `<img>` elements to shift their position on the page. Examples include negative and positive translations using the spacing scale.
SOURCE: https://tailwindcss.com/docs/translate

LANGUAGE: HTML
CODE:
```
<img class=""-translate-6 ..."" src=""/img/mountains.jpg"" /><img class=""translate-2 ..."" src=""/img/mountains.jpg"" /><img class=""translate-8 ..."" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: Tailwind CSS Table, Transition, Transform, Interactivity, SVG, and Accessibility Utility Classes
DESCRIPTION: This section provides a reference for Tailwind CSS utility classes related to table styling, transitions, animations, 2D/3D transforms, user interactivity, SVG properties, and accessibility features.
SOURCE: https://tailwindcss.com/docs/place-content

LANGUAGE: APIDOC
CODE:
```
Tables:
- border-collapse: Sets whether table borders are collapsed into a single border or separated.
- border-spacing: Sets the distance between the borders of adjacent cells.
- table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
- caption-side: Specifies the placement of a table caption.

Transitions & Animation:
- transition-property: Specifies the CSS properties to which a transition effect should be applied.
- transition-behavior: Defines whether a transition should be applied to discrete properties.
- transition-duration: Sets the duration of a transition effect.
- transition-timing-function: Specifies the speed curve of a transition effect.
- transition-delay: Specifies when the transition effect will start.
- animation: Shorthand property for animation properties.

Transforms:
- backface-visibility: Defines whether the back face of an element is visible when turned towards the user.
- perspective: Specifies the distance between the user and the z=0 plane.
- perspective-origin: Sets the origin for the perspective property.
- rotate: Applies a 2D or 3D rotation transformation.
- scale: Applies a 2D or 3D scaling transformation.
- skew: Applies a 2D skew transformation.
- transform: Applies 2D or 3D transformations to an element.
- transform-origin: Sets the origin for transformations of an element.
- transform-style: Specifies how nested elements are rendered in 3D space.
- translate: Applies a 2D or 3D translation transformation.

Interactivity:
- accent-color: Sets the accent color for user-interface controls.
- appearance: Controls the native appearance of UI widgets.
- caret-color: Sets the color of the text insertion caret.
- color-scheme: Specifies the color scheme an element is comfortable with.
- cursor: Specifies the type of cursor to be displayed.
- field-sizing: Controls the sizing of form fields.
- pointer-events: Sets whether an element is the target of pointer events.
- resize: Specifies whether an element is resizable by the user.
- scroll-behavior: Specifies the scrolling behavior for a scrolling box.
- scroll-margin: Sets the scroll margin of an element.
- scroll-padding: Sets the scroll padding of an element.
- scroll-snap-align: Specifies the snap position for a scroll container.
- scroll-snap-stop: Specifies whether the scroll container must snap to a snap position.
- scroll-snap-type: Specifies how strictly snap points are enforced.
- touch-action: Specifies how a touch event can be handled.
- user-select: Controls whether the user can select text.
- will-change: Hints to browsers about what changes will be made to an element.

SVG:
- fill: Sets the color of the interior of an SVG shape.
- stroke: Sets the color of the outline of an SVG shape.
- stroke-width: Sets the width of the outline of an SVG shape.

Accessibility:
- forced-color-adjust: Specifies whether the user agent should adjust colors for forced colors mode.
```

----------------------------------------

TITLE: Importing Tailwind CSS and defining custom styles
DESCRIPTION: Demonstrates how to import Tailwind CSS into a custom CSS file and define additional custom styles alongside it. This allows for seamless integration of traditional CSS with Tailwind's utility-first approach.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: CSS
CODE:
```
@import ""tailwindcss"";.my-custom-style {  /* ... */}
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-700 Utility Class
DESCRIPTION: Applies the sky-700 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-700 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-700
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-700); /* oklch(50% 0.134 242.749) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-blue-50 Utility Class
DESCRIPTION: Applies the blue-50 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding blue-50 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-blue-50
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-blue-50); /* oklch(97% 0.014 254.604) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-900 Utility Class
DESCRIPTION: Applies the teal-900 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-900 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-900
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-900); /* oklch(38.6% 0.063 188.416) */
```

----------------------------------------

TITLE: Apply Tailwind CSS mask-mode Utilities
DESCRIPTION: This HTML example demonstrates the basic application of `mask-alpha` and `mask-luminance` utilities to `div` elements. It shows how to combine these mask modes with other mask properties and background images to achieve specific visual effects.
SOURCE: https://tailwindcss.com/docs/mask-mode

LANGUAGE: HTML
CODE:
```
<div class=""mask-alpha mask-r-from-black mask-r-from-50% mask-r-to-transparent bg-[url(/img/mountains.jpg)] ...""></div><div class=""mask-luminance mask-r-from-white mask-r-from-50% mask-r-to-black bg-[url(/img/mountains.jpg)] ...""></div>
```

----------------------------------------

TITLE: Tailwind CSS Padding Utility Classes Reference
DESCRIPTION: Comprehensive reference for Tailwind CSS padding utility classes, detailing how each class maps to standard CSS padding properties for all sides, horizontal, vertical, and logical padding, including custom value and variable support.
SOURCE: https://tailwindcss.com/docs/padding

LANGUAGE: APIDOC
CODE:
```
p-<number>: padding: calc(var(--spacing) * <number>);
p-px: padding: 1px;
p-(<custom-property>): padding: var(<custom-property>);
p-[<value>]: padding: <value>;
px-<number>: padding-inline: calc(var(--spacing) * <number>);
px-px: padding-inline: 1px;
px-(<custom-property>): padding-inline: var(<custom-property>);
px-[<value>]: padding-inline: <value>;
py-<number>: padding-block: calc(var(--spacing) * <number>);
py-px: padding-block: 1px;
py-(<custom-property>): padding-block: var(<custom-property>);
py-[<value>]: padding-block: <value>;
ps-<number>: padding-inline-start: calc(var(--spacing) * <number>);
ps-px: padding-inline-start: 1px;
ps-(<custom-property>): padding-inline-start: var(<custom-property>);
ps-[<value>]: padding-inline-start: <value>;
pe-<number>: padding-inline-end: calc(var(--spacing) * <number>);
pe-px: padding-inline-end: 1px;
pe-(<custom-property>): padding-inline-end: var(<custom-property>);
pe-[<value>]: padding-inline-end: <value>;
pt-<number>: padding-top: calc(var(--spacing) * <number>);
pt-px: padding-top: 1px;
pt-(<custom-property>): padding-top: var(<custom-property>);
pt-[<value>]: padding-top: <value>;
pr-<number>: padding-right: calc(var(--spacing) * <number>);
pr-px: padding-right: 1px;
pr-(<custom-property>): padding-right: var(<custom-property>);
pr-[<value>]: padding-right: <value>;
pb-<number>: padding-bottom: calc(var(--spacing) * <number>);
pb-px: padding-bottom: 1px;
pb-(<custom-property>): padding-bottom: var(<custom-property>);
pb-[<value>]: padding-bottom: <value>;
pl-<number>: padding-left: calc(var(--spacing) * <number>);
pl-px: padding-left: 1px;
pl-(<custom-property>): padding-left: var(<custom-property>);
pl-[<value>]: padding-left: <value>;
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-950 Utility Class
DESCRIPTION: Applies the sky-950 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-950 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-950
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-950); /* oklch(29.3% 0.066 243.157) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-700 Utility Class
DESCRIPTION: Applies the cyan-700 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-700 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-700
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-700); /* oklch(52% 0.105 223.128) */
```

----------------------------------------

TITLE: HTML Example: Applying Tailwind `text-wrap` Utility
DESCRIPTION: Demonstrates how to use the `text-wrap` utility class in HTML to allow text to wrap onto multiple lines within an element. This ensures content fits within its container without overflowing horizontally.
SOURCE: https://tailwindcss.com/docs/text-wrap

LANGUAGE: HTML
CODE:
```
<article class=""text-wrap"">  <h3>Beloved Manhattan soup stand closes</h3>  <p>New Yorkers are facing the winter chill...</p></article>
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-900 Utility Class
DESCRIPTION: Applies the sky-900 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-900 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-900
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-900); /* oklch(39.1% 0.09 240.876) */
```

----------------------------------------

TITLE: Tailwind CSS Flex Column Layout Example
DESCRIPTION: Shows the application of `flex-col` to arrange flex items vertically. This utility sets `flex-direction: column;` on the flex container.
SOURCE: https://tailwindcss.com/docs/flex-direction

LANGUAGE: HTML
CODE:
```
<div class=""flex flex-col ..."">  <div>01</div>  <div>02</div>  <div>03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Reference
DESCRIPTION: A comprehensive reference of Tailwind CSS utility classes organized by category, including effects, filters, table styling, transitions, transforms, interactivity, SVG, and accessibility. Each entry links to its respective documentation.
SOURCE: https://tailwindcss.com/docs/vertical-align

LANGUAGE: APIDOC
CODE:
```
### Effects
- box-shadow
- text-shadow
- opacity
- mix-blend-mode
- background-blend-mode
- mask-clip
- mask-composite
- mask-image
- mask-mode
- mask-origin
- mask-position
- mask-repeat
- mask-size
- mask-type

### Filters
- filter
  - blur
  - brightness
  - contrast
  - drop-shadow
  - grayscale
  - hue-rotate
  - invert
  - saturate
  - sepia
- backdrop-filter
  - blur
  - brightness
  - contrast
  - grayscale
  - hue-rotate
  - invert
  - opacity
  - saturate
  - sepia

### Tables
- border-collapse
- border-spacing
- table-layout
- caption-side

### Transitions & Animation
- transition-property
- transition-behavior
- transition-duration
- transition-timing-function
- transition-delay
- animation

### Transforms
- backface-visibility
- perspective
- perspective-origin
- rotate
- scale
- skew
- transform
- transform-origin
- transform-style
- translate

### Interactivity
- accent-color
- appearance
- caret-color
- color-scheme
- cursor
- field-sizing
- pointer-events
- resize
- scroll-behavior
- scroll-margin
- scroll-padding
- scroll-snap-align
- scroll-snap-stop
- scroll-snap-type
- touch-action
- user-select
- will-change

### SVG
- fill
- stroke
- stroke-width

### Accessibility
- forced-color-adjust
```

----------------------------------------

TITLE: Matching theme values for functional utilities
DESCRIPTION: Shows how to resolve functional utility values against a set of predefined theme keys using the `--value(--theme-key-*)` syntax. This allows custom utilities to leverage values defined in the Tailwind theme configuration.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: CSS
CODE:
```
@theme {  --tab-size-2: 2;  --tab-size-4: 4;  --tab-size-github: 8;}@utility tab-* {  tab-size: --value(--tab-size-*);}
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-950 Utility Class
DESCRIPTION: Applies the cyan-950 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-950 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-950
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-950); /* oklch(30.2% 0.056 229.695) */
```

----------------------------------------

TITLE: Globally Include Main CSS File in Nuxt.js Configuration
DESCRIPTION: Adds the path to the `main.css` file (containing the Tailwind CSS import) to the `css` array in `nuxt.config.ts`, ensuring that the styles are globally applied across the Nuxt.js application.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nuxt

LANGUAGE: TypeScript
CODE:
```
import tailwindcss from ""@tailwindcss/vite"";

export default defineNuxtConfig({
  compatibilityDate: ""2024-11-01"",
  devtools: { enabled: true },
  css: ['~/assets/css/main.css'],
  vite: {
    plugins: [
      tailwindcss(),
    ],
  },
});
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: A comprehensive set of utility classes for styling text and fonts, including font family, size, smoothing, style, weight, stretch, numeric variants, letter spacing, line height, list styles, text alignment, color, decoration, transform, overflow, and word break properties.
SOURCE: https://tailwindcss.com/docs/visibility

LANGUAGE: APIDOC
CODE:
```
Typography Utilities:
  - font-family: /docs/font-family
  - font-size: /docs/font-size
  - font-smoothing: /docs/font-smoothing
  - font-style: /docs/font-style
  - font-weight: /docs/font-weight
  - font-stretch: /docs/font-stretch
  - font-variant-numeric: /docs/font-variant-numeric
  - letter-spacing: /docs/letter-spacing
  - line-clamp: /docs/line-clamp
  - line-height: /docs/line-height
  - list-style-image: /docs/list-style-image
  - list-style-position: /docs/list-style-position
  - list-style-type: /docs/list-style-type
  - text-align: /docs/text-align
  - color: /docs/color
  - text-decoration-line: /docs/text-decoration-line
  - text-decoration-color: /docs/text-decoration-color
  - text-decoration-style: /docs/text-decoration-style
  - text-decoration-thickness: /docs/text-decoration-thickness
  - text-underline-offset: /docs/text-underline-offset
  - text-transform: /docs/text-transform
  - text-overflow: /docs/text-overflow
  - text-wrap: /docs/text-wrap
  - text-indent: /docs/text-indent
  - vertical-align: /docs/vertical-align
  - white-space: /docs/white-space
  - word-break: /docs/word-break
  - overflow-wrap: /docs/overflow-wrap
  - hyphens: /docs/hyphens
  - content: /docs/content
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-200 Utility Class
DESCRIPTION: Applies the cyan-200 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-200 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-200
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-200); /* oklch(91.7% 0.08 205.041) */
```

----------------------------------------

TITLE: Tailwind CSS Effects Utilities
DESCRIPTION: This section documents CSS properties related to visual effects, including shadows, transparency, and blending modes, as well as comprehensive masking properties.
SOURCE: https://tailwindcss.com/docs/text-color

LANGUAGE: APIDOC
CODE:
```
CSS Effects Properties:

box-shadow: Controls the shadow effects around an element's frame.
text-shadow: Controls the shadow effects applied to text.
opacity: Sets the transparency level of an element.
mix-blend-mode: Describes how an element's content should blend with its direct parent background.
background-blend-mode: Describes how an element's background images should blend with each other and with the element's background color.
mask-clip: Specifies the mask painting area.
mask-composite: Specifies the compositing operation used to combine the current mask with the mask below it.
mask-image: Specifies an image to be used as a mask layer.
mask-mode: Specifies whether the mask image is treated as a luminance mask or an alpha mask.
mask-origin: Specifies the origin of the mask image.
mask-position: Sets the initial position of a mask image.
mask-repeat: Sets how mask images are repeated.
mask-size: Specifies the size of the mask images.
mask-type: Specifies whether a mask element is treated as a luminance mask or an alpha mask.
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-50 Utility Class
DESCRIPTION: Applies the sky-50 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-50 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-50
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-50); /* oklch(97.7% 0.013 236.62) */
```

----------------------------------------

TITLE: Tailwind CSS Sepia Filter Utility Classes
DESCRIPTION: Defines the utility classes available in Tailwind CSS for applying sepia filters to elements, including fixed values, numeric percentages, custom properties, and arbitrary values.
SOURCE: https://tailwindcss.com/docs/filter-sepia

LANGUAGE: APIDOC
CODE:
```
Class | Styles
---
sepia | filter: sepia(100%);
sepia-<number> | filter: sepia(<number>%);
sepia-(<custom-property>) | filter: sepia(var(<custom-property>));
sepia-[<value>] | filter: sepia(<value>);
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-100 Utility Class
DESCRIPTION: Applies the cyan-100 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-100 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-100
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-100); /* oklch(95.6% 0.045 203.388) */
```

----------------------------------------

TITLE: TailwindCSS Accessibility Utilities
DESCRIPTION: Documentation for TailwindCSS utilities related to accessibility, specifically the 'forced-color-adjust' property which controls how user agents handle forced colors.
SOURCE: https://tailwindcss.com/docs/color

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-900 Utility Class
DESCRIPTION: Applies the cyan-900 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-900 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-900
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-900); /* oklch(39.8% 0.07 227.392) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-400 Utility Class
DESCRIPTION: Applies the teal-400 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-400 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-400
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-400); /* oklch(77.7% 0.152 181.912) */
```

----------------------------------------

TITLE: Tailwind CSS grid-auto-flow Utility Classes Reference
DESCRIPTION: Provides a comprehensive reference for Tailwind CSS utility classes that control how elements in a grid are auto-placed, mapping each class to its corresponding CSS `grid-auto-flow` property value.
SOURCE: https://tailwindcss.com/docs/grid-auto-flow

LANGUAGE: APIDOC
CODE:
```
grid-auto-flow Utilities:
  grid-flow-row: grid-auto-flow: row;
  grid-flow-col: grid-auto-flow: column;
  grid-flow-dense: grid-auto-flow: dense;
  grid-flow-row-dense: grid-auto-flow: row dense;
  grid-flow-col-dense: grid-auto-flow: column dense;
```

----------------------------------------

TITLE: Tailwind CSS Core Utility Reference
DESCRIPTION: A comprehensive list of core Tailwind CSS utility classes categorized by their functional area, including effects, filters, tables, transitions, transforms, interactivity, SVG, and accessibility. Each entry links to more detailed documentation.
SOURCE: https://tailwindcss.com/docs/text-decoration-line

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow
  - text-shadow
  - opacity
  - mix-blend-mode
  - background-blend-mode
  - mask-clip
  - mask-composite
  - mask-image
  - mask-mode
  - mask-origin
  - mask-position
  - mask-repeat
  - mask-size
  - mask-type

Filters:
  - filter
    - blur
    - brightness
    - contrast
    - drop-shadow
    - grayscale
    - hue-rotate
    - invert
    - saturate
    - sepia
  - backdrop-filter
    - blur
    - brightness
    - contrast
    - grayscale
    - hue-rotate
    - invert
    - opacity
    - saturate
    - sepia

Tables:
  - border-collapse
  - border-spacing
  - table-layout
  - caption-side

Transitions & Animation:
  - transition-property
  - transition-behavior
  - transition-duration
  - transition-timing-function
  - transition-delay
  - animation

Transforms:
  - backface-visibility
  - perspective
  - perspective-origin
  - rotate
  - scale
  - skew
  - transform
  - transform-origin
  - transform-style
  - translate

Interactivity:
  - accent-color
  - appearance
  - caret-color
  - color-scheme
  - cursor
  - field-sizing
  - pointer-events
  - resize
  - scroll-behavior
  - scroll-margin
  - scroll-padding
  - scroll-snap-align
  - scroll-snap-stop
  - scroll-snap-type
  - touch-action
  - user-select
  - will-change

SVG:
  - fill
  - stroke
  - stroke-width

Accessibility:
  - forced-color-adjust
```

----------------------------------------

TITLE: Aligning HTML Element to Bottom with Tailwind CSS
DESCRIPTION: Provides an example of using the `align-bottom` utility class in Tailwind CSS to align an element and its descendants with the bottom of the entire line.
SOURCE: https://tailwindcss.com/docs/vertical-align

LANGUAGE: HTML
CODE:
```
<span class=""inline-block align-bottom"">The quick brown fox...</span>
```

----------------------------------------

TITLE: Tailwind CSS Flexbox & Grid Utilities
DESCRIPTION: Provides utility classes for building flexible and grid-based layouts, covering properties like flex basis, direction, wrap, grow, shrink, order, grid templates, column/row spans, auto-flow, gaps, and alignment properties for both content and items.
SOURCE: https://tailwindcss.com/docs/list-style-type

LANGUAGE: APIDOC
CODE:
```
### Flexbox & Grid Utilities
- flex-basis: Specifies the initial size of a flex item.
- flex-direction: Establishes the main-axis, thus defining the direction flex items are placed in the flex container.
- flex-wrap: Specifies whether flex items are forced into a single line or can be wrapped onto multiple lines.
- flex: A shorthand property for flex-grow, flex-shrink, and flex-basis.
- flex-grow: Specifies the ability of a flex item to grow if necessary.
- flex-shrink: Specifies the ability of a flex item to shrink if necessary.
- order: Specifies the order of a flexible item relative to the rest of the flex items inside the same container.
- grid-template-columns: Defines the columns of a grid with a space-separated list of values.
- grid-column: Specifies a grid item's size and location within the grid column.
- grid-template-rows: Defines the rows of a grid with a space-separated list of values.
- grid-row: Specifies a grid item's size and location within the grid row.
- grid-auto-flow: Controls how auto-placed items are inserted in the grid.
- grid-auto-columns: Specifies the size of implicitly created grid columns.
- grid-auto-rows: Specifies the size of implicitly created grid rows.
- gap: Sets the gaps (gutters) between rows and columns in grid and flexbox layouts.
- justify-content: Aligns flex items along the main axis of the current line.
- justify-items: Aligns grid items along the inline (row) axis.
- justify-self: Aligns a grid item inside a cell along the inline (row) axis.
- align-content: Aligns a flex container's lines within the flex container when there is extra space in the cross-axis.
- align-items: Aligns flex items along the cross axis of the current line.
- align-self: Aligns a flex item inside a flex container along the cross axis.
- place-content: A shorthand for align-content and justify-content.
- place-items: A shorthand for align-items and justify-items.
- place-self: A shorthand for align-self and justify-self.
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-800 Utility Class
DESCRIPTION: Applies the teal-800 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-800 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-800
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-800); /* oklch(43.7% 0.078 188.216) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-blue-200 Utility Class
DESCRIPTION: Applies the blue-200 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding blue-200 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-blue-200
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-blue-200); /* oklch(88.2% 0.059 254.128) */
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: A comprehensive set of utilities for styling text and fonts. This includes controls for font family, size, smoothing, style, weight, letter spacing, line height, list styles, text alignment, color, decoration, transformation, overflow, wrapping, indentation, vertical alignment, and word breaks.
SOURCE: https://tailwindcss.com/docs/background-position

LANGUAGE: APIDOC
CODE:
```
font-family: Utilities for setting the font family of text.
font-size: Utilities for setting the font size of text.
font-smoothing: Utilities for controlling font rendering optimization.
font-style: Utilities for setting the font style (e.g., italic, normal).
font-weight: Utilities for setting the font weight (e.g., bold, normal).
font-stretch: Utilities for setting the font stretch.
font-variant-numeric: Utilities for controlling numeric font features.
letter-spacing: Utilities for controlling the space between characters.
line-clamp: Utilities for truncating text after a specific number of lines.
line-height: Utilities for setting the height of a line of text.
list-style-image: Utilities for setting an image as the list item marker.
list-style-position: Utilities for setting the position of the list item marker.
list-style-type: Utilities for setting the type of list item marker.
text-align: Utilities for aligning text within its container.
color: Utilities for setting the text color.
text-decoration-line: Utilities for setting the type of text decoration (e.g., underline, line-through).
text-decoration-color: Utilities for setting the color of text decoration.
text-decoration-style: Utilities for setting the style of text decoration (e.g., solid, wavy).
text-decoration-thickness: Utilities for setting the thickness of text decoration.
text-underline-offset: Utilities for setting the offset of an underline.
text-transform: Utilities for transforming text (e.g., uppercase, lowercase).
text-overflow: Utilities for handling text that overflows its container.
text-wrap: Utilities for controlling how text wraps.
text-indent: Utilities for indenting the first line of text.
vertical-align: Utilities for aligning elements vertically.
white-space: Utilities for controlling how white space is handled.
word-break: Utilities for controlling how words break.
overflow-wrap: Utilities for controlling how words break to prevent overflow.
hyphens: Utilities for controlling hyphenation.
content: Utilities for generating content in pseudo-elements.
```

----------------------------------------

TITLE: Tailwind CSS whitespace-normal Example
DESCRIPTION: Demonstrates the use of the `whitespace-normal` utility class in HTML. This class causes text to wrap normally, collapsing newlines and multiple spaces.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: HTML
CODE:
```
<p class=""whitespace-normal"">Hey everyone!It's almost 2022       and we still don't know if there             are aliens living among us, or do we? Maybe the person writing this is an alien.You will never know.</p>
```

----------------------------------------

TITLE: CSS SVG Properties
DESCRIPTION: Documentation for CSS properties specifically used for styling SVG elements, controlling their fill, stroke, and stroke width.
SOURCE: https://tailwindcss.com/docs/margin

LANGUAGE: APIDOC
CODE:
```
fill: Sets the color of the interior of an SVG shape.
stroke: Sets the color of the outline of an SVG shape.
stroke-width: Sets the thickness of the outline of an SVG shape.
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-600 Utility Class
DESCRIPTION: Applies the teal-600 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-600 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-600
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-600); /* oklch(60% 0.118 184.704) */
```

----------------------------------------

TITLE: Tailwind CSS Filter Utilities
DESCRIPTION: Provides Tailwind CSS utility classes for applying various image filters, including blur, brightness, contrast, and grayscale, for both the `filter` and `backdrop-filter` CSS properties. Each utility corresponds to a specific filter function.
SOURCE: https://tailwindcss.com/docs/text-decoration-style

LANGUAGE: APIDOC
CODE:
```
filter:
  blur: filter: blur(...)
  brightness: filter: brightness(...)
  contrast: filter: contrast(...)
  drop-shadow: filter: drop-shadow(...)
  grayscale: filter: grayscale(...)
  hue-rotate: filter: hue-rotate(...)
  invert: filter: invert(...)
  saturate: filter: saturate(...)
  sepia: filter: sepia(...)
backdrop-filter:
  blur: backdrop-filter: blur(...)
  brightness: backdrop-filter: brightness(...)
  contrast: backdrop-filter: contrast(...)
  grayscale: backdrop-filter: grayscale(...)
  hue-rotate: backdrop-filter: hue-rotate(...)
  invert: backdrop-filter: invert(...)
  opacity: backdrop-filter: opacity(...)
  saturate: backdrop-filter: saturate(...)
  sepia: backdrop-filter: sepia(...)
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-400 Utility Class
DESCRIPTION: Applies the cyan-400 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-400 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-400
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-400); /* oklch(78.9% 0.154 211.53) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-blue-100 Utility Class
DESCRIPTION: Applies the blue-100 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding blue-100 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-blue-100
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-blue-100); /* oklch(93.2% 0.032 255.585) */
```

----------------------------------------

TITLE: Tailwind CSS Accessibility Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that enhance accessibility, specifically for adjusting colors in forced color modes.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust: Utilities for controlling how an element's colors are adjusted in forced color modes.
```

----------------------------------------

TITLE: HTML Example: Custom Tailwind CSS transition-delay Property
DESCRIPTION: Shows how to use a CSS custom property with the `delay-(<custom-property>)` syntax to define a transition delay in Tailwind CSS.
SOURCE: https://tailwindcss.com/docs/transition-delay

LANGUAGE: HTML
CODE:
```
<button class=""delay-(--my-delay) ..."">  <!-- ... --></button>
```

----------------------------------------

TITLE: Tailwind CSS Typography Utilities
DESCRIPTION: Details utility classes for styling text, including font properties, line height, text alignment, decoration, transformation, and overflow behavior.
SOURCE: https://tailwindcss.com/docs/grid-column

LANGUAGE: APIDOC
CODE:
```
font-family:
  - Utilities for controlling the font family of an element.
font-size:
  - Utilities for controlling the font size of an element.
font-smoothing:
  - Utilities for controlling the font smoothing of an element.
font-style:
  - Utilities for controlling the font style (e.g., italic, normal) of an element.
font-weight:
  - Utilities for controlling the font weight of an element.
font-stretch:
  - Utilities for controlling the font stretch of an element.
font-variant-numeric:
  - Utilities for controlling the numeric font variants.
letter-spacing:
  - Utilities for controlling the letter spacing of an element.
line-clamp:
  - Utilities for truncating text after a specific number of lines.
line-height:
  - Utilities for controlling the line height of an element.
list-style-image:
  - Utilities for controlling the image used as a list item marker.
list-style-position:
  - Utilities for controlling the position of the list item marker.
list-style-type:
  - Utilities for controlling the type of list item marker.
text-align:
  - Utilities for controlling the text alignment of an element.
color:
  - Utilities for controlling the text color of an element.
text-decoration-line:
  - Utilities for controlling the line type of text decoration.
text-decoration-color:
  - Utilities for controlling the color of text decoration.
text-decoration-style:
  - Utilities for controlling the style of text decoration.
text-decoration-thickness:
  - Utilities for controlling the thickness of text decoration.
text-underline-offset:
  - Utilities for controlling the offset of the underline from the text.
text-transform:
  - Utilities for controlling the capitalization of text.
text-overflow:
  - Utilities for controlling how text that overflows its container is handled.
text-wrap:
  - Utilities for controlling how text wraps within an element.
text-indent:
  - Utilities for controlling the indentation of the first line of text.
vertical-align:
  - Utilities for controlling the vertical alignment of an inline element.
white-space:
  - Utilities for controlling how white space inside an element is handled.
word-break:
  - Utilities for controlling how words should break when reaching the end of a line.
overflow-wrap:
  - Utilities for controlling whether the browser can break words to prevent overflow.
hyphens:
  - Utilities for controlling how hyphenation is applied to text.
content:
  - Utilities for controlling the generated content of an element.
```

----------------------------------------

TITLE: Tailwind CSS Accessibility Utilities
DESCRIPTION: Documents utility classes related to accessibility features, specifically for forced color adjustment.
SOURCE: https://tailwindcss.com/docs/border-width

LANGUAGE: APIDOC
CODE:
```
Accessibility:
  forced-color-adjust: Utility for setting whether the user agent is allowed to make adjustments to colors to improve readability in forced colors mode.
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-500 Utility Class
DESCRIPTION: Applies the sky-500 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-500 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-500
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-500); /* oklch(68.5% 0.169 237.323) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-300 Utility Class
DESCRIPTION: Applies the cyan-300 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-300 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-300
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-300); /* oklch(86.5% 0.127 207.078) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-600 Utility Class
DESCRIPTION: Applies the cyan-600 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-600 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-600
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-600); /* oklch(60.9% 0.126 221.723) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-500 Utility Class
DESCRIPTION: Applies the cyan-500 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-500 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-500
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-500); /* oklch(71.5% 0.143 215.221) */
```

----------------------------------------

TITLE: Tailwind CSS Border and Outline Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for styling element borders and outlines. This includes properties for border radius, width, color, style, and outline width, color, style, and offset.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: APIDOC
CODE:
```
Border & Outline Utilities:
  - border-radius: Set the border-radius of an element.
  - border-width: Set the width of an element's borders.
  - border-color: Set the color of an element's borders.
  - border-style: Set the style of an element's borders (e.g., solid, dashed).
  - outline-width: Set the width of an element's outline.
  - outline-color: Set the color of an element's outline.
  - outline-style: Set the style of an element's outline.
  - outline-offset: Set the offset of an element's outline from its border edge.
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-50 Utility Class
DESCRIPTION: Applies the teal-50 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-50 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-50
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-50); /* oklch(98.4% 0.014 180.72) */
```

----------------------------------------

TITLE: Tailwind CSS Table Layout Utilities API
DESCRIPTION: Defines the utility classes available in Tailwind CSS for controlling table layout properties, including border collapsing, spacing, and caption positioning. Each entry specifies the utility class and its corresponding CSS style.
SOURCE: https://tailwindcss.com/docs/border-collapse

LANGUAGE: APIDOC
CODE:
```
border-collapse:
  - Class: `border-collapse`
    Styles: `border-collapse: collapse;`
  - Class: `border-separate`
    Styles: `border-collapse: separate;`
  - Description: Controls whether table borders should collapse into a single border or remain separated.

border-spacing:
  - Description: Utility for controlling the spacing between borders of adjacent cells in a table.

table-layout:
  - Description: Utility for controlling the algorithm used to lay out table cells, rows, and columns.

caption-side:
  - Description: Utility for controlling the placement of a table's caption relative to the table.
```

----------------------------------------

TITLE: Tailwind CSS grid-auto-columns Utility Classes
DESCRIPTION: API documentation for the `grid-auto-columns` utility in Tailwind CSS, which controls the size of implicitly-created grid columns. This entry details the available utility classes and their corresponding CSS properties, including options for auto, min-content, max-content, fractional units, and custom values.
SOURCE: https://tailwindcss.com/docs/grid-auto-columns

LANGUAGE: APIDOC
CODE:
```
grid-auto-columns:
  - Class: `auto-cols-auto`
    Styles: `grid-auto-columns: auto;`
  - Class: `auto-cols-min`
    Styles: `grid-auto-columns: min-content;`
  - Class: `auto-cols-max`
    Styles: `grid-auto-columns: max-content;`
  - Class: `auto-cols-fr`
    Styles: `grid-auto-columns: minmax(0, 1fr);`
  - Class: `auto-cols-(<custom-property>)`
    Styles: `grid-auto-columns: var(<custom-property>);`
  - Class: `auto-cols-[<value>]`
    Styles: `grid-auto-columns: <value>;`

Purpose: Utilities for controlling the size of implicitly-created grid columns.
Usage: Apply these classes directly to a grid container to define how auto-placed columns are sized.
Parameters: Varies by class, typically a predefined keyword or a custom CSS value.
Returns: Modifies the CSS `grid-auto-columns` property.
```

----------------------------------------

TITLE: Tailwind CSS border-r-teal-100 Utility Class
DESCRIPTION: Applies the teal-100 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding teal-100 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-teal-100
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-teal-100); /* oklch(95.3% 0.051 180.801) */
```

----------------------------------------

TITLE: Tailwind CSS Background Utilities
DESCRIPTION: Utility classes for styling element backgrounds, including properties for attachment, clip, color, image, origin, position, repeat, and size, enabling detailed control over background appearance.
SOURCE: https://tailwindcss.com/docs/visibility

LANGUAGE: APIDOC
CODE:
```
Background Utilities:
  - background-attachment: /docs/background-attachment
  - background-clip: /docs/background-clip
  - background-color: /docs/background-color
  - background-image: /docs/background-image
  - background-origin: /docs/background-origin
  - background-position: /docs/background-position
  - background-repeat: /docs/background-repeat
  - background-size: /docs/background-size
```

----------------------------------------

TITLE: Tailwind CSS border-r-cyan-800 Utility Class
DESCRIPTION: Applies the cyan-800 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding cyan-800 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-cyan-800
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-cyan-800); /* oklch(45% 0.085 224.283) */
```

----------------------------------------

TITLE: Tailwind CSS border-r-sky-400 Utility Class
DESCRIPTION: Applies the sky-400 color to the right border of an HTML element. This utility class sets the `border-right-color` CSS property to the corresponding sky-400 variable.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: tailwindcss
CODE:
```
border-r-sky-400
```

LANGUAGE: css
CODE:
```
border-right-color: var(--color-sky-400); /* oklch(74.6% 0.16 232.661) */
```

----------------------------------------

TITLE: Create Table Layouts with Tailwind CSS
DESCRIPTION: Demonstrates how to structure HTML elements to behave like a table using Tailwind CSS's `table`, `table-header-group`, `table-row`, and `table-cell` utilities. This approach allows for flexible table-like layouts without relying on traditional `<table>` tags.
SOURCE: https://tailwindcss.com/docs/display

LANGUAGE: html
CODE:
```
<div class=""table w-full ..."">
  <div class=""table-header-group ..."">
    <div class=""table-row"">
      <div class=""table-cell text-left ..."">Song</div>
      <div class=""table-cell text-left ..."">Artist</div>
      <div class=""table-cell text-left ..."">Year</div>
    </div>
  </div>
  <div class=""table-row-group"">
    <div class=""table-row"">
      <div class=""table-cell ..."">The Sliding Mr. Bones (Next Stop, Pottersville)</div>
      <div class=""table-cell ..."">Malcolm Lockyer</div>
      <div class=""table-cell ..."">1961</div>
    </div>
    <div class=""table-row"">
      <div class=""table-cell ..."">Witchy Woman</div>
      <div class=""table-cell ..."">The Eagles</div>
      <div class=""table-cell ..."">1972</div>
    </div>
    <div class=""table-row"">
      <div class=""table-cell ..."">Shining Star</div>
      <div class=""table-cell ..."">Earth, Wind, and Fire</div>
      <div class=""table-cell ..."">1975</div>
    </div>
  </div>
</div>
```

----------------------------------------

TITLE: HTML Example: Custom Tailwind CSS transition-delay Value
DESCRIPTION: Illustrates how to use the arbitrary value syntax `delay-[<value>]` to apply a custom CSS transition delay to an HTML element.
SOURCE: https://tailwindcss.com/docs/transition-delay

LANGUAGE: HTML
CODE:
```
<button class=""delay-[1s,250ms] ..."">  <!-- ... --></button>
```

----------------------------------------

TITLE: CSS Transitions and Animation Properties Reference
DESCRIPTION: Documentation for CSS properties used to define smooth transitions and complex animations, including duration, timing functions, and delays, often used with Tailwind CSS utilities.
SOURCE: https://tailwindcss.com/docs/background-color

LANGUAGE: APIDOC
CODE:
```
transition-property
transition-behavior
transition-duration
transition-timing-function
transition-delay
animation
```

----------------------------------------

TITLE: Align Flex Items to Center with Tailwind CSS
DESCRIPTION: Shows the application of the `items-center` utility class to align flex items along the center of the container's cross axis.
SOURCE: https://tailwindcss.com/docs/align-items

LANGUAGE: html
CODE:
```
<div class=""flex items-center ..."">
  <div class=""py-4"">01</div>
  <div class=""py-12"">02</div>
  <div class=""py-8"">03</div>
</div>
```

----------------------------------------

TITLE: Use Custom Data Attribute Variants
DESCRIPTION: This HTML example shows how to use a custom `data-checked` variant, previously defined, to apply an underline style when the `data-ui` attribute contains 'checked'.
SOURCE: https://tailwindcss.com/docs/hover-focus-and-other-states

LANGUAGE: HTML
CODE:
```
<div data-ui=""checked active"" class=""data-checked:underline"">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Spacing & Sizing Utilities
DESCRIPTION: Utility classes for controlling the spacing (padding and margin) and dimensions (width, height, min/max width/height) of elements, providing fine-grained control over an element's box model.
SOURCE: https://tailwindcss.com/docs/visibility

LANGUAGE: APIDOC
CODE:
```
Spacing Utilities:
  - padding: /docs/padding
  - margin: /docs/margin

Sizing Utilities:
  - width: /docs/width
  - min-width: /docs/min-width
  - max-width: /docs/max-width
  - height: /docs/height
  - min-height: /docs/min-height
  - max-height: /docs/max-height
```

----------------------------------------

TITLE: Tailwind CSS Border Utilities
DESCRIPTION: Covers utility classes for styling borders and outlines of elements, including border radius, width, color, style, and outline properties.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Borders:
  - border-radius
  - border-width
  - border-color
  - border-style
  - outline-width
  - outline-color
  - outline-style
  - outline-offset
```

----------------------------------------

TITLE: Tailwind CSS mask-contain Example
DESCRIPTION: Illustrates how to use the `mask-contain` utility class in Tailwind CSS to scale a mask image to fit within its container without cropping or stretching.
SOURCE: https://tailwindcss.com/docs/mask-size

LANGUAGE: HTML
CODE:
```
<div class=""mask-contain mask-[url(/img/scribble.png)] bg-[url(/img/mountains.jpg)] ...""></div>
```

----------------------------------------

TITLE: Tailwind CSS Border & Outline Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities that control the borders and outlines of elements. This includes properties for border radius, width, color, style, and similar properties for outlines.
SOURCE: https://tailwindcss.com/docs/text-decoration-thickness

LANGUAGE: APIDOC
CODE:
```
Border & Outline Utilities:
  border-radius: Sets the radius of the element's corners.
  border-width: Sets the width of the element's four borders.
  border-color: Sets the color of the element's four borders.
  border-style: Sets the style of the element's four borders.
  outline-width: Sets the width of the outline.
  outline-color: Sets the color of the outline.
  outline-style: Sets the style of the outline.
  outline-offset: Offsets an outline from the border edge of an element.
```

----------------------------------------

TITLE: HTML Example: Responsive Tailwind CSS transition-delay
DESCRIPTION: Demonstrates applying responsive `transition-delay` utilities using breakpoint variants like `md:` to change the delay based on screen size.
SOURCE: https://tailwindcss.com/docs/transition-delay

LANGUAGE: HTML
CODE:
```
<button class=""delay-150 md:delay-300 ..."">  <!-- ... --></button>
```

----------------------------------------

TITLE: Tailwind CSS Spacing Utilities
DESCRIPTION: Includes utility classes for controlling the outer and inner spacing of elements, specifically padding and margin.
SOURCE: https://tailwindcss.com/docs/justify-items

LANGUAGE: APIDOC
CODE:
```
padding: /docs/padding
margin: /docs/margin
```

----------------------------------------

TITLE: TailwindCSS `forced-color-adjust` Utility API
DESCRIPTION: Documents the `forced-color-adjust` utility classes in TailwindCSS, showing how they map to CSS properties for controlling forced color adjustments. These utilities allow elements to opt in or out of forced color modes, which is crucial for maintaining design integrity and usability in accessibility settings.
SOURCE: https://tailwindcss.com/docs/forced-color-adjust

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust:
  `forced-color-adjust-auto`: `forced-color-adjust: auto;`
  `forced-color-adjust-none`: `forced-color-adjust: none;`

Description:
  Utilities for opting elements in and out of forced colors mode.
  `forced-color-adjust-auto`: Allows the browser to automatically adjust colors for forced color modes.
  `forced-color-adjust-none`: Prevents the browser from adjusting colors for forced color modes, useful when a limited color palette would degrade usability.
```

----------------------------------------

TITLE: Tailwind CSS SVG Utilities
DESCRIPTION: This section lists Tailwind CSS utility classes specifically for styling SVG elements, including fill color, stroke color, and stroke width.
SOURCE: https://tailwindcss.com/docs/installation/tailwind-cli

LANGUAGE: APIDOC
CODE:
```
fill: Utilities for controlling the fill color of an SVG element.
stroke: Utilities for controlling the stroke color of an SVG element.
stroke-width: Utilities for controlling the stroke width of an SVG element.
```

----------------------------------------

TITLE: Set Individual Border Side Colors in Tailwind CSS
DESCRIPTION: Shows how to apply border colors to specific sides of an element (top, right, bottom, left) using utilities like `border-t-indigo-500`.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div class=""border-4 border-indigo-200 border-t-indigo-500 ...""></div><div class=""border-4 border-indigo-200 border-r-indigo-500 ...""></div><div class=""border-4 border-indigo-200 border-b-indigo-500 ...""></div><div class=""border-4 border-indigo-200 border-l-indigo-500 ...""></div>
```

----------------------------------------

TITLE: Tailwind CSS whitespace-nowrap Example
DESCRIPTION: Demonstrates the use of the `whitespace-nowrap` utility class in HTML. This class prevents text from wrapping within an element, collapsing newlines and multiple spaces.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: HTML
CODE:
```
<p class=""overflow-auto whitespace-nowrap"">Hey everyone!It's almost 2022       and we still don't know if there             are aliens living among us, or do we? Maybe the person writing this is an alien.You will never know.</p>
```

----------------------------------------

TITLE: Tailwind CSS Transitions & Animation Utilities Reference
DESCRIPTION: Documents the utility classes available in Tailwind CSS for defining transition properties, duration, timing functions, delay, and general animation.
SOURCE: https://tailwindcss.com/docs/outline-width

LANGUAGE: APIDOC
CODE:
```
### Transitions & Animation
* transition-property
* transition-behavior
* transition-duration
* transition-timing-function
* transition-delay
* animation
```

----------------------------------------

TITLE: Apply Arbitrary Variants for On-the-Fly Selector Modification in Tailwind CSS
DESCRIPTION: Demonstrates how arbitrary variants enable dynamic selector modification, similar to built-in pseudo-class or responsive variants, by embedding custom selector logic directly within the HTML class attribute.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: HTML
CODE:
```
<ul role=""list"">  {#each items as item}  <li class=""lg:[&:nth-child(-n+3)]:hover:underline"">{item}</li>  {/each}</ul>
```

----------------------------------------

TITLE: Escape Underscores in Tailwind CSS Arbitrary Values
DESCRIPTION: Explains how to explicitly escape an underscore with a backslash (`\_`) to prevent Tailwind from converting it to a space in ambiguous situations where both spaces and underscores are valid.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: HTML
CODE:
```
<div class=""before:content-['hello\_world']"">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Table, Transition, Transform, Interactivity, SVG, and Accessibility Utilities
DESCRIPTION: This comprehensive section documents various Tailwind CSS utility classes for styling tables, controlling transitions and animations, applying 2D/3D transforms, managing user interactivity, styling SVG elements, and enhancing accessibility. Each utility maps directly to a specific CSS property, providing granular control over element presentation and behavior.
SOURCE: https://tailwindcss.com/docs/place-self

LANGUAGE: APIDOC
CODE:
```
Tables:
  - border-collapse: Sets whether table borders are collapsed into a single border or separated.
  - border-spacing: Sets the distance between the borders of adjacent cells.
  - table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
  - caption-side: Specifies the placement of a table caption.

Transitions & Animation:
  - transition-property: Specifies the CSS properties to which a transition effect should be applied.
  - transition-behavior: Defines whether a transition is applied to a property's discrete or animatable values.
  - transition-duration: Sets the duration of a transition effect.
  - transition-timing-function: Specifies the speed curve of a transition effect.
  - transition-delay: Specifies when the transition effect will start.
  - animation: A shorthand property for all animation properties.

Transforms:
  - backface-visibility: Defines whether the back face of an element is visible when facing the user.
  - perspective: Defines how far the object is from the user.
  - perspective-origin: Sets the origin for the perspective property.
  - rotate: Applies a 2D or 3D rotation transform.
  - scale: Applies a 2D or 3D scaling transform.
  - skew: Applies a 2D skew transform.
  - transform: Applies a 2D or 3D transform to an element.
  - transform-origin: Sets the origin for transformations.
  - transform-style: Specifies how nested elements are rendered in 3D space.
  - translate: Applies a 2D or 3D translation transform.

Interactivity:
  - accent-color: Sets the accent color for user-interface controls.
  - appearance: Controls the native appearance of UI widgets.
  - caret-color: Sets the color of the text insertion caret.
  - color-scheme: Sets the color scheme for an element.
  - cursor: Specifies the type of cursor to be displayed.
  - field-sizing: Controls the sizing of form fields.
  - pointer-events: Defines whether an element reacts to pointer events.
  - resize: Specifies whether an element is resizable by the user.
  - scroll-behavior: Specifies the scrolling behavior for a scrolling box.
  - scroll-margin: Sets the margin of the scroll snap area.
  - scroll-padding: Sets the padding of the scroll snap area.
  - scroll-snap-align: Specifies the snap position for a scroll container.
  - scroll-snap-stop: Specifies whether the scroll container must snap to a snap point.
  - scroll-snap-type: Specifies how strictly snap points are enforced.
  - touch-action: Defines how a touch-action property behaves.
  - user-select: Controls whether the user can select text.
  - will-change: Hints to browsers about what changes are expected to an element.

SVG:
  - fill: Sets the color of the interior of an SVG shape.
  - stroke: Sets the color of the outline of an SVG shape.
  - stroke-width: Sets the width of the outline of an SVG shape.

Accessibility:
  - forced-color-adjust: Controls how user agents adjust colors in forced color modes.
```

----------------------------------------

TITLE: Align Flex Items to Stretch with Tailwind CSS
DESCRIPTION: Demonstrates the use of the `items-stretch` utility class to make flex items stretch to fill the container's cross axis.
SOURCE: https://tailwindcss.com/docs/align-items

LANGUAGE: html
CODE:
```
<div class=""flex items-stretch ..."">
  <div class=""py-4"">01</div>
  <div class=""py-12"">02</div>
  <div class=""py-8"">03</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Layout Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities related to controlling the layout of elements, including aspect ratio, column management, box model properties, display types, positioning, and visibility. These utilities map directly to standard CSS properties for element arrangement.
SOURCE: https://tailwindcss.com/docs/text-decoration-thickness

LANGUAGE: APIDOC
CODE:
```
Layout Utilities:
  aspect-ratio: Controls the preferred aspect ratio of an element.
  columns: Specifies the number of columns an element should be divided into.
  break-after: Controls page/column breaks after an element.
  break-before: Controls page/column breaks before an element.
  break-inside: Controls page/column breaks inside an element.
  box-decoration-break: Specifies how the background, padding, border, and margin of an element are rendered when broken across lines, columns, or pages.
  box-sizing: Defines how the total width and height of an element is calculated (content-box or border-box).
  display: Specifies the display behavior of an element (e.g., block, inline, flex, grid).
  float: Specifies whether an element should float to the left or right.
  clear: Specifies on which sides of an element floating elements are not allowed to float.
  isolation: Controls whether an element creates a new stacking context.
  object-fit: Specifies how the content of a replaced element (like <img> or <video>) should be resized to fit its container.
  object-position: Specifies the alignment of the content of a replaced element within its box.
  overflow: Controls how content that overflows an element's box is handled.
  overscroll-behavior: Specifies what happens when the user scrolls past the end of a scroll area.
  position: Specifies the type of positioning method used for an element (e.g., static, relative, absolute, fixed, sticky).
  top / right / bottom / left: Specifies the position of a positioned element.
  visibility: Specifies whether an element is visible or hidden.
  z-index: Specifies the stack order of an element.
```

----------------------------------------

TITLE: Apply Basic Sepia Filters to Images in HTML
DESCRIPTION: Demonstrates how to apply different levels of sepia filters (none, 50%, 100%) to images using Tailwind CSS utility classes directly in HTML. This provides a quick visual comparison of the sepia effect.
SOURCE: https://tailwindcss.com/docs/filter-sepia

LANGUAGE: html
CODE:
```
<img class=""sepia-0"" src=""/img/mountains.jpg"" /><img class=""sepia-50"" src=""/img/mountains.jpg"" /><img class=""sepia"" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: Tailwind CSS Space-Between Migration to Flex/Grid Gap
DESCRIPTION: Suggests migrating from `space-y-*` utilities to a flex or grid layout with `gap` for better performance and consistency, especially if the selector change causes issues.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: HTML
CODE:
```
<div class=""space-y-4 p-4""><div class=""flex flex-col gap-4 p-4"">  <label for=""name"">Name</label>  <input type=""text"" name=""name"" /></div>
```

----------------------------------------

TITLE: HTML Example: Custom text-underline-offset Values
DESCRIPTION: Illustrates the use of Tailwind CSS's bracket notation to set a custom pixel value for the `text-underline-offset` property directly within an HTML class attribute.
SOURCE: https://tailwindcss.com/docs/text-underline-offset

LANGUAGE: HTML
CODE:
```
<p class=""underline-offset-[3px] ..."">  Lorem ipsum dolor sit amet...</p>
```

----------------------------------------

TITLE: Configure Tailwind CSS Vite Plugin in Nuxt.js
DESCRIPTION: Adds the `@tailwindcss/vite` plugin to the Nuxt.js configuration file (`nuxt.config.ts`) within the `vite.plugins` array, enabling Tailwind CSS processing during the build.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/nuxt

LANGUAGE: TypeScript
CODE:
```
import tailwindcss from ""@tailwindcss/vite"";

export default defineNuxtConfig({
  compatibilityDate: ""2024-11-01"",
  devtools: { enabled: true },
  vite: {
    plugins: [
      tailwindcss(),
    ],
  },
});
```

----------------------------------------

TITLE: Tailwind CSS Background Utilities
DESCRIPTION: Details utility classes for controlling background properties of elements, including attachment, clip, color, image, origin, position, repeat, and size.
SOURCE: https://tailwindcss.com/docs/text-indent

LANGUAGE: APIDOC
CODE:
```
Backgrounds:
  - background-attachment
  - background-clip
  - background-color
  - background-image
  - background-origin
  - background-position
  - background-repeat
  - background-size
```

----------------------------------------

TITLE: Tailwind CSS Space-Between Utility Selector Change
DESCRIPTION: Compares the old and new CSS selectors for Tailwind's `space-x-*` and `space-y-*` utilities, highlighting the performance-driven change from `:not([hidden]) ~ :not([hidden])` to `:not(:last-child)`.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: CSS
CODE:
```
/* Before */.space-y-4 > :not([hidden]) ~ :not([hidden]) {  margin-top: 1rem;}/* Now */.space-y-4 > :not(:last-child) {  margin-bottom: 1rem;}
```

----------------------------------------

TITLE: Tailwind CSS align-content Utility Classes Reference
DESCRIPTION: Provides a comprehensive reference for Tailwind CSS `align-content` utility classes, detailing their corresponding CSS properties and values for controlling row positioning in multi-row flex and grid containers.
SOURCE: https://tailwindcss.com/docs/align-content

LANGUAGE: APIDOC
CODE:
```
align-content: Utilities for controlling how rows are positioned in multi-row flex and grid containers.

Class | Styles
--- | ---
`content-normal` | `align-content: normal;`
`content-center` | `align-content: center;`
`content-start` | `align-content: flex-start;`
`content-end` | `align-content: flex-end;`
`content-between` | `align-content: space-between;`
`content-around` | `align-content: space-around;`
`content-evenly` | `align-content: space-evenly;`
`content-baseline` | `align-content: baseline;`
`content-stretch` | `align-content: stretch;`
```

----------------------------------------

TITLE: Start Laravel Mix Build Process
DESCRIPTION: This terminal command initiates the Laravel Mix build process, which compiles your assets (including Tailwind CSS) and watches for changes, automatically recompiling as you develop.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/laravel/mix

LANGUAGE: bash
CODE:
```
npm run watch
```

----------------------------------------

TITLE: TailwindCSS Transition and Animation Utilities
DESCRIPTION: This section provides TailwindCSS utilities for defining CSS transitions and animations, including properties for duration, timing functions, and delays, enabling smooth visual changes.
SOURCE: https://tailwindcss.com/docs/border-radius

LANGUAGE: APIDOC
CODE:
```
transition-property
transition-behavior
transition-duration
transition-timing-function
transition-delay
animation
```

----------------------------------------

TITLE: Align Flex Items to Baseline with Tailwind CSS
DESCRIPTION: Demonstrates the `items-baseline` utility class for aligning flex items along their text baselines within the container's cross axis.
SOURCE: https://tailwindcss.com/docs/align-items

LANGUAGE: html
CODE:
```
<div class=""flex items-baseline ..."">
  <div class=""pt-2 pb-6"">01</div>
  <div class=""pt-8 pb-12"">02</div>
  <div class=""pt-12 pb-4"">03</div>
</div>
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utility Classes
DESCRIPTION: Reference for Tailwind CSS utility classes that control user interaction aspects, such as cursor behavior, scroll properties, and user selection.
SOURCE: https://tailwindcss.com/docs/background-size

LANGUAGE: APIDOC
CODE:
```
accent-color: Utilities for controlling the accent color of UI controls.
appearance: Utilities for controlling the native appearance of UI controls.
caret-color: Utilities for controlling the color of the caret (text input cursor).
color-scheme: Utilities for controlling the color scheme of an element.
cursor: Utilities for controlling the cursor style.
field-sizing: Utilities for controlling the sizing of form fields.
pointer-events: Utilities for controlling whether an element is the target of pointer events.
resize: Utilities for controlling how an element can be resized by the user.
scroll-behavior: Utilities for controlling the scroll behavior of an element.
scroll-margin: Utilities for controlling the scroll margin of an element.
scroll-padding: Utilities for controlling the scroll padding of an element.
scroll-snap-align: Utilities for controlling the scroll snap align of an element.
scroll-snap-stop: Utilities for controlling the scroll snap stop of an element.
scroll-snap-type: Utilities for controlling the scroll snap type of an element.
touch-action: Utilities for controlling how an element can be interacted with via touch input.
user-select: Utilities for controlling whether the user can select text.
will-change: Utilities for controlling which CSS properties are expected to change.
```

----------------------------------------

TITLE: Tailwind CSS Accessibility Properties
DESCRIPTION: Documentation for Tailwind CSS utilities related to accessibility features, specifically for adjusting colors in forced color modes.
SOURCE: https://tailwindcss.com/docs/width

LANGUAGE: APIDOC
CODE:
```
forced-color-adjust: Controls how an element's colors are adjusted in forced color modes (e.g., Windows High Contrast Mode).
```

----------------------------------------

TITLE: Tailwind CSS Flexbox `flex-none` Example
DESCRIPTION: Demonstrates the `flex-none` utility, which prevents a flex item from growing or shrinking, fixing its size. This is useful for elements that should maintain a constant dimension regardless of container changes.
SOURCE: https://tailwindcss.com/docs/flex

LANGUAGE: HTML
CODE:
```
<div class=""flex ..."">  <div class=""w-14 flex-none ..."">01</div>  <div class=""w-32 flex-none ..."">02</div>  <div class=""flex-1 ..."">03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Filter: Brightness Utility Classes API
DESCRIPTION: Documents the utility classes provided by Tailwind CSS for applying brightness filters to elements. It details the class name patterns, their corresponding CSS `filter` property values, and how to use numeric values, custom properties, or arbitrary values.
SOURCE: https://tailwindcss.com/docs/filter-brightness

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Brightness Filter Utilities:

Class: brightness-<number>
  Description: Applies a brightness filter with a percentage value.
  Styles: filter: brightness(<number>%);
  Example: brightness-50 (applies 50% brightness)

Class: brightness-(<custom-property>)
  Description: Applies a brightness filter using a CSS custom property.
  Styles: filter: brightness(var(<custom-property>));
  Example: brightness-(--my-brightness-var)

Class: brightness-[<value>]
  Description: Applies a brightness filter with an arbitrary value.
  Styles: filter: brightness(<value>);
  Example: brightness-[1.5] (applies 150% brightness)
```

----------------------------------------

TITLE: Tailwind CSS Effects Utilities
DESCRIPTION: Documents utility classes related to visual effects such as shadows, opacity, and blend modes in Tailwind CSS.
SOURCE: https://tailwindcss.com/docs/border-width

LANGUAGE: APIDOC
CODE:
```
Effects:
  box-shadow: Utility for applying box shadows.
  text-shadow: Utility for applying text shadows.
  opacity: Utility for controlling the opacity of an element.
  mix-blend-mode: Utility for specifying how an element's content should blend with its background.
  background-blend-mode: Utility for specifying how an element's background images should blend with each other and with the element's background color.
  mask-clip: Utility for defining the clipping region for a mask.
  mask-composite: Utility for specifying the compositing operation used to combine mask layers.
  mask-image: Utility for setting the image used as a mask layer.
  mask-mode: Utility for specifying whether a mask layer is treated as a luminance mask or an alpha mask.
  mask-origin: Utility for specifying the origin of the mask layer.
  mask-position: Utility for setting the initial position of a mask image.
  mask-repeat: Utility for specifying how a mask image is repeated.
  mask-size: Utility for specifying the size of a mask image.
  mask-type: Utility for specifying whether a mask layer is treated as a luminance mask or an alpha mask.
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Reference
DESCRIPTION: Comprehensive reference for Tailwind CSS utility classes, categorized by their functional effects on elements, including visual effects, filters, table styling, transitions, transformations, interactivity, SVG properties, and accessibility.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/rspack/react

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow
  - text-shadow
  - opacity
  - mix-blend-mode
  - background-blend-mode
  - mask-clip
  - mask-composite
  - mask-image
  - mask-mode
  - mask-origin
  - mask-position
  - mask-repeat
  - mask-size
  - mask-type

Filters:
  - filter
    - blur
    - brightness
    - contrast
    - drop-shadow
    - grayscale
    - hue-rotate
    - invert
    - saturate
    - sepia
  - backdrop-filter
    - blur
    - brightness
    - contrast
    - grayscale
    - hue-rotate
    - invert
    - opacity
    - saturate
    - sepia

Tables:
  - border-collapse
  - border-spacing
  - table-layout
  - caption-side

Transitions & Animation:
  - transition-property
  - transition-behavior
  - transition-duration
  - transition-timing-function
  - transition-delay
  - animation

Transforms:
  - backface-visibility
  - perspective
  - perspective-origin
  - rotate
  - scale
  - skew
  - transform
  - transform-origin
  - transform-style
  - translate

Interactivity:
  - accent-color
  - appearance
  - caret-color
  - color-scheme
  - cursor
  - field-sizing
  - pointer-events
  - resize
  - scroll-behavior
  - scroll-margin
  - scroll-padding
  - scroll-snap-align
  - scroll-snap-stop
  - scroll-snap-type
  - touch-action
  - user-select
  - will-change

SVG:
  - fill
  - stroke
  - stroke-width

Accessibility:
  - forced-color-adjust
```

----------------------------------------

TITLE: TailwindCSS Interactivity Utilities
DESCRIPTION: This section covers TailwindCSS utilities for enhancing user interactivity and controlling element behavior. It includes properties for accent colors, appearance, caret styling, color schemes, cursor types, field sizing, pointer events, resizing, scroll behavior, scroll snapping, touch actions, user selection, and `will-change` optimization.
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: APIDOC
CODE:
```
accent-color
appearance
caret-color
color-scheme
cursor
field-sizing
pointer-events
resize
scroll-behavior
scroll-margin
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
touch-action
user-select
will-change
```

----------------------------------------

TITLE: Apply Conditional Opacity to HTML Input on Disabled State
DESCRIPTION: Illustrates how to conditionally apply opacity to an HTML input element using Tailwind CSS variants, specifically `disabled:opacity-75`.
SOURCE: https://tailwindcss.com/docs/opacity

LANGUAGE: HTML
CODE:
```
<input class=""opacity-100 disabled:opacity-75 ..."" type=""text"" />
```

----------------------------------------

TITLE: Tailwind CSS Table Styling Utilities
DESCRIPTION: Documentation for Tailwind CSS utilities used to control the layout and appearance of HTML tables, including border collapse, spacing, table layout, and caption positioning.
SOURCE: https://tailwindcss.com/docs/white-space

LANGUAGE: APIDOC
CODE:
```
border-collapse: Utilities for controlling whether table borders are collapsed into a single border or separated.
border-spacing: Utilities for controlling the distance between the borders of adjacent cells.
table-layout: Utilities for controlling the algorithm used to lay out table cells, rows, and columns.
caption-side: Utilities for controlling the placement of a table's caption.
```

----------------------------------------

TITLE: Combine Multiple Numeric Font Variants in Tailwind CSS
DESCRIPTION: Demonstrates how to compose multiple `font-variant-numeric` utilities, such as `slashed-zero` and `tabular-nums`, on a single element to achieve combined typographic effects in Tailwind CSS.
SOURCE: https://tailwindcss.com/docs/font-variant-numeric

LANGUAGE: html
CODE:
```
<dl class=""..."">  <dt class=""..."">Subtotal</dt>  <dd class=""text-right slashed-zero tabular-nums ..."">$100.00</dd>  <dt class=""..."">Tax</dt>  <dd class=""text-right slashed-zero tabular-nums ..."">$14.50</dd>  <dt class=""..."">Total</dt>  <dd class=""text-right slashed-zero tabular-nums ..."">$114.50</dd></dl>
```

----------------------------------------

TITLE: CSS Interactivity Properties Reference
DESCRIPTION: Documentation for CSS properties that control user interaction aspects of elements, including cursor styles, scroll behavior, and user selection, often used with Tailwind CSS utilities.
SOURCE: https://tailwindcss.com/docs/background-color

LANGUAGE: APIDOC
CODE:
```
accent-color
appearance
caret-color
color-scheme
cursor
field-sizing
pointer-events
resize
scroll-behavior
scroll-margin
scroll-padding
scroll-snap-align
scroll-snap-stop
scroll-snap-type
touch-action
user-select
will-change
```

----------------------------------------

TITLE: Apply clear-right utility in HTML
DESCRIPTION: The `clear-right` utility in Tailwind CSS is used to position an element below any preceding right-floated elements. This ensures that the element starts on a new line after all right-aligned floats have been cleared.
SOURCE: https://tailwindcss.com/docs/clear

LANGUAGE: HTML
CODE:
```
<article>  <img class=""float-left ..."" src=""/img/green-mountains.jpg"" />  <img class=""float-right ..."" src=""/img/snow-mountains.jpg"" />  <p class=""clear-right ..."">Maybe we can live without libraries...</p></article>
```

----------------------------------------

TITLE: Tailwind CSS Flex Row Layout Example
DESCRIPTION: Demonstrates the use of `flex-row` to arrange flex items horizontally in the same direction as text flow. This utility applies `flex-direction: row;` to the container.
SOURCE: https://tailwindcss.com/docs/flex-direction

LANGUAGE: HTML
CODE:
```
<div class=""flex flex-row ..."">  <div>01</div>  <div>02</div>  <div>03</div></div>
```

----------------------------------------

TITLE: Tailwind CSS Font Smoothing Utility Class Reference
DESCRIPTION: This entry documents the `antialiased` and `subpixel-antialiased` utility classes in Tailwind CSS, showing their corresponding CSS properties for controlling font smoothing. It serves as a reference for understanding the styling applied by these classes.
SOURCE: https://tailwindcss.com/docs/font-smoothing

LANGUAGE: APIDOC
CODE:
```
antialiased:
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
subpixel-antialiased:
  -webkit-font-smoothing: auto;
  -moz-osx-font-smoothing: auto;
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Categories and Properties
DESCRIPTION: This section lists various Tailwind CSS utility classes grouped by their functional categories, providing an overview of available styling options for effects, filters, tables, transitions, transforms, interactivity, SVG, and accessibility.
SOURCE: https://tailwindcss.com/docs/letter-spacing

LANGUAGE: APIDOC
CODE:
```
Effects:
  - box-shadow
  - text-shadow
  - opacity
  - mix-blend-mode
  - background-blend-mode
  - mask-clip
  - mask-composite
  - mask-image
  - mask-mode
  - mask-origin
  - mask-position
  - mask-repeat
  - mask-size
  - mask-type

Filters:
  - filter
    - blur
    - brightness
    - contrast
    - drop-shadow
    - grayscale
    - hue-rotate
    - invert
    - saturate
    - sepia
  - backdrop-filter
    - blur
    - brightness
    - contrast
    - grayscale
    - hue-rotate
    - invert
    - opacity
    - saturate
    - sepia

Tables:
  - border-collapse
  - border-spacing
  - table-layout
  - caption-side

Transitions & Animation:
  - transition-property
  - transition-behavior
  - transition-duration
  - transition-timing-function
  - transition-delay
  - animation

Transforms:
  - backface-visibility
  - perspective
  - perspective-origin
  - rotate
  - scale
  - skew
  - transform
  - transform-origin
  - transform-style
  - translate

Interactivity:
  - accent-color
  - appearance
  - caret-color
  - color-scheme
  - cursor
  - field-sizing
  - pointer-events
  - resize
  - scroll-behavior
  - scroll-margin
  - scroll-padding
  - scroll-snap-align
  - scroll-snap-stop
  - scroll-snap-type
  - touch-action
  - user-select
  - will-change

SVG:
  - fill
  - stroke
  - stroke-width

Accessibility:
  - forced-color-adjust
```

----------------------------------------

TITLE: HTML Example: Basic Tailwind CSS transition-delay
DESCRIPTION: Demonstrates the application of basic `delay-<number>` utilities (e.g., `delay-150`, `delay-300`, `delay-700`) to HTML buttons to control their CSS transition delay.
SOURCE: https://tailwindcss.com/docs/transition-delay

LANGUAGE: HTML
CODE:
```
<button class=""transition delay-150 duration-300 ease-in-out ..."">Button A</button><button class=""transition delay-300 duration-300 ease-in-out ..."">Button B</button><button class=""transition delay-700 duration-300 ease-in-out ..."">Button C</button>
```

----------------------------------------

TITLE: Tailwind CSS Interactivity Utilities
DESCRIPTION: Documents Tailwind CSS utility classes for controlling user interaction aspects of elements, including cursor styles, user selection, scroll behavior, and form field appearance.
SOURCE: https://tailwindcss.com/docs/table-layout

LANGUAGE: APIDOC
CODE:
```
accent-color: Utilities for controlling the accent color of UI controls.
appearance: Utilities for controlling the native appearance of UI controls.
caret-color: Utilities for controlling the color of the text input cursor.
color-scheme: Utilities for controlling the color scheme of an element.
cursor: Utilities for controlling the cursor style when hovering over an element.
field-sizing: Utilities for controlling the sizing of form fields.
pointer-events: Utilities for controlling whether an element can be the target of mouse events.
resize: Utilities for controlling whether an element can be resized by the user.
scroll-behavior: Utilities for controlling the scroll behavior of an element.
scroll-margin: Utilities for controlling the scroll margin of an element.
scroll-padding: Utilities for controlling the scroll padding of an element.
scroll-snap-align: Utilities for controlling the scroll snap alignment of an element.
scroll-snap-stop: Utilities for controlling the scroll snap stop behavior.
scroll-snap-type: Utilities for controlling the scroll snap type of an element.
touch-action: Utilities for controlling how an element can be manipulated by touch gestures.
user-select: Utilities for controlling whether the user can select text.
will-change: Utilities for informing the browser about expected changes to an element.
```

----------------------------------------

TITLE: Set Custom Border Color Values in Tailwind CSS
DESCRIPTION: Demonstrates how to apply arbitrary custom color values to borders using bracket notation (`border-[<value>]`) or CSS variables (`border-(<custom-property>)`).
SOURCE: https://tailwindcss.com/docs/border-color

LANGUAGE: HTML
CODE:
```
<div class=""border-[#243c5a] ..."">  <!-- ... --></div>
```

LANGUAGE: HTML
CODE:
```
<div class=""border-(--my-border) ..."">  <!-- ... --></div>
```

----------------------------------------

TITLE: Applying variants to custom utility classes in HTML
DESCRIPTION: Illustrates that custom utility classes, once defined, automatically support Tailwind's variant system (e.g., `hover`, `focus`, responsive variants). This allows for dynamic styling of custom utilities based on various states or breakpoints.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: HTML
CODE:
```
<div class=""hover:content-auto"">  <!-- ... --></div>
```

----------------------------------------

TITLE: HTML Example for Floating Elements with Tailwind CSS
DESCRIPTION: An HTML snippet demonstrating the use of the `float-right` utility class from Tailwind CSS to position an image to the right of its container, allowing text to wrap around it.
SOURCE: https://tailwindcss.com/docs/float

LANGUAGE: HTML
CODE:
```
<article>  <img class=""float-right ..."" src=""/img/mountains.jpg"" />  <p>Maybe we can live without libraries, people like you and me. ...</p></article>
```

----------------------------------------

TITLE: Tailwind CSS Aspect Ratio Utility Classes Reference
DESCRIPTION: Provides a comprehensive reference for Tailwind CSS utility classes used to control the aspect ratio of an element. It includes predefined ratios like square and video, as well as methods for defining custom aspect ratios using arbitrary values or CSS variables.
SOURCE: https://tailwindcss.com/docs/aspect-ratio

LANGUAGE: APIDOC
CODE:
```
Class | Styles
--- | ---
`aspect-<ratio>` | `aspect-ratio: <ratio>;`
`aspect-square` | `aspect-ratio: 1 / 1;`
`aspect-video` | `aspect-ratio: var(--aspect-ratio-video); /* 16 / 9 */`
`aspect-auto` | `aspect-ratio: auto;`
`aspect-(<custom-property>)` | `aspect-ratio: var(<custom-property>);`
`aspect-[<value>]` | `aspect-ratio: <value>;`
```

----------------------------------------

TITLE: Install Tailwind CSS and PostCSS Dependencies
DESCRIPTION: Installs Tailwind CSS, its PostCSS plugin (`@tailwindcss/postcss`), PostCSS itself, and the `postcss-loader` for Webpack using npm. These packages are essential for processing Tailwind CSS with PostCSS.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/emberjs

LANGUAGE: Shell
CODE:
```
npm install tailwindcss @tailwindcss/postcss postcss postcss-loader
```

----------------------------------------

TITLE: CSS Effects Properties Reference
DESCRIPTION: Documentation for CSS properties related to visual effects, including shadows, opacity, and blend modes, often used with Tailwind CSS utilities.
SOURCE: https://tailwindcss.com/docs/background-color

LANGUAGE: APIDOC
CODE:
```
box-shadow
text-shadow
opacity
mix-blend-mode
background-blend-mode
mask-clip
mask-composite
mask-image
mask-mode
mask-origin
mask-position
mask-repeat
mask-size
mask-type
```

----------------------------------------

TITLE: Tailwind CSS Container Utility Configuration
DESCRIPTION: Explains how to customize the `container` utility in Tailwind CSS v4 using the `@utility` directive, as previous configuration options like `center` and `padding` no longer exist.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: CSS
CODE:
```
@utility container {  margin-inline: auto;  padding-inline: 2rem;}
```

----------------------------------------

TITLE: Tailwind CSS Background and Border Utilities
DESCRIPTION: This documentation block details Tailwind CSS utilities for styling an element's background and borders. It includes properties for background attachment, clip, color, image, origin, position, repeat, size, and various border and outline properties.
SOURCE: https://tailwindcss.com/docs/object-fit

LANGUAGE: APIDOC
CODE:
```
### Backgrounds Utilities
- background-attachment
- background-clip
- background-color
- background-image
- background-origin
- background-position
- background-repeat
- background-size

### Borders Utilities
- border-radius
- border-width
- border-color
- border-style
- outline-width
- outline-color
- outline-style
- outline-offset
```

----------------------------------------

TITLE: Apply Basic 2D Rotation with Tailwind CSS
DESCRIPTION: Demonstrates how to rotate an element clockwise by specific degrees using `rotate-<number>` utilities in Tailwind CSS. Examples include `rotate-45`, `rotate-90`, and `rotate-210`.
SOURCE: https://tailwindcss.com/docs/rotate

LANGUAGE: HTML
CODE:
```
<img class=""rotate-45 ..."" src=""/img/mountains.jpg"" /><img class=""rotate-90 ..."" src=""/img/mountains.jpg"" /><img class=""rotate-210 ..."" src=""/img/mountains.jpg"" />
```

----------------------------------------

TITLE: Create a new Astro project
DESCRIPTION: Initializes a new Astro project using the `create astro` CLI tool and navigates into the newly created project directory, setting up the basic project structure.
SOURCE: https://tailwindcss.com/docs/installation/framework-guides/astro

LANGUAGE: Terminal
CODE:
```
npm create astro@latest my-project
cd my-project
```

----------------------------------------

TITLE: Tailwind CSS Outline Utility Default Behavior
DESCRIPTION: Illustrates the change in Tailwind CSS v4 where `outline-<number>` utilities now implicitly set `outline-style: solid`, making `outline` redundant when a width is specified.
SOURCE: https://tailwindcss.com/docs/upgrade-guide

LANGUAGE: HTML
CODE:
```
<input class=""outline outline-2"" /><input class=""outline-2"" />
```

----------------------------------------

TITLE: Tailwind CSS Transitions & Animation Utilities
DESCRIPTION: This section covers CSS properties for controlling animated transitions between states and defining complex animations, including timing, duration, and delay.
SOURCE: https://tailwindcss.com/docs/text-color

LANGUAGE: APIDOC
CODE:
```
CSS Transitions & Animation Properties:

transition-property: Specifies the CSS properties to which a transition effect should be applied.
transition-behavior: Specifies whether a transition should be applied to discrete properties.
transition-duration: Specifies how many seconds or milliseconds a transition effect takes to complete.
transition-timing-function: Specifies the speed curve of the transition effect.
transition-delay: Specifies when the transition effect will start.
animation: A shorthand property for all the animation properties.
```

----------------------------------------

TITLE: Handle Whitespace in Tailwind CSS Arbitrary Values
DESCRIPTION: Illustrates how Tailwind automatically converts underscores (`_`) to spaces in arbitrary values where spaces are valid, such as in grid column definitions, simplifying complex value inputs.
SOURCE: https://tailwindcss.com/docs/adding-custom-styles

LANGUAGE: HTML
CODE:
```
<div class=""grid grid-cols-[1fr_500px_2fr]"">  <!-- ... --></div>
```

----------------------------------------

TITLE: Tailwind CSS Position Utilities API
DESCRIPTION: Documents the Tailwind CSS utility classes for controlling how an element is positioned in the document. It details the `static`, `fixed`, `absolute`, `relative`, and `sticky` classes, explaining their corresponding CSS properties and behavior, including how they affect offsets and act as position references for child elements.
SOURCE: https://tailwindcss.com/docs/position

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Position Utilities:

static
  - Styles: position: static;
  - Description: Positions an element according to the normal flow of the document. Any offsets (top, right, bottom, left) are ignored, and the element will not act as a position reference for absolutely positioned children.

fixed
  - Styles: position: fixed;
  - Description: Positions an element relative to the viewport, meaning it always stays in the same place even if the page is scrolled.

absolute
  - Styles: position: absolute;
  - Description: Positions an element relative to its nearest positioned ancestor (instead of relative to the viewport). If no positioned ancestor exists, it uses the document body and moves along with page scrolling.

relative
  - Styles: position: relative;
  - Description: Positions an element according to the normal flow of the document. Any offsets (top, right, bottom, left) are calculated relative to the element's normal position, and the element will act as a position reference for absolutely positioned children.

sticky
  - Styles: position: sticky;
  - Description: Positions an element based on the user's scroll position. A sticky element toggles between relative and fixed depending on the scroll position. It is positioned relative until a given offset position is met in the viewport, then it 'sticks' in place (like position:fixed).
```

----------------------------------------

TITLE: Tailwind CSS Utility Class Categories and Properties
DESCRIPTION: This section outlines the various categories of Tailwind CSS utility classes and the corresponding CSS properties they manage, providing a quick reference for styling different aspects of web elements.
SOURCE: https://tailwindcss.com/docs/word-break

LANGUAGE: APIDOC
CODE:
```
Tailwind CSS Utility Categories:

Effects:
  - box-shadow: Controls box shadows.
  - text-shadow: Controls text shadows.
  - opacity: Controls element opacity.
  - mix-blend-mode: Controls how an element's content should blend with its background.
  - background-blend-mode: Controls how an element's background images should blend with each other and with the element's background color.
  - mask-clip: Specifies the mask painting area.
  - mask-composite: Specifies the compositing operation used to combine the current mask layer with the mask layers below it.
  - mask-image: Sets the image that is used as a mask layer for an element.
  - mask-mode: Specifies whether the mask image is interpreted as a luminance mask or an alpha mask.
  - mask-origin: Specifies the origin of the mask image.
  - mask-position: Sets the initial position of a mask image.
  - mask-repeat: Sets how mask images are repeated.
  - mask-size: Specifies the size of the mask images.
  - mask-type: Specifies whether a mask element is treated as a luminance mask or an alpha mask.

Filters:
  - filter: Applies graphical effects like blur, brightness, contrast, drop-shadow, grayscale, hue-rotate, invert, saturate, sepia.
  - backdrop-filter: Applies graphical effects to the area behind an element.

Tables:
  - border-collapse: Controls if table borders are collapsed into a single border or separated.
  - border-spacing: Specifies the distance between the borders of adjacent cells in a table.
  - table-layout: Sets the algorithm used to lay out table cells, rows, and columns.
  - caption-side: Specifies the placement of a table caption.

Transitions & Animation:
  - transition-property: Specifies the CSS properties to which a transition effect should be applied.
  - transition-behavior: Defines how transitions behave.
  - transition-duration: Sets the duration of a transition effect.
  - transition-timing-function: Specifies the speed curve of a transition effect.
  - transition-delay: Specifies when a transition effect will start.
  - animation: Applies an animation to an element.

Transforms:
  - backface-visibility: Determines whether the back face of an element is visible when turned towards the user.
  - perspective: Specifies the distance between the user and the z=0 plane, for 3D transforms.
  - perspective-origin: Sets the origin for the perspective property.
  - rotate: Rotates an element.
  - scale: Scales an element.
  - skew: Skews an element.
  - transform: Applies 2D or 3D transformations to an element.
  - transform-origin: Sets the origin for transformations.
  - transform-style: Specifies how nested elements are rendered in 3D space.
  - translate: Translates an element.

Interactivity:
  - accent-color: Sets the accent color for user-interface controls generated by the element.
  - appearance: Controls the native appearance of UI widgets.
  - caret-color: Sets the color of the caret (text input cursor).
  - color-scheme: Specifies the color scheme an element is comfortable with.
  - cursor: Specifies the type of cursor to be displayed.
  - field-sizing: Controls the sizing of form fields.
  - pointer-events: Specifies whether an element is the target of mouse events.
  - resize: Specifies whether an element is resizable by the user.
  - scroll-behavior: Specifies the scrolling behavior for a scrolling box.
  - scroll-margin: Sets the margin of the scroll snap area.
  - scroll-padding: Sets the padding of the scroll snap area.
  - scroll-snap-align: Specifies the snap position for a scroll container.
  - scroll-snap-stop: Specifies whether the scroll container must snap to a snap position.
  - scroll-snap-type: Specifies how strictly snap points are enforced on the scroll container.
  - touch-action: Specifies how a touch-action property should behave.
  - user-select: Controls whether the user can select text.
  - will-change: Hints to browsers about what changes are expected on an element.

SVG:
  - fill: Sets the color of the interior of an SVG shape.
  - stroke: Sets the color of the outline of an SVG shape.
  - stroke-width: Sets the width of the outline of an SVG shape.

Accessibility:
  - forced-color-adjust: Controls how user agents should adjust colors for accessibility purposes.
```","tailwind",""