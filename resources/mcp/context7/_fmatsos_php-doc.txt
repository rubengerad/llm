"context7 mcp","TITLE: Swoole\Server Management API Reference
DESCRIPTION: Comprehensive API documentation for the Swoole\Server class, detailing the `start` method's signature, parameters, and return values. It also references related server control methods like `shutdown` and `stats`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-server.start.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Server::start
  Description: Start the Swoole server.
  Signature: public Swoole\Server::start(): void
  Parameters: This function has no parameters.
  Return Value: void (no value returned)

Related Methods:
  Swoole\Server::shutdown
    Description: Shuts down the Swoole server. (Details not provided in source text)
  Swoole\Server::stats
    Description: Retrieves statistics about the Swoole server. (Details not provided in source text)
```

----------------------------------------

TITLE: Swoole Redis Server API
DESCRIPTION: API documentation for the Swoole\Redis\Server class, outlining methods for formatting data, setting custom handlers, and starting the Redis server instance.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.swoole.html#_snippet_22

LANGUAGE: APIDOC
CODE:
```
Swoole\Redis\Server:
  format(): Description
  setHandler(): Description
  start(): Description
```

----------------------------------------

TITLE: Swoole\Redis\Server Class Methods
DESCRIPTION: Documents the `start` method of the `Swoole\Redis\Server` class, including its signature, parameter details, and return value information. This entry consolidates all available API details for this specific method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-redis-server.start.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Redis\Server::start
  Description: Starts the Redis server instance.
  Signature: public Swoole\Redis\Server::start(): ReturnType
  Parameters: This function has no parameters.
  Return Values: ReturnType (Type not fully documented)
  Warning: This function is currently not documented; only its argument list is available.
```

----------------------------------------

TITLE: ImagickDraw::line Method API Reference
DESCRIPTION: Detailed API documentation for the `ImagickDraw::line` method, which draws a line on an ImagickDraw object. It specifies the required coordinates for the start and end points of the line.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagickdraw.line.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ImagickDraw::line
public ImagickDraw::line(
    float $start_x,
    float $start_y,
    float $end_x,
    float $end_y
): bool

Parameters:
  $start_x: starting x coordinate
  $start_y: starting y coordinate
  $end_x: ending x coordinate
  $end_y: ending y coordinate

Return Values:
  No value is returned. (Note: The signature indicates 'bool', but the documentation states no value is returned.)
```

----------------------------------------

TITLE: PHP Example for Yar_Server RPC Server Setup
DESCRIPTION: Demonstrates how to use `Yar_Server::handle()` to instantiate and start an RPC server in PHP. It defines a simple `API` class with a public method that will be exposed via RPC, then creates a `Yar_Server` instance and calls `handle()` to begin listening for requests.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yar-server.handle.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  class API {
  /**
   * the doc info will be generated automatically into service info page.
   * @params
   * @return
   */
  public function some_method($parameter, $option = ""foo"") {
  }

  protected function client_can_not_see() {
  }
  }

  $service = new Yar_Server(new API());
  $service->handle();
  ?>
```

----------------------------------------

TITLE: Yaf_Application::run Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Yaf_Application::run` method, detailing its role in starting the Yaf application, processing requests, and generating responses. It clarifies the method's signature, lack of parameters, and void return type.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-application.run.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Application::run
  Description: Run a Yaf_Application, let the Yaf_Application accept a request and route this request, dispatch to controller/action and render response. Finally, return the response to the client.
  Signature: public Yaf_Application::run(): void
  Parameters: This function has no parameters.
  Return Values: void
```

----------------------------------------

TITLE: Ds\Set::filter Method API Documentation
DESCRIPTION: Comprehensive API documentation for the `Ds\Set::filter` method, detailing its signature, parameters, return values, and behavior when a callback is provided or omitted.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-set.filter.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
public Ds\Set::filter([callable $callback = ?]): Ds\Set
  - Description: Creates a new set using a callable to determine which values to include.
  - Parameters:
    - $callback: callback(mixed $value): bool
      Optional callable which returns true if the value should be included, false otherwise.
      If a callback is not provided, only values which are true (see converting to boolean) will be included.
  - Return Values:
    A new set containing all the values for which either the callback returned true, or all values that convert to true if a callback was not provided.
```

----------------------------------------

TITLE: Phar::webPhar Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Phar::webPhar` static method, detailing its parameters, functionality, return values, and potential exceptions. This method is crucial for serving web applications directly from a Phar archive by simulating a web server.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.webphar.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::webPhar
final public static Phar::webPhar(
    ?string $alias = null,
    ?string $index = null,
    ?string $fileNotFoundScript = null,
    array $mimeTypes = [],
    ?callable $rewrite = null
): void

Description:
Phar::webPhar() serves as Phar::mapPhar() for web-based phars. This method parses $_SERVER['REQUEST_URI'] and routes a request from a web browser to an internal file within the phar archive. It simulates a web server, routing requests to the correct file, echoing the correct headers and parsing PHP files as needed. Combined with Phar::mungServer() and Phar::interceptFileFuncs(), any web application can be used unmodified from a phar archive. Phar::webPhar() should only be called from the stub of a phar archive.

Parameters:
- alias: ?string (default: null)
  The alias that can be used in phar:// URLs to refer to this archive, rather than its full path.
- index: ?string (default: null)
  The location within the phar of the directory index.
- fileNotFoundScript: ?string (default: null)
  The location of the script to run when a file is not found. This script should output the proper HTTP 404 headers.
- mimeTypes: array (default: [])
  An array mapping additional file extensions to MIME type. If the default mapping is sufficient, pass an empty array.
- rewrite: ?callable (default: null)
  The rewrites function is passed a string as its only parameter and must return a string or false.
  If using fast-cgi or cgi, the parameter is $_SERVER['PATH_INFO']. Otherwise, it's $_SERVER['REQUEST_URI'].
  If a string is returned, it is used as the internal file path. If false is returned, webPhar() sends a HTTP 403 Denied Code.

Return Values:
No value is returned (void).

Errors/Exceptions:
- Throws PharException when unable to open the internal file to output, or if called from a non-stub.
- Throws UnexpectedValueException if an invalid array value is passed into mimeTypes or an invalid callback is passed into rewrite.

Changelog:
- 8.0.0: fileNotFoundScript and rewrite are nullable now.
```

----------------------------------------

TITLE: Example: Get Start Date from DatePeriod Object in PHP
DESCRIPTION: This PHP example demonstrates how to instantiate a `DatePeriod` object using a recurrence rule string and then retrieve its start date using the `getStartDate()` method. The retrieved `DateTime` object is subsequently formatted into ISO8601 string and echoed, showing the initial date of the period.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/dateperiod.getstartdate.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $period = new DatePeriod('R7/2016-05-16T00:00:00Z/P1D');
  $start = $period->getStartDate();
  echo $start->format(DateTime::ISO8601);
?>
```

----------------------------------------

TITLE: PHP Ds\Deque::apply Method API Reference and Example
DESCRIPTION: Detailed API documentation for the `Ds\Deque::apply` method, including its signature, parameters, return values, and a description of its functionality. This method allows in-place transformation of all elements in a deque using a provided callback function. An example demonstrates its usage.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-deque.apply.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Deque::apply
  public Ds\Deque::apply([callable] $callback): void
  Updates all values by applying a callback function to each value in the deque.

  Parameters:
    $callback: callable(mixed $value): mixed
      A callable to apply to each value in the deque.
      The callback should return what the value should be replaced by.

  Return Values:
    void: No value is returned.

  Example #1 Ds\Deque::apply() example:
  <?php
    $deque = new \Ds\Deque([1, 2, 3]);
    $deque->apply(function($value) { return $value * 2; });

    print_r($deque);
  ?>
  Output:
  Ds\Deque Object
  (
      [0] => 2
      [1] => 4
      [2] => 6
  )
```

----------------------------------------

TITLE: PHP Get Doc Comment for a Single Property
DESCRIPTION: This example demonstrates how to use `ReflectionProperty::getDocComment()` to retrieve the doc comment for a single public property of a class. It shows the typical output format for a property with a doc comment.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionproperty.getdoccomment.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  class Str
  {
  /**
  * @var int The length of the string
  */
  public $length = 5;
  }

  $prop = new ReflectionProperty('Str', 'length');

  var_dump($prop->getDocComment());

?>
```

----------------------------------------

TITLE: Yar_Client Constructor and Related Methods API Reference
DESCRIPTION: Comprehensive documentation for the Yar_Client constructor, including its signature, parameters, return values, and related methods like `__call` and `setOpt` for interacting with a Yar RPC server.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yar-client.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yar_Client::__construct(string $url, array $options = ?)
  - Description: Creates a Yar_Client instance to connect to a Yar_Server.
  - Parameters:
    - $url (string): The URL of the Yar Server.
    - $options (array, optional): An associative array of options for the client.
  - Returns: Yar_Client instance.

Related Methods:
Yar_Client::__call()
  - Description: Calls a service method on the remote Yar server.
  - See Also: yar-client.call.html

Yar_Client::setOpt()
  - Description: Sets runtime options for the Yar_Client instance.
  - See Also: yar-client.setopt.html
```

----------------------------------------

TITLE: Ds\Deque::first API Reference
DESCRIPTION: Comprehensive API documentation for the `Ds\Deque::first` method, detailing its signature, purpose, parameters, return value, and potential exceptions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-deque.first.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Deque::first
public Ds\Deque::first(): mixed

Description:
  Returns the first value in the deque.

Parameters:
  This function has no parameters.

Return Values:
  The first value in the deque.

Errors/Exceptions:
  UnderflowException if the deque is empty.
```

----------------------------------------

TITLE: HRTime\StopWatch Class API Reference
DESCRIPTION: Comprehensive API documentation for the HRTime\StopWatch class, including its own methods for managing time measurements (start, stop, get elapsed time/ticks) and inherited static methods from HRTime\PerformanceCounter for general high-resolution time utilities.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.hrtime-stopwatch.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class HRTime\StopWatch extends HRTime\PerformanceCounter {

  // Methods for managing time measurements
  public getElapsedTicks(): int
    - Get elapsed ticks for all intervals recorded by the stopwatch.

  public getElapsedTime(int $unit = ?): float
    - Get elapsed time for all intervals recorded by the stopwatch.
    - Parameters:
      - $unit: Optional. The time unit for the returned value (e.g., HRTime\Unit::NANOSECONDS, HRTime\Unit::MICROSECONDS, etc.).
    - Returns: The total elapsed time as a float.

  public getLastElapsedTicks(): int
    - Get elapsed ticks for the last completed interval.

  public getLastElapsedTime(int $unit = ?): float
    - Get elapsed time for the last completed interval.
    - Parameters:
      - $unit: Optional. The time unit for the returned value.
    - Returns: The elapsed time of the last interval as a float.

  public isRunning(): bool
    - Checks whether the stopwatch measurement is currently active.
    - Returns: True if the stopwatch is running, false otherwise.

  public start(): void
    - Starts the time measurement for the stopwatch.

  public stop(): void
    - Stops the time measurement for the stopwatch, completing the current interval.

  // Inherited static methods from HRTime\PerformanceCounter
  public static HRTime\PerformanceCounter::getFrequency(): int
    - Returns the frequency of the high-resolution performance counter.

  public static HRTime\PerformanceCounter::getTicks(): int
    - Returns the current value of the high-resolution performance counter ticks.

  public static HRTime\PerformanceCounter::getTicksSince(int $start): int
    - Calculates the number of ticks elapsed since a given starting tick value.
    - Parameters:
      - $start: The starting tick value obtained from getTicks().
    - Returns: The number of ticks elapsed since $start.
}
```

----------------------------------------

TITLE: Yaf_Application Class API Documentation
DESCRIPTION: Comprehensive API documentation for the Yaf_Application class, covering its constructor, methods, properties, and singleton pattern implementation. Includes parameter types, return values, and descriptions for each component.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.yaf-application.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Application Class:
  Purpose: Provides a bootstrapping facility for applications with reusable resources, common- and module-based bootstrap classes, and dependency checking. Implements the singleton pattern. Cannot be serialized.

  Properties:
    protected $config: Configuration object.
    protected $dispatcher: Dispatcher object.
    protected static $_app: Static application instance.
    protected $_modules: Array of module names.
    protected $_running: Boolean indicating if the application is running.
    protected $_environ: String representing the current environment.

  Methods:
    __construct(mixed $config, string $envrion = ?): Constructor for Yaf_Application.
      Parameters:
        $config: Application configuration (mixed type).
        $envrion: Environment name (string, optional).
      Returns: void

    app(): Retrieve an Application instance.
      Parameters: none
      Returns: mixed (Yaf_Application instance)

    bootstrap(Yaf_Bootstrap_Abstract $bootstrap = ?): Call bootstrap.
      Parameters:
        $bootstrap: A bootstrap abstract instance (optional).
      Returns: void

    clearLastError(): Clear the last error info.
      Parameters: none
      Returns: Yaf_Application (instance of Yaf_Application)

    environ(): Retrive environ.
      Parameters: none
      Returns: void

    execute(callable $entry, string ...$args): Execute a callback.
      Parameters:
        $entry: The callback to execute (callable).
        ...$args: Additional arguments for the callback (string).
      Returns: void

    getAppDirectory(): Get the application directory.
      Parameters: none
      Returns: Yaf_Application (instance of Yaf_Application)

    getConfig(): Retrive the config instance.
      Parameters: none
      Returns: Yaf_Config_Abstract (instance of Yaf_Config_Abstract)

    getDispatcher(): Get Yaf_Dispatcher instance.
      Parameters: none
      Returns: Yaf_Dispatcher (instance of Yaf_Dispatcher)

    getLastErrorMsg(): Get message of the last occurred error.
      Parameters: none
      Returns: string (error message)

    getLastErrorNo(): Get code of last occurred error.
      Parameters: none
      Returns: int (error code)

    getModules(): Get defined module names.
      Parameters: none
      Returns: array (array of module names)

    run(): Start Yaf_Application.
      Parameters: none
      Returns: void

    setAppDirectory(string $directory): Change the application directory.
      Parameters:
        $directory: The new application directory path (string).
      Returns: Yaf_Application (instance of Yaf_Application)

    __destruct(): The __destruct purpose.
      Parameters: none
      Returns: void
```

----------------------------------------

TITLE: Example: Get Thread ID in PHP pthreads
DESCRIPTION: Demonstrates how to retrieve the unique numeric ID of a thread using the `getThreadId()` method within a `Thread` class extension in PHP. The example creates a new thread, starts it, and prints its ID.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/thread.getthreadid.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
class My extends Thread {
  public function run() {
    printf(""%s is Thread #%lu\n"", __CLASS__, $this->getThreadId());
  }
}
$my = new My();
$my->start();
?>
```

----------------------------------------

TITLE: Yar_Server::handle Method API Documentation
DESCRIPTION: Documents the `Yar_Server::handle` method, which initiates an RPC HTTP server. It clarifies that RPC calls are typically HTTP POST requests, while HTTP GET requests to the server URI will display service information.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yar-server.handle.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yar_Server::handle(): bool
  - Description: Start a RPC HTTP server, and ready for accpet RPC requests.
  - Parameters: This function has no parameters.
  - Return Values: boolean
  - Notes:
    - Usual RPC calls will be issued as HTTP POST requests.
    - If a HTTP GET request is issued to the uri, the service information will be printed on the page.
```

----------------------------------------

TITLE: PHP Example: Using mysql_xdevapi\Session::commit for Transactions
DESCRIPTION: This PHP example demonstrates the usage of `mysql_xdevapi\Session::commit` within a transaction. It shows how to establish a session, get a collection, start a transaction, add data, set a savepoint, commit the transaction, and finally close the session.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-session.commit.html#_snippet_1

LANGUAGE: PHP
CODE:
```
$session = mysql_xdevapi\getSession(""mysqlx://user:password@localhost"");
$collection = $session->getSchema(""addressbook"")->getCollection(""friends"");

$session->startTransaction();

$collection->add('{""John"":42, ""Sam"":33}')->execute();
$savepoint = $session->setSavepoint();

$session->commit();
$session->close();
```

----------------------------------------

TITLE: Zend Engine C API: `zend_call_method` Prototype
DESCRIPTION: This API documentation provides the C prototype for the `zend_call_method` function, which is part of the Zend Engine's C API. It is used to call PHP methods from C code. The prototype highlights its parameters, including the object, class entry, function name, return value pointer, and a limited number of arguments.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysqlnd.plugin.developing.html#_snippet_3

LANGUAGE: APIDOC
CODE:
```
ZEND_API zval* zend_call_method(
  zval **object_pp, zend_class_entry *obj_ce,
  zend_function **fn_proxy, char *function_name,
  int function_name_len, zval **retval_ptr_ptr,
  int param_count, zval* arg1, zval* arg2 TSRMLS_DC
);
```

----------------------------------------

TITLE: GearmanTask Class API Reference
DESCRIPTION: This snippet provides a detailed API reference for the GearmanTask class, including its constructor and all public methods. Each method's signature, return type, and a brief description are provided.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.gearmantask.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class GearmanTask {
  __construct()
    - Description: Creates a new GearmanTask instance.

  data(): false|string
    - Description: Retrieves the data returned for a task.
    - Returns: The data as a string, or false on failure.

  dataSize(): int|false
    - Description: Gets the size of the data returned for a task.
    - Returns: The size of the data in bytes as an integer, or false on failure.

  functionName(): false|string
    - Description: Retrieves the name of the function associated with the task.
    - Returns: The function name as a string, or false on failure.

  isKnown(): bool
    - Description: Determines if the task is known to the Gearman job server.
    - Returns: True if the task is known, false otherwise.

  isRunning(): bool
    - Description: Checks whether the task is currently running.
    - Returns: True if the task is running, false otherwise.

  jobHandle(): false|string
    - Description: Retrieves the job handle for the task.
    - Returns: The job handle as a string, or false on failure.

  recvData(int $data_len): false|array
    - Description: Reads work or result data into a buffer for a task.
    - Parameters:
      - $data_len (int): The maximum length of data to receive.
    - Returns: An array containing the data and its length, or false on failure.

  returnCode(): int
    - Description: Gets the last return code from the Gearman server for this task.
    - Returns: An integer representing the return code.

  sendWorkload(string $data): int|false
    - Description: Sends workload data for a task.
    - Parameters:
      - $data (string): The data to send as workload.
    - Returns: The number of bytes sent as an integer, or false on failure.

  taskDenominator(): false|int
    - Description: Gets the completion percentage denominator for the task.
    - Returns: The denominator as an integer, or false if not available.

  taskNumerator(): false|int
    - Description: Gets the completion percentage numerator for the task.
    - Returns: The numerator as an integer, or false if not available.

  unique(): false|string
    - Description: Retrieves the unique identifier for the task.
    - Returns: The unique identifier as a string, or false on failure.
}
```

----------------------------------------

TITLE: Building a Simple HTTP Server with PHP EventHttp
DESCRIPTION: This comprehensive example demonstrates how to create a basic HTTP server in PHP using the `EventHttp` class. It sets up request handlers for specific paths (`/dump`, `/about`) and a default callback for unknown routes, allowing the server to process incoming GET and POST requests. The server illustrates how to read request data, send replies, and manage input buffers.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/event.examples.html#_snippet_7

LANGUAGE: php
CODE:
```
<?php   /*
  * Simple HTTP server.
  *
  * To test it:
  * 1) Run it on a port of your choice, e.g.:
  * $ php examples/http.php 8010
  * 2) In another terminal connect to some address on this port
  * and make GET or POST request(others are turned off here), e.g.:
  * $ nc -t 127.0.0.1 8010
  * POST /about HTTP/1.0
  * Content-Type: text/plain
  * Content-Length: 4
  * Connection: close
  * (press Enter)
  *
  * It will output
  * a=12
  * HTTP/1.0 200 OK
  * Content-Type: text/html; charset=ISO-8859-1
  * Connection: close
  *
  * $ nc -t 127.0.0.1 8010
  * GET /dump HTTP/1.0
  * Content-Type: text/plain
  * Content-Encoding: UTF-8
  * Connection: close
  * (press Enter)
  *
  * It will output:
  * HTTP/1.0 200 OK
  * Content-Type: text/html; charset=ISO-8859-1
  * Connection: close
  * (press Enter)
  *
  * $ nc -t 127.0.0.1 8010
  * GET /unknown HTTP/1.0
  * Connection: close
  *
  * It will output:
  * HTTP/1.0 200 OK
  * Content-Type: text/html; charset=ISO-8859-1
  * Connection: close
  *
  * 3) See what the server outputs on the previous terminal window.
  */

  function _http_dump($req, $data) {
  static $counter = 0;
  static $max_requests = 2;

  if (++$counter >= $max_requests) {
  echo ""Counter reached max requests $max_requests. Exiting\n"";
  exit();
  }

  echo __METHOD__, "" called\n"";
  echo ""request:""; var_dump($req);
  echo ""data:""; var_dump($data);

  echo ""\n===== DUMP =====\n"";
  echo ""Command:"", $req->getCommand(), PHP_EOL;
  echo ""URI:"", $req->getUri(), PHP_EOL;
  echo ""Input headers:""; var_dump($req->getInputHeaders());
  echo ""Output headers:""; var_dump($req->getOutputHeaders());

  echo ""\n >> Sending reply ..."";
  $req->sendReply(200, ""OK"");
  echo ""OK\n"";

  echo ""\n >> Reading input buffer ...\n"";
  $buf = $req->getInputBuffer();
  while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {
  echo $s, PHP_EOL;
  }
  echo ""No more data in the buffer\n"";
  }

  function _http_about($req) {
  echo __METHOD__, PHP_EOL;
  echo ""URI: "", $req->getUri(), PHP_EOL;
  echo ""\n >> Sending reply ..."";
  $req->sendReply(200, ""OK"");
  echo ""OK\n"";
  }

  function _http_default($req, $data) {
  echo __METHOD__, PHP_EOL;
  echo ""URI: "", $req->getUri(), PHP_EOL;
  echo ""\n >> Sending reply ..."";
  $req->sendReply(200, ""OK"");
  echo ""OK\n"";
  }

  $port = 8010;
  if ($argc > 1) {
  $port = (int) $argv[1];
  }
  if ($port <= 0 || $port > 65535) {
  exit(""Invalid port"");
  }

  $base = new EventBase();
  $http = new EventHttp($base);
  $http->setAllowedMethods(EventHttpRequest::CMD_GET | EventHttpRequest::CMD_POST);

  $http->setCallback(""/dump"", ""_http_dump"", array(4, 8));
  $http->setCallback(""/about"", ""_http_about"");
  $http->setDefaultCallback(""_http_default"", ""custom data value"");

  $http->
```

----------------------------------------

TITLE: Pool::submitTo Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Pool::submitTo` method, including its signature, parameter descriptions, return values, and behavior notes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/pool.submitTo.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Pool::submitTo
  Description: Submits a task to the specified worker in the pool for execution.
  Signature: public Pool::submitTo(int $worker, Threaded $task): int
  Parameters:
    $worker (int): The zero-indexed identifier of the worker to which the task should be submitted.
    $task (Threaded): The task object (an instance of a class extending Threaded) to be executed by the worker.
  Return Values:
    int: The identifier of the worker that successfully accepted the task.
  Notes:
    - Workers are indexed from 0.
    - Workers are lazily spawned; they only exist if the pool has needed to create them.
    - Attempting to submit a task to a non-existent worker will result in a Fatal error.
```

----------------------------------------

TITLE: PHP Example: Accessing Ds\Vector Elements with get() Method
DESCRIPTION: Demonstrates how to retrieve elements from a `Ds\Vector` using the `get()` method. This example initializes a vector and then uses `get()` with different indices to fetch and display the corresponding values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-vector.get.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $vector = new \Ds\Vector([""a"", ""b"", ""c""]);

  var_dump($vector->get(0));
  var_dump($vector->get(1));
  var_dump($vector->get(2));
?>
```

----------------------------------------

TITLE: PHP EvFork::__construct API Reference
DESCRIPTION: Comprehensive documentation for the EvFork::__construct method, including its signature, parameters, their types, default values, and descriptions. This constructor initializes and automatically starts an EvFork watcher.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/evfork.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EvFork::__construct

public EvFork::__construct( callable $callback , mixed $data = null , int $priority = 0 )

Description:
Constructs the EvFork watcher object and starts the watcher automatically.

Parameters:
- $callback (callable): See Watcher callbacks.
- $data (mixed, optional, default: null): Custom data associated with the watcher.
- $priority (int, optional, default: 0): Watcher priority.

See Also:
- EvLoop::fork(): Creates EvFork watcher object associated with the current event loop instance
- EvCheck
```

----------------------------------------

TITLE: PHP CUBRID: Get Number of Rows and Columns Example
DESCRIPTION: This example demonstrates how to connect to a CUBRID database, execute a SELECT query, and then use `cubrid_num_rows()` to get the number of rows in the result set and `cubrid_num_cols()` to get the number of columns. Finally, it disconnects from the database.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-num-rows.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $conn = cubrid_connect(""localhost"", 33000, ""demodb"", ""dba"");

  $req = cubrid_execute($conn, ""SELECT * FROM code"");

  $row_num = cubrid_num_rows($req);
  $col_num = cubrid_num_cols($req);

  printf(""Row Num: %d\nColumn Num: %d\n"", $row_num, $col_num);

  cubrid_disconnect($conn);
?>
```

----------------------------------------

TITLE: PHP COMPersistHelper::LoadFromFile Method API
DESCRIPTION: Comprehensive API documentation for the `COMPersistHelper::LoadFromFile` method, including its signature, parameter details, expected return values, and specific error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/compersisthelper.loadfromfile.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
COMPersistHelper::LoadFromFile
  Description: Opens the specified file and initializes an object from the file contents.
  Signature: public bool COMPersistHelper::LoadFromFile(string $filename, int $flags = 0)
  Parameters:
    $filename (string): The name of the file from which to load the object.
    $flags (int, default: 0): The access mode to be used when opening the file. Possible values are taken from the STGM enumeration (https://docs.microsoft.com/en-us/windows/win32/stg/stgm-constants). The method can treat this value as a suggestion, adding more restrictive permissions if necessary. If flags is 0, the implementation is supposed to open the file using whatever default permissions are used when a user opens the file.
  Return Values:
    bool: Returns true on success or false on failure.
  Errors/Exceptions:
    com_exception: Thrown if the associated object does not implement the COM interface IPersistFile, or when calling the IPersistFile::Load() method failed.
```

----------------------------------------

TITLE: PHP XMLWriter: Basic Start Attribute Usage Example
DESCRIPTION: This PHP example demonstrates how to use `XMLWriter::startAttribute()` to add an attribute to an XML element. It shows the process of opening a URI, starting a document, creating an element, starting and ending an attribute, and adding text content to it.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/xmlwriter.startattribute.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $writer = new XMLWriter;
  $writer->openURI('php://output');
  $writer->startDocument('1.0', 'UTF-8');
  $writer->startElement('element');
  $writer->startAttribute('attribute');
  $writer->text('value');
  $writer->endAttribute();
  $writer->endElement();
  $writer->endDocument();
```

----------------------------------------

TITLE: PHP Example: Using CollectionFind::lockExclusive for Document Locking
DESCRIPTION: Demonstrates how to use `mysql_xdevapi\CollectionFind::lockExclusive` within a PHP application. The example shows establishing a session, getting a schema and collection, starting a transaction, finding documents, applying an exclusive lock, performing an operation, and committing the transaction to release the lock.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-collectionfind.lockexclusive.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$session = mysql_xdevapi\getSession(""mysqlx://user:password@localhost"");

$schema = $session->getSchema(""addressbook"");
$collection = $schema->createCollection(""people"");

$session->startTransaction();

$result = $collection
->find(""age > 50"")
->lockExclusive()
->execute();

// ... do an operation on the object

// Complete the transaction and unlock the document
$session->commit();
?>
```

----------------------------------------

TITLE: Swoole\Process::write API Reference
DESCRIPTION: Comprehensive API documentation for the `Swoole\Process::write` method, detailing its purpose, signature, parameters, and return values for inter-process communication.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-process.write.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Process::write

Description:
  Writes data into the pipe and communicates with the parent process or child processes.

Signature:
  public Swoole\Process::write(string $data): int

Parameters:
  $data (string): The data to be written to the pipe.

Return Values:
  int: The number of bytes successfully written to the pipe.
```

----------------------------------------

TITLE: Get Fully Qualified Constant Name in PHP
DESCRIPTION: This PHP example demonstrates how to use the `ReflectionConstant::getName()` method to retrieve the fully qualified name of a constant, including its namespace, using PHP's Reflection API.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionconstant.getname.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  namespace Foo;

  const BAR = 'bar';

  echo (new \ReflectionConstant('Foo\BAR'))->getName();
?>
```

----------------------------------------

TITLE: Componere\Method::__construct API Reference
DESCRIPTION: Provides the API documentation for the `Componere\Method` class constructor, including its signature and parameter details for creating new methods from a Closure.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/componere-method.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Componere\Method::__construct
  Description: Method Construction
  Signature: public Componere\Method::__construct(Closure $closure)
  Parameters:
    $closure (Closure): A Closure object representing the method's body.
  Availability: Componere 2 >= 2.1.0
```

----------------------------------------

TITLE: Phar::mungServer API Reference
DESCRIPTION: Comprehensive API documentation for the `Phar::mungServer` static method. It details the method signature, its purpose in modifying `$_SERVER` variables for phar execution, accepted parameters, return type, and potential exceptions. It also lists related methods for context.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.mungserver.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Phar::mungServer
  final public static Phar::mungServer([array] $variables): [void]

  Description:
    Defines a list of up to 4 $_SERVER variables that should be modified for execution within the stub of a phar archive. Variables that can be modified to remove traces of phar execution are REQUEST_URI, PHP_SELF, SCRIPT_NAME, and SCRIPT_FILENAME. This method only takes effect when combined with Phar::webPhar() and when the requested file is a PHP file to be parsed. The original values of modified variables are stored in the $_SERVER array with 'PHAR_' prepended (e.g., SCRIPT_NAME becomes PHAR_SCRIPT_NAME).

  Parameters:
    $variables (array): An array containing strings of the $_SERVER variables to modify. Valid values are 'REQUEST_URI', 'PHP_SELF', 'SCRIPT_NAME', and 'SCRIPT_FILENAME'. The method is case-sensitive, and other values will trigger an exception.

  Return Values:
    void: This method does not return any value.

  Errors/Exceptions:
    UnexpectedValueException: Thrown if any problems are found with the data passed in the $variables array (e.g., invalid variable names).

  See Also:
    Phar::webPhar(): Routes a request from a web browser to an internal file within the phar archive.
    Phar::setStub(): Used to set the PHP loader or bootstrap stub of a Phar archive.
```

----------------------------------------

TITLE: PHP Example: Checking Thread Started State with Thread::isStarted
DESCRIPTION: This PHP example demonstrates how to use the `Thread::isStarted` method to verify if a `Worker` thread has been successfully started. It instantiates a `Worker`, calls its `start()` method, and then uses `var_dump()` to display the boolean result returned by `isStarted()`, which will be `true` if the thread has started.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/thread.isstarted.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $worker = new Worker();
  $worker->start();
  var_dump($worker->isStarted());
?>
```

----------------------------------------

TITLE: Get CUBRID LOB Data Size Example in PHP
DESCRIPTION: This PHP example demonstrates how to retrieve a BLOB/CLOB from a CUBRID database using `cubrid_lob_get`, get its size using `cubrid_lob_size`, export it to a file using `cubrid_lob_export`, and then close the LOB resources using `cubrid_lob_close`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-lob-size.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $lobs = cubrid_lob_get($con, ""SELECT doc_content FROM doc WHERE doc_id=5"");
  echo ""Doc size:"".cubrid_lob_size($lobs[0]);
  cubrid_lob_export($conn, $lobs[0], ""doc_5.txt"");
  cubrid_lob_close($lobs);
  ?>
```

----------------------------------------

TITLE: Phar::extractTo Method API Reference
DESCRIPTION: Detailed API documentation for the `Phar::extractTo` method, including its signature, parameters, return values, and error handling.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.extractto.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::extractTo(string $directory, array|string|null $files = null, bool $overwrite = false): bool
  - Description: Extracts all files within a phar archive to disk. Extracted files and directories preserve permissions as stored in the archive. The optional parameters allow control over which files are extracted, and whether existing files on disk can be overwritten.
  - Parameters:
    - $directory (string): Path to extract the given files to.
    - $files (array|string|null, optional): The name of a file or directory to extract, or an array of names of files and directories to extract. Use `null` to skip this parameter and extract all files. Defaults to `null`.
    - $overwrite (bool, optional): Set to `true` to enable overwriting existing files. Defaults to `false`.
  - Return Values:
    - bool: Returns `true` on success. It is better to check for thrown exceptions and assume success if none is thrown.
  - Errors/Exceptions:
    - Throws `PharException` if errors occur while flushing changes to disk.
  - Notes:
    - Windows NTFS file systems do not support certain characters in filenames (e.g., `<|>*?"":`) or trailing dots. This method fails to extract such files rather than replacing characters.
  - See Also:
    - `PharData::extractTo()`
```

----------------------------------------

TITLE: Get Current Time with PHP gettimeofday() Example
DESCRIPTION: This example demonstrates how to use the `gettimeofday()` function in PHP. It shows the default behavior of returning an associative array with time components and also how to get the time as a float by passing `true` as an argument.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.gettimeofday.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  print_r(gettimeofday());

  echo gettimeofday(true);
?>
```

----------------------------------------

TITLE: PHP Example: Sending an HTTP GET Request with EventHttpConnection
DESCRIPTION: This PHP example demonstrates how to use `EventHttpConnection::makeRequest` to send an HTTP GET request to a local server. It includes setting up an `EventBase`, creating an `EventHttpConnection`, configuring an `EventHttpRequest` with headers, and defining a callback function to handle the response or timeout.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttpconnection.makerequest.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  function _request_handler($req, $base) {
  echo __FUNCTION__, PHP_EOL;

  if (is_null($req)) {
  echo ""Timed out\n"";
  } else {
  $response_code = $req->getResponseCode();

  if ($response_code == 0) {
  echo ""Connection refused\n"";
  } elseif ($response_code != 200) {
  echo ""Unexpected response: $response_code\n"";
  } else {
  echo ""Success: $response_code\n"";
  $buf = $req->getInputBuffer();
  echo ""Body:\n"";
  while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {
  echo $s, PHP_EOL;
  }
  }
  }

  $base->exit(NULL);
  }

  $address = ""127.0.0.1"";
  $port = 80;

  $base = new EventBase();
  $conn = new EventHttpConnection($base, NULL, $address, $port);
  $conn->setTimeout(5);
  $req = new EventHttpRequest(""_request_handler"", $base);

  $req->addHeader(""Host"", $address, EventHttpRequest::OUTPUT_HEADER);
  $req->addHeader(""Content-Length"", ""0"", EventHttpRequest::OUTPUT_HEADER);
  $conn->makeRequest($req, EventHttpRequest::CMD_GET, ""/index.cphp"");

  $base->loop();
?>
```

----------------------------------------

TITLE: Swoole\Http\Client Class API Reference
DESCRIPTION: Comprehensive API documentation for the `Swoole\Http\Client` class, providing methods for asynchronous HTTP requests, file uploads/downloads, event handling, and connection management.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.swoole-http-client.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class Swoole\Http\Client {

  /* Properties */
  public $errCode;
  public $sock;

  /* Methods */
  public addFile(
    string $path,
    string $name,
    string $type = ?,
    string $filename = ?,
    string $offset = ?
  ): void

  public close(): void

  public __destruct(): void

  public download(
    string $path,
    string $file,
    callable $callback,
    int $offset = ?
  ): void

  public execute(string $path, string $callback): void

  public get(string $path, callable $callback): void

  public isConnected(): bool

  public on(string $event_name, callable $callback): void

  public post(string $path, string $data, callable $callback): void

  public push(string $data, string $opcode = ?, string $finish = ?): void

  public set(array $settings): void

  public setCookies(array $cookies): void

  public setData(string $data): ReturnType

  public setHeaders(array $headers): void

  public setMethod(string $method): void

  public upgrade(string $path, string $callback): void

}
```

----------------------------------------

TITLE: PHP NumberFormatter Get and Set Text Attribute Examples
DESCRIPTION: These examples demonstrate how to use both the procedural (`numfmt_get_text_attribute`) and object-oriented (`NumberFormatter::getTextAttribute`) styles to retrieve and modify text attributes of a NumberFormatter object. Specifically, it shows how to get and set the negative prefix.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/numberformatter.gettextattribute.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
  $fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
  echo ""Prefix: "".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX).""\n"";
  echo numfmt_format($fmt, -1234567.891234567890000).""\n"";
  numfmt_set_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX, ""MINUS"");
  echo ""Prefix: "".numfmt_get_text_attribute($fmt, NumberFormatter::NEGATIVE_PREFIX).""\n"";
  echo numfmt_format($fmt, -1234567.891234567890000).""\n"";
?>
```

LANGUAGE: PHP
CODE:
```
<?php
  $fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
  echo ""Prefix: "".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX).""\n"";
  echo $fmt->format(-1234567.891234567890000).""\n"";
  $fmt->setTextAttribute(NumberFormatter::NEGATIVE_PREFIX, ""MINUS"");
  echo ""Prefix: "".$fmt->getTextAttribute(NumberFormatter::NEGATIVE_PREFIX).""\n"";
  echo $fmt->format(-1234567.891234567890000).""\n"";
?>
```

----------------------------------------

TITLE: Ds\Queue::toArray Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Ds\Queue::toArray` method, detailing its signature, functionality, parameters, return values, and important usage notes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-queue.toarray.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Ds\Queue::toArray

Signature:
  public Ds\Queue::toArray(): array

Description:
  Converts the queue to an array.

Availability:
  PECL ds >= 1.0.0

Parameters:
  This function has no parameters.

Return Values:
  An array containing all the values in the same order as the queue.

Notes:
  - Casting to an array is not supported yet.
  - This method is not destructive.
```

----------------------------------------

TITLE: PHP Example: Retrieving Class Doc Comment with ReflectionClass
DESCRIPTION: Demonstrates how to use `ReflectionClass::getDocComment` to retrieve the doc comment for a `TestClass`. The example defines a simple class with a multi-line doc comment and then uses reflection to instantiate the class and extract its documentation comment, which is then dumped.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionclass.getdoccomment.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  /**
   * A test class
   *
   * @param foo bar
   * @return baz
   */
  class TestClass { }

  $rc = new ReflectionClass('TestClass');
  var_dump($rc->getDocComment());
?>
```

----------------------------------------

TITLE: SVM Class API Reference
DESCRIPTION: This section details the core methods of the SVM class, including how to initialize it, train models from various data sources, make predictions on new data, and manage model persistence by saving and loading them from files.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/svm.examples.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SVM::__construct()
  - Initializes a new SVM object.

SVM::train(data: array|string): SVMModel
  - Trains an SVM model from the provided data.
  - Parameters:
    - data: An array of arrays (each sub-array: [class, feature_id => value]) or a string representing a file path/stream.
      - File/Stream Format: One line per training example, formatted as 'integer_class feature_id:value [feature_id:value ...]'. Features are integers, values are floats (usually 0-1 scaled).
      - Array Format: Each sub-array must have the class as the first element, followed by key => value pairs for feature values.
  - Returns: An SVMModel object if successful.

SVMModel::predict(data: array): int
  - Makes a prediction on previously unseen data using the trained model.
  - Parameters:
    - data: An array of key => value pairs for the features, in the same format as training data but without the class label.
  - Returns: The predicted class (integer).

SVMModel::save(file_location: string): bool
  - Saves the trained SVM model to a specified file location.
  - Parameters:
    - file_location: The path where the model should be saved.
  - Returns: True on success, false on failure.

SVM::load(file_location: string): SVMModel
  - Restores an SVM model from a saved file.
  - Parameters:
    - file_location: The path to the saved model file.
  - Returns: The loaded SVMModel object.
```

----------------------------------------

TITLE: Yaf_Request_Simple Class Methods
DESCRIPTION: Documentation for methods of the Yaf_Request_Simple class, providing access to various request parameters like GET, POST, COOKIE, and FILES.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_18

LANGUAGE: APIDOC
CODE:
```
Yaf_Request_Simple::__construct()
  - Constructor of Yaf_Request_Simple
Yaf_Request_Simple::get()
  - The get purpose
Yaf_Request_Simple::getCookie()
  - The getCookie purpose
Yaf_Request_Simple::getFiles()
  - The getFiles purpose
Yaf_Request_Simple::getPost()
  - The getPost purpose
Yaf_Request_Simple::getQuery()
  - The getQuery purpose
Yaf_Request_Simple::getRequest()
  - The getRequest purpose
Yaf_Request_Simple::isXmlHttpRequest()
  - Determin if request is AJAX request
```

----------------------------------------

TITLE: PHP Example: Using imagesy() to Get Image Height
DESCRIPTION: This example demonstrates how to create a new true color image using `imagecreatetruecolor()` and then retrieve its height using the `imagesy()` function, printing the result.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.imagesy.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
// create a 300*200 image
$img = imagecreatetruecolor(300, 200);

echo imagesy($img); // 200
?>
```

----------------------------------------

TITLE: GearmanClient::addServer Method API Reference
DESCRIPTION: Comprehensive API documentation for the `GearmanClient::addServer` method, outlining its signature, parameters, return values, and purpose of adding a job server to the client's internal list without immediate network I/O.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/gearmanclient.addserver.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
public GearmanClient::addServer([string] $host = null, [int] $port = 0, [bool] $setupExceptionHandler = true): bool
  - Adds a job server to a list of servers that can be used to run a task. No socket I/O happens here; the server is simply added to the list.
  - Parameters:
    - $host: The job server host name.
    - $port: The job server port.
  - Return Values:
    - Returns true on success or false on failure.
  - See Also:
    - GearmanClient::addServers()
```

----------------------------------------

TITLE: PHP Manually Dispatching Zookeeper Callbacks
DESCRIPTION: This example demonstrates how to manually call `zookeeper_dispatch()` within a loop to process pending callbacks from Zookeeper operations. It establishes a connection to a Zookeeper server and sets up a `get` operation with a callback, then continuously dispatches callbacks.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.zookeeper-dispatch.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $client = new Zookeeper();
  $client->connect('localhost:2181');
  $client->get('/zookeeper', function() {
    echo ""Callback was called"".PHP_EOL;
  });
  while(true) {
    sleep(1);
    zookeeper_dispatch();
  }
?>
```

----------------------------------------

TITLE: PHP Get Collator Strength Example
DESCRIPTION: This example demonstrates the usage of the `collator_get_strength()` procedural function in PHP. It shows how to create a `Collator` instance for a specific locale ('en_US') and then retrieve its current collation strength.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/collator.getstrength.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $coll = collator_create( 'en_US' );
  $strength = collator_get_strength( $coll );
?>
```

----------------------------------------

TITLE: Yaf_Request_Http Class Constructor API Reference
DESCRIPTION: Provides a detailed API reference for the Yaf_Request_Http class constructor, outlining its method signature, expected parameters, and return behavior. This constructor initializes an HTTP request object.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-request-http.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Request_Http::__construct
  Description: Constructor for the Yaf_Request_Http class.
  Availability: Yaf >=1.0.0
  Signature: public Yaf_Request_Http::__construct([string] $request_uri = ?, [string] $base_uri = ?)
  Parameters:
    $request_uri: (string, optional) The request URI. This parameter is optional.
    $base_uri: (string, optional) The base URI. This parameter is optional.
  Return Values: None (Constructors do not return a value, they initialize an object.)
```

----------------------------------------

TITLE: SeasLog::analyzerDetail API Reference
DESCRIPTION: Comprehensive API documentation for the `SeasLog::analyzerDetail` static method, including its signature, parameters, return values, and specific notes regarding its behavior and limitations.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/seaslog.analyzerdetail.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SeasLog::analyzerDetail
public static SeasLog::analyzerDetail(
    string $level,
    string $log_path = ?,
    string $key_word = ?,
    int $start = ?,
    int $limit = ?,
    int $order = ?
): mixed

Description:
Get log detail by level, log_path, key_word, start, limit, order. SeasLog gets results of `grep -ai '{level}' | grep -ai '{key_word}' | sed -n '{start},{limit}'p` using system pipe and returns an array to PHP.

Parameters:
- $level (string): The log information level.
- $log_path (string, optional): The log information path.
- $key_word (string, optional): The search key word for log information.
- $start (int, optional): Default is `1`.
- $limit (int, optional): Default is `20`.
- $order (int, optional): Default is `SEASLOG_DETAIL_ORDER_ASC`. See also: `SEASLOG_DETAIL_ORDER_ASC`, `SEASLOG_DETAIL_ORDER_DESC`.

Return Values:
Returns results as an array.

Notes:
When `start` and `limit` are not NULL and running on Windows, SeasLog will throw an exception with the message 'Param start and limit don't support Windows'.

Related Methods:
- SeasLog::analyzerCount()
```

----------------------------------------

TITLE: PHP: Get and Set Session Cache Expiration
DESCRIPTION: This example demonstrates how to use `session_cache_expire()` to retrieve and set the session cache expiration time in minutes. It also shows how `session_cache_limiter()` can be used to control the cache limiter type before starting a session, illustrating the interaction between session configuration functions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.session-cache-expire.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
      /* set the cache limiter to 'private' */
      session_cache_limiter('private');
   $cache_limiter = session_cache_limiter();

      /* set the cache expire to 30 minutes */
   session_cache_expire(30);
   $cache_expire = session_cache_expire();

      /* start the session */
      session_start();

      echo ""The cache limiter is now set to $cache_limiter<br />"";
   echo ""The cached session pages expire after $cache_expire minutes"";
   ?>
```

----------------------------------------

TITLE: PHP: Get Locale Display Script (Object-Oriented Example)
DESCRIPTION: Illustrates the usage of the `Locale::getDisplayScript` static method in PHP to obtain the localized display name for a script, with examples for English, French, and German output.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/locale.getdisplayscript.html#_snippet_2

LANGUAGE: PHP
CODE:
```
<?php
  echo Locale::getDisplayScript('sl-Latn-IT-nedis', 'en');
  echo "";\n"";
  echo Locale::getDisplayScript('sl-Latn-IT-nedis', 'fr');
  echo "";\n"";
  echo Locale::getDisplayScript('sl-Latn-IT-nedis', 'de');
?>
```

----------------------------------------

TITLE: QuickHashIntStringHash::add API Reference
DESCRIPTION: Provides the formal API documentation for the QuickHashIntStringHash::add method, detailing its signature, parameters, return values, and behavior regarding duplicate entries based on the hash's configuration.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/quickhashintstringhash.add.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
QuickHashIntStringHash::add
public QuickHashIntStringHash::add(int $key, string $value): bool

Description:
This method adds a new entry to the hash, and returns whether the entry was added. Entries are by default always added unless QuickHashIntStringHash::CHECK_FOR_DUPES has been passed when the hash was created.

Parameters:
$key (int): The key of the entry to add.
$value (string): The value of the entry to add. If a non-string is passed, it will be converted to a string automatically if possible.

Return Values:
bool: true when the entry was added, and false if the entry was not added.

Related Constants:
QuickHashIntStringHash::CHECK_FOR_DUPES: Constant used during hash creation to enable duplicate checking.
```

----------------------------------------

TITLE: Get CUBRID Column Types Example in PHP
DESCRIPTION: This PHP example demonstrates how to connect to a CUBRID database, execute a query, and then retrieve and display the column names, types, and maximum lengths using `cubrid_column_names`, `cubrid_column_types`, and `cubrid_field_len` functions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-column-types.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $conn = cubrid_connect(""localhost"", 33000, ""demodb"", ""dba"");
  $result = cubrid_execute($conn, ""SELECT * FROM game WHERE host_year=2004 AND nation_code='AUS' AND medal='G'"");

  $column_names = cubrid_column_names($result);
  $column_types = cubrid_column_types($result);

  printf(""%-30s %-30s %-15s\n"", ""Column Names"", ""Column Types"", ""Column Maxlen"");
  for($i = 0, $size = count($column_names); $i < $size; $i++) {
  $column_len = cubrid_field_len($result, $i);
  printf(""%-30s %-30s %-15s\n"", $column_names[$i], $column_types[$i], $column_len);
  }

  cubrid_disconnect($conn);
?>
```

----------------------------------------

TITLE: EventHttp::addServerAlias Method API Reference
DESCRIPTION: Detailed API documentation for the `EventHttp::addServerAlias` method, including its signature, parameters, return values, and a reference to its counterpart method for removal.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttp.addserveralias.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EventHttp::addServerAlias
  Description: Adds a server alias to the HTTP server object.
  Signature: public EventHttp::addServerAlias(string $alias): bool
  Parameters:
    $alias: The alias to add (type: string).
  Return Values:
    bool: Returns true on success or false on failure.
  See Also:
    EventHttp::removeServerAlias()
```

----------------------------------------

TITLE: PHP: Get MySQL Client Library Version Example
DESCRIPTION: Demonstrates how to use the `mysqli_get_client_info()` function in PHP to retrieve and print the MySQL client library version. This example highlights that a database connection is not required to obtain this information.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysqli.get-client-info.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
/* We don't need a connection to determine
the version of mysql client library */
printf(""Client library version: %s\n"", mysqli_get_client_info());
?>
```

----------------------------------------

TITLE: Parle\Stack::push Method API Reference
DESCRIPTION: Comprehensive API documentation for the Parle\Stack::push method, detailing its signature, parameters, return type, and usage for adding an item to the stack.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/parle-stack.push.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Parle\Stack::push(mixed $item): void
  - Description: Push an item into the stack.
  - Parameters:
    - $item (mixed): Variable to be pushed onto the stack.
  - Return Values: No value is returned (void).
  - Availability: PECL parle >= 0.5.1
```

----------------------------------------

TITLE: PHP Example: Checking Property Hooks with ReflectionProperty::hasHook
DESCRIPTION: This PHP example demonstrates how to use `ReflectionProperty::hasHook` to check if a property has 'get' or 'set' hooks defined. It creates a sample class with a property using a 'get' hook and then uses reflection to inspect it.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionproperty.hashook.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  class Example
  {
  public string $name { get => ""Name here""; }
  }

  $rClass = new \ReflectionClass(Example::class);
  $rProp = $rClass->getProperty('name');
  var_dump($rProp->hasHook(PropertyHookType::Get));
  var_dump($rProp->hasHook(PropertyHookType::Set));
  ?>
```

----------------------------------------

TITLE: PHP Example: Using SplFileInfo::getSize to Get File Size
DESCRIPTION: This PHP example demonstrates how to instantiate an `SplFileInfo` object for a given file ('example.jpg') and then use the `getFilename()` and `getSize()` methods to output the file's name and its size in bytes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/splfileinfo.getsize.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $info = new SplFileInfo('example.jpg');
  echo $fileinfo->getFilename() . "" "" . $fileinfo->getSize();
?>
```

----------------------------------------

TITLE: GearmanClient::doLow Method Reference
DESCRIPTION: Comprehensive API documentation for the `GearmanClient::doLow` method in PHP, detailing its purpose, parameters, return values, and related Gearman client functions for task management.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/gearmanclient.dolow.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
GearmanClient::doLow(string $function, string $workload, ?string $unique = null): string
  - Description: Runs a single low priority task and returns a string representation of the result. It is up to the GearmanClient and GearmanWorker to agree on the format of the result. Normal and high priority tasks will get precedence over low priority tasks in the job queue.
  - Parameters:
    - $function (string): A registered function the worker is to execute.
    - $workload (string): Serialized data to be processed by the worker.
    - $unique (?string, optional, default: null): A unique ID used to identify a particular task.
  - Return Values:
    - (string): A string representing the results of running a task.
  - See Also:
    - GearmanClient::doNormal(): Run a single task and return a result.
    - GearmanClient::doHigh(): Run a single high priority task.
    - GearmanClient::doBackground(): Run a task in the background.
    - GearmanClient::doHighBackground(): Run a high priority task in the background.
    - GearmanClient::doLowBackground(): Run a low priority task in the background.
```

----------------------------------------

TITLE: PHP Example: Get System Information with posix_uname
DESCRIPTION: This PHP example demonstrates how to use the `posix_uname()` function to retrieve and print system information. The output is an associative array containing details such as the operating system name, nodename, release, version, and machine architecture.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.posix-uname.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $uname=posix_uname();
  print_r($uname);
?>
```

----------------------------------------

TITLE: Dom\TokenList::add Method API Reference
DESCRIPTION: Detailed API documentation for the `Dom\TokenList::add` method, including its signature, parameter descriptions, return type, and specific error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/dom-tokenlist.add.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Dom\TokenList::add
  Signature: public Dom\TokenList::add([string] ...$tokens): void
  Description: Adds the given tokens to the list, but not any that were already present.
  Parameters:
    $tokens: string - The tokens to add. (Variadic)
  Return Value: void - No value is returned.
  Errors/Exceptions:
    ValueError: Thrown if a token contains any null bytes.
    Dom\DOMException (code Dom\SYNTAX_ERR): Thrown if a token is the empty string.
    Dom\DOMException (code Dom\INVALID_CHARACTER_ERR): Thrown if a token contains any ASCII whitespace.
```

----------------------------------------

TITLE: PHP Get IntlDateFormatter Date Type Examples
DESCRIPTION: Illustrates how to retrieve the date type from an `IntlDateFormatter` instance using both the procedural `datefmt_get_datetype()` function and the object-oriented `IntlDateFormatter::getDateType()` method. The examples demonstrate creating a formatter and then querying its date type.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/intldateformatter.getdatetype.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $fmt = datefmt_create(
  'en_US',
  IntlDateFormatter::FULL,
  IntlDateFormatter::FULL,
  'America/Los_Angeles',
  IntlDateFormatter::GREGORIAN
  );
  echo 'datetype of the formatter is : ' . datefmt_get_datetype($fmt);
  echo 'First Formatted output with datetype is ' . datefmt_format($fmt, 0);

  $fmt = datefmt_create(
  'en_US',
  IntlDateFormatter::SHORT,
  IntlDateFormatter::FULL,
  'America/Los_Angeles',
  IntlDateFormatter::GREGORIAN
  );
  echo 'Now datetype of the formatter is : ' . datefmt_get_datetype($fmt);
  echo 'Second Formatted output with datetype is ' . datefmt_format($fmt, 0);

?>
```

LANGUAGE: PHP
CODE:
```
<?php
  $fmt = new IntlDateFormatter(
  'en_US',
  IntlDateFormatter::FULL,
  IntlDateFormatter::FULL,
  'America/Los_Angeles',
  IntlDateFormatter::GREGORIAN
  );
  echo 'datetype of the formatter is : ' . $fmt->getDateType();
  echo 'First Formatted output is ' . $fmt->format(0);
  $fmt = new IntlDateFormatter(
  'en_US',
  IntlDateFormatter::SHORT,
  IntlDateFormatter::FULL,
  'America/Los_Angeles',
  IntlDateFormatter::GREGORIAN
  );
  echo 'Now datetype of the formatter is : ' . $fmt->getDateType();
  echo 'Second Formatted output is ' . $fmt->format(0);

?>
```

----------------------------------------

TITLE: PHP RarArchive::__toString Method API Reference
DESCRIPTION: Comprehensive API documentation for the `RarArchive::__toString` method, including its signature, detailed description, parameter information, and return value specification.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/rararchive.tostring.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
RarArchive::__toString
Signature: public RarArchive::__toString(): string
Description: Provides a string representation for this RarArchive object. It currently shows the full path name of the archive volume that was opened and whether the resource is valid or was already closed through a call to RarArchive::close(). This method may be used only for debugging purposes, as there are no guarantees as to which information the result contains or how it is formatted.
Parameters: None.
Return Values: A textual representation of this RarArchive object. The content of this representation is unspecified.
```

----------------------------------------

TITLE: Ds\Sequence::first Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Ds\Sequence::first` method, detailing its signature, purpose, lack of parameters, return type, and the `UnderflowException` it throws when called on an empty sequence.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-sequence.first.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Sequence::first
(PECL ds >= 1.0.0)

Signature: abstract public Ds\Sequence::first(): mixed
Description: Returns the first value in the sequence.
Parameters: This function has no parameters.
Return Values: The first value in the sequence.
Errors/Exceptions: UnderflowException if empty.
```

----------------------------------------

TITLE: PHP EvPeriodic: Periodic Timer Starting from Now
DESCRIPTION: This example demonstrates how to create a periodic timer using `EvPeriodic` that starts ticking immediately and continues every 10.5 seconds. It uses `fmod(Ev::now(), 10.5)` to align the first tick with the current time.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ev.examples.html#_snippet_3

LANGUAGE: PHP
CODE:
```
<?php   // Tick every 10.5 seconds starting at now
   $w = new EvPeriodic(fmod(Ev::now(), 10.5), 10.5, NULL, function ($w, $revents) {
   echo time(), PHP_EOL;
   });

      Ev::run();
   ?>
```

----------------------------------------

TITLE: PHP DOMImplementation::createDocumentType API Reference
DESCRIPTION: Detailed API documentation for the `DOMImplementation::createDocumentType` method, including its signature, parameters, return values, and error handling.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/domimplementation.createdocumenttype.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
DOMImplementation::createDocumentType
public DOMImplementation::createDocumentType([string] $qualifiedName, [string] $publicId = """", [string] $systemId = """"): DOMDocumentType|false

Description:
Creates an empty DOMDocumentType object. Entity declarations and notations are not made available. Entity reference expansions and default attribute additions do not occur.

Parameters:
  $qualifiedName (string): The qualified name of the document type to create.
  $publicId (string, optional): The external subset public identifier (defaults to """").
  $systemId (string, optional): The external subset system identifier (defaults to """").

Return Values:
A new DOMDocumentType node with its ownerDocument set to null or false on error.

Errors/Exceptions:
  DOM_NAMESPACE_ERR: Raised if there is an error with the namespace, as determined by qualifiedName.

Changelog:
  Version 8.0.0: Calling this function statically will now throw an Error. Previously, an E_DEPRECATED was raised.
```

----------------------------------------

TITLE: Solr Query Response Structure (SolrObject)
DESCRIPTION: This output snippet illustrates the structure of a Solr query response when parsed into a SolrObject. It details the 'responseHeader' with status, QTime, and query parameters, and the 'response' section containing 'numFound', 'start', and an array of 'docs', where each document is also a SolrObject with its fields.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/solr.examples.html#_snippet_5

LANGUAGE: php
CODE:
```
SolrObject Object
(
    [responseHeader] => SolrObject Object
        (
            [status] => 0
            [QTime] => 1
            [params] => SolrObject Object
                (
                    [wt] => xml
                    [rows] => 50
                    [start] => 0
                    [indent] => on
                    [q] => lucene
                    [fl] => cat,features,id,timestamp
                    [version] => 2.2
                )

        )

    [response] => SolrObject Object
        (
            [numFound] => 3
            [start] => 0
            [docs] => Array
                (
                    [0] => SolrObject Object
                        (
                            [cat] => Array
                                (
                                    [0] => Software
                                    [1] => Lucene
                                )

                            [id] => 334456
                        )

                    [1] => SolrObject Object
                        (
                            [cat] => Array
                                (
                                    [0] => Software
                                    [1] => Lucene
                                )

                            [id] => 334455
                        )

                    [2] => SolrObject Object
                        (
                            [cat] => Array
                                (
                                    [0] => software
                                    [1] => search
                                )

                            [features] => Array
                                (
                                    [0] => Advanced Full-Text Search Capabilities using Lucene
                                    [1] => Optimized for High Volume Web Traffic
                                    [2] => Standards Based Open Interfaces - XML and HTTP
                                    [3] => Comprehensive HTML Administration Interfaces
                                    [4] => Scalability - Efficient Replication to other Solr Search Servers
                                    [5] => Flexible and Adaptable with XML configuration and Schema
                                    [6] => Good unicode support: héllo (hello with an accent over the e)
                                )

                            [id] => SOLR1000
                            [timestamp] => 2009-09-04T20:38:55.906
                        )

                )

        )

)
```

----------------------------------------

TITLE: PHP OAuthProvider Class API Reference
DESCRIPTION: Comprehensive API documentation for the `OAuthProvider` class in PHP, detailing its constructor and key methods used for setting up and processing OAuth requests. This includes method signatures, parameter descriptions, and return values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/oauthprovider.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
OAuthProvider::__construct
  - Signature: public OAuthProvider::__construct([array $params_array = ?])
  - Description: Initiates a new OAuthProvider object.
  - Parameters:
    - $params_array (array, optional): Optional parameters, limited to the CLI SAPI.
  - Return Values: An OAuthProvider object.

OAuthProvider::checkOAuthRequest
  - Description: Checks an OAuth request.

OAuthProvider::consumerHandler
  - Description: Sets a user-defined callback function for consumer handling.

OAuthProvider::timestampNonceHandler
  - Description: Sets a user-defined callback function for timestamp and nonce checking.

OAuthProvider::tokenHandler
  - Description: Sets a user-defined callback function for token handling.

OAuthProvider::setParam
  - Description: Sets a parameter for the OAuthProvider.

OAuthProvider::reportProblem
  - Description: Reports an OAuth problem, typically from an OAuthException.
```

----------------------------------------

TITLE: PHP Get Supported Locales from ResourceBundle Examples
DESCRIPTION: Demonstrates how to retrieve a list of supported locales using both the procedural `resourcebundle_locales()` function and the object-oriented `ResourceBundle::getLocales()` method in PHP. Examples show how to pass a bundle path and print the resulting locales.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/resourcebundle.locales.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $bundle = ""/user/share/data/myapp"";
  echo join(PHP_EOL, resourcebundle_locales($bundle));
?>
```

LANGUAGE: PHP
CODE:
```
<?php
  $bundle = ""/usr/share/data/myapp"";
  $r = new ResourceBundle( 'es', $bundle);
  echo join(""\n"", $r->getLocales($bundle));
?>
```

----------------------------------------

TITLE: UI\Draw\Pen::write Method API Reference
DESCRIPTION: Comprehensive API documentation for the `UI\Draw\Pen::write` method, including its signature, parameter details, and a description of its functionality to draw a text layout at a specific point.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ui-draw-pen.write.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
UI\Draw\Pen::write
  Description: Draw Text at Point
  Signature: public UI\Draw\Pen::write(UI\Point $point, UI\Draw\Text\Layout $layout)
  Parameters:
    $point (UI\Point): The point to perform the drawing
    $layout (UI\Draw\Text\Layout): The layout of the text to draw
  Purpose: Shall draw the given text layout at the given point
```

----------------------------------------

TITLE: PHP strspn() Examples with Offset and Length
DESCRIPTION: This set of examples illustrates how strspn() behaves with different offset and length parameters. It shows cases where the subject string does not start with mask characters, and how specifying a starting offset and a limited length affects the returned segment length.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.strspn.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  // subject does not start with any characters from mask
  var_dump(strspn(""foo"", ""o""));

  // examine two characters from subject starting at offset 1
  var_dump(strspn(""foo"", ""o"", 1, 2));

  // examine one character from subject starting at offset 1
  var_dump(strspn(""foo"", ""o"", 1, 1));
?>
```

----------------------------------------

TITLE: Swoole\Client Class API Reference
DESCRIPTION: This snippet provides a complete API reference for the Swoole\Client class, outlining its structure, predefined constants, public properties, and all available methods with their signatures, parameters, and return types. It serves as a guide for developing network clients using Swoole.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.swoole-client.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class Swoole\Client {
    /* Constants */
    const int MSG_OOB = 1;
    const int MSG_PEEK = 2;
    const int MSG_DONTWAIT = 128;
    const int MSG_WAITALL = 64;

    /* Properties */
    public $errCode; // Last error code
    public $sock; // Socket file descriptor
    public $reuse; // Connection reuse status
    public $reuseCount; // Number of times connection has been reused

    /* Methods */
    public close(bool $force = false): bool
        - Closes the connection established by the client.
        - Parameters:
            - $force: (optional) If true, forces the connection to close immediately.
        - Returns: true on success, false on failure.

    public connect(
        string $host,
        int $port = 0,
        int $timeout = 0.5,
        int $flag = 0
    ): bool
        - Connects to a remote TCP or UDP server.
        - Parameters:
            - $host: The target host IP address or domain name.
            - $port: (optional) The target port number. Defaults to 0.
            - $timeout: (optional) Connection timeout in seconds. Defaults to 0.5.
            - $flag: (optional) Socket type flags (e.g., SWOOLE_SOCK_TCP, SWOOLE_SOCK_UDP). Defaults to 0.
        - Returns: true on success, false on failure.

    public __destruct(): void
        - Destructor for the Swoole client, cleans up resources.

    public getpeername(): array
        - Retrieves the remote socket name (IP address and port) of the connected peer.
        - Returns: An array containing 'host' and 'port' on success, false on failure.

    public getsockname(): array
        - Retrieves the local socket name (IP address and port) of the client's connection.
        - Returns: An array containing 'host' and 'port' on success, false on failure.

    public isConnected(): bool
        - Checks if the client is currently connected to a server.
        - Returns: true if connected, false otherwise.

    public on(string $event, callable $callback): void
        - Registers a callback function for a specific event (e.g., 'connect', 'receive', 'close', 'error').
        - Parameters:
            - $event: The name of the event to listen for.
            - $callback: The callable function to execute when the event occurs.

    public pause(): void
        - Pauses receiving data from the connection.

    public pipe(string $socket): void
        - Pipes data from the current client to another socket.
        - Parameters:
            - $socket: The target socket to pipe data to.

    public recv(string $size = 65535, string $flag = 0): void
        - Receives data from the connected server.
        - Parameters:
            - $size: (optional) The maximum number of bytes to receive. Defaults to 65535.
            - $flag: (optional) Receive flags (e.g., MSG_PEEK, MSG_WAITALL). Defaults to 0.
        - Returns: The received data string on success, false on failure, or an empty string if no data.

    public resume(): void
        - Resumes receiving data from the connection after being paused.

    public send(string $data, string $flag = 0): int
        - Sends data to the connected server.
        - Parameters:
            - $data: The data string to send.
            - $flag: (optional) Send flags (e.g., MSG_OOB, MSG_DONTWAIT). Defaults to 0.
        - Returns: The number of bytes sent on success, false on failure.

    public sendfile(string $filename, int $offset = 0): bool
        - Sends a file over the connection.
        - Parameters:
            - $filename: The path to the file to send.
            - $offset: (optional) The starting offset in the file. Defaults to 0.
        - Returns: true on success, false on failure.

    public sendto(string $ip, int $port, string $data): bool
        - Sends data to a specific IP address and port (typically for UDP clients).
        - Parameters:
            - $ip: The target IP address.
            - $port: The target port.
            - $data: The data string to send.
        - Returns: true on success, false on failure.

    public set(array $settings): void
        - Configures various client settings (e.g., 'open_eof_check', 'package_max_length').
        - Parameters:
            - $settings: An associative array of configuration options.

    public sleep(): void
        - Puts the client into a sleeping state (specific to certain client types).

    public wakeup(): void
        - Wakes up the client from a sleeping state.
}
```

----------------------------------------

TITLE: PHP Example: Using ReflectionType::__toString to Get Parameter Type
DESCRIPTION: This PHP example demonstrates how to use `ReflectionType::__toString` to obtain the string representation of a parameter's type. It reflects on a function, gets its parameter, and then echoes the type using the `__toString` method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectiontype.tostring.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  function someFunction(string $param) {}

  $reflectionFunc = new ReflectionFunction('someFunction');
  $reflectionParam = $reflectionFunc->getParameters()[0];

  echo $reflectionParam->getType();
```

----------------------------------------

TITLE: PHP ZipArchive::open API Reference
DESCRIPTION: Detailed API documentation for the `ZipArchive::open` method, including its signature, parameters, their descriptions, possible return values (success or specific error codes), and the meaning of each error code.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ziparchive.open.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ZipArchive::open(string $filename, int $flags = 0): bool|int
  - Description: Opens a new or existing zip archive for reading, writing or modifying. Since libzip 1.6.0, an empty file is not a valid archive any longer.
  - Parameters:
    - $filename (string): The file name of the ZIP archive to open.
    - $flags (int, optional, default 0): The mode to use to open the archive.
      - ZipArchive::OVERWRITE: Overwrite existing files.
      - ZipArchive::CREATE: Create the archive if it does not exist.
      - ZipArchive::RDONLY: Open the archive in read-only mode.
      - ZipArchive::EXCL: Create the archive exclusively; fail if it already exists.
      - ZipArchive::CHECKCONS: Perform additional consistency checks.
  - Return Values:
    - true on success.
    - false or one of the following error codes on error:
      - ZipArchive::ER_EXISTS: File already exists.
      - ZipArchive::ER_INCONS: Zip archive inconsistent.
      - ZipArchive::ER_INVAL: Invalid argument.
      - ZipArchive::ER_MEMORY: Malloc failure.
      - ZipArchive::ER_NOENT: No such file.
      - ZipArchive::ER_NOZIP: Not a zip archive.
      - ZipArchive::ER_OPEN: Can't open file.
      - ZipArchive::ER_READ: Read error.
      - ZipArchive::ER_SEEK: Seek error.
```

----------------------------------------

TITLE: PHP Example: Using mysql_xdevapi\Schema::getSession
DESCRIPTION: Demonstrates how to obtain a new session object from an existing schema object using `mysql_xdevapi\Schema::getSession`. The example initializes a session, creates a database, gets a schema, and then retrieves a new session from that schema, showing that both session objects are distinct.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-schema.getsession.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $session = mysql_xdevapi\getSession(""mysqlx://user:password@localhost"");
  $session->sql(""DROP DATABASE IF EXISTS addressbook"")->execute();
  $session->sql(""CREATE DATABASE addressbook"")->execute();

  $schema = $session->getSchema(""addressbook"");

  // ...

  $newsession = $schema->getSession();

  var_dump($session);
  var_dump($newsession);
?>
```

----------------------------------------

TITLE: GearmanClient Class Methods
DESCRIPTION: API documentation for the GearmanClient class, which handles submitting jobs to Gearman job servers and managing client-side callbacks and timeouts.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.gearman.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
GearmanClient:
  setExceptionCallback(callback: callable): bool
    - Description: Sets a callback function to be executed when a worker reports an exception.
    - Parameters:
      - callback: A callable function that will be invoked on worker exceptions.
    - Returns: True on success, false on failure.

  setFailCallback(callback: callable): bool
    - Description: Sets a callback function to be executed when a job fails.
    - Parameters:
      - callback: A callable function that will be invoked when a job fails.
    - Returns: True on success, false on failure.

  setOptions(options: int): bool
    - Description: Sets client options, such as non-blocking mode or verbose output.
    - Parameters:
      - options: An integer representing a bitmask of Gearman client options.
    - Returns: True on success, false on failure.

  setStatusCallback(callback: callable): bool
    - Description: Sets a callback function for collecting task status updates.
    - Parameters:
      - callback: A callable function that will be invoked with task status updates.
    - Returns: True on success, false on failure.

  setTimeout(timeout_ms: int): bool
    - Description: Sets the socket I/O activity timeout value in milliseconds.
    - Parameters:
      - timeout_ms: The timeout value in milliseconds.
    - Returns: True on success, false on failure.

  setWarningCallback(callback: callable): bool
    - Description: Sets a callback function for worker warnings.
    - Parameters:
      - callback: A callable function that will be invoked on worker warnings.
    - Returns: True on success, false on failure.

  setWorkloadCallback(callback: callable): bool
    - Description: Sets a callback function for accepting incremental data updates from workers.
    - Parameters:
      - callback: A callable function that will be invoked with incremental data updates.
    - Returns: True on success, false on failure.

  timeout(): int
    - Description: Gets the current socket I/O activity timeout value.
    - Parameters: None.
    - Returns: The timeout value in milliseconds.

  wait(): bool
    - Description: Waits for I/O activity on all connections managed by the client.
    - Parameters: None.
    - Returns: True if activity occurred, false otherwise.
```

----------------------------------------

TITLE: PHP Example: Getting MongoDB Read Preference Mode
DESCRIPTION: Demonstrates how to instantiate `MongoDB\Driver\ReadPreference` with different modes (PRIMARY, PRIMARY_PREFERRED, SECONDARY, SECONDARY_PREFERRED, NEAREST) and retrieve their integer mode values using the `getMode()` method. This example uses a deprecated method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mongodb-driver-readpreference.getmode.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
      $rp = new MongoDB\Driver\ReadPreference(MongoDB\Driver\ReadPreference::PRIMARY);
   var_dump($rp->getMode());

      $rp = new MongoDB\Driver\ReadPreference(MongoDB\Driver\ReadPreference::PRIMARY_PREFERRED);
   var_dump($rp->getMode());

      $rp = new MongoDB\Driver\ReadPreference(MongoDB\Driver\ReadPreference::SECONDARY);
   var_dump($rp->getMode());

      $rp = new MongoDB\Driver\ReadPreference(MongoDB\Driver\ReadPreference::SECONDARY_PREFERRED);
   var_dump($rp->getMode());

      $rp = new MongoDB\Driver\ReadPreference(MongoDB\Driver\ReadPreference::NEAREST);
   var_dump($rp->getMode());

      ?>
```

----------------------------------------

TITLE: PHP Enchant Broker Describe Function API Reference
DESCRIPTION: Comprehensive API documentation for the `enchant_broker_describe` function, detailing its signature, parameters (the EnchantBroker instance), return values (an array of provider details), and important changes across PHP versions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.enchant-broker-describe.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
enchant_broker_describe([EnchantBroker] $broker): array
  - Enumerates the Enchant providers and tells you some rudimentary information about them.
  - Parameters:
    - broker: An EnchantBroker instance returned by enchant_broker_init().
  - Return Values:
    - Returns an array of available Enchant providers with their details.
  - Changelog:
    - 8.0.0: `broker` expects an EnchantBroker instance now; previously, a resource was expected.
    - 8.0.0: Prior to this version, the function returned false on failure.
```

----------------------------------------

TITLE: PHP DatePeriod::getStartDate Method Reference
DESCRIPTION: Comprehensive API documentation for the `DatePeriod::getStartDate` method in PHP. It details the method's signature, lack of parameters, and the conditional return types (`DateTimeImmutable` or `DateTime` object) based on how the `DatePeriod` was initialized. It also lists related methods.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/dateperiod.getstartdate.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
DatePeriod::getStartDate
========================
(PHP 5 >= 5.6.5, PHP 7, PHP 8)

Object-oriented style
public DatePeriod::getStartDate(): DateTimeInterface

Description: Gets the start date of the period.

Parameters: This function has no parameters.

Return Values:
- Returns a DateTimeImmutable object when the DatePeriod is initialized with a DateTimeImmutable object as the `start` parameter.
- Returns a DateTime object otherwise.

See Also:
- DatePeriod::getEndDate() - Gets the end date
- DatePeriod::getDateInterval() - Gets the interval
```

----------------------------------------

TITLE: EventHttpRequest Class Methods
DESCRIPTION: Comprehensive documentation for key methods of the EventHttpRequest class, including `getHost` for retrieving the request's host, and references to `getUri` and `getCommand` for accessing the request URI and HTTP method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttprequest.gethost.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EventHttpRequest::getHost(): string
  - Description: Returns the request host.
  - Parameters: None
  - Return Value: string - The request host.

Related Methods:
EventHttpRequest::getUri(): Returns the request URI.
EventHttpRequest::getCommand(): Returns the request command (method).
```

----------------------------------------

TITLE: API Documentation for SeasLog Request Variable Management
DESCRIPTION: This section provides the API specifications for managing request variables within the SeasLog PHP extension, including both getting and setting methods. It details method signatures, parameters, their types, and expected return values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/seaslog.getrequestvariable.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SeasLog::getRequestVariable
  public static SeasLog::getRequestVariable([int] $key): [bool]
    Description: Get SeasLog request variable.
    Parameters:
      $key (int): A constant integer representing the desired request variable.
        - SEASLOG_REQUEST_VARIABLE_DOMAIN_PORT: Retrieves the domain and port.
        - SEASLOG_REQUEST_VARIABLE_REQUEST_URI: Retrieves the request URI.
        - SEASLOG_REQUEST_VARIABLE_REQUEST_METHOD: Retrieves the request method.
        - SEASLOG_REQUEST_VARIABLE_CLIENT_IP: Retrieves the client IP address.
    Return Values: Returns the request variable value on success, or false on failure (e.g., invalid key).

SeasLog::setRequestVariable
  public SeasLog::setRequestVariable(int $key, mixed $value): bool
    Description: Manually set a SeasLog request variable. This method is inferred from the example and 'See Also' section.
    Parameters:
      $key (int): A constant integer representing the request variable to set (same constants as getRequestVariable).
      $value (mixed): The value to set for the specified request variable.
    Return Values: Returns true on success, false on failure.
```

----------------------------------------

TITLE: UI\Menu Class API Reference
DESCRIPTION: Comprehensive API documentation for the UI\Menu class, detailing its constructor and all public methods for building and managing application menus. Menus must be constructed before the first Window and can be shown on any Window.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.ui-menu.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class UI\Menu {
  __construct(string $name)
    - Purpose: Constructs a new Menu instance.
    - Parameters:
      - $name: (string) The name of the menu.

  append(string $name, string $type = UI\MenuItem::class): UI\MenuItem
    - Purpose: Appends a standard menu item.
    - Parameters:
      - $name: (string) The name/label of the menu item.
      - $type: (string, default UI\MenuItem::class) The type of menu item to append.
    - Returns: UI\MenuItem - The newly created menu item.

  appendAbout(string $type = UI\MenuItem::class): UI\MenuItem
    - Purpose: Appends an 'About' menu item.
    - Parameters:
      - $type: (string, default UI\MenuItem::class) The type of menu item to append.
    - Returns: UI\MenuItem - The newly created menu item.

  appendCheck(string $name, string $type = UI\MenuItem::class): UI\MenuItem
    - Purpose: Appends a checkable menu item.
    - Parameters:
      - $name: (string) The name/label of the checkable menu item.
      - $type: (string, default UI\MenuItem::class) The type of menu item to append.
    - Returns: UI\MenuItem - The newly created menu item.

  appendPreferences(string $type = UI\MenuItem::class): UI\MenuItem
    - Purpose: Appends a 'Preferences' menu item.
    - Parameters:
      - $type: (string, default UI\MenuItem::class) The type of menu item to append.
    - Returns: UI\MenuItem - The newly created menu item.

  appendQuit(string $type = UI\MenuItem::class): UI\MenuItem
    - Purpose: Appends a 'Quit' menu item.
    - Parameters:
      - $type: (string, default UI\MenuItem::class) The type of menu item to append.
    - Returns: UI\MenuItem - The newly created menu item.

  appendSeparator(): void
    - Purpose: Appends a menu item separator.
    - Parameters: None.
    - Returns: void
}
```

----------------------------------------

TITLE: PHP ZipArchive::addPattern Method API Reference
DESCRIPTION: Detailed API documentation for the `ZipArchive::addPattern` method, including its signature, parameter descriptions, return values, and references to related methods within the `ZipArchive` class.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ziparchive.addpattern.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ZipArchive::addPattern(string $pattern, string $path = ""."", array $options = []): array|false
  - Description: Add files from a directory which match the regular expression `pattern`. The operation is not recursive. The pattern will be matched against the file name only.
  - Parameters:
    - $pattern: A PCRE pattern against which files will be matched.
    - $path: The directory that will be scanned. Defaults to the current working directory.
    - $options: An associative array of options accepted by ZipArchive::addGlob().
  - Return Values: An array of added files on success or false on failure.

Related ZipArchive Methods:
  - ZipArchive::addFile(string $filepath, string $entryname = """", int $start = 0, int $length = 0): bool
    - Adds a file to a ZIP archive from the given path.
  - ZipArchive::addGlob(string $pattern, int $flags = 0, array $options = []): array|false
    - Add files from a directory by glob pattern.
```

----------------------------------------

TITLE: PHP Example: Using ReflectionParameter::getClass to Get Parameter Class Name
DESCRIPTION: This PHP example demonstrates how to use the `ReflectionParameter::getClass()` method to retrieve the class name of a parameter from a reflected function. It shows the process of getting function parameters and then accessing their class information.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionparameter.getclass.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  function foo(Exception $a) { }

  $functionReflection = new ReflectionFunction('foo');
  $parameters = $functionReflection->getParameters();
  $aParameter = $parameters[0];

  echo $aParameter->getClass()->name;
?>
```

----------------------------------------

TITLE: Phar::compressFiles Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Phar::compressFiles` method, detailing its signature, parameters, return values, and error conditions. It also includes notes on its behavior with different archive types and required PHP extensions, along with related methods.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.compressfiles.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::compressFiles(int $compression): void
  - Description: Compresses all files in the current Phar archive.
  - Parameters:
    - $compression (int): Compression must be one of `Phar::GZ`, `Phar::BZ2` to add compression, or `Phar::NONE` to remove compression.
  - Return Values: No value is returned (void).
  - Errors/Exceptions:
    - Throws `PharException` if `phar.readonly` is `1`.
    - Throws `BadMethodCallException` if:
      - The archive is tar-based (individual file compression not supported).
      - `phar.readonly` INI variable is on.
      - The `zlib` extension is not available for `Phar::GZ`.
      - The `bzip2` extension is not enabled for `Phar::BZ2` or if files are already bzip2 compressed.
  - Notes:
    - This method requires the `php.ini` setting `phar.readonly` to be set to `0`.
    - For tar-based phar archives, use `Phar::compress()` to compress the entire archive.
    - Requires `zlib` or `bzip2` extensions to be enabled for respective compression types.
  - See Also:
    - `PharFileInfo::getCompressedSize()`: Returns the actual size of the file (with compression) inside the Phar archive.
    - `PharFileInfo::isCompressed()`: Returns whether the entry is compressed.
    - `PharFileInfo::compress()`: Compresses the current Phar entry.
    - `PharFileInfo::decompress()`: Decompresses the current Phar entry.
    - `Phar::canCompress()`: Returns whether phar extension supports compression.
    - `Phar::isCompressed()`: Returns if the entire phar archive is compressed.
    - `Phar::decompressFiles()`: Decompresses all files in the current Phar archive.
    - `Phar::getSupportedCompression()`: Return array of supported compression algorithms.
    - `Phar::compress()`: Compresses the entire Phar archive.
    - `Phar::decompress()`: Decompresses the entire Phar archive.
```

----------------------------------------

TITLE: Swoole\Server Class Methods Reference
DESCRIPTION: This entry provides a complete reference for the public methods available in the Swoole\Server class. It includes method signatures, parameter types, and return types, essential for interacting with the Swoole server instance.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.swoole-server.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class Swoole\Server {
  public addlistener(string $host, int $port, string $socket_type): void
    - Adds a new listener to the server.
    - Parameters:
      - $host: The listening host address.
      - $port: The listening port.
      - $socket_type: The socket type (e.g., SWOOLE_SOCK_TCP, SWOOLE_SOCK_UDP).
    - Returns: void

  public addProcess(swoole_process $process): bool
    - Adds a custom process to the server.
    - Parameters:
      - $process: An instance of swoole_process.
    - Returns: bool (true on success, false on failure)

  public after(int $after_time_ms, callable $callback, string $param = ?): ReturnType
    - Executes a callback after a specified delay.
    - Parameters:
      - $after_time_ms: The delay in milliseconds.
      - $callback: The callable function to execute.
      - $param: Optional parameter to pass to the callback.
    - Returns: ReturnType (specific return type not specified in source, typically void or timer ID)

  public bind(int $fd, int $uid): bool
    - Binds a client connection to a specific user ID.
    - Parameters:
      - $fd: The file descriptor of the client connection.
      - $uid: The user ID to bind.
    - Returns: bool (true on success, false on failure)

  public clearTimer(int $timer_id): void
    - Clears a timer previously set by after() or tick().
    - Parameters:
      - $timer_id: The ID of the timer to clear.
    - Returns: void

  swoole_timer_clear(int $timer_id): void
    - Alias or global function to clear a timer.
    - Parameters:
      - $timer_id: The ID of the timer to clear.
    - Returns: void

  public close(int $fd, bool $reset = ?): bool
    - Closes a client connection.
    - Parameters:
      - $fd: The file descriptor of the client connection.
      - $reset: Optional, whether to reset the connection.
    - Returns: bool (true on success, false on failure)

  public confirm(int $fd): bool
    - Confirms a client connection (used in specific scenarios).
    - Parameters:
      - $fd: The file descriptor of the client connection.
    - Returns: bool (true on success, false on failure)

  public connection_info(int $fd, int $reactor_id = ?): array
    - Retrieves information about a client connection.
    - Parameters:
      - $fd: The file descriptor of the client connection.
      - $reactor_id: Optional, the ID of the reactor thread.
    - Returns: array (containing connection details)

  public connection_list(int $start_fd, int $pagesize = ?): array
    - Retrieves a list of active client connections.
    - Parameters:
      - $start_fd: The starting file descriptor for the list.
      - $pagesize: Optional, the number of connections to retrieve per page.
    - Returns: array (list of file descriptors)

  public defer(callable $callback): void
    - Defers the execution of a callback to the next event loop tick.
    - Parameters:
      - $callback: The callable function to defer.
    - Returns: void

  public exist(int $fd): bool
    - Checks if a client connection exists.
    - Parameters:
      - $fd: The file descriptor of the client connection.
    - Returns: bool (true if exists, false otherwise)

  public finish(string $data): void
    - Notifies the task worker that a task is finished and sends data back to the server.
    - Parameters:
      - $data: The data to send back.
    - Returns: void

  public getClientInfo(int $fd, int $reactor_id = ?, bool $ignore_error = ?): array
    - Retrieves detailed information about a client connection.
    - Parameters:
      - $fd: The file descriptor of the client connection.
      - $reactor_id: Optional, the ID of the reactor thread.
      - $ignore_error: Optional, whether to ignore errors.
    - Returns: array (containing detailed client information)

  public getClientList(int $start_fd, int $pagesize = ?): array
    - Retrieves a list of active client connections.
    - Parameters:
      - $start_fd: The starting file descriptor for the list.
      - $pagesize: Optional, the number of connections to retrieve per page.
    - Returns: array (list of file descriptors)

  public getLastError(): int
    - Retrieves the last error code.
    - Returns: int (error code)

  public heartbeat(bool $if_close_connection): mixed
    - Performs a heartbeat check on connections.
    - Parameters:
      - $if_close_connection: Whether to close inactive connections.
    - Returns: mixed (details depend on implementation, often void or array of closed FDs)

  public listen(string $host, int $port, string $socket_type): bool
    - Starts listening on a specified host and port.
    - Parameters:
      - $host: The listening host address.
      - $port: The listening port.
      - $socket_type: The socket type (e.g., SWOOLE_SOCK_TCP, SWOOLE_SOCK_UDP).
    - Returns: bool (true on success, false on failure)

  public on(string $event_name, callable $callback): void
    - Registers an event callback for the server.
    - Parameters:
      - $event_name: The name of the event (e.g., 'start', 'connect', 'receive').
      - $callback: The callable function to execute when the event occurs.
    - Returns: void

  public pause(int $fd): void
    - Pauses receiving data from a client connection.
    - Parameters:
      - $fd: The file descriptor of the client connection.
    - Returns: void

  public protect(int $fd, bool $is_protected = ?): void
    - Protects a client connection from being closed by the server's heartbeat or other mechanisms.
    - Parameters:
      - $fd: The file descriptor of the client connection.
      - $is_protected: Optional, whether to protect or unprotect (default true).
    - Returns: void

  public reload(): bool
    - Reloads the server workers (hot reload).
    - Returns: bool (true on success, false on failure)

  public resume(int $fd): void
    - Resumes receiving data from a paused client connection.
    - Parameters:
      - $fd: The file descriptor of the client connection.
    - Returns: void

  public send(int $fd, string $data, int $reactor_id = ?): bool
    - Sends data to a client connection.
    - Parameters:
      - $fd: The file descriptor of the client connection.
      - $data: The data to send.
      - $reactor_id: Optional, the ID of the reactor thread.
    - Returns: bool (true on success, false on failure)

  public sendfile(int $fd, string $filename, int $offset = ?): bool
    - Sends a file to a client connection.
    - Parameters:
      - $fd: The file descriptor of the client connection.
      - $filename: The path to the file to send.
      - $offset: Optional, the starting offset in the file.
    - Returns: bool (true on success, false on failure)

  public sendMessage(int $worker_id, string $data): bool
    - Sends a message to a specific worker process.
    - Parameters:
      - $worker_id: The ID of the target worker process.
      - $data: The message data to send.
    - Returns: bool (true on success, false on failure)

  public sendto(string $ip, int $port, string $data, string $server_socket = ?): bool
    - Sends UDP data to a specified IP and port.
    - Parameters:
      - $ip: The target IP address.
      - $port: The target port.
      - $data: The data to send.
      - $server_socket: Optional, the server socket to use for sending.
    - Returns: bool (true on success, false on failure)
}
```

----------------------------------------

TITLE: PHP Example: Using rpminfo to Get RPM File Information
DESCRIPTION: This example demonstrates how to use the `rpminfo` function in PHP to extract information from a local RPM package file. It also shows how to use `rpmaddtag` to include specific tags like `RPMTAG_BUILDTIME` in the retrieved data.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.rpminfo.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  rpmaddtag(RPMTAG_BUILDTIME);
  $info = rpminfo(""./php-pecl-rpminfo-0.4.2-1.el8.remi.7.4.x86_64.rpm"");
  print_r($info);
?>
```

----------------------------------------

TITLE: PHP finfo_file Example: Getting MIME Type of Files
DESCRIPTION: This example demonstrates how to use `finfo_file` to determine the MIME type of files in the current directory. It shows the typical workflow of opening a fileinfo resource, iterating through files, getting their information, and then closing the resource.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.finfo-file.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$finfo = finfo_open(FILEINFO_MIME_TYPE); // return mime type aka mimetype extension
foreach (glob(""*"") as $filename) {
  echo finfo_file($finfo, $filename) . ""\n"";
}
finfo_close($finfo);
?>
```

----------------------------------------

TITLE: Phar::addEmptyDir Method Reference
DESCRIPTION: Detailed API documentation for the `Phar::addEmptyDir` method, including its signature, parameter descriptions, return values, and important notes regarding its usage and error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.addemptydir.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::addEmptyDir
Description: Add an empty directory to the phar archive

Signature:
public Phar::addEmptyDir([string] $directory): void

Parameters:
$directory (string): The name of the empty directory to create in the phar archive.

Return Values:
void (no return value). An exception is thrown on failure.

Notes:
This method requires the php.ini setting `phar.readonly` to be set to `0` in order to work for Phar objects. Otherwise, a PharException will be thrown.

Similar to:
ZipArchive::addEmptyDir()
PharData::addEmptyDir()
Phar::addFile()
Phar::addFromString()
```

----------------------------------------

TITLE: PHP Handling Doc Comments with Multiple Property Declarations
DESCRIPTION: This example illustrates how `ReflectionProperty::getDocComment()` behaves when multiple properties are declared with a single preceding doc comment. It shows that the doc comment is associated only with the first property in such a declaration, while subsequent properties return `false` for their doc comments.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionproperty.getdoccomment.html#_snippet_2

LANGUAGE: PHP
CODE:
```
<?php
  class Foo
  {
  /** @var string */
  public $a, $b;
  }
  $class = new \ReflectionClass('Foo');
  foreach ($class->getProperties() as $property) {
  echo $property->getName() . ': ' . var_export($property->getDocComment(), true) . PHP_EOL;
  }
?>
```

----------------------------------------

TITLE: Ds\Vector::first Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Ds\Vector::first` method, detailing its signature, purpose, lack of parameters, return type, and the `UnderflowException` thrown when called on an empty vector.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-vector.first.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Vector::first
=================
public Ds\Vector::first(): mixed

Description:
  Returns the first value in the vector.

Parameters:
  This function has no parameters.

Return Values:
  The first value in the vector.

Errors/Exceptions:
  UnderflowException if empty.
```

----------------------------------------

TITLE: PHP SVM::train Method API Reference
DESCRIPTION: Comprehensive API documentation for the `SVM::train` method, including its signature, detailed parameter descriptions, return value, and error handling.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/svm.train.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SVM::train
public svm::train(array $problem, array $weights = ?): SVMModel
  - Description: Train a support vector machine based on the supplied training data.
  - Parameters:
    - $problem (array|URL|stream): The training data. Can be:
      - An array: Data starts with class label (e.g., 1 or -1) followed by sparse data (dimension => data pairs).
      - A URL: Points to a file containing a SVM Light formatted problem (each line is a training example, starting with class then key:value pairs).
      - An opened stream: Points to a data source formatted as in the file above.
    - $weights (array, optional): An optional set of weighting parameters for different classes (range 0-1). Used to account for unbalanced training sets (e.g., if class -1 has significantly more examples, its weight could be 0.5).
  - Return Values:
    - SVMModel: Returns an SVMModel object that can be used to classify previously unseen data.
  - Error Conditions:
    - Throws SVMException on error.
```

----------------------------------------

TITLE: PHP Example: Using filectime to Get File Inode Change Time
DESCRIPTION: This PHP example demonstrates how to use the `filectime` function to retrieve and display the last inode change time of a specified file. It first checks if the file exists before attempting to get its ctime and format the output.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.filectime.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      // outputs e.g. somefile.txt was last changed: December 29 2002 22:16:23.
      $filename = 'somefile.txt';
   if (file_exists($filename)) {
   echo ""$filename was last changed: "" . date(""F d Y H:i:s."", filectime($filename));
   }
      ?>
```

----------------------------------------

TITLE: Ds\Queue::peek Method API Reference
DESCRIPTION: Detailed API documentation for the `Ds\Queue::peek` method, including its signature, purpose, parameters, return values, and error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-queue.peek.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Queue::peek
  Signature: public Ds\Queue::peek(): mixed
  Description: Returns the value at the front of the queue, but does not remove it.
  Parameters: This function has no parameters.
  Return Values: The value at the front of the queue.
  Errors/Exceptions: UnderflowException if empty.
```

----------------------------------------

TITLE: PHP XMLWriter: Start Attribute API Reference
DESCRIPTION: Detailed API documentation for `XMLWriter::startAttribute` (object-oriented) and `xmlwriter_start_attribute` (procedural), used to begin an attribute in an XML document. It specifies parameters, return values, and notes changes in PHP 8.0.0 regarding the `writer` parameter type.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/xmlwriter.startattribute.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
XMLWriter::startAttribute
=========================
xmlwriter_start_attribute
===========================

(PHP 5 >= 5.1.2, PHP 7, PHP 8, PECL xmlwriter >= 0.1.0)

XMLWriter::startAttribute -- xmlwriter_start_attribute — Create start attribute

### Description
Object-oriented style
public XMLWriter::startAttribute(string $name): bool

Procedural style
xmlwriter_start_attribute(XMLWriter $writer, string $name): bool

Starts an attribute.

### Parameters
`writer`
  Only for procedural calls. The XMLWriter instance that is being modified. This object is returned from a call to xmlwriter_open_uri() or xmlwriter_open_memory().
`name`
  The attribute name.

### Return Values
Returns `true` on success or `false` on failure.

### Changelog
Version	Description
8.0.0	`writer` expects an XMLWriter instance now; previously, a `resource` was expected.
```

----------------------------------------

TITLE: Yaf_Session::start Method API Reference
DESCRIPTION: Provides the API documentation for the Yaf_Session::start method, part of the Yaf framework. This method is intended to initialize or start the Yaf session. It is explicitly stated to have no parameters and returns void.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-session.start.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Session::start

Signature:
  public Yaf_Session::start(): void

Description:
  The start purpose

Parameters:
  This function has no parameters.

Return Values:
  void
```

----------------------------------------

TITLE: PHP Example: Getting and Setting SeasLog Request ID
DESCRIPTION: This PHP example demonstrates how to retrieve the current SeasLog request ID using `SeasLog::getRequestID()`, set a new custom request ID with `SeasLog::setRequestID()`, and then retrieve the updated ID to verify the change.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/seaslog.getrequestid.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      var_dump(SeasLog::getRequestID());
   var_dump(SeasLog::setRequestID('reqeust_id_test_'.time()));
   var_dump(SeasLog::getRequestID());
?>
```

----------------------------------------

TITLE: Yaf_Application Class and Methods
DESCRIPTION: Documents the Yaf_Application class, which serves as the entry point for a Yaf application, and its various methods for managing application lifecycle, retrieving configurations, and handling errors.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class Yaf_Application
  __construct(config: array|string, env_section: string = null)
    - Yaf_Application constructor. Initializes the application with configuration.
    - Parameters:
      - config: An array of configuration settings or a path to a configuration file.
      - env_section: The environment section to load from the config (e.g., 'product', 'develop').
  app(): Yaf_Application
    - Retrieve the singleton instance of the Yaf_Application.
    - Returns: The Yaf_Application instance.
  bootstrap(bootstrap: Yaf_Bootstrap_Abstract = null): Yaf_Application
    - Calls the bootstrap methods defined in a Yaf_Bootstrap_Abstract instance.
    - Parameters:
      - bootstrap: An instance of Yaf_Bootstrap_Abstract.
    - Returns: The Yaf_Application instance.
  clearLastError(): void
    - Clears the last occurred error information.
  __destruct(): void
    - The destructor for the Yaf_Application class.
  environ(): string
    - Retrieves the current application environment (e.g., 'product', 'develop').
    - Returns: The environment string.
  execute(callback: callable, ...args): mixed
    - Executes a user-defined callback function.
    - Parameters:
      - callback: The callable function or method.
      - ...args: Optional arguments to pass to the callback.
    - Returns: The result of the callback execution.
  getAppDirectory(): string
    - Gets the application's base directory.
    - Returns: The application directory path.
  getConfig(): Yaf_Config_Abstract
    - Retrieves the application's configuration instance.
    - Returns: A Yaf_Config_Abstract instance.
  getDispatcher(): Yaf_Dispatcher
    - Gets the Yaf_Dispatcher instance associated with the application.
    - Returns: The Yaf_Dispatcher instance.
  getLastErrorMsg(): string
    - Gets the message of the last occurred error.
    - Returns: The error message string.
  getLastErrorNo(): int
    - Gets the code of the last occurred error.
    - Returns: The error code integer.
  getModules(): array
    - Gets a list of defined module names in the application.
    - Returns: An array of module names.
  run(): void
    - Starts the Yaf_Application, initiating the request dispatching process.
  setAppDirectory(directory: string): Yaf_Application
    - Changes the application's base directory.
    - Parameters:
      - directory: The new application directory path.
    - Returns: The Yaf_Application instance.
```

----------------------------------------

TITLE: QuickHashIntHash::set Method API Reference
DESCRIPTION: Detailed API documentation for the `QuickHashIntHash::set` method, covering its signature, parameters, return values, and behavior regarding new additions versus updates, including handling of duplicate keys.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/quickhashinthash.set.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
QuickHashIntHash::set
public QuickHashIntHash::set(int $key, int $value): bool

Description: This method tries to update an entry with a new value. In case the entry did not yet exist, it will instead add a new entry. It returns whether the entry was added or update. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.

Parameters:
  key: The key of the entry to add or update. (Type: int)
  value: The new value to set the entry with. (Type: int)

Return Values:
  Returns a boolean indicating success. Specifically, 2 if the entry was found and updated, 1 if the entry was newly added, or 0 if there was an error.
```

----------------------------------------

TITLE: Example Usage of SeasLog::analyzerCount in PHP
DESCRIPTION: This PHP example demonstrates various ways to call the `SeasLog::analyzerCount` method. It shows how to get a total count, count by a specific log level, count by level and log path, and count by level with a keyword.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/seaslog.analyzercount.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$countResult1 = SeasLog::analyzerCount();
//with `level`
$countResult2 = SeasLog::analyzerCount(SEASLOG_DEBUG);
//with `level` and `log_path`
$countResult3 = SeasLog::analyzerCount(SEASLOG_ERROR,date('Ymd',time()));
//with `level` and `key_word`
$countResult4 = SeasLog::analyzerCount(SEASLOG_DEBUG,NULL,'accessToken');
var_dump($countResult1,$countResult2,$countResult3,$countResult4);
?>
```

----------------------------------------

TITLE: Example: Get Current OID in CUBRID PHP
DESCRIPTION: This example demonstrates how to connect to a CUBRID database, execute an updatable query with OID inclusion, retrieve the Object ID (OID) of the current cursor location using `cubrid_current_oid()`, fetch data using the OID, and then disconnect from the database.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-current-oid.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $conn = cubrid_connect(""localhost"", 33000, ""demodb"", ""dba"");

  $req = cubrid_execute($conn, ""SELECT * FROM code"", CUBRID_INCLUDE_OID);
  $oid = cubrid_current_oid($req);
  $res = cubrid_get($conn, $oid);

  print_r($res);

  cubrid_disconnect($conn);
?>
```

----------------------------------------

TITLE: Swoole\Http\Server::on Method API Reference
DESCRIPTION: This entry provides the comprehensive API reference for the `Swoole\Http\Server::on` method. It is fundamental for event-driven programming with Swoole, allowing developers to register custom callback functions that execute in response to specific server events like 'request', 'start', or 'close'.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-http-server.on.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Http\Server::on
(PECL swoole >= 1.9.0)

public Swoole\Http\Server::on(string $event_name, callable $callback): void

Description:
  Bind callback function to HTTP server by event name. This method allows you to register custom functions that will be executed when specific events occur on the HTTP server, such as 'request', 'start', 'connect', 'close', etc.

Parameters:
  $event_name (string): The name of the event to bind the callback to. Common event names include 'request' (for handling HTTP requests), 'start' (server started), 'shutdown' (server stopped), 'connect' (client connected), 'close' (client disconnected), etc.
  $callback (callable): The callback function to execute when the specified event occurs. The signature of this callable varies depending on the event type. For example, the 'request' event callback typically receives two arguments: a Swoole\Http\Request object and a Swoole\Http\Response object.

Return Values:
  void: This method does not return any value.
```

----------------------------------------

TITLE: PHP Example: Initializing Yar RPC Server
DESCRIPTION: This PHP example demonstrates how to use `Yar_Server::__construct` to create an RPC server. It defines an `API` class with a public method that will be exposed as a service, and then initializes the server and handles incoming requests.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yar-server.construct.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  class API {
  /**
   * the doc info will be generated automatically into service info page.
   * @params
   * @return
   */
  public function some_method($parameter, $option = ""foo"") {
  return ""some_method"";
  }

  protected function client_can_not_see() {
  }
  }

  $service = new Yar_Server(new API());
  $service->handle();
  ?>
```

----------------------------------------

TITLE: PharFileInfo::__construct Method Reference
DESCRIPTION: Documents the constructor for PharFileInfo objects, detailing its parameters, usage notes, and potential exceptions. It emphasizes that direct calls to `__construct` are generally not recommended, and objects are typically initialized via `Phar::offsetGet()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/pharfileinfo.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PharFileInfo::__construct
  public PharFileInfo::__construct(string $filename)

  Description:
    Constructs a Phar entry object. This method should not be called directly. Instead, a PharFileInfo object is initialized by calling Phar::offsetGet() through array access.

  Parameters:
    $filename (string): The full URL to retrieve a file within the phar. For example, to retrieve 'my/file.php' from 'boo.phar', the entry should be 'phar://boo.phar/my/file.php'.

  Errors/Exceptions:
    BadMethodCallException: Thrown if __construct() is called twice.
    UnexpectedValueException: Thrown if the phar URL requested is malformed, the requested phar cannot be opened, or the file can't be found within the phar.
```

----------------------------------------

TITLE: PHP Example: Get Tidy Configuration
DESCRIPTION: This PHP example demonstrates how to initialize a Tidy object with specific configuration settings and then retrieve the active configuration using `tidy::getConfig()`. It shows how to parse an HTML string and then print the array of configuration options currently in use by the Tidy instance.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/tidy.getconfig.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $html = '<p>test</p>';
  $config = array('indent' => TRUE,
  'output-xhtml' => TRUE,
  'wrap' => 200);

  $tidy = tidy_parse_string($html, $config);

  print_r($tidy->getConfig());
?>
```

----------------------------------------

TITLE: Yaf_Route_Static::route API Reference
DESCRIPTION: Detailed API documentation for the `route` method of the `Yaf_Route_Static` class, including its signature, parameter descriptions, return values, and various examples illustrating how it processes different URL patterns to determine routing parameters.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-route-static.route.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Route_Static::route
  Signature: public Yaf_Route_Static::route(Yaf_Request_Abstract $request): bool
  Description: Route a request
  Parameters:
    $request (Yaf_Request_Abstract): The request object to be routed.
  Return Values:
    bool: Always returns true.

  Examples of Routing Behavior:
  // assuming there is only one module defined:Index
  Request: http://yourdomain.com/a/b
  => module = index, controller=a, action=b

  //assuming ap.action_prefer = On
  Request: http://yourdomain.com/b
  => module = default(index), controller = default(index), action = b

  //assuming ap.action_prefer = Off
  Request: http://yourdomain.com/b
  => module = default(index), controller = b, action = default(index)

  Request: http://yourdomain.com/a/b/foo/bar/test/a/id/4
  => module = default(index), controller = a, action = b, request parameters: foo = bar, test = a, id = 4

  See Also:
  - Yaf_Route_Supervar::route() - The route purpose
  - Yaf_Route_Simple::route() - Route a request
  - Yaf_Route_Regex::route() - The route purpose
  - Yaf_Route_Rewrite::route() - The route purpose
  - Yaf_Route_Map::route() - The route purpose
```

----------------------------------------

TITLE: PHP Get Localized Region Display Name Examples
DESCRIPTION: Demonstrates how to use both the procedural `locale_get_display_region()` function and the object-oriented `Locale::getDisplayRegion()` static method to retrieve localized region names in PHP. The examples show how to get the display name for 'sl-Latn-IT-nedis' (Italy) in English, French, and German.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/locale.getdisplayregion.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  echo locale_get_display_region('sl-Latn-IT-nedis', 'en');
  echo "";\n"";
  echo locale_get_display_region('sl-Latn-IT-nedis', 'fr');
  echo "";\n"";
  echo locale_get_display_region('sl-Latn-IT-nedis', 'de');
  ?>
```

LANGUAGE: PHP
CODE:
```
<?php
  echo Locale::getDisplayRegion('sl-Latn-IT-nedis', 'en');
  echo "";\n"";
  echo Locale::getDisplayRegion('sl-Latn-IT-nedis', 'fr');
  echo "";\n"";
  echo Locale::getDisplayRegion('sl-Latn-IT-nedis', 'de');
  ?>
```

----------------------------------------

TITLE: GearmanClient Constructor API Reference
DESCRIPTION: Detailed API documentation for the `GearmanClient` class constructor in PHP, outlining its signature, purpose, lack of parameters, and the `GearmanClient` object it returns upon instantiation.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/gearmanclient.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
GearmanClient::__construct
  (PECL gearman >= 0.5.0)

  public GearmanClient::__construct()
    - Description: Creates a GearmanClient instance representing a client that connects to the job server and submits tasks to complete.
    - Parameters:
      - None
    - Return Values: A GearmanClient object.
    - See Also:
      - GearmanClient::clone() - Create a copy of a GearmanClient object
```

----------------------------------------

TITLE: PHP ctype_space Function API Reference and Example
DESCRIPTION: Detailed API documentation for the PHP `ctype_space` function, including its signature, parameter descriptions, return values, and important notes regarding argument types and deprecation. An example demonstrates how to use `ctype_space` to check various strings for whitespace content.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.ctype-space.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ctype_space(mixed $text): bool

Description:
  Checks if all of the characters in the provided string, text, creates whitespace.

Parameters:
  $text (mixed): The tested string. If an int between -128 and 255 inclusive is provided, it is interpreted as the ASCII value of a single character (negative values have 256 added in order to allow characters in the Extended ASCII range). Any other integer is interpreted as a string containing the decimal digits of the integer.

Warning:
  As of PHP 8.1.0, passing a non-string argument is deprecated. In the future, the argument will be interpreted as a string instead of an ASCII codepoint. Depending on the intended behavior, the argument should either be cast to string or an explicit call to chr() should be made.

Return Values:
  (bool): Returns true if every character in text creates some sort of white space, false otherwise. Besides the blank character this also includes tab, vertical tab, line feed, carriage return and form feed characters. When called with an empty string the result will always be false.

Example #1: A ctype_space() example
<?php
  $strings = array(
    'string1' => ""\n\r\t"",
    'string2' => ""\narf12"",
    'string3' => '\n\r\t' // note the single quotes
  );
  foreach ($strings as $name => $testcase) {
    if (ctype_space($testcase)) {
      echo ""The string '$name' consists of whitespace characters only.\n"";
    } else {
      echo ""The string '$name' contains non-whitespace characters.\n"";
    }
  }
?>
```

----------------------------------------

TITLE: PHP Ev Extension: Ev::supportedBackends Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Ev::supportedBackends` static method, detailing its signature, purpose, parameters, return values, and related methods within the PHP Ev extension. This method is crucial for determining which event loop backends are available on the current system.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ev.supportedbackends.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ev::supportedBackends
(PECL ev >= 0.2.0)

Description:
final public static Ev::supportedBackends(): int
Returns the set of backends supported by current libev configuration.

Parameters:
This function has no parameters.

Return Values:
Returns a bit mask which can containing backend flags combined using bitwise OR operator.

See Also:
Ev::recommendedBackends() - Returns a bit mask of recommended backends for current platform
Ev::embeddableBackends() - Returns the set of backends that are embeddable in other event loops
```

----------------------------------------

TITLE: PHP Example: Get and Set CUBRID Query Timeout
DESCRIPTION: This PHP example demonstrates how to establish a connection to a CUBRID database, prepare a statement, retrieve the current query timeout using `cubrid_get_query_timeout`, and then modify it using `cubrid_set_query_timeout`. It showcases the typical workflow for managing query timeouts programmatically.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-get-query-timeout.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      $host = ""localhost"";
   $port = 33000;
   $db = ""demodb"";

      $conn =   cubrid_connect_with_url(""CUBRID:$host:$port:$db:::?login_timeout=50000&query_timeout=5000&disconnect_on_query_timeout=yes"");

      $req = cubrid_prepare($conn, ""SELECT * FROM code"");

      $timeout = cubrid_get_query_timeout($req);
   var_dump($timeout);

      cubrid_set_query_timeout($req, 1000);
   $timeout = cubrid_get_query_timeout($req);
   var_dump($timeout);

      cubrid_close($conn);
   ?>
```

----------------------------------------

TITLE: Swoole\Http\Request Class Methods API
DESCRIPTION: API documentation for the methods available in the `Swoole\Http\Request` class, detailing their purpose, parameters, and return types. This includes methods for object destruction and retrieving raw HTTP POST body content.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.swoole-http-request.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Swoole\\Http\\Request::__destruct(): void
  - Destructs the HTTP request object.
  - Parameters: None
  - Returns: void

Swoole\\Http\\Request::rawcontent(): string
  - Retrieves the raw HTTP POST body content from the request.
  - Parameters: None
  - Returns: string - The raw POST body content.
```

----------------------------------------

TITLE: PHP Example: Using ReflectionClass::getInterfaces to Get Implemented Interfaces
DESCRIPTION: This PHP example demonstrates how to use `ReflectionClass::getInterfaces()` to retrieve all interfaces implemented by a given class. It defines two interfaces (`Foo`, `Bar`) and a class (`Baz`) that implements both, then uses `ReflectionClass` to inspect `Baz` and print its implemented interfaces.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionclass.getinterfaces.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
interface Foo { }

interface Bar { }

class Baz implements Foo, Bar { }

$rc1 = new ReflectionClass(""Baz"");

print_r($rc1->getInterfaces());
?>
```

----------------------------------------

TITLE: PharData::addFile Method Reference
DESCRIPTION: Documents the `PharData::addFile` method, detailing its parameters, return values, and behavior for adding files or URLs to a PharData archive. It also mentions the `localName` parameter for specifying the archive path and notes performance considerations.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phardata.addfile.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PharData::addFile(string $filename, ?string $localName = null): void
  - Description: Adds any file or URL to the tar/zip archive. If the optional second parameter `localname` is specified, the file will be stored in the archive with that name, otherwise the `file` parameter is used as the path to store within the archive. URLs must have a localname or an exception is thrown.
  - Parameters:
    - $filename (string): Full or relative path to a file on disk to be added to the phar archive.
    - $localName (?string, optional, default: null): Path that the file will be stored in the archive.
  - Return Values: No return value; an exception is thrown on failure.
  - Changelog:
    - 8.0.0: `localName` is now nullable.
  - Notes:
    - PharData::addFile(), PharData::addFromString() and PharData::offsetSet() save a new phar archive each time they are called. If performance is a concern, PharData::buildFromDirectory() or PharData::buildFromIterator() should be used instead.
  - See Also:
    - PharData::offsetSet() - Set the contents of a file within the tar/zip to those of an external file or string
    - Phar::addFile() - Add a file from the filesystem to the phar archive
    - PharData::addFromString() - Add a file from a string to the tar/zip archive
    - PharData::addEmptyDir() - Add an empty directory to the tar/zip archive
```

----------------------------------------

TITLE: PHP Reflection Output: `dom` Extension Information
DESCRIPTION: This API documentation block provides a summary of the `dom` extension's capabilities as reported by PHP's Reflection API. It indicates whether DOM/XML support is enabled, its API version, and the status of related features like libxml, HTML, XPath, XPointer, Schema, and RelaxNG support. This output is useful for verifying the configuration of the DOM extension.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflection.examples.html#_snippet_4

LANGUAGE: APIDOC
CODE:
```
dom

DOM/XML => enabled
DOM/XML API Version => 20031129
libxml Version => 2.7.3
HTML Support => enabled
XPath Support => enabled
XPointer Support => enabled
Schema Support => enabled
RelaxNG Support => enabled
```

----------------------------------------

TITLE: PHP Example: Using gmp_scan0 to Find Clear Bits
DESCRIPTION: This example demonstrates how to use the `gmp_scan0` function in PHP to find the index of the first clear (0) bit in a GMP number, starting from a specified bit position. It shows two different scenarios with varying starting points and their respective outputs.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.gmp-scan0.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  // ""0"" bit is found at position 3. index starts at 0
  $s1 = gmp_init(""10111"", 2);
  echo gmp_scan0($s1, 0) . ""\n"";

  // ""0"" bit is found at position 7. index starts at 5
  $s2 = gmp_init(""101110000"", 2);
  echo gmp_scan0($s2, 5) . ""\n"";
?>
```

----------------------------------------

TITLE: MongoDB\Driver\ServerApi Class API Reference
DESCRIPTION: Comprehensive API documentation for the `MongoDB\Driver\ServerApi` class, detailing its constants, constructor, and methods for defining server API versions in MongoDB PHP applications.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.mongodb-driver-serverapi.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
final class MongoDB\Driver\ServerApi implements MongoDB\BSON\Serializable, Serializable {

/* Constants */
const string MongoDB\Driver\ServerAPI::V1 = ""1"";
  - Description: Server API version 1.

/* Methods */
final public bsonSerialize(): stdClass
  - Description: Returns an object for BSON serialization.

final public __construct(string $version, ?bool $strict = null, ?bool $deprecationErrors = null)
  - Description: Create a new ServerApi instance.
  - Parameters:
    - $version (string): The API version (e.g., ServerApi::v1).
    - $strict (?bool, optional): If true, the server rejects commands not part of the declared API version. Defaults to null.
    - $deprecationErrors (?bool, optional): If true, enables deprecation error reporting. Defaults to null.
}
```

----------------------------------------

TITLE: Yaf_Controller_Abstract::forward Method API Reference
DESCRIPTION: Comprehensive API documentation for the Yaf_Controller_Abstract::forward method, detailing its overloaded signatures, parameters, return values, and important behavioral notes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-controller-abstract.forward.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Yaf_Controller_Abstract::forward

Description:
  Forwards the current execution process to another action within the Yaf framework.

Method Signatures:
  public Yaf_Controller_Abstract::forward(string $action, array $paramters = ?): bool
  public Yaf_Controller_Abstract::forward(string $controller, string $action, array $paramters = ?): bool
  public Yaf_Controller_Abstract::forward(string $module, string $controller, string $action, array $paramters = ?): bool

Parameters:
  $action (string): The destination action name.
  $controller (string, optional): The destination controller name. Required when forwarding across controllers.
  $module (string, optional): The destination module name. If NULL, the default module name is assumed. Required when forwarding across modules.
  $paramters (array, optional): An associative array of parameters to be passed to the forwarded action. These parameters can be retrieved using Yaf_Request_Abstract::getParam().

Return Value:
  bool: Returns TRUE on success or FALSE on failure.

Notes:
  This method does not switch to the destination action immediately. The forwarding will take place only after the current flow finishes its execution. It is crucial to terminate the current flow (e.g., by returning FALSE in an action method) if you do not want the original action's subsequent code or auto-rendering to execute.

See Also:
  Yaf_Request_Abstrace::getParam()
```

----------------------------------------

TITLE: Imagick::borderImage Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Imagick::borderImage` method. It details the method signature, parameters, their types and descriptions, and the expected return value. This method is used to add a border around an image.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.borderimage.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::borderImage
public Imagick::borderImage([mixed] $bordercolor, [int] $width, [int] $height): [bool]

Description:
Surrounds the image with a border of the color defined by the bordercolor ImagickPixel object.

Parameters:
- $bordercolor: ImagickPixel object or a string containing the border color. (Note: PECL imagick 2.1.0+ allows string; previous versions only ImagickPixel object).
- $width: Integer representing the border width.
- $height: Integer representing the border height.

Return Values:
- bool: Returns true on success.
```

----------------------------------------

TITLE: SplPriorityQueue::next Method API Reference
DESCRIPTION: Comprehensive API documentation for the SplPriorityQueue::next method, including its signature, a detailed description of its functionality (extracting the top node), and information regarding its parameters and return values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/splpriorityqueue.next.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SplPriorityQueue::next

public SplPriorityQueue::next(): void

Description:
Extracts the top node from the queue.

Parameters:
This function has no parameters.

Return Values:
No value is returned.
```

----------------------------------------

TITLE: PHP OAuth 1.0a Authentication Flow for FireEagle API
DESCRIPTION: This PHP code demonstrates the complete OAuth 1.0a authentication flow to interact with the FireEagle API. It handles obtaining a request token, redirecting the user for authorization, exchanging the request token for an access token, and finally making an authenticated API call to fetch user data from the /user.json endpoint. The example utilizes the PHP OAuth extension and manages session state.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/oauth.examples.fireeagle.html#_snippet_0

LANGUAGE: php
CODE:
```
<?php
  $req_url = 'https://fireeagle.yahooapis.com/oauth/request_token';
  $authurl = 'https://fireeagle.yahoo.net/oauth/authorize';
  $acc_url = 'https://fireeagle.yahooapis.com/oauth/access_token';
  $api_url = 'https://fireeagle.yahooapis.com/api/0.1';
  $conskey = 'your_consumer_key';
  $conssec = 'your_consumer_secret';

  session_start();

  // In state=1 the next request should include an oauth_token.
  // If it doesn't go back to 0
  if(!isset($_GET['oauth_token']) && $_SESSION['state']==1) $_SESSION['state'] = 0;
  try {
  $oauth = new OAuth($conskey,$conssec,OAUTH_SIG_METHOD_HMACSHA1,OAUTH_AUTH_TYPE_URI);
  $oauth->enableDebug();
  if(!isset($_GET['oauth_token']) && !$_SESSION['state']) {
  $request_token_info = $oauth->getRequestToken($req_url);
  $_SESSION['secret'] = $request_token_info['oauth_token_secret'];
  $_SESSION['state'] = 1;
  header('Location: '.$authurl.'?oauth_token='.$request_token_info['oauth_token']);
  exit;
  } else if($_SESSION['state']==1) {
  $oauth->setToken($_GET['oauth_token'],$_SESSION['secret']);
  $access_token_info = $oauth->getAccessToken($acc_url);
  $_SESSION['state'] = 2;
  $_SESSION['token'] = $access_token_info['oauth_token'];
  $_SESSION['secret'] = $access_token_info['oauth_token_secret'];
  }
  $oauth->setToken($_SESSION['token'],$_SESSION['secret']);
  $oauth->fetch(""$api_url/user.json"");
  $json = json_decode($oauth->getLastResponse());
  print_r($json);
  } catch(OAuthException $E) {
  print_r($E);
  }
  ?>
```

----------------------------------------

TITLE: Swoole Coroutine Create Method API Reference
DESCRIPTION: Documents the `create` static method of the `Swoole\Coroutine` class, including its signature, parameters, and return type. It is noted that detailed documentation for this function is currently unavailable.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-coroutine.create.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Coroutine::create

(PECL swoole >= 2.0.0)

public static Swoole\Coroutine::create(): ReturnType
  - Description: Creates a new coroutine.
  - Parameters:
    - This function has no parameters.
  - Return Values: ReturnType (currently not documented)
```

----------------------------------------

TITLE: PHP Get Hostname Example
DESCRIPTION: A simple PHP example demonstrating how to use the `gethostname()` function to retrieve and print the local machine's hostname.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.gethostname.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  echo gethostname(); // may output e.g,: sandie
?>
```

----------------------------------------

TITLE: Swoole\Table Data Retrieval Methods
DESCRIPTION: Comprehensive API documentation for methods within the `Swoole\Table` class related to data retrieval. This entry details the `get` method, which allows fetching specific values from the table.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-table.get.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Table::get
  Description: Get the value in the Swoole table by $key and $field.
  Signature: public Swoole\Table::get(string $key, string $field = ?): mixed
  Parameters:
    $key (string): The key of the row from which to retrieve the value.
    $field (string, optional): The name of the field within the row whose value is to be retrieved. If omitted, the method might return the entire row or a default value, depending on the specific Swoole version and context.
  Returns:
    mixed: The value associated with the specified key and field. The type can vary based on the stored data. Returns null or false if the key or field does not exist.
```

----------------------------------------

TITLE: PHP Example: Get File Size with filesize()
DESCRIPTION: This example demonstrates how to use the `filesize()` function in PHP to retrieve and display the size of a specified file in bytes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.filesize.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      // outputs e.g. somefile.txt: 1024 bytes
      $filename = 'somefile.txt';
   echo $filename . ': ' . filesize($filename) . ' bytes';
      ?>
```

----------------------------------------

TITLE: PHP COMPersistHelper::SaveToFile Method Reference
DESCRIPTION: Detailed API documentation for the `COMPersistHelper::SaveToFile` method, including its signature, parameter descriptions, return values, and error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/compersisthelper.savetofile.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
COMPersistHelper::SaveToFile
  public COMPersistHelper::SaveToFile([?][string] $filename, [bool] $remember = true): [bool]

  Description:
    Saves a copy of the object to the specified file.

  Parameters:
    $filename: [?][string]
      The name of the file to which to save the object.
    $remember: [bool] (default: true)
      Indicates whether the `filename` parameter is to be used as the current working file. If `true`, `filename` becomes the current file and the object is supposed to clear its dirty flag after the save. If `false`, this save operation is a ""Save A Copy As ..."" operation. In this case, the current file is unchanged and the object is not supposed to clear its dirty flag.

  Return Values:
    [bool]
      Returns `true` on success or `false` on failure.

  Errors/Exceptions:
    A `com_exception` is thrown if the associated object does not implement the COM interface `IPersistFile`, or when calling the `IPersistFile::Save()` method failed.
```

----------------------------------------

TITLE: Yaf_Request_Simple::getQuery Method Reference
DESCRIPTION: Provides the API reference for the `getQuery` method of the `Yaf_Request_Simple` class in the Yaf PHP framework. This method is noted as having limited documentation, with only its basic signature available.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-request-simple.getquery.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Request_Simple::getQuery
  Description: The getQuery purpose
  Signature: public Yaf_Request_Simple::getQuery(): void
  Parameters: None
  Return Values: void
  Warning: This function is currently not documented; only its argument list is available.
```

----------------------------------------

TITLE: Yaf_Route_Static Class API
DESCRIPTION: Documentation for the Yaf_Route_Static class, providing methods for assembling URLs, matching routes, and routing requests in a static context.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_27

LANGUAGE: APIDOC
CODE:
```
Yaf_Route_Static:
  assemble(): Assemble a url
  match(): The match purpose
  route(): Route a request
```

----------------------------------------

TITLE: CUBRID PHP Module and Connection Information Example
DESCRIPTION: This PHP example demonstrates how to retrieve the CUBRID PHP module version, connect to a CUBRID database, fetch database parameters, and get server/client information, as well as the connection charset. It also shows basic error handling for connection failures.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-version.html#_snippet_0

LANGUAGE: php
CODE:
```
<?php
printf(""%-30s %s\n"", ""CUBRID PHP Version:"", cubrid_version());

printf(""\n"");

$conn = cubrid_connect(""localhost"", 33088, ""demodb"", ""dba"");
if (!$conn) {
  die('Connect Error ('. cubrid_error_code() .')' . cubrid_error_msg());
}

$db_params = cubrid_get_db_parameter($conn);

while (list($param_name, $param_value) = each($db_params)) {
  printf(""%-30s %s\n"", $param_name, $param_value);
}

printf(""\n"");

$server_info = cubrid_get_server_info($conn);
$client_info = cubrid_get_client_info();

printf(""%-30s %s\n"", ""Server Info:"", $server_info);
printf(""%-30s %s\n"", ""Client Info:"", $client_info);

printf(""\n"");

$charset = cubrid_get_charset($conn);

printf(""%-30s %s\n"", ""CUBRID Charset:"", $charset);

cubrid_disconnect($conn);
?>
```

----------------------------------------

TITLE: Phar::mapPhar Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Phar::mapPhar` static method. This method is crucial for initializing a Phar archive when it's directly executed or included, allowing its contents to be accessed via `phar://` URLs.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.mapphar.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::mapPhar
  Description: Reads the currently executed file (a phar) and registers its manifest. This static method can only be used inside a Phar archive's loader stub in order to initialize the phar when it is directly executed, or when it is included in another script.
  Signature: final public static Phar::mapPhar([?string $alias = null], [int $offset = 0]): bool
  Parameters:
    $alias: ?string (default: null)
      The alias that can be used in `phar://` URLs to refer to this archive, rather than its full path.
    $offset: int (default: 0)
      Unused variable, here for compatibility with PEAR's PHP_Archive.
  Return Values:
    bool: Returns `true` on success or `false` on failure.
  Errors/Exceptions:
    PharException: Thrown if not called directly within PHP execution, if no `__HALT_COMPILER();` token is found in the current source file, or if the file cannot be opened for reading.
  See Also:
    Phar::loadPhar() - Loads any phar archive with an alias
```

----------------------------------------

TITLE: mysql_xdevapi CollectionModify::patch API Reference and Example
DESCRIPTION: Detailed API specification for the `CollectionModify::patch` method, which applies a patch object to update properties of one or more documents in a MySQL X DevAPI collection. Includes a PHP example demonstrating its usage to modify documents based on a condition and apply a patch.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-collectionmodify.patch.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
CollectionModify::patch(string $document): mysql_xdevapi\CollectionModify
  - Description: Takes a patch object and applies it on one or more documents, and can update multiple document properties.
  - Parameters:
    - $document (string): A document with the properties to apply to the matching documents.
  - Returns: A CollectionModify object.
```

LANGUAGE: PHP
CODE:
```
<?php
      $res = $coll->modify('""Programmatore"" IN job')->patch('{""Hobby"" : ""Programmare""}')->execute();
      ?>
```

----------------------------------------

TITLE: PHP Property Type Variance Example
DESCRIPTION: This example demonstrates property type variance in PHP. It shows how an interface can declare a property with a 'get' operation that allows for covariance, and how subsequent class extensions are restricted to invariant types once a property implicitly defines both 'get' and 'set' operations, preventing further type changes in child classes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/language.oop5.variance.html#_snippet_5

LANGUAGE: PHP
CODE:
```
<?php
class Animal {}
class Dog extends Animal {}
class Poodle extends Dog {}

interface PetOwner
{
// Only a get operation is required, so this may be covariant.
public Animal $pet { get; }
}

class DogOwner implements PetOwner
{
// This may be a more restrictive type since the ""get"" side
// still returns an Animal. However, as a native property
// children of this class may not change the type anymore.
public Dog $pet;
}

class PoodleOwner extends DogOwner
{
// This is NOT ALLOWED, because DogOwner::$pet has both
// get and set operations defined and required.
public Poodle $pet;
}
?>
```

----------------------------------------

TITLE: Yaf_Application::bootstrap API Reference
DESCRIPTION: Comprehensive API documentation for the `Yaf_Application::bootstrap` method. It details its signature, purpose, accepted parameters, and the type of value it returns, explaining how it triggers initialization methods within a Bootstrap class.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-application.bootstrap.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Application::bootstrap
public Yaf_Application::bootstrap([Yaf_Bootstrap_Abstract] $bootstrap = ?): Yaf_Application

Description:
Run a Bootstrap. All methods defined in the Bootstrap and named with prefix ""_init"" will be called according to their declaration order. If the parameter `bootstrap` is not supplied, Yaf will look for a Bootstrap under `application.directory`.

Parameters:
  $bootstrap (Yaf_Bootstrap_Abstract): An optional instance of `Yaf_Bootstrap_Abstract`. If provided, its `_init` methods are called. If omitted, Yaf searches for a default `Bootstrap.php` file.

Return Values:
  Yaf_Application: Returns the current `Yaf_Application` instance, allowing for method chaining.
```

----------------------------------------

TITLE: Get Class Name using OID in PHP CUBRID
DESCRIPTION: This PHP example demonstrates how to use `cubrid_get_class_name()` to retrieve the class name of an instance given its OID. It connects to a CUBRID database, executes a query to get an OID, and then uses the function to get the class name, finally printing it.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-get-class-name.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $conn = cubrid_connect(""localhost"", 33000, ""demodb"", ""dba"");

  $req = cubrid_execute($conn, ""SELECT * FROM code"", CUBRID_INCLUDE_OID);
  $oid = cubrid_current_oid($req);
  $class_name = cubrid_get_class_name($conn, $oid);

  print_r($class_name);

  cubrid_disconnect($conn);
?>
```

----------------------------------------

TITLE: Ds\Map::last Method API Reference
DESCRIPTION: Provides the formal API documentation for the `Ds\Map::last` method, including its signature, a detailed description of its functionality, information on parameters (none in this case), the type of value it returns, and any exceptions it might throw.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-map.last.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Map::last
  Availability: (PECL ds >= 1.0.0)
  Signature: public Ds\Map::last(): Ds\Pair
  Description: Returns the last pair of the map.
  Parameters: None
  Return Value: Ds\Pair - The last key-value pair of the map.
  Errors/Exceptions: UnderflowException - Thrown if the map is empty.
```

----------------------------------------

TITLE: PHP Example: Using imagesx() to Get Image Width
DESCRIPTION: This example demonstrates how to use the `imagesx()` function in PHP to retrieve the width of an image created with `imagecreatetruecolor()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.imagesx.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      // create a 300*200 image
   $img = imagecreatetruecolor(300, 200);

      echo imagesx($img); // 300

      ?>
```

----------------------------------------

TITLE: PHP ucfirst Function API Reference
DESCRIPTION: Detailed API documentation for the PHP `ucfirst` function, including its signature, parameter descriptions, return values, and related functions for string case manipulation.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.ucfirst.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ucfirst(string $string): string
  Description:
    Returns a string with the first character of `string` capitalized, if that character is an ASCII character in the range from ""a"" (0x61) to ""z"" (0x7a).
  Parameters:
    $string (string): The input string.
  Return Values:
    Returns the resulting string.
  Changelog:
    8.2.0: Case conversion no longer depends on the locale set with setlocale(). Only ASCII characters will be converted.
  See Also:
    lcfirst(): Make a string's first character lowercase
    strtolower(): Make a string lowercase
    strtoupper(): Make a string uppercase
    ucwords(): Uppercase the first character of each word in a string
    mb_convert_case(): Perform case folding on a string
```

----------------------------------------

TITLE: Memcached::fetch API Reference
DESCRIPTION: Comprehensive API documentation for the `Memcached::fetch` method, detailing its signature, purpose, parameters, and return values, including error conditions and related methods.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/memcached.fetch.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Memcached::fetch
Description: public Memcached::fetch(): array|false
  Retrieves the next result from the last request.
Parameters:
  This function has no parameters.
Return Values:
  Returns the next result or false otherwise.
  The Memcached::getResultCode() will return Memcached::RES_END if result set is exhausted.
See Also:
  Memcached::fetchAll() - Fetch all the remaining results
  Memcached::getDelayed() - Request multiple items
```

----------------------------------------

TITLE: PHP: Retrieve Element from Ds\Vector using get() Method
DESCRIPTION: Demonstrates how to use the `get()` method of a `Ds\Vector` object to retrieve elements at specific indices. This example initializes a vector and then uses `get()` to access its elements, outputting their values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-sequence.get.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $sequence = new \Ds\Vector([""a"", ""b"", ""c""]);

  var_dump($sequence->get(0));
  var_dump($sequence->get(1));
  var_dump($sequence->get(2));
?>
```

----------------------------------------

TITLE: PHP Example: Retrieving IntlCalendar Field Values
DESCRIPTION: This PHP example demonstrates how to use `IntlCalendar::get` to retrieve values for various date/time fields from a `IntlCalendar` instance. It iterates through `IntlCalendar` field constants, gets their corresponding values, and prints them along with the field names, showcasing the method's practical application.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/intlcalendar.get.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  ini_set('date.timezone', 'Europe/Lisbon');
  ini_set('intl.default_locale', 'en_US');

  $class = new ReflectionClass('IntlCalendar');
  $fields = array();
  foreach ($class->getConstants() as $name => $val) {
    if (strpos($name, 'FIELD_') !== 0 || $val > 22)
      continue;
    $fields[$val] = $name;
  }

  $cal = IntlCalendar::createInstance(); // current time
  var_dump(IntlDateFormatter::formatObject($cal));
  foreach ($fields as $val => $name) {
    echo ""$val ($name)"", ""\n "", $cal->get($val), ""\n"";
  }
```

----------------------------------------

TITLE: PHP EventHttp::accept Method API Reference
DESCRIPTION: Comprehensive API documentation for the `EventHttp::accept` method. It outlines the method's signature, explains the `socket` parameter (resource, stream, or file descriptor), and specifies the boolean return value indicating success or failure. It also clarifies its use case as an alternative to `EventHttp::bind()` when a socket is already prepared.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttp.accept.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EventHttp::accept
=================
(PECL event >= 1.2.6-beta)

EventHttp::accept — Makes an HTTP server accept connections on the specified socket stream or resource

Description
public EventHttp::accept( mixed $socket ): bool

Makes an HTTP server accept connections on the specified socket stream or resource. The socket should be ready to accept connections.
Can be called multiple times to accept connections on different sockets.

Note:
To bind a socket, listen, and accept connections on the socket in a single call use EventHttp::bind(). EventHttp::accept() is needed only if one already has a socket ready to accept connections.

Parameters
socket
Socket resource, stream or numeric file descriptor representing a socket ready to accept connections.

Return Values
Returns true on success or false on failure.

See Also
EventHttp::bind() - Binds an HTTP server on the specified address and port
```

----------------------------------------

TITLE: Perform Solr Date Faceting with PHP
DESCRIPTION: This PHP example illustrates how to perform date faceting in Solr using the SolrClient. It configures a date facet on the 'manufacturedate_dt' field, specifying a start date, end date, a gap for intervals (e.g., '+1YEAR'), and includes 'before' counts for results preceding the start date.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/solr.examples.html#_snippet_12

LANGUAGE: php
CODE:
```
<?php
      include ""bootstrap.php"";
      $options = array
   (
   'hostname' => SOLR_SERVER_HOSTNAME,
   'login' => SOLR_SERVER_USERNAME,
   'password' => SOLR_SERVER_PASSWORD,
   'port' => SOLR_SERVER_PORT,
   );

      $client = new SolrClient($options);

      $query = new SolrQuery('*:*');

      $query->setFacet(true);

      $query->addFacetDateField('manufacturedate_dt');

      $query->setFacetDateStart('2006-02-13T00:00:00Z');

      $query->setFacetDateEnd('2012-02-13T00:00:00Z');

      $query->setFacetDateGap('+1YEAR');

      $query->setFacetDateHardEnd(1);

      $query->addFacetDateOther('before');

      $updateResponse = $client->query($query);

      $response_array = $updateResponse->getResponse();

      $facet_data = $response_array->facet_counts->facet_dates;

      print_r($facet_data);
      ?>
```

----------------------------------------

TITLE: PHP XMLWriter: Start Element API Reference
DESCRIPTION: This entry provides the full API documentation for the `XMLWriter::startElement` method (object-oriented) and `xmlwriter_start_element` function (procedural), which are used to create the opening tag for an XML element. It includes parameter details, return values, and related functions for managing XML output.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/xmlwriter.startelement.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
XMLWriter::startElement -- xmlwriter_start_element: Create start element tag

Object-oriented style:
public XMLWriter::startElement(string $name): bool

Procedural style:
xmlwriter_start_element(XMLWriter $writer, string $name): bool

Description: Starts an element.

Parameters:
  $writer: (Procedural only) The XMLWriter instance that is being modified. This object is returned from a call to xmlwriter_open_uri() or xmlwriter_open_memory().
  $name: The element name.

Return Values:
  bool: Returns true on success or false on failure.

Changelog:
  8.0.0: `writer` expects an XMLWriter instance now; previously, a resource was expected.

See Also:
  XMLWriter::endElement() - End current element
  XMLWriter::writeElement() - Write full element tag
```

----------------------------------------

TITLE: EventBase::getFeatures Method API Reference
DESCRIPTION: Comprehensive API documentation for the `EventBase::getFeatures` method, detailing its signature, purpose, parameters, and return value, along with references to related constants.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventbase.getfeatures.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EventBase::getFeatures
(PECL event >= 1.2.6-beta)

public EventBase::getFeatures(): int

Description:
  Returns bitmask of features supported.

Parameters:
  This function has no parameters.

Return Values:
  Returns integer representing a bitmask of supported features. See EventConfig::FEATURE_* constants.

See Also:
  EventBase::getMethod() - Returns event method in use
  EventConfig
```

----------------------------------------

TITLE: PHP Example: Using SNMP::getErrno to Check for Errors
DESCRIPTION: This PHP example demonstrates how to use the `SNMP::getErrno` method to check for errors after an SNMP request. It initializes an SNMP session, attempts a `get` operation that is expected to fail (due to 'boguscommunity'), and then uses `getErrno` to verify if a timeout error occurred.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/snmp.geterrno.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $session = new SNMP(SNMP::VERSION_2c, '127.0.0.1', 'boguscommunity');
  var_dump(@$session->get('.1.3.6.1.2.1.1.1.0'));
  var_dump($session->getErrno() == SNMP::ERRNO_TIMEOUT);
?>
```

----------------------------------------

TITLE: Swoole\Http\Server Methods: Event Handling and Server Start
DESCRIPTION: This section outlines key methods for the Swoole\Http\Server class, focusing on event binding and server initiation. These methods are crucial for setting up and running an HTTP server with Swoole, allowing developers to define custom logic for various server events.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.swoole-http-server.html#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Swoole\Http\Server::on(string $event_name, callable $callback): bool
  - Binds a callback function to an HTTP server event.
  - Parameters:
    - $event_name: The name of the event (e.g., 'request', 'start', 'close').
    - $callback: The callback function to be executed when the event occurs.
  - Returns: true on success, false on failure.

Swoole\Http\Server::start(): bool
  - Starts the Swoole HTTP server.
  - Returns: true on success, false on failure.
```

----------------------------------------

TITLE: Imagick::rollImage API Definition and PHP Usage Example
DESCRIPTION: This snippet provides the full API documentation for the `Imagick::rollImage` method, detailing its signature, parameters, and return values. It is complemented by a PHP example function that demonstrates how to apply an X and Y offset to an image using Imagick, read the image from a path, and output it as a JPEG.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.rollimage.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::rollImage
  Offsets an image as defined by x and y.

  Signature:
    public Imagick::rollImage(int $x, int $y): bool

  Parameters:
    $x (int): The X offset for the image.
    $y (int): The Y offset for the image.

  Return Values:
    bool: Returns true on success.
```

LANGUAGE: PHP
CODE:
```
<?php
  function rollImage($imagePath, $rollX, $rollY) {
  $imagick = new \Imagick(realpath($imagePath));
  $imagick->rollimage($rollX, $rollY);
  header(""Content-Type: image/jpg"");
  echo $imagick->getImageBlob();
  }
?>
```

----------------------------------------

TITLE: Yar_Server::__construct API Reference
DESCRIPTION: Detailed API documentation for the `Yar_Server::__construct` method, including its signature, parameter descriptions, and return type. This method initializes a Yar HTTP RPC server, registering public methods of a provided object as RPC services.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yar-server.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yar_Server::__construct
  Description: Register a server
  Signature: final public Yar_Server::__construct([Object $obj])
  Parameters:
    $obj (Object): An object whose public methods will be registered as RPC services.
  Return Values:
    An instance of Yar_Server.
  See Also:
    Yar_Server::handle() - Start RPC Server
```

----------------------------------------

TITLE: PHP: Get OpenSSL Digest Methods and Aliases
DESCRIPTION: This PHP example demonstrates how to use `openssl_get_md_methods()` to retrieve a list of available cryptographic digest methods. It shows how to get the standard methods and then, by passing `true` to the function, how to get methods including their aliases, finally calculating the difference to display only the aliases.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.openssl-get-md-methods.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
  $digests = openssl_get_md_methods();
  $digests_and_aliases = openssl_get_md_methods(true);
  $digest_aliases = array_diff($digests_and_aliases, $digests);

  print_r($digests);

  print_r($digest_aliases);

?>
```

----------------------------------------

TITLE: PHP Fiber::start Method API Reference
DESCRIPTION: Documents the `Fiber::start` method, which initiates the execution of a PHP Fiber. It accepts a variadic list of arguments to pass to the fiber's callable. Throws `FiberError` if called on an already started fiber.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/fiber.start.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Fiber::start
public Fiber::start(mixed ...$args): mixed
  - Description: Start execution of the fiber.
  - Parameters:
    - $args: mixed - A variadic list of arguments to provide to the callable used when constructing the fiber.
  - Return Values:
    - mixed: The value provided to the first call to Fiber::suspend() or null if the fiber returns.
  - Throws:
    - FiberError: If the fiber has already been started when this method is called.
    - Exception: If the fiber throws an exception before suspending, it will be thrown from the call to this method.
```

----------------------------------------

TITLE: Retrieve Element from Ds\Deque using get() Method
DESCRIPTION: This PHP example demonstrates how to retrieve elements from a `Ds\Deque` object using the `get()` method. It initializes a Deque with string values and then uses `get()` to access elements at specific indices, printing their values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-deque.get.html#_snippet_1

LANGUAGE: php
CODE:
```
$deque = new \Ds\Deque([""a"", ""b"", ""c""]);

var_dump($deque->get(0));
var_dump($deque->get(1));
var_dump($deque->get(2));
```

----------------------------------------

TITLE: Imagick::queryFonts API Reference
DESCRIPTION: Detailed API documentation for the `Imagick::queryFonts` static method. It describes the method's signature, parameters, return values, and potential exceptions when querying configured fonts.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.queryfonts.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::queryFonts
public static Imagick::queryFonts([string $pattern = ""*""]): array
  - Description: Returns the configured fonts.
  - Parameters:
    - $pattern (string, optional, default ""*""): The query pattern to filter fonts.
  - Return Values:
    - array: An array containing the names of the configured fonts.
  - Errors/Exceptions:
    - Throws ImagickException on error.
```

----------------------------------------

TITLE: PHP str_starts_with Example with Empty String
DESCRIPTION: This example demonstrates the behavior of the `str_starts_with` function when the `needle` parameter is an empty string. It shows that any string is considered to start with an empty string.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.str-starts-with.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  if (str_starts_with('abc', '')) {
  echo ""All strings start with the empty string"";
  }
?>
```

----------------------------------------

TITLE: Phar::offsetGet API Reference
DESCRIPTION: Comprehensive API documentation for the `Phar::offsetGet` method, including its signature, parameters, return values, and potential exceptions. This method is part of the `ArrayAccess` interface for Phar archives.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.offsetget.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::offsetGet
  public Phar::offsetGet(string $localName): PharFileInfo

  Description:
    This method implements the ArrayAccess interface, allowing direct manipulation of Phar archive contents using array access brackets. It is used for retrieving files from a Phar archive.

  Parameters:
    $localName (string): The filename (relative path) to look for in the Phar archive.

  Return Values:
    PharFileInfo: A PharFileInfo object is returned that can be used to iterate over a file's contents or to retrieve information about the current file.

  Errors/Exceptions:
    BadMethodCallException: Thrown if the specified file does not exist in the Phar archive.
```

----------------------------------------

TITLE: Yar_Server Class API Reference
DESCRIPTION: The Yar_Server class provides the functionality to create and manage an RPC server. It allows registering a server instance and handling incoming RPC requests.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yar.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yar_Server:
  __construct(mixed $callback)
    - Description: Registers a server instance with a callback function or object.
    - Parameters:
      - $callback: (mixed) The callback function or object that will handle RPC calls.
    - Returns: (Yar_Server) A new Yar_Server instance.

  handle(): bool
    - Description: Starts the RPC server to process incoming requests.
    - Parameters: None
    - Returns: (bool) True on success, false on failure.
```

----------------------------------------

TITLE: PHP Get Tentative Return Type Example
DESCRIPTION: This PHP example demonstrates how to use `ReflectionFunctionAbstract::getTentativeReturnType()` to inspect the tentative return type of a method, specifically `ArrayAccess::offsetGet`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionfunctionabstract.gettentativereturntype.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$method = new ReflectionMethod(\ArrayAccess::class, 'offsetGet');
var_dump($method->getTentativeReturnType());
```

----------------------------------------

TITLE: UI\Executor Class API Reference
DESCRIPTION: Documentation for the UI\Executor class, detailing its constructor and methods for managing execution, including stopping and setting intervals.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.ui.html#_snippet_8

LANGUAGE: APIDOC
CODE:
```
UI\Executor:
  __construct()
    - Description: Constructs a new Executor instance.
  kill()
    - Description: Stops the Executor.
  onExecute()
    - Description: Defines the callback for execution events.
  setInterval()
    - Description: Manipulates the execution interval.
```

----------------------------------------

TITLE: Shell Example: Interacting with PHP EventHttp Server
DESCRIPTION: This shell example demonstrates how a client can interact with the PHP HTTP server bound to ports 8088 and 8089. It shows a successful GET request to '/about' on port 8088 and a failed GET request to '/unknown' on port 8089, illustrating both successful responses and 404 Not Found errors.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttp.bind.html#_snippet_2

LANGUAGE: Shell
CODE:
```
Client:
$ nc 127.0.0.1 8088
GET /about HTTP/1.0
Connection: close

HTTP/1.0 200 OK
Content-Type: text/html; charset=ISO-8859-1
Connection: close

$ nc 127.0.0.1 8089
GET /unknown HTTP/1.0
Connection: close

HTTP/1.1 404 Not Found
Content-Type: text/html
Date: Wed, 13 Mar 2013 04:14:41 GMT
Content-Length: 149
Connection: close

<html><head><title>404 Not Found</title></head><body><h1>Not Found</h1><p>The requested URL /unknown was not found on this server.</p></body></html>

Server:
URI: /about
OK
```

----------------------------------------

TITLE: QuickHashIntSet::add Method API Reference
DESCRIPTION: Comprehensive API documentation for the `QuickHashIntSet::add` method. It outlines the method signature, a detailed description of its functionality, parameter specifications, and expected return values, including how the `CHECK_FOR_DUPES` constant affects its behavior.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/quickhashintset.add.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
QuickHashIntSet::add
public QuickHashIntSet::add(int $key): bool

Description:
This method adds a new entry to the set, and returns whether the entry was added. Entries are by default always added unless `QuickHashIntSet::CHECK_FOR_DUPES` has been passed when the set was created.

Parameters:
  $key (int): The key of the entry to add.

Return Values:
  bool: `true` when the entry was added, and `false` if the entry was not added.
```

----------------------------------------

TITLE: Example Usage of SeasLog Request Variable Methods in PHP
DESCRIPTION: This PHP example demonstrates how to use `SeasLog::setRequestVariable` to manually set various request variables (domain:port, URI, method, client IP) and then retrieve them using `SeasLog::getRequestVariable`. It also illustrates handling an invalid key for setting and getting variables.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/seaslog.getrequestvariable.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$sDomainPort = 'domain:port';
$sRequestUri = 'uri';
$sRequestMethod = 'method';
$sClientIp = 'client_ip';

$iErrorKey = 1000;

$oSeasLog = new SeasLog();

var_dump($oSeasLog->setRequestVariable(SEASLOG_REQUEST_VARIABLE_DOMAIN_PORT, $sDomainPort));
var_dump($oSeasLog->setRequestVariable(SEASLOG_REQUEST_VARIABLE_REQUEST_URI, $sRequestUri));
var_dump($oSeasLog->setRequestVariable(SEASLOG_REQUEST_VARIABLE_REQUEST_METHOD, $sRequestMethod));
var_dump($oSeasLog->setRequestVariable(SEASLOG_REQUEST_VARIABLE_CLIENT_IP, $sClientIp));

var_dump($oSeasLog->setRequestVariable($iErrorKey,NULL));

var_dump($oSeasLog->getRequestVariable(SEASLOG_REQUEST_VARIABLE_DOMAIN_PORT) == $sDomainPort);
var_dump($oSeasLog->getRequestVariable(SEASLOG_REQUEST_VARIABLE_REQUEST_URI) == $sRequestUri);
var_dump($oSeasLog->getRequestVariable(SEASLOG_REQUEST_VARIABLE_REQUEST_METHOD) == $sRequestMethod);
var_dump($oSeasLog->getRequestVariable(SEASLOG_REQUEST_VARIABLE_CLIENT_IP) == $sClientIp);

var_dump($oSeasLog->getRequestVariable($iErrorKey));
?>
```

----------------------------------------

TITLE: PHP phpdbg_start_oplog Function Reference
DESCRIPTION: This entry provides the API documentation for the `phpdbg_start_oplog` function. It outlines the function's signature, its purpose of starting an oplog, and confirms that it accepts no parameters and returns no value.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.phpdbg-start-oplog.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
phpdbg_start_oplog(): void
  - Starts an oplog in the phpdbg interactive debugger.
  - Availability: PHP 7, PHP 8
  - Parameters:
    - None
  - Return Values:
    - void: No value is returned.
```

----------------------------------------

TITLE: PHP Example: Using Ds\Vector::last to Get the Last Element
DESCRIPTION: This PHP example demonstrates how to instantiate a `Ds\Vector` and then use the `last()` method to retrieve and output its final element.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-vector.last.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $vector = new \Ds\Vector([1, 2, 3]);
  var_dump($vector->last());
?>
```

----------------------------------------

TITLE: PHP Example for cubrid_error_msg()
DESCRIPTION: This PHP example demonstrates how to use `cubrid_error_msg()` in conjunction with `cubrid_error_code()` and `cubrid_error_code_facility()` to capture and display detailed error information when a CUBRID API call, such as `cubrid_schema()`, fails.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-error-msg.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $conn = cubrid_connect(""localhost"", 33000, ""demodb"");

  if (!@cubrid_schema($conn, 100000)) {
    printf(""Error facility: %d\nError code: %d\nError msg: %s\n"",
    cubrid_error_code_facility(), cubrid_error_code(), cubrid_error_msg());

    cubrid_disconnect($conn);
    exit;
  }
?>
```

----------------------------------------

TITLE: Phar::running Method API Reference
DESCRIPTION: Detailed API documentation for the `Phar::running` static method. It explains how to retrieve the path or URL of the currently executing Phar archive, including its parameters (`$returnPhar`) and return types. It also clarifies its behavior inside a stub and its similarity to `__FILE__`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.running.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::running
(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL phar >= 2.0.0)

Phar::running — Returns the full path on disk or full phar URL to the currently executing Phar archive

Description:
final public static Phar::running([bool] $returnPhar = true): string

Returns the full path to the running phar archive. This is intended for use much like the __FILE__ magic constant, and only has effect inside an executing phar archive.

Inside the stub of an archive, Phar::running() returns """". Simply use __FILE__ to access the current running phar inside a stub.

Parameters:
  $returnPhar (bool): If false, the full path on disk to the phar archive is returned. If true, a full phar URL is returned.

Return Values:
  string: Returns the filename if valid, empty string otherwise.
```

----------------------------------------

TITLE: Imagick::thresholdImage Method API Reference
DESCRIPTION: Detailed API documentation for the `Imagick::thresholdImage` method, outlining its signature, parameters, and return values for image thresholding operations.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.thresholdimage.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::thresholdImage
public Imagick::thresholdImage(float $threshold, int $channel = Imagick::CHANNEL_DEFAULT): bool
  Description: Changes the value of individual pixels based on the intensity of each pixel compared to threshold. The result is a high-contrast, two color image.
  Parameters:
    $threshold (float): The threshold value to compare pixel intensity against.
    $channel (int, optional): The channel constant (e.g., Imagick::CHANNEL_DEFAULT) to apply the thresholding to. Defaults to Imagick::CHANNEL_DEFAULT.
  Return Values:
    (bool): Returns true on success.
```

----------------------------------------

TITLE: Get Loaded Apache Modules in PHP
DESCRIPTION: This PHP example demonstrates how to use the `apache_get_modules()` function to retrieve and print a list of all currently loaded Apache modules on the server.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.apache-get-modules.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php   print_r(apache_get_modules());   ?>
```

----------------------------------------

TITLE: PHP Closure Class API Reference
DESCRIPTION: Comprehensive API documentation for the PHP `Closure` class, detailing its constructor and static/instance methods for manipulating anonymous functions, including binding objects and scopes, and converting callables.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.closure.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
final class Closure {

  /* Methods */

  private __construct()
    - Purpose: Constructor that disallows direct instantiation. Anonymous functions yield objects of this type.

  public static bind(Closure $closure, ?object $newThis, object|string|null $newScope = ""static""): ?Closure
    - Purpose: Duplicates a closure with a specific bound object and class scope.
    - Parameters:
      - $closure: The closure to duplicate.
      - $newThis: The object to which the closure should be bound. If null, the closure will be unbound.
      - $newScope: The class scope to which the closure should be bound. Can be an object, a string representing a class name, or null for no scope. Defaults to ""static"".
    - Returns: A new Closure object, or null on failure.

  public bindTo(?object $newThis, object|string|null $newScope = ""static""): ?Closure
    - Purpose: Duplicates the closure with a new bound object and class scope. This is an instance method.
    - Parameters:
      - $newThis: The object to which the closure should be bound. If null, the closure will be unbound.
      - $newScope: The class scope to which the closure should be bound. Can be an object, a string representing a class name, or null for no scope. Defaults to ""static"".
    - Returns: A new Closure object, or null on failure.

  public call(object $newThis, mixed ...$args): mixed
    - Purpose: Binds the closure to a new object and immediately calls it with the given arguments.
    - Parameters:
      - $newThis: The object to which the closure should be bound for the call.
      - ...$args: Variable number of arguments to pass to the closure.
    - Returns: The return value of the closure.

  public static fromCallable(callable $callback): Closure
    - Purpose: Converts any callable into a Closure object.
    - Parameters:
      - $callback: The callable to convert. This can be a function name string, an array representing a static method ('ClassName::methodName') or an object method ([$object, 'methodName']), or an anonymous function.
    - Returns: A new Closure object representing the callable.

}
```

----------------------------------------

TITLE: Memcached::getStats API Reference
DESCRIPTION: Comprehensive API documentation for the Memcached::getStats method, including its signature, parameters, return types, and a brief description of its functionality.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/memcached.getstats.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Memcached::getStats
  Description: Returns an array containing the state of all available memcache servers. Refer to the memcache protocol specification for details on these statistics.
  Signature: public Memcached::getStats([?][string] $type = [null]): [array]|[false]
  Parameters:
    $type (string, optional, default: null): The type of statistics to fetch.
  Return Values:
    array: An array of server statistics, with one entry per server.
    false: On failure.
```

----------------------------------------

TITLE: PHP EvWatcher Class Methods
DESCRIPTION: Detailed API documentation for the `EvWatcher` class in PHP, specifically covering the `start` method which activates the watcher to receive events. It also references the `stop` method for deactivating the watcher.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/evwatcher.start.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EvWatcher::start
  Description: Marks the watcher as active. Note that only active watchers will receive events.
  Signature: public EvWatcher::start(): void
  Parameters: None
  Returns: No value is returned.
  See Also:
    - EvWatcher::stop() - Stops the watcher
```

----------------------------------------

TITLE: PHP RegexIterator Filtering Example with accept()
DESCRIPTION: This example demonstrates how `RegexIterator` implicitly uses its `accept()` logic to filter elements from an `ArrayIterator`. It shows how to create a `RegexIterator` to accept only names starting with 'B', 'C', or 'D', effectively filtering the original array.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/regexiterator.accept.html#_snippet_1

LANGUAGE: PHP
CODE:
```
$names = new ArrayIterator(array('Ann', 'Bob', 'Charlie', 'David'));
$filter = new RegexIterator($names, '/^[B-D]/');
foreach ($filter as $name) {
  echo $name . PHP_EOL;
}
```

----------------------------------------

TITLE: Yaf_Application::execute Method Reference
DESCRIPTION: Comprehensive documentation for the `Yaf_Application::execute` method, detailing its signature, parameters, return type, and primary use case for integrating Yaf applications into crontab or command-line workflows.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-application.execute.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Application::execute(callable $entry, string ...$args): void
  - Description: This method is typically used to run Yaf_Application in a crontab work. It allows crontab jobs to utilize Yaf's autoloader and Bootstrap mechanism.
  - Parameters:
    - $entry (callable): A valid callback function or method to be executed.
    - $args (string...): Optional parameters that will be passed to the callback function.
  - Returns: void (The method does not return any value).
```

----------------------------------------

TITLE: PHP Declare Strict MongoDB Server API Version
DESCRIPTION: Illustrates how to declare a strict MongoDB Server API version using `MongoDB\Driver\ServerApi`. When `strict` is set to `true`, the server will reject commands that are not part of the declared API version, as shown by the `buildInfo` command failing in this example.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.mongodb-driver-serverapi.html#_snippet_2

LANGUAGE: php
CODE:
```
<?php
use MongoDB\Driver\Manager;
use MongoDB\Driver\ServerApi;

$v1 = new ServerApi(ServerApi::v1, true);
$manager = new Manager('mongodb://localhost:27017', [], ['serverApi' => $v1]);

$command = new MongoDB\Driver\Command(['buildInfo' => 1]);

try {
$cursor = $manager->executeCommand('admin', $command);
} catch(MongoDB\Driver\Exception $e) {
echo $e->getMessage(), ""\n"";
exit;
}

/* The buildInfo command returns a single result document, so we need to access
* the first result in the cursor. */
$buildInfo = $cursor->toArray()[0];

echo $buildInfo->version, ""\n"";
?>
```

----------------------------------------

TITLE: OAuthProvider Class API Documentation
DESCRIPTION: Comprehensive API documentation for the OAuthProvider class, including method signatures, parameter details, return types, and descriptions. This entry consolidates all methods for managing OAuth provider functionalities.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.oauthprovider.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
OAuthProvider:
  __construct(array $params_array = ?)
    Constructs a new OAuthProvider object.
    Parameters:
      - $params_array: An optional array of parameters.

  addRequiredParameter(string $req_params): bool
    Add required parameters to the OAuth request.
    Parameters:
      - $req_params: The parameter to add.
    Returns:
      - bool: True on success, false on failure.

  callconsumerHandler(): void
    Calls the consumerHandler callback function.
    Returns:
      - void

  callTimestampNonceHandler(): void
    Calls the timestampNonceHandler callback function.
    Returns:
      - void

  calltokenHandler(): void
    Calls the tokenHandler callback function.
    Returns:
      - void

  checkOAuthRequest(?string $uri = ?, ?string $method = ?): void
    Check an OAuth request against the provider's rules.
    Parameters:
      - $uri: The URI of the request (optional).
      - $method: The HTTP method of the request (optional).
    Returns:
      - void

  consumerHandler(callable $callback_function): void
    Set the consumerHandler callback function.
    Parameters:
      - $callback_function: The callback function to set.
    Returns:
      - void

  generateToken(int $size, bool $strong = false): string
    Generate a random token.
    Parameters:
      - $size: The desired size of the token.
      - $strong: Whether to use cryptographically secure random bytes (default: false).
    Returns:
      - string: The generated token.

  is2LeggedEndpoint(mixed $params_array): void
    Sets whether the endpoint is a 2-legged endpoint.
    Parameters:
      - $params_array: Parameters related to the endpoint.
    Returns:
      - void

  isRequestTokenEndpoint(bool $will_issue_request_token): void
    Sets whether the current endpoint is the request token endpoint.
    Parameters:
      - $will_issue_request_token: Boolean indicating if a request token will be issued.
    Returns:
      - void

  removeRequiredParameter(string $req_params): bool
    Remove a required parameter from the OAuth request.
    Parameters:
      - $req_params: The parameter to remove.
    Returns:
      - bool: True on success, false on failure.

  reportProblem(string $oauthexception, bool $send_headers = true): string
    Report an OAuth problem and return an error string.
    Parameters:
      - $oauthexception: The OAuth exception object or string.
      - $send_headers: Whether to send HTTP headers with the error (default: true).
    Returns:
      - string: An error string.

  setParam(string $param_key, mixed $param_val = ?): bool
    Set a parameter for the OAuth request.
    Parameters:
      - $param_key: The key of the parameter.
      - $param_val: The value of the parameter (optional).
    Returns:
      - bool: True on success, false on failure.

  setRequestTokenPath(string $path): bool
    Set the path for the request token endpoint.
    Parameters:
      - $path: The URL path for the request token endpoint.
    Returns:
      - bool: True on success, false on failure.

  timestampNonceHandler(callable $callback_function): void
    Set the timestampNonceHandler callback function.
    Parameters:
      - $callback_function: The callback function to set.
    Returns:
      - void

  tokenHandler(callable $callback_function): void
    Set the tokenHandler callback function.
    Parameters:
      - $callback_function: The callback function to set.
    Returns:
      - void

```

----------------------------------------

TITLE: PHP Inotify API Reference
DESCRIPTION: Comprehensive API documentation for PHP's inotify extension, including functions for initializing an inotify instance, adding/removing watches, reading events, and checking the event queue length.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.inotify-init.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
inotify_init
  Signature: inotify_init(): resource|false
  Description: Initialize an inotify instance for use with inotify_add_watch().
  Parameters: This function has no parameters.
  Return Values: A stream resource or `false` on error.

inotify_add_watch
  Signature: inotify_add_watch(resource $fd, string $pathname, int $mask): int|false
  Description: Add a watch to an initialized inotify instance.
  Parameters:
    $fd: The inotify instance resource returned by inotify_init().
    $pathname: The path to watch.
    $mask: A bitmask of events to watch for (e.g., IN_ATTRIB, IN_MODIFY, IN_CREATE, etc.).
  Return Values: A watch descriptor (integer) or `false` on error.

inotify_rm_watch
  Signature: inotify_rm_watch(resource $fd, int $watch_descriptor): bool
  Description: Remove an existing watch from an inotify instance.
  Parameters:
    $fd: The inotify instance resource.
    $watch_descriptor: The watch descriptor to remove, returned by inotify_add_watch().
  Return Values: `true` on success or `false` on failure.

inotify_read
  Signature: inotify_read(resource $fd): array|false
  Description: Read events from an inotify instance. This function blocks until events are available unless the stream is set to non-blocking mode.
  Parameters:
    $fd: The inotify instance resource.
  Return Values: An array of event arrays, or `false` if no events are pending and the stream is non-blocking, or on error.
  Event Array Structure:
    'wd': Watch descriptor (integer)
    'mask': Event mask (integer, e.g., IN_ATTRIB bit is set)
    'cookie': Unique ID to connect related events (e.g., IN_MOVE_FROM and IN_MOVE_TO events)
    'name': The name of a file (e.g., if monitoring changes in a directory)

inotify_queue_len
  Signature: inotify_queue_len(resource $fd): int
  Description: Return the number of pending events in the inotify event queue.
  Parameters:
    $fd: The inotify instance resource.
  Return Values: An integer representing the number of pending events. If > 0, inotify_read() will not block.

fclose
  Signature: fclose(resource $handle): bool
  Description: Closes an open file pointer or resource. When used with an inotify instance, it closes the instance and all associated watches.
  Parameters:
    $handle: The file pointer or resource to close.
  Return Values: `true` on success or `false` on failure.
```

----------------------------------------

TITLE: PHP mysqli: Get MySQL Client Information API Reference
DESCRIPTION: Comprehensive API documentation for methods and properties used to retrieve the version of the MySQL client library. This includes the object-oriented property `mysqli::$client_info`, the object-oriented method `mysqli::get_client_info()`, and the procedural function `mysqli_get_client_info()`, along with their parameters, return values, and deprecation notes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysqli.get-client-info.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
mysqli::$client_info
  - Type: string
  - Description: Property to get the MySQL client library version.

mysqli::get_client_info(): string
  - Description: Object-oriented method to get the MySQL client library version.
  - Parameters: None
  - Return Value: A string representing the MySQL client library version.
  - Deprecation: Deprecated in PHP 8.1.0.

mysqli_get_client_info(?mysqli $mysql = null): string
  - Description: Procedural style function to get the MySQL client library version.
  - Parameters:
    - $mysql: (Optional) An mysqli object. Passing this argument has been deprecated in PHP 8.1.0.
  - Return Value: A string representing the MySQL client library version.
  - Deprecation: Calling with the $mysql argument deprecated in PHP 8.1.0.

Changelog:
  - Version 8.1.0:
    - Calling mysqli_get_client_info() with the $mysql argument has been deprecated.
    - The object-oriented style mysqli::get_client_info() has been deprecated.

See Also:
  - mysqli_get_client_version(): Returns the MySQL client version as an integer.
  - mysqli_get_server_info(): Returns the version of the MySQL server.
  - mysqli_get_server_version(): Returns the version of the MySQL server as an integer.
```

----------------------------------------

TITLE: UI\Controls\Button Class API Reference
DESCRIPTION: API documentation for the UI\Controls\Button class, detailing its constructor and methods for managing button text and handling click events.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.ui.html#_snippet_11

LANGUAGE: APIDOC
CODE:
```
UI\Controls\Button:
  __construct()
    - Description: Constructs a new Button control.
  getText()
    - Description: Retrieves the text displayed on the button.
  onClick()
    - Description: Defines the callback for when the button is clicked.
  setText()
    - Description: Sets the text displayed on the button.
```

----------------------------------------

TITLE: PHP Example: Get Days in Month using cal_days_in_month
DESCRIPTION: This example demonstrates how to use the `cal_days_in_month` function in PHP to determine the number of days in August 2003 using the Gregorian calendar.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cal-days-in-month.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $number = cal_days_in_month(CAL_GREGORIAN, 8, 2003); // 31
  echo ""There were {$number} days in August 2003"";
?>
```

----------------------------------------

TITLE: Swoole\Http\Client::post Method API Reference
DESCRIPTION: Detailed API documentation for the `Swoole\Http\Client::post` method, which sends a POST HTTP request to a remote server. It specifies the required path, data, and an optional callback function, available since PECL swoole 1.9.0.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-http-client.post.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Http\Client::post
  Description: Send POST http request to the remote server.
  Signature: public Swoole\Http\Client::post(string $path, string $data, callable $callback): void
  Parameters:
    $path (string): The URL path for the POST request.
    $data (string): The data to be sent in the POST request body.
    $callback (callable): An optional callback function to be executed upon completion of the request.
  Return Values: void (This method does not return a value directly, it operates asynchronously with the callback).
  Availability: PECL swoole >= 1.9.0
```

----------------------------------------

TITLE: PHP SoapClient Get Functions Example
DESCRIPTION: This example demonstrates how to instantiate a `SoapClient` with a WSDL URL and then call the `__getFunctions()` method to retrieve and display the list of available SOAP functions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/soapclient.getfunctions.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$client = new SoapClient('http://soap.amazon.com/schemas3/AmazonWebServices.wsdl');
var_dump($client->__getFunctions());
?>
```

----------------------------------------

TITLE: Ds\Deque::find Method API Reference
DESCRIPTION: Detailed API documentation for the `Ds\Deque::find` method, outlining its signature, parameters, return values, and important notes regarding value comparison (by value and type).
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-deque.find.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Deque::find
public Ds\Deque::find(mixed $value): mixed

Description:
Returns the index of the `value`, or `false` if not found.

Parameters:
`value`: The value to find.

Return Values:
The index of the value, or `false` if not found.

Note:
Values will be compared by value and by type.
```

----------------------------------------

TITLE: Reading All PHP Attributes with Reflection API
DESCRIPTION: This snippet demonstrates how to define a custom attribute, apply it to a class, and then use PHP's Reflection API to retrieve and inspect all attributes associated with that class. It shows how to get the attribute name, arguments, and instantiate the attribute object.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/language.attributes.reflection.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
#[Attribute]
class MyAttribute
{
    public $value;

    public function __construct($value)
    {
        $this->value = $value;
    }
}

#[MyAttribute(value: 1234)]
class Thing
{
}

function dumpAttributeData($reflection) {
    $attributes = $reflection->getAttributes();

    foreach ($attributes as $attribute) {
        var_dump($attribute->getName());
        var_dump($attribute->getArguments());
        var_dump($attribute->newInstance());
    }
}

dumpAttributeData(new ReflectionClass(Thing::class));
/*
string(11) ""MyAttribute""
array(1) {
[""value""]=>
int(1234)
}
objet(MyAttribute)#3 (1) {
[""value""]=>
int(1234)
}*/
```

----------------------------------------

TITLE: PHP Property Hooks: Shorthand Get Expression
DESCRIPTION: Illustrates the shorthand syntax for a `get` hook in PHP, where a single expression replaces the full block. This example is functionally equivalent to the full version for the `get` operation, providing a more concise way to define read logic.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/language.oop5.property-hooks.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
class Example
{
    private bool $modified = false;

    public string $foo = 'default value' {
        get => $this->foo . ($this->modified ? ' (modified)' : '');

        set(string $value) {
            $this->foo = strtolower($value);
            $this->modified = true;
        }
    }
}
?>
```

----------------------------------------

TITLE: LuaSandbox::callFunction API Reference
DESCRIPTION: Detailed API documentation for the LuaSandbox::callFunction method, outlining its signature, parameters, return values, and behavior when interacting with Lua global functions from a PHP environment.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/luasandbox.callfunction.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
LuaSandbox::callFunction(string $name, mixed ...$args): array|bool
  - Description: Calls a function in a Lua global variable. If the name contains ""."" characters, the function is located via recursive table accesses, as if the name were a Lua expression. If the variable does not exist, or is not a function, false will be returned and a warning issued. For more information about calling Lua functions and the return values, see LuaSandboxFunction::call().
  - Parameters:
    - $name (string): The Lua variable name representing the function to call. This can include dot notation for nested functions (e.g., 'string.match').
    - ...$args (mixed): Variable number of arguments to be passed to the Lua function. These arguments will be converted from PHP types to Lua types.
  - Return Values:
    - array: An array of values returned by the Lua function. This array may be empty if the Lua function returns no values.
    - bool: Returns false on failure (e.g., if the specified Lua variable does not exist or is not a callable function), and a warning will be issued.
```

----------------------------------------

TITLE: Yaf_Request_Http Class API Reference
DESCRIPTION: Comprehensive API documentation for the Yaf_Request_Http class, including its constructor, methods for accessing HTTP request data (GET, POST, COOKIE, FILES, RAW), and inherited methods from Yaf_Request_Abstract for general request handling, parameter management, and request type checks.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.yaf-request-http.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class Yaf_Request_Http extends Yaf_Request_Abstract {
  
  __construct(string $request_uri = ?, string $base_uri = ?)
    - Description: Constructor for the Yaf_Request_Http object.
    - Parameters:
      - $request_uri: The request URI string.
      - $base_uri: The base URI string.

  get(string $name, string $default = ?): mixed
    - Description: Retrieves a parameter from GET, POST, or COOKIE data.
    - Parameters:
      - $name: The name of the parameter to retrieve.
      - $default: The default value to return if the parameter is not found.
    - Returns: The parameter value or the default value.

  getCookie(string $name, string $default = ?): mixed
    - Description: Retrieves a cookie parameter.
    - Parameters:
      - $name: The name of the cookie to retrieve.
      - $default: The default value to return if the cookie is not found.
    - Returns: The cookie value or the default value.

  getFiles(): void
    - Description: Retrieves uploaded files information.
    - Returns: An array containing information about uploaded files.

  getPost(string $name, string $default = ?): mixed
    - Description: Retrieves a POST parameter.
    - Parameters:
      - $name: The name of the POST parameter to retrieve.
      - $default: The default value to return if the parameter is not found.
    - Returns: The POST parameter value or the default value.

  getQuery(string $name, string $default = ?): mixed
    - Description: Retrieves a GET parameter.
    - Parameters:
      - $name: The name of the GET parameter to retrieve.
      - $default: The default value to return if the parameter is not found.
    - Returns: The GET parameter value or the default value.

  getRaw(): mixed
    - Description: Retrieves the raw request body.
    - Returns: The raw request body content.

  getRequest(): void
    - Description: Retrieves the request object itself (placeholder/internal).
    - Returns: The current request object.

  isXmlHttpRequest(): bool
    - Description: Checks if the current request is an AJAX (XMLHttpRequest).
    - Returns: true if it's an AJAX request, false otherwise.

  
  -- Inherited Methods from Yaf_Request_Abstract --

  clearParams(): bool
    - Description: Clears all custom parameters set on the request.
    - Returns: true on success.

  getActionName(): void
    - Description: Retrieves the action name from the request.
    - Returns: The action name string.

  getBaseUri(): void
    - Description: Retrieves the base URI of the application.
    - Returns: The base URI string.

  getControllerName(): void
    - Description: Retrieves the controller name from the request.
    - Returns: The controller name string.

  getEnv(string $name, string $default = ?): void
    - Description: Retrieves an environment variable.
    - Parameters:
      - $name: The name of the environment variable.
      - $default: The default value if not found.
    - Returns: The environment variable value.

  getException(): void
    - Description: Retrieves the exception object if an error occurred during dispatch.
    - Returns: An Exception object or null.

  getLanguage(): void
    - Description: Retrieves the language setting from the request.
    - Returns: The language string.

  getMethod(): string
    - Description: Retrieves the HTTP request method (e.g., 'GET', 'POST').
    - Returns: The HTTP method string.

  getModuleName(): void
    - Description: Retrieves the module name from the request.
    - Returns: The module name string.

  getParam(string $name, string $default = ?): mixed
    - Description: Retrieves a custom parameter set on the request.
    - Parameters:
      - $name: The name of the parameter.
      - $default: The default value if not found.
    - Returns: The parameter value or the default value.

  getParams(): array
    - Description: Retrieves all custom parameters set on the request.
    - Returns: An associative array of parameters.

  getRequestUri(): void
    - Description: Retrieves the full request URI.
    - Returns: The request URI string.

  getServer(string $name, string $default = ?): void
    - Description: Retrieves a server variable (from $_SERVER).
    - Parameters:
      - $name: The name of the server variable.
      - $default: The default value if not found.
    - Returns: The server variable value.

  isCli(): bool
    - Description: Checks if the request is from the command line interface.
    - Returns: true if CLI, false otherwise.

  isDispatched(): bool
    - Description: Checks if the request has been dispatched.
    - Returns: true if dispatched, false otherwise.

  isGet(): bool
    - Description: Checks if the request method is GET.
    - Returns: true if GET, false otherwise.

  isHead(): bool
    - Description: Checks if the request method is HEAD.
    - Returns: true if HEAD, false otherwise.
}
```

----------------------------------------

TITLE: MongoDB\Driver\Manager::startSession API Reference
DESCRIPTION: Comprehensive API documentation for the `startSession` method of the `MongoDB\Driver\Manager` class, detailing its signature, parameters, return values, and error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mongodb-driver-manager.startsession.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
MongoDB\Driver\Manager::startSession

Signature:
final public MongoDB\Driver\Manager::startSession([?][array] $options = [null]): MongoDB\Driver\Session

Description:
Creates a MongoDB\Driver\Session for the given options. The session may then be specified when executing commands, queries, and write operations.
Note: A MongoDB\Driver\Session can only be used with the MongoDB\Driver\Manager from which it was created.

Parameters:
  $options (array, optional):
    - causalConsistency (bool, default: true):
      Configure causal consistency in a session. If true, each operation in the session will be causally ordered after the previous read or write operation. Set to false to disable causal consistency. See Casual Consistency in the MongoDB manual for more information.
    - defaultTransactionOptions (array, default: []):
      Default options to apply to newly created transactions. These options are used unless they are overridden when a transaction is started with different value for each option.
      Sub-options for defaultTransactionOptions:
        - maxCommitTimeMS (integer):
          The maximum amount of time in milliseconds to allow a single `commitTransaction` command to run. If specified, `maxCommitTimeMS` must be a signed 32-bit integer greater than or equal to zero.
        - readConcern (MongoDB\Driver\ReadConcern):
          A read concern to apply to the operation. This option is available in MongoDB 3.2+ and will result in an exception at execution time if specified for an older server version.
        - readPreference (MongoDB\Driver\ReadPreference):
          A read preference to use for selecting a server for the operation.
        - writeConcern (MongoDB\Driver\WriteConcern):
          A write concern to apply to the operation. This option is available in MongoDB 4.0+.
    - snapshot (bool, default: false):
      Configure snapshot reads in a session. If true, a timestamp will be obtained from the first supported read operation in the session (i.e. `find`, `aggregate`, or unsharded `distinct`). Subsequent read operations within the session will then utilize a ""snapshot"" read concern level to read majority-committed data from that timestamp. Set to false to disable snapshot reads. Snapshot reads require MongoDB 5.0+ and cannot be used with causal consistency, transactions, or write operations. If ""snapshot"" is true, ""causalConsistency"" will default to false. See Read Concern ""snapshot"" in the MongoDB manual for more information.

Return Values:
Returns a MongoDB\Driver\Session.

Errors/Exceptions:
- Throws MongoDB\Driver\Exception\InvalidArgumentException on argument parsing errors.
- Throws MongoDB\Driver\Exception\InvalidArgumentException if the ""causalConsistency"" and ""snapshot"" options are both true.
- Throws MongoDB\Driver\Exception\RuntimeException if the session could not be created (e.g. libmongoc does not support crypto).

Changelog:
- PECL mongodb 1.11.0: The ""snapshot"" option was added.
- PECL mongodb 1.6.0: The ""maxCommitTimeMS"" option was added to ""defaultTransactionOptions"".
- PECL mongodb 1.5.0: The ""defaultTransactionOptions"" option was added.
```

----------------------------------------

TITLE: Get Phar API Version in PHP
DESCRIPTION: Demonstrates how to retrieve the API version of the Phar file format using the `Phar::apiVersion()` static method in PHP. This method returns a string representing the current API version supported by the Phar extension, which can be useful for compatibility checks.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.apiversion.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  echo Phar::apiVersion();
?>
```

----------------------------------------

TITLE: MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent Class API
DESCRIPTION: API documentation for the PHP class `MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent`, which provides details about a started server heartbeat event, including methods to retrieve server host, port, and whether the heartbeat was awaited.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.mongodb-driver-monitoring-serverheartbeatstartedevent.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
final class MongoDB\Driver\Monitoring\ServerHeartbeatStartedEvent {
  // Methods
  final public getHost(): string
    - Returns the hostname of the server.
  final public getPort(): int
    - Returns the port on which this server is listening.
  final public isAwaited(): bool
    - Returns whether the heartbeat used a streaming protocol.
}
```

----------------------------------------

TITLE: APIDOC: DOMXPath::query Method Signature and Details
DESCRIPTION: Comprehensive documentation for the `DOMXPath::query` method, including its full signature, detailed parameter descriptions, possible return values (DOMNodeList or false), and a list of potential errors and exceptions that can occur during its execution, especially when involving PHP callbacks.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/domxpath.query.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
DOMXPath::query
public DOMXPath::query(string $expression, ?DOMNode $contextNode = null, bool $registerNodeNS = true): mixed

Description:
Executes the given XPath `expression`.

Parameters:
- $expression (string): The XPath expression to execute.
- $contextNode (?DOMNode, optional, default: null): An optional context node for relative XPath queries. By default, queries are relative to the root element.
- $registerNodeNS (bool, optional, default: true): Whether to automatically register in-scope namespace prefixes of the context node to the DOMXPath object. This avoids manual calls to DOMXPath::registerNamespace(). In case of conflicts, only the nearest descendant namespace prefix is registered.

Return Values:
- DOMNodeList: Contains all nodes matching the given XPath `expression`. Returns an empty DOMNodeList if the expression does not return nodes.
- false: If the `expression` is malformed or the `contextNode` is invalid.

Errors/Exceptions:
- Error: Thrown if a PHP callback is invoked but no callbacks were registered, or if the named callback was not registered.
- TypeError: Thrown if the `php:function` syntax is used and the handler name is not a string.
- Error: Thrown if a non-DOM object was returned from a callback.
```

----------------------------------------

TITLE: PHP Example: Get PostgreSQL Query Result Memory Size
DESCRIPTION: This example demonstrates how to connect to a PostgreSQL database, execute a simple query, and then use `pg_result_memory_size()` to retrieve the memory allocated for the query result.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.pg-result-memory-size.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
   $db = pg_connect(""dbname=users user=me"");

   $res = pg_query($db, 'SELECT 1');

   $size = pg_result_memory_size($res);

   var_dump($size);
?>
```

----------------------------------------

TITLE: V8Js::__construct API Reference
DESCRIPTION: This entry provides the full API documentation for the `V8Js` class constructor. It details the method signature, all available parameters, their types, default values, and comprehensive descriptions, including how they influence the JavaScript context created by the V8Js object.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/v8js.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
V8Js::__construct

public V8Js::__construct(
    string $object_name = ""PHP"",
    array $variables = array(),
    array $extensions = array(),
    bool $report_uncaught_exceptions = true
)

Constructs a new V8Js object, initializing the JavaScript execution environment.

Parameters:
  $object_name (string, default: ""PHP""):
    The name of the global object that will represent PHP in the JavaScript context.

  $variables (array, default: array()):
    An associative array mapping names for JavaScript variables to names of PHP variables.
    Format: array(""js_name"" => ""php_variable_name""). These PHP variables will be accessible
    within the JavaScript context.

  $extensions (array, default: array()):
    A list of extension names (strings) that should be enabled for this V8Js instance.
    These extensions must have been previously registered using V8Js::registerExtension().
    Note: Extensions configured for automatic enabling or their dependencies do not need
    to be explicitly listed here.

  $report_uncaught_exceptions (bool, default: true):
    Controls the behavior for uncaught JavaScript exceptions. If true, exceptions are
    reported immediately. If false, exceptions are not reported immediately but can be
    retrieved later using V8Js::getPendingException().

Returns:
  (V8Js): A new V8Js object instance.
```

----------------------------------------

TITLE: Yaf_Request_Http Class Methods
DESCRIPTION: Documentation for methods of the Yaf_Request_Http class, primarily used for HTTP request introspection.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_17

LANGUAGE: APIDOC
CODE:
```
Yaf_Request_Http::isXmlHttpRequest()
  - Determin if request is Ajax Request
```

----------------------------------------

TITLE: PHP mysql_affected_rows Example with DELETE Queries
DESCRIPTION: Demonstrates how to use `mysql_affected_rows()` to get the count of deleted records after `DELETE` queries. It includes examples for successful deletions and cases where no rows are affected by the `WHERE` clause.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mysql-affected-rows.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
  if (!$link) {
  die('Could not connect: ' . mysql_error());
  }
  mysql_select_db('mydb');

  /* this should return the correct numbers of deleted records */
  mysql_query('DELETE FROM mytable WHERE id < 10');
  printf(""Records deleted: %d\n"", mysql_affected_rows());

  /* with a where clause that is never true, it should return 0 */
  mysql_query('DELETE FROM mytable WHERE 0');
  printf(""Records deleted: %d\n"", mysql_affected_rows());
?>
```

----------------------------------------

TITLE: ZipArchive::addFile Method Reference
DESCRIPTION: Detailed API documentation for the `ZipArchive::addFile` method, including its signature, parameter descriptions, return values, and important notes regarding file locking and path portability.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ziparchive.addfile.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ZipArchive::addFile
public ZipArchive::addFile(
    string $filepath,
    string $entryname = """",
    int $start = 0,
    int $length = ZipArchive::LENGTH_TO_END,
    int $flags = ZipArchive::FL_OVERWRITE
): bool

Description:
Adds a file to a ZIP archive from a given path.

Note: For maximum portability, it is recommended to always use forward slashes (/) as directory separator in ZIP filenames.

Parameters:
- filepath (string): The path to the file to add.
- entryname (string, optional): If supplied and not empty, this is the local name inside the ZIP archive that will override the `filepath`.
- start (int, optional): For partial copy, start position.
- length (int, optional): For partial copy, length to be copied. If `ZipArchive::LENGTH_TO_END` (0) the file size is used. If `ZipArchive::LENGTH_UNCHECKED` the whole file is used (starting from `start`).
- flags (int, optional): Bitmask consisting of `ZipArchive::FL_OVERWRITE`, `ZipArchive::FL_ENC_GUESS`, `ZipArchive::FL_ENC_UTF_8`, `ZipArchive::FL_ENC_CP437`, `ZipArchive::FL_OPEN_FILE_NOW`. The behaviour of these constants is described on the ZIP constants page.

Return Values:
Returns `true` on success or `false` on failure.

Changelog:
- 8.0.0, PECL zip 1.18.0: `flags` was added.
- 8.3.0, PECL zip 1.22.1: `ZipArchive::FL_OPEN_FILE_NOW` was added.
- 8.3.0, PECL zip 1.22.2: `ZipArchive::LENGTH_TO_END` and `ZipArchive::LENGTH_UNCHECKED` were added.

Notes:
When a file is set to be added to the archive, PHP will lock the file. The lock is only released once the `ZipArchive` object has been closed, either via `ZipArchive::close()` or the `ZipArchive` object being destroyed. This may prevent you from being able to delete the file being added until after the lock has been released.

See Also:
- `ZipArchive::replaceFile()`: Replace file in ZIP archive with a given path
```

----------------------------------------

TITLE: Get Unicode Version in PHP
DESCRIPTION: This PHP example demonstrates how to call the static method `IntlChar::getUnicodeVersion()` to retrieve the current Unicode version used by ICU and then dumps the resulting array.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/intlchar.getunicodeversion.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
var_dump(IntlChar::getUnicodeVersion());
?>
```

----------------------------------------

TITLE: Ds\Deque::get Method API Documentation
DESCRIPTION: Comprehensive API documentation for the `Ds\Deque::get` method, detailing its signature, parameters, return values, and potential exceptions. This method retrieves an element from the Deque at a specified index.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-deque.get.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Ds\Deque::get
==============
(PECL ds >= 1.0.0)

public Ds\Deque::get(int $index): mixed
Returns the value at a given index.

Parameters:
  $index (int): The index to access, starting at 0.

Return Values:
  mixed: The value at the requested index.

Errors/Exceptions:
  OutOfRangeException: if the index is not valid.
```

----------------------------------------

TITLE: CUBRID cubrid_column_types Function API
DESCRIPTION: Detailed API documentation for the `cubrid_column_types` function, which retrieves an array of column types from a CUBRID query result identifier. It includes parameter details and return values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.cubrid-column-types.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
cubrid_column_types(resource $req_identifier): array

Description:
The cubrid_column_types() function gets column types of query results by using req_identifier.

Parameters:
  $req_identifier: Request identifier.

Return Values:
  Array of string values containing the column types, when process is successful, or false on failure.
```

----------------------------------------

TITLE: Yaf_Request_Simple Methods and Constructor
DESCRIPTION: This section details the constructor and various getter methods of the Yaf_Request_Simple class, used for retrieving request data such as GET, POST, Cookie, and uploaded files, as well as checking request types.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.yaf-request-simple.html#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Yaf_Request_Simple::__construct(): void
  - Constructor for Yaf_Request_Simple.
  - Returns: void

Yaf_Request_Simple::get(string $name = ?): mixed
  - Retrieves a parameter from GET, POST, or custom parameters.
  - Parameters:
    - $name: (Optional) The name of the parameter to retrieve. If omitted, returns all parameters.
  - Returns: The parameter value or an array of all parameters.

Yaf_Request_Simple::getCookie(string $name = ?): string|array|null
  - Retrieves a cookie value.
  - Parameters:
    - $name: (Optional) The name of the cookie to retrieve. If omitted, returns all cookies.
  - Returns: The cookie value, an array of all cookies, or null if not found.

Yaf_Request_Simple::getFiles(string $name = ?): array|null
  - Retrieves uploaded file information.
  - Parameters:
    - $name: (Optional) The name of the file input field. If omitted, returns all uploaded files.
  - Returns: An array of file information or null.

Yaf_Request_Simple::getPost(string $name = ?): string|array|null
  - Retrieves a POST parameter.
  - Parameters:
    - $name: (Optional) The name of the POST parameter. If omitted, returns all POST parameters.
  - Returns: The POST parameter value, an array of all POST parameters, or null if not found.

Yaf_Request_Simple::getQuery(string $name = ?): string|array|null
  - Retrieves a GET parameter.
  - Parameters:
    - $name: (Optional) The name of the GET parameter. If omitted, returns all GET parameters.
  - Returns: The GET parameter value, an array of all GET parameters, or null if not found.

Yaf_Request_Simple::getRequest(): mixed
  - Retrieves the raw request body or specific request data.
  - Returns: The request data.

Yaf_Request_Simple::isXmlHttpRequest(): bool
  - Determines if the current request is an AJAX (XMLHttpRequest) request.
  - Returns: true if it's an AJAX request, false otherwise.
```

----------------------------------------

TITLE: PHP Example: Get Ds\PriorityQueue Capacity
DESCRIPTION: This PHP example demonstrates how to instantiate a `Ds\PriorityQueue` object and then retrieve its current capacity using the `capacity()` method. The output shows the integer value of the capacity.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-priorityqueue.capacity.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $queue = new \Ds\PriorityQueue();
  var_dump($queue->capacity());
?>
```

----------------------------------------

TITLE: Swoole Server Core API
DESCRIPTION: Comprehensive API documentation for the core Swoole\Server class, covering server initialization, listener management, process handling, timer operations, client connection management, data transmission, and server lifecycle control.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.swoole.html#_snippet_25

LANGUAGE: APIDOC
CODE:
```
Swoole\Server:
  addlistener(): Add a new listener to the server.
  addProcess(): Add a user defined swoole_process to the server.
  after(): Trigger a callback function after a period of time.
  bind(): Bind the connection to a user defined user ID.
  clearTimer(): Stop and destroy a timer.
  close(): Close a connection to the client.
  confirm(): Check status of the connection.
  connection_info(): Get the connection info by file description.
  connection_list(): Get all of the established connections.
  __construct(): Construct a Swoole server.
  defer(): Delay execution of the callback function at the end of current EventLoop.
  exist(): Check if the connection is existed.
  finish(): Used in task process for sending result to the worker process when the task is finished.
  getClientInfo(): Get the connection info by file description.
  getClientList(): Get all of the established connections.
  getLastError(): Get the error code of the most recent error.
  heartbeat(): Check all the connections on the server.
  listen(): Listen on the given IP and port, socket type.
  on(): Register a callback function by event name.
  pause(): Stop receiving data from the connection.
  protect(): Set the connection to be protected mode.
  reload(): Restart all the worker process.
  resume(): Start receiving data from the connection.
  send(): Send data to the client.
  sendfile(): Send file to the connection.
  sendMessage(): Send message to worker processes by ID.
  sendto(): Send data to the remote UDP address.
  sendwait(): Send data to the remote socket in the blocking way.
  set(): Set the runtime settings of the swoole server.
  shutdown(): Shutdown the master server process, this function can be called in worker processes.
  start(): Start the Swoole server.
  stats(): Get the stats of the Swoole server.
```

----------------------------------------

TITLE: mysqlnd Connection `connect` Function Prototype
DESCRIPTION: This API documentation shows the C prototype for the `connect` function within the mysqlnd connection methods. It details the various parameters required for establishing a MySQL connection, including host, user, password, database, port, and socket. This prototype is used to illustrate the need for custom wrappers when calling PHP methods with more than two arguments from C.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysqlnd.plugin.developing.html#_snippet_4

LANGUAGE: APIDOC
CODE:
```
enum_func_status (*func_mysqlnd_conn__connect)(
  MYSQLND *conn, const char *host,
  const char * user, const char * passwd,
  unsigned int passwd_len, const char * db,
  unsigned int db_len, unsigned int port,
  const char * socket, unsigned int mysql_flags TSRMLS_DC
);
```

----------------------------------------

TITLE: Get Link Target and Real Path using SplFileInfo in PHP
DESCRIPTION: This PHP example demonstrates how to use `SplFileInfo::getLinkTarget()` to retrieve the target path of a symbolic link and `SplFileInfo::getRealPath()` to get its absolute, resolved path. It first checks if the `SplFileInfo` object represents a link before attempting to get its targets, illustrating the difference between the two methods.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/splfileinfo.getlinktarget.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $info = new SplFileInfo('/Users/bbieber/workspace');
  if ($info->isLink()) {
  var_dump($info->getLinkTarget());
  var_dump($info->getRealPath());
  }
  ?>
```

----------------------------------------

TITLE: Swoole Redis Server setHandler Method API Reference
DESCRIPTION: Documents the `setHandler` method of the `Swoole\Redis\Server` class, used for setting custom handlers for Redis commands. This entry provides the method's signature and parameter details, noting that the full documentation is currently unavailable.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-redis-server.sethandler.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Redis\Server::setHandler
  Description: Sets a custom handler for a Redis command.
  Signature: public Swoole\Redis\Server::setHandler(
    string $command,
    string $callback,
    string $number_of_string_param = ?,
    string $type_of_array_param = ?
  ): ReturnType
  Parameters:
    $command (string): The Redis command name to handle.
    $callback (string): The callback function to execute when the command is received.
    $number_of_string_param (string, optional): An undocumented parameter, possibly related to the number of string parameters.
    $type_of_array_param (string, optional): An undocumented parameter, possibly related to the type of array parameters.
  Return Value: ReturnType (Undocumented)
  Warning: This function is currently not fully documented; only its argument list is available.
```

----------------------------------------

TITLE: PHP Reflection Output: `json` Extension Details
DESCRIPTION: This API documentation block details the structure of the PHP `json` extension as reported by Reflection. It lists the extension's version, its defined constants (e.g., `JSON_HEX_TAG`, `JSON_ERROR_NONE`), and its core functions (`json_encode`, `json_decode`, `json_last_error`) along with their parameters. This provides a comprehensive overview of the JSON extension's API.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflection.examples.html#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Extension [ <persistent> extension #23 json version 1.2.1 ] {

  - Constants [10] {
    Constant [ integer JSON_HEX_TAG ] { 1 }
    Constant [ integer JSON_HEX_AMP ] { 2 }
    Constant [ integer JSON_HEX_APOS ] { 4 }
    Constant [ integer JSON_HEX_QUOT ] { 8 }
    Constant [ integer JSON_FORCE_OBJECT ] { 16 }
    Constant [ integer JSON_ERROR_NONE ] { 0 }
    Constant [ integer JSON_ERROR_DEPTH ] { 1 }
    Constant [ integer JSON_ERROR_STATE_MISMATCH ] { 2 }
    Constant [ integer JSON_ERROR_CTRL_CHAR ] { 3 }
    Constant [ integer JSON_ERROR_SYNTAX ] { 4 }
  }

  - Functions {
    Function [ <internal:json> function json_encode ] {

      - Parameters [2] {
        Parameter #0 [ <required> $value ]
        Parameter #1 [ <optional> $options ]
      }
    }
    Function [ <internal:json> function json_decode ] {

      - Parameters [3] {
        Parameter #0 [ <required> $json ]
        Parameter #1 [ <optional> $assoc ]
        Parameter #2 [ <optional> $depth ]
      }
    }
    Function [ <internal:json> function json_last_error ] {

      - Parameters [0] {
      }
    }
  }
}
```

----------------------------------------

TITLE: PHP: Get NumberFormatter Symbol (Procedural Example)
DESCRIPTION: Demonstrates how to retrieve and modify a number formatter's symbol using the procedural `numfmt_get_symbol` and `numfmt_set_symbol` functions in PHP. It shows how to get the default grouping separator, format a number, change the separator, and then re-get the symbol and format the number again.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/numberformatter.getsymbol.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $fmt = numfmt_create( 'de_DE', NumberFormatter::DECIMAL );
  echo ""Sep: "".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL).""\n"";
  echo numfmt_format($fmt, 1234567.891234567890000).""\n"";
  numfmt_set_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL, ""*"");
  echo ""Sep: "".numfmt_get_symbol($fmt, NumberFormatter::GROUPING_SEPARATOR_SYMBOL).""\n"";
  echo numfmt_format($fmt, 1234567.891234567890000).""\n"";
?>
```

----------------------------------------

TITLE: mysql_xdevapi\CollectionAdd Class Methods
DESCRIPTION: API documentation for the `CollectionAdd` class, which represents an operation to add documents to a collection. It includes methods for constructing the operation and executing it.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.mysql-xdevapi.html#_snippet_4

LANGUAGE: APIDOC
CODE:
```
mysql_xdevapi\CollectionAdd::__construct(): void
  - CollectionAdd constructor. Initializes a new add operation instance.
  - Parameters: None.
  - Returns: No value.

mysql_xdevapi\CollectionAdd::execute(): mysql_xdevapi\Result
  - Executes the document add statement.
  - Returns: A Result object containing the outcome of the operation.
```

----------------------------------------

TITLE: VarnishAdmin Class API: Connection and Administration
DESCRIPTION: Comprehensive API documentation for the VarnishAdmin PHP class, detailing methods to connect to and interact with a Varnish instance's administration interface. This entry specifically covers the `connect` method, its signature, parameters, and return values, along with references to related methods.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/varnishadmin.connect.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
VarnishAdmin::connect
  Description: Connects to a Varnish instance administration interface.
  Signature: public VarnishAdmin::connect(): bool
  Parameters:
    - None
  Return Values:
    - bool: Returns true on successful connection, false on failure.
  Related Methods:
    - VarnishAdmin::__construct: Constructor for the VarnishAdmin class.
    - VarnishAdmin::clearPanic: Clears the Varnish panic state.
```

----------------------------------------

TITLE: mysql_xdevapi\Schema::getName API Reference
DESCRIPTION: Comprehensive API documentation for the `mysql_xdevapi\Schema::getName()` method. It describes the method's purpose, its signature, lack of parameters, and the string return value representing the schema's name.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-schema.getname.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Schema::getName

Description:
  public mysql_xdevapi\Schema::getName(): string
  Get the name of the schema.

Parameters:
  This function has no parameters.

Return Values:
  The name of the schema connected to the schema object, as a string.
```

----------------------------------------

TITLE: PharData::offsetSet Method API Reference
DESCRIPTION: Comprehensive API documentation for the `PharData::offsetSet` method, detailing its signature, parameters, return values, and exception handling. This method is part of the `ArrayAccess` interface for `PharData` objects, allowing direct manipulation of files within tar/zip archives.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phardata.offsetset.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PharData::offsetSet
public PharData::offsetSet(string $localName, resource|string $value): void

Description:
This is an implementation of the ArrayAccess interface allowing direct manipulation of the contents of a tar/zip archive using array access brackets. offsetSet is used for modifying an existing file, or adding a new file to a tar/zip archive.

Parameters:
- $localName (string): The filename (relative path) to modify in a tar or zip archive.
- $value (resource|string): Content of the file.

Return Values:
No return values (void).

Errors/Exceptions:
Throws PharException if there are any problems flushing changes made to the tar/zip archive to disk.

Notes:
PharData::addFile(), PharData::addFromString() and PharData::offsetSet() save a new phar archive each time they are called. If performance is a concern, PharData::buildFromDirectory() or PharData::buildFromIterator() should be used instead.

See Also:
- Phar::offsetSet() - Set the contents of an internal file to those of an external file
```

----------------------------------------

TITLE: Yaf_Route_Simple Class Methods
DESCRIPTION: Documentation for methods of the Yaf_Route_Simple class, a basic routing strategy.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_25

LANGUAGE: APIDOC
CODE:
```
Yaf_Route_Simple::assemble()
  - Assemble a url
```

----------------------------------------

TITLE: PHP RegexIterator::__construct Usage Example
DESCRIPTION: Illustrates how to instantiate and use the RegexIterator::__construct method in PHP to filter an ArrayIterator. The example demonstrates filtering an array of strings to include only those starting with 'test' using a regular expression.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/regexiterator.construct.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$arrayIterator = new ArrayIterator(array('test 1', 'another test', 'test 123'));
$regexIterator = new RegexIterator($arrayIterator, '/^test/');

foreach ($regexIterator as $value) {
  echo $value . ""\n"";
}
?>
```

----------------------------------------

TITLE: Imagick Iterator Index API Reference
DESCRIPTION: API documentation for Imagick methods related to managing the image iterator index. This includes setting the iterator position and references to related methods for getting or setting the index.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.setiteratorindex.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::setIteratorIndex
public Imagick::setIteratorIndex(int $index): bool
  - Description: Set the iterator to the position in the image list specified with the index parameter. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
  - Parameters:
    - $index (int): The position to set the iterator to.
  - Return Values: Returns true on success.
  - See Also:
    - Imagick::getIteratorIndex(): Gets the index of the current active image.
    - Imagick::getImageIndex(): Gets the index of the current active image.
    - Imagick::setImageIndex(): Set the iterator position.
```

----------------------------------------

TITLE: GearmanClient Class API Reference
DESCRIPTION: Comprehensive API documentation for the `GearmanClient` class in PHP, detailing methods for adding job servers, submitting tasks (normal, background, high, low priority), managing task callbacks, and retrieving task status. This class facilitates interaction with Gearman job servers to distribute and execute tasks.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.gearman.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
GearmanClient:
  __construct(): Creates a GearmanClient instance.

  addOptions(int $options): Adds client options.
  addServer(string $host = '127.0.0.1', int $port = 4730): Adds a job server to the client.
  addServers(string $servers): Adds a list of job servers to the client (e.g., 'host1:port1,host2:port2').

  addTask(string $function_name, string $workload, mixed &$context = null): Adds a task to be run in parallel.
  addTaskBackground(string $function_name, string $workload, mixed &$context = null): Adds a background task to be run in parallel.
  addTaskHigh(string $function_name, string $workload, mixed &$context = null): Adds a high priority task to run in parallel.
  addTaskHighBackground(string $function_name, string $workload, mixed &$context = null): Adds a high priority background task to be run in parallel.
  addTaskLow(string $function_name, string $workload, mixed &$context = null): Adds a low priority task to run in parallel.
  addTaskLowBackground(string $function_name, string $workload, mixed &$context = null): Adds a low priority background task to be run in parallel.
  addTaskStatus(string $job_handle): Adds a task to get status.

  do(string $function_name, string $workload): Runs a single task and returns a result (deprecated).
  doBackground(string $function_name, string $workload): Runs a task in the background.
  doHigh(string $function_name, string $workload): Runs a single high priority task.
  doHighBackground(string $function_name, string $workload): Runs a high priority task in the background.
  doJobHandle(): Gets the job handle for the running task.
  doLow(string $function_name, string $workload): Runs a single low priority task.
  doLowBackground(string $function_name, string $workload): Runs a low priority task in the background.
  doNormal(string $function_name, string $workload): Runs a single task and returns a result.
  doStatus(): Gets the status for the running task.

  runTasks(): Runs a list of tasks in parallel.

  clearCallbacks(): Clears all task callback functions.
  setClientCallback(callable $callback): Callback function when there is a data packet for a task (deprecated).
  setCompleteCallback(callable $callback): Sets a function to be called on task completion.
  setCreatedCallback(callable $callback): Sets a callback for when a task is queued.
  setDataCallback(callable $callback): Callback function when there is a data packet for a task.

  context(): Gets the application context.
  setContext(mixed $context): Sets application context.
  data(): Gets the application data (deprecated).
  setData(mixed $data): Sets application data (deprecated).

  clone(): Creates a copy of a GearmanClient object.
  echo(string $data): Sends data to all job servers to see if they echo it back (deprecated).
  error(): Returns an error string for the last error encountered.
  getErrno(): Gets an errno value.
  jobStatus(string $job_handle): Gets the status of a background job.
  ping(string $data): Sends data to all job servers to see if they echo it back.
  removeOptions(int $options): Removes client options.
  returnCode(): Gets the last Gearman return code.
```

----------------------------------------

TITLE: UI\Window Class API Reference
DESCRIPTION: Detailed API documentation for the `UI\Window` class, including its properties, constructor, and all public and protected methods. This class represents a UI window and extends `UI\Control`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.ui-window.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class UI\Window extends UI\Control {

  // Properties
  protected $controls;
    - Description: Contains controls, should not be manipulated directly.

  // Constructor
  public __construct(string $title, UI\Size $size, bool $menu = false)
    - Description: Constructs a new UI Window.
    - Parameters:
      - $title (string): The title of the window.
      - $size (UI\Size): The initial size of the window.
      - $menu (bool, optional): Whether the window should have a menu (defaults to false).

  // Methods
  public add(UI\Control $control)
    - Description: Adds a control to the window.
    - Parameters:
      - $control (UI\Control): The control to add.

  public error(string $title, string $msg)
    - Description: Displays an error message box.
    - Parameters:
      - $title (string): The title of the error box.
      - $msg (string): The error message.

  public getSize(): UI\Size
    - Description: Retrieves the current size of the window.
    - Returns: UI\Size - The current size of the window.

  public getTitle(): string
    - Description: Retrieves the current title of the window.
    - Returns: string - The current title of the window.

  public hasBorders(): bool
    - Description: Checks if the window has borders.
    - Returns: bool - True if borders are enabled, false otherwise.

  public hasMargin(): bool
    - Description: Checks if the window has a margin.
    - Returns: bool - True if margin is enabled, false otherwise.

  public isFullScreen(): bool
    - Description: Checks if the window is in full-screen mode.
    - Returns: bool - True if full-screen, false otherwise.

  public msg(string $title, string $msg)
    - Description: Displays a general message box.
    - Parameters:
      - $title (string): The title of the message box.
      - $msg (string): The message to display.

  protected onClosing(): int
    - Description: Callback method invoked when the window is about to close.
    - Returns: int - An integer value, typically 0 to allow closing, or 1 to prevent it.

  public open(): string
    - Description: Opens a file dialog.
    - Returns: string - The path to the selected file, or an empty string if cancelled.

  public save(): string
    - Description: Opens a save file dialog.
    - Returns: string - The path where the file should be saved, or an empty string if cancelled.

  public setBorders(bool $borders)
    - Description: Sets whether the window should have borders.
    - Parameters:
      - $borders (bool): True to enable borders, false to disable.

  public setFullScreen(bool $full)
    - Description: Sets the window to full-screen mode or exits it.
    - Parameters:
      - $full (bool): True to enter full-screen, false to exit.

  public setMargin(bool $margin)
    - Description: Sets whether the window should have a margin.
    - Parameters:
      - $margin (bool): True to enable margin, false to disable.

  public setSize(UI\Size $size)
    - Description: Sets the size of the window.
    - Parameters:
      - $size (UI\Size): The new size for the window.

  public setTitle(string $title)
    - Description: Sets the title of the window.
    - Parameters:
      - $title (string): The new title for the window.

  // Inherited methods from UI\Control
  public UI\Control::destroy()
  public UI\Control::disable()
  public UI\Control::enable()
  public UI\Control::getParent(): UI\Control
  public UI\Control::getTopLevel(): int
  public UI\Control::hide()
  public UI\Control::isEnabled(): bool
  public UI\Control::isVisible(): bool
  public UI\Control::setParent(UI\Control $parent)
  public UI\Control::show()
}
```

----------------------------------------

TITLE: UI\Draw\Stroke Class API Reference
DESCRIPTION: Defines the API for the `UI\Draw\Stroke` class, which configures how a pen performs a stroke in the UI library. It includes methods for setting and getting line cap, join, thickness, and miter limit.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.ui-draw-stroke.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class UI\Draw\Stroke {
  // Constructor
  __construct(
    int $cap = UI\Draw\Line\Cap::Flat,
    int $join = UI\Draw\Line\Join::Miter,
    float $thickness = 1,
    float $miterLimit = 10
  )
    - Parameters:
      - $cap (int): Specifies the style of line cap (e.g., flat, round, square). Defaults to UI\Draw\Line\Cap::Flat.
      - $join (int): Specifies the style of line join (e.g., miter, round, bevel). Defaults to UI\Draw\Line\Join::Miter.
      - $thickness (float): The thickness of the stroke in points. Defaults to 1.
      - $miterLimit (float): The miter limit for miter joins. Defaults to 10.
    - Purpose: Constructs a new UI\Draw\Stroke object with specified line properties.

  // Methods
  getCap(): int
    - Purpose: Retrieves the current line cap style.
    - Returns: An integer representing the line cap style.

  getJoin(): int
    - Purpose: Retrieves the current line join style.
    - Returns: An integer representing the line join style.

  getMiterLimit(): float
    - Purpose: Retrieves the current miter limit.
    - Returns: A float representing the miter limit.

  getThickness(): float
    - Purpose: Retrieves the current stroke thickness.
    - Returns: A float representing the stroke thickness.

  setCap(int $cap): void
    - Parameters:
      - $cap (int): The new line cap style to set.
    - Purpose: Sets the line cap style for the stroke.

  setJoin(int $join): void
    - Parameters:
      - $join (int): The new line join style to set.
    - Purpose: Sets the line join style for the stroke.

  setMiterLimit(float $limit): void
    - Parameters:
      - $limit (float): The new miter limit to set.
    - Purpose: Sets the miter limit for the stroke.

  setThickness(float $thickness): void
    - Parameters:
      - $thickness (float): The new stroke thickness to set.
    - Purpose: Sets the thickness of the stroke.
}
```

----------------------------------------

TITLE: Imagick::getImageChannelDepth API Reference
DESCRIPTION: Provides the API specification for the Imagick::getImageChannelDepth method, used to get the depth of a specific image channel. It details the method signature, parameters, and expected return values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.getimagechanneldepth.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::getImageChannelDepth
  Description: Gets the depth for a particular image channel.
  Signature: public Imagick::getImageChannelDepth([int] $channel): [int]
  Parameters:
    $channel (int, optional): Provide any channel constant that is valid for your channel mode. To apply to more than one channel, combine channel constants using bitwise operators. Defaults to Imagick::CHANNEL_DEFAULT. Refer to this list of channel constants.
  Return Values:
    bool: Returns true on success. (Note: The signature indicates an integer return, but the return values section explicitly states 'true' on success.)
```

----------------------------------------

TITLE: PHP parallel\Runtime::run Method API Reference
DESCRIPTION: Comprehensive API documentation for the `parallel\Runtime::run` method, including its overloaded signatures, detailed parameter descriptions, characteristics and limitations for the task Closure and its arguments, notes on internal object sharing, return values, and a list of potential exceptions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/parallel-runtime.run.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
parallel\Runtime::run

Description:
Shall schedule `task` for execution in parallel. Optionally, `argv` can be passed at execution time.

Signatures:
public parallel\Runtime::run(Closure $task): ?Future
public parallel\Runtime::run(Closure $task, array $argv): ?Future

Parameters:
$task (Closure): A Closure with specific characteristics for parallel execution.
$argv (array): An array of arguments with specific characteristics to be passed to $task at execution time.

Task Characteristics (Closures scheduled for parallel execution must not):
- accept or return by reference
- accept or return internal objects (see notes below)
- execute a limited set of instructions

Instructions prohibited in Closures intended for parallel execution:
- yield
- use by-reference
- declare class
- declare named function

Note: Nested closures may yield or use by-reference, but must not contain class or named function declarations.
Note: No instructions are prohibited in the files which the task may include.

Arguments Characteristics (Arguments must not):
- contain references
- contain resources
- contain internal objects (see notes below)

Note: In the case of file stream resources, the resource will be cast to the file descriptor and passed as int where possible (unsupported on Windows).

Internal Objects Notes:
Internal objects generally use a custom structure which cannot be copied by value safely. PHP currently lacks the mechanics to do this without serialization. Only objects that do not use a custom structure may be shared.
- Some internal objects do not use a custom structure (e.g., parallel\Events\Event) and may be shared.
- Closures are a special kind of internal object and support being copied by value, thus may be shared.
- Channels are central to writing parallel code and support concurrent access and execution by necessity, thus may be shared.
Warning: A user class that extends an internal class may use a custom structure as defined by the internal class, in which case they cannot be copied by value safely and may not be shared.

Return Values:
?Future: A parallel\Future object. This return must not be ignored when the task contains a return or throw statement.

Exceptions:
- parallel\Runtime\Error\Closed: Thrown if parallel\Runtime was closed.
- parallel\Runtime\Error\IllegalFunction: Thrown if `task` is a closure created from an internal function.
- parallel\Runtime\Error\IllegalInstruction: Thrown if `task` contains illegal instructions.
- parallel\Runtime\Error\IllegalParameter: Thrown if `task` accepts or `argv` contains illegal variables.
- parallel\Runtime\Error\IllegalReturn: Thrown if `task` returns illegally.
```

----------------------------------------

TITLE: PHP curl_init Function Reference
DESCRIPTION: Detailed API documentation for the `curl_init` function in PHP, including its signature, parameters, return values, and important notes regarding its behavior and changes across PHP versions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.curl-init.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
curl_init([?string $url = null]): CurlHandle|false
  - Description: Initializes a new session and returns a cURL handle.
  - Parameters:
    - $url (string, optional, default: null): If provided, the CURLOPT_URL option will be set to its value. This can be set manually using the curl_setopt() function.
      Note: The 'file' protocol is disabled by cURL if open_basedir is set.
  - Return Values:
    - CurlHandle: On success, a cURL handle instance (PHP 8.0.0+).
    - resource: On success, a resource (prior to PHP 8.0.0).
    - false: On errors.
  - Changelog:
    - 8.0.0: On success, this function returns a CurlHandle instance now; previously, a resource was returned.
    - 8.0.0: $url is nullable now.
```

----------------------------------------

TITLE: PHP Memcache::get Usage Examples
DESCRIPTION: Examples demonstrating how to use `Memcache::get` and `memcache_get` in PHP, covering both single key and multiple key retrieval using procedural and object-oriented APIs.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/memcache.get.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, 'some_key');

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get('some_key');

/*
You also can use array of keys as a parameter.
If such item wasn't found at the server, the result
array simply will not include such key.
*/

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
$var = memcache_get($memcache_obj, Array('some_key', 'another_key'));

/* OO API */
$memcache_obj = new Memcache;
$memcache_obj->connect('memcache_host', 11211);
$var = $memcache_obj->get(Array('some_key', 'second_key'));

?>
```

----------------------------------------

TITLE: Yaf_View_Simple::render Method API Reference
DESCRIPTION: This entry provides the API documentation for the `Yaf_View_Simple::render` method. It outlines the method's signature, describes its parameters for template path and variables, and specifies the type of its return value, which is the rendered template content.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-view-simple.render.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_View_Simple::render
  Description: Render a template and return the result.
  Signature: public Yaf_View_Simple::render(string $tpl, array $tpl_vars = ?): string
  Parameters:
    $tpl (string): The path or name of the template file to be rendered.
    $tpl_vars (array, optional): An associative array of variables to be extracted and made available within the template's scope. Defaults to an empty array if not provided.
  Return Values:
    (string): The rendered content of the template as a string.
```

----------------------------------------

TITLE: PHP Set and Get Internal Character Encoding Example
DESCRIPTION: This PHP example demonstrates how to set the internal character encoding to UTF-8 using `mb_internal_encoding()` and then display the currently set encoding to verify the change.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mb-internal-encoding.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  /* Set internal character encoding to UTF-8 */
  mb_internal_encoding(""UTF-8"");

  /* Display current internal character encoding */
  echo mb_internal_encoding();
?>
```

----------------------------------------

TITLE: MongoDB\BSON\MinKey Constructor API Reference
DESCRIPTION: Comprehensive API documentation for the `MongoDB\BSON\MinKey::__construct` method. This entry details the method signature, its purpose, the absence of parameters, and the specific exception that may be thrown.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mongodb-bson-minkey.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
MongoDB\BSON\MinKey::__construct
(mongodb >=1.0.0)

final public MongoDB\BSON\MinKey::__construct()
  - Description: Constructs a new MinKey instance.
  - Parameters: This function has no parameters.
  - Errors/Exceptions:
    - Throws MongoDB\Driver\Exception\InvalidArgumentException on argument parsing errors.
```

----------------------------------------

TITLE: PHP Example: Using QuickHashStringIntHash::get
DESCRIPTION: This PHP example demonstrates how to initialize a `QuickHashStringIntHash` object, add an entry, and then retrieve values using the `get` method. It shows the behavior when a key is not found and when it is found.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/quickhashstringinthash.get.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $hash = new QuickHashStringIntHash( 8 );
  var_dump( $hash->get( ""one"" ) );

  var_dump( $hash->add( ""two"", 2 ) );
  var_dump( $hash->get( ""two"" ) );
?>
```

----------------------------------------

TITLE: UI\Point::at Static Method API Reference
DESCRIPTION: Detailed API documentation for the static method `UI\Point::at`, which creates a `UI\Point` object from either a single float value (for both x and y) or a `UI\Size` object. It outlines the method signatures, parameters, and return type.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ui-point.at.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
UI\Point::at
  (UI 1.0.2)

  Description:
    Shall return a UI\Point object where x and y are equal to those supplied, either in float or UI\Size form

  Signatures:
    public static UI\Point::at(float $point)
    public static UI\Point::at(UI\Size $size)

  Parameters:
    $point (float): The value for x and y.
    $size (UI\Size): The Size object to convert.

  Return Values:
    UI\Point: The resulting Point object.
```

----------------------------------------

TITLE: GnuPG: Get Engine Information API Reference
DESCRIPTION: Detailed API documentation for the `gnupg_getengineinfo` function, including its signature, parameters, and return values. This function retrieves configuration details about the GnuPG engine being used.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.gnupg-getengineinfo.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
gnupg_getengineinfo([resource] $identifier): [array]
  - Description: Returns an array with engine info consisting of `protocol`, `file_name`, and `home_dir`.
  - Parameters:
    - $identifier: The gnupg identifier, obtained from a call to gnupg_init() or a gnupg object.
  - Return Values:
    - An array containing:
      - protocol: (int) The GnuPG protocol version.
      - file_name: (string) The path to the GnuPG executable (e.g., '/usr/bin/gpg').
      - home_dir: (string) The GnuPG home directory (e.g., '/var/www/.gnupg').
```

----------------------------------------

TITLE: ImagickDraw::pop PHP Method Reference
DESCRIPTION: This entry provides the API documentation for the `ImagickDraw::pop` method, including its signature, detailed description, and return values. It explains how the method interacts with the ImagickDraw stack.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagickdraw.pop.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ImagickDraw::pop
  Description: Destroys the current ImagickDraw object in the stack, and returns to the previously pushed ImagickDraw. Multiple ImagickDraws may exist. It is an error to attempt to pop more ImagickDraws than have been pushed, and it is proper form to pop all ImagickDraws which have been pushed.
  Signature: public ImagickDraw::pop(): bool
  Parameters: None
  Return Value: bool - Returns true on success or false on failure.
```

----------------------------------------

TITLE: UI\Draw\Path Class API Reference
DESCRIPTION: Comprehensive API documentation for the UI\Draw\Path class, detailing its constants, constructor, and methods for defining drawing paths. This class is fundamental for guiding a UI\Draw\Pen to render shapes and figures on a UI\Area.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.ui-draw-path.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class UI\Draw\Path {
  
  /* Constants */
  const int Winding;
  const int Alternate;
  
  // Constant Descriptions:
  // UI\Draw\Path::Winding: This is the default draw path mode, defining how overlapping regions are filled.
  // UI\Draw\Path::Alternate: This is the alternate draw path mode, defining how overlapping regions are filled.
  
  /* Constructor */
  public __construct(int $mode = UI\Draw\Path::Winding)
    - Description: Constructs a new Draw Path object.
    - Parameters:
      - $mode (int): The fill mode for the path, either UI\Draw\Path::Winding (default) or UI\Draw\Path::Alternate.
    - Returns: A new UI\Draw\Path instance.
  
  /* Methods */
  public addRectangle(UI\Point $point, UI\Size $size)
    - Description: Adds a rectangle to the current path.
    - Parameters:
      - $point (UI\Point): The top-left corner point of the rectangle.
      - $size (UI\Size): The width and height of the rectangle.
    - Returns: void
  
  public arcTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)
    - Description: Draws an arc from the current point to the specified point.
    - Parameters:
      - $point (UI\Point): The end point of the arc.
      - $radius (float): The radius of the arc.
      - $angle (float): The angle of the arc.
      - $sweep (float): The sweep angle of the arc.
      - $negative (float): A value indicating the direction of the arc.
    - Returns: void
  
  public bezierTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)
    - Description: Draws a Bezier curve from the current point.
    - Parameters:
      - $point (UI\Point): The end point of the Bezier curve.
      - $radius (float): Control point parameter (usage depends on curve type).
      - $angle (float): Control point parameter.
      - $sweep (float): Control point parameter.
      - $negative (float): Control point parameter.
    - Returns: void
  
  public closeFigure()
    - Description: Closes the current figure by drawing a straight line from the current point to the starting point of the figure.
    - Parameters: None
    - Returns: void
  
  public end()
    - Description: Finalizes the current path, typically used after all drawing operations for a path are complete.
    - Parameters: None
    - Returns: void
  
  public lineTo(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)
    - Description: Draws a line from the current point to the specified point.
    - Parameters:
      - $point (UI\Point): The end point of the line.
      - $radius (float): Additional parameter (potentially unused or for complex line types).
      - $angle (float): Additional parameter.
      - $sweep (float): Additional parameter.
      - $negative (float): Additional parameter.
    - Returns: void
  
  public newFigure(UI\Point $point)
    - Description: Starts a new figure at the specified point, moving the current drawing position without drawing.
    - Parameters:
      - $point (UI\Point): The starting point for the new figure.
    - Returns: void
  
  public newFigureWithArc(UI\Point $point, float $radius, float $angle, float $sweep, float $negative)
    - Description: Starts a new figure with an initial arc segment.
    - Parameters:
      - $point (UI\Point): The end point of the initial arc.
      - $radius (float): The radius of the initial arc.
      - $angle (float): The angle of the initial arc.
      - $sweep (float): The sweep angle of the initial arc.
      - $negative (float): A value indicating the direction of the initial arc.
    - Returns: void
}
```

----------------------------------------

TITLE: EventHttpRequest Class Constructor and Related Methods
DESCRIPTION: Defines the `EventHttpRequest` class constructor, its parameters, and related methods for managing HTTP requests. This includes details on how to initialize an HTTP request object, specify a callback for handling responses, and add headers or cancel pending requests.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttprequest.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EventHttpRequest::__construct(callable $callback, mixed $data = null)
  - Constructs an EventHttpRequest object.
  - Parameters:
    - $callback (callable): A callback function invoked when the request path is requested. It should match the prototype: `callback(EventHttpRequest $req = null, mixed $arg = null): void`.
    - $data (mixed, optional): User-defined custom data passed to the callback function. Defaults to `null`.

EventHttpRequest::cancel()
  - Cancels a pending HTTP request.

EventHttpRequest::addHeader(string $header, string $value, int $kind)
  - Adds an HTTP header to the request's headers.
  - Parameters:
    - $header (string): The name of the HTTP header (e.g., ""Host"").
    - $value (string): The value of the HTTP header (e.g., ""127.0.0.1"").
    - $kind (int): Specifies the type of header, such as `EventHttpRequest::OUTPUT_HEADER` for outgoing headers.
```

----------------------------------------

TITLE: PHP Example: Connecting to PostgreSQL and Getting Host
DESCRIPTION: This example demonstrates how to establish a PostgreSQL connection using `pg_connect` and then retrieve the hostname of the connected database using the `pg_host` function. It includes basic error handling for connection failures.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.pg-host.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $pgsql_conn = pg_connect(""dbname=mark host=localhost"");

  if ($pgsql_conn) {
    print ""Successfully connected to: "" . pg_host($pgsql_conn) . ""<br/>\n"";
  } else {
    print pg_last_error($pgsql_conn);
    exit;
  }
?>
```

----------------------------------------

TITLE: Phar::canCompress Method and Related Compression APIs
DESCRIPTION: Comprehensive documentation for the `Phar::canCompress` static method, including its signature, parameters, return values, and a list of related Phar and PharFileInfo methods for managing compression within Phar archives.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.cancompress.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::canCompress
(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL phar >= 1.0.0)

Phar::canCompress — Returns whether phar extension supports compression using either zlib or bzip2

Description:
final public static Phar::canCompress([int $compression = 0]): bool
  This should be used to test whether compression is possible prior to loading a phar archive containing compressed files.

Parameters:
  $compression: Either Phar::GZ or Phar::BZ2 can be used to test whether compression is possible with a specific compression algorithm (zlib or bzip2).

Return Values:
  true if compression/decompression is available, false if not.

See Also:
- PharFileInfo::getCompressedSize() - Returns the actual size of the file (with compression) inside the Phar archive
- PharFileInfo::isCompressed() - Returns whether the entry is compressed
- PharFileInfo::compress() - Compresses the current Phar entry with either zlib or bzip2 compression
- PharFileInfo::decompress() - Decompresses the current Phar entry within the phar
- Phar::isCompressed() - Returns Phar::GZ or PHAR::BZ2 if the entire phar archive is compressed (.tar.gz/tar.bz and so on)
- Phar::compressFiles() - Compresses all files in the current Phar archive
- Phar::decompressFiles() - Decompresses all files in the current Phar archive
- Phar::getSupportedCompression() - Return array of supported compression algorithms
- Phar::convertToExecutable() - Convert a phar archive to another executable phar archive file format
- Phar::convertToData() - Convert a phar archive to a non-executable tar or zip file
```

----------------------------------------

TITLE: PHP Throwable::getLine Method API Documentation
DESCRIPTION: Comprehensive API documentation for the Throwable::getLine method in PHP, including its signature, a detailed description of its functionality, parameter information, return values, and cross-references to related methods.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/throwable.getline.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Throwable::getLine

public Throwable::getLine(): int

Description:
Returns the line number where the thrown object was instantiated.

Parameters:
This function has no parameters.

Return Values:
Returns the line number where the thrown object was instantiated.

See Also:
Exception::getLine() - Gets the line in which the exception was created
```

----------------------------------------

TITLE: Example: Get MySQLi Extension Version in PHP
DESCRIPTION: This PHP example demonstrates how to instantiate a `ReflectionExtension` object for the 'mysqli' extension and then call its `getVersion()` method to output the extension's version string.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionextension.getversion.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $ext = new ReflectionExtension('mysqli');
  var_dump($ext->getVersion());
?>
```

----------------------------------------

TITLE: OAuth::fetch Method Reference
DESCRIPTION: Detailed API documentation for the `OAuth::fetch` method, including its signature, parameters, return values, and related functions. This method is central to fetching resources protected by OAuth.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/oauth.fetch.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
OAuth::fetch
(PECL OAuth >= 0.99.1)

public OAuth::fetch(
    string $protected_resource_url,
    array $extra_parameters = ?,
    string $http_method = ?,
    array $http_headers = ?
): mixed

Description: Fetch a resource.

Parameters:
- protected_resource_url: URL to the OAuth protected resource.
- extra_parameters: Extra parameters to send with the request for the resource.
- http_method: One of the OAUTH_HTTP_METHOD_* OAUTH constants, which includes GET, POST, PUT, HEAD, or DELETE. HEAD can be useful for discovering information prior to the request (if OAuth credentials are in the Authorization header).
- http_headers: HTTP client headers (such as User-Agent, Accept, etc.)

Return Values:
- Returns true on success or false on failure.

Changelog:
- PECL oauth 1.0.0: Previously returned null on failure, instead of false.
- PECL oauth 0.99.5: The http_method parameter was added.
- PECL oauth 0.99.8: The http_headers parameter was added.

See Also:
- OAuth::getLastResponse(): Get the last response
- OAuth::getLastResponseInfo(): Get HTTP information about the last response
- OAuth::setToken(): Sets the token and secret
```

----------------------------------------

TITLE: PHP Get Session from DatabaseObject Example
DESCRIPTION: Illustrates how to call the `getSession` method on a `mysql_xdevapi\DatabaseObject` instance to retrieve the associated session object in PHP. This is a basic usage example demonstrating the method's invocation.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-databaseobject.getsession.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      $session = $dbObj->getSession();
?>
```

----------------------------------------

TITLE: PHP Reflection Output: `finfo` Class Details
DESCRIPTION: This API documentation block presents the structured output from PHP's Reflection API for the `finfo` class. It outlines the class's internal origin, its constructor (`__construct`) with optional parameters, and its public methods (`set_flags`, `file`, `buffer`) along with their respective parameters. This output is typical for inspecting class structures and their available functionalities.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflection.examples.html#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Class [ <internal:fileinfo> class finfo ] {

  - Constants [0] {
  }

  - Static properties [0] {
  }

  - Static methods [0] {
  }

  - Properties [0] {
  }

  - Methods [4] {
    Method [ <internal:fileinfo, ctor> public method finfo ] {

      - Parameters [2] {
        Parameter #0 [ <optional> $options ]
        Parameter #1 [ <optional> $arg ]
      }
    }

    Method [ <internal:fileinfo> public method set_flags ] {

      - Parameters [1] {
        Parameter #0 [ <required> $options ]
      }
    }

    Method [ <internal:fileinfo> public method file ] {

      - Parameters [3] {
        Parameter #0 [ <required> $filename ]
        Parameter #1 [ <optional> $options ]
        Parameter #2 [ <optional> $context ]
      }
    }

    Method [ <internal:fileinfo> public method buffer ] {

      - Parameters [3] {
        Parameter #0 [ <required> $string ]
        Parameter #1 [ <optional> $options ]
        Parameter #2 [ <optional> $context ]
      }
    }
  }
}
```

----------------------------------------

TITLE: PHP str_starts_with Case-Sensitivity Example
DESCRIPTION: This example illustrates the case-sensitive nature of the `str_starts_with` function. It checks if a string starts with 'The' (matching case) and 'the' (non-matching case), highlighting the importance of exact case for a true match.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.str-starts-with.html#_snippet_2

LANGUAGE: php
CODE:
```
<?php
  $string = 'The lazy fox jumped over the fence';

  if (str_starts_with($string, 'The')) {
  echo ""The string starts with 'The'\n"";
  }

  if (str_starts_with($string, 'the')) {
  echo 'The string starts with ""the""';
  } else {
  echo '""the"" was not found because the case does not match';
  }
?>
```

----------------------------------------

TITLE: Yaf_Dispatcher::getRequest API Reference
DESCRIPTION: Comprehensive documentation for the Yaf_Dispatcher::getRequest method, including its signature, a description of its function, and details on its parameters and return values. This method is used to obtain the current request instance.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-dispatcher.getrequest.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Dispatcher::getRequest

Description:
  Retrive the request instance

Signature:
  public Yaf_Dispatcher::getRequest(): Yaf_Request_Abstract

Parameters:
  This function has no parameters.

Return Values:
  Yaf_Request_Abstract: An instance of the Yaf_Request_Abstract class, representing the current request.
```

----------------------------------------

TITLE: Swoole\Process::start Method
DESCRIPTION: Documents the `start` method of the `Swoole\Process` class, used to initiate a new process. This method takes no parameters and returns void upon successful execution.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-process.start.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Process::start
  Description: Start the process.
  Signature: public Swoole\Process::start(): void
  Parameters:
    - None: This function has no parameters.
  Return Values:
    - void: The method returns nothing upon successful execution.
```

----------------------------------------

TITLE: PHP Example: Using Ds\Vector::first to Get First Element
DESCRIPTION: Demonstrates how to instantiate a `Ds\Vector` with elements and then retrieve its first element using the `first()` method. The example also shows the `var_dump` output for clarity.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-vector.first.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $vector = new \Ds\Vector([1, 2, 3]);
  var_dump($vector->first());
?>
```

----------------------------------------

TITLE: PHP Example: Using mysql_xdevapi\DocResult::fetchOne
DESCRIPTION: This PHP example demonstrates how to establish a session with MySQL X DevAPI, create a schema and collection, add documents, and then use `DocResult::fetchOne` to retrieve a single document after executing a find query. The example shows the setup, data insertion, query execution, and the final call to `fetchOne`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-docresult.fetchone.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $session = mysql_xdevapi\getSession(""mysqlx://user:password@localhost"");
  $session->sql(""DROP DATABASE IF EXISTS addressbook"")->execute();
  $session->sql(""CREATE DATABASE addressbook"")->execute();

  $schema = $session->getSchema(""addressbook"");
  $create = $schema->createCollection(""people"");

  $create->add('{""name"": ""Alfred"", ""age"": 18, ""job"": ""Butler""}')->execute();
  $create->add('{""name"": ""Reginald"", ""age"": 42, ""job"": ""Butler""}')->execute();

  // ...

  $collection = $schema->getCollection(""people"");

  // Yields a DocResult object
  $result = $collection
  ->find('job like :job and age > :age')
  ->bind(['job' => 'Butler', 'age' => 16])
  ->sort('age desc')
  ->execute();

  var_dump($result->fetchOne());
?>
```

----------------------------------------

TITLE: PHP XMLWriter DTD Element Management API
DESCRIPTION: API documentation for PHP's XMLWriter functions related to DTD element handling, including ending, starting, and writing full DTD elements.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/xmlwriter.enddtdelement.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
XMLWriter::endDtdElement
  Description: Ends the current DTD element.
  Object-oriented style:
    public XMLWriter::endDtdElement(): bool
  Procedural style:
    xmlwriter_end_dtd_element(XMLWriter $writer): bool
  Parameters:
    $writer (XMLWriter): (Procedural only) The XMLWriter instance that is being modified. This object is returned from a call to xmlwriter_open_uri() or xmlwriter_open_memory().
  Return Values:
    bool: Returns true on success or false on failure.
  Changelog:
    8.0.0: $writer parameter type changed from resource to XMLWriter instance.
  See Also:
    XMLWriter::startDtdElement(): Create start DTD element
    XMLWriter::writeDtdElement(): Write full DTD element tag
```

----------------------------------------

TITLE: PHP localtime() Usage Example
DESCRIPTION: Demonstrates how to use the `localtime()` function in PHP to get the current local time. It shows examples of both numerically indexed and associative array returns, using `print_r` to display the output.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.localtime.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $localtime = localtime();
  $localtime_assoc = localtime(time(), true);
  print_r($localtime);
  print_r($localtime_assoc);
?>
```

----------------------------------------

TITLE: Phar::buildFromDirectory Method Reference
DESCRIPTION: Comprehensive API documentation for the `Phar::buildFromDirectory` method, detailing its signature, parameters, return values, and error conditions. It also includes important notes regarding `phar.readonly` configuration and a changelog.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.buildfromdirectory.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::buildFromDirectory
(PHP 5 >= 5.3.0, PHP 7, PHP 8, PECL phar >= 2.0.0)

public Phar::buildFromDirectory(string $directory, string $pattern = """"): array

Description: Populate a phar archive from directory contents. The optional second parameter is a regular expression (pcre) that is used to exclude files. Any filename that matches the regular expression will be included, all others will be excluded. For more fine-grained control, use Phar::buildFromIterator().

Note: This method requires the php.ini setting `phar.readonly` to be set to `0` in order to work for Phar objects. Otherwise, a PharException will be thrown.

Parameters:
  $directory (string): The full or relative path to the directory that contains all files to add to the archive.
  $pattern (string, optional): An optional pcre regular expression that is used to filter the list of files. Only file paths matching the regular expression will be included in the archive.

Return Values:
  array: An associative array mapping internal path of file to the full path of the file on the filesystem.

Errors/Exceptions:
  BadMethodCallException: Thrown when unable to instantiate the internal directory iterators.
  PharException: Thrown if there were errors saving the phar archive, or if `phar.readonly` is not `0`.

Changelog:
  8.1.0: Phar::buildFromDirectory() no longer returns `false`.

See Also:
  Phar::buildFromIterator() - Construct a phar archive from an iterator
```

----------------------------------------

TITLE: PHP Get Shared Memory Block Size Example
DESCRIPTION: A PHP code example demonstrating how to use the `shmop_size` function to retrieve the size of a shared memory block identified by `$shm_id` and assign it to the `$shm_size` variable.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.shmop-size.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $shm_size = shmop_size($shm_id);
?>
```

----------------------------------------

TITLE: Swoole\Http\Client Class API
DESCRIPTION: API documentation for the `Swoole\Http\Client` class, providing an asynchronous HTTP client for making requests.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.swoole.html#_snippet_12

LANGUAGE: APIDOC
CODE:
```
Swoole\Http\Client Class:

addFile(string $path, string $name, string $mime_type = null, string $filename = null, int $offset = 0, int $length = 0): bool
  - Add a file to be uploaded with the POST form data.

close(): bool
  - Close the HTTP connection.

__construct(string $host, int $port = 80, bool $ssl = false): void
  - Construct the asynchronous HTTP client instance.

__destruct(): void
  - Destruct the HTTP client instance, cleaning up resources.

download(string $path, string $filename, callable $callback): bool
  - Download a file from the remote server to a local path.

execute(string $path, callable $callback): bool
  - Send the HTTP request after setting all parameters (method, headers, data, etc.).

get(string $path, callable $callback): bool
  - Send a GET HTTP request to the remote server.

isConnected(): bool
  - Check if the HTTP connection is currently connected.

on(string $event, callable $callback): bool
  - Register a callback function for a specific event (e.g., 'connect', 'close', 'message').

post(string $path, array|string $data, callable $callback): bool
  - Send a POST HTTP request to the remote server with specified data.

push(string $data, int $opcode = WEBSOCKET_OPCODE_TEXT, bool $finish = true): bool
  - Push data to a WebSocket client (if the connection was upgraded to WebSocket).

set(array $settings): bool
  - Update the HTTP client parameters and settings (e.g., timeout, keep_alive).

setCookies(array $cookies): bool
  - Set the HTTP request cookies.

setData(array|string $data): bool
  - Set the HTTP request body data for POST or PUT requests.

setHeaders(array $headers): bool
  - Set the HTTP request headers.

setMethod(string $method): bool
  - Set the HTTP request method (e.g., 'GET', 'POST', 'PUT').

upgrade(string $path, callable $callback): bool
  - Upgrade the HTTP connection to the WebSocket protocol.
```

----------------------------------------

TITLE: Yaf_Application::app Static Method Reference
DESCRIPTION: Comprehensive documentation for the `Yaf_Application::app` static method, which serves to retrieve the singleton instance of the Yaf application. This entry details its signature, lack of parameters, expected return values, and cross-references to related methods like `Yaf_Dispatcher::getApplication()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-application.app.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Application::app
  - Description: Retrieve the Yaf_Application instance. Alternatively, we also could use Yaf_Dispatcher::getApplication().
  - Signature: public static Yaf_Application::app(): mixed
  - Parameters: None.
  - Return Values: A Yaf_Application instance. If no Yaf_Application was initialized before, null will be returned.
  - See Also: Yaf_Dispatcher::getApplication() - Retrieve the application
```

----------------------------------------

TITLE: PHP Example: Getting Ds\Vector Capacity
DESCRIPTION: This PHP example demonstrates how to use the `Ds\Vector::capacity()` method. It shows the capacity changing as elements are added to the vector, illustrating the dynamic resizing behavior of the Ds\Vector.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-vector.capacity.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $vector = new \Ds\Vector();
  var_dump($vector->capacity());

  $vector->push(...range(1, 50));
  var_dump($vector->capacity());

  $vector[] = ""a"";
  var_dump($vector->capacity());
?>
```

----------------------------------------

TITLE: PHP: Get Locale Display Script (Procedural Example)
DESCRIPTION: Demonstrates how to use the `locale_get_display_script` function in PHP to retrieve the localized display name for a script, showing output in English, French, and German.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/locale.getdisplayscript.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  echo locale_get_display_script('sl-Latn-IT-nedis', 'en');
  echo "";\n"";
  echo locale_get_display_script('sl-Latn-IT-nedis', 'fr');
  echo "";\n"";
  echo locale_get_display_script('sl-Latn-IT-nedis', 'de');
?>
```

----------------------------------------

TITLE: Yaf_Config_Simple Constructor API Reference
DESCRIPTION: Provides the API documentation for the `Yaf_Config_Simple` class constructor. It details the method signature, expected parameters (`$configs` array and `$readonly` boolean), and notes the lack of comprehensive documentation for this specific function.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-config-simple.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Config_Simple::__construct
  Description: The __construct purpose
  Availability: Yaf >=1.0.0
  Signature: public Yaf_Config_Simple::__construct(array $configs, bool $readonly = false)
  Parameters:
    $configs (array): An array of configuration settings to initialize the object with.
    $readonly (bool): A boolean flag indicating whether the configuration object should be read-only. Defaults to `false`.
  Return Values: None specified in the documentation.
  Warning: This function is currently not documented; only its argument list is available.
```

----------------------------------------

TITLE: PHP key() Function API Reference
DESCRIPTION: Comprehensive documentation for the PHP `key()` function, detailing its signature, parameters, return values, and behavioral changes across PHP versions, including deprecation notices for object usage.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.key.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
key(array|object $array): int|string|null
  - Description: Returns the index element of the current array position.
  - Parameters:
    - $array: The array or object to inspect.
  - Return Values:
    - Returns the key of the array element that's currently being pointed to by the internal pointer.
    - Returns null if the internal pointer points beyond the end of the elements list or the array is empty.
  - Behavior: Does not move the internal array pointer.
  - Changelog:
    - 8.1.0: Calling this function on objects is deprecated. Either convert the object to an array using get_mangled_object_vars() or use methods provided by a class that implements Iterator (e.g., ArrayIterator).
    - 7.4.0: Instances of SPL classes are now treated like empty objects that have no properties instead of calling the Iterator method with the same name as this function.
  - See Also:
    - current() - Return the current element in an array
    - next() - Advance the internal pointer of an array
    - array_key_first() - Gets the first key of an array
    - foreach - Control structure for iterating over arrays
```

----------------------------------------

TITLE: PHP Example: Setting and Getting Imagick Image Properties
DESCRIPTION: This PHP example demonstrates how to create a new Imagick image, set a custom Exif property using `setImageProperty()`, and then retrieve that property using `getImageProperty()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.getimageproperty.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $image = new Imagick();
  $image->newImage(300, 200, ""black"");

  $image->setImageProperty('Exif:Make', 'Imagick');
  echo $image->getImageProperty('Exif:Make');
?>
```

----------------------------------------

TITLE: SeasLog::info Method API Reference
DESCRIPTION: Comprehensive API documentation for the `SeasLog::info` method and other related logging functions within the SeasLog PHP extension. It details the method signature, parameters, return values, and provides context for its use in recording informational events.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/seaslog.info.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SeasLog::info(string $message, array $content = ?, string $logger = ?): bool
  - Description: Records informational log messages. ""INFO"" emphasizes the running process of the application.
  - Parameters:
    - $message (string): The log message. Can contain placeholders (e.g., '{NAME}').
    - $content (array): An associative array where keys match placeholders in `$message` and values replace them. Optional.
    - $logger (string): A temporary logger name to use for this specific log entry. If NULL or empty, SeasLog uses the logger set by `SeasLog::setLogger()`. Optional.
  - Return Values: Returns TRUE on successful log record, FALSE on failure.

Related SeasLog Logging Methods:
  - SeasLog::debug(): Records debug log information.
  - SeasLog::notice(): Records notice log information.
  - SeasLog::warning(): Records warning log information.
  - SeasLog::error(): Records error log information.
  - SeasLog::critical(): Records critical log information.
  - SeasLog::alert(): Records alert log information.
  - SeasLog::emergency(): Records emergency log information.
  - SeasLog::log(): A common function for recording log information.
```

----------------------------------------

TITLE: Get Process Session ID in PHP
DESCRIPTION: This PHP example demonstrates how to use the `posix_getsid()` function to retrieve the session ID of the current process. It first gets the process ID using `posix_getpid()` and then passes it to `posix_getsid()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.posix-getsid.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $pid = posix_getpid();
  echo posix_getsid($pid); //8805
?>
```

----------------------------------------

TITLE: PHP enchant_broker_request_dict API Reference
DESCRIPTION: Comprehensive API documentation for the `enchant_broker_request_dict` function, including its signature, parameters, return values, and related functions within the Enchant extension.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.enchant-broker-request-dict.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
enchant_broker_request_dict([EnchantBroker] $broker, [string] $tag): [EnchantDictionary]|[false]
  - Description: Creates a new dictionary using a language tag. The tag should be a non-empty string representing the desired locale (e.g., ""en_US"", ""de_DE"").
  - Parameters:
    - $broker: (EnchantBroker) An Enchant broker instance returned by enchant_broker_init().
    - $tag: (string) A string representing the locale for the dictionary, such as ""en_US"" or ""de_DE"".
  - Return Values:
    - (EnchantDictionary) Returns a dictionary resource on success.
    - (false) Returns false on failure.
  - Changelog:
    - 8.0.0: `$broker` now expects an `EnchantBroker` instance (previously a resource).
    - 8.0.0: On success, returns an `EnchantDictionary` instance (previously a resource).
  - See Also:
    - enchant_dict_describe(): Describes an individual dictionary.
    - enchant_broker_dict_exists(): Checks whether a dictionary exists for a given tag.
    - enchant_broker_free_dict(): Frees a dictionary resource.
```

----------------------------------------

TITLE: UI\Controls\Slider Class API Reference
DESCRIPTION: API documentation for the UI\Controls\Slider class, a slider control for selecting a range of values. It provides methods for constructing the slider, getting its current value, and handling value change events.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.ui.html#_snippet_17

LANGUAGE: APIDOC
CODE:
```
UI\Controls\Slider:
  __construct()
    - Description: Constructs a new Slider control.
  getValue()
    - Description: Retrieves the current value of the slider.
  onChange()
    - Description: Defines the callback for when the slider's value changes.
```

----------------------------------------

TITLE: EventHttp Class API Reference
DESCRIPTION: Comprehensive API documentation for the `EventHttp` class, which represents an HTTP server in PHP. It provides methods for accepting connections, binding to addresses, setting callbacks, and configuring server limits.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.eventhttp.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
final class EventHttp {

  // Constructor
  public __construct(EventBase $base, EventSslContext $ctx = null)
    - Description: Constructs EventHttp object (the HTTP server).
    - Parameters:
      - $base: An EventBase instance.
      - $ctx: An optional EventSslContext instance for SSL/TLS (defaults to null).

  // Methods
  public accept(mixed $socket): bool
    - Description: Makes an HTTP server accept connections on the specified socket stream or resource.
    - Parameters:
      - $socket: The socket stream or resource to accept connections on.
    - Returns: true on success, false on failure.

  public addServerAlias(string $alias): bool
    - Description: Adds a server alias to the HTTP server object.
    - Parameters:
      - $alias: The alias string to add.
    - Returns: true on success, false on failure.

  public bind(string $address, int $port): void
    - Description: Binds an HTTP server on the specified address and port.
    - Parameters:
      - $address: The IP address to bind to.
      - $port: The port number to bind to.
    - Returns: void.

  public removeServerAlias(string $alias): bool
    - Description: Removes server alias.
    - Parameters:
      - $alias: The alias string to remove.
    - Returns: true on success, false on failure.

  public setAllowedMethods(int $methods): void
    - Description: Sets the what HTTP methods are supported in requests accepted by this server, and passed to user callbacks.
    - Parameters:
      - $methods: An integer bitmask representing allowed HTTP methods (e.g., EventHttp::EVHTTP_REQ_GET | EventHttp::EVHTTP_REQ_POST).
    - Returns: void.

  public setCallback(string $path, string $cb, string $arg = ?): void
    - Description: Sets a callback for specified URI.
    - Parameters:
      - $path: The URI path to associate the callback with.
      - $cb: The callback function name or callable.
      - $arg: Optional argument to pass to the callback.
    - Returns: void.

  public setDefaultCallback(string $cb, string $arg = ?): void
    - Description: Sets default callback to handle requests that are not caught by specific callbacks.
    - Parameters:
      - $cb: The default callback function name or callable.
      - $arg: Optional argument to pass to the callback.
    - Returns: void.

  public setMaxBodySize(int $value): void
    - Description: Sets maximum request body size.
    - Parameters:
      - $value: The maximum body size in bytes.
    - Returns: void.

  public setMaxHeadersSize(int $value): void
    - Description: Sets maximum HTTP header size.
    - Parameters:
      - $value: The maximum header size in bytes.
    - Returns: void.

  public setTimeout(int $value): void
    - Description: Sets the timeout for an HTTP request.
    - Parameters:
      - $value: The timeout value in seconds.
    - Returns: void.
}
```

----------------------------------------

TITLE: PHP: Basic RecursiveFilterIterator Example
DESCRIPTION: This example demonstrates how to create a custom `RecursiveFilterIterator` subclass (`TestsOnlyFilter`) that accepts elements if they have children or if their value starts with 'test'. It then applies this filter to a `RecursiveArrayIterator` and iterates through the filtered results using `RecursiveIteratorIterator`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/recursivefilteriterator.construct.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
class TestsOnlyFilter extends RecursiveFilterIterator {
  public function accept() {
    // Accept the current item if we can recurse into it
    // or it is a value starting with ""test""
    return $this->hasChildren() || (strpos($this->current(), ""test"") !== FALSE);
  }
}

$array = array(""test1"", array(""taste2"", ""test3"", ""test4""), ""test5"");
$iterator = new RecursiveArrayIterator($array);
$filter = new TestsOnlyFilter($iterator);

foreach(new RecursiveIteratorIterator($filter) as $key => $value)
{
  echo $value . ""\n"";
}
?>
```

----------------------------------------

TITLE: ZooKeeper Client Methods
DESCRIPTION: Documents key methods available in the ZooKeeper PHP client for interacting with the ZooKeeper service.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.zookeeper.html#_snippet_11

LANGUAGE: APIDOC
CODE:
```
Zookeeper::addAuth
  - Description: Specifies application credentials for authentication with the ZooKeeper server.
```

----------------------------------------

TITLE: PHP: Example Usage of Memcache::setServerParams
DESCRIPTION: This PHP example demonstrates how to use both the object-oriented (Memcache::setServerParams) and procedural (memcache_set_server_params) APIs to dynamically change Memcached server parameters. It includes a custom failure callback function.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/memcache.setserverparams.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
function _callback_memcache_failure($host, $port) {
  print ""memcache '$host:$port' failed"";
}

/* OO API */
$memcache = new Memcache;

// Add the server in offline mode
$memcache->addServer('memcache_host', 11211, false, 1, 1, -1, false);

// Bring the server back online
$memcache->setServerParams('memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_set_server_params($memcache_obj, 'memcache_host', 11211, 1, 15, true, '_callback_memcache_failure');

?>
```

----------------------------------------

TITLE: PDO::quote Method API Reference
DESCRIPTION: Detailed API documentation for the PDO::quote method, outlining its purpose, parameters, return types, and critical security considerations. It highlights the preferred use of PDO::prepare for robust SQL statement construction.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/pdo.quote.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PDO::quote
public PDO::quote([string] $string, [int] $type = PDO::PARAM_STR): [string]|[false]
  - Description: Quotes a string for use in a query. It places quotes around the input string (if required) and escapes special characters within it, using a quoting style appropriate to the underlying driver.
  - Parameters:
    - $string: The string to be quoted.
    - $type: An optional hint to the type of data for drivers that have alternate quoting styles (e.g., PDO_PARAM_LOB for binary data).
  - Return Values: Returns a quoted string that is theoretically safe to pass into an SQL statement. Returns false if the driver does not support quoting in this way.
  - Important Notes:
    - It is strongly recommended to use PDO::prepare() with bound parameters instead of PDO::quote() for building SQL statements. Prepared statements are more portable, convenient, immune to SQL injection, and often faster.
    - Not all PDO drivers implement this method (e.g., PDO_ODBC).
    - Security: The character set must be set either on the server level or within the database connection itself for PDO::quote() to be effective.
  - See Also:
    - PDO::prepare() - Prepares a statement for execution and returns a statement object
    - PDOStatement::execute() - Executes a prepared statement
```

----------------------------------------

TITLE: PHP: Get Preferred Cryptographic Hash Method Prefix Example
DESCRIPTION: This PHP example demonstrates how to call the `crypt_preferred_method()` function and use `var_dump()` to display its return value, which is the prefix of the preferred cryptographic hash method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.crypt-preferred-method.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
  var_dump(crypt_preferred_method());
?>
```

----------------------------------------

TITLE: PHP MySQLi: Get Number of Rows in Result Set API Reference
DESCRIPTION: Comprehensive API documentation for retrieving the number of rows from a MySQLi result set. This entry covers both the object-oriented `mysqli_result::$num_rows` property and the procedural `mysqli_num_rows()` function, detailing their signatures, parameters, return values, and specific behaviors related to buffered/unbuffered result sets and large row counts.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysqli-result.num-rows.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
mysqli_result::$num_rows
  - Object-oriented style: int|string $mysqli_result->num_rows;
  - Returns: The number of rows in the result set.
  - Behavior: Returns 0 for unbuffered result sets unless all rows have been fetched from the server.
  - Note: If the number of rows is greater than PHP_INT_MAX, the number will be returned as a string.

mysqli_num_rows(mysqli_result $result): int|string
  - Procedural style function.
  - Parameters:
    - $result: A mysqli_result object returned by mysqli_query(), mysqli_store_result(), mysqli_use_result() or mysqli_stmt_get_result().
  - Returns: An int representing the number of fetched rows. Returns 0 in unbuffered mode unless all rows have been fetched from the server.
  - Note: If the number of rows is greater than PHP_INT_MAX, the number will be returned as a string.
  - Contrast: Unlike mysqli_stmt_num_rows(), this function does not have an object-oriented method variant; use the getter property for object-oriented style.

See Also:
  - mysqli_affected_rows(): Gets the number of affected rows in a previous MySQL operation
  - mysqli_store_result(): Transfers a result set from the last query
  - mysqli_use_result(): Initiate a result set retrieval
  - mysqli_query(): Performs a query on the database
  - mysqli_stmt_num_rows(): Returns the number of rows fetched from the server
```

----------------------------------------

TITLE: PHP Dom\NodeList Class API Reference
DESCRIPTION: Comprehensive API documentation for the `Dom\NodeList` class in PHP, including its interface implementations, properties, and a note on its purpose as a live list of nodes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.dom-nodelist.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Class: Dom\NodeList
  Description: Represents a live list of nodes. This is the modern, spec-compliant equivalent of DOMNodeList.
  Implements: IteratorAggregate, Countable

  Properties:
    $length:
      Type: int
      Access: public readonly
      Description: The number of nodes in the list. The range of valid child node indices is 0 to length - 1 inclusive.

  Methods:
    (Not documented yet)
```

----------------------------------------

TITLE: PDO::prepare Method API Reference
DESCRIPTION: Comprehensive API documentation for the PDO::prepare method, including its signature, parameters, return values, and detailed notes on its behavior, security implications, and performance benefits. This method is used to prepare an SQL statement for execution, allowing for safe parameter binding and optimized query execution.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/pdo.prepare.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PDO::prepare

public PDO::prepare(string $query, array $options = []): PDOStatement|false

Description:
Prepares an SQL statement to be executed by the PDOStatement::execute() method. The statement template can contain zero or more named (:name) or question mark (?) parameter markers for which real values will be substituted when the statement is executed. Both named and question mark parameter markers cannot be used within the same statement template; only one or the other parameter style. Use these parameters to bind any user-input, do not include the user-input directly in the query.

Calling PDO::prepare() and PDOStatement::execute() for statements that will be issued multiple times with different parameter values optimizes the performance of your application by allowing the driver to negotiate client and/or server side caching of the query plan and meta information. Also, calling PDO::prepare() and PDOStatement::execute() helps to prevent SQL injection attacks by eliminating the need to manually quote and escape the parameters.

Parameters:
  $query (string): This must be a valid SQL statement template for the target database server.
  $options (array, default: []): This array holds one or more key=>value pairs to set attribute values for the PDOStatement object that this method returns. Commonly used to set PDO::ATTR_CURSOR to PDO::CURSOR_SCROLL for scrollable cursors. Some drivers have driver-specific options.

Return Values:
If the database server successfully prepares the statement, PDO::prepare() returns a PDOStatement object. If the database server cannot successfully prepare the statement, PDO::prepare() returns false or emits PDOException (depending on error handling).

Notes:
- You must include a unique parameter marker for each value you wish to pass in to the statement when you call PDOStatement::execute(). You cannot use a named parameter marker of the same name more than once in a prepared statement, unless emulation mode is on.
- Parameter markers can represent a complete data literal only. Neither part of literal, nor keyword, nor identifier, nor whatever arbitrary query part can be bound using parameters. For example, you cannot bind multiple values to a single parameter in the IN() clause of an SQL statement.
- PDO will emulate prepared statements/bound parameters for drivers that do not natively support them, and can also rewrite named or question mark style parameter markers to something more appropriate.
- The parser used for emulated prepared statements and for rewriting named or question mark style parameters supports non-standard backslash escapes for single- and double quotes. This may lead to issues if terminating quotes are immediately preceded by a backslash.
- As of PHP 7.4.0, question marks can be escaped by doubling them (e.g., `??` translates to `?`).
- Emulated prepared statements do not communicate with the database server, so PDO::prepare() does not check the statement against the database.

Errors/Exceptions:
- Emits an E_WARNING if PDO::ATTR_ERRMODE is set to PDO::ERRMODE_WARNING.
- Throws a PDOException if PDO::ATTR_ERRMODE is set to PDO::ERRMODE_EXCEPTION.
```

----------------------------------------

TITLE: PHP Fann Cascade Activation Functions API
DESCRIPTION: Comprehensive API documentation for Fann functions related to managing cascade activation functions, including retrieving their count, getting the functions themselves, and setting them.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.fann-get-cascade-activation-functions-count.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
fann_get_cascade_activation_functions_count(resource $ann): int
  - Description: Returns the number of cascade activation functions in the Fann library. The default number of activation functions is 6.
  - Parameters:
    - $ann (resource): Neural network resource.
  - Returns:
    - int: The number of cascade activation functions.
    - false: On error.
  - See Also:
    - fann_get_cascade_activation_functions(): Returns the cascade activation functions.
    - fann_set_cascade_activation_functions(): Sets the array of cascade candidate activation functions.
```

----------------------------------------

TITLE: PHP Predefined Variables and Runtime Information
DESCRIPTION: This documentation outlines how to access predefined variables within PHP scripts and obtain comprehensive runtime information. It references the manual pages for predefined variables and the `phpinfo()` function, which provides a detailed overview of the PHP environment.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/faq.using.html#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Predefined Variables (language.variables.predefined.html):
  - Purpose: A partial list of variables automatically available in PHP scripts (e.g., $_GET, $_POST, $_SERVER, $_SESSION).
phpinfo(): Outputs a large amount of information about the current state of PHP.
  - Parameters: int $what = INFO_ALL
  - Returns: bool - TRUE on success, FALSE on failure.
  - Purpose: Provides detailed configuration options, loaded modules, environment variables, and more. Useful for debugging and system information.
Variables from outside of PHP (language.variables.external.html):
  - Purpose: Describes common scenarios for external variables, such as those from HTML forms, cookies, and URL query strings, and how PHP handles them.
```

----------------------------------------

TITLE: PHP Example: Catching BulkWriteException and Getting Error Message
DESCRIPTION: This PHP example demonstrates how to catch a `MongoDB\Driver\Exception\BulkWriteException` and retrieve the specific error message from a `WriteError` object using `getMessage()` when a duplicate key error occurs during a bulk write operation.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mongodb-driver-writeerror.getmessage.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
$manager = new MongoDB\Driver\Manager;
$bulk = new MongoDB\Driver\BulkWrite;
$bulk->insert(['_id' => 1]);
$bulk->insert(['_id' => 1]);
try {
$manager->executeBulkWrite('db.collection', $bulk);
} catch(MongoDB\Driver\Exception\BulkWriteException $e) {
var_dump($e->getWriteResult()->getWriteErrors()[0]->getMessage());
}
?>
```

----------------------------------------

TITLE: Yaf_Application Constructor API Reference
DESCRIPTION: Detailed API documentation for the `Yaf_Application::__construct` method, including its signature, parameters, and a description of the configuration options. It explains how to provide application settings via an INI file or a PHP array, and the role of the environment parameter.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-application.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Application::__construct
public Yaf_Application::__construct([mixed $config], [string $envrion = ?])

Instance a Yaf_Application.

Parameters:
  config (mixed): A ini config file path, or a config array.
    If it's an INI config file, there should be a section named as the one defined by yaf.environ (default 'product').
    Example INI config file structure:
    [product]
    application.directory=APPLICATION_PATH
    application.library = APPLICATION_PATH . ""/library""
    application.dispatcher.throwException=1
    application.dispatcher.catchException=1
    application.baseUri=""""
    ap.ext=php
    ap.view.ext=phtml
    ap.dispatcher.defaultModule=Index
    ap.dispatcher.defaultController=Index
    ap.dispatcher.defaultAction=index
    ap.modules=Index

  envrion (string, optional): Which section will be loaded as the final config from the INI file. Defaults to 'product'.
```

----------------------------------------

TITLE: PHP Example: Get MongoDB Server Hostname
DESCRIPTION: This PHP example demonstrates how to instantiate a `MongoDB\Driver\Manager`, select a server, and then use the `getHost()` method to retrieve and display the server's hostname. It connects to a local MongoDB instance.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mongodb-driver-server.gethost.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
    $manager = new MongoDB\Driver\Manager(""mongodb://localhost:27017/"");
    $server = $manager->selectServer();
    var_dump($server->getHost());
?>
```

----------------------------------------

TITLE: Phar Archive Metadata Management API Reference
DESCRIPTION: Comprehensive API documentation for managing metadata associated with files within a Phar archive and global archive metadata. This includes methods for setting, retrieving, checking for existence, and deleting metadata for both `PharFileInfo` objects and the `Phar` archive itself.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/pharfileinfo.getmetadata.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PharFileInfo::getMetadata
  public PharFileInfo::getMetadata([array $unserializeOptions = []]): mixed
  Return meta-data that was saved in the Phar archive's manifest for this file.
  Parameters:
    $unserializeOptions: An optional array of options to be passed to unserialize(). (Added in PHP 8.0.0)
  Returns:
    Any PHP variable that can be serialized and is stored as meta-data for the file, or null if no meta-data is stored.

PharFileInfo::setMetadata
  public PharFileInfo::setMetadata(mixed $metadata): void
  Sets file-specific meta-data saved with a file.
  Parameters:
    $metadata: The metadata to store for the file.
  Returns:
    No value is returned.

PharFileInfo::hasMetadata
  public PharFileInfo::hasMetadata(): bool
  Returns whether the entry has metadata.
  Returns:
    true if the entry has metadata, false otherwise.

PharFileInfo::delMetadata
  public PharFileInfo::delMetadata(): bool
  Deletes the metadata of the entry.
  Returns:
    true on success or false on failure.

Phar::setMetadata
  public Phar::setMetadata(mixed $metadata): void
  Sets phar archive meta-data.
  Parameters:
    $metadata: The metadata to store for the entire phar archive.
  Returns:
    No value is returned.

Phar::hasMetadata
  public Phar::hasMetadata(): bool
  Returns whether phar has global meta-data.
  Returns:
    true if the phar archive has global metadata, false otherwise.

Phar::getMetadata
  public Phar::getMetadata(): mixed
  Returns phar archive meta-data.
  Returns:
    Any PHP variable that can be serialized and is stored as global meta-data for the phar archive, or null if no meta-data is stored.
```

----------------------------------------

TITLE: SolrDisMaxQuery::setBoostFunction API Reference
DESCRIPTION: Comprehensive API documentation for the `SolrDisMaxQuery::setBoostFunction` method. It details the method signature, parameter requirements, return type, and provides an example of how the boost function string is formatted for Solr's 'bf' parameter.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/solrdismaxquery.setboostfunction.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SolrDisMaxQuery::setBoostFunction:
  public SolrDisMaxQuery::setBoostFunction(string $function): SolrDisMaxQuery
    - Description: Sets a Boost Function (bf parameter) that will be included in the user's query to influence the score. Any function supported natively by Solr can be used, along with an optional boost value.
    - Parameters:
      - $function (string): The boost function string. Example: ""recip(rord(myfield),1,2,3)^1.5""
    - Returns: SolrDisMaxQuery - The current SolrDisMaxQuery instance, allowing for method chaining.
    - Example Solr Query Output:
      q=lucene&defType=edismax&bf=recip(ms(NOW,mydatefield),3.16e-11,1,1)
```

----------------------------------------

TITLE: Yaf_Response_Abstract Class Methods
DESCRIPTION: Documentation for methods of the Yaf_Response_Abstract class, which serves as a base for handling and manipulating HTTP responses, including body content and headers.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_19

LANGUAGE: APIDOC
CODE:
```
Yaf_Response_Abstract::appendBody()
  - Append to response body
Yaf_Response_Abstract::clearBody()
  - Discard all exists response body
Yaf_Response_Abstract::clearHeaders()
  - Discard all set headers
Yaf_Response_Abstract::__construct()
  - The __construct purpose
Yaf_Response_Abstract::__destruct()
  - The __destruct purpose
Yaf_Response_Abstract::getBody()
  - Retrieve a exists content
Yaf_Response_Abstract::getHeader()
  - The getHeader purpose
Yaf_Response_Abstract::prependBody()
  - The prependBody purpose
Yaf_Response_Abstract::response()
  - Send response
Yaf_Response_Abstract::setAllHeaders()
  - The setAllHeaders purpose
Yaf_Response_Abstract::setBody()
  - Set content to response
Yaf_Response_Abstract::setHeader()
  - Set reponse header
Yaf_Response_Abstract::setRedirect()
  - The setRedirect purpose
Yaf_Response_Abstract::__toString()
  - Retrieve all bodys as string
```

----------------------------------------

TITLE: Example Usage of PHP strrchr()
DESCRIPTION: This PHP code snippet demonstrates how to use the `strrchr()` function to extract the file extension from a filename. It shows how to get the full extension including the dot, and then how to process it to get just the extension string.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.strrchr.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $ext = strrchr('somefile.txt', '.');
  echo ""file extension: $ext \n"";
  $ext = $ext ? strtolower(substr($ext, 1)) : '';
  echo ""file extension: $ext"";
?>
```

----------------------------------------

TITLE: Yaf_Request_Simple Class API Reference
DESCRIPTION: Provides a comprehensive reference for the `Yaf_Request_Simple` class, including its constants and public methods. This class is primarily used for testing purposes, allowing simulation of special requests in CLI mode.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.yaf-request-simple.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class Yaf_Request_Simple extends Yaf_Request_Abstract {
    /* Constants */
    const string SCHEME_HTTP = http;
    const string SCHEME_HTTPS = https;

    /* Methods */
    public __construct(
        string $method = ?,
        string $module = ?,
        string $controller = ?,
        string $action = ?,
        array $params = ?
    )
    public get(): void
    public getCookie(): void
    public getFiles(): void
    public getPost(): void
    public getQuery(): void
    public getRequest(): void
    public isXmlHttpRequest(): void
}
```

----------------------------------------

TITLE: Swoole\Process::read Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Swoole\Process::read` method, including its signature, parameter details, and return type. This method allows reading data that has been sent to the process.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-process.read.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Process::read([int $maxsize = ?]): string
  - Description: Read data sending to the process.
  - Parameters:
    - $maxsize (int, optional): The maximum size of data to read from the process. If not specified, the default behavior will apply.
  - Return Values:
    - (string): The data read from the process. Returns an empty string if no data is available or an error occurs.
```

----------------------------------------

TITLE: PHP Example: Getting Hash Block Size with mhash_get_block_size
DESCRIPTION: Illustrates how to use the `mhash_get_block_size` function in PHP to retrieve the block size of a hash algorithm, specifically MHASH_MD5. The example demonstrates a simple call and its expected output.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mhash-get-block-size.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      echo mhash_get_block_size(MHASH_MD5); // 16
?>
```

----------------------------------------

TITLE: NumberFormatter Pattern Retrieval API Reference
DESCRIPTION: Comprehensive API documentation for retrieving the formatting pattern from a NumberFormatter object in PHP, covering both object-oriented and procedural styles. It details the function signatures, parameters, and return values.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/numberformatter.getpattern.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
NumberFormatter::getPattern
  public NumberFormatter::getPattern(): string|false
  
numfmt_get_pattern
  numfmt_get_pattern(NumberFormatter $formatter): string|false

Description:
  Extracts the pattern used by the formatter.

Parameters:
  $formatter (NumberFormatter): The NumberFormatter object.

Return Values:
  string: The pattern string used by the formatter.
  false: If an error occurs.
```

----------------------------------------

TITLE: COMPersistHelper::InitNew Method
DESCRIPTION: Documents the `InitNew` method of the `COMPersistHelper` class, detailing its purpose, lack of parameters, boolean return value, and potential `com_exception`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/compersisthelper.initnew.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
COMPersistHelper::InitNew
  Description: Initializes an object to a default state.
  Signature: public COMPersistHelper::InitNew(): bool
  Parameters: None
  Return Values:
    - Type: bool
    - Description: Returns true on success or false on failure.
  Errors/Exceptions:
    - Type: com_exception
    - Condition: Thrown if the associated object does not implement the COM interface IPersistStreamInit, or when calling its IPersistStreamInit::Init() method failed.
```

----------------------------------------

TITLE: PHP Example: Getting Interface Names with ReflectionClass
DESCRIPTION: This PHP example demonstrates how to use the `ReflectionClass::getInterfaceNames()` method. It defines two interfaces and a class that implements both, then uses `ReflectionClass` to inspect the class and print the names of the interfaces it implements.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionclass.getinterfacenames.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
interface Foo { }

interface Bar { }

class Baz implements Foo, Bar { }

$rc1 = new ReflectionClass(""Baz"");

print_r($rc1->getInterfaceNames());
?>
```

----------------------------------------

TITLE: PHP mail() Function API Reference
DESCRIPTION: Comprehensive API documentation for the PHP `mail()` function, including its signature, detailed parameter descriptions, return values, and critical notes on header formatting, message content, and security considerations for sending emails.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mail.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
mail (PHP 4, PHP 5, PHP 7, PHP 8)
mail — Send mail

Signature:
mail(
    string $to,
    string $subject,
    string $message,
    array|string $additional_headers = [],
    string $additional_params = """"
): bool

Description: Sends an email.

Parameters:
$to (string): Receiver, or receivers of the mail. The formatting of this string must comply with RFC 2822. Examples: user@example.com, user@example.com, anotheruser@example.com, User <user@example.com>.
$subject (string): Subject of the email to be sent. Must satisfy RFC 2047.
$message (string): Message to be sent. Each line should be separated with a CRLF (\r\n). Lines should not be larger than 70 characters.
  Caution (Windows only): When PHP is talking to a SMTP server directly, if a full stop is found on the start of a line, it is removed. To counter-act this, replace these occurrences with a double dot.
$additional_headers (array|string, optional): String or array to be inserted at the end of the email header. Typically used to add extra headers (From, Cc, and Bcc). Multiple extra headers should be separated with a CRLF (\r\n). If outside data are used to compose this header, the data should be sanitized. If an array is passed, its keys are the header names and its values are the respective header values.
  Note: When sending mail, the mail MUST contain a `From` header. This can be set with the `additional_headers` parameter, or a default can be set in php.ini. Failing to do this will result in a warning. The `From` header sets also `Return-Path` when sending directly via SMTP (Windows only).
  Note: If messages are not received, try using a LF (\n) only. Some Unix mail transfer agents (most notably qmail) replace LF by CRLF automatically. This should be a last resort, as it does not comply with RFC 2822.
$additional_params (string, optional): Can be used to pass additional flags as command line options to the program configured by `sendmail_path`. For example, to set the envelope sender address with the `-f` sendmail option. This parameter is escaped by `escapeshellcmd()` internally. For security reasons, it is recommended for the user to sanitize this parameter to avoid adding unwanted parameters to the shell command. Due to `escapeshellcmd()` being applied, some characters allowed by internet RFCs for email addresses cannot be used. For such cases, alternative means of sending emails (e.g., framework/library) is recommended. The webserver user should be added as a trusted user to the sendmail configuration (e.g., /etc/mail/trusted-users) to prevent 'X-Warning' headers when the envelope sender is set.

Return Values:
Returns `true` if the mail was successfully accepted for delivery, `false` otherwise. It is important to note that just because the mail was accepted for delivery, it does NOT mean the mail will actually reach the intended destination.

Changelog:
7.2.0: The `additional_headers` parameter now also accepts an array.
```

----------------------------------------

TITLE: PHP Declare MongoDB Server API Version on Manager
DESCRIPTION: Demonstrates how to instantiate `MongoDB\Driver\ServerApi` and pass it to the `MongoDB\Driver\Manager` constructor to declare a specific server API version for MongoDB operations. This example shows a basic connection and a `buildInfo` command.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.mongodb-driver-serverapi.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
use MongoDB\Driver\Manager;
use MongoDB\Driver\ServerApi;

$v1 = new ServerApi(ServerApi::v1);
$manager = new Manager('mongodb://localhost:27017', [], ['serverApi' => $v1]);

$command = new MongoDB\Driver\Command(['buildInfo' => 1]);

try {
$cursor = $manager->executeCommand('admin', $command);
} catch(MongoDB\Driver\Exception $e) {
echo $e->getMessage(), ""\n"";
exit;
}

/* The buildInfo command returns a single result document, so we need to access
* the first result in the cursor. */
$buildInfo = $cursor->toArray()[0];

echo $buildInfo->version, ""\n"";
?>
```

----------------------------------------

TITLE: PHP Example: Getting MySQL Thread ID
DESCRIPTION: Demonstrates how to use the `mysql_thread_id` function to retrieve and print the current thread ID of a MySQL connection. It shows connecting to a database and then calling the function to get the thread ID.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mysql-thread-id.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
  $thread_id = mysql_thread_id($link);
  if ($thread_id){
  printf(""current thread id is %d\n"", $thread_id);
  }
?>
```

----------------------------------------

TITLE: Create Simple HTTP 0.x Client with PHP Event Library
DESCRIPTION: This PHP example demonstrates building a basic HTTP 0.x client using the `Event` library. It defines callback functions for handling incoming data (`readcb`) and connection/error events (`eventcb`). The client performs asynchronous DNS resolution via `EventDnsBase` and sends a GET request to a specified host and resource, showcasing event-driven network communication.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/event.examples.html#_snippet_0

LANGUAGE: php
CODE:
```
<?php   // Read callback   function readcb($bev, $base) {   //$input = $bev->input; //$bev->getInput();      //$pos = $input->search(""TTP"");   $pos = $bev->input->search(""TTP"");      while (($n = $bev->input->remove($buf, 1024)) > 0) {   echo $buf;   }   }      // Event callback   function eventcb($bev, $events, $base) {   if ($events & EventBufferEvent::CONNECTED) {   echo ""Connected.\n"";   } elseif ($events & (EventBufferEvent::ERROR | EventBufferEvent::EOF)) {   if ($events & EventBufferEvent::ERROR) {   echo ""DNS error: "", $bev->getDnsErrorString(), PHP_EOL;   }      echo ""Closing\n"";   $base->exit();   exit(""Done\n"");   }   }      if ($argc != 3) {   echo <<<EOS
Trivial HTTP 0.x client
Syntax: php {$argv[0]} [hostname] [resource]
Example: php {$argv[0]} www.google.com /
EOS;   exit();   }      $base = new EventBase();      $dns_base = new EventDnsBase($base, TRUE); // We'll use async DNS resolving   if (!$dns_base) {   exit(""Failed to init DNS Base\n"");   }      $bev = new EventBufferEvent($base, /* use internal socket */ NULL,   EventBufferEvent::OPT_CLOSE_ON_FREE | EventBufferEvent::OPT_DEFER_CALLBACKS,   ""readcb"", /* writecb */ NULL, ""eventcb""   );   if (!$bev) {   exit(""Failed creating bufferevent socket\n"");   }      //$bev->setCallbacks(""readcb"", /* writecb */ NULL, ""eventcb"", $base);   $bev->enable(Event::READ | Event::WRITE);      $output = $bev->output; //$bev->getOutput();   if (!$output->add(   ""GET {$argv[2]} HTTP/1.0\r\n"".   ""Host: {$argv[1]}\r\n"".   ""Connection: Close\r\n\r\n""   )) {   exit(""Failed adding request to output buffer\n"");   }      if (!$bev->connectHost($dns_base, $argv[1], 80, EventUtil::AF_UNSPEC)) {   exit(""Can't connect to host {$argv[1]}\n"");   }      $base->dispatch();   ?>
```

----------------------------------------

TITLE: PHP MySQL X DevAPI Collection Operations Example
DESCRIPTION: Demonstrates a complete workflow for interacting with MySQL X DevAPI using PHP. This example shows how to establish a session, drop and create a database, get a schema, create a collection, add a document, retrieve generated IDs, and fetch a document by its ID. It illustrates common operations for managing document-based data.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-collection.construct.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php   $session = mysql_xdevapi\getSession(""mysqlx://user:password@localhost"");      $session->sql(""DROP DATABASE IF EXISTS addressbook"")->execute();   $session->sql(""CREATE DATABASE addressbook"")->execute();      $schema = $session->getSchema(""addressbook"");   $collection = $schema->createCollection(""people"");      $result = $collection->add('{""name"": ""Alfred"", ""age"": 42, ""job"": ""Butler""}')->execute();      // A unique _id is (by default, and recommended) generated by MySQL Server   // This retrieves the generated _id's; only one in this example, so $ids[0]   $ids = $result->getGeneratedIds();   $alfreds_id = $ids[0];      // ...      print_r($alfreds_id);   print_r($collection->getOne($alfreds_id));   ?>
```

----------------------------------------

TITLE: PHP Example: Using get_resource_type with a File Resource
DESCRIPTION: This example demonstrates how to use the `get_resource_type` function to determine the type of a file resource (stream) opened for writing. It opens a file, gets its resource type, and prints it to the console.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.get-resource-type.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $fp = fopen(""foo"", ""w"");
  echo get_resource_type($fp) . ""\n"";
?>
```

----------------------------------------

TITLE: Imagick::averageImages Method Reference
DESCRIPTION: Comprehensive API documentation for the Imagick::averageImages method, including its deprecation status, signature, parameters, return values, and error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.averageimages.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::averageImages
======================

(PECL imagick 2, PECL imagick 3)

Warning: This function has been DEPRECATED as of Imagick 3.4.4. Relying on this function is highly discouraged.

Description:
  public Imagick::averageImages(): Imagick
    Average a set of images.

Parameters:
  This function has no parameters.

Return Values:
  Returns a new Imagick object on success.

Errors/Exceptions:
  Throws ImagickException on error.
```

----------------------------------------

TITLE: Add Memcached Servers in PHP (OO and Procedural)
DESCRIPTION: This example demonstrates how to add multiple Memcached servers to a connection pool using both the object-oriented (OO) API and the procedural API provided by the PHP Memcache extension.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/memcache.addserver.html#_snippet_2

LANGUAGE: PHP
CODE:
```
<?php
/* OO API */
$memcache = new Memcache;
$memcache->addServer('memcache_host', 11211);
$memcache->addServer('memcache_host2', 11211);

/* procedural API */
$memcache_obj = memcache_connect('memcache_host', 11211);
memcache_add_server($memcache_obj, 'memcache_host2', 11211);
?>
```

----------------------------------------

TITLE: UI\Draw\Pen Class API
DESCRIPTION: API documentation for the UI\Draw\Pen class, providing drawing operations on a canvas.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.ui.html#_snippet_29

LANGUAGE: APIDOC
CODE:
```
UI\Draw\Pen
  clip(): void
    - Clip a Path: Sets the current path as the clipping region.
  fill(path: UI\Draw\Path, brush: UI\Draw\Brush): void
    - Fill a Path: Fills the specified path with a given brush.
  restore(): void
    - Restore: Restores the drawing state saved by `save()`.
  save(): void
    - Save: Saves the current drawing state (transform, clip, etc.).
  stroke(path: UI\Draw\Path, brush: UI\Draw\Brush, strokeStyle: UI\Draw\StrokeStyle): void
    - Stroke a Path: Strokes the specified path with a given brush and stroke style.
  transform(matrix: UI\Draw\Matrix): void
    - Matrix Transform: Applies a transformation matrix to the drawing context.
  write(font: UI\Draw\Font, brush: UI\Draw\Brush, x: float, y: float, text: string): void
    - Draw Text at Point: Draws text at a specified point using a font and brush.
```

----------------------------------------

TITLE: PHP OAuthProvider Class (Server-Side)
DESCRIPTION: The `OAuthProvider` class facilitates the implementation of an OAuth service provider, allowing applications to validate incoming OAuth requests, manage consumers, and handle tokens and nonces.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.oauth.html#_snippet_2

LANGUAGE: APIDOC
CODE:
```
OAuthProvider Class:
  addRequiredParameter(parameter: string):
    - Description: Adds a parameter that must be present in incoming OAuth requests.
    - Parameters:
      - parameter: The name of the required parameter.

  callconsumerHandler():
    - Description: Calls the registered consumer handler callback function.

  callTimestampNonceHandler():
    - Description: Calls the registered timestamp/nonce handler callback function.

  calltokenHandler():
    - Description: Calls the registered token handler callback function.

  checkOAuthRequest(uri: string = '', http_method: string = ''):
    - Description: Checks an incoming OAuth request for validity against registered handlers and parameters.
    - Parameters:
      - uri: (Optional) The URI of the request.
      - http_method: (Optional) The HTTP method of the request.
    - Returns: True if the request is valid, false otherwise.

  __construct(consumer_handler: callable, token_handler: callable):
    - Description: Constructs a new OAuthProvider object, setting up required consumer and token handlers.
    - Parameters:
      - consumer_handler: A callable function to handle consumer validation.
      - token_handler: A callable function to handle token validation.

  consumerHandler(callback: callable):
    - Description: Sets the callback function to be used for validating consumers.
    - Parameters:
      - callback: The callable consumer handler function.

  generateToken(length: int = 32):
    - Description: Generates a random token string of a specified length.
    - Parameters:
      - length: (Optional) The desired length of the token string.
    - Returns: The generated token string.

  is2LeggedEndpoint(is_2_legged: bool):
    - Description: Sets whether the current endpoint is a 2-legged OAuth endpoint (without user authorization).
    - Parameters:
      - is_2_legged: Boolean indicating if it's a 2-legged endpoint.

  isRequestTokenEndpoint(is_request_token: bool):
    - Description: Sets whether the current endpoint is the request token endpoint.
    - Parameters:
      - is_request_token: Boolean indicating if it's the request token endpoint.

  removeRequiredParameter(parameter: string):
    - Description: Removes a previously added required parameter.
    - Parameters:
      - parameter: The name of the parameter to remove.

  reportProblem(problem: string):
    - Description: Reports an OAuth problem, typically by throwing an OAuthException.
    - Parameters:
      - problem: A string describing the problem.

  setParam(param_name: string, param_value: string):
    - Description: Sets a specific OAuth parameter for the provider.
    - Parameters:
      - param_name: The name of the parameter.
      - param_value: The value of the parameter.

  setRequestTokenPath(path: string):
    - Description: Sets the path for the request token endpoint.
    - Parameters:
      - path: The request token path.

  timestampNonceHandler(callback: callable):
    - Description: Sets the callback function for handling timestamp and nonce validation.
    - Parameters:
      - callback: The callable timestamp/nonce handler function.

  tokenHandler(callback: callable):
    - Description: Sets the callback function for validating tokens.
    - Parameters:
      - callback: The callable token handler function.
```

----------------------------------------

TITLE: PHP Get Current Thread ID Example
DESCRIPTION: A PHP example demonstrating how to use the `zend_thread_id()` function to retrieve and display the unique identifier for the current execution thread. The output shows a typical thread ID value.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.zend-thread-id.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $thread_id = zend_thread_id();

  echo 'Current thread id is: ' . $thread_id;
?>
```

----------------------------------------

TITLE: PHP Example: Using ob_get_length to Get Output Buffer Length
DESCRIPTION: This example demonstrates how to use ob_get_length() to retrieve the length of the output buffer at different stages of buffering. It shows how the length changes as more content is echoed into the buffer.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.ob-get-length.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
      ob_start();
      echo ""Hello "";
      $len1 = ob_get_length();
      echo ""World"";
      $len2 = ob_get_length();
      ob_end_clean();
      echo $len1 . "", "" . $len2;
   ?>
```

----------------------------------------

TITLE: PHP Countable Interface and count() Method API Documentation
DESCRIPTION: Comprehensive API documentation for the PHP `Countable` interface, explaining its purpose and detailing the `count()` method, including its signature and return type.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.countable.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Interface: Countable
  Description: Classes implementing Countable can be used with the count() function.
  Availability: PHP 5 >= 5.1.0, PHP 7, PHP 8

  Method: count()
    Signature: public count(): int
    Description: Counts elements of an object.
    Returns: int - The number of elements.
```

----------------------------------------

TITLE: Memcached::get Method API Reference
DESCRIPTION: Detailed API documentation for the Memcached::get method, including its signature, parameter descriptions, return values, changelog, and related functions for retrieving data from a Memcached server.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/memcached.get.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Memcached::get
  Description: Retrieve an item from the Memcached cache.
  Signature: public Memcached::get(string $key, ?callable $cache_cb = null, int $get_flags = 0): mixed
  Parameters:
    $key (string): The key of the item to retrieve.
    $cache_cb (?callable): Read-through caching callback or null.
    $get_flags (int): Flags to control the returned result. When Memcached::GET_EXTENDED is given, the function will also return the CAS token.
  Return Values:
    mixed: Returns the value stored in the cache or false otherwise.
    array: If $get_flags is set to Memcached::GET_EXTENDED, an array containing the value and the CAS token is returned.
    Error Handling: Memcached::getResultCode() will return Memcached::RES_NOTFOUND if the key does not exist.
  Changelog:
    PECL memcached 3.0.0: The &cas_token parameter was removed. Instead, get_flags was added, and when given Memcached::GET_EXTENDED, it ensures the CAS token is fetched.
  See Also:
    Memcached::getByKey() - Retrieve an item from a specific server
    Memcached::getMulti() - Retrieve multiple items
    Memcached::getDelayed() - Request multiple items
```

----------------------------------------

TITLE: PHP getcwd() and chdir() Usage Example
DESCRIPTION: Demonstrates how to use the `getcwd()` function to get the current directory and `chdir()` to change it. The example shows the output before and after changing the directory, illustrating the dynamic nature of the current working directory.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.getcwd.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
      // current directory
   echo getcwd() . ""\n"";

   chdir('cvs');

      // current directory
   echo getcwd() . ""\n"";
?>
```

----------------------------------------

TITLE: Swoole\Server::send API Reference
DESCRIPTION: Detailed API documentation for the `Swoole\Server::send` method, including its signature, parameters, and return value. This method is used to send data to a connected client.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/swoole-server.send.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Swoole\Server::send
  Description: Send data to the client.
  Signature: public Swoole\Server::send(int $fd, string $data, int $reactor_id = ?): bool
  Parameters:
    $fd (int): The file descriptor of the client connection.
    $data (string): The data to be sent to the client.
    $reactor_id (int, optional): The ID of the reactor thread. This parameter is optional.
  Returns:
    bool: Returns true on success or false on failure.
  Notes:
    This function is available since PECL swoole >= 1.9.0.
    The original documentation notes that this function is currently not fully documented.
```

----------------------------------------

TITLE: Ds\Deque Class Methods
DESCRIPTION: Comprehensive API documentation for the `Ds\Deque` (double-ended queue) class, detailing methods for managing collections that support efficient insertion and deletion at both ends. Includes operations for adding, removing, accessing, transforming, and querying elements.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.ds.html#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Ds\Deque Class Methods:

Ds\Deque::allocate()
  - Allocates enough memory for a required capacity
Ds\Deque::apply()
  - Updates all values by applying a callback function to each value
Ds\Deque::capacity()
  - Returns the current capacity
Ds\Deque::clear()
  - Removes all values from the deque
Ds\Deque::__construct()
  - Creates a new instance
Ds\Deque::contains()
  - Determines if the deque contains given values
Ds\Deque::copy()
  - Returns a shallow copy of the deque
Ds\Deque::count()
  - Returns the number of values in the collection
Ds\Deque::filter()
  - Creates a new deque using a callable to determine which values to include
Ds\Deque::find()
  - Attempts to find a value's index
Ds\Deque::first()
  - Returns the first value in the deque
Ds\Deque::get()
  - Returns the value at a given index
Ds\Deque::insert()
  - Inserts values at a given index
Ds\Deque::isEmpty()
  - Returns whether the deque is empty
Ds\Deque::join()
  - Joins all values together as a string
Ds\Deque::jsonSerialize()
  - Returns a representation that can be converted to JSON
Ds\Deque::last()
  - Returns the last value
Ds\Deque::map()
  - Returns the result of applying a callback to each value
Ds\Deque::merge()
  - Returns the result of adding all given values to the deque
Ds\Deque::pop()
  - Removes and returns the last value
Ds\Deque::push()
  - Adds values to the end of the deque
Ds\Deque::reduce()
  - Reduces the deque to a single value using a callback function
Ds\Deque::remove()
  - Removes and returns a value by index
Ds\Deque::reverse()
  - Reverses the deque in-place
Ds\Deque::reversed()
  - Returns a reversed copy
Ds\Deque::rotate()
  - Rotates the deque by a given number of rotations
Ds\Deque::set()
  - Updates a value at a given index
Ds\Deque::shift()
  - Removes and returns the first value
Ds\Deque::slice()
  - Returns a sub-deque of a given range
Ds\Deque::sort()
  - Sorts the deque in-place
```

----------------------------------------

TITLE: PHP Example: Shutting Down a Worker Instance
DESCRIPTION: Demonstrates how to initialize, start, and then safely shut down a `Worker` instance in PHP using the `shutdown()` method. The example shows the typical workflow and verifies the boolean return value.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/worker.shutdown.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$my = new Worker();
$my->start();
/* stack/execute tasks */
var_dump($my->shutdown());
```

----------------------------------------

TITLE: PHP Example: Get MySQL Client Library Version
DESCRIPTION: This PHP example demonstrates how to use the `mysqli_get_client_version()` function to retrieve and print the MySQL client library version. It highlights that a database connection is not required to obtain this information.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysqli.get-client-version.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
/* We don't need a connection to determine
the version of mysql client library */

printf(""Client library version: %d\n"", mysqli_get_client_version());
?>
```

----------------------------------------

TITLE: PHP EvLoop::check Method API Reference
DESCRIPTION: Comprehensive API documentation for the `EvLoop::check` method, detailing its signature, parameters, return value, and a reference to its associated constructor `EvCheck::__construct()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/evloop.check.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EvLoop::check
  Description: Creates EvCheck object associated with the current event loop instance.
  Signature: final public EvLoop::check(string $callback, string $data = ?, string $priority = ?): EvCheck
  Parameters:
    $callback (string): The callback function to be invoked.
    $data (string, optional): Custom data to be associated with the watcher.
    $priority (string, optional): The watcher's priority.
    (Note: All parameters have the same meaning as for EvCheck::__construct())
  Return Value: EvCheck object on success.
  See Also:
    EvCheck::__construct() - Constructs the EvCheck watcher object.
```

----------------------------------------

TITLE: ps_lineto PHP Function API Reference
DESCRIPTION: API documentation for the `ps_lineto` function, which adds a straight line from the current point to the given coordinates to the current path in a PostScript document. It requires a starting point set by `ps_moveto()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.ps-lineto.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ps_lineto(resource $psdoc, float $x, float $y): bool
  - Adds a straight line from the current point to the given coordinates to the current path.
  - Parameters:
    - psdoc: Resource identifier of the postscript file as returned by ps_new().
    - x: x-coordinate of the end point of the line.
    - y: y-coordinate of the end point of the line.
  - Returns: true on success or false on failure.
  - Related: ps_moveto()
```

----------------------------------------

TITLE: Fetch Webpage Content with PHP cURL
DESCRIPTION: This PHP snippet demonstrates how to use the cURL extension to retrieve the content of a specified URL (http://www.example.com/) and write it to a local file named 'example_homepage.txt'. It initializes a cURL session, sets options to output to a file and suppress headers, executes the request, and includes basic error handling before closing the cURL session and the file.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/curl.examples-basic.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
$ch = curl_init(""http://www.example.com/"");
$fp = fopen(""example_homepage.txt"", ""w"");
curl_setopt($ch, CURLOPT_FILE, $fp);
curl_setopt($ch, CURLOPT_HEADER, 0);
curl_exec($ch);
if(curl_error($ch)) {
fwrite($fp, curl_error($ch));
}
curl_close($ch);
fclose($fp);
?>
```

----------------------------------------

TITLE: PHP SessionHandler::create_sid API Reference
DESCRIPTION: Comprehensive API documentation for the `SessionHandler::create_sid` method, including its signature, description, parameter details, return values, and cross-references to related session ID functions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/sessionhandler.create-sid.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SessionHandler::create_sid
  Description: Generates and returns a new session ID.
  Signature: public SessionHandler::create_sid(): string
  Parameters:
    - None
  Return Value:
    - Type: string
    - Description: A session ID valid for the default session handler.
  See Also:
    - session_id(): Get and/or set the current session id
    - session_create_id(): Create new session id
```

----------------------------------------

TITLE: PHP RarArchive Object String Representation Example
DESCRIPTION: Illustrates how to use the `RarArchive::__toString` method to get a string representation of a RarArchive object. The example demonstrates the output before and after closing the archive, showing its path and status.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/rararchive.tostring.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
  $rar_arch = RarArchive::open('latest_winrar.rar');
  echo $rar_arch.""\n"";
  $rar_arch->close();
  echo $rar_arch.""\n"";
?>
```

----------------------------------------

TITLE: Yaf_Request_Simple::getRequest Method API Reference
DESCRIPTION: Documents the `getRequest` method of the `Yaf_Request_Simple` class within the Yaf framework. This method is noted as currently undocumented, providing only its signature and parameter information.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-request-simple.getrequest.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Request_Simple::getRequest
  Description: The getRequest purpose
  Signature: public Yaf_Request_Simple::getRequest(): void
  Availability: Yaf >=1.0.0
  Parameters: None
  Return Value: void
  Warning: This function is currently not documented; only its argument list is available.
```

----------------------------------------

TITLE: GmagickPixel Class API Reference
DESCRIPTION: Comprehensive API documentation for the GmagickPixel class, including its constructor and methods for getting and setting color values and counts. This class is used to represent a color pixel within the Gmagick image manipulation library.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.gmagickpixel.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class GmagickPixel {

  public __construct([string $color = ?])
    - The GmagickPixel constructor.
    - Parameters:
      - $color: An optional string representing the initial color (e.g., 'red', '#FF0000', 'rgb(255,0,0)').

  public getcolor([bool $as_array = false, bool $normalize_array = false]): mixed
    - Returns the color of the pixel.
    - Parameters:
      - $as_array: If true, returns the color as an associative array of RGBA components. Defaults to false.
      - $normalize_array: If true and $as_array is true, normalizes the color values in the array to a 0.0-1.0 range. Defaults to false.
    - Returns: A string representing the color (e.g., 'rgb(255,0,0)') or an array if $as_array is true.

  public getcolorcount(): int
    - Returns the color count associated with this color.
    - Returns: An integer representing the color count.

  public getcolorvalue(int $color): float
    - Gets the normalized value of a specific color channel (e.g., red, green, blue, alpha).
    - Parameters:
      - $color: An integer constant representing the color channel (e.g., Gmagick::COLOR_RED, Gmagick::COLOR_GREEN, Gmagick::COLOR_BLUE, Gmagick::COLOR_ALPHA).
    - Returns: A float representing the normalized value of the specified channel (0.0 to 1.0).

  public setcolor(string $color): GmagickPixel
    - Sets the color of the pixel.
    - Parameters:
      - $color: A string representing the color to set (e.g., 'blue', '#0000FF', 'rgba(0,0,255,0.5)').
    - Returns: The GmagickPixel object itself for method chaining.

  public setcolorvalue(int $color, float $value): GmagickPixel
    - Sets the normalized value of a specific color channel.
    - Parameters:
      - $color: An integer constant representing the color channel (e.g., Gmagick::COLOR_RED).
      - $value: A float representing the normalized value to set for the channel (0.0 to 1.0).
    - Returns: The GmagickPixel object itself for method chaining.
}
```

----------------------------------------

TITLE: PHP highlight_file Function API Reference
DESCRIPTION: Detailed API documentation for the `highlight_file` function in PHP, covering its signature, parameters, return values, and important usage notes including security and output buffering considerations. It also provides configuration for web servers to automatically highlight `.phps` files.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.highlight-file.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
highlight_file(string $filename, bool $return = false): string|bool

Description:
Prints out or returns a syntax highlighted version of the code contained in `filename` using the colors defined in the built-in syntax highlighter for PHP.

Parameters:
  $filename (string): Path to the PHP file to be highlighted.
  $return (bool, optional): Set this parameter to `true` to make this function return the highlighted code instead of printing it. Defaults to `false`.

Return Values:
  If `$return` is set to `true`, returns the highlighted code as a string.
  Otherwise, returns `true` on success, `false` on failure.

Usage/Configuration:
  Many servers are configured to automatically highlight files with a `.phps` extension. For example, `example.phps` when viewed will show the syntax highlighted source of the file. To enable this, add the following line to `httpd.conf`:
  AddType application/x-httpd-php-source .phps

Notes:
  Caution: Care should be taken when using `highlight_file()` to make sure that you do not inadvertently reveal sensitive information such as passwords or any other type of information that might create a potential security risk.
  When the `$return` parameter is used, this function uses internal output buffering so it cannot be used inside an `ob_start()` callback function.

See Also:
  highlight_string(): Syntax highlighting of a string.
  Highlighting INI directives: Related configuration options.
```

----------------------------------------

TITLE: GearmanJob Class Methods
DESCRIPTION: API documentation for the GearmanJob class, representing a job being executed by a worker. It provides methods for interacting with the job, sending status updates, and retrieving job details.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.gearman.html#_snippet_2

LANGUAGE: APIDOC
CODE:
```
GearmanJob:
  __construct(): GearmanJob
    - Description: Creates a new GearmanJob instance.
    - Parameters: None.
    - Returns: A new GearmanJob object.

  complete(result: string): bool (Deprecated)
    - Description: Sends the result and complete status for a job. This method is deprecated; use sendComplete().
    - Parameters:
      - result: The result string to send.
    - Returns: True on success, false on failure.

  data(data: string): bool (Deprecated)
    - Description: Sends incremental data for a running job. This method is deprecated; use sendData().
    - Parameters:
      - data: The data string to send.
    - Returns: True on success, false on failure.

  exception(exception: string): bool (Deprecated)
    - Description: Sends an exception for a running job. This method is deprecated; use sendException().
    - Parameters:
      - exception: The exception message to send.
    - Returns: True on success, false on failure.

  fail(): bool (Deprecated)
    - Description: Sends a fail status for a job. This method is deprecated; use sendFail().
    - Parameters: None.
    - Returns: True on success, false on failure.

  functionName(): string
    - Description: Gets the name of the function associated with this job.
    - Parameters: None.
    - Returns: The function name as a string.

  handle(): string
    - Description: Gets the job handle (unique identifier for the job).
    - Parameters: None.
    - Returns: The job handle as a string.

  returnCode(): int
    - Description: Gets the last return code from a Gearman operation.
    - Parameters: None.
    - Returns: An integer representing the Gearman return code.

  sendComplete(result: string): bool
    - Description: Sends the result and complete status for a job.
    - Parameters:
      - result: The result string to send.
    - Returns: True on success, false on failure.

  sendData(data: string): bool
    - Description: Sends incremental data for a running job.
    - Parameters:
      - data: The data string to send.
    - Returns: True on success, false on failure.

  sendException(exception: string): bool
    - Description: Sends an exception for a running job.
    - Parameters:
      - exception: The exception message to send.
    - Returns: True on success, false on failure.

  sendFail(): bool
    - Description: Sends a fail status for a job.
    - Parameters: None.
    - Returns: True on success, false on failure.

  sendStatus(numerator: int, denominator: int): bool
    - Description: Sends status updates for a running job, typically used for progress reporting.
    - Parameters:
      - numerator: The current progress numerator.
      - denominator: The total progress denominator.
    - Returns: True on success, false on failure.

  sendWarning(warning: string): bool
    - Description: Sends a warning message for a running job.
    - Parameters:
      - warning: The warning message to send.
    - Returns: True on success, false on failure.

  setReturn(return_code: int): bool
    - Description: Sets a return value for the job. (Usage context unclear from description).
    - Parameters:
      - return_code: The return code to set.
    - Returns: True on success, false on failure.

  status(numerator: int, denominator: int): bool (Deprecated)
    - Description: Sends status updates for a running job. This method is deprecated; use sendStatus().
    - Parameters:
      - numerator: The current progress numerator.
      - denominator: The total progress denominator.
    - Returns: True on success, false on failure.

  unique(): string
    - Description: Gets the unique identifier for the job.
    - Parameters: None.
    - Returns: The unique identifier as a string.

  warning(warning: string): bool (Deprecated)
    - Description: Sends a warning message for a running job. This method is deprecated; use sendWarning().
    - Parameters:
      - warning: The warning message to send.
    - Returns: True on success, false on failure.

  workload(): string
    - Description: Gets the workload data associated with the job.
    - Parameters: None.
    - Returns: The workload data as a string.

  workloadSize(): int
    - Description: Gets the size of the workload data in bytes.
    - Parameters: None.
    - Returns: The size of the workload data as an integer.
```

----------------------------------------

TITLE: PHP Example: Using geoip_country_name_by_name
DESCRIPTION: Demonstrates how to use the `geoip_country_name_by_name` function in PHP to get the country name for a given hostname and print it. The example includes a conditional check to ensure a country name was successfully retrieved before outputting.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.geoip-country-name-by-name.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $country = geoip_country_name_by_name('www.example.com');
  if ($country) {
  echo 'This host is located in: ' . $country;
  }
?>
```

----------------------------------------

TITLE: RarEntry::getAttr Method API Reference
DESCRIPTION: Comprehensive API documentation for the `RarEntry::getAttr` method, detailing its signature, purpose, lack of parameters, and integer return type representing OS-dependent attributes, or `false` on error.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/rarentry.getattr.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
RarEntry::getAttr
(PECL rar >= 0.1)

public RarEntry::getAttr(): int

Description:
Returns the OS-dependent attributes of the archive entry.

Parameters:
This function has no parameters.

Return Values:
Returns the attributes (int) or false on error.

See Also:
- RarEntry::getHostOs() - Get entry host OS
- The constants in RarEntry
```

----------------------------------------

TITLE: PHP Reflection Output: `strlen` Function Details
DESCRIPTION: This API documentation block shows the structured output generated by PHP's Reflection API for the `strlen` function. It details the function's internal origin, its single required parameter `$str`, and its overall structure as reported by Reflection, providing a clear view of its signature.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflection.examples.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Function [ <internal:Core> function strlen ] {

  - Parameters [1] {
    Parameter #0 [ <required> $str ]
  }
}
```

----------------------------------------

TITLE: PHP Example: Using ReflectionConstant to Get Constant Name
DESCRIPTION: Demonstrates how to use the `ReflectionConstant` class in PHP to reflect on a namespaced constant. The example specifically uses `getName()` to retrieve the full name of the constant 'Foo\BAR', which outputs 'Foo\BAR'. Note: The example code uses `getName()` while the surrounding text refers to `getShortName()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionconstant.getshortname.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  namespace Foo;

  const BAR = 'bar';

  echo (new \ReflectionConstant('Foo\BAR'))->getName();
?>
```

----------------------------------------

TITLE: Imagick::getImageGamma API Reference
DESCRIPTION: Detailed API documentation for the `Imagick::getImageGamma` method, providing its signature, a description of its purpose, information on parameters, expected return values, and potential exceptions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.getimagegamma.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::getImageGamma
  Description: Gets the image gamma.
  Signature: public Imagick::getImageGamma(): float
  Parameters: This function has no parameters.
  Return Value: float - Returns the image gamma on success.
  Errors/Exceptions: Throws ImagickException on error.
```

----------------------------------------

TITLE: Reading Specific PHP Attributes by Class Name with Reflection API
DESCRIPTION: This snippet builds upon the previous example, illustrating how to filter the retrieved attributes to only include those of a specific class (e.g., `MyAttribute::class`) when using PHP's Reflection API. This allows for more targeted attribute processing, retrieving only relevant attributes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/language.attributes.reflection.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
function dumpMyAttributeData($reflection) {
    $attributes = $reflection->getAttributes(MyAttribute::class);

    foreach ($attributes as $attribute) {
        var_dump($attribute->getName());
        var_dump($attribute->getArguments());
        var_dump($attribute->newInstance());
    }
}

dumpMyAttributeData(new ReflectionClass(Thing::class));
```

----------------------------------------

TITLE: PHP: Get NumberFormatter Symbol (Object-Oriented Example)
DESCRIPTION: Illustrates the object-oriented approach to retrieving and modifying a number formatter's symbol using the `NumberFormatter::getSymbol` and `NumberFormatter::setSymbol` methods in PHP. It demonstrates creating a formatter, getting its default symbol, formatting a number, changing the symbol, and then re-getting the symbol and formatting the number.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/numberformatter.getsymbol.html#_snippet_2

LANGUAGE: PHP
CODE:
```
<?php
  $fmt = new NumberFormatter( 'de_DE', NumberFormatter::DECIMAL );
  echo ""Sep: "".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL).""\n"";
  echo $fmt->format(1234567.891234567890000).""\n"";
  $fmt->setSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL, ""*"");
  echo ""Sep: "".$fmt->getSymbol(NumberFormatter::GROUPING_SEPARATOR_SYMBOL).""\n"";
  echo $fmt->format(1234567.891234567890000).""\n"";
?>
```

----------------------------------------

TITLE: Imagick::waveImage Method API Reference
DESCRIPTION: Comprehensive API documentation for the `Imagick::waveImage` method, which applies a wave filter to an image. It details the required parameters, expected return values, and potential exceptions thrown by the method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.waveimage.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::waveImage($amplitude, $length)
  - Description: Applies a wave filter to the image. This method is available if Imagick has been compiled against ImageMagick version 6.2.9 or newer.
  - Parameters:
    - $amplitude (float): The amplitude of the wave.
    - $length (float): The length of the wave.
  - Return Values:
    - true (bool): Returns true on success.
  - Errors/Exceptions:
    - Throws ImagickException on error.
```

----------------------------------------

TITLE: PHP Example: Using MongoDB Driver to Get Upserted Document IDs
DESCRIPTION: This PHP example demonstrates how to perform various write operations, including inserts, updates, and upserts, using the `MongoDB\Driver\BulkWrite` and `MongoDB\Driver\Manager` classes. It then shows how to retrieve and inspect the identifiers of the documents that were upserted during these operations using the `getUpsertedIds` method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mongodb-driver-writeresult.getupsertedids.html#_snippet_1

LANGUAGE: php
CODE:
```
<?php
$manager = new MongoDB\Driver\Manager;
$bulk = new MongoDB\Driver\BulkWrite;
$bulk->insert(['x' => 1]);
$bulk->update(['x' => 1], ['$set' => ['y' => 3]]);
$bulk->update(['x' => 2], ['$set' => ['y' => 1]], ['upsert' => true]);
$bulk->update(['x' => 3], ['$set' => ['y' => 2]], ['upsert' => true]);
$bulk->delete(['x' => 1]);
$result = $manager->executeBulkWrite('db.collection', $bulk);
var_dump($result->getUpsertedIds());
?>
```

----------------------------------------

TITLE: mysql_xdevapi\CollectionFind::__construct API Reference
DESCRIPTION: API documentation for the private constructor of the `mysql_xdevapi\CollectionFind` class. It outlines the method signature and confirms that the constructor takes no parameters. This constructor is typically called internally when a `CollectionFind` object is instantiated, for example, via `$collection->find()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mysql-xdevapi-collectionfind.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
mysql_xdevapi\CollectionFind::__construct()
  - Description: Private constructor for the CollectionFind class.
  - Parameters: None.
  - Notes: This function is not directly callable by users and is typically invoked internally when a CollectionFind object is created (e.g., via $collection->find()).
```

----------------------------------------

TITLE: Yaf_Route_Regex Class Methods
DESCRIPTION: Documentation for methods of the Yaf_Route_Regex class, which allows routing based on regular expressions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_22

LANGUAGE: APIDOC
CODE:
```
Yaf_Route_Regex::assemble()
  - Assemble a url
Yaf_Route_Regex::__construct()
  - Yaf_Route_Regex constructor
Yaf_Route_Regex::route()
  - The route purpose
```

----------------------------------------

TITLE: PHP ReflectionProperty::getRawValue Usage Example
DESCRIPTION: This example demonstrates how to use `ReflectionProperty::getRawValue()` to retrieve the direct, un-processed value of a property, bypassing any defined `get` hooks. It contrasts this with `getValue()` which invokes the hook, showing the difference in output.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionproperty.getrawvalue.html#_snippet_0

LANGUAGE: php
CODE:
```
<?php
class Example
{
    public string $tag {
        get => strtolower($this->tag);
    }
}

$example = new Example();
$example->tag = 'PHP';

$rClass = new \ReflectionClass(Example::class);
$rProp = $rClass->getProperty('tag');

// These would go through the get hook, so would produce ""php""
echo $example->tag, PHP_EOL;
echo $rProp->getValue($example), PHP_EOL;

// But this would bypass the hook and produce ""PHP""
echo $rProp->getRawValue($example);
?>
```

----------------------------------------

TITLE: Imagick::resizeImage Method API Documentation
DESCRIPTION: Detailed API documentation for the `Imagick::resizeImage` method, including its signature, parameters with their types and descriptions, return value, and important notes regarding the `bestfit` parameter's behavior across Imagick versions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/imagick.resizeimage.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Imagick::resizeImage
  Description: Scales an image to the desired dimensions with a filter.
  Signature: public Imagick::resizeImage(int $columns, int $rows, int $filter, float $blur, bool $bestfit = false, bool $legacy = false): bool
  Parameters:
    $columns (int): Width of the image.
    $rows (int): Height of the image.
    $filter (int): Refer to the list of filter constants (imagick.constants.filters).
    $blur (float): The blur factor where > 1 is blurry, < 1 is sharp.
    $bestfit (bool, optional, default: false): Optional fit parameter. Note: The behavior of this parameter changed in Imagick 3.0.0. Before 3.0.0, an image smaller than given dimensions would be untouched. In 3.0.0 and later, it scales up to the 'best fit'. If used, both width and height must be given.
    $legacy (bool, optional, default: false): (No description provided in source text).
  Return Value:
    (bool): Returns true on success.
  Changelog:
    PECL imagick 2.1.0: Added optional 'bestfit' parameter. This method now supports proportional scaling by passing zero as either the $columns or $rows parameter.
```

----------------------------------------

TITLE: Example: Get Classes from PHP XMLWriter Extension
DESCRIPTION: This PHP example demonstrates how to instantiate a `ReflectionExtension` object for the 'XMLWriter' extension and then use its `getClasses()` method to retrieve and dump the array of `ReflectionClass` objects representing the classes within that extension.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/reflectionextension.getclasses.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $ext = new ReflectionExtension('XMLWriter');
  var_dump($ext->getClasses());
?>
```

----------------------------------------

TITLE: APIDOC: Yaf_Route_Rewrite Constructor and Related Methods
DESCRIPTION: Detailed API documentation for the `Yaf_Route_Rewrite` class constructor, including its parameters for defining URL matching patterns and routing destinations. This entry also lists related routing methods and classes within the Yaf framework.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-route-rewrite.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Route_Rewrite::__construct
  public Yaf_Route_Rewrite::__construct(string $match, array $route, array $verify = ?)
    - Description: Constructor for Yaf_Route_Rewrite, used to define a rewrite rule.
    - Parameters:
      - $match (string): A pattern used to match a request URI. Supports ':name' for named segments and '*' to match the rest of the URL segments. If the URI doesn't match, Yaf_Route_Rewrite will return false.
      - $route (array): Defines the module, controller, and action destination when the match pattern successfully matches the request URI. Module/controller/action are optional; if not assigned, they default to 'index'.
      - $verify (array): (No description provided in the source text).
    - Return Values: None (constructor).
    - See Also:
      - Yaf_Router::addRoute(): Add new Route into Router
      - Yaf_Router::addConfig(): Add config-defined routes into Router
      - Yaf_Route_Static
      - Yaf_Route_Supervar
      - Yaf_Route_Simple
      - Yaf_Route_Regex
      - Yaf_Route_Map
```

----------------------------------------

TITLE: PHP Ds\Deque::reduce with Initial Value Example
DESCRIPTION: This example demonstrates how to use the `Ds\Deque::reduce()` method in PHP with an initial value. The callback function multiplies the current carry value by the deque's element, starting with an initial carry of 5.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ds-deque.reduce.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$deque = new \Ds\Deque([1, 2, 3]);

$callback = function($carry, $value) {
  return $carry * $value;
};

var_dump($deque->reduce($callback, 5));
?>
```

----------------------------------------

TITLE: PHP EventHttp Server Example with Callbacks
DESCRIPTION: A comprehensive PHP example demonstrating how to set up a simple HTTP server using the `EventHttp` class. It illustrates how to register multiple callbacks for different URIs (`/dump`, `/about`) and a default callback, handle incoming requests, send HTTP replies, and read data from the input buffer.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttp.setcallback.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  /*
  * Simple HTTP server.
  *
  * To test it:
  * 1) Run it on a port of your choice, e.g.:
  * $ php examples/http.php 8010
  * 2) In another terminal connect to some address on this port
  * and make GET or POST request(others are turned off here), e.g.:
  * $ nc -t 127.0.0.1 8010
  * POST /about HTTP/1.0
  * Content-Type: text/plain
  * Content-Length: 4
  * Connection: close
  * (press Enter)
  *
  * It will output
  * a=12
  * HTTP/1.0 200 OK
  * Content-Type: text/html; charset=ISO-8859-1
  * Connection: close
  *
  * 3) See what the server outputs on the previous terminal window.
  */

  function _http_dump($req, $data) {
  static $counter = 0;
  static $max_requests = 2;

  if (++$counter >= $max_requests) {
  echo ""Counter reached max requests $max_requests. Exiting\n"";
  exit();
  }

  echo __METHOD__, "" called\n"";
  echo ""request:""; var_dump($req);
  echo ""data:""; var_dump($data);

  echo ""\n===== DUMP =====\n"";
  echo ""Command:"", $req->getCommand(), PHP_EOL;
  echo ""URI:"", $req->getUri(), PHP_EOL;
  echo ""Input headers:""; var_dump($req->getInputHeaders());
  echo ""Output headers:""; var_dump($req->getOutputHeaders());

  echo ""\n >> Sending reply ..."";
  $req->sendReply(200, ""OK"");
  echo ""OK\n"";

  echo ""\n >> Reading input buffer ...\n"";
  $buf = $req->getInputBuffer();
  while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {
  echo $s, PHP_EOL;
  }
  echo ""No more data in the buffer\n"";
  }

  function _http_about($req) {
  echo __METHOD__, PHP_EOL;
  echo ""URI: "", $req->getUri(), PHP_EOL;
  echo ""\n >> Sending reply ..."";
  $req->sendReply(200, ""OK"");
  echo ""OK\n"";
  }

  function _http_default($req, $data) {
  echo __METHOD__, PHP_EOL;
  echo ""URI: "", $req->getUri(), PHP_EOL;
  echo ""\n >> Sending reply ..."";
  $req->sendReply(200, ""OK"");
  echo ""OK\n"";
  }

  $port = 8010;
  if ($argc > 1) {
  $port = (int) $argv[1];
  }
  if ($port <= 0 || $port > 65535) {
  exit(""Invalid port"");
  }

  $base = new EventBase();
  $http = new EventHttp($base);
  $http->setAllowedMethods(EventHttpRequest::CMD_GET | EventHttpRequest::CMD_POST);

  $http->setCallback(""/dump"", ""_http_dump"", array(4, 8));
  $http->setCallback(""/about"", ""_http_about"");
  $http->setDefaultCallback(""_http_default"", ""custom data value"");

  $http->bind(""0.0.0.0"", 8010);
  $base->loop();
  ?>
```

----------------------------------------

TITLE: GearmanTask::create Method API Documentation
DESCRIPTION: Documents the deprecated `GearmanTask::create` method in the PECL Gearman extension (version <= 0.5.0), detailing its signature, lack of parameters, return values, and the specific version in which it was removed.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/gearmantask.create.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
GearmanTask::create
  Description: Create a task (deprecated)
  Availability: PECL gearman <= 0.5.0
  Signature: public GearmanTask::create(): GearmanTask|false
  Parameters:
    - None
  Return Values:
    - Type: GearmanTask|false
    - Description: A GearmanTask object or false on failure.
  Notes:
    - This method was removed in the 0.6.0 version of the Gearman extension.
```

----------------------------------------

TITLE: Example Usage of RarEntry::getMethod in PHP
DESCRIPTION: Demonstrates how to use `RarEntry::getMethod` in PHP to retrieve the packing method of an entry from a RAR archive. The example opens a RAR file, gets a specific entry, and then prints its method number.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/rarentry.getmethod.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
$rar_file = rar_open('example.rar') or die(""Failed to open Rar archive"");
$entry = rar_entry_get($rar_file, 'Dir/file.txt') or die(""Failed to find such entry"");
echo ""Method number: "" . $entry->getMethod();
?>
```

----------------------------------------

TITLE: XMLWriter::openUri / xmlwriter_open_uri API Reference
DESCRIPTION: Comprehensive API documentation for the PHP XMLWriter functions used to create an XMLWriter instance that writes its output to a specified URI. This includes both the object-oriented method and the procedural function, detailing their signatures, parameters, return values, and important notes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/xmlwriter.openuri.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
XMLWriter::openUri -- xmlwriter_open_uri

Object-oriented style:
public XMLWriter::openUri(string $uri): bool

Procedural style:
xmlwriter_open_uri(string $uri): XMLWriter|false

Description:
Creates a new XMLWriter using `uri` for the output.

Parameters:
  `uri` (string): The URI of the resource for the output (e.g., a file path or 'php://output').

Return Values:
  Object-oriented style: Returns `true` on success or `false` on failure.
  Procedural style: Returns a new XMLWriter instance for later use with the xmlwriter functions on success, or `false` on failure.

Changelog:
  Version 8.0.0: This function now returns an XMLWriter instance on success (previously returned a resource).

Notes:
  On Windows, files opened with this function are locked until the writer is released.

See Also:
  XMLWriter::openMemory() - Create new xmlwriter using memory for string output
```

----------------------------------------

TITLE: PHP LDAP Option Configuration API
DESCRIPTION: This API documentation outlines the parameters used for setting or getting options on an LDAP connection, specifying the connection instance, the various configurable options with their types, and the expected return value.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.ldap-get-option.html#_snippet_1

LANGUAGE: APIDOC
CODE:
```
LDAP Option Parameters:

ldap:
  Type: LDAP\Connection instance
  Description: An LDAP connection instance, typically returned by ldap_connect().

option:
  Type: int | string | array (constant)
  Description: The specific LDAP option to configure or query. Can be one of the following constants:
    - LDAP_OPT_DEREF: int
    - LDAP_OPT_SIZELIMIT: int
    - LDAP_OPT_TIMELIMIT: int
    - LDAP_OPT_NETWORK_TIMEOUT: int
    - LDAP_OPT_PROTOCOL_VERSION: int
    - LDAP_OPT_ERROR_NUMBER: int
    - LDAP_OPT_DIAGNOSTIC_MESSAGE: string
    - LDAP_OPT_REFERRALS: int
    - LDAP_OPT_RESTART: int
    - LDAP_OPT_HOST_NAME: string
    - LDAP_OPT_ERROR_STRING: string
    - LDAP_OPT_MATCHED_DN: string
    - LDAP_OPT_SERVER_CONTROLS: array
    - LDAP_OPT_CLIENT_CONTROLS: array
    - LDAP_OPT_X_KEEPALIVE_IDLE: int (since PHP 7.1)
    - LDAP_OPT_X_KEEPALIVE_PROBES: int (since PHP 7.1)
    - LDAP_OPT_X_KEEPALIVE_INTERVAL: int (since PHP 7.1)
    - LDAP_OPT_X_TLS_CACERTDIR: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_CACERTFILE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_CERTFILE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_CIPHER_SUITE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_CRLCHECK: int (since PHP 7.1)
    - LDAP_OPT_X_TLS_CRL_NONE: int (since PHP 7.1)
    - LDAP_OPT_X_TLS_CRL_PEER: int (since PHP 7.1)
    - LDAP_OPT_X_TLS_CRL_ALL: int (since PHP 7.1)
    - LDAP_OPT_X_TLS_CRLFILE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_DHFILE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_KEYFILE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_PACKAGE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_PROTOCOL_MIN: int (since PHP 7.1)
    - LDAP_OPT_X_TLS_RANDOM_FILE: string (since PHP 7.1)
    - LDAP_OPT_X_TLS_REQUIRE_CERT: int

value:
  Type: mixed
  Description: The value to be set for the specified option. Its type depends on the 'option' parameter.

Return Values:
  Type: bool
  Description: Returns true on success or false on failure.

Changelog:
  - 8.1.0: The 'ldap' parameter now expects an LDAP\Connection instance; previously, a valid 'ldap link' resource was expected.
```

----------------------------------------

TITLE: PHP Example: Getting Collator Attribute Value
DESCRIPTION: This PHP example demonstrates how to use the procedural function `collator_get_attribute()` to retrieve the value of the `Collator::NUMERIC_COLLATION` attribute from a `Collator` object. It includes basic error handling for the function call.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/collator.getattribute.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $coll = collator_create( 'en_CA' );
  $val = collator_get_attribute( $coll, Collator::NUMERIC_COLLATION );
  if( $val === false )
  {
  // Handle error.
  }
?>
```

----------------------------------------

TITLE: PHP Example: List Enchant Broker Backends
DESCRIPTION: This PHP example demonstrates how to initialize an Enchant broker using `enchant_broker_init()` and then use `enchant_broker_describe()` to retrieve and print a list of all available spelling checker backends (providers) with their details.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.enchant-broker-describe.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $r = enchant_broker_init();
  $bprovides = enchant_broker_describe($r);
  echo ""Current broker provides the following backend(s):\n"";
  print_r($bprovides);
?>
```

----------------------------------------

TITLE: PHP EventListener Class API Reference
DESCRIPTION: Comprehensive API documentation for the `EventListener` class, detailing its constants, properties, and methods for managing connection listeners within the PECL event extension.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.eventlistener.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
final class EventListener {
  /* Constants */
  const int OPT_LEAVE_SOCKETS_BLOCKING = 1;
    - Description: By default Libevent turns underlying file descriptors, or sockets, to non-blocking mode. This flag tells Libevent to leave them in blocking mode.
  const int OPT_CLOSE_ON_FREE = 2;
    - Description: If this option is set, the connection listener closes its underlying socket when the EventListener object is freed.
  const int OPT_CLOSE_ON_EXEC = 4;
    - Description: If this option is set, the connection listener sets the close-on-exec flag on the underlying listener socket. See platform documentation for fcntl and FD_CLOEXEC for more information.
  const int OPT_REUSEABLE = 8;
    - Description: By default on some platforms, once a listener socket is closed, no other socket can bind to the same port until a while has passed. Setting this option makes Libevent mark the socket as reusable, so that once it is closed, another socket can be opened to listen on the same port.
  const int OPT_THREADSAFE = 16;
    - Description: Allocate locks for the listener, so that it’s safe to use it from multiple threads.

  /* Properties */
  public readonly int $fd;
    - Description: Numeric file descriptor of the underlying socket. (Added in event-1.6.0).

  /* Methods */
  public __construct(
    EventBase $base,
    callable $cb,
    mixed $data,
    int $flags,
    int $backlog,
    mixed $target
  )
    - Description: Creates a new connection listener associated with an event base.
    - Parameters:
      - $base: The EventBase instance to associate with.
      - $cb: The callback function to be invoked on new connections.
      - $data: User-defined data to pass to the callback.
      - $flags: Bitmask of EventListener::OPT_* constants.
      - $backlog: The maximum length of the queue of pending connections.
      - $target: The target address/socket for the listener.
  public disable(): bool
    - Description: Disables the event connection listener object.
    - Returns: TRUE on success, FALSE on failure.
  public enable(): bool
    - Description: Enables the event connection listener object.
    - Returns: TRUE on success, FALSE on failure.
  public getBase(): void
    - Description: Returns the EventBase object associated with the event listener.
    - Returns: The EventBase instance.
  public static getSocketName(string &$address, mixed &$port = ?): bool
    - Description: Retrieves the current address to which the listener's socket is bound.
    - Parameters:
      - &$address: A string reference to store the address.
      - &$port: A mixed reference to store the port (optional).
    - Returns: TRUE on success, FALSE on failure.
  public setCallback(callable $cb, mixed $arg = null): void
    - Description: Sets the callback function for new connections.
    - Parameters:
      - $cb: The new callback function.
      - $arg: Optional argument to pass to the callback.
    - Returns: void.
  public setErrorCallback(string $cb): void
    - Description: Sets the error callback function for the event listener.
    - Parameters:
      - $cb: The callback function to be invoked on errors.
    - Returns: void.
}
```

----------------------------------------

TITLE: PHP mcrypt_enc_get_block_size API Reference
DESCRIPTION: API documentation for the mcrypt_enc_get_block_size function, used to get the block size of an opened encryption algorithm. This function is deprecated as of PHP 7.1.0 and removed in PHP 7.2.0, and its use is highly discouraged.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mcrypt-enc-get-block-size.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
mcrypt_enc_get_block_size(resource $td): int
  - Description: Gets the blocksize of the opened algorithm.
  - Parameters:
    - $td (resource): The encryption descriptor.
  - Return Values: Returns the block size of the specified algorithm in bytes.
  - Warning: This function has been DEPRECATED as of PHP 7.1.0 and REMOVED as of PHP 7.2.0. Relying on this function is highly discouraged.
```

----------------------------------------

TITLE: PHP Example: Using getimagesizefromstring to Get Image Dimensions
DESCRIPTION: This PHP example demonstrates how to use `getimagesizefromstring()` to retrieve image dimensions from image data read into a string. It also shows a comparison with `getimagesize()` which operates on a file path.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.getimagesizefromstring.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $img = '/path/to/test.png';

  // Open as a file
  $size_info1 = getimagesize($img);

  // Or open as a string
  $data = file_get_contents($img);
  $size_info2 = getimagesizefromstring($data);
?>
```

----------------------------------------

TITLE: PHP Rar: On-the-fly Decompression and Dynamic File Serving
DESCRIPTION: This PHP example demonstrates how to open a RAR archive, retrieve a specific entry based on a GET parameter, and serve its content directly to the client. It includes logic for handling different user agents to set appropriate `Content-Disposition` headers and streams the file content.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/rar.examples.html#_snippet_0

LANGUAGE: PHP
CODE:
```
<?php
      if (!array_key_exists(""i"", $_GET) || !is_numeric($_GET[""i""])) 
   die(""Index unspecified or non-numeric"");
   $index = (int) $_GET[""i""];

   $arch = RarArchive::open(""example.rar"");
   if ($arch === FALSE)
   die(""Cannot open example.rar"");

   $entries = $arch->getEntries();
   if ($entries === FALSE)
   die(""Cannot retrieve entries"");

   if (!array_key_exists($index, $entries))
   die(""No such index: $index"");

   $orfilename = $entries[$index]->getName(); //UTF-8 encoded

   $filesize = $entries[$index]->getUnpackedSize();

   /* you could check HTTP_IF_MODIFIED_SINCE here and compare with
   * $entries[$index]->getFileTime(). You could also send a
   * ""Last modified"" header */

   $fp = $entries[$index]->getStream();
   if ($fp === FALSE)
   die(""Cannot open file with index $index insided the archive."");

   $arch->close(); //no longer needed; stream is independent

   function detectUserAgent() {
   if (!array_key_exists('HTTP_USER_AGENT', $_SERVER))
   return ""Other"";

   $uas = $_SERVER['HTTP_USER_AGENT'];
   if (preg_match(""@Opera/@"", $uas))
   return ""Opera"";
   if (preg_match(""@Firefox/@"", $uas))
   return ""Firefox"";
   if (preg_match(""@Chrome/@"", $uas))
   return ""Chrome"";
   if (preg_match(""@MSIE ([0-9.]+);@"", $uas, $matches)) {
   if (((float) $matches[1]) >= 7.0)
   return ""IE"";
   }

   return ""Other"";
   }

   /*
   * We have 3 options:
   * - For FF and Opera, which support RFC 2231, use that format.
   * - For IE and Chrome, use attwithfnrawpctenclong
   * (http://greenbytes.de/tech/tc2231/#attwithfnrawpctenclong)
   * - For the others, convert to ISO-8859-1, if possible
   */
   $formatRFC2231 = 'Content-Disposition: attachment; filename
```

----------------------------------------

TITLE: PHP Example: Iterating Through dBase Record Fields
DESCRIPTION: This PHP example demonstrates how to use `dbase_numfields` to get the total number of fields in a dBase record and then iterate through them to display their values. It showcases basic record access and field enumeration.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.dbase-numfields.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
    $rec = dbase_get_record($db, $recno);
    $nf = dbase_numfields($db);
    for ($i = 0; $i < $nf; $i++) {
    echo $rec[$i], ""\n"";
    }
?>
```

----------------------------------------

TITLE: MongoDB\BSON\Binary::getData API Reference
DESCRIPTION: Comprehensive API documentation for the MongoDB\BSON\Binary::getData method, including its signature, description, parameters, return values, and potential exceptions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/mongodb-bson-binary.getdata.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
MongoDB\BSON\Binary::getData

Signature:
  final public MongoDB\BSON\Binary::getData(): string

Description:
  Returns the Binary's data.

Parameters:
  This function has no parameters.

Return Values:
  Returns the Binary's data as a string.

Errors/Exceptions:
  Throws MongoDB\Driver\Exception\InvalidArgumentException on argument parsing errors.

See Also:
  MongoDB\BSON\Binary::__construct
  MongoDB\BSON\Binary::getType
```

----------------------------------------

TITLE: PHP cURL Handle Classes Reference
DESCRIPTION: API documentation for various PHP classes representing different types of cURL handles, including standard, multi, share, and persistent share handles, and the CURLStringFile class.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.curl.html#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Class: CurlHandle
  - Description: The CurlHandle class
Class: CurlMultiHandle
  - Description: The CurlMultiHandle class
Class: CurlShareHandle
  - Description: The CurlShareHandle class
Class: CurlSharePersistentHandle
  - Description: The CurlSharePersistentHandle class
Class: CURLStringFile
  - Description: The CURLStringFile class
```

----------------------------------------

TITLE: PHP Measuring Request Time with microtime() and REQUEST_TIME_FLOAT
DESCRIPTION: This example shows how to calculate the time elapsed since the start of a PHP request by subtracting the `$_SERVER[""REQUEST_TIME_FLOAT""]` (which contains the timestamp of the request start) from the current `microtime(true)`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.microtime.html#_snippet_2

LANGUAGE: PHP
CODE:
```
<?php
  // Randomize sleeping time
  usleep(mt_rand(100, 10000));

  // REQUEST_TIME_FLOAT is available in the $_SERVER superglobal array.
  // It contains the timestamp of the start of the request with microsecond precision.
  $time = microtime(true) - $_SERVER[""REQUEST_TIME_FLOAT""];

  echo ""Did nothing in $time seconds\n"";
?>
```

----------------------------------------

TITLE: PHP: phpinfo() Function API Reference
DESCRIPTION: Comprehensive API documentation for the phpinfo() function, including its signature, parameter details, return values, and usage examples. This function is crucial for inspecting PHP's runtime configuration and environment.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.phpinfo.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
phpinfo([int $flags = INFO_ALL]): true

Description:
Outputs a large amount of information about the current state of PHP. This includes PHP compilation options, extensions, version, server information, environment, OS version, paths, configuration options (master and local values), HTTP headers, and the PHP License.

Commonly used to check configuration settings, available predefined variables, and as a valuable debugging tool containing EGPCS (Environment, GET, POST, Cookie, Server) data.

Parameters:
  $flags (int): Optional. A bitwise sum of constants to customize the output.
    - INFO_GENERAL (1): Configuration line, php.ini location, build date, Web Server, System, etc.
    - INFO_CREDITS (2): PHP Credits. (See also phpcresits())
    - INFO_CONFIGURATION (4): Current Local and Master values for PHP directives. (See also ini_get())
    - INFO_MODULES (8): Loaded modules and their respective settings. (See also get_loaded_extensions())
    - INFO_ENVIRONMENT (16): Environment Variable information (also available in $_ENV).
    - INFO_VARIABLES (32): All predefined variables from EGPCS.
    - INFO_LICENSE (64): PHP License information.
    - INFO_ALL (-1): Shows all of the above (default).

Return Values:
  true: Always returns true.

Examples:
<?php
// Show all information, defaults to INFO_ALL
phpinfo();

// Show just the module information.
// phpinfo(8) yields identical results.
phpinfo(INFO_MODULES);
?>

Notes:
- In PHP versions before 5.5, some information (PHP/Zend logos, credits) is disabled if expose_php is 'off'.
- Outputs plain text instead of HTML when used in CLI mode.

See Also:
- phpversion() - Gets the current PHP version
- phpcredits() - Prints out the credits for PHP
- ini_get() - Gets the value of a configuration option
- ini_set() - Sets the value of a configuration option
- get_loaded_extensions() - Returns an array with the names of all modules compiled and loaded
- Predefined Variables
```

----------------------------------------

TITLE: PHP Simple HTTP Server Example with EventHttp
DESCRIPTION: Demonstrates how to set up a basic HTTP server using the `EventHttp` class in PHP. It defines request handlers for specific paths (`/dump`, `/about`) and a default handler, configures allowed HTTP methods, and binds the server to a port.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/eventhttp.construct.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php   /*   * Simple HTTP server.   *   * To test it:   * 1) Run it on a port of your choice, e.g.:   * $ php examples/http.php 8010   * 2) In another terminal connect to some address on this port   * and make GET or POST request(others are turned off here), e.g.:   * $ nc -t 127.0.0.1 8010   * POST /about HTTP/1.0   * Content-Type: text/plain   * Content-Length: 4   * Connection: close   * (press Enter)   *   * It will output   * a=12   * HTTP/1.0 200 OK   * Content-Type: text/html; charset=ISO-8859-1   * Connection: close   *   * $ nc -t 127.0.0.1 8010   * GET /dump HTTP/1.0   * Content-Type: text/plain   * Content-Encoding: UTF-8   * Connection: close   * (press Enter)   *   * It will output:   * HTTP/1.0 200 OK   * Content-Type: text/html; charset=ISO-8859-1   * Connection: close   * (press Enter)   *   * $ nc -t 127.0.0.1 8010   * GET /unknown HTTP/1.0   * Connection: close   *   * It will output:   * HTTP/1.0 200 OK   * Content-Type: text/html; charset=ISO-8859-1   * Connection: close   *   * 3) See what the server outputs on the previous terminal window.   */      function _http_dump($req, $data) {   static $counter = 0;   static $max_requests = 2;      if (++$counter >= $max_requests) {   echo ""Counter reached max requests $max_requests. Exiting\n"";   exit();   }      echo __METHOD__, "" called\n"";   echo ""request:""; var_dump($req);   echo ""data:""; var_dump($data);      echo ""\n===== DUMP =====\n"";   echo ""Command:"", $req->getCommand(), PHP_EOL;   echo ""URI:"", $req->getUri(), PHP_EOL;   echo ""Input headers:""; var_dump($req->getInputHeaders());   echo ""Output headers:""; var_dump($req->getOutputHeaders());      echo ""\n >> Sending reply ..."";   $req->sendReply(200, ""OK"");   echo ""OK\n"";      echo ""\n >> Reading input buffer ...\n"";   $buf = $req->getInputBuffer();   while ($s = $buf->readLine(EventBuffer::EOL_ANY)) {   echo $s, PHP_EOL;   }   echo ""No more data in the buffer\n"";   }      function _http_about($req) {   echo __METHOD__, PHP_EOL;   echo ""URI: "", $req->getUri(), PHP_EOL;   echo ""\n >> Sending reply ..."";   $req->sendReply(200, ""OK"");   echo ""OK\n"";   }      function _http_default($req, $data) {   echo __METHOD__, PHP_EOL;   echo ""URI: "", $req->getUri(), PHP_EOL;   echo ""\n >> Sending reply ..."";   $req->sendReply(200, ""OK"");   echo ""OK\n"";   }      $port = 8010;   if ($argc > 1) {   $port = (int) $argv[1];   }   if ($port <= 0 || $port > 65535) {   exit(""Invalid port"");   }      $base = new EventBase();   $http = new EventHttp($base);   $http->setAllowedMethods(EventHttpRequest::CMD_GET | EventHttpRequest::CMD_POST);      $http->setCallback(""/dump"", ""_http_dump"", array(4, 8));   $http->setCallback(""/about"", ""_http_about"");   $http->setDefaultCallback(""_http_default"", ""custom data value"");      $http->bind(""0.0.0.0"", 8010);   $base->loop();   ?>
```

----------------------------------------

TITLE: PHP OAuthProvider Class API Reference
DESCRIPTION: This section provides a detailed API reference for the PHP OAuthProvider class, including method signatures, parameter descriptions, return values, and related functions for handling OAuth request tokens and problem reporting.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/oauthprovider.isrequesttokenendpoint.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
OAuthProvider::isRequestTokenEndpoint
  Description: Sets whether or not the OAuth provider will issue a request token, thus determining if OAuthProvider::tokenHandler() needs to be called.
  Signature: public OAuthProvider::isRequestTokenEndpoint([bool] $will_issue_request_token): void
  Parameters:
    $will_issue_request_token (bool): A boolean value that sets whether the provider will issue a request token. This directly influences whether the OAuthProvider::tokenHandler() method will be called.
  Return Values:
    void: This method does not return any value.
  See Also:
    OAuthProvider::setRequestTokenPath(): Used to set the path for the request token.
    OAuthProvider::reportProblem(): Used to report a problem within the OAuth process.
```

----------------------------------------

TITLE: PHP UConverter::getSourceType Method API Reference
DESCRIPTION: Comprehensive API documentation for the `UConverter::getSourceType` method in PHP. This method is used to get the source converter type, takes no parameters, and returns an integer, false, or null.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/uconverter.getsourcetype.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
UConverter::getSourceType
  Description: Get the source converter type
  Signature: public UConverter::getSourceType(): int|false|null
  Parameters: None
  Return Values:
    - int: The source converter type as an integer.
    - false: On failure.
    - null: If the source type is not set.
  Availability: PHP 5 >= 5.5.0, PHP 7, PHP 8, PECL >= 3.0.0a1
  Warning: This function is currently not fully documented in the official PHP manual beyond its argument list.
```

----------------------------------------

TITLE: PHP DOMAttr::isId Method API Reference
DESCRIPTION: API documentation for the `DOMAttr::isId` method in PHP, detailing its signature, purpose, and the requirement for document validation against a DTD. It also includes a PHP example demonstrating its usage.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/domattr.isid.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
DOMAttr::isId

Signature:
  public DOMAttr::isId(): bool

Description:
  Checks if the attribute is a defined ID. According to the DOM standard, this requires a DTD which defines the attribute ID to be of type ID. You must validate your document with DOMDocument::validate or DOMDocument::$validateOnParse before using this function.

Parameters:
  This function has no parameters.

Return Values:
  Returns `true` if this attribute is a defined ID, `false` otherwise.

Example Usage:
  ```php
  <?php
      $doc = new DOMDocument;
      // We need to validate our document before referring to the id
      $doc->validateOnParse = true;
      $doc->load('examples/book-docbook.xml');

      // We retrieve the attribute named id of the chapter element
      $attr = $doc->getElementsByTagName('chapter')->item(0)->getAttributeNode('id');

      var_dump($attr->isId()); // bool(true)
  ?>
  ```
```

----------------------------------------

TITLE: Phar::buildFromIterator Method Reference
DESCRIPTION: Detailed API documentation for the `Phar::buildFromIterator` method, including its signature, parameters, return values, and error conditions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/phar.buildfromiterator.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Phar::buildFromIterator
public Phar::buildFromIterator(Traversable $iterator, ?string $baseDirectory = null): array

Description:
Populate a phar archive from an iterator. Two styles of iterators are supported: iterators that map the filename within the phar to the name of a file on disk, and iterators like DirectoryIterator that return SplFileInfo objects. For iterators that return SplFileInfo objects, the second parameter is required.

Note: This method requires the php.ini setting `phar.readonly` to be set to `0` in order to work for Phar objects. Otherwise, a PharException will be thrown.

Parameters:
- iterator (Traversable): Any iterator that either associatively maps phar file to location or returns SplFileInfo objects.
- baseDirectory (?string, default: null): For iterators that return SplFileInfo objects, the portion of each file's full path to remove when adding to the phar archive.

Return Values:
Phar::buildFromIterator() returns an associative array mapping internal path of file to the full path of the file on the filesystem.

Errors/Exceptions:
- UnexpectedValueException: When the iterator returns incorrect values, such as an integer key instead of a string.
- BadMethodCallException: When an SplFileInfo-based iterator is passed without a `baseDirectory` parameter.
- PharException: If there were errors saving the phar archive.

Changelog:
- 8.1.0: Phar::buildFromIterator() no longer returns `false`.
- 8.0.0: `baseDirectory` is now nullable.
```

----------------------------------------

TITLE: Yaf_Route_Simple Class API
DESCRIPTION: Documentation for the Yaf_Route_Simple class, which handles basic routing within the Yaf framework. It includes the constructor and the main routing method.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/book.yaf.html#_snippet_26

LANGUAGE: APIDOC
CODE:
```
Yaf_Route_Simple:
  __construct(): Yaf_Route_Simple constructor
  route(): Route a request
```

----------------------------------------

TITLE: PHP Example for ob_iconv_handler Usage
DESCRIPTION: This PHP example demonstrates how to use `ob_iconv_handler` in conjunction with `iconv_set_encoding` to set up output buffering for character encoding conversion. It configures internal and output encodings before starting the output buffer.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.ob-iconv-handler.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  iconv_set_encoding(""internal_encoding"", ""UTF-8"");
  iconv_set_encoding(""output_encoding"", ""ISO-8859-1"");
  ob_start(""ob_iconv_handler""); // start output buffering
  ?>
```

----------------------------------------

TITLE: SolrQuery::getTermsPrefix Method API Reference
DESCRIPTION: Detailed API documentation for the SolrQuery::getTermsPrefix method. This method retrieves the prefix string that restricts Solr query matches to terms starting with that prefix. It is part of the PECL solr extension.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/solrquery.gettermsprefix.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SolrQuery::getTermsPrefix()
  Description: Returns the prefix to which matching terms must be restricted. This will restrict matches to only terms that start with the prefix.
  Signature: public SolrQuery::getTermsPrefix(): string
  Parameters: None
  Return Value:
    - type: string
    - description: The term prefix string on success.
    - null: If no prefix has been set.
  Availability: PECL solr >= 0.9.2
```

----------------------------------------

TITLE: PHP sin() Function API Reference
DESCRIPTION: Detailed API documentation for the PHP `sin()` function, including its signature, parameter descriptions, return values, and related mathematical functions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.sin.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
sin(float $num): float
  - Calculates the sine of the $num parameter. The $num parameter is in radians.
  - Parameters:
    - $num: A value in radians.
  - Returns: The sine of $num.
  - See Also:
    - asin(): Arc sine
    - sinh(): Hyperbolic sine
    - cos(): Cosine
    - tan(): Tangent
    - deg2rad(): Converts the number in degrees to the radian equivalent
```

----------------------------------------

TITLE: QuickHashIntStringHash::get Method API Reference
DESCRIPTION: Detailed API documentation for the `QuickHashIntStringHash::get` method, which retrieves a value from a QuickHashIntStringHash instance using its key. It specifies the method signature, parameter types, return types, and behavior for both existing and non-existing keys.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/quickhashintstringhash.get.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
QuickHashIntStringHash::get
public QuickHashIntStringHash::get(int $key): mixed

Description: This method retrieves a value from the hash by its key.

Parameters:
  key: The key of the entry to retrieve (type: int).

Return Values:
  The value if the key exists (type: mixed), or null if the key wasn't part of the hash.
```

----------------------------------------

TITLE: PHP Example: Getting and Setting Socket Options
DESCRIPTION: This PHP example demonstrates how to create a listening socket, set a socket option (SO_LINGER) using an associative array, and then retrieve another socket option (SO_REUSEADDR) using socket_get_option().
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.socket-get-option.html#_snippet_5

LANGUAGE: PHP
CODE:
```
<?php
  $socket = socket_create_listen(1223);

  $linger = array('l_linger' => 1, 'l_onoff' => 1);
  socket_set_option($socket, SOL_SOCKET, SO_LINGER, $linger);

  var_dump(socket_get_option($socket, SOL_SOCKET, SO_REUSEADDR));
?>
```

----------------------------------------

TITLE: PHP Example: Retrieving Calendar Type with IntlCalendar::getType
DESCRIPTION: Demonstrates how to use `IntlCalendar::getType` to get the calendar type from different `IntlCalendar` instances, including an instance created with a specific calendar type and a `IntlGregorianCalendar` instance.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/intlcalendar.gettype.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  ini_set('date.timezone', 'Europe/Lisbon');
  ini_set('intl.default_locale', 'en_US');

  $cal = IntlCalendar::createInstance(NULL, '@calendar=ethiopic-amete-alem');
  var_dump($cal->getType());

  $cal = new IntlGregorianCalendar();
  var_dump($cal->getType());
```

----------------------------------------

TITLE: Parle\Parser Class API Reference
DESCRIPTION: Comprehensive API documentation for the `Parle\Parser` class, including its constants, properties, and methods for defining and processing parsing rules within the Parle extension.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/class.parle-parser.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
class Parle\Parser {
  // Constants
  const int ACTION_ERROR = 0;
  const int ACTION_SHIFT = 1;
  const int ACTION_REDUCE = 2;
  const int ACTION_GOTO = 3;
  const int ACTION_ACCEPT = 4;
  const int ERROR_SYNTAX = 0;
  const int ERROR_NON_ASSOCIATIVE = 1;
  const int ERROR_UNKNOWN_TOKEN = 2;

  // Properties
  public int $action = 0; // Current parser action that matches one of the action class constants, readonly.
  public int $reduceId = 0;

  // Methods
  public advance(): void
  public build(): void
  public consume(string $data, Parle\Lexer $lexer): void
    - Parameters:
      - $data: The input data string to consume.
      - $lexer: An instance of Parle\Lexer to provide the token stream.
  public dump(): void
  public errorInfo(): Parle\ErrorInfo
  public left(string $tok): void
    - Parameters:
      - $tok: The token string to set as left-associative.
  public nonassoc(string $tok): void
    - Parameters:
      - $tok: The token string to set as non-associative.
  public precedence(string $tok): void
    - Parameters:
      - $tok: The token string to set precedence for.
  public push(string $name, string $rule): int
    - Parameters:
      - $name: The name of the rule.
      - $rule: The rule definition string.
    - Returns: An integer identifier for the pushed rule.
  public reset(int $tokenId = ?): void
    - Parameters:
      - $tokenId: Optional. The token ID to reset to.
  public right(string $tok): void
    - Parameters:
      - $tok: The token string to set as right-associative.
  public sigil(int $idx): string
    - Parameters:
      - $idx: The index of the sigil.
    - Returns: The sigil string at the given index.
  public sigilCount(): int
    - Returns: The total count of sigils.
  public sigilName(int $idx): string
    - Parameters:
      - $idx: The index of the sigil.
    - Returns: The name of the sigil at the given index.
  public token(string $tok): void
    - Parameters:
      - $tok: The token string to define.
  public tokenId(string $tok): int
    - Parameters:
      - $tok: The token string to get the ID for.
    - Returns: The integer ID of the token.
  public trace(): string
    - Returns: A string containing the parser's trace information.
  public validate(string $data, Parle\Lexer $lexer): bool
    - Parameters:
      - $data: The input data string to validate.
      - $lexer: An instance of Parle\Lexer to provide the token stream.
    - Returns: True if validation is successful, false otherwise.
}
```

----------------------------------------

TITLE: PHP Get Free Disk Space Example
DESCRIPTION: This PHP example demonstrates how to use the `disk_free_space()` function to retrieve the amount of free space on different disk partitions, including root ('/') and Windows drives ('C:', 'D:').
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.disk-free-space.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  // $df contains the number of bytes available on ""/""
  $df = disk_free_space(""/"");

  // On Windows:
  $df_c = disk_free_space(""C:"");
  $df_d = disk_free_space(""D:"");
?>
```

----------------------------------------

TITLE: SeasLog::__construct API Reference
DESCRIPTION: Documents the constructor for the SeasLog class, providing its signature and parameter details. It notes that the function is currently not fully documented beyond its argument list.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/seaslog.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SeasLog::__construct
(PECL seaslog >=1.0.0)

Description: public SeasLog::__construct()
Warning: This function is currently not documented; only its argument list is available.
Parameters: This function has no parameters.
```

----------------------------------------

TITLE: PHP Get Timezone ID (Object-Oriented Style)
DESCRIPTION: Illustrates how to obtain and modify the timezone ID of an `IntlDateFormatter` object using the object-oriented `getTimezoneId()` method. The example initializes a formatter, displays its timezone, and then updates it using `setTimezone()`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/intldateformatter.gettimezoneid.html#_snippet_2

LANGUAGE: PHP
CODE:
```
<?php
$fmt = new IntlDateFormatter(
  'en_US',
  IntlDateFormatter::FULL,
  IntlDateFormatter::FULL,
  'America/Los_Angeles',
  IntlDateFormatter::GREGORIAN
);
echo 'timezone_id of the formatter is: ' . $fmt->getTimezoneId() . ""\n"";
$fmt->setTimezone('Europe/Madrid');
echo 'Now timezone_id of the formatter is: ' . $fmt->getTimezoneId();
?>
```

----------------------------------------

TITLE: QuickHashIntStringHash::update Method API Reference
DESCRIPTION: Detailed API reference for the `QuickHashIntStringHash::update` method, including its signature, parameter descriptions, and return values for updating entries in an integer-to-string hash.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/quickhashintstringhash.update.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
QuickHashIntStringHash::update(int $key, string $value): bool
  Description: This method updates an entry with a new value, and returns whether the entry was updated. If there are duplicate keys, only the first found element will get an updated value. Use QuickHashIntStringHash::CHECK_FOR_DUPES during hash creation to prevent duplicate keys from being part of the hash.
  Parameters:
    $key (int): The key of the entry to update.
    $value (string): The new value for the entry. If a non-string is passed, it will be converted to a string automatically if possible.
  Returns:
    bool: true when the entry was found and updated, and false if the entry was not part of the hash already.
```

----------------------------------------

TITLE: PHP Example: Get ISP Name for a Host
DESCRIPTION: This PHP example demonstrates how to use the `geoip_isp_by_name` function to retrieve and print the ISP name for a specified hostname, such as 'www.example.com'. It includes a conditional check to ensure an ISP name was found.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.geoip-isp-by-name.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $isp = geoip_isp_by_name('www.example.com');
  if ($isp) {
  echo 'This host IP is from ISP: ' . $isp;
  }
?>
```

----------------------------------------

TITLE: PHP Iterator::key Method API Reference
DESCRIPTION: Comprehensive API documentation for the `key` method of the PHP `Iterator` interface, detailing its functionality, usage, and behavior across PHP 5, 7, and 8.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/iterator.key.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Iterator::key
  Description: Returns the key of the current element.
  Signature: public Iterator::key(): mixed
  Parameters: This function has no parameters.
  Return Values:
    - Type: mixed
    - Description: Returns scalar on success, or null on failure.
  Errors/Exceptions:
    - Issues E_NOTICE on failure.
```

----------------------------------------

TITLE: PHP mysql_affected_rows Example with UPDATE and Transactions
DESCRIPTION: Illustrates the use of `mysql_affected_rows()` after an `UPDATE` query within a transaction. This example highlights that the function should be called immediately after the DML query and before the `COMMIT` statement to get accurate affected row counts.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mysql-affected-rows.html#_snippet_2

LANGUAGE: PHP
CODE:
```
<?php
  $link = mysql_connect('localhost', 'mysql_user', 'mysql_password');
  if (!$link) {
  die('Could not connect: ' . mysql_error());
  }
  mysql_select_db('mydb');

  /* Update records */
  mysql_query(""UPDATE mytable SET used=1 WHERE id < 10"");
  printf (""Updated records: %d\n"", mysql_affected_rows());
  mysql_query(""COMMIT"");
?>
```

----------------------------------------

TITLE: PHP uopz_flags Function API Reference
DESCRIPTION: Detailed API documentation for the `uopz_flags` function, which allows runtime manipulation of ZEND_ACC_ flags for PHP functions or classes. It supports both getting and setting flags, and provides different signatures for function-level and class-level flag management.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.uopz-flags.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
uopz_flags(string $function, int $flags = PHP_INT_MAX): int
uopz_flags(string $class, string $function, int $flags = PHP_INT_MAX): int

Description:
Get or set the flags on a class or function entry at runtime.

Parameters:
  class (string): The name of a class.
  function (string): The name of the function. If `class` is given and an empty string is passed as `function`, uopz_flags() gets or sets the flags of the class entry.
  flags (int): A valid set of ZEND_ACC_ flags. If omitted, uopz_flags() acts as getter.

Return Values:
  If setting, returns old flags, else returns flags.

Errors/Exceptions:
  As of PHP 7.4.0, if the parameter `flags` is passed, uopz_flags() throws a RuntimeException, if OPcache is enabled, and the class entry of `class` or the function entry of `function` is immutable.

Changelog:
  PECL uopz 5.0.0: The `flags` parameter is now optional. Formerly, ZEND_ACC_FETCH had to be passed to use uopz_flags() as getter.
```

----------------------------------------

TITLE: OCILob::append Method API Reference
DESCRIPTION: Comprehensive API documentation for the `OCILob::append` method, which appends data from one large object to another. It includes the method signature, parameter details, return values, and important notes regarding buffering requirements for successful operation.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/ocilob.append.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
OCILob::append
  Description: Appends data from the large object to the end of another large object.
  Signature: public OCILob::append(OCILob $from): bool
  Parameters:
    $from (OCILob): The OCILob instance from which data will be copied.
  Return Values:
    bool: Returns true on success or false on failure.
  Notes:
    Writing to the large object with this method will fail if buffering was previously enabled.
    Buffering must be disabled before appending. You may need to flush buffers with OCILob::flush before disabling buffering.
  Related Methods:
    OCILob::flush
    OCILob::setBuffering
    OCILob::getBuffering
```

----------------------------------------

TITLE: PDO::errorCode Method API Reference
DESCRIPTION: Comprehensive API documentation for the `PDO::errorCode` method, including its signature, parameters, return values, and crucial notes on its behavior and limitations.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/pdo.errorcode.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
PDO::errorCode
public PDO::errorCode(): ?string

Description:
Fetch the SQLSTATE associated with the last operation on the database handle.

Parameters:
This function has no parameters.

Return Values:
Returns an SQLSTATE, a five characters alphanumeric identifier defined in the ANSI SQL-92 standard.
- A class value of '01' indicates a warning and is accompanied by a return code of SQL_SUCCESS_WITH_INFO.
- Class values other than '01', except for 'IM', indicate an error.
- The class 'IM' is specific to warnings and errors that derive from the implementation of PDO (or ODBC).
- The subclass value '000' in any class indicates that there is no subclass for that SQLSTATE.
- Returns null if no operation has been run on the database handle.

Important Notes:
- PDO::errorCode() only retrieves error codes for operations performed directly on the database handle.
- It will NOT reflect errors on PDOStatement objects created via PDO::prepare() or PDO::query(). For those, use PDOStatement::errorCode().

See Also:
- PDO::errorInfo() - Fetch extended error information associated with the last operation on the database handle.
- PDOStatement::errorCode() - Fetch the SQLSTATE associated with the last operation on the statement handle.
- PDOStatement::errorInfo() - Fetch extended error information associated with the last operation on the statement handle.
```

----------------------------------------

TITLE: SimpleXMLElement::getName Method API Documentation
DESCRIPTION: Comprehensive API documentation for the `SimpleXMLElement::getName` method, detailing its signature, purpose, lack of parameters, and the string return value representing the name of the XML tag.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/simplexmlelement.getname.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
SimpleXMLElement::getName
public SimpleXMLElement::getName(): string

Description:
Gets the name of the XML element.

Parameters:
This function has no parameters.

Return Values:
The `getName` method returns as a string the name of the XML tag referenced by the SimpleXMLElement object.
```

----------------------------------------

TITLE: PHP forward_static_call Function API Reference
DESCRIPTION: Detailed API documentation for the `forward_static_call` function in PHP. It specifies the function signature, describes the `callback` and `args` parameters, explains the return values, and lists related functions for calling user-defined functions or methods.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.forward-static-call.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
forward_static_call(callable $callback, mixed ...$args): mixed
  - Calls a user defined function or method given by the `callback` parameter, with the following arguments. This function must be called within a method context, it can't be used outside a class. It uses the late static binding.
  - Parameters:
    - callback: The function or method to be called. This parameter may be an array, with the name of the class, and the method, or a string, with a function name.
    - args: Zero or more parameters to be passed to the function.
  - Return Values: Returns the function result, or `false` on error.

See Also:
  - forward_static_call_array(): Call a static method and pass the arguments as array
  - call_user_func_array(): Call a callback with an array of parameters
  - call_user_func(): Call the callback given by the first parameter
  - is_callable(): Verify that a value can be called as a function from the current scope
```

----------------------------------------

TITLE: PHP EvIdle Watcher Constructor API Reference
DESCRIPTION: Comprehensive API documentation for the EvIdle::__construct method, including its signature, parameter details, and related functions. This constructor initializes an idle watcher that automatically starts.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/evidle.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
EvIdle::__construct
  (PECL ev >= 0.2.0)
  Signature: public EvIdle::__construct(callable $callback, mixed $data = ?, int $priority = ?)
  Description: Constructs the EvIdle watcher object and starts the watcher automatically.
  Parameters:
    $callback (callable): A callback function to be invoked when the watcher is active. Refer to Watcher callbacks for details.
    $data (mixed, optional): Custom data to be associated with this watcher instance. Defaults to null.
    $priority (int, optional): The priority of the watcher. Refer to Watcher priority constants for valid values. Defaults to 0.
  See Also:
    EvIdle::createStopped() - Creates an instance of a stopped EvIdle watcher object, allowing manual starting.
    EvLoop::idle() - Creates an EvIdle watcher object associated with the current event loop instance.
```

----------------------------------------

TITLE: PHP usleep() Function Reference
DESCRIPTION: Detailed API documentation for the `usleep()` function, including its signature, parameters, return values, and important usage notes regarding its limitations and related functions.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.usleep.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
usleep([int] $microseconds): [void]
  - Delays program execution for the given number of microseconds.
  - Parameters:
    - $microseconds (int): Halt time in microseconds. A microsecond is one millionth of a second.
      - Note: Values larger than 1000000 (i.e. sleeping for more than a second) may not be supported by the operating system. Use sleep() instead.
      - Note: The sleep may be lengthened slightly (i.e. may be longer than microseconds) by any system activity or by the time spent processing the call or by the granularity of system timers.
  - Return Values: No value is returned.
  - See Also:
    - sleep() - Delay execution
    - time_nanosleep() - Delay for a number of seconds and nanoseconds
    - time_sleep_until() - Make the script sleep until the specified time
    - set_time_limit() - Limits the maximum execution time
```

----------------------------------------

TITLE: PHP uopz_flags Example: Setting and Getting Function Flags
DESCRIPTION: Demonstrates how to use `uopz_flags` to retrieve and modify the access flags (e.g., ZEND_ACC_PRIVATE, ZEND_ACC_STATIC) of a class method at runtime. It shows how to get current flags, bitwise OR new flags, and verify the changes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.uopz-flags.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  class Test {
  public function method() {
  return __CLASS__;
  }
  }

  $flags = uopz_flags(""Test"", ""method"");

  var_dump((bool) (uopz_flags(""Test"", ""method"") & ZEND_ACC_PRIVATE));
  var_dump((bool) (uopz_flags(""Test"", ""method"") & ZEND_ACC_STATIC));

  var_dump(uopz_flags(""Test"", ""method"", $flags|ZEND_ACC_STATIC|ZEND_ACC_PRIVATE));

  var_dump((bool) (uopz_flags(""Test"", ""method"") & ZEND_ACC_PRIVATE));
  var_dump((bool) (uopz_flags(""Test"", ""method"") & ZEND_ACC_STATIC));
?>
```

----------------------------------------

TITLE: Initialize and Configure PHP OAuthProvider
DESCRIPTION: This PHP example demonstrates how to initialize an `OAuthProvider` object, set up custom callback functions for consumer, timestamp/nonce, and token handling, and configure request parameters and paths before checking an OAuth request. It includes error handling for `OAuthException`.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/oauthprovider.construct.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
   try {
      $op = new OAuthProvider();
      // Uses user-defined callback functions
   $op->consumerHandler(array($this, 'lookupConsumer'));
   $op->timestampNonceHandler(array($this, 'timestampNonceChecker'));
   $op->tokenHandler(array($this, 'myTokenHandler'));

      // Ignore the foo_uri parameter
   $op->setParam('foo_uri', NULL);

      // No token needed for this end point
   $op->setRequestTokenPath('/v1/oauth/request_token');

      $op->checkOAuthRequest();

      } catch (OAuthException $e) {
      echo OAuthProvider::reportProblem($e);
   }
   ?>
```

----------------------------------------

TITLE: PHP Example: Retrieving ASN with geoip_asnum_by_name
DESCRIPTION: This PHP example demonstrates how to use the `geoip_asnum_by_name` function to retrieve and display the Autonomous System Number (ASN) for a given hostname, including basic error handling.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.geoip-asnum-by-name.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $asn = geoip_asnum_by_name('www.example.com');

  if ($asn) {
    echo 'The ASN is: ' . $asn;
  }
?>
```

----------------------------------------

TITLE: PHP Example: Get Supported Key Sizes for Rijndael-256
DESCRIPTION: This PHP example demonstrates how to use `mcrypt_enc_get_supported_key_sizes` to retrieve the supported key sizes for the 'rijndael-256' algorithm. It opens a mcrypt module and then dumps the array of supported key sizes.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/function.mcrypt-enc-get-supported-key-sizes.html#_snippet_1

LANGUAGE: PHP
CODE:
```
<?php
  $td = mcrypt_module_open('rijndael-256', '', 'ecb', '');
  var_dump(mcrypt_enc_get_supported_key_sizes($td));
?>
```

----------------------------------------

TITLE: Yaf_Request_Simple Class Constructor API
DESCRIPTION: Documents the `__construct` method of the `Yaf_Request_Simple` class, which initializes a simple request object. It outlines the method signature and its expected parameters, noting that the official documentation is incomplete.
SOURCE: https://github.com/fmatsos/php-doc/blob/main/doc/yaf-request-simple.construct.html#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Yaf_Request_Simple::__construct
  Description: Constructor for the Yaf_Request_Simple class, used to initialize a simple request object.
  Signature: public Yaf_Request_Simple::__construct(string $method = ?, string $module = ?, string $controller = ?, string $action = ?, array $params = ?)
  Parameters:
    $method (string): The HTTP method for the request (e.g., 'GET', 'POST'). Optional.
    $module (string): The module name for the request. Optional.
    $controller (string): The controller name for the request. Optional.
    $action (string): The action name for the request. Optional.
    $params (array): An array of additional parameters for the request. Optional.
  Return Values: None (constructors do not return a value).
  Notes: This function is currently not fully documented; only its argument list is available.
```","context7 mcp",""