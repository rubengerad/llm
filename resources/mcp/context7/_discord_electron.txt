"electron","TITLE: Installing Electron as Development Dependency - npm
DESCRIPTION: This command installs Electron as a development dependency in your current project. This is the preferred method for most applications, ensuring the Electron version is tracked with the project.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install electron --save-dev
```

----------------------------------------

TITLE: Initializing Electron BrowserWindow and Loading Content (Javascript)
DESCRIPTION: Demonstrates creating a new Electron BrowserWindow instance with specified dimensions. It shows how to load content either from a remote URL using `loadURL('https://...')` or from a local HTML file using `loadURL('file://...')`. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// In the main process.
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 600 })

// Load a remote URL
win.loadURL('https://github.com')

// Or load a local HTML file
win.loadURL(`file://${__dirname}/app/index.html`)
```

----------------------------------------

TITLE: Installing Latest Stable Electron via npm (sh)
DESCRIPTION: This command installs the most recent stable release of Electron into the current project. It saves the dependency to the `devDependencies` section of the `package.json` file. Requires Node.js and npm installed.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/electron-versioning.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save-dev electron
```

----------------------------------------

TITLE: Creating a Basic Electron BrowserWindow Instance JS
DESCRIPTION: This snippet shows the basic steps to create a new `BrowserWindow` instance with specified dimensions and load a URL into it. It demonstrates requiring the `BrowserWindow` class from the `electron` module and using the `new` keyword to create an instance, followed by loading content using `win.loadURL()`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
// In this example `win` is our instance
const win = new BrowserWindow({ width: 800, height: 600 })
win.loadURL('https://github.com')
```

----------------------------------------

TITLE: Exposing API with contextBridge in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to use `contextBridge.exposeInMainWorld` within an isolated preload script to expose a function (`doThing`) to the main world's `window` object under the key `electron`. The exposed function then sends an IPC message via `ipcRenderer.send`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/context-bridge.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Preload (Isolated World)
const { contextBridge, ipcRenderer } = require('electron')

contextBridge.exposeInMainWorld(
  'electron',
  {
    doThing: () => ipcRenderer.send('do-a-thing')
  }
)
```

----------------------------------------

TITLE: Invoking Main Process Handler (Renderer & Main)
DESCRIPTION: This snippet demonstrates the asynchronous request-response pattern using `ipcRenderer.invoke` in the renderer process and `ipcMain.handle` in the main process. The renderer sends a message and waits for a promise to resolve with the result from the main process handler.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/ipc-renderer.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Renderer process
ipcRenderer.invoke('some-name', someArgument).then((result) => {
  // ...
})

// Main process
ipcMain.handle('some-name', async (event, someArgument) => {
  const result = await doSomeWork(someArgument)
  return result
})
```

----------------------------------------

TITLE: Add Start Script to package.json for Electron
DESCRIPTION: This JSON snippet modifies the package.json file to include a 'start' script. This script is configured to execute the Electron framework with the current directory (.), telling Electron to look for the main script defined in the 'main' field. This allows running the application using `npm start`.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_5

LANGUAGE: json
CODE:
```
{
    ""name"": ""my-electron-app"",
    ""version"": ""0.1.0"",
    ""main"": ""main.js"",
    ""scripts"": {
        ""start"": ""electron .""
    }
}
```

----------------------------------------

TITLE: Initialize Electron Project in Shell
DESCRIPTION: These shell commands create a new directory for the project, initialize a Node.js project with default settings (creating package.json), and install Electron as a development dependency. This sets up the basic project structure and includes the Electron framework.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_1

LANGUAGE: sh
CODE:
```
mkdir my-electron-app && cd my-electron-app
npm init -y
npm i --save-dev electron
```

----------------------------------------

TITLE: Define Main Electron Script in JavaScript
DESCRIPTION: This JavaScript code defines the main process script for an Electron application. It imports necessary modules, creates a browser window to load an HTML file, manages the application's lifecycle events (ready, window-all-closed, activate), and includes dev tools for debugging. Node.js integration is enabled in the window's web preferences.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_2

LANGUAGE: js
CODE:
```
const { app, BrowserWindow } = require('electron')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true
    }
  })

  win.loadFile('index.html')
  win.webContents.openDevTools()
}

app.whenReady().then(createWindow)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: Showing Electron BrowserWindow Gracefully (Javascript)
DESCRIPTION: Creates a BrowserWindow initially hidden (`show: false`) and waits for the `ready-to-show` event before making it visible. This prevents a visual flash as the page loads incrementally. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ show: false })
win.once('ready-to-show', () => {
  win.show()
})
```

----------------------------------------

TITLE: Updating Electron to Latest Stable via npm (sh)
DESCRIPTION: This command updates the Electron dependency in an existing project to the absolute latest stable version published on npm. It also saves this version specification in `devDependencies`. Requires Node.js, npm, and an existing `package.json`.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/electron-versioning.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install --save-dev electron@latest
```

----------------------------------------

TITLE: Creating Sandboxed BrowserWindow in Electron
DESCRIPTION: This snippet demonstrates how to create a new BrowserWindow instance with the sandbox feature enabled by setting the `sandbox` property to `true` within the `webPreferences` object. This disables Node.js integration in the renderer process for enhanced security.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/sandbox-option.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
let win
app.whenReady().then(() => {
  win = new BrowserWindow({
    webPreferences: {
      sandbox: true
    }
  })
  win.loadURL('http://google.com')
})
```

----------------------------------------

TITLE: Exposing API with Context Isolation using contextBridge JavaScript
DESCRIPTION: This is the recommended method for safely exposing APIs from a preload script when context isolation is enabled. It uses the `electron.contextBridge` module's `exposeInMainWorld` method to create a secure bridge, allowing the website to access the exposed methods on the `window` object without direct access to the preload context.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/context-isolation.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { contextBridge } = require('electron')

contextBridge.exposeInMainWorld('myAPI', {
  doAThing: () => {}
})
```

----------------------------------------

TITLE: Handling IPC Invoke in Main Process - JavaScript
DESCRIPTION: Sets up a handler in the Electron Main process to respond to an `ipcRenderer.invoke` call from a Renderer process. It listens on the 'perform-action' channel and executes code on behalf of the renderer, providing a mechanism for safe bidirectional communication.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_11

LANGUAGE: javascript
CODE:
```
// In the Main process
const { ipcMain } = require('electron')

ipcMain.handle('perform-action', (event, ...args) => {
  // ... do actions on behalf of the Renderer
})
```

----------------------------------------

TITLE: Limiting WebContents Navigation in Electron JavaScript
DESCRIPTION: Demonstrates how to handle the `will-navigate` event to prevent navigation to untrusted URLs. It uses Node's built-in `url` module to parse the navigation URL and checks if its origin matches an allowed list, calling `event.preventDefault()` for any unauthorized navigation attempts.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const URL = require('url').URL

app.on('web-contents-created', (event, contents) => {
  contents.on('will-navigate', (event, navigationUrl) => {
    const parsedUrl = new URL(navigationUrl)

    if (parsedUrl.origin !== 'https://example.com') {
      event.preventDefault()
    }
  })
})
```

----------------------------------------

TITLE: Invoking IPC in Renderer Process - JavaScript
DESCRIPTION: Initiates an asynchronous request from the Electron Renderer process to the Main process using `ipcRenderer.invoke`. It sends arguments via the 'perform-action' channel and expects a response from the corresponding `ipcMain.handle` listener in the Main process.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_12

LANGUAGE: javascript
CODE:
```
// In the Renderer process
const { ipcRenderer } = require('electron')

ipcRenderer.invoke('perform-action', ...args)
```

----------------------------------------

TITLE: Writing Plain Text to Electron Clipboard (JavaScript)
DESCRIPTION: This snippet demonstrates writing a simple string variable to the default system clipboard using the `clipboard.writeText()` method. It shows the fundamental operation of placing plain text content onto the clipboard.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const text = 'hello i am a bit of text!'
clipboard.writeText(text)
```

----------------------------------------

TITLE: Disabling Remote Module in Webview Tag in HTML (Good Example)
DESCRIPTION: Shows the secure way to disable the `remote` module for a `<webview>` tag by setting the `enableremotemodule=""false""` attribute in HTML. This is the recommended approach when the webview loads untrusted content to prevent sandbox escapes, especially since it's the default behavior in recent Electron versions.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_10

LANGUAGE: HTML
CODE:
```
<!-- Good -->
<webview enableremotemodule=""false"" src=""page.html""></webview>
```

----------------------------------------

TITLE: Opening Renderer Process DevTools Electron JavaScript
DESCRIPTION: This snippet demonstrates how to programmatically open the Chromium Developer Tools for a specific BrowserWindow instance. It requires the 'electron' module and uses the `openDevTools()` method on the `webContents` property of the window object. This is the primary method for debugging individual renderer processes like BrowserWindows, BrowserViews, and WebViews.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-debugging.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow()
win.webContents.openDevTools()
```

----------------------------------------

TITLE: Initial package.json Configuration for Electron
DESCRIPTION: This JSON snippet shows the basic structure of a package.json file for an Electron application. It defines the project name, version, and the main entry point script (main.js), which is required for Electron to know where to start the application.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_4

LANGUAGE: json
CODE:
```
{
    ""name"": ""my-electron-app"",
    ""version"": ""0.1.0"",
    ""main"": ""main.js""
}
```

----------------------------------------

TITLE: Initializing Electron Main Process with Destructuring JavaScript
DESCRIPTION: Shows how to require specific modules (`app`, `BrowserWindow`) from the `electron` package using JavaScript destructuring assignment. The script initializes an Electron app, waits for readiness, creates a new browser window, and loads a URL.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/synopsis.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win

app.whenReady().then(() => {
  win = new BrowserWindow()
  win.loadURL('https://github.com')
})
```

----------------------------------------

TITLE: Handling window-all-closed Event in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to listen for the 'window-all-closed' event on the Electron `app` object. When all application windows are closed, the callback function is executed, which explicitly calls `app.quit()` to terminate the application. This is a common pattern to ensure the app exits when the last window is closed, especially on platforms other than macOS where this is the default behavior.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.on('window-all-closed', () => {
  app.quit()
})
```

----------------------------------------

TITLE: Opening External URL using Electron Shell
DESCRIPTION: This snippet demonstrates how to use the `shell` module to open a specified URL in the user's default web browser. It requires importing the `shell` object from the Electron module. The input is a URL string, and the expected output is the default browser opening with the given URL.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/shell.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { shell } = require('electron')

shell.openExternal('https://github.com')
```

----------------------------------------

TITLE: Implementing Single Instance Application - Electron app - JavaScript
DESCRIPTION: This snippet shows the recommended pattern for implementing a single instance application using `app.requestSingleInstanceLock`. It checks if the current instance obtained the lock; if not, it quits. If the lock is obtained, it listens for the `second-instance` event to focus the main window when another instance is launched.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
let myWindow = null

const gotTheLock = app.requestSingleInstanceLock()

if (!gotTheLock) {
  app.quit()
} else {
  app.on('second-instance', (event, commandLine, workingDirectory) => {
    // Someone tried to run a second instance, we should focus our window.
    if (myWindow) {
      if (myWindow.isMinimized()) myWindow.restore()
      myWindow.focus()
    }
  })

  // Create myWindow, load the rest of the app, etc...
  app.whenReady().then(() => {
    myWindow = createWindow()
  })
}
```

----------------------------------------

TITLE: Disabling Remote Module in BrowserWindow in Electron JavaScript (Good Example)
DESCRIPTION: Shows the recommended security practice of disabling the `remote` module for a `BrowserWindow` by setting `enableRemoteModule: false` in `webPreferences`. This prevents untrusted renderer code from easily accessing main process APIs and significantly reduces the risk of sandbox escapes. Note that this is the default in newer Electron versions.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
// Good
const mainWindow = new BrowserWindow({
  webPreferences: {
    enableRemoteModule: false
  }
})
```

----------------------------------------

TITLE: Receiving Message Renderer from Main Electron IPC HTML
DESCRIPTION: Shows the renderer process HTML and JavaScript code to receive an asynchronous message sent from the main process using `ipcRenderer.on`. It listens on a specific channel and logs the received message to the console.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_24

LANGUAGE: html
CODE:
```
<!-- index.html -->
<html>
<body>
  <script>
    require('electron').ipcRenderer.on('ping', (event, message) => {
      console.log(message) // Prints 'whoooooooh!'
    })
  </script>
</body>
</html>
```

----------------------------------------

TITLE: Handling Renderer Messages with ipcMain in JavaScript
DESCRIPTION: This snippet shows how the main process uses `ipcMain.on` to listen for messages from a renderer process. It demonstrates handling both 'asynchronous-message', replying with `event.reply`, and 'synchronous-message', replying by setting `event.returnValue`. Requires the `electron` module. Inputs are messages sent from the renderer; outputs are console logs and replies/return values sent back.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/ipc-main.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// In main process.
const { ipcMain } = require('electron')
ipcMain.on('asynchronous-message', (event, arg) => {
  console.log(arg) // prints ""ping""
  event.reply('asynchronous-reply', 'pong')
})

ipcMain.on('synchronous-message', (event, arg) => {
  console.log(arg) // prints ""ping""
  event.returnValue = 'pong'
})
```

----------------------------------------

TITLE: Setting Permission Handler for Electron Session (JavaScript)
DESCRIPTION: Demonstrates how to configure a handler function that Electron will call to check permissions (like notifications, media, geolocation) for a specific session partition. The handler receives the `webContents`, the requested `permission` type, and other details, returning `true` to allow or `false` to deny. This example shows denying 'notifications' for a specific URL.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
session.fromPartition('some-partition').setPermissionCheckHandler((webContents, permission) => {
  if (webContents.getURL() === 'some-host' && permission === 'notifications') {
    return false // denied
  }

  return true
})
```

----------------------------------------

TITLE: Controlling New Window Creation in Electron JavaScript
DESCRIPTION: Shows how to register a `windowOpenHandler` on `webContents` to control which new windows are allowed to be created. The handler receives the requested URL and can decide to open safe URLs externally using `shell.openExternal` (after validation) or deny the window creation request by returning `{ action: 'deny' }`.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const { shell } = require('electron')

app.on('web-contents-created', (event, contents) => {
  contents.setWindowOpenHandler(({ url }) => {
    // In this example, we'll ask the operating system
    // to open this event's url in the default browser.
    //
    // See the following item for considerations regarding what
    // URLs should be allowed through to shell.openExternal.
    if (isSafeForExternalOpen(url)) {
      setImmediate(() => {
        shell.openExternal(url)
      })
    }

    return { action: 'deny' }
  })
})
```

----------------------------------------

TITLE: Initializing Electron Main Process JavaScript
DESCRIPTION: Demonstrates a basic Electron main process script. It requires `app` and `BrowserWindow` from the `electron` module, waits for the app to be ready, creates a `BrowserWindow` instance with specified dimensions, and loads a URL into the window.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/synopsis.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')
let win = null

app.whenReady().then(() => {
  win = new BrowserWindow({ width: 800, height: 600 })
  win.loadURL('https://github.com')
})
```

----------------------------------------

TITLE: Handling Invoke Requests with ipcMain (JavaScript)
DESCRIPTION: This snippet shows how to set up a handler in the main process for `invoke` requests initiated by `ipcRenderer.invoke` in a renderer. The `ipcMain.handle` method registers an asynchronous function that receives the event and arguments, performs operations (potentially asynchronous via `await`), and returns a value. This return value is sent back to the renderer as the result of the `invoke` call. Requires `ipcMain` and `ipcRenderer` from Electron. The listener function receives `IpcMainInvokeEvent` and arguments; the renderer `invoke` call returns a promise resolving to the handler's return value. Note: `somePromise` and `arg1`, `arg2` are placeholders.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/ipc-main.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
// Main process
ipcMain.handle('my-invokable-ipc', async (event, ...args) => {
  const result = await somePromise(...args)
  return result
})

// Renderer process
async () => {
  const result = await ipcRenderer.invoke('my-invokable-ipc', arg1, arg2)
  // ...
}
```

----------------------------------------

TITLE: Configuring VSCode Debugging for Electron Main Process (JSON)
DESCRIPTION: Defines a launch configuration in VSCode's `.vscode/launch.json` file to debug the main Node.js process of an Electron application. It configures the debugger type as `node`, specifies the Electron executable path using workspace variables, and passes the current directory as an argument to launch the app. This setup allows setting breakpoints in the main process code like `main.js`.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/debugging-vscode.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""version"": ""0.2.0"",
  ""configurations"": [
    {
      ""name"": ""Debug Main Process"",
      ""type"": ""node"",
      ""request"": ""launch"",
      ""cwd"": ""${workspaceFolder}"",
      ""runtimeExecutable"": ""${workspaceFolder}/node_modules/.bin/electron"",
      ""windows"": {
        ""runtimeExecutable"": ""${workspaceFolder}/node_modules/.bin/electron.cmd""
      },
      ""args"" : ["".""],
      ""outputCapture"": ""std""
    }
  ]
}
```

----------------------------------------

TITLE: Make Distributable Package with Electron Forge in Shell
DESCRIPTION: This shell command runs the 'make' script, which is typically added to package.json by Electron Forge's import command. It instructs Electron Forge to package and create a distributable version of the application, outputting the result in the 'out' folder.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_8

LANGUAGE: sh
CODE:
```
npm run make
```

----------------------------------------

TITLE: Enabling Context Isolation in BrowserWindow JavaScript
DESCRIPTION: This snippet shows how to explicitly enable context isolation when creating an Electron BrowserWindow instance. It sets the `contextIsolation` option to `true` within the `webPreferences` object. This feature isolates the preload script context from the main web page content for security.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/context-isolation.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const mainWindow = new BrowserWindow({
  webPreferences: {
    contextIsolation: true
  }
})
```

----------------------------------------

TITLE: Installing Electron with npm sh
DESCRIPTION: Installs the Electron framework as a development dependency in your project using npm. The `--save-dev` flag adds it to `devDependencies`, and `--save-exact` is recommended for older versions to prevent unexpected updates.
SOURCE: https://github.com/discord/electron/blob/main/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install electron --save-dev [--save-exact]
```

----------------------------------------

TITLE: Embedding Remote Assets in HTML (HTML)
DESCRIPTION: Illustrates the importance of using secure protocols (HTTPS) when embedding external assets like scripts and stylesheets in HTML content loaded within an Electron application. Using HTTP for remote assets can compromise data integrity and allow injection attacks.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_1

LANGUAGE: HTML
CODE:
```
<!-- Bad -->
<script crossorigin src=""http://example.com/react.js""></script>
<link rel=""stylesheet"" href=""http://example.com/style.css"">
```

LANGUAGE: HTML
CODE:
```
<!-- Good -->
<script crossorigin src=""https://example.com/react.js""></script>
<link rel=""stylesheet"" href=""https://example.com/style.css"">
```

----------------------------------------

TITLE: Enabling Remote Module in Webview Tag in HTML (Bad Example)
DESCRIPTION: Illustrates enabling the `remote` module directly within an HTML `<webview>` tag using the `enableremotemodule=""true""` attribute. This is a bad example if the webview loads untrusted content due to the security risks associated with the `remote` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_9

LANGUAGE: HTML
CODE:
```
<!-- Bad if the renderer can run untrusted content  -->
<webview enableremotemodule=""true"" src=""page.html""></webview>
```

----------------------------------------

TITLE: Sending Message Main to Renderer Electron IPC JavaScript
DESCRIPTION: Demonstrates how the main process can send an asynchronous message to a renderer process using `webContents.send`. The message is sent on a specific channel after the web content has finished loading. The renderer process listens for this channel using `ipcRenderer`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_23

LANGUAGE: javascript
CODE:
```
// In the main process.
const { app, BrowserWindow } = require('electron')
let win = null

app.whenReady().then(() => {
  win = new BrowserWindow({ width: 800, height: 600 })
  win.loadURL(`file://${__dirname}/index.html`)
  win.webContents.on('did-finish-load', () => {
    win.webContents.send('ping', 'whoooooooh!')
  })
})
```

----------------------------------------

TITLE: Safe Exposure of IPC Method with contextBridge JavaScript
DESCRIPTION: This snippet demonstrates a secure way to expose IPC functionality via `contextBridge`. Instead of exposing the entire `ipcRenderer.send` or `ipcRenderer.invoke` method, it wraps specific IPC calls within dedicated functions. This approach allows controlled access to main process functionality and enables proper argument validation and filtering.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/context-isolation.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// ✅ Good code
contextBridge.exposeInMainWorld('myAPI', {
  loadPreferences: () => ipcRenderer.invoke('load-prefs')
})
```

----------------------------------------

TITLE: Sending and Receiving IPC Messages in Renderer Process (JavaScript)
DESCRIPTION: This snippet demonstrates how a renderer process uses `ipcRenderer` to communicate with the main process. It sends a synchronous message using `ipcRenderer.sendSync` and logs the direct response. It also sends an asynchronous message using `ipcRenderer.send` and sets up an `ipcRenderer.on` listener to handle the asynchronous reply. Requires the `electron` module. Inputs are messages/data to send; outputs are console logs of received data.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/ipc-main.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// In renderer process (web page).
const { ipcRenderer } = require('electron')
console.log(ipcRenderer.sendSync('synchronous-message', 'ping')) // prints ""pong""

ipcRenderer.on('asynchronous-reply', (event, arg) => {
  console.log(arg) // prints ""pong""
})
ipcRenderer.send('asynchronous-message', 'ping')
```

----------------------------------------

TITLE: Exposing Complex API Object with contextBridge in Electron JavaScript
DESCRIPTION: This snippet illustrates exposing a more complex API object using `contextBridge.exposeInMainWorld`. It demonstrates including various data types like functions, arrays, promises, nested objects, and primitives, noting that only functions are proxied while others are copied and frozen.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/context-bridge.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { contextBridge } = require('electron')

contextBridge.exposeInMainWorld(
  'electron',
  {
    doThing: () => ipcRenderer.send('do-a-thing'),
    myPromises: [Promise.resolve(), Promise.reject(new Error('whoops'))],
    anAsyncFunction: async () => 123,
    data: {
      myFlags: ['a', 'b', 'c'],
      bootTime: 1234
    },
    nestedAPI: {
      evenDeeper: {
        youCanDoThisAsMuchAsYouWant: {
          fn: () => ({
            returnData: 123
          })
        }
      }
    }
  }
)
```

----------------------------------------

TITLE: Requiring Electron Module - JavaScript
DESCRIPTION: Imports the core 'electron' module, providing access to various Electron APIs. This is a fundamental step for utilizing Electron's features and can be done in both the Main and Renderer processes.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const electron = require('electron')
```

----------------------------------------

TITLE: Configuring macOS Signing & Notarization with Electron Forge
DESCRIPTION: Provides a JSON configuration example for the `packagerConfig` within the `forge` block of an `electron-forge` configuration file. It specifies settings for `osxSign` (identity, hardened runtime, entitlements) and `osxNotarize` (Apple ID credentials) required for signing and notarizing an Electron macOS application.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/code-signing.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""name"": ""my-app"",
  ""version"": ""0.0.1"",
  ""config"": {
    ""forge"": {
      ""packagerConfig"": {
        ""osxSign"": {
          ""identity"": ""Developer ID Application: Felix Rieseberg (LT94ZKYDCJ)"",
          ""hardened-runtime"": true,
          ""entitlements"": ""entitlements.plist"",
          ""entitlements-inherit"": ""entitlements.plist"",
          ""signature-flags"": ""library""
        },
        ""osxNotarize"": {
          ""appleId"": ""felix@felix.fun"",
          ""appleIdPassword"": ""my-apple-id-password""
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Secure Use of openExternal in Electron JavaScript (Good Example)
DESCRIPTION: Shows a secure usage of `shell.openExternal` where a trusted, hardcoded URL is provided. This avoids the security risk associated with passing untrusted, user-controlled input directly to the function.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
//  Good
const { shell } = require('electron')
shell.openExternal('https://example.com/index.html')
```

----------------------------------------

TITLE: Globally Enabling Sandbox in Electron App
DESCRIPTION: This example shows how to use `app.enableSandbox()` to force the sandbox option to be true for all subsequent BrowserWindow instances created in the application. This is a convenient way to apply the sandbox globally without setting `sandbox: true` for each window.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/sandbox-option.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
let win
app.enableSandbox()
app.whenReady().then(() => {
  // no need to pass `sandbox: true` since `app.enableSandbox()` was called.
  win = new BrowserWindow()
  win.loadURL('http://google.com')
})
```

----------------------------------------

TITLE: Replacing Electron remote module with @electron/remote (Electron 12)
DESCRIPTION: Shows how to replace the deprecated built-in remote module with the @electron/remote package. The module needs to be required and initialized in the main process, and then can be required in the renderer process to access modules like BrowserWindow.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Replace with:
const { BrowserWindow } = require('@electron/remote')

// In the main process:
require('@electron/remote/main').initialize()
```

----------------------------------------

TITLE: Packaging App into asar Archive - Shell
DESCRIPTION: This command uses the asar utility to package the specified application directory (your-app) into a single asar archive file (app.asar).
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_1

LANGUAGE: shell
CODE:
```
asar pack your-app app.asar
```

----------------------------------------

TITLE: Deferring Module Loading - Node.js - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates deferring module loading and file operations until they are actually required by a method call (`getParsedFiles`, `getFiles`). It uses asynchronous file system operations (`fs.readdir`) and places the `require('foo-parser')` call inside the method where it's first needed. This improves startup performance by avoiding unnecessary work upfront.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/performance.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// ""fs"" is likely already being loaded, so the `require()` call is cheap
const fs = require('fs')

class Parser {
  async getFiles () {
    // Touch the disk as soon as `getFiles` is called, not sooner.
    // Also, ensure that we're not blocking other operations by using
    // the asynchronous version.
    this.files = this.files || await fs.readdir('.')

    return this.files
  }

  async getParsedFiles () {
    // Our fictitious foo-parser is a big and expensive module to load, so
    // defer that work until we actually need to parse files.
    // Since `require()` comes with a module cache, the `require()` call
    // will only be expensive once - subsequent calls of `getParsedFiles()`
    // will be faster.
    const fooParser = require('foo-parser')
    const files = await this.getFiles()

    return fooParser.parse(files)
  }
}

// This operation is now a lot cheaper than in our previous example
const parser = new Parser()

module.exports = { parser }
```

----------------------------------------

TITLE: Accessing webContents from BrowserWindow (JavaScript)
DESCRIPTION: This snippet demonstrates how to create an Electron BrowserWindow and access its associated webContents property. The webContents instance provides methods and events for controlling the web page loaded within that window.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 1500 })
win.loadURL('http://github.com')

const contents = win.webContents
console.log(contents)
```

----------------------------------------

TITLE: Enabling Remote Module in BrowserWindow in Electron JavaScript (Bad Example)
DESCRIPTION: Demonstrates explicitly enabling the `remote` module for a `BrowserWindow` via `enableRemoteModule: true` in `webPreferences`. This is presented as a bad example when the renderer process might run untrusted content, as it provides easy access to main process modules and can facilitate sandbox escapes.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_7

LANGUAGE: JavaScript
CODE:
```
// Bad if the renderer can run untrusted content
const mainWindow = new BrowserWindow({
  webPreferences: {
    enableRemoteModule: true
  }
})
```

----------------------------------------

TITLE: Loading Local File in Electron Window JavaScript
DESCRIPTION: Shows how to load a local HTML file into an Electron `BrowserWindow` using the `loadFile` method. The example assumes the file is located within a 'src' subdirectory relative to the application's root directory.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_8

LANGUAGE: javascript
CODE:
```
win.loadFile('src/index.html')
```

----------------------------------------

TITLE: Installing Electron Globally - npm
DESCRIPTION: This command installs the 'electron' command globally on your system, allowing you to run Electron applications or use the Electron CLI from any directory. Requires appropriate permissions.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install electron -g
```

----------------------------------------

TITLE: Running Electron Quick Start sh
DESCRIPTION: Provides a sequence of commands to clone the official Electron Quick Start repository, navigate into its directory, install dependencies, and start the minimal Electron application for a quick demonstration.
SOURCE: https://github.com/discord/electron/blob/main/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
git clone https://github.com/electron/electron-quick-start
cd electron-quick-start
npm install
npm start
```

----------------------------------------

TITLE: Using Preload Script with Sandboxed BrowserWindow in Electron
DESCRIPTION: This snippet illustrates how to create a sandboxed BrowserWindow and specify a preload script. The `preload` option in `webPreferences` points to a script file that will be executed in the renderer process before web content loads, allowing limited customization and access to a subset of Electron renderer APIs even within the sandbox.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/sandbox-option.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
let win
app.whenReady().then(() => {
  win = new BrowserWindow({
    webPreferences: {
      sandbox: true,
      preload: path.join(app.getAppPath(), 'preload.js')
    }
  })
  win.loadURL('http://google.com')
})
```

----------------------------------------

TITLE: Applying Styles Based on Preferred Color Scheme CSS
DESCRIPTION: This CSS snippet defines styles for the body element using the `@media (prefers-color-scheme: ...)` media query. It sets different background and text colors for the body when the preferred color scheme is dark or light, allowing the web content to visually adapt to the theme source set in the main process.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/dark-mode.md#_snippet_3

LANGUAGE: css
CODE:
```
@media (prefers-color-scheme: dark) {
  body { background:  #333; color: white; }
}

@media (prefers-color-scheme: light) {
  body { background:  #ddd; color: black; }
}
```

----------------------------------------

TITLE: Showing Notification in Main Process with Electron Module
DESCRIPTION: Shows how to send a notification from the Electron Main process using the built-in 'electron' module's Notification class. It imports the Notification module, defines a function to create and show a basic notification object, and modifies the app startup sequence to call this function after the application is ready and the main window is created.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/notifications.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { Notification } = require('electron')

function showNotification () {
  const notification = {
    title: 'Basic Notification',
    body: 'Notification from the Main process'
  }
  new Notification(notification).show()
}

app.whenReady().then(createWindow).then(showNotification)

```

----------------------------------------

TITLE: Loading URLs in Electron BrowserWindow (JavaScript)
DESCRIPTION: Demonstrates the correct and incorrect ways to load remote URLs in an Electron BrowserWindow. Loading content via insecure protocols like HTTP is strongly discouraged due to man-in-the-middle attack risks and lack of server authentication. Always use HTTPS for remote resources.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
// Bad
browserWindow.loadURL('http://example.com')
```

LANGUAGE: JavaScript
CODE:
```
// Good
browserWindow.loadURL('https://example.com')
```

----------------------------------------

TITLE: Loading Local HTML File in Electron BrowserWindow - JavaScript
DESCRIPTION: This snippet shows how to correctly format a local file path into a ""file://"" URL using Node.js modules (url and path) before loading it into an Electron BrowserWindow instance (win) using the loadURL method. It requires the url and path Node.js modules. The __dirname variable is used to reference the directory of the current script, ensuring the path is relative to the application structure.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const url = require('url').format({
  protocol: 'file',
  slashes: true,
  pathname: require('path').join(__dirname, 'index.html')
})

win.loadURL(url)
```

----------------------------------------

TITLE: Verify Node.js and npm Installation in Shell
DESCRIPTION: These shell commands are used to check the installed versions of Node.js and npm, which are prerequisites for developing with Electron. Successful execution confirms that Node.js and npm are correctly installed and accessible from the command line.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_0

LANGUAGE: sh
CODE:
```
node -v
npm -v
```

----------------------------------------

TITLE: Intercepting Window Creation with setWindowOpenHandler - Main Process (BrowserWindowProxy)
DESCRIPTION: Shows how to use `webContents.setWindowOpenHandler` in the main process to intercept window creation requests originating from the renderer. This example checks the requested URL and returns `true` to allow certain URLs (like GitHub) or `false` to block others, providing a security layer. It also includes a listener for the `did-create-window` event to further configure the newly created window.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/window-open.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// main.js
const { BrowserWindow } = require('electron')

const mainWindow = new BrowserWindow()

mainWindow.webContents.setWindowOpenHandler(({ url }) => {
  if (url.startsWith('https://github.com/')) {
    return true
  }
  return false
})

mainWindow.webContents.on('did-create-window', (childWindow) => {
  // For example...
  childWindow.webContents.on('will-navigate', (e) => {
    e.preventDefault()
  })
})
```

----------------------------------------

TITLE: Example Preload Script for Sandboxed Renderer in Electron
DESCRIPTION: This is an example of a `preload.js` script intended for use with a sandboxed renderer. It demonstrates how to access a limited set of Node.js/Electron APIs (like `ipcRenderer`) available in the preload scope, despite the main renderer having Node.js disabled. The script intercepts `window.open` to send IPC messages.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/sandbox-option.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
// This file is loaded whenever a javascript context is created. It runs in a
// private scope that can access a subset of Electron renderer APIs. Without
// contextIsolation enabled, it's possible to accidentally leak privileged
// globals like ipcRenderer to web content.
const { ipcRenderer } = require('electron')

const defaultWindowOpen = window.open

window.open = function customWindowOpen (url, ...args) {
  ipcRenderer.send('report-window-open', location.origin, url, args)
  return defaultWindowOpen(url + '?from_electron=1', ...args)
}
```

----------------------------------------

TITLE: Creating Modal Electron Browser Windows (Javascript)
DESCRIPTION: Demonstrates creating a modal child window that disables interaction with its parent. This is achieved by setting both the `parent` and `modal: true` options. It also uses `ready-to-show` for graceful display. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const child = new BrowserWindow({ parent: top, modal: true, show: false })
child.loadURL('https://github.com')
child.once('ready-to-show', () => {
  child.show()
})
```

----------------------------------------

TITLE: Defining File Filters for Dialogs Electron JavaScript
DESCRIPTION: This object snippet illustrates how to define the `filters` array for Electron's file dialog methods (`showOpenDialogSync`, `showOpenDialog`, `showSaveDialogSync`). It specifies multiple file type filters, including images, movies, a custom type, and an ""All Files"" option using the '*' wildcard.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/dialog.md#_snippet_1

LANGUAGE: javascript
CODE:
```
{
  filters: [
    { name: 'Images', extensions: ['jpg', 'png', 'gif'] },
    { name: 'Movies', extensions: ['mkv', 'avi', 'mp4'] },
    { name: 'Custom File Type', extensions: ['as'] },
    { name: 'All Files', extensions: ['*'] }
  ]
}
```

----------------------------------------

TITLE: Registering File Protocol (Default Session) in Electron (JavaScript)
DESCRIPTION: Shows how to register a custom protocol scheme ('atom') to serve local files from the application directory using the default session. It uses `protocol.registerFileProtocol` and resolves the requested URL path relative to the app's directory. This must be done after the `app` ready event.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/protocol.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, protocol } = require('electron')
const path = require('path')

app.whenReady().then(() => {
  protocol.registerFileProtocol('atom', (request, callback) => {
    const url = request.url.substr(7)
    callback({ path: path.normalize(`${__dirname}/${url}`) })
  })
})
```

----------------------------------------

TITLE: Accessing Node Builtins in Sandboxed Renderer (Remote) - JavaScript
DESCRIPTION: In sandboxed renderer processes (Electron 6.0+), directly require()ing Node.js built-in modules is deprecated. This snippet illustrates the required replacement pattern: using require('electron').remote.require() to explicitly load the module from the main process context via the remote module. Requires the electron module in the sandboxed renderer. It shows examples for child_process, fs, os, and path.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_22

LANGUAGE: javascript
CODE:
```
// Deprecated
require('child_process')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('child_process')
```

LANGUAGE: javascript
CODE:
```
// Deprecated
require('fs')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('fs')
```

LANGUAGE: javascript
CODE:
```
// Deprecated
require('os')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('os')
```

LANGUAGE: javascript
CODE:
```
// Deprecated
require('path')
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.require('path')
```

----------------------------------------

TITLE: Loading asar URL using BrowserWindow - JavaScript
DESCRIPTION: This snippet demonstrates loading an HTML file located inside an asar archive using Electron's `BrowserWindow.loadURL` method with the standard `file:` protocol.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.loadURL('file:///path/to/example.asar/static/index.html')
```

----------------------------------------

TITLE: Initializing Electron Tray with Context Menu JavaScript
DESCRIPTION: This snippet demonstrates how to create a new `Tray` icon, build a context menu using `Menu.buildFromTemplate`, set a tooltip, and assign the context menu to the tray icon. It requires the Electron `app`, `Menu`, and `Tray` modules.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/tray.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Menu, Tray } = require('electron')

let tray = null
app.whenReady().then(() => {
  tray = new Tray('/path/to/my/icon')
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' },
    { label: 'Item3', type: 'radio', checked: true },
    { label: 'Item4', type: 'radio' }
  ])
  tray.setToolTip('This is my application.')
  tray.setContextMenu(contextMenu)
})
```

----------------------------------------

TITLE: Handling UI Button Clicks and IPC in Electron Renderer
DESCRIPTION: This JavaScript snippet for the renderer process adds event listeners to the 'Toggle Dark Mode' and 'Reset to System Theme' buttons. Upon clicking, it uses Electron's `ipcRenderer` to send corresponding messages ('dark-mode:toggle', 'dark-mode:system') to the main process and updates the theme source label in the UI based on the response.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/dark-mode.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')

document.getElementById('toggle-dark-mode').addEventListener('click', async () => {
  const isDarkMode = await ipcRenderer.invoke('dark-mode:toggle')
  document.getElementById('theme-source').innerHTML = isDarkMode ? 'Dark' : 'Light'
})

document.getElementById('reset-to-system').addEventListener('click', async () => {
  await ipcRenderer.invoke('dark-mode:system')
  document.getElementById('theme-source').innerHTML = 'System'
})
```

----------------------------------------

TITLE: Initializing Electron Main Process with Destructuring from Module JavaScript
DESCRIPTION: Demonstrates an alternative method for using destructuring assignment with the `electron` module. It first requires the entire `electron` module and then extracts the `app` and `BrowserWindow` properties using destructuring. Initializes an app, creates a window, and loads a URL.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/synopsis.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const electron = require('electron')
const { app, BrowserWindow } = electron

let win

app.whenReady().then(() => {
  win = new BrowserWindow()
  win.loadURL('https://github.com')
})
```

----------------------------------------

TITLE: Handling Context Menu Right-Click in Renderer (JavaScript)
DESCRIPTION: Shows the renderer process logic for triggering a context menu. It adds an event listener for the 'contextmenu' event on the window, prevents the default browser context menu using `e.preventDefault()`, and sends an IPC message ('show-context-menu') to the main process to request the menu display. It also sets up a listener for commands back from the main process. Requires the `ipcRenderer` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// renderer
window.addEventListener('contextmenu', (e) => {
  e.preventDefault()
  ipcRenderer.send('show-context-menu')
})

ipcRenderer.on('context-menu-command', (e, command) => {
  // ...
})
```

----------------------------------------

TITLE: Filtering Remote Module Access in Electron JavaScript
DESCRIPTION: Explains how to filter which modules, built-ins, and globals are accessible via the `remote` module if it cannot be completely disabled. It demonstrates using event handlers like `remote-require`, `remote-get-builtin`, and `remote-get-global` to intercept access requests and prevent unauthorized access to sensitive APIs.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
const readOnlyFsProxy = require(/* ... */) // exposes only file read functionality

const allowedModules = new Set(['crypto'])
const proxiedModules = new Map(['fs', readOnlyFsProxy])
const allowedElectronModules = new Set(['shell'])
const allowedGlobals = new Set()

app.on('remote-require', (event, webContents, moduleName) => {
  if (proxiedModules.has(moduleName)) {
    event.returnValue = proxiedModules.get(moduleName)
  }
  if (!allowedModules.has(moduleName)) {
    event.preventDefault()
  }
})

app.on('remote-get-builtin', (event, webContents, moduleName) => {
  if (!allowedElectronModules.has(moduleName)) {
    event.preventDefault()
  }
})

app.on('remote-get-global', (event, webContents, globalName) => {
  if (!allowedGlobals.has(globalName)) {
    event.preventDefault()
  }
})

app.on('remote-get-current-window', (event, webContents) => {
  event.preventDefault()
})

app.on('remote-get-current-web-contents', (event, webContents) => {
  event.preventDefault()
})
```

----------------------------------------

TITLE: Using MessageChannelMain for IPC in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to use `MessageChannelMain` to establish communication between the main and renderer processes. The main process creates a channel, sends one port to the renderer via `webContents.postMessage`, and then posts a message on its end of the channel. The renderer process receives the port via an `ipcRenderer` event and listens for messages on the received port.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/message-channel-main.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Main process
const { port1, port2 } = new MessageChannelMain()
w.webContents.postMessage('port', null, [port2])
port1.postMessage({ some: 'message' })

// Renderer process
const { ipcRenderer } = require('electron')
ipcRenderer.on('port', (e) => {
  // e.ports is a list of ports sent along with this message
  e.ports[0].on('message', (messageEvent) => {
    console.log(messageEvent.data)
  })
})
```

----------------------------------------

TITLE: Installing Node.js Package via npm - Shell
DESCRIPTION: Installs a Node.js package ('aws-sdk') as a project dependency using the npm package manager. The '--save' flag adds it to the project's 'dependencies' in the package.json file, making it available for use within the Electron application.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_14

LANGUAGE: shell
CODE:
```
npm install --save aws-sdk
```

----------------------------------------

TITLE: Accessing Guest webContents via ipcMain - JavaScript
DESCRIPTION: This is the recommended pattern for accessing WebContents associated with <webview> without using the remote module. It involves setting up an ipcMain.handle in the main process and calling it from the renderer process using ipcRenderer.invoke, passing the webContents ID. This approach enhances security and performance.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_14

LANGUAGE: javascript
CODE:
```
// main
const { ipcMain, webContents } = require('electron')

const getGuestForWebContents = (webContentsId, contents) => {
  const guest = webContents.fromId(webContentsId)
  if (!guest) {
    throw new Error(`Invalid webContentsId: ${webContentsId}`)
  }
  if (guest.hostWebContents !== contents) {
    throw new Error('Access denied to webContents')
  }
  return guest
}

ipcMain.handle('openDevTools', (event, webContentsId) => {
  const guest = getGuestForWebContents(webContentsId, event.sender)
  guest.openDevTools()
})
```

LANGUAGE: javascript
CODE:
```
// renderer
const { ipcRenderer } = require('electron')

ipcRenderer.invoke('openDevTools', webview.getWebContentsId())
```

----------------------------------------

TITLE: Setting ELECTRON_ENABLE_LOGGING in Shell
DESCRIPTION: Demonstrates how to set the `ELECTRON_ENABLE_LOGGING` environment variable in a POSIX shell before launching the Electron application. This enables internal Chrome logging output to the console, useful for debugging.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/environment-variables.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ export ELECTRON_ENABLE_LOGGING=true
$ electron
```

----------------------------------------

TITLE: Handling File Download Event in Electron Javascript
DESCRIPTION: This snippet attaches a listener to the `will-download` event on the default session. It prevents the standard Electron download behavior and uses `request` and `fs` to manually download the item's URL and save it to a local file. Requires the `electron`, `request`, and `fs` modules.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
session.defaultSession.on('will-download', (event, item, webContents) => {
  event.preventDefault()
  require('request')(item.getURL(), (data) => {
    require('fs').writeFileSync('/somewhere', data)
  })
})
```

----------------------------------------

TITLE: Synchronous protocol registration methods (Electron 10)
DESCRIPTION: Demonstrates the change in protocol registration methods like protocol.registerFileProtocol from asynchronous methods with a required callback to synchronous methods where the callback is no longer needed. Applicable to various register*Protocol and intercept*Protocol methods.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_8

LANGUAGE: javascript
CODE:
```
// Deprecated
protocol.registerFileProtocol(scheme, handler, () => { /* ... */ })
```

LANGUAGE: javascript
CODE:
```
// Replace with
protocol.registerFileProtocol(scheme, handler)
```

----------------------------------------

TITLE: Processing IPC and Controlling Native Theme in Electron Main
DESCRIPTION: This JavaScript snippet for the main process initializes the Electron application window and sets up IPC handlers using `ipcMain`. It listens for 'dark-mode:toggle' and 'dark-mode:system' messages from the renderer, updating the `nativeTheme.themeSource` property accordingly to control the system's native UI theme and propagate the preferred color scheme to the renderer.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/dark-mode.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, ipcMain, nativeTheme } = require('electron')

function createWindow () {
  const win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      nodeIntegration: true
    }
  })

  win.loadFile('index.html')

  ipcMain.handle('dark-mode:toggle', () => {
    if (nativeTheme.shouldUseDarkColors) {
      nativeTheme.themeSource = 'light'
    } else {
      nativeTheme.themeSource = 'dark'
    }
    return nativeTheme.shouldUseDarkColors
  })

  ipcMain.handle('dark-mode:system', () => {
    nativeTheme.themeSouce = 'system'
  })
}

app.whenReady().then(createWindow)

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit()
  }
})

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow()
  }
})
```

----------------------------------------

TITLE: Handling Renderer Crash and Reloading in Electron JavaScript
DESCRIPTION: Provides an example of listening for the `unresponsive` event on `webContents`. If the renderer becomes unresponsive, it shows a message box asking the user if they want to forcefully crash the renderer and then reload the page in a new process to recover.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_10

LANGUAGE: javascript
CODE:
```
contents.on('unresponsive', async () => {
  const { response } = await dialog.showMessageBox({
    message: 'App X has become unresponsive',
    title: 'Do you want to try forcefully reloading the app?',
    buttons: ['OK', 'Cancel'],
    cancelId: 1
  })
  if (response === 0) {
    contents.forcefullyCrashRenderer()
    contents.reload()
  }
})
```

----------------------------------------

TITLE: Creating Basic Frameless Electron Window (JavaScript)
DESCRIPTION: This snippet demonstrates how to create a basic frameless window in Electron by setting the `frame` option to `false` during `BrowserWindow` initialization. This removes the standard window borders and title bar.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ width: 800, height: 600, frame: false })
win.show()
```

----------------------------------------

TITLE: Reading Directory with Node.js fs - JavaScript
DESCRIPTION: Demonstrates accessing the Node.js file system ('fs') module within an Electron application. It reads the synchronous contents of the root directory ('/') and prints them to the console. Requires Node.js integration to be enabled if run in the Renderer process.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_13

LANGUAGE: javascript
CODE:
```
const fs = require('fs')

const root = fs.readdirSync('/')

console.log(root)
```

----------------------------------------

TITLE: Initializing Electron Tray (Correct Example) - JavaScript
DESCRIPTION: This snippet provides the recommended solution for preventing the Electron Tray icon from disappearing. By declaring the 'tray' variable with 'let' outside the 'app.whenReady().then()' scope, it becomes a global reference (or module-scoped if in a module), preventing garbage collection and ensuring the tray icon persists.
SOURCE: https://github.com/discord/electron/blob/main/docs/faq.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, Tray } = require('electron')
let tray = null
app.whenReady().then(() => {
  tray = new Tray('/path/to/icon.png')
  tray.setTitle('hello world')
})
```

----------------------------------------

TITLE: Rebuilding Modules with electron-rebuild (Shell)
DESCRIPTION: Demonstrates how to install the `electron-rebuild` tool as a dev dependency using npm, and provides commands for Linux/macOS and Windows to execute `electron-rebuild` from the project's node_modules directory, which is necessary after installing native modules that need recompilation for Electron.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-native-node-modules.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save-dev electron-rebuild

# Every time you run ""npm install"", run this:
./node_modules/.bin/electron-rebuild

# On Windows if you have trouble, try:
.\node_modules\.bin\electron-rebuild.cmd
```

----------------------------------------

TITLE: Disabling Node.js Integration in Electron - JavaScript
DESCRIPTION: This JavaScript snippet shows how to disable Node.js integration for a specific BrowserWindow instance in Electron by setting the 'nodeIntegration' preference to 'false'. This is useful for resolving compatibility issues with front-end libraries that conflict with Node.js global symbols like 'require', 'module', and 'exports'.
SOURCE: https://github.com/discord/electron/blob/main/docs/faq.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// In the main process.
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({
  webPreferences: {
    nodeIntegration: false
  }
})
win.show()
```

----------------------------------------

TITLE: Creating/Setting Application Menu with Template (JavaScript)
DESCRIPTION: Demonstrates how to construct a standard application menu dynamically based on the operating system using `Menu.buildFromTemplate` from an array of `MenuItemConstructorOptions` and then set it globally as the application's main menu using `Menu.setApplicationMenu`. It includes platform-specific logic for macOS menu items. Requires the `app` and `Menu` modules from 'electron'.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Menu } = require('electron')

const isMac = process.platform === 'darwin'

const template = [
  // { role: 'appMenu' }
  ...(isMac ? [{
    label: app.name,
    submenu: [
      { role: 'about' },
      { type: 'separator' },
      { role: 'services' },
      { type: 'separator' },
      { role: 'hide' },
      { role: 'hideothers' },
      { role: 'unhide' },
      { type: 'separator' },
      { role: 'quit' }
    ]
  }] : []),
  // { role: 'fileMenu' }
  {
    label: 'File',
    submenu: [
      isMac ? { role: 'close' } : { role: 'quit' }
    ]
  },
  // { role: 'editMenu' }
  {
    label: 'Edit',
    submenu: [
      { role: 'undo' },
      { role: 'redo' },
      { type: 'separator' },
      { role: 'cut' },
      { role: 'copy' },
      { role: 'paste' },
      ...(isMac ? [
        { role: 'pasteAndMatchStyle' },
        { role: 'delete' },
        { role: 'selectAll' },
        { type: 'separator' },
        {
          label: 'Speech',
          submenu: [
            { role: 'startSpeaking' },
            { role: 'stopSpeaking' }
          ]
        }
      ] : [
        { role: 'delete' },
        { type: 'separator' },
        { role: 'selectAll' }
      ])
    ]
  },
  // { role: 'viewMenu' }
  {
    label: 'View',
    submenu: [
      { role: 'reload' },
      { role: 'forceReload' },
      { role: 'toggleDevTools' },
      { type: 'separator' },
      { role: 'resetZoom' },
      { role: 'zoomIn' },
      { role: 'zoomOut' },
      { type: 'separator' },
      { role: 'togglefullscreen' }
    ]
  },
  // { role: 'windowMenu' }
  {
    label: 'Window',
    submenu: [
      { role: 'minimize' },
      { role: 'zoom' },
      ...(isMac ? [
        { type: 'separator' },
        { role: 'front' },
        { type: 'separator' },
        { role: 'window' }
      ] : [
        { role: 'close' }
      ])
    ]
  },
  {
    role: 'help',
    submenu: [
      {
        label: 'Learn More',
        click: async () => {
          const { shell } = require('electron')
          await shell.openExternal('https://electronjs.org')
        }
      }
    ]
  }
]

const menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)
```

----------------------------------------

TITLE: Creating Parent and Child Electron Browser Windows (Javascript)
DESCRIPTION: Shows how to create a child window that is associated with a parent window using the `parent` option. Child windows typically stay on top of their parent. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const top = new BrowserWindow()
const child = new BrowserWindow({ parent: top })
child.show()
top.show()
```

----------------------------------------

TITLE: Receiving IPC message in Electron webview embedder (JavaScript)
DESCRIPTION: This code snippet shows how the embedder page can listen for asynchronous messages sent from the `<webview>` guest page using the `ipc-message` event and send a message (`ping`) to the guest page using `webview.send`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_68

LANGUAGE: javascript
CODE:
```
// In embedder page.
const webview = document.querySelector('webview')
webview.addEventListener('ipc-message', (event) => {
  console.log(event.channel)
  // Prints ""pong""
})
webview.send('ping')
```

----------------------------------------

TITLE: Preventing Insecure Webview Attachment in Electron JavaScript
DESCRIPTION: Illustrates how to use the `will-attach-webview` event fired on the hosting `webContents` to intercept and modify the creation of `<webview>` tags. It shows how to remove insecure preferences like `preload` scripts and disable `nodeIntegration`, and how to validate the source URL before allowing attachment.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
app.on('web-contents-created', (event, contents) => {
  contents.on('will-attach-webview', (event, webPreferences, params) => {
    // Strip away preload scripts if unused or verify their location is legitimate
    delete webPreferences.preload
    delete webPreferences.preloadURL

    // Disable Node.js integration
    webPreferences.nodeIntegration = false

    // Verify URL being loaded
    if (!params.src.startsWith('https://example.com/')) {
      event.preventDefault()
    }
  })
})
```

----------------------------------------

TITLE: Defining Local Keyboard Shortcut Electron JavaScript
DESCRIPTION: Explains how to create an application menu and add a menu item with an accelerator property to define a local shortcut that triggers a function when the application is focused. Uses `Menu` and `MenuItem` from Electron. The accelerator can be specified based on the user's operating system.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { Menu, MenuItem } = require('electron')

const menu = new Menu()
menu.append(new MenuItem({
  label: 'Electron',
  submenu: [{
    role: 'help',
    accelerator: process.platform === 'darwin' ? 'Alt+Cmd+I' : 'Alt+Shift+I',
    click: () => { console.log('Electron rocks!') }
  }]
}))

Menu.setApplicationMenu(menu)
```

----------------------------------------

TITLE: Accessing electron.screen in Renderer (Remote) - JavaScript
DESCRIPTION: Direct access to require('electron').screen in the renderer process is deprecated in Electron 6.0. This snippet shows the required replacement, which involves accessing the screen module through the remote module (require('electron').remote.screen) when in the renderer process. Requires the electron module in the renderer.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_21

LANGUAGE: javascript
CODE:
```
// Deprecated
require('electron').screen
```

LANGUAGE: javascript
CODE:
```
// Replace with
require('electron').remote.screen
```

----------------------------------------

TITLE: Sending Online Status via IPC in Renderer Process Electron Javascript
DESCRIPTION: This JavaScript code runs in the renderer process for the IPC example. It uses the `ipcRenderer` module to communicate with the Main process. It defines a function that checks `navigator.onLine` and sends the 'online' or 'offline' status string to the Main process via the 'online-status-changed' IPC channel whenever the 'online' or 'offline' window events occur, or on initial execution.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')
const updateOnlineStatus = () => { ipcRenderer.send('online-status-changed', navigator.onLine ? 'online' : 'offline') }

window.addEventListener('online', updateOnlineStatus)
window.addEventListener('offline', updateOnlineStatus)

updateOnlineStatus()
```

----------------------------------------

TITLE: Handling DownloadItem in Electron Main Process
DESCRIPTION: Demonstrates how to capture the 'will-download' event on an Electron session to intercept a download item, programmatically set its save path, and listen for 'updated' and 'done' events to monitor its progress and completion status. Requires the 'electron' module and is executed in the main process.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/download-item.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// In the main process.
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.webContents.session.on('will-download', (event, item, webContents) => {
  // Set the save path, making Electron not to prompt a save dialog.
  item.setSavePath('/tmp/save.pdf')

  item.on('updated', (event, state) => {
    if (state === 'interrupted') {
      console.log('Download is interrupted but can be resumed')
    } else if (state === 'progressing') {
      if (item.isPaused()) {
        console.log('Download is paused')
      } else {
        console.log(`Received bytes: ${item.getReceivedBytes()}`)
      }
    }
  })
  item.once('done', (event, state) => {
    if (state === 'completed') {
      console.log('Download successfully')
    } else {
      console.log(`Download failed: ${state}`)
    }
  })
})
```

----------------------------------------

TITLE: Launching Electron with V8 Inspector Protocol (Shell)
DESCRIPTION: This command launches an Electron application (`your/app`) and enables the V8 inspector protocol, allowing an external debugger to connect. It configures Electron to listen for debug connections on the specified port (here, 5858), which can then be used by tools like Chrome DevTools or VSCode.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/debugging-main-process.md#_snippet_0

LANGUAGE: shell
CODE:
```
electron --inspect=5858 your/app
```

----------------------------------------

TITLE: Showing Asynchronous Open Dialog with Parent Electron JavaScript
DESCRIPTION: This snippet shows the asynchronous `dialog.showOpenDialog` method in Electron, attaching it to a parent `mainWindow`. It configures the dialog to potentially select files or directories and handles the promise result, logging whether the dialog was canceled and the selected file paths, or logging any error.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/dialog.md#_snippet_3

LANGUAGE: javascript
CODE:
```
dialog.showOpenDialog(mainWindow, {
  properties: ['openFile', 'openDirectory']
}).then(result => {
  console.log(result.canceled)
  console.log(result.filePaths)
}).catch(err => {
  console.log(err)
})
```

----------------------------------------

TITLE: Showing Notification in Renderer Process with HTML5 API
DESCRIPTION: Demonstrates how to create and display a native system notification using the standard HTML5 Notification API directly within an Electron Renderer process. It instantiates a new Notification object with a title and body, and also attaches an event listener to handle clicks on the notification.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/notifications.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const myNotification = new Notification('Title', {
  body: 'Notification from the Renderer process'
})

myNotification.onclick = () => {
  console.log('Notification clicked')
}

```

----------------------------------------

TITLE: Registering Stream Protocol (File Stream) in Electron (JavaScript)
DESCRIPTION: Shows how to use `protocol.registerStreamProtocol` to handle requests for a scheme ('atom') by returning a `fs.createReadStream` for a local file. This effectively streams the file content as the response to the protocol request and requires the Node.js `fs` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/protocol.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const { protocol } = require('electron')
const fs = require('fs')

protocol.registerStreamProtocol('atom', (request, callback) => {
  callback(fs.createReadStream('index.html'))
})
```

----------------------------------------

TITLE: Displaying Context Menu from Main via IPC (JavaScript)
DESCRIPTION: Shows the main process logic for displaying a context menu requested by the renderer. It listens for the 'show-context-menu' IPC message, builds a `Menu` from a template, and calls `menu.popup()` to display it as a context menu attached to the `BrowserWindow` that sent the message. Menu item clicks trigger sending a command back to the renderer via IPC. Requires `ipcMain`, `Menu`, and `BrowserWindow` from 'electron'.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// main
ipcMain.on('show-context-menu', (event) => {
  const template = [
    {
      label: 'Menu Item 1',
      click: () => { event.sender.send('context-menu-command', 'menu-item-1') }
    },
    { type: 'separator' },
    { label: 'Menu Item 2', type: 'checkbox', checked: true }
  ]
  const menu = Menu.buildFromTemplate(template)
  menu.popup(BrowserWindow.fromWebContents(event.sender))
})
```

----------------------------------------

TITLE: Loading URL with Options Electron webContents JavaScript
DESCRIPTION: Demonstrates how to use the `webContents.loadURL` method to load a URL in an Electron window, specifically showing how to pass options like `extraHeaders` to modify the request, such as bypassing the cache.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const { webContents } = require('electron')
const options = { extraHeaders: 'pragma: no-cache\n' }
webContents.loadURL('https://github.com', options)
```

----------------------------------------

TITLE: Implement Find In Page with Event Handling Electron webContents JS
DESCRIPTION: Shows how to initiate a find operation on a `webContents` instance using `findInPage`, listen for the `found-in-page` event to receive results, and automatically stop the search and clear the selection when the search completes across the entire page (`result.finalUpdate` is true) by calling `stopFindInPage`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const { webContents } = require('electron')
webContents.on('found-in-page', (event, result) => {
  if (result.finalUpdate) webContents.stopFindInPage('clearSelection')
})

const requestId = webContents.findInPage('api')
console.log(requestId)
```

----------------------------------------

TITLE: Registering Global Shortcut in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to register a global keyboard shortcut using Electron's `globalShortcut` module. It waits for the Electron app to be ready, then registers a listener for the 'CommandOrControl+Y' accelerator. The provided callback function is executed whenever the specified shortcut is pressed globally on the system.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/accelerator.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, globalShortcut } = require('electron')

app.whenReady().then(() => {
  // Register a 'CommandOrControl+Y' shortcut listener.
  globalShortcut.register('CommandOrControl+Y', () => {
    // Do stuff when Y and either Command/Control is pressed.
  })
})
```

----------------------------------------

TITLE: Registering Global Keyboard Shortcut Electron JavaScript
DESCRIPTION: Demonstrates how to use the `globalShortcut` module to register a keyboard shortcut that works globally across the operating system, even when the Electron application is not focused. The shortcut triggers a callback function. Requires the Electron app to be ready.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
const { app, globalShortcut } = require('electron')

app.whenReady().then(() => {
  globalShortcut.register('Alt+CommandOrControl+I', () => {
    console.log('Electron loves global shortcuts!')
  })
}).then(createWindow)
```

----------------------------------------

TITLE: Cloning Electron Quick Start and Opening in VSCode (Shell)
DESCRIPTION: Provides the shell commands to clone the official Electron Quick Start repository from GitHub and then open the resulting directory in Visual Studio Code. This is the initial step to prepare a project environment for debugging.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/debugging-vscode.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ git clone git@github.com:electron/electron-quick-start.git
$ code electron-quick-start
```

----------------------------------------

TITLE: Initializing Electron Main Process Traditional Require JavaScript
DESCRIPTION: Shows the traditional way to access properties from the required `electron` module without using destructuring assignment. It explicitly assigns `electron.app` to `app` and `electron.BrowserWindow` to `BrowserWindow`. Initializes an app, creates a window, and loads a URL.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/synopsis.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const electron = require('electron')
const app = electron.app
const BrowserWindow = electron.BrowserWindow
let win

app.whenReady().then(() => {
  win = new BrowserWindow()
  win.loadURL('https://github.com')
})
```

----------------------------------------

TITLE: Using webview Methods After dom-ready JavaScript
DESCRIPTION: Illustrates the correct approach for calling methods on a webview element by waiting for the `dom-ready` event, ensuring the webview is fully loaded and ready for interaction, like opening DevTools.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_15

LANGUAGE: JavaScript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('dom-ready', () => {
  webview.openDevTools()
})
```

----------------------------------------

TITLE: Handling Drag Start in Electron Renderer
DESCRIPTION: This JavaScript snippet, intended for the renderer process (`renderer.js`), demonstrates how to capture the `ondragstart` event on the designated HTML element. It prevents the default browser drag behavior and sends an IPC message ('ondragstart') to the main process, including the absolute path of the item to be dragged using `ipcRenderer`.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')

document.getElementById('drag').ondragstart = (event) => {
  event.preventDefault()
  ipcRenderer.send('ondragstart', '/absolute/path/to/the/item')
}

```

----------------------------------------

TITLE: Initializing Electron Crash Reporter (JavaScript)
DESCRIPTION: This snippet demonstrates the basic setup to start the Electron crash reporter. It requires the `crashReporter` module and calls the `start` method, providing the `submitURL` where crash reports should be sent. This should be called as early as possible in the application's main process.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/crash-reporter.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { crashReporter } = require('electron')

crashReporter.start({ submitURL: 'https://your-domain.com/url-to-submit' })
```

----------------------------------------

TITLE: Intercepting BrowserWindow Keyboard Event Main Process Electron JavaScript
DESCRIPTION: Shows how to intercept keyboard input events for a specific `BrowserWindow` instance in the main process using the `before-input-event`. This allows handling custom shortcuts before they reach the renderer process and preventing default behavior based on key combination checks.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const { app, BrowserWindow } = require('electron')

app.whenReady().then(() => {
  const win = new BrowserWindow({ width: 800, height: 600, webPreferences: { nodeIntegration: true } })

  win.loadFile('index.html')
  win.webContents.on('before-input-event', (event, input) => {
    if (input.control && input.key.toLowerCase() === 'i') {
      console.log('Pressed Control+I')
      event.preventDefault()
    }
  })
})
```

----------------------------------------

TITLE: Writing and Reading Plain Text with Electron Clipboard (JavaScript)
DESCRIPTION: This example shows the basic usage of the Electron `clipboard` module to write plain text to the default clipboard and then read it back. The read text is stored in a variable and printed to the console.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeText('hello i am a bit of text!')

const text = clipboard.readText()
console.log(text)
// hello i am a bit of text!'
```

----------------------------------------

TITLE: Loading React DevTools Extension Electron JavaScript
DESCRIPTION: Demonstrates how to load a Chrome DevTools extension (using React Developer Tools as an example) into an Electron application. It requires the path to the extension's directory on the user's system and uses the BrowserWindow.addDevToolsExtension API. This code should be executed after the Electron 'app' module has emitted the 'ready' event.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/devtools-extension.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const path = require('path')
const os = require('os')

BrowserWindow.addDevToolsExtension(
   path.join(os.homedir(), '/Library/Application Support/Google/Chrome/Default/Extensions/fmkadmapgofadopljbjfkapdkoienihi/4.3.0_0')
)
```

----------------------------------------

TITLE: Initializing Tray and Window with File Paths in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to initialize Electron's `Tray` and `BrowserWindow` elements by providing direct file paths to image assets for their icons. It requires the `electron` module and uses example file paths. The created instances and the paths are then logged to the console, showing a common way to use images without explicitly creating `NativeImage` instances first.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/native-image.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, Tray } = require('electron')

const appIcon = new Tray('/Users/somebody/images/icon.png')
const win = new BrowserWindow({ icon: '/Users/somebody/images/window.png' })
console.log(appIcon, win)
```

----------------------------------------

TITLE: Handling webview Loading Events JavaScript
DESCRIPTION: Selects a webview element and attaches event listeners for `did-start-loading` and `did-stop-loading` to show/hide a 'loading...' indicator on the host page.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
onload = () => {
  const webview = document.querySelector('webview')
  const indicator = document.querySelector('.indicator')

  const loadstart = () => {
    indicator.innerText = 'loading...'
  '}

  const loadstop = () => {
    indicator.innerText = ''
  }

  webview.addEventListener('did-start-loading', loadstart)
  webview.addEventListener('did-stop-loading', loadstop)
}
```

----------------------------------------

TITLE: Create Renderer Process HTML Page
DESCRIPTION: This HTML code defines the web page that will be displayed in the Electron application's browser window. It includes basic HTML structure, sets a title, configures a Content Security Policy, and displays version information for Node.js, Chrome, and Electron by executing small JavaScript snippets within the page.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_3

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Hello World!</title>
    <meta http-equiv=""Content-Security-Policy"" content=""script-src 'self' 'unsafe-inline';"" />
</head>
<body>
    <h1>Hello World!</h1>
    We are using node <script>document.write(process.versions.node)</script>,
    Chrome <script>document.write(process.versions.chrome)</script>,
    and Electron <script>document.write(process.versions.electron)</script>.
</body>
</html>
```

----------------------------------------

TITLE: Printing Web Page to PDF Electron WebContents JavaScript
DESCRIPTION: Demonstrates how to print the content of a Electron BrowserWindow's webContents to a PDF file. It requires the `electron`, `fs`, `path`, and `os` modules. It loads a URL, waits for the content to load, calls `printToPDF`, and writes the resulting buffer to a file on the desktop.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_18

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const fs = require('fs')
const path = require('path')
const os = require('os')

const win = new BrowserWindow({ width: 800, height: 600 })
win.loadURL('http://github.com')

win.webContents.on('did-finish-load', () => {
  // Use default printing options
  win.webContents.printToPDF({}).then(data => {
    const pdfPath = path.join(os.homedir(), 'Desktop', 'temp.pdf')
    fs.writeFile(pdfPath, data, (error) => {
      if (error) throw error
      console.log(`Wrote PDF successfully to ${pdfPath}`)
    })
  }).catch(error => {
    console.log(`Failed to write PDF to ${pdfPath}: `, error)
  })
})
```

----------------------------------------

TITLE: Running Full Electron Test Suite | Shell
DESCRIPTION: Executes the npm script named 'test' defined in the project's 'package.json'. This typically runs the entire test suite for the Electron project to verify code correctness and prevent regressions. Requires Node.js and npm installed.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ npm run test
```

----------------------------------------

TITLE: Setting Progress Bar with BrowserWindow in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to set the progress bar on an Electron BrowserWindow instance. It requires an active BrowserWindow and is typically placed in the main process (like `main.js`). The value passed to `setProgressBar` (0.5 in this case) determines the filled percentage (50%). Values between 0 and 1 represent percentage, negative values remove the bar, and values > 1 enable indeterminate mode (Windows only).
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/progress-bar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.setProgressBar(0.5)
```

----------------------------------------

TITLE: Accessing WebContents Session in Electron Javascript
DESCRIPTION: This snippet shows how to obtain the `Session` object associated with a `BrowserWindow`'s `webContents`. It creates a new window, loads a URL, retrieves the session from `webContents.session`, and then logs the user agent string for that session. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 600 })
win.loadURL('http://github.com')

const ses = win.webContents.session
console.log(ses.getUserAgent())
```

----------------------------------------

TITLE: Getting Current URL from Electron Window JavaScript
DESCRIPTION: Demonstrates how to instantiate a `BrowserWindow`, load a URL, and then asynchronously retrieve and log the current URL using the `webContents.getURL` method after the page has finished loading.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ width: 800, height: 600 })
win.loadURL('http://github.com').then(() => {
  const currentURL = win.webContents.getURL()
  console.log(currentURL)
})
```

----------------------------------------

TITLE: Handling Drag-and-Drop and Getting File Path (Electron HTML)
DESCRIPTION: This HTML snippet, intended for an Electron renderer process, demonstrates how to implement drag-and-drop functionality. It prevents default browser behavior for dragover and drop events and accesses the real filesystem path of dropped files using the Electron-enhanced `File` object's `path` attribute, logging the paths to the console. This requires being run within an Electron environment.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/file-object.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<div id=""holder"">
  Drag your file here
</div>

<script>
  document.addEventListener('drop', (e) => {
    e.preventDefault();
    e.stopPropagation();

    for (const f of e.dataTransfer.files) {
      console.log('File(s) you dragged here: ', f.path)
    }
  });
  document.addEventListener('dragover', (e) => {
    e.preventDefault();
    e.stopPropagation();
  });
</script>
```

----------------------------------------

TITLE: Example Electron App Directory Structure Shell
DESCRIPTION: Illustrates a typical directory structure for a basic Electron application, showing the placement of the `package.json`, main process file (`main.js`), and the main HTML file (`index.html`) within the project root.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_7

LANGUAGE: sh
CODE:
```
| root
| - package.json
| - src
|   - main.js
|   - index.html
```

----------------------------------------

TITLE: Sending Message with MessagePortMain (Electron JS)
DESCRIPTION: Shows how to send a message from the main process to the renderer process using `webContents.postMessage`, including transferring a `MessagePortMain`. The renderer side demonstrates receiving the message and accessing the transferred port from the event object. Requires Electron's main and renderer processes.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_27

LANGUAGE: javascript
CODE:
```
// Main process
const { port1, port2 } = new MessageChannelMain()
webContents.postMessage('port', { message: 'hello' }, [port1])

// Renderer process
ipcRenderer.on('port', (e, msg) => {
  const [port] = e.ports
  // ...
})
```

----------------------------------------

TITLE: Running Functionality Tests - npm - Shell
DESCRIPTION: This command executes the main test suite for the project to verify the functionality of code changes. By default, this typically runs tests against the debug build of Electron.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-system-overview.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ npm test
```

----------------------------------------

TITLE: Initiating Native Drag in Electron Main Process
DESCRIPTION: This JavaScript snippet, located in the main process (`main.js`), listens for the 'ondragstart' IPC message sent from the renderer process using `ipcMain`. Upon receiving the message, it triggers the native file drag operation by calling `event.sender.startDrag()` on the web contents that sent the message, providing the file path and an optional icon path for the item being dragged.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { ipcMain } = require('electron')

ipcMain.on('ondragstart', (event, filePath) => {
  event.sender.startDrag({
    file: filePath,
    icon: '/path/to/icon.png'
  })
})

```

----------------------------------------

TITLE: Registering Buffer Protocol in Electron (JavaScript)
DESCRIPTION: Shows how to use `protocol.registerBufferProtocol` to handle requests for a scheme ('atom') by returning a `Buffer` containing data, like HTML. The response object must include the `data` property with the buffer and can include `mimeType`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/protocol.md#_snippet_3

LANGUAGE: javascript
CODE:
```
protocol.registerBufferProtocol('atom', (request, callback) => {
  callback({ mimeType: 'text/html', data: Buffer.from('<h5>Response</h5>') })
})
```

----------------------------------------

TITLE: Creating and Loading Electron BrowserView Javascript
DESCRIPTION: This snippet demonstrates how to create a BrowserWindow and a BrowserView, attach the view to the window, set the view's position and size using setBounds, and load a URL into the view's webContents property. It requires the electron module and runs in the main process.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-view.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// In the main process.\nconst { BrowserView, BrowserWindow } = require('electron')\n\nconst win = new BrowserWindow({ width: 800, height: 600 })\n\nconst view = new BrowserView()\nwin.setBrowserView(view)\nview.setBounds({ x: 0, y: 0, width: 300, height: 300 })\nview.webContents.loadURL('https://electronjs.org')
```

----------------------------------------

TITLE: Setting BrowserWindow Background Color for Font Clarity - JavaScript
DESCRIPTION: This JavaScript snippet shows how to set a non-transparent background color for an Electron BrowserWindow by providing the 'backgroundColor' option in the constructor. This is recommended to ensure proper sub-pixel anti-aliasing for fonts on LCD screens, improving text clarity for users.
SOURCE: https://github.com/discord/electron/blob/main/docs/faq.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({
  backgroundColor: '#fff'
})
```

----------------------------------------

TITLE: Handling Unload Prevention with Dialog - Electron JS
DESCRIPTION: This snippet demonstrates how to intercept the 'will-prevent-unload' event on Electron's webContents. It uses the `dialog` module to show a confirmation prompt to the user when a page attempts to prevent unloading (e.g., via a `beforeunload` handler). Based on the user's choice, it either allows the unload or calls `event.preventDefault()` to keep the page open. Requires `BrowserWindow` and `dialog`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, dialog } = require('electron')
const win = new BrowserWindow({ width: 800, height: 600 })
win.webContents.on('will-prevent-unload', (event) => {
  const choice = dialog.showMessageBoxSync(win, {
    type: 'question',
    buttons: ['Leave', 'Stay'],
    title: 'Do you want to leave this site?',
    message: 'Changes you made may not be saved.',
    defaultId: 0,
    cancelId: 1
  })
  const leave = (choice === 0)
  if (leave) {
    event.preventDefault()
  }
})
```

----------------------------------------

TITLE: Setting up Native Window Open - Main Process (Native Window)
DESCRIPTION: Configures the main window's web preferences to enable the native `window.open` behavior (`nativeWindowOpen: true`). It then sets up `webContents.setWindowOpenHandler` to control which windows can be opened and provide specific `BrowserWindowConstructorOptions` (like `frame`, `fullscreenable`, `backgroundColor`, and nested `webPreferences`) for allowed URLs (here, only `about:blank`). Returning `false` blocks the creation.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/window-open.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// main.js
const { BrowserWindow } = require('electron')

const mainWindow = new BrowserWindow({
  webPreferences: {
    nativeWindowOpen: true
  }
})

// In this example, only windows with the `about:blank` url will be created.
// All other urls will be blocked.
mainWindow.webContents.setWindowOpenHandler(({ url }) => {
  if (url === 'about:blank') {
    return {
      frame: false,
      fullscreenable: false,
      backgroundColor: 'black',
      webPreferences: {
        preload: 'my-child-window-preload-script.js'
      }
    }
  }
  return false
})
```

----------------------------------------

TITLE: Detecting Online Status in Renderer Process Electron Javascript
DESCRIPTION: This JavaScript code runs in the renderer process (within the loaded HTML page). It defines a function that checks the `navigator.onLine` property and shows an alert box indicating the status. Event listeners are added to the `window` object to trigger this function whenever 'online' or 'offline' events occur, and the initial status is also checked and alerted upon script execution.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const alertOnlineStatus = () => { window.alert(navigator.onLine ? 'online' : 'offline') }

window.addEventListener('online', alertOnlineStatus)
window.addEventListener('offline', alertOnlineStatus)

alertOnlineStatus()
```

----------------------------------------

TITLE: Creating Tray with High-Res File Path in Electron JavaScript
DESCRIPTION: This snippet demonstrates creating an Electron `Tray` using a file path, specifically in the context of supporting high-resolution images via `@nx` suffixes. While the code itself is similar to using any file path, the surrounding text explains how Electron can automatically select the appropriate resolution image (`icon@2x.png`, `icon@3x.png`, etc.) when provided the base path `/Users/somebody/images/icon.png`. It requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/native-image.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { Tray } = require('electron')
const appIcon = new Tray('/Users/somebody/images/icon.png')
console.log(appIcon)
```

----------------------------------------

TITLE: Making HTTP Request using Electron net Module (JavaScript)
DESCRIPTION: This snippet demonstrates how to use Electron's `net` module to make an HTTP GET request to a URL. It waits for the Electron app to be ready, creates a request instance, attaches event listeners for `response`, `data`, and `end` events to process the server's response, and finally sends the request.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/net.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { app } = require('electron')
app.whenReady().then(() => {
  const { net } = require('electron')
  const request = net.request('https://github.com')
  request.on('response', (response) => {
    console.log(`STATUS: ${response.statusCode}`)
    console.log(`HEADERS: ${JSON.stringify(response.headers)}`)
    response.on('data', (chunk) => {
      console.log(`BODY: ${chunk}`)
    })
    response.on('end', () => {
      console.log('No more data in response.')
    })
  })
  request.end()
})
```

----------------------------------------

TITLE: Showing Open Dialog with Multi-Selection Electron JavaScript
DESCRIPTION: This snippet shows how to use the `dialog.showOpenDialog` method in Electron to display a native file open dialog. It configures the dialog to allow selecting multiple files using the `multiSelections` property. The result (file paths) is printed to the console.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/dialog.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { dialog } = require('electron')
console.log(dialog.showOpenDialog({ properties: ['openFile', 'multiSelections'] }))
```

----------------------------------------

TITLE: Executing JavaScript and Fetching Data Electron webContents JavaScript
DESCRIPTION: Demonstrates executing arbitrary JavaScript code within the web page context using `executeJavaScript`. The example shows fetching data from an API and logging the result, utilizing the `userGesture` option.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_13

LANGUAGE: javascript
CODE:
```
contents.executeJavaScript('fetch(""https://jsonplaceholder.typicode.com/users/1"").then(resp => resp.json())', true)
  .then((result) => {
    console.log(result) // Will be the JSON object from the fetch call
  })
```

----------------------------------------

TITLE: Bundling Preload Script with Browserify for Electron Sandbox
DESCRIPTION: This command shows how to use the Browserify tool to bundle a complex preload script (`preload/index.js`) into a single file (`preload.js`) suitable for use with Electron's sandboxed renderer. The `-x electron` flag excludes the 'electron' module from the bundle, relying on the one provided in the preload scope, and `--insert-global-vars` ensures core Node.js-like globals are sourced correctly.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/sandbox-option.md#_snippet_4

LANGUAGE: Shell
CODE:
```
browserify preload/index.js \
    -x electron \
    --insert-global-vars=__filename,__dirname -o preload.js
```

----------------------------------------

TITLE: Sending IPC message from Electron webview guest (JavaScript)
DESCRIPTION: This snippet shows how the guest page inside the `<webview>` can listen for messages sent from the embedder page using `ipcRenderer.on` and send a response message (`pong`) back to the embedder using `ipcRenderer.sendToHost`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_69

LANGUAGE: javascript
CODE:
```
// In guest page.
const { ipcRenderer } = require('electron')
ipcRenderer.on('ping', () => {
  ipcRenderer.sendToHost('pong')
})
```

----------------------------------------

TITLE: Running Specific Electron Tests by Pattern | Shell
DESCRIPTION: Executes the npm script named 'test', passing the '-match=menu' argument. This runs only the test specification files whose paths or names match the pattern 'menu', useful for focusing on specific areas during development. Requires Node.js and npm installed.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_5

LANGUAGE: Shell
CODE:
```
$ npm run test -match=menu
```

----------------------------------------

TITLE: Starting Electron ChromeDriver server for WebdriverIO (sh)
DESCRIPTION: Command to execute the `chromedriver` binary for WebdriverIO, specifying the `--url-base` and `--port` arguments. This starts the server configured for WebdriverIO clients. Requires `electron-chromedriver` to be installed.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_7

LANGUAGE: sh
CODE:
```
./node_modules/.bin/chromedriver --url-base=wd/hub --port=9515
Starting ChromeDriver (v2.10.291558) on port 9515
Only local connections are allowed.
```

----------------------------------------

TITLE: Defining Electron Menu Template with Group Positioning Javascript
DESCRIPTION: Provides an Electron menu template array demonstrating the use of `beforeGroupContaining` and `afterGroupContaining` properties. These properties are used to control the placement of entire groups of menu items relative to groups containing other specified items, altering the default template order and incorporating separators.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_5

LANGUAGE: javascript
CODE:
```
[
  { id: '1', label: 'one' },
  { type: 'separator' },
  { id: '3', label: 'three', beforeGroupContaining: ['1'] },
  { id: '4', label: 'four', afterGroupContaining: ['2'] },
  { type: 'separator' },
  { id: '2', label: 'two' }
]
```

----------------------------------------

TITLE: Defining Electron Menu Template with Item Positioning Javascript
DESCRIPTION: Presents an Electron menu template array showcasing the application of `before` and `after` properties. These properties are used to precisely position individual menu items relative to other items specified by their ID, overriding the standard sequential placement based on the template order.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_7

LANGUAGE: javascript
CODE:
```
[
  { id: '1', label: 'one', after: ['3'] },
  { id: '2', label: 'two', before: ['1'] },
  { id: '3', label: 'three' }
]
```

----------------------------------------

TITLE: Writing Multiple Formats Simultaneously with Electron Clipboard (JavaScript)
DESCRIPTION: This example demonstrates using the versatile `clipboard.write()` method to place multiple data types (text, HTML, RTF, and a bookmark) onto the clipboard in a single operation. It then shows how to read each format back individually using their respective read methods and prints the results.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.write({
  text: 'test',
  html: '<b>Hi</b>',
  rtf: '{\\rtf1\\utf8 text}',
  bookmark: 'a title'
})

console.log(clipboard.readText())
// 'test'

console.log(clipboard.readHTML())
// <meta charset='utf-8'><b>Hi</b>

console.log(clipboard.readRTF())
// '{\\rtf1\\utf8 text}'

console.log(clipboard.readBookmark())
// { title: 'a title', url: 'test' }
```

----------------------------------------

TITLE: Configuring macOS Signing & Notarization with Electron Packager API
DESCRIPTION: Shows a JavaScript code example using the `electron-packager` API. It demonstrates how to pass configuration options, including `osxSign` (identity, hardened runtime, entitlements) and `osxNotarize` (Apple ID credentials), directly to the `packager` function call to sign and notarize an Electron macOS application programmatically.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/code-signing.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
const packager = require('electron-packager')

packager({
  dir: '/path/to/my/app',
  osxSign: {
    identity: 'Developer ID Application: Felix Rieseberg (LT94ZKYDCJ)',
    'hardened-runtime': true,
    entitlements: 'entitlements.plist',
    'entitlements-inherit': 'entitlements.plist',
    'signature-flags': 'library'
  },
  osxNotarize: {
    appleId: 'felix@felix.fun',
    appleIdPassword: 'my-apple-id-password'
  }
})
```

----------------------------------------

TITLE: Setting Preload Script webview HTML
DESCRIPTION: Uses the `preload` attribute to specify the path to a script that runs before any other scripts in the guest page, useful for injecting functionality or accessing Node.js APIs temporarily.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_6

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" preload=""./test.js""></webview>
```

----------------------------------------

TITLE: Defining Default Electron Menu Template Javascript
DESCRIPTION: Shows a basic Electron menu template array consisting of four standard menu items. This template illustrates the default behavior where items are ordered according to their appearance in the array before any positioning properties are applied.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_3

LANGUAGE: javascript
CODE:
```
[
  { id: '1', label: 'one' },
  { id: '2', label: 'two' },
  { id: '3', label: 'three' },
  { id: '4', label: 'four' }
]
```

----------------------------------------

TITLE: Creating Electron ClientRequest with Options - JavaScript
DESCRIPTION: Shows how to initialize a new HTTP/HTTPS request using Electron's `net.request` method. It uses an options object to define the request parameters such as the HTTP method ('GET'), protocol ('https:'), target host ('github.com'), port (443), and path ('/'), providing a structured way to configure the request.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/client-request.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const request = net.request({
  method: 'GET',
  protocol: 'https:',
  hostname: 'github.com',
  port: 443,
  path: '/'
})
```

----------------------------------------

TITLE: Run IPC Unit Tests Example (npm)
DESCRIPTION: An example demonstrating how to run only the unit tests specifically related to Inter-Process Communication (IPC) by using `-g ipc` as the pattern.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_6

LANGUAGE: shell
CODE:
```
npm run test --
-g ipc
```

----------------------------------------

TITLE: Registering Stream Protocol (PassThrough Stream) in Electron (JavaScript)
DESCRIPTION: Shows how to use `protocol.registerStreamProtocol` to handle requests for a scheme ('atom') by returning a Node.js `ReadableStream`, such as a `PassThrough` stream containing HTML data. The response object includes status code, headers, and the stream in the `data` property.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/protocol.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { protocol } = require('electron')
const { PassThrough } = require('stream')

function createStream (text) {
  const rv = new PassThrough() // PassThrough is also a Readable stream
  rv.push(text)
  rv.push(null)
  return rv
}

protocol.registerStreamProtocol('atom', (request, callback) => {
  callback({
    statusCode: 200,
    headers: {
      'content-type': 'text/html'
    },
    data: createStream('<h5>Response</h5>')
  })
})
```

----------------------------------------

TITLE: Creating Tray with Clipboard Image in Electron JavaScript
DESCRIPTION: This code snippet shows how to create an Electron `Tray` instance using an image retrieved directly from the system clipboard. It utilizes the `clipboard.readImage()` method, which returns a `NativeImage` instance, and passes this instance to the `Tray` constructor. This demonstrates using a `NativeImage` object directly in an API call that accepts an image.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/native-image.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { clipboard, Tray } = require('electron')
const image = clipboard.readImage()
const appIcon = new Tray(image)
console.log(appIcon)
```

----------------------------------------

TITLE: Basic macOS Hardened Runtime Entitlements
DESCRIPTION: Shows the required XML structure for a macOS entitlements file (`.plist`) needed when enabling the hardened runtime for an Electron application. It includes keys to allow JIT compilation, unsigned executable memory, and debugging. This file is referenced by both `electron-forge` and `electron-packager` configurations.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/code-signing.md#_snippet_1

LANGUAGE: XML
CODE:
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
  <dict>
    <key>com.apple.security.cs.allow-jit</key>
    <true/>
    <key>com.apple.security.cs.allow-unsigned-executable-memory</key>
    <true/>
    <key>com.apple.security.cs.debugger</key>
    <true/>
  </dict>
</plist>
```

----------------------------------------

TITLE: Showing Synchronous Open Dialog with Parent Electron JavaScript
DESCRIPTION: This snippet demonstrates calling the synchronous `dialog.showOpenDialogSync` method in Electron. It attaches the dialog to a specific `mainWindow` and attempts to configure it to allow both file and directory selection, noting that this behavior differs between platforms (Windows/Linux show directory only).
SOURCE: https://github.com/discord/electron/blob/main/docs/api/dialog.md#_snippet_2

LANGUAGE: javascript
CODE:
```
dialog.showOpenDialogSync(mainWindow, {
  properties: ['openFile', 'openDirectory']
})
```

----------------------------------------

TITLE: Using Mousetrap for Advanced Keyboard Shortcuts Renderer Process JavaScript
DESCRIPTION: Provides multiple examples demonstrating how to use the `mousetrap` library in the renderer process to bind various types of keyboard shortcuts, including single keys, combinations, sequences, and preventing default browser behavior by returning `false`.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
Mousetrap.bind('4', () => { console.log('4') })
Mousetrap.bind('?', () => { console.log('show shortcuts!') })
Mousetrap.bind('esc', () => { console.log('escape') }, 'keyup')

// combinations
Mousetrap.bind('command+shift+k', () => { console.log('command shift k') })

// map multiple combinations to the same callback
Mousetrap.bind(['command+k', 'ctrl+k'], () => {
  console.log('command k or control k')

  // return false to prevent default behavior and stop event from bubbling
  return false
})

// gmail style sequences
Mousetrap.bind('g i', () => { console.log('go to inbox') })
Mousetrap.bind('* a', () => { console.log('select all') })

// konami code!
Mousetrap.bind('up up down down left right left right b a enter', () => {
  console.log('konami code')
})
```

----------------------------------------

TITLE: Flashing Taskbar Button with Electron.js
DESCRIPTION: This snippet shows how to make an Electron `BrowserWindow`'s taskbar button flash to gain user attention using `win.flashFrame`. It requires the `BrowserWindow` module and accepts a boolean flag to control the flashing. A common pattern is to start flashing (`true`) and then stop (`false`) when the window receives focus or after a certain duration.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-taskbar.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow()

win.once('focus', () => win.flashFrame(false))
win.flashFrame(true)
```

----------------------------------------

TITLE: Listing Directory in asar using Node fs - JavaScript
DESCRIPTION: This snippet shows how to list the contents of a directory within an asar archive using Node.js's `fs.readdirSync` function, leveraging Electron's asar support.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const fs = require('fs')
fs.readdirSync('/path/to/example.asar')
```

----------------------------------------

TITLE: Relaunching Electron app with Arguments (JavaScript)
DESCRIPTION: Provides an example of how to relaunch the Electron application using `app.relaunch()`. It configures the relaunch to pass the current command-line arguments (excluding the first, which is the executable path) plus an additional `--relaunch` argument to the new instance. It then immediately exits the current instance with code 0.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.relaunch({ args: process.argv.slice(1).concat(['--relaunch']) })
app.exit(0)
```

----------------------------------------

TITLE: Flipping Electron Fuses using @electron/fuses JavaScript
DESCRIPTION: This snippet demonstrates the recommended 'easy way' to flip Electron fuses using the `@electron/fuses` npm package. It takes the path to the Electron executable (obtained via `require('electron')`) and an object specifying the desired state for one or more fuses. This method requires the `@electron/fuses` package to be installed.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/fuses.md#_snippet_0

LANGUAGE: javascript
CODE:
```
require('@electron/fuses').flipFuses(
  // Path to electron
  require('electron'),
  // Fuses to flip
  {
    runAsNode: false
  }
)
```

----------------------------------------

TITLE: Implementing Conditional Click-Through via IPC (JavaScript)
DESCRIPTION: This example shows how to conditionally toggle click-through behavior based on mouse position using `setIgnoreMouseEvents` and inter-process communication (IPC). The renderer process detects mouse events over a specific element and sends a message to the main process, which then calls `setIgnoreMouseEvents` with an optional `forward: true` parameter on Windows to allow mouse move events to still reach the web page.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const { ipcRenderer } = require('electron')
const el = document.getElementById('clickThroughElement')
el.addEventListener('mouseenter', () => {
  ipcRenderer.send('set-ignore-mouse-events', true, { forward: true })
})
el.addEventListener('mouseleave', () => {
  ipcRenderer.send('set-ignore-mouse-events', false)
})
```

LANGUAGE: javascript
CODE:
```
const { ipcMain } = require('electron')
const { BrowserWindow } = require('electron')
ipcMain.on('set-ignore-mouse-events', (event, ...args) => {
  BrowserWindow.fromWebContents(event.sender).setIgnoreMouseEvents(...args)
})
```

----------------------------------------

TITLE: Setting and Getting BrowserWindow Bounds in Electron (JavaScript)
DESCRIPTION: This snippet demonstrates how to use the `win.setBounds()` method to set the position and size of an Electron BrowserWindow. It shows examples of setting all bounds properties and partially updating them. It also includes a call to `win.getBounds()` to retrieve and log the current window bounds.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

// set all bounds properties
win.setBounds({ x: 440, y: 225, width: 800, height: 600 })

// set a single bounds property
win.setBounds({ width: 100 })

// { x: 440, y: 225, width: 100, height: 600 }
console.log(win.getBounds())
```

----------------------------------------

TITLE: Deprecated Electron remote module import (Electron 12)
DESCRIPTION: Demonstrates the deprecated method of requiring Electron modules like BrowserWindow directly from the built-in remote module, which is being replaced by the external @electron/remote package.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 12:
const { BrowserWindow } = require('electron').remote
```

----------------------------------------

TITLE: Registering and Unregistering a Global Shortcut with Electron
DESCRIPTION: This snippet demonstrates how to use the `globalShortcut` module in an Electron main process. It waits for the app's `ready` event, registers a `CommandOrControl+X` shortcut, checks if registration was successful, logs the registration status, and then unregisters the specific shortcut and all shortcuts when the app is about to quit.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/global-shortcut.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, globalShortcut } = require('electron')

app.whenReady().then(() => {
  // Register a 'CommandOrControl+X' shortcut listener.
  const ret = globalShortcut.register('CommandOrControl+X', () => {
    console.log('CommandOrControl+X is pressed')
  })

  if (!ret) {
    console.log('registration failed')
  }

  // Check whether a shortcut is registered.
  console.log(globalShortcut.isRegistered('CommandOrControl+X'))
})

app.on('will-quit', () => {
  // Unregister a shortcut.
  globalShortcut.unregister('CommandOrControl+X')

  // Unregister all shortcuts.
  globalShortcut.unregisterAll()
})
```

----------------------------------------

TITLE: Spawning Electron Process with IPC - Node.js
DESCRIPTION: This snippet shows how to use Node.js `child_process.spawn` to launch an Electron application process, enabling IPC communication over the fourth STDIO channel. It also illustrates setting up basic message listeners and sending messages to the spawned process. Required dependencies include `child_process` and the `electron` executable path.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/automated-testing-with-a-custom-driver.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const childProcess = require('child_process')
const electronPath = require('electron')

// spawn the process
const env = { /* ... */ }
const stdio = ['inherit', 'inherit', 'inherit', 'ipc']
const appProcess = childProcess.spawn(electronPath, ['./app'], { stdio, env })

// listen for IPC messages from the app
appProcess.on('message', (msg) => {
  // ...
})

// send an IPC message to the app
appProcess.send({ my: 'message' })
```

----------------------------------------

TITLE: Print webContents Silently to Specific Printer Electron JS
DESCRIPTION: Provides an example of how to print the content of a `webContents` instance programmatically without showing the print dialog. It specifies a target printer by name and limits the printing to a specific range of pages (pages 0 and 1 in this case), including a callback to handle success or failure.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_16

LANGUAGE: javascript
CODE:
```
const options = {
  silent: true,
  deviceName: 'My-Printer',
  pageRanges: [{
    from: 0,
    to: 1
  }]
}
win.webContents.print(options, (success, errorType) => {
  if (!success) console.log(errorType)
})
```

----------------------------------------

TITLE: Capturing a Specific Window via getUserMedia (Electron, JavaScript)
DESCRIPTION: Shows how to find a specific window source ('Electron') using `desktopCapturer.getSources` and then request a media stream for that source using `navigator.mediaDevices.getUserMedia`. It includes example functions for handling the resulting stream or errors. Requires Electron's `desktopCapturer` module and a valid window title. The `handleStream` function displays the stream in a `<video>` element, and `handleError` logs the error.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/desktop-capturer.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// In the renderer process.
const { desktopCapturer } = require('electron')

desktopCapturer.getSources({ types: ['window', 'screen'] }).then(async sources => {
  for (const source of sources) {
    if (source.name === 'Electron') {
      try {
        const stream = await navigator.mediaDevices.getUserMedia({
          audio: false,
          video: {
            mandatory: {
              chromeMediaSource: 'desktop',
              chromeMediaSourceId: source.id,
              minWidth: 1280,
              maxWidth: 1280,
              minHeight: 720,
              maxHeight: 720
            }
          }
        })
        handleStream(stream)
      } catch (e) {
        handleError(e)
      }
      return
    }
  }
})

function handleStream (stream) {
  const video = document.querySelector('video')
  video.srcObject = stream
  video.onloadedmetadata = (e) => video.play()
}

function handleError (e) {
  console.log(e)
}
```

----------------------------------------

TITLE: Formatting Code on a Specific Commit (Shell)
DESCRIPTION: This command applies clang-format to the changes introduced in a specific commit, relative to the previous commit (HEAD~1). This is useful for formatting code on your latest commit before opening a pull request.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/clang-format.md#_snippet_4

LANGUAGE: Shell
CODE:
```
git-clang-format HEAD~1
```

----------------------------------------

TITLE: Configuring Hidden Title Bar on macOS (JavaScript)
DESCRIPTION: On macOS, this snippet creates a window with a hidden title bar and full-size content area while retaining the standard window controls (traffic lights) in the top left corner. This is achieved by setting the `titleBarStyle` option to `'hidden'`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ titleBarStyle: 'hidden' })
win.show()
```

----------------------------------------

TITLE: Setting macOS Dock Menu using Electron JavaScript
DESCRIPTION: This snippet demonstrates how to create and set a custom menu for the Electron application's icon in the macOS Dock. It uses `Menu.buildFromTemplate` to define the menu structure and `app.dock.setMenu` to apply it once the application is ready (`app.whenReady`). Requires the `electron` module and is macOS-specific.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/macos-dock.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Menu } = require('electron')

const dockMenu = Menu.buildFromTemplate([
  {
    label: 'New Window',
    click () { console.log('New Window') }
  }, {
    label: 'New Window with Settings',
    submenu: [
      { label: 'Basic' },
      { label: 'Pro' }
    ]
  },
  { label: 'New Command...' }
])

app.whenReady().then(() => {
  app.dock.setMenu(dockMenu)
})
```

----------------------------------------

TITLE: Setting a Custom Jump List - Electron app - JavaScript
DESCRIPTION: This snippet demonstrates how to create and set a custom Jump List for a Windows application using `app.setJumpList`. It shows examples of adding custom categories with file links and task-based items, as well as including standard categories like 'frequent' and the default 'tasks'. Requires the Electron `app` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.setJumpList([
  {
    type: 'custom',
    name: 'Recent Projects',
    items: [
      { type: 'file', path: 'C:\\Projects\\project1.proj' },
      { type: 'file', path: 'C:\\Projects\\project2.proj' }
    ]
  },
  { // has a name so `type` is assumed to be ""custom""
    name: 'Tools',
    items: [
      {
        type: 'task',
        title: 'Tool A',
        program: process.execPath,
        args: '--run-tool-a',
        icon: process.execPath,
        iconIndex: 0,
        description: 'Runs Tool A'
      },
      {
        type: 'task',
        title: 'Tool B',
        program: process.execPath,
        args: '--run-tool-b',
        icon: process.execPath,
        iconIndex: 0,
        description: 'Runs Tool B'
      }
    ]
  },
  { type: 'frequent' },
  { // has no name and no type so `type` is assumed to be ""tasks""
    items: [
      {
        type: 'task',
        title: 'New Project',
        program: process.execPath,
        args: '--new-project',
        description: 'Create a new project.'
      },
      { type: 'separator' },
      {
        type: 'task',
        title: 'Recover Project',
        program: process.execPath,
        args: '--recover-project',
        description: 'Recover Project'
      }
    ]
  }
])
```

----------------------------------------

TITLE: Configuring Inset Hidden Title Bar on macOS (JavaScript)
DESCRIPTION: This macOS-specific snippet creates a window with a hidden title bar and a full-size content area, similar to the 'hidden' style, but with the window controls (traffic lights) slightly more inset from the window edge. This look is enabled by setting `titleBarStyle` to `'hiddenInset'`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ titleBarStyle: 'hiddenInset' })
win.show()
```

----------------------------------------

TITLE: Managing Menu Shortcuts via Input Events - Electron JS
DESCRIPTION: This code shows how to use the 'before-input-event' on `webContents` to control application menu shortcuts. By checking the input object's modifier keys (`control`, `meta`), it dynamically calls `webContents.setIgnoreMenuShortcuts()` to enable shortcuts only when a modifier key is held down. Requires `BrowserWindow`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ width: 800, height: 600 })

win.webContents.on('before-input-event', (event, input) => {
  // For example, only enable application menu keyboard shortcuts when
  // Ctrl/Cmd are down.
  win.webContents.setIgnoreMenuShortcuts(!input.control && !input.meta)
})
```

----------------------------------------

TITLE: Setting JumpList Tasks with Electron.js
DESCRIPTION: This snippet demonstrates how to configure custom tasks for the Windows JumpList using `app.setUserTasks`. It requires importing the `app` module from Electron and passing an array of task objects, each specifying the program to run, arguments, icon, title, and description. The defined tasks appear when the user right-clicks the application's taskbar icon.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-taskbar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.setUserTasks([
  {
    program: process.execPath,
    arguments: '--new-window',
    iconPath: process.execPath,
    iconIndex: 0,
    title: 'New Window',
    description: 'Create a new window'
  }
])
```

----------------------------------------

TITLE: Modify User-Agent Header in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to use the `onBeforeSendHeaders` event on the default Electron session's `webRequest` object. It sets up a URL filter and a listener function that modifies the `User-Agent` header in the request details before sending the request. The callback is then invoked with the modified headers.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-request.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

// Modify the user agent for all requests to the following urls.
const filter = {
  urls: ['https://*.github.com/*', '*://electron.github.io']
}

session.defaultSession.webRequest.onBeforeSendHeaders(filter, (details, callback) => {
  details.requestHeaders['User-Agent'] = 'MyAgent'
  callback({ requestHeaders: details.requestHeaders })
})
```

----------------------------------------

TITLE: Adding Draggable Element and Script to HTML
DESCRIPTION: This HTML snippet shows how to add a link (`<a>`) element that serves as the draggable target in the web content and includes the necessary renderer process script file (`renderer.js`). This element will trigger the `ondragstart` event when a drag action begins.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/native-file-drag-drop.md#_snippet_0

LANGUAGE: html
CODE:
```
<a href=""#"" id=""drag"">Drag me</a>
<script src=""renderer.js""></script>

```

----------------------------------------

TITLE: Setting Permission Request Handler Electron JavaScript
DESCRIPTION: Illustrates how to use `setPermissionRequestHandler` on an Electron session to intercept and programmatically respond to permission requests (like notifications, media access, etc.) originating from web content within that session. Requires accessing a session (e.g., `session.fromPartition`) and defining a handler function.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_6

LANGUAGE: JavaScript
CODE:
```
const { session } = require('electron')
session.fromPartition('some-partition').setPermissionRequestHandler((webContents, permission, callback) => {
  if (webContents.getURL() === 'some-host' && permission === 'notifications') {
    return callback(false) // denied.
  }

  callback(true)
})
```

----------------------------------------

TITLE: Setting WebFrame Zoom Factor in Electron
DESCRIPTION: This snippet shows how to require the `webFrame` instance from the Electron module and use its `setZoomFactor` method to change the zoom level of the current web page. It sets the zoom factor to 2, which represents 200% zoom. Requires the Electron module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { webFrame } = require('electron')

webFrame.setZoomFactor(2)
```

----------------------------------------

TITLE: Installing Electron with Specific Architecture - npm
DESCRIPTION: This command installs Electron specifically for the 'ia32' architecture, overriding the default architecture detected by npm. Useful when developing for a different architecture than your build machine.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm install --arch=ia32 electron
```

----------------------------------------

TITLE: Replacing shell.moveItemToTrash (Electron 13)
DESCRIPTION: Shows the asynchronous shell.trashItem() method as the replacement for the removed synchronous shell.moveItemToTrash(). The new method returns a Promise.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// Removed in Electron 13
shell.moveItemToTrash(path)
```

LANGUAGE: javascript
CODE:
```
// Replace with
shell.trashItem(path).then(/* ... */)
```

----------------------------------------

TITLE: Checking for Command-Line Switch in Electron (JavaScript)
DESCRIPTION: This snippet demonstrates how to check if a specific command-line switch, such as `--disable-gpu`, is present using the `app.commandLine.hasSwitch()` method. It requires importing the `app` object from the Electron module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/command-line.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.commandLine.hasSwitch('disable-gpu')
```

----------------------------------------

TITLE: Embedding Basic webview HTML
DESCRIPTION: Adds a basic `<webview>` tag to an HTML page to embed content from a specified source URL (`src`) and sets its initial size using inline CSS styles.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_0

LANGUAGE: HTML
CODE:
```
<webview id=""foo"" src=""https://www.github.com/"" style=""display:inline-flex; width:640px; height:480px""></webview>
```

----------------------------------------

TITLE: Initializing Electron Tray (Incorrect Example) - JavaScript
DESCRIPTION: This snippet demonstrates an incorrect method for initializing an Electron Tray. The 'tray' variable is scoped locally within the 'app.whenReady().then()' callback, making it susceptible to garbage collection after the callback finishes, causing the tray icon to disappear.
SOURCE: https://github.com/discord/electron/blob/main/docs/faq.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, Tray } = require('electron')
app.whenReady().then(() => {
  const tray = new Tray('/path/to/icon.png')
  tray.setTitle('hello world')
})
```

----------------------------------------

TITLE: Example URL Patterns for Electron WebRequest Filters (JS)
DESCRIPTION: This snippet lists various examples of valid URL pattern strings that can be used in the `filter.urls` array for Electron's `webRequest` API events like `onBeforeRequest`. These patterns demonstrate different ways to match specific URLs, domains, ports, paths, and protocols.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-request.md#_snippet_1

LANGUAGE: js
CODE:
```
'http://foo:1234/'
'http://foo.com/'
'http://foo:1234/bar'
'*://*/*'
'*://example.com/*'
'*://example.com/foo/*'
'http://*.foo:1234/'
'file://foo:1234/bar'
'http://foo:*/'
'*://www.foo.com/'
```

----------------------------------------

TITLE: Registering Privileged Scheme (Bypass CSP) in Electron (JavaScript)
DESCRIPTION: Shows how to use `protocol.registerSchemesAsPrivileged` to grant special capabilities to a custom scheme ('foo'), such as bypassing the Content Security Policy. This method must be called before the app `ready` event and can only be called once.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/protocol.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { protocol } = require('electron')
protocol.registerSchemesAsPrivileged([
  { scheme: 'foo', privileges: { bypassCSP: true } }
])
```

----------------------------------------

TITLE: Initializing Main Process for Online Status IPC Electron Javascript
DESCRIPTION: This updated `main.js` snippet configures the main Electron process to receive online/offline status updates via IPC. It creates a hidden `BrowserWindow` with `nodeIntegration` enabled, allowing the renderer process to use Electron modules like `ipcRenderer`. It sets up an `ipcMain` listener on the 'online-status-changed' channel to receive status messages and log them to the console.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, ipcMain } = require('electron')
let onlineStatusWindow

app.whenReady().then(() => {
  onlineStatusWindow = new BrowserWindow({ width: 0, height: 0, show: false, webPreferences: { nodeIntegration: true } })
  onlineStatusWindow.loadURL(`file://${__dirname}/online-status.html`)
})

ipcMain.on('online-status-changed', (event, status) => {
  console.log(status)
})
```

----------------------------------------

TITLE: Enabling Spellchecker Electron JavaScript
DESCRIPTION: Demonstrates how to enable the built-in spellchecker for an Electron BrowserWindow instance by setting the `spellcheck` property to `true` within the `webPreferences` object during instantiation. This is required for Electron 8; it's enabled by default in Electron 9+. Requires the `BrowserWindow` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/spellchecker.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const myWindow = new BrowserWindow({
  webPreferences: {
    spellcheck: true
  }
})
```

----------------------------------------

TITLE: Handling new-window event in Electron webview (JavaScript)
DESCRIPTION: This snippet demonstrates handling the `new-window` event fired when the guest page attempts to open a new browser window. It checks if the requested URL uses the http or https protocol and, if so, uses Electron's `shell.openExternal` method to open the URL in the user's default browser.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_67

LANGUAGE: javascript
CODE:
```
const { shell } = require('electron')
const webview = document.querySelector('webview')

webview.addEventListener('new-window', async (e) => {
  const protocol = (new URL(e.url)).protocol
  if (protocol === 'http:' || protocol === 'https:') {
    await shell.openExternal(e.url)
  }
})
```

----------------------------------------

TITLE: Signing Native Node Modules (Bash)
DESCRIPTION: Shows how to code sign native Node.js modules included in your Electron application using the `electron-osx-sign` command-line tool. It demonstrates adding the path to the compiled native module binary as an argument.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_5

LANGUAGE: Bash
CODE:
```
electron-osx-sign YourApp.app YourApp.app/Contents/Resources/app/node_modules/nativemodule/build/release/nativemodule
```

----------------------------------------

TITLE: Replacing crashReporter.getCrashesDirectory (Electron 10)
DESCRIPTION: Demonstrates how to replace the deprecated crashReporter.getCrashesDirectory() method with the recommended app.getPath('crashDumps') to get the directory for crash dumps.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_5

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 10
crashReporter.getCrashesDirectory()
```

LANGUAGE: javascript
CODE:
```
// Replace with
app.getPath('crashDumps')
```

----------------------------------------

TITLE: Controlling Remote Module Access webview HTML
DESCRIPTION: Adds the boolean `enableremotemodule` attribute to control access to Electron's `remote` module from the guest page. Setting it to `false` prevents access.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_4

LANGUAGE: HTML
CODE:
```
<webview src=""http://www.google.com/"" enableremotemodule=""false""></webview>
```

----------------------------------------

TITLE: Executing JavaScript in Electron Frame by ID (JavaScript)
DESCRIPTION: This snippet demonstrates how to use `webFrameMain.fromId` to retrieve a specific frame instance during a navigation event (like `did-frame-navigate`) and then execute a JavaScript string within that frame using `frame.executeJavaScript`. This is useful for modifying content or interacting with frames as they load.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame-main.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { BrowserWindow, webFrameMain } = require('electron')

const win = new BrowserWindow({ width: 800, height: 1500 })
win.loadURL('https://twitter.com')

win.webContents.on(
  'did-frame-navigate',
  (event, url, isMainFrame, frameProcessId, frameRoutingId) => {
    const frame = webFrameMain.fromId(frameProcessId, frameRoutingId)
    if (frame) {
      const code = 'document.body.innerHTML = document.body.innerHTML.replaceAll(""heck"", ""h*ck"")'
      frame.executeJavaScript(code)
    }
  }
)
```

----------------------------------------

TITLE: Creating a Custom RPC Test Driver - Node.js Class
DESCRIPTION: This JavaScript class `TestDriver` encapsulates the logic for spawning an Electron process and communicating with it via IPC. It implements a simple Remote Procedure Call (RPC) mechanism, allowing the test suite to call methods exposed by the Electron app and receive results via promises. It manages RPC calls using a message ID and handles responses or errors.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/automated-testing-with-a-custom-driver.md#_snippet_2

LANGUAGE: javascript
CODE:
```
class TestDriver {
  constructor ({ path, args, env }) {
    this.rpcCalls = []

    // start child process
    env.APP_TEST_DRIVER = 1 // let the app know it should listen for messages
    this.process = childProcess.spawn(path, args, { stdio: ['inherit', 'inherit', 'inherit', 'ipc'], env })

    // handle rpc responses
    this.process.on('message', (message) => {
      // pop the handler
      const rpcCall = this.rpcCalls[message.msgId]
      if (!rpcCall) return
      this.rpcCalls[message.msgId] = null
      // reject/resolve
      if (message.reject) rpcCall.reject(message.reject)
      else rpcCall.resolve(message.resolve)
    })

    // wait for ready
    this.isReady = this.rpc('isReady').catch((err) => {
      console.error('Application failed to start', err)
      this.stop()
      process.exit(1)
    })
  }

  // simple RPC call
  // to use: driver.rpc('method', 1, 2, 3).then(...)
  async rpc (cmd, ...args) {
    // send rpc request
    const msgId = this.rpcCalls.length
    this.process.send({ msgId, cmd, args })
    return new Promise((resolve, reject) => this.rpcCalls.push({ resolve, reject }))
  }

  stop () {
    this.process.kill()
  }
}
```

----------------------------------------

TITLE: Implementing Electron In-App Purchase Logic (JavaScript)
DESCRIPTION: This JavaScript code snippet for the main process demonstrates the core functionality of handling In-App Purchases in Electron. It includes setting up a listener for the `transactions-updated` event to process various transaction states, retrieving product details using `getProducts`, checking payment eligibility with `canMakePayments`, and initiating a purchase using `purchaseProduct`. It also shows how to get the receipt URL and finish transactions.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/in-app-purchases.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Main process
const { inAppPurchase } = require('electron')
const PRODUCT_IDS = ['id1', 'id2']

// Listen for transactions as soon as possible.
inAppPurchase.on('transactions-updated', (event, transactions) => {
  if (!Array.isArray(transactions)) {
    return
  }

  // Check each transaction.
  transactions.forEach(function (transaction) {
    const payment = transaction.payment

    switch (transaction.transactionState) {
      case 'purchasing':
        console.log(`Purchasing ${payment.productIdentifier}...`)
        break

      case 'purchased': {
        console.log(`${payment.productIdentifier} purchased.`)

        // Get the receipt url.
        const receiptURL = inAppPurchase.getReceiptURL()

        console.log(`Receipt URL: ${receiptURL}`)

        // Submit the receipt file to the server and check if it is valid.
        // @see https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Chapters/ValidateRemotely.html
        // ...
        // If the receipt is valid, the product is purchased
        // ...

        // Finish the transaction.
        inAppPurchase.finishTransactionByDate(transaction.transactionDate)

        break
      }

      case 'failed':

        console.log(`Failed to purchase ${payment.productIdentifier}.`)

        // Finish the transaction.
        inAppPurchase.finishTransactionByDate(transaction.transactionDate)

        break
      case 'restored':

        console.log(`The purchase of ${payment.productIdentifier} has been restored.`)

        break
      case 'deferred':

        console.log(`The purchase of ${payment.productIdentifier} has been deferred.`)

        break
      default:
        break
    }
  })
})

// Check if the user is allowed to make in-app purchase.
if (!inAppPurchase.canMakePayments()) {
  console.log('The user is not allowed to make in-app purchase.')
}

// Retrieve and display the product descriptions.
inAppPurchase.getProducts(PRODUCT_IDS).then(products => {
  // Check the parameters.
  if (!Array.isArray(products) || products.length <= 0) {
    console.log('Unable to retrieve the product informations.')
    return
  }

  // Display the name and price of each product.
  products.forEach(product => {
    console.log(`The price of ${product.localizedTitle} is ${product.formattedPrice}.`)
  })

  // Ask the user which product he/she wants to purchase.
  const selectedProduct = products[0]
  const selectedQuantity = 1

  // Purchase the selected product.
inAppPurchase.purchaseProduct(selectedProduct.productIdentifier, selectedQuantity).then(isProductValid => {
    if (!isProductValid) {
      console.log('The product is not valid.')
      return
    }

    console.log('The payment has been added to the payment queue.')
  })
})
```

----------------------------------------

TITLE: Import Electron Forge for Packaging in Shell
DESCRIPTION: This shell command uses npx to execute the Electron Forge CLI and import the current project. Electron Forge helps with packaging and distributing the application by modifying the project's package.json and installing necessary dependencies.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_7

LANGUAGE: sh
CODE:
```
npx @electron-forge/cli import
```

----------------------------------------

TITLE: Configuring Login Item for Squirrel.Windows Auto-Updater - Electron JavaScript
DESCRIPTION: Provides a JavaScript example demonstrating how to configure the application to launch at login using `app.setLoginItemSettings` when employing the Squirrel.Windows auto-updater. It correctly sets the path to the `Update.exe` and passes necessary arguments to launch the main application executable in a hidden state.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const appFolder = path.dirname(process.execPath)
const updateExe = path.resolve(appFolder, '..', 'Update.exe')
const exeName = path.basename(process.execPath)

app.setLoginItemSettings({
  openAtLogin: true,
  path: updateExe,
  args: [
    '--processStart', `""${exeName}""`,
    '--process-start-args', `""--hidden""`
  ]
})
```

----------------------------------------

TITLE: Handling certificate-error Event in Electron JavaScript
DESCRIPTION: This snippet shows how to handle the 'certificate-error' event emitted by the Electron `app` object. It allows custom logic to accept or reject certificates based on criteria like the URL. The example checks if the URL is 'https://github.com', prevents the default error, and trusts the certificate; otherwise, it denies it.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('certificate-error', (event, webContents, url, error, certificate, callback) => {
  if (url === 'https://github.com') {
    // Verification logic.
    event.preventDefault()
    callback(true)
  } else {
    callback(false)
  }
})
```

----------------------------------------

TITLE: Defining Full Window Draggable Region (HTML/CSS)
DESCRIPTION: This snippet shows how to make the entire content area of a frameless window draggable. This is done by applying the CSS property `-webkit-app-region: drag` to the `body` element's style. Be aware that this conflicts with clicking on interactive elements within the body unless they are explicitly excluded from the draggable region.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_7

LANGUAGE: html
CODE:
```
<body style=""-webkit-app-region: drag"">
</body>
```

----------------------------------------

TITLE: Handling Certificate Verification Electron JavaScript
DESCRIPTION: Shows how to use `setCertificateVerifyProc` to intercept and handle server certificate verification requests for a session. Requires a `BrowserWindow` instance and defines a custom verification function that receives request details and calls a callback to approve (0) or deny (-2) the certificate.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.webContents.session.setCertificateVerifyProc((request, callback) => {
  const { hostname } = request
  if (hostname === 'github.com') {
    callback(0)
  } else {
    callback(-2)
  }
})
```

----------------------------------------

TITLE: Skipping Electron Binary Download - sh
DESCRIPTION: Sets the ELECTRON_SKIP_BINARY_DOWNLOAD environment variable to 1 before running 'npm install'. This prevents the Electron binary from being downloaded during the npm installation process, useful in CI environments or when only package metadata is needed.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_6

LANGUAGE: sh
CODE:
```
ELECTRON_SKIP_BINARY_DOWNLOAD=1 npm install
```

----------------------------------------

TITLE: Defining getUserMedia Constraints for Full Desktop Capture (Electron, JavaScript)
DESCRIPTION: Defines the necessary constraints object for `navigator.mediaDevices.getUserMedia` to capture both audio and video from the entire desktop. It specifies `chromeMediaSource: 'desktop'` for both audio and video tracks. This constraint object is then passed to `getUserMedia` to initiate the capture.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/desktop-capturer.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const constraints = {
  audio: {
    mandatory: {
      chromeMediaSource: 'desktop'
    }
  },
  video: {
    mandatory: {
      chromeMediaSource: 'desktop'
    }
  }
}
```

----------------------------------------

TITLE: Querying and Setting Cookies in Electron
DESCRIPTION: This snippet demonstrates how to access the default session's `cookies` object and perform common operations. It shows how to query all cookies, query cookies for a specific URL, and set a new cookie using the asynchronous, Promise-based methods.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/cookies.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

// Query all cookies.
session.defaultSession.cookies.get({})
  .then((cookies) => {
    console.log(cookies)
  }).catch((error) => {
    console.log(error)
  })

// Query all cookies associated with a specific url.
session.defaultSession.cookies.get({ url: 'http://www.github.com' })
  .then((cookies) => {
    console.log(cookies)
  }).catch((error) => {
    console.log(error)
  })

// Set a cookie with the given cookie data;
// may overwrite equivalent cookies if they exist.
const cookie = { url: 'http://www.github.com', name: 'dummy_name', value: 'dummy' }
session.defaultSession.cookies.set(cookie)
  .then(() => {
    // success
  }, (error) => {
    console.error(error)
  })
```

----------------------------------------

TITLE: Finding Child Frames in Electron WebContents (JavaScript)
DESCRIPTION: This snippet shows how to access the main frame of a `WebContents` using `webContents.mainFrame` and then iterate through its direct child frames using the `frames` property. It provides an example of filtering these child frames based on their URL to identify specific embedded content like YouTube videos.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame-main.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

async function main () {
  const win = new BrowserWindow({ width: 800, height: 600 })
  await win.loadURL('https://reddit.com')

  const youtubeEmbeds = win.webContents.mainFrame.frames.filter((frame) => {
    try {
      const url = new URL(frame.url)
      return url.host === 'www.youtube.com'
    } catch {
      return false
    }
  })

  console.log(youtubeEmbeds)
}

main()
```

----------------------------------------

TITLE: Creating Persistent Session in Electron Javascript
DESCRIPTION: This code demonstrates using `session.fromPartition()` to get a specific session instance. It requests a persistent session named 'persist:name' and then logs its user agent. A new session is created if one with that partition doesn't exist. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
const ses = session.fromPartition('persist:name')
console.log(ses.getUserAgent())
```

----------------------------------------

TITLE: Injecting and Removing CSS Electron webContents JavaScript
DESCRIPTION: Shows how to insert CSS into a web page using `insertCSS`, asynchronously retrieve the key for the inserted stylesheet, and then immediately remove it using the `removeInsertedCSS` method.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_12

LANGUAGE: javascript
CODE:
```
contents.on('did-finish-load', async () => {
  const key = await contents.insertCSS('html, body { background-color: #f00; }')
  contents.removeInsertedCSS(key)
})
```

----------------------------------------

TITLE: Loading URL with POST Data in Electron BrowserWindow - JavaScript
DESCRIPTION: This snippet demonstrates how to perform an HTTP POST request when loading a URL in an Electron BrowserWindow. It uses the loadURL method with an options object, specifying postData as an array of UploadRawData (containing the body as a Buffer) and setting the extraHeaders for the content type. This allows sending data to the server when the page loads.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_12

LANGUAGE: javascript
CODE:
```
win.loadURL('http://localhost:8000/post', {
  postData: [{
    type: 'rawData',
    bytes: Buffer.from('hello=world')
  }],
  extraHeaders: 'Content-Type: application/x-www-form-urlencoded'
})
```

----------------------------------------

TITLE: Configuring npm for Electron Install (Shell)
DESCRIPTION: Provides a shell script to set various npm configuration environment variables required to instruct npm to build native modules specifically for Electron's version, architecture, runtime, and header location before running `npm install`. It also sets the HOME variable to manage the build cache.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-native-node-modules.md#_snippet_1

LANGUAGE: sh
CODE:
```
# Electron's version.
export npm_config_target=1.2.3
# The architecture of Electron, see https://electronjs.org/docs/tutorial/support#supported-platforms
# for supported architectures.
export npm_config_arch=x64
export npm_config_target_arch=x64
# Download headers for Electron.
export npm_config_disturl=https://electronjs.org/headers
# Tell node-pre-gyp that we are building for Electron.
export npm_config_runtime=electron
# Tell node-pre-gyp to build module from source code.
export npm_config_build_from_source=true
# Install all dependencies, and store cache to ~/.electron-gyp.
HOME=~/.electron-gyp npm install
```

----------------------------------------

TITLE: Get Page Title - Electron webview - JavaScript
DESCRIPTION: Returns the title of the guest page currently loaded in the webview. This method does not require any parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_19

LANGUAGE: JavaScript
CODE:
```
<webview>.getTitle()
```

----------------------------------------

TITLE: Opening Window with Features String - JavaScript
DESCRIPTION: Demonstrates using the standard `window.open` method in a renderer process, providing a URL, target frame name, and a comma-separated string of features and options, which Electron parses to configure the new window (a `BrowserWindowProxy` by default). Options like window position, frame visibility, and basic web preferences can be set here.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/window-open.md#_snippet_0

LANGUAGE: javascript
CODE:
```
window.open('https://github.com', '_blank', 'top=500,left=200,frame=false,nodeIntegration=no')
```

----------------------------------------

TITLE: Registering File Protocol (Custom Session) in Electron (JavaScript)
DESCRIPTION: Explains how to register a custom protocol scheme ('atom') for a specific `session` object obtained from a partition (`persist:example`). This is necessary for windows using that custom session to handle the protocol correctly. Requires obtaining the session object via `session.fromPartition`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/protocol.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { session, app, protocol, BrowserWindow } = require('electron')
const path = require('path')

app.whenReady().then(() => {
  const partition = 'persist:example'
  const ses = session.fromPartition(partition)

  ses.protocol.registerFileProtocol('atom', (request, callback) => {
    const url = request.url.substr(7)
    callback({ path: path.normalize(`${__dirname}/${url}`) })
  })

  mainWindow = new BrowserWindow({ webPreferences: { partition } })
})
```

----------------------------------------

TITLE: Connecting WebDriverJs to Electron ChromeDriver and running test (javascript)
DESCRIPTION: JavaScript code using `selenium-webdriver` to connect to the ChromeDriver server running locally on port 9515. It configures capabilities to specify the path to the Electron binary, then performs a simple web test (navigating, searching, waiting). Requires `selenium-webdriver` package and the ChromeDriver server running.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const webdriver = require('selenium-webdriver')

const driver = new webdriver.Builder()
  // The ""9515"" is the port opened by chrome driver.
  .usingServer('http://localhost:9515')
  .withCapabilities({
    chromeOptions: {
      // Here is the path to your Electron binary.
      binary: '/Path-to-Your-App.app/Contents/MacOS/Electron'
    }
  })
  .forBrowser('electron')
  .build()

driver.get('http://www.google.com')
driver.findElement(webdriver.By.name('q')).sendKeys('webdriver')
driver.findElement(webdriver.By.name('btnG')).click()
driver.wait(() => {
  return driver.getTitle().then((title) => {
    return title === 'webdriver - Google Search'
  })
}, 1000)

driver.quit()
```

----------------------------------------

TITLE: Making Electron Window Click-Through (JavaScript)
DESCRIPTION: This snippet demonstrates how to make an Electron window ignore all mouse events, effectively making it 'click-through'. This is achieved by calling the `setIgnoreMouseEvents(true)` method on the `BrowserWindow` instance. Note that this also makes the web page oblivious to mouse movement.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.setIgnoreMouseEvents(true)
```

----------------------------------------

TITLE: Registering File Protocol in Electron Session JavaScript
DESCRIPTION: This code demonstrates registering a custom file protocol handler ('atom') for a specific session partition in Electron. It retrieves the protocol object from a partitioned session and uses `registerFileProtocol` to map requested URLs to local file paths after the `app` is ready.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const { app, session } = require('electron')
const path = require('path')

app.whenReady().then(() => {
  const protocol = session.fromPartition('some-partition').protocol
  if (!protocol.registerFileProtocol('atom', (request, callback) => {
    const url = request.url.substr(7)
    callback({ path: path.normalize(`${__dirname}/${url}`) })
  })) {
    console.error('Failed to register protocol')
  }
})
```

----------------------------------------

TITLE: Restoring Global Timer Functions in Preload Script (Javascript)
DESCRIPTION: Demonstrates how to use the `process.once('loaded', ...)` event in an Electron preload script to capture Node.js global timer functions (`setImmediate`, `clearImmediate`) before Electron's initialization might remove them, and then reattach them to the `global` scope when the page begins loading. This is particularly useful when Node integration is turned off for a renderer process.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/process.md#_snippet_0

LANGUAGE: javascript
CODE:
```
// preload.js
const _setImmediate = setImmediate
const _clearImmediate = clearImmediate
process.once('loaded', () => {
  global.setImmediate = _setImmediate
  global.clearImmediate = _clearImmediate
})
```

----------------------------------------

TITLE: Configuring Electron BrowserWindow for Worker Node Integration JavaScript
DESCRIPTION: This snippet shows how to configure an Electron BrowserWindow to enable Node.js integration within Web Workers by setting the `nodeIntegrationInWorker` option to `true` in the `webPreferences`. This allows Web Workers spawned from this window's renderer process to access Node.js APIs. It works independently of `nodeIntegration` but requires the `sandbox` option not to be `true`.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/multithreading.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow({
  webPreferences: {
    nodeIntegrationInWorker: true
  }
})
```

----------------------------------------

TITLE: Handling Login Cancellation in Electron ClientRequest - JavaScript
DESCRIPTION: Illustrates how providing an empty `callback()` call within the 'login' event handler for an Electron ClientRequest will cancel the ongoing request due to authentication failure. It also shows how to listen for the 'response' event and subsequently handle potential errors on the response object that arise from the cancellation.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/client-request.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
request.on('response', (response) => {
  console.log(`STATUS: ${response.statusCode}`);
  response.on('error', (error) => {
    console.log(`ERROR: ${JSON.stringify(error)}`)
  })
})
request.on('login', (authInfo, callback) => {
  callback()
})
```

----------------------------------------

TITLE: Replacing contentTracing.getTraceBufferUsage Callback - JavaScript
DESCRIPTION: The callback-based contentTracing.getTraceBufferUsage method is deprecated in Electron 6.0. This snippet shows its replacement with a promise-based API. The new method returns a Promise that resolves with an object containing percentage and value fields when the trace buffer usage information is available. Requires the contentTracing module.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_20

LANGUAGE: javascript
CODE:
```
// Deprecated
contentTracing.getTraceBufferUsage((percentage, value) => {
  // do something
})
```

LANGUAGE: javascript
CODE:
```
// Replace with
contentTracing.getTraceBufferUsage().then(infoObject => {
  // infoObject has percentage and value fields
})
```

----------------------------------------

TITLE: Replacing powerMonitor.querySystemIdleState - JavaScript
DESCRIPTION: The asynchronous powerMonitor.querySystemIdleState method was removed in Electron 7.0. This snippet shows its replacement with the synchronous powerMonitor.getSystemIdleState API, which returns the idle state directly instead of using a callback. Requires the powerMonitor module.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_16

LANGUAGE: javascript
CODE:
```
// Removed in Electron 7.0
powerMonitor.querySystemIdleState(threshold, callback)
```

LANGUAGE: javascript
CODE:
```
// Replace with synchronous API
const idleState = powerMonitor.getSystemIdleState(threshold)
```

----------------------------------------

TITLE: Sending MessagePort (Renderer & Main)
DESCRIPTION: This example shows how to use `ipcRenderer.postMessage` to send a message and transfer ownership of a `MessagePort` object from the renderer process to the main process. The main process receives the message and accesses the transferred port via the `event.ports` array.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/ipc-renderer.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Renderer process
const { port1, port2 } = new MessageChannel()
ipcRenderer.postMessage('port', { message: 'hello' }, [port1])

// Main process
ipcMain.on('port', (e, msg) => {
  const [port] = e.ports
  // ...
})
```

----------------------------------------

TITLE: Writing Bookmark with Fallback Text using Electron Clipboard (JavaScript)
DESCRIPTION: This example demonstrates how to write both a bookmark (title and URL) and a fallback plain text URL to the clipboard simultaneously using `clipboard.write`. This is useful for applications on Windows that may not fully support pasting bookmarks directly.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeBookmark({
  text: 'https://electronjs.org',
  bookmark: 'Electron Homepage'
})
```

----------------------------------------

TITLE: Handling found-in-page event and starting search in Electron webview (JavaScript)
DESCRIPTION: This example shows how to listen for the `found-in-page` event to potentially stop a find operation (`webview.stopFindInPage`) and how to initiate a new search for text within the webview's guest page using `webview.findInPage`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_66

LANGUAGE: javascript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('found-in-page', (e) => {
  webview.stopFindInPage('keepSelection')
})

const requestId = webview.findInPage('test')
console.log(requestId)
```

----------------------------------------

TITLE: Writing HTML to Electron Clipboard (JavaScript)
DESCRIPTION: This snippet shows how to write a string containing HTML markup to the default system clipboard using the `clipboard.writeHTML()` method. It's a straightforward example of placing formatted text onto the clipboard.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeHTML('<b>Hi</b')
```

----------------------------------------

TITLE: Selecting Client Certificate on Request in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to handle the 'select-client-certificate' event in Electron, which is emitted when a server requests a client certificate. It prevents the default behavior and programmatically selects the first certificate from the provided list (`list[0]`) by calling the `callback` function. This is useful for implementing custom certificate selection logic.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('select-client-certificate', (event, webContents, url, list, callback) => {
  event.preventDefault()
  callback(list[0])
})
```

----------------------------------------

TITLE: Disabling Text Selection in Draggable Region (CSS)
DESCRIPTION: To prevent accidental text selection when dragging a frameless window (e.g., dragging a custom titlebar), you should disable text selection for elements within the draggable region. This is achieved by applying the CSS property `-webkit-user-select: none` along with `-webkit-app-region: drag` to the draggable element.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_9

LANGUAGE: css
CODE:
```
.titlebar {
  -webkit-user-select: none;
  -webkit-app-region: drag;
}
```

----------------------------------------

TITLE: Displaying DevTools in Separate BrowserWindow Electron Main JavaScript
DESCRIPTION: Illustrates how to use a dedicated Electron BrowserWindow instance to display the DevTools for another window. It creates two BrowserWindows, loads content in the main window, sets the devtools window's webContents as the devtools target, and then opens the devtools in detached mode. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_22

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null
let devtools = null

app.whenReady().then(() => {
  win = new BrowserWindow()
  devtools = new BrowserWindow()
  win.loadURL('https://github.com')
  win.webContents.setDevToolsWebContents(devtools.webContents)
  win.webContents.openDevTools({ mode: 'detach' })
})
```

----------------------------------------

TITLE: Packaging with Unpack Option - Shell
DESCRIPTION: This command packages the application into an asar archive but excludes files matching the `--unpack` pattern (*.node), leaving them in a companion .unpacked directory.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_10

LANGUAGE: shell
CODE:
```
asar pack app app.asar --unpack *.node
```

----------------------------------------

TITLE: Handling Context Menu for Spellcheck Electron JavaScript
DESCRIPTION: Demonstrates how to listen for the `context-menu` event on a `webContents` instance to build a native context menu incorporating spellcheck results. It iterates through spelling suggestions to add menu items and adds an option to add a misspelled word to the dictionary. Requires the `Menu` and `MenuItem` modules from Electron.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/spellchecker.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
const { Menu, MenuItem } = require('electron')

myWindow.webContents.on('context-menu', (event, params) => {
  const menu = new Menu()

  // Add each spelling suggestion
  for (const suggestion of params.dictionarySuggestions) {
    menu.append(new MenuItem({
      label: suggestion,
      click: () => mainWindow.webContents.replaceMisspelling(suggestion)
    }))
  }

  // Allow users to add the misspelled word to the dictionary
  if (params.misspelledWord) {
    menu.append(
      new MenuItem({
        label: 'Add to dictionary',
        click: () => mainWindow.webContents.session.addWordToSpellCheckerDictionary(params.misspelledWord)
      })
    )
  }

  menu.popup()
})
```

----------------------------------------

TITLE: Handling Electron ClientRequest Login Event - JavaScript
DESCRIPTION: Demonstrates subscribing to the 'login' event on an Electron ClientRequest instance. This event is triggered when an authenticating proxy or server requires credentials. The handler receives 'authInfo' and a 'callback' function, which must be called with the username and password to continue the request with authentication.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/client-request.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
request.on('login', (authInfo, callback) => {
  callback('username', 'password')
})
```

----------------------------------------

TITLE: Reading File from asar using Node fs - JavaScript
DESCRIPTION: This snippet demonstrates reading a file located inside an asar archive using Node.js's built-in `fs.readFileSync` function, which is patched by Electron to treat asar archives as virtual directories.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const fs = require('fs')
fs.readFileSync('/path/to/example.asar/file.txt')
```

----------------------------------------

TITLE: Adding Recent Documents Menu macOS JSON
DESCRIPTION: This JSON snippet provides a template structure for adding a standard 'Recent Documents' submenu to the application's main menu on macOS. It uses predefined roles ('recentdocuments', 'clearrecentdocuments') to automatically manage the list and clearing functionality.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/recent-documents.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""submenu"":[
    {
      ""label"":""Open Recent"",
      ""role"":""recentdocuments"",
      ""submenu"":[
        {
          ""label"":""Clear Recent"",
          ""role"":""clearrecentdocuments""
        }
      ]
    }
  ]
}
```

----------------------------------------

TITLE: Handling Electron app login Event (JavaScript)
DESCRIPTION: Shows how to listen for the `app` 'login' event in Electron's main process. It prevents the default cancellation and calls the provided callback function with a hardcoded username and password to satisfy the authentication request. This is used for providing credentials for basic auth prompts.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('login', (event, webContents, details, authInfo, callback) => {
  event.preventDefault()
  callback('username', 'secret')
})
```

----------------------------------------

TITLE: Getting Available Formats from Electron Clipboard (JavaScript)
DESCRIPTION: This snippet shows how to use the `clipboard.availableFormats()` method to retrieve a list of data formats currently available on the default clipboard. The returned array of strings is then printed to the console.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const formats = clipboard.availableFormats()
console.log(formats)
// [ 'text/plain', 'text/html' ]
```

----------------------------------------

TITLE: HTML meta Tag for Theme Color Electron webview
DESCRIPTION: This HTML snippet shows the <meta> tag configuration used to set a page's theme color. When a webview encounters this tag with name='theme-color', it triggers the 'did-change-theme-color' event, passing the specified content value (a color string) as the themeColor parameter. It is typically used within the head of an HTML document loaded in the webview.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_71

LANGUAGE: HTML
CODE:
```
<meta name='theme-color' content='#ff0000'>
```

----------------------------------------

TITLE: Opening Window and Using Proxy - Renderer Process (BrowserWindowProxy)
DESCRIPTION: Illustrates calling `window.open` in the renderer process when `nativeWindowOpen` is false (the default). It receives a `BrowserWindowProxy` object, which provides a limited API for interacting with the new window, such as posting messages.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/window-open.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// renderer.js
const windowProxy = window.open('https://github.com/', null, 'minimizable=false')
windowProxy.postMessage('hi', '*')

```

----------------------------------------

TITLE: Start Electron REPL (Global Install) - sh
DESCRIPTION: This command starts Electron in interactive (REPL) mode for the main process when Electron is installed globally. It assumes the `electron` executable is available in the system's PATH.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/repl.md#_snippet_1

LANGUAGE: sh
CODE:
```
electron --interactive
```

----------------------------------------

TITLE: Appending Proxy Bypass List Switch Electron Javascript
DESCRIPTION: Demonstrates using `app.commandLine.appendSwitch` to set the `--proxy-bypass-list` switch. This switch specifies a semi-colon-separated list of hosts for which the configured proxy server should be bypassed, including local addresses and specific patterns.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/command-line-switches.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.commandLine.appendSwitch('proxy-bypass-list', '<local>;*.google.com;*foo.com;1.2.3.4:5678')
```

----------------------------------------

TITLE: Manual Packaging Structure Windows/Linux Plaintext
DESCRIPTION: This snippet shows the directory structure for manually packaging an Electron application on Windows and Linux. The application's source files (`package.json`, `main.js`, `index.html`) are placed inside the `resources/app` directory next to the Electron executable.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_1

LANGUAGE: plaintext
CODE:
```
electron/resources/app
├── package.json
├── main.js
└── index.html
```

----------------------------------------

TITLE: Handling app-command Event for Mouse Navigation in Electron Javascript
DESCRIPTION: Illustrates listening for the 'app-command' event on an Electron BrowserWindow instance. This specific example handles the 'browser-backward' command, commonly triggered by extra mouse buttons, and navigates the window's web contents back if possible using `win.webContents.goBack()`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.on('app-command', (e, cmd) => {
  // Navigate the window back when the user hits their mouse back button
  if (cmd === 'browser-backward' && win.webContents.canGoBack()) {
    win.webContents.goBack()
  }
})
```

----------------------------------------

TITLE: Spawning Electron Programmatically Javascript
DESCRIPTION: Demonstrates how to require the `electron` package within a Node.js script to get the path to the Electron binary and then use Node's `child_process` module to spawn an Electron instance.
SOURCE: https://github.com/discord/electron/blob/main/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const electron = require('electron')
const proc = require('child_process')

// will print something similar to /Users/maf/.../Electron
console.log(electron)

// spawn Electron
const child = proc.spawn(electron)
```

----------------------------------------

TITLE: Excluding Elements from Draggable Region (CSS)
DESCRIPTION: When a parent element or the entire window is marked as draggable using `-webkit-app-region: drag`, interactive elements like buttons within that region must be explicitly marked as non-draggable to be clickable. This is done by applying the CSS property `-webkit-app-region: no-drag` to those elements.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_8

LANGUAGE: css
CODE:
```
button {
  -webkit-app-region: no-drag;
}
```

----------------------------------------

TITLE: Embedding DevTools in Webview Electron Renderer HTML
DESCRIPTION: Provides the HTML and renderer-process JavaScript code to embed the Electron DevTools within a `<webview>` tag. It sets up two webviews, one for the main content and one for the devtools, and uses `ipcRenderer` to send the webContents IDs to the main process for configuration. Requires `<webview>` tag support enabled.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_20

LANGUAGE: html
CODE:
```
<html>
<head>
  <style type=""text/css"">
    * { margin: 0; }
    #browser { height: 70%; }
    #devtools { height: 30%; }
  </style>
</head>
<body>
  <webview id=""browser"" src=""https://github.com""></webview>
  <webview id=""devtools"" src=""about:blank""></webview>
  <script>
    const { ipcRenderer } = require('electron')
    const emittedOnce = (element, eventName) => new Promise(resolve => {
      element.addEventListener(eventName, event => resolve(event), { once: true })
    })
    const browserView = document.getElementById('browser')
    const devtoolsView = document.getElementById('devtools')
    const browserReady = emittedOnce(browserView, 'dom-ready')
    const devtoolsReady = emittedOnce(devtoolsView, 'dom-ready')
    Promise.all([browserReady, devtoolsReady]).then(() => {
      const targetId = browserView.getWebContentsId()
      const devtoolsId = devtoolsView.getWebContentsId()
      ipcRenderer.send('open-devtools', targetId, devtoolsId)
    })
  </script>
</body>
</html>
```

----------------------------------------

TITLE: Navigate To Offset - Electron webview - JavaScript
DESCRIPTION: Navigates to a page in the webview's history located at a specific offset relative to the current page. Requires an integer `offset`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_33

LANGUAGE: JavaScript
CODE:
```
<webview>.goToOffset(offset)
```

----------------------------------------

TITLE: Setting Session Partition webview HTML
DESCRIPTION: Uses the `partition` attribute to assign the guest page to a specific session. Prefacing the partition name with `persist:` makes the session persistent across application restarts.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_10

LANGUAGE: HTML
CODE:
```
<webview src=""https://github.com"" partition=""persist:github""></webview>
<webview src=""https://electronjs.org"" partition=""electron""></webview>
```

----------------------------------------

TITLE: Execute Replace - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `replace` within the focused element of the webview's guest page, typically replacing a selection with the provided text. Requires the `text` string.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_59

LANGUAGE: JavaScript
CODE:
```
<webview>.replace(text)
```

----------------------------------------

TITLE: Basic Usage of powerSaveBlocker Electron JavaScript
DESCRIPTION: This snippet demonstrates the basic workflow for using Electron's `powerSaveBlocker` module. It shows how to require the module in the main process, start a power save blocker of type `prevent-display-sleep`, check if the blocker is active using its ID, and finally stop the blocker.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/power-save-blocker.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { powerSaveBlocker } = require('electron')

const id = powerSaveBlocker.start('prevent-display-sleep')
console.log(powerSaveBlocker.isStarted(id))

powerSaveBlocker.stop(id)
```

----------------------------------------

TITLE: Defining Snapcraft config from source; YAML
DESCRIPTION: Configures a `snapcraft.yaml` file to build a Snap package directly from Electron application source code. It specifies metadata, base, confinement, application command, required plugs, and uses `electron-packager` within the build process.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_3

LANGUAGE: yaml
CODE:
```
name: electron-packager-hello-world
version: '0.1'
summary: Hello World Electron app
description: |
  Simple Hello World Electron app as an example
base: core18
confinement: strict
grade: stable

apps:
  electron-packager-hello-world:
    command: electron-quick-start/electron-quick-start --no-sandbox
    extensions: [gnome-3-34]
    plugs:
    - browser-support
    - network
    - network-bind
    environment:
      # Correct the TMPDIR path for Chromium Framework/Electron to ensure
      # libappindicator has readable resources.
      TMPDIR: $XDG_RUNTIME_DIR

parts:
  electron-quick-start:
    plugin: nil
    source: https://github.com/electron/electron-quick-start.git
    override-build: |
        npm install electron electron-packager
        npx electron-packager . --overwrite --platform=linux --output=release-build --prune=true
        cp -rv ./electron-quick-start-linux-* $SNAPCRAFT_PART_INSTALL/electron-quick-start
    build-snaps:
    - node/14/stable
    build-packages:
    - unzip
    stage-packages:
    - libnss3
    - libnspr4
```

----------------------------------------

TITLE: Adding Recent Document Electron JavaScript
DESCRIPTION: This snippet shows how to add a specific file path to the operating system's recent documents list for the Electron application using the `app.addRecentDocument` API. This makes the document accessible from the OS's Jump List (Windows) or dock menu (macOS).
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/recent-documents.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.addRecentDocument('/Users/USERNAME/Desktop/work.type')
```

----------------------------------------

TITLE: Handling close event in Electron webview (JavaScript)
DESCRIPTION: This example demonstrates how to handle the `close` event, which is fired when the guest page inside the `<webview>` attempts to close itself. The snippet navigates the webview to `about:blank` as a response.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_70

LANGUAGE: javascript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('close', () => {
  webview.src = 'about:blank'
})
```

----------------------------------------

TITLE: Handling IPC Messages in Electron App - Node.js
DESCRIPTION: This snippet shows how the Electron renderer or main process can listen for messages sent from the parent process (the test suite) using `process.on('message')`. It also demonstrates how to send messages back to the parent process using `process.send()`. This enables two-way communication for testing purposes.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/automated-testing-with-a-custom-driver.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// listen for IPC messages from the test suite
process.on('message', (msg) => {
  // ...
})

// send an IPC message to the test suite
process.send({ my: 'message' })
```

----------------------------------------

TITLE: Implementing Custom Spellcheck Provider with node-spellchecker in Electron
DESCRIPTION: This snippet provides an example of using the `webFrame.setSpellCheckProvider` method to integrate a custom spellchecker, specifically the `node-spellchecker` module. It sets up a provider for 'en-US' that filters misspelled words and calls the callback asynchronously. Requires the `electron` and `spellchecker` modules.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { webFrame } = require('electron')
const spellChecker = require('spellchecker')
webFrame.setSpellCheckProvider('en-US', {
  spellCheck (words, callback) {
    setTimeout(() => {
      const spellchecker = require('spellchecker')
      const misspelled = words.filter(x => spellchecker.isMisspelled(x))
      callback(misspelled)
    }, 0)
  }
})
```

----------------------------------------

TITLE: Bouncing Electron Dock Icon (Javascript)
DESCRIPTION: This code snippet demonstrates how to make the application's dock icon bounce using the `dock.bounce()` method provided by Electron. It accesses the `app` module from the 'electron' package and then calls `app.dock.bounce()` to initiate the default informational bounce effect.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/dock.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.dock.bounce()
```

----------------------------------------

TITLE: Injecting CSS on Page Load Electron webContents JavaScript
DESCRIPTION: Illustrates how to inject custom CSS into a web page after it has finished loading by listening for the `did-finish-load` event on the `webContents` object and using the `insertCSS` method.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_11

LANGUAGE: javascript
CODE:
```
contents.on('did-finish-load', () => {
  contents.insertCSS('html, body { background-color: #f00; }')
})
```

----------------------------------------

TITLE: Check if Renderer Crashed - Electron webview - JavaScript
DESCRIPTION: Checks if the renderer process associated with the webview has crashed. Returns a boolean value.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_34

LANGUAGE: JavaScript
CODE:
```
<webview>.isCrashed()
```

----------------------------------------

TITLE: Running electron-windows-store Conversion - PowerShell
DESCRIPTION: Executes the `electron-windows-store` command from an elevated PowerShell prompt to convert a packaged Electron application into a Windows Store .appx package. It requires specifying the input directory of the packaged app, the desired output directory for the .appx, the package version, and the package name.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-store-guide.md#_snippet_2

LANGUAGE: powershell
CODE:
```
electron-windows-store `
    --input-directory C:\myelectronapp `
    --output-directory C:\output\myelectronapp `
    --package-version 1.0.0.0 `
    --package-name myelectronapp
```

----------------------------------------

TITLE: Getting Frame ID from Incoming IPC Event Electron Main JavaScript
DESCRIPTION: Demonstrates how the main process can retrieve the `frameId` from which an IPC message originated. The `frameId` is available as a property on the `event` object passed to the `ipcMain.on` listener.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_26

LANGUAGE: javascript
CODE:
```
// In the main process
ipcMain.on('ping', (event) => {
  console.info('Message came from frameId:', event.frameId)
})
```

----------------------------------------

TITLE: Using the Custom Test Driver in Ava Test - Node.js
DESCRIPTION: This snippet illustrates how to integrate the custom `TestDriver` into an automated test suite using the `ava` framework. It shows how to instantiate the driver, passing the Electron path and app arguments, and how to use `ava`'s `before` and `after.always` hooks to ensure the Electron app is started before tests run (`app.isReady` waits for the app's readiness via RPC) and stopped afterward (`app.stop`). Requires the `ava` and `electron` dependencies.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/automated-testing-with-a-custom-driver.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const test = require('ava')
const electronPath = require('electron')

const app = new TestDriver({
  path: electronPath,
  args: ['./app'],
  env: {
    NODE_ENV: 'test'
  }
})
test.before(async t => {
  await app.isReady
})
test.after.always('cleanup', async t => {
  await app.stop()
})
```

----------------------------------------

TITLE: Listing asar Archive Contents - Shell
DESCRIPTION: This command uses the asar utility to list the files and directories contained within a specific asar archive file, showing its internal structure.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_2

LANGUAGE: shell
CODE:
```
asar list /path/to/example.asar
```

----------------------------------------

TITLE: Creating a Window on an External Display Electron JavaScript
DESCRIPTION: Shows how to find an external display using `screen.getAllDisplays()` and create a BrowserWindow positioned on it. It iterates through all available displays, searching for one whose bounds are not at (0,0), and creates a window with a small offset on the first found external display.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/screen.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, screen } = require('electron')

let win

app.whenReady().then(() => {
  const displays = screen.getAllDisplays()
  const externalDisplay = displays.find((display) => {
    return display.bounds.x !== 0 || display.bounds.y !== 0
  })

  if (externalDisplay) {
    win = new BrowserWindow({
      x: externalDisplay.bounds.x + 50,
      y: externalDisplay.bounds.y + 50
    })
    win.loadURL('https://github.com')
  }
})
```

----------------------------------------

TITLE: Enable Visual Zoom Limits Electron webContents JS
DESCRIPTION: Demonstrates how to enable and configure the visual zoom limits for an Electron `webContents` instance by calling `setVisualZoomLevelLimits` with desired minimum and maximum levels (e.g., 1 and 3). This re-enables pinch-to-zoom functionality which is disabled by default.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_14

LANGUAGE: javascript
CODE:
```
contents.setVisualZoomLevelLimits(1, 3)
```

----------------------------------------

TITLE: Accessing Electron Service Workers and Handling Events (JavaScript)
DESCRIPTION: This snippet demonstrates how to access the ServiceWorkers instance from the default Electron session, retrieve a list of all running service workers using `getAllRunning()`, and register a listener for the `console-message` event to handle and log messages from service workers, retrieving worker details using `getFromVersionID(versionId)`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/service-workers.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

// Get all service workers.
console.log(session.defaultSession.serviceWorkers.getAllRunning())

// Handle logs and get service worker info
session.defaultSession.serviceWorkers.on('console-message', (event, messageDetails) => {
  console.log(
    'Got service worker message',
    messageDetails,
    'from',
    session.defaultSession.serviceWorkers.getFromVersionID(messageDetails.versionId)
  )
})
```

----------------------------------------

TITLE: Appending Command Line Switches Electron Javascript
DESCRIPTION: Demonstrates how to add command line switches to the Electron application using the `app.commandLine.appendSwitch` method. Switches must be appended before the `app` module emits the `ready` event. Includes examples for `remote-debugging-port` and `host-rules`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/command-line-switches.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')
app.commandLine.appendSwitch('remote-debugging-port', '8315')
app.commandLine.appendSwitch('host-rules', 'MAP * 127.0.0.1')

app.whenReady().then(() => {
  // Your code here
})
```

----------------------------------------

TITLE: Setting Taskbar Icon Overlay with Electron.js
DESCRIPTION: This snippet demonstrates how to set a small overlay icon on a specific `BrowserWindow`'s taskbar icon using `win.setOverlayIcon`. It requires the `BrowserWindow` module from Electron and takes the path to the overlay image and a description string as arguments. This feature is used to provide persistent status notifications directly on the main application icon.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-taskbar.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow()

win.setOverlayIcon('path/to/overlay.png', 'Description for overlay')
```

----------------------------------------

TITLE: Installing electron-windows-store CLI - sh
DESCRIPTION: Installs the `electron-windows-store` command-line interface tool globally using npm, which is required to convert Electron applications to Windows Store (.appx) packages. This tool facilitates the packaging process by automating steps like flattening node_modules and using Windows SDK tools.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-store-guide.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install -g electron-windows-store
```

----------------------------------------

TITLE: Creating NativeImage from File Path in Electron JavaScript
DESCRIPTION: This snippet demonstrates how to explicitly create a `NativeImage` instance in Electron by loading an image from a specified file path using the `nativeImage.createFromPath()` method. It requires the `nativeImage` module from `electron`. The method returns an empty image if the path is invalid or the file is not a supported image format, and the resulting instance is logged.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/native-image.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const nativeImage = require('electron').nativeImage

const image = nativeImage.createFromPath('/Users/somebody/images/icon.png')
console.log(image)
```

----------------------------------------

TITLE: macOS Entitlements for Media Access
DESCRIPTION: Demonstrates additional keys to add to a macOS entitlements file (`.plist`) if the Electron application requires access to the microphone or camera using Electron's `systemPreferences.askForMediaAccess` API. Includes keys for audio input and camera access.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/code-signing.md#_snippet_2

LANGUAGE: XML
CODE:
```
<key>com.apple.security.device.audio-input</key>
<true/>
<key>com.apple.security.device.camera</key>
<true/>
```

----------------------------------------

TITLE: Requiring Installed Node.js Module - JavaScript
DESCRIPTION: Imports a specific module or client ('aws-sdk/clients/s3') from a Node.js package that has been installed as a project dependency. This makes the module's functionality available for use within the Electron application.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_15

LANGUAGE: javascript
CODE:
```
const S3 = require('aws-sdk/clients/s3')
```

----------------------------------------

TITLE: Updating Electron Tray Context Menu on Linux JavaScript
DESCRIPTION: This example shows how to modify an existing context menu item and then re-apply the context menu to the `Tray` icon. This re-application is necessary on Linux for changes to individual menu items to take effect. It uses the Electron `app`, `Menu`, and `Tray` modules.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/tray.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app, Menu, Tray } = require('electron')

let appIcon = null
app.whenReady().then(() => {
  appIcon = new Tray('/path/to/my/icon')
  const contextMenu = Menu.buildFromTemplate([
    { label: 'Item1', type: 'radio' },
    { label: 'Item2', type: 'radio' }
  ])

  // Make a change to the context menu
  contextMenu.items[1].checked = false

  // Call this again for Linux because we modified the context menu
  appIcon.setContextMenu(contextMenu)
})
```

----------------------------------------

TITLE: Loading an Unpacked Extension in Electron JavaScript
DESCRIPTION: This snippet shows how to load an unpacked Chrome extension into the default session of an Electron app. It requires the `electron` and `path` modules and must be called after the `app` module emits the `ready` event, utilizing `await` for the asynchronous operation.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_9

LANGUAGE: JavaScript
CODE:
```
const { app, session } = require('electron')
const path = require('path')

app.on('ready', async () => {
  await session.defaultSession.loadExtension(path.join(__dirname, 'react-devtools'))
  // Note that in order to use the React DevTools extension, you'll need to
  // download and unzip a copy of the extension.
})
```

----------------------------------------

TITLE: Eagerly Loading Modules - Node.js - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates an eager loading pattern common in traditional Node.js development. It immediately requires dependencies ('fs', 'foo-parser') and performs a synchronous file system operation (`readdirSync`) upon initialization. This can cause performance issues, especially startup delays, in applications sensitive to initial load time.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/performance.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const fs = require('fs')
const fooParser = require('foo-parser')

class Parser {
  constructor () {
    this.files = fs.readdirSync('.')
  }

  getParsedFiles () {
    return fooParser.parse(this.files)
  }
}

const parser = new Parser()

module.exports = { parser }
```

----------------------------------------

TITLE: Child Process App Sandbox Entitlements (XML)
DESCRIPTION: Defines the entitlements required for child processes within the sandboxed Electron application, such as framework helpers. It enables the app sandbox and allows inheritance of entitlements.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_1

LANGUAGE: XML
CODE:
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
  <dict>
    <key>com.apple.security.app-sandbox</key>
    <true/>
    <key>com.apple.security.inherit</key>
    <true/>
  </dict>
</plist>
```

----------------------------------------

TITLE: Verify Node.js and npm Versions (sh)
DESCRIPTION: This snippet provides standard shell commands (`sh`) to verify the successful installation of Node.js and npm on Unix-like systems (macOS, Linux). It runs `node -v` to display the Node.js version and `npm -v` to display the npm version, confirming they are installed and accessible in the system's PATH.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/development-environment.md#_snippet_0

LANGUAGE: sh
CODE:
```
node -v

npm -v
```

----------------------------------------

TITLE: Requiring Module from asar using Node require - JavaScript
DESCRIPTION: This snippet illustrates how to use Node.js's `require` function to load a JavaScript module that is located inside an asar archive.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_5

LANGUAGE: javascript
CODE:
```
require('./path/to/example.asar/dir/module.js')
```

----------------------------------------

TITLE: Checking Process Architecture JavaScript
DESCRIPTION: Illustrates common conditional logic used to select code paths based on the current process architecture. This pattern needs careful review when targeting arm64, as it typically only considers x64 or x86.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-arm.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
if (process.arch === 'x64') {
  // Do 64-bit thing...
} else {
  // Do 32-bit thing...
}
```

----------------------------------------

TITLE: Setting Spellchecker Languages Electron JavaScript
DESCRIPTION: Shows how to set the specific languages the spellchecker should use on Windows and Linux using the `setSpellCheckerLanguages` method of the window's session. It also demonstrates accessing an array of all available language codes via the `availableSpellCheckerLanguages` property. Requires an Electron BrowserWindow instance.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/spellchecker.md#_snippet_1

LANGUAGE: JavaScript
CODE:
```
// Sets the spellchecker to check English US and French
myWindow.session.setSpellCheckerLanguages(['en-US', 'fr'])

// An array of all available language codes
const possibleLanguages = myWindow.session.availableSpellCheckerLanguages
```

----------------------------------------

TITLE: Run Electron Application in Shell
DESCRIPTION: This shell command executes the 'start' script defined in the project's package.json file. As configured in the previous step, this command launches the Electron application using the specified main script.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_6

LANGUAGE: sh
CODE:
```
npm start
```

----------------------------------------

TITLE: Find In Page - Electron webview - JavaScript
DESCRIPTION: Starts a request to find all matches for the given `text` in the web page. Returns a request id. The result is delivered via the `found-in-page` event. Requires non-empty `text` and accepts optional search options.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_62

LANGUAGE: JavaScript
CODE:
```
<webview>.findInPage(text[, options])
```

----------------------------------------

TITLE: Writing and Reading RTF with Electron Clipboard (JavaScript)
DESCRIPTION: This example demonstrates writing a string formatted as Rich Text Format (RTF) to the clipboard and subsequently reading it back. The `readRTF` method retrieves the content, which is then printed to the console.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_5

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeRTF('{\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\nThis is some {\\b bold} text.\\par\n}')

const rtf = clipboard.readRTF()
console.log(rtf)
// {\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\nThis is some {\\b bold} text.\\par\n}
```

----------------------------------------

TITLE: Setting Electron BrowserWindow Background Color (Javascript)
DESCRIPTION: Creates a BrowserWindow and sets a `backgroundColor` option. This is recommended to provide a native feel during loading or if `ready-to-show` is slow, showing a solid color until content is rendered. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ backgroundColor: '#2e2c29' })
win.loadURL('https://github.com')
```

----------------------------------------

TITLE: Print Page - Electron webview - JavaScript
DESCRIPTION: Initiates printing of the webview's current guest page. Returns a Promise that resolves when the print operation is finished. Optional parameters allow customization of print settings like silent printing, background inclusion, device name, color, margins, orientation, scale, copies, page ranges, duplex mode, DPI, headers/footers, and page size.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_64

LANGUAGE: JavaScript
CODE:
```
<webview>.print([options])
```

----------------------------------------

TITLE: Simple Electron window visibility test with Spectron (javascript)
DESCRIPTION: A JavaScript function using Spectron to launch an Electron application, check if its main window is visible, verify its title, and then stop the app. It includes basic assertion and error handling. Requires the `spectron` package.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// A simple test to verify a visible window is opened with a title
const Application = require('spectron').Application
const assert = require('assert')

const myApp = new Application({
  path: '/Applications/MyApp.app/Contents/MacOS/MyApp'
})

const verifyWindowIsVisibleWithTitle = async (app) => {
  await app.start()
  try {
    // Check if the window is visible
    const isVisible = await app.browserWindow.isVisible()
    // Verify the window is visible
    assert.strictEqual(isVisible, true)
    // Get the window's title
    const title = await app.client.getTitle()
    // Verify the window's title
    assert.strictEqual(title, 'My App')
  } catch (error) {
    // Log any failures
    console.error('Test failed', error.message)
  }
  // Stop the application
  await app.stop()
}

verifyWindowIsVisibleWithTitle(myApp)
```

----------------------------------------

TITLE: Manual Packaging Structure macOS Plaintext
DESCRIPTION: This snippet illustrates the directory structure for manually packaging an Electron application on macOS. The application's source files (`package.json`, `main.js`, `index.html`) must be placed inside the `Contents/Resources/app` directory within the Electron application bundle.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
electron/Electron.app/Contents/Resources/app/
├── package.json
├── main.js
└── index.html
```

----------------------------------------

TITLE: Setting WebFrame Visual Zoom Limits in Electron
DESCRIPTION: This snippet demonstrates how to re-enable visual pinch-to-zoom in Electron by calling the `webFrame.setVisualZoomLevelLimits` method. It sets the minimum level to 1 and the maximum level to 3. This method is used to define the acceptable range for visual zoom.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame.md#_snippet_1

LANGUAGE: javascript
CODE:
```
webFrame.setVisualZoomLevelLimits(1, 3)
```

----------------------------------------

TITLE: Creating a Window that Fits Primary Display Electron JavaScript
DESCRIPTION: Demonstrates how to create a BrowserWindow that occupies the entire work area of the primary display using Electron's screen module. It waits for the app's 'ready' event, retrieves the primary display's work area size using `screen.getPrimaryDisplay().workAreaSize`, and creates a window with matching dimensions.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/screen.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, screen } = require('electron')

let win
app.whenReady().then(() => {
  const { width, height } = screen.getPrimaryDisplay().workAreaSize
  win = new BrowserWindow({ width, height })
  win.loadURL('https://github.com')
})
```

----------------------------------------

TITLE: Defining UI for Dark Mode Toggling in Electron HTML
DESCRIPTION: This HTML snippet defines the user interface for the example application. It includes a title, a paragraph displaying the current theme source, and two buttons to toggle dark mode and reset the theme to the system default. It links to external CSS for styling and a renderer process script for interactivity.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/dark-mode.md#_snippet_0

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<head>
    <meta charset=""UTF-8"">
    <title>Hello World!</title>
    <meta http-equiv=""Content-Security-Policy"" content=""script-src 'self' 'unsafe-inline';"" />
    <link rel=""stylesheet"" type=""text/css"" href=""./styles.css"">
</head>
<body>
    <h1>Hello World!</h1>
    <p>Current theme source: <strong id=""theme-source"">System</strong></p>

    <button id=""toggle-dark-mode"">Toggle Dark Mode</button>
    <button id=""reset-to-system"">Reset to System Theme</button>

    <script src=""renderer.js""></script>
  </body>
</body>
</html>
```

----------------------------------------

TITLE: Writing and Reading HTML with Electron Clipboard (JavaScript)
DESCRIPTION: This example illustrates how to write HTML markup to the default clipboard and then read it back. The `writeHTML` method includes a meta charset tag automatically. The read HTML content is stored and printed.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeHTML('<b>Hi</b>')
const html = clipboard.readHTML()

console.log(html)
// <meta charset='utf-8'><b>Hi</b>
```

----------------------------------------

TITLE: Handling console-message event in Electron webview (JavaScript)
DESCRIPTION: This snippet shows how to add an event listener to a `<webview>` element to capture console messages (`console-message` event) originating from the embedded guest page and log them to the embedder's console.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_65

LANGUAGE: javascript
CODE:
```
const webview = document.querySelector('webview')
webview.addEventListener('console-message', (e) => {
  console.log('Guest page logged a message:', e.message)
})
```

----------------------------------------

TITLE: Loading Unpacked Chrome Extension in Electron
DESCRIPTION: Loads an unpacked Chrome extension into the current persistent Electron session. It requires the path to the extension directory and returns a promise that resolves with the extension's ID upon successful loading. Note that this does not support `.crx` files or in-memory sessions.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/extensions.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')

session.loadExtension('path/to/unpacked/extension').then(({ id }) => {
  // ...
})
```

----------------------------------------

TITLE: Reading File in Renderer Process HTML
DESCRIPTION: An example of an Electron renderer process (web page) using a Node.js module (`fs`) to read a file. It requires the `fs` module and reads the content of the current file (`__filename`) asynchronously, logging it to the console. Requires `nodeIntegration` to be enabled in the BrowserWindow options.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/synopsis.md#_snippet_1

LANGUAGE: html
CODE:
```
<!DOCTYPE html>
<html>
<body>
<script>
  const fs = require('fs')
  console.log(fs.readFileSync(__filename, 'utf8'))
</script>
</body>
</html>
```

----------------------------------------

TITLE: Replacing win.setMenu(null) with removeMenu - JavaScript
DESCRIPTION: Setting a window's menu to null using win.setMenu(null) to remove it is deprecated in Electron 6.0. This snippet shows the new, more explicit method for removing the menu using win.removeMenu(), which achieves the same result. Requires a BrowserWindow instance.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_19

LANGUAGE: javascript
CODE:
```
// Deprecated
win.setMenu(null)
```

LANGUAGE: javascript
CODE:
```
// Replace with
win.removeMenu()
```

----------------------------------------

TITLE: Reload Page - Electron webview - JavaScript
DESCRIPTION: Reloads the current guest page, retrieving resources from the cache if available. This method has no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_24

LANGUAGE: JavaScript
CODE:
```
<webview>.reload()
```

----------------------------------------

TITLE: Exposing API without Context Isolation JavaScript
DESCRIPTION: This is the older method for exposing APIs from a preload script to the main window context when context isolation is disabled. It directly attaches properties or objects to the global `window` object, which can pose security risks as the website could potentially access or modify it.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/context-isolation.md#_snippet_1

LANGUAGE: javascript
CODE:
```
window.myAPI = {
  doAThing: () => {}
}
```

----------------------------------------

TITLE: Insert CSS - Electron webview - JavaScript
DESCRIPTION: Injects CSS into the current web page and returns a Promise that resolves with a unique key for the inserted stylesheet. This key can later be used to remove the CSS.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_37

LANGUAGE: JavaScript
CODE:
```
<webview>.insertCSS(css)
```

----------------------------------------

TITLE: Creating Transparent Electron Window (JavaScript)
DESCRIPTION: This snippet creates a frameless window that is also transparent. It requires setting both the `transparent` option to `true` and the `frame` option to `false`. Note that transparent windows have limitations, such as not being resizable on some platforms and potential issues on Windows (DWM disabled) or Linux (GPU/driver issues).
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ transparent: true, frame: false })
win.show()
```

----------------------------------------

TITLE: Manually Rebuilding with node-gyp (Shell)
DESCRIPTION: Shows how to navigate into a specific native module directory and use the `node-gyp` command directly to rebuild the module for a specified Electron target version, architecture, and header URL, overriding the default Node.js settings by setting the HOME environment variable.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-native-node-modules.md#_snippet_2

LANGUAGE: sh
CODE:
```
cd /path-to-module/
HOME=~/.electron-gyp node-gyp rebuild --target=1.2.3 --arch=x64 --dist-url=https://electronjs.org/headers
```

----------------------------------------

TITLE: Enabling Offscreen Rendering Electron JavaScript
DESCRIPTION: This snippet demonstrates how to configure an Electron application for offscreen rendering, specifically using the software output device mode by disabling hardware acceleration. It creates a new `BrowserWindow` with the `offscreen` web preference enabled, loads a specified URL, and registers a listener for the `paint` event to capture frame updates. The frame rate for rendering is also set.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/offscreen-rendering.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

app.disableHardwareAcceleration()

let win

app.whenReady().then(() => {
  win = new BrowserWindow({
    webPreferences: {
      offscreen: true
    }
  })

  win.loadURL('http://github.com')
  win.webContents.on('paint', (event, dirty, image) => {
    // updateBitmap(dirty, image.getBitmap())
  })
  win.webContents.setFrameRate(30)
})
```

----------------------------------------

TITLE: Installing Selenium WebDriverJs npm package (sh)
DESCRIPTION: Command to install the `selenium-webdriver` package using npm. This package provides the JavaScript bindings for the Selenium WebDriver API.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_4

LANGUAGE: sh
CODE:
```
npm install selenium-webdriver
```

----------------------------------------

TITLE: Check if Can Go Back - Electron webview - JavaScript
DESCRIPTION: Checks if there is a previous page in the navigation history that the webview can navigate back to. Returns a boolean.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_26

LANGUAGE: JavaScript
CODE:
```
<webview>.canGoBack()
```

----------------------------------------

TITLE: Initiate Download - Electron webview - JavaScript
DESCRIPTION: Starts a download for the resource at the given URL without navigating the webview page. Requires the URL string as a parameter.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_17

LANGUAGE: JavaScript
CODE:
```
<webview>.downloadURL(url)
```

----------------------------------------

TITLE: Setting GOOGLE_API_KEY in JavaScript
DESCRIPTION: Illustrates how to programmatically set the `GOOGLE_API_KEY` environment variable within the Electron main process using JavaScript. This key is necessary to enable geolocation services powered by Google Cloud Platform and must be configured before geolocation requests are made.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/environment-variables.md#_snippet_3

LANGUAGE: javascript
CODE:
```
process.env.GOOGLE_API_KEY = 'YOUR_KEY_HERE'
```

----------------------------------------

TITLE: Running Electron Tests with xvfb-maybe (sh)
DESCRIPTION: This command uses `xvfb-maybe` to execute Electron tests via `electron-mocha`. `xvfb-maybe` automatically detects if a headless environment is detected (like Linux without a display) and prepends the command with `xvfb-run` to start a virtual Xvfb display server before running the tests. On systems with a display (Windows, macOS), it runs the command directly.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/testing-on-headless-ci.md#_snippet_0

LANGUAGE: sh
CODE:
```
xvfb-maybe electron-mocha ./test/*.js
```

----------------------------------------

TITLE: Renaming Node.js Symbols in Renderer Process - HTML
DESCRIPTION: This HTML snippet demonstrates how to manually rename or delete Node.js symbols like 'require', 'exports', and 'module' from the 'window' object using an inline <script> tag. This allows front-end libraries that expect these names to function correctly while preserving access to 'require' via a new global variable ('window.nodeRequire').
SOURCE: https://github.com/discord/electron/blob/main/docs/faq.md#_snippet_3

LANGUAGE: html
CODE:
```
<head>
<script>
window.nodeRequire = require;
delete window.require;
delete window.exports;
delete window.module;
</script>
<script type=""text/javascript"" src=""jquery.js""></script>
</head>
```

----------------------------------------

TITLE: Setting Spellchecker Dictionary Download URL Electron JavaScript
DESCRIPTION: Provides an example of how to set a custom URL for downloading spellchecker dictionary files using the `setSpellCheckerDictionaryDownloadURL` method of the window's session. This allows developers to host dictionaries themselves instead of relying on the default Google CDN. Requires an Electron BrowserWindow instance.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/spellchecker.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
myWindow.session.setSpellCheckerDictionaryDownloadURL('https://example.com/dictionaries/')
```

----------------------------------------

TITLE: Enabling Blink Features webview HTML
DESCRIPTION: Uses the `enableblinkfeatures` attribute with a comma-separated string to activate specific experimental or non-default features within Chromium's Blink rendering engine for the guest content.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_13

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" enableblinkfeatures=""PreciseMemoryInfo, CSSVariables""></webview>
```

----------------------------------------

TITLE: Allowing Popups webview HTML
DESCRIPTION: Adds the boolean `allowpopups` attribute to the `<webview>` tag, enabling the guest page to open new browser windows (popups) via standard JavaScript methods like `window.open()`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_11

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" allowpopups></webview>
```

----------------------------------------

TITLE: Handling Move Conflict - Electron app - JavaScript
DESCRIPTION: Illustrates how to implement a custom `conflictHandler` for the `app.moveToApplicationsFolder` method on macOS. The handler is triggered when a conflict (specifically, an app of the same name already existing) occurs, presenting a dialog to the user to decide whether to proceed with the default move behavior or cancel.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_11

LANGUAGE: javascript
CODE:
```
app.moveToApplicationsFolder({
  conflictHandler: (conflictType) => {
    if (conflictType === 'exists') {
      return dialog.showMessageBoxSync({
        type: 'question',
        buttons: ['Halt Move', 'Continue Move'],
        defaultId: 0,
        message: 'An app of this name already exists'
      }) === 1
    }
  }
})
```

----------------------------------------

TITLE: Setting HTTP Referrer webview HTML
DESCRIPTION: Uses the `httpreferrer` attribute to manually set the HTTP referrer URL that is sent when the guest page navigates.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_7

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" httpreferrer=""http://cheng.guru""></webview>
```

----------------------------------------

TITLE: Auditing Accessibility with Spectron (Javascript)
DESCRIPTION: This snippet demonstrates how to perform an accessibility audit on the current window or webview using the Spectron testing framework. It calls the `auditAccessibility` method on the `app.client` object and checks the returned `audit` object for failures, logging the error message if issues are found. Requires Spectron installed and configured for Electron testing.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/accessibility.md#_snippet_0

LANGUAGE: javascript
CODE:
```
app.client.auditAccessibility().then(function (audit) {
  if (audit.failed) {
    console.error(audit.message)
  }
})
```

----------------------------------------

TITLE: Using Electron Debugger API (JavaScript)
DESCRIPTION: Demonstrates attaching the debugger to a `webContents` in Electron, handling `detach` and `message` events, and sending a command to enable network monitoring. It also includes an example of detaching the debugger based on a specific network request and shows error handling for the attachment process.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/debugger.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

try {
  win.webContents.debugger.attach('1.1')
} catch (err) {
  console.log('Debugger attach failed : ', err)
}

win.webContents.debugger.on('detach', (event, reason) => {
  console.log('Debugger detached due to : ', reason)
})

win.webContents.debugger.on('message', (event, method, params) => {
  if (method === 'Network.requestWillBeSent') {
    if (params.request.url === 'https://www.github.com') {
      win.webContents.debugger.detach()
    }
  }
})

win.webContents.debugger.sendCommand('Network.enable')
```

----------------------------------------

TITLE: Connecting WebdriverIO to Electron ChromeDriver and running test (javascript)
DESCRIPTION: JavaScript code using `webdriverio` to create a remote client connection to the ChromeDriver server on localhost port 9515. It configures capabilities to use the Electron binary, initializes the client, performs a simple search test, logs the title, and ends the session. Requires `webdriverio` package and the ChromeDriver server running.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const webdriverio = require('webdriverio')
const options = {
  host: 'localhost', // Use localhost as chrome driver server
  port: 9515, // ""9515"" is the port opened by chrome driver.
  desiredCapabilities: {
    browserName: 'chrome',
    'goog:chromeOptions': {
      binary: '/Path-to-Your-App/electron', // Path to your Electron binary.
      args: [/* cli arguments */] // Optional, perhaps 'app=' + /path/to/your/app/
    }
  }
}

const client = webdriverio.remote(options)

client
  .init()
  .url('http://google.com')
  .setValue('#q', 'webdriverio')
  .click('#btnG')
  .getTitle().then((title) => {
    console.log('Title was: ' + title)
  })
  .end()
```

----------------------------------------

TITLE: Starting Electron ChromeDriver server for WebDriverJs (sh)
DESCRIPTION: Command to execute the installed `chromedriver` binary from the `node_modules/.bin` directory. This starts the ChromeDriver server on a default port (usually 9515), allowing WebDriver clients to connect. Requires `electron-chromedriver` to be installed.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_3

LANGUAGE: sh
CODE:
```
./node_modules/.bin/chromedriver
Starting ChromeDriver (v2.10.291558) on port 9515
Only local connections are allowed.
```

----------------------------------------

TITLE: Check if Waiting for Response - Electron webview - JavaScript
DESCRIPTION: Checks if the guest page is waiting for the initial response for its main resource. Returns a boolean indicating the waiting state.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_22

LANGUAGE: JavaScript
CODE:
```
<webview>.isWaitingForResponse()
```

----------------------------------------

TITLE: Replacing webview.getWebContents (Electron 9)
DESCRIPTION: Demonstrates how to replace the removed webview.getWebContents() method by getting the webContents ID using webview.getWebContentsId() and then using remote.webContents.fromId() to retrieve the webContents object.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_10

LANGUAGE: javascript
CODE:
```
// Removed in Electron 9.0
webview.getWebContents()
```

LANGUAGE: javascript
CODE:
```
// Replace with
const { remote } = require('electron')
remote.webContents.fromId(webview.getWebContentsId())
```

----------------------------------------

TITLE: Get Current URL - Electron webview - JavaScript
DESCRIPTION: Returns the current URL of the guest page loaded in the webview. The method takes no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_18

LANGUAGE: JavaScript
CODE:
```
<webview>.getURL()
```

----------------------------------------

TITLE: Set User Agent - Electron webview - JavaScript
DESCRIPTION: Overrides the default user agent string used by the webview for network requests. Requires the new `userAgent` string as a parameter.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_35

LANGUAGE: JavaScript
CODE:
```
<webview>.setUserAgent(userAgent)
```

----------------------------------------

TITLE: Getting WebFrame Resource Usage in Electron
DESCRIPTION: This snippet demonstrates how to retrieve the memory usage statistics for various resources within the Blink rendering engine using `webFrame.getResourceUsage`. It calls the method and logs the returned object, which contains details about images, scripts, CSS, fonts, and other resource caches. Requires the Electron module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { webFrame } = require('electron')
console.log(webFrame.getResourceUsage())
```

----------------------------------------

TITLE: Installing WebdriverIO npm package (sh)
DESCRIPTION: Command to install the core `webdriverio` package using npm. This package provides the WebdriverIO framework for automated testing.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_8

LANGUAGE: sh
CODE:
```
npm install webdriverio
```

----------------------------------------

TITLE: Check if Main Frame Loading - Electron webview - JavaScript
DESCRIPTION: Checks whether the main frame of the guest page is currently loading. This is distinct from checking if sub-frames or resources are loading.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_21

LANGUAGE: JavaScript
CODE:
```
<webview>.isLoadingMainFrame()
```

----------------------------------------

TITLE: Setting Thumbnail Toolbar Buttons with Electron.js
DESCRIPTION: This snippet demonstrates adding a thumbnail toolbar with interactive buttons to a specific `BrowserWindow` instance in Electron. It uses `win.setThumbarButtons`, requiring the `BrowserWindow` module and optionally `path` for icon paths. Each button object defines its tooltip, icon path, flags, and a click handler function, allowing users to interact with the window from its taskbar preview.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-taskbar.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const path = require('path')

const win = new BrowserWindow()

win.setThumbarButtons([
  {
    tooltip: 'button1',
    icon: path.join(__dirname, 'button1.png'),
    click () { console.log('button1 clicked') }
  }, {
    tooltip: 'button2',
    icon: path.join(__dirname, 'button2.png'),
    flags: ['enabled', 'dismissonclick'],
    click () { console.log('button2 clicked.') }
  }
])
```

----------------------------------------

TITLE: Saving Web Page Content (Electron JS)
DESCRIPTION: Demonstrates how to save the content of a loaded web page to a file using `webContents.savePage`. The example loads a URL in a new browser window and saves the complete HTML content once the page finishes loading, logging the result to the console. Requires the Electron main process and a `BrowserWindow` instance.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_28

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()

win.loadURL('https://github.com')

win.webContents.on('did-finish-load', async () => {
  win.webContents.savePage('/tmp/test.html', 'HTMLComplete').then(() => {
    console.log('Page was saved successfully.')
  }).catch(err => {
    console.log(err)
  })
})
```

----------------------------------------

TITLE: Installing Electron Verbose Output - sh
DESCRIPTION: Installs Electron using the '--verbose' flag to show detailed output, including download progress. Useful for diagnosing issues or monitoring progress on slow networks.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_8

LANGUAGE: sh
CODE:
```
npm install --verbose electron
```

----------------------------------------

TITLE: Disabling Built-in Spellcheck in Electron BrowserWindow
DESCRIPTION: This snippet demonstrates how to disable the default Chromium spellchecker when creating an Electron BrowserWindow. This is a prerequisite for using the `webFrame.setSpellCheckProvider` method to implement a custom spellchecking solution. The `spellcheck` option is set to `false` within `webPreferences`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame.md#_snippet_2

LANGUAGE: javascript
CODE:
```
const mainWindow = new BrowserWindow({
  webPreferences: {
    spellcheck: false
  }
})
```

----------------------------------------

TITLE: Writing RTF to Electron Clipboard (JavaScript)
DESCRIPTION: This snippet shows how to write a string containing Rich Text Format (RTF) data to the default system clipboard using the `clipboard.writeRTF()` method. It provides a method for placing formatted text onto the clipboard.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const rtf = '{\\rtf1\\ansi{\\fonttbl\\f0\\fswiss Helvetica;}\\f0\\pard\nThis is some {\\b bold} text.\\par\n}'
clipboard.writeRTF(rtf)
```

----------------------------------------

TITLE: Installing Electron-compatible ChromeDriver for WebdriverIO (sh)
DESCRIPTION: Command to install the `electron-chromedriver` npm package, providing the necessary ChromeDriver binary for testing Electron apps with WebdriverIO. This is a prerequisite for running WebdriverIO tests.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_6

LANGUAGE: sh
CODE:
```
npm install electron-chromedriver
```

----------------------------------------

TITLE: Checking for Specific Format on Electron Clipboard (JavaScript)
DESCRIPTION: This experimental snippet demonstrates using the `clipboard.has()` method to check if the default clipboard contains data in a specific format (in this case, `<p>selection</p>`). The method returns a boolean, which is then printed.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const hasFormat = clipboard.has('<p>selection</p>')
console.log(hasFormat)
// 'true' or 'false
```

----------------------------------------

TITLE: Stop Navigation - Electron webview - JavaScript
DESCRIPTION: Immediately stops any pending or ongoing navigation in the webview. This method takes no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_23

LANGUAGE: JavaScript
CODE:
```
<webview>.stop()
```

----------------------------------------

TITLE: Initializing Renderer Process for Online Status Electron Javascript
DESCRIPTION: This snippet initializes the main Electron process, creating a small, hidden `BrowserWindow` and loading an HTML file into it. This window serves as a container for the renderer-side script that will use `navigator.onLine` to detect network status and trigger alerts. It requires the Electron module and is executed once the application is ready.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let onlineStatusWindow

app.whenReady().then(() => {
  onlineStatusWindow = new BrowserWindow({ width: 0, height: 0, show: false })
  onlineStatusWindow.loadURL(`file://${__dirname}/online-status.html`)
})
```

----------------------------------------

TITLE: Insert Text - Electron webview - JavaScript
DESCRIPTION: Inserts the specified `text` string into the currently focused element within the webview's guest page. Returns a Promise that resolves when insertion is complete.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_61

LANGUAGE: JavaScript
CODE:
```
<webview>.insertText(text)
```

----------------------------------------

TITLE: Converting Uint8Array to Buffer after IPC - JavaScript
DESCRIPTION: After IPC transfer using the Structured Clone Algorithm (Electron 8+), Node.js Buffer objects are received as Uint8Arrays. This snippet provides the code necessary to convert the received Uint8Array back into a Node.js Buffer object, preserving its underlying data.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_12

LANGUAGE: javascript
CODE:
```
Buffer.from(value.buffer, value.byteOffset, value.byteLength)
```

----------------------------------------

TITLE: Adding ElectronTeamID to Info.plist (XML)
DESCRIPTION: Required step for submitting an Electron app to the Mac App Store. This XML snippet shows how to add the 'ElectronTeamID' key with your Apple Developer Team ID as its value to the application's Info.plist file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_0

LANGUAGE: XML
CODE:
```
<plist version=""1.0"">
<dict>
  ...
  <key>ElectronTeamID</key>
  <string>TEAM_ID</string>
</dict>
</plist>
```

----------------------------------------

TITLE: Navigate Forward - Electron webview - JavaScript
DESCRIPTION: Navigates the webview to the next page in its history, if one exists. This method does not require any parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_31

LANGUAGE: JavaScript
CODE:
```
<webview>.goForward()
```

----------------------------------------

TITLE: Writing and Reading Buffer Data with Electron Clipboard (JavaScript)
DESCRIPTION: This experimental example demonstrates writing binary data (a Buffer) to the clipboard using a specific format identifier (`public.utf8-plain-text`). It then reads the data back as a Buffer and compares it to the original using `Buffer.equals()`, printing the comparison result.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const buffer = Buffer.from('this is binary', 'utf8')
clipboard.writeBuffer('public.utf8-plain-text', buffer)

const ret = clipboard.readBuffer('public.utf8-plain-text')

console.log(buffer.equals(out))
// true
```

----------------------------------------

TITLE: Setting Represented File and Edited State in Electron
DESCRIPTION: This snippet demonstrates how to create an Electron BrowserWindow and then set its represented filename and document edited state using the `setRepresentedFilename` and `setDocumentEdited` methods, respectively. It requires the Electron `app` module to be ready. `setRepresentedFilename` takes the file path string, and `setDocumentEdited` takes a boolean indicating the edited status.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/represented-file.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

app.whenReady().then(() => {
  const win = new BrowserWindow()

  win.setRepresentedFilename('/etc/passwd')
  win.setDocumentEdited(true)
})
```

----------------------------------------

TITLE: Disabling Web Security webview HTML
DESCRIPTION: Adds the boolean `disablewebsecurity` attribute to the `<webview>` tag, which turns off web security features like same-origin policy for the guest content.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_9

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" disablewebsecurity></webview>
```

----------------------------------------

TITLE: Replacing Multiple webFrame.setIsolatedWorld Methods - JavaScript
DESCRIPTION: Several individual methods for setting isolated world information (setIsolatedWorldContentSecurityPolicy, setIsolatedWorldHumanReadableName, setIsolatedWorldSecurityOrigin) were removed in Electron 7.0. This snippet demonstrates their replacement with a single consolidated method, webFrame.setIsolatedWorldInfo, which accepts the world ID and an object containing all the information. Requires the webFrame module.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_18

LANGUAGE: javascript
CODE:
```
// Removed in Electron 7.0
webFrame.setIsolatedWorldContentSecurityPolicy(worldId, csp)
webFrame.setIsolatedWorldHumanReadableName(worldId, name)
webFrame.setIsolatedWorldSecurityOrigin(worldId, securityOrigin)
```

LANGUAGE: javascript
CODE:
```
// Replace with
webFrame.setIsolatedWorldInfo(
  worldId,
  {
    securityOrigin: 'some_origin',
    name: 'human_readable_name',
    csp: 'content_security_policy'
  })
```

----------------------------------------

TITLE: Installing asar CLI Utility - Shell
DESCRIPTION: This command installs the asar command-line interface globally using npm, which is required to create and manage asar archives manually.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm install -g asar
```

----------------------------------------

TITLE: Check if Loading - Electron webview - JavaScript
DESCRIPTION: Checks whether the guest page is still loading resources. It returns a boolean value indicating the loading status.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_20

LANGUAGE: JavaScript
CODE:
```
<webview>.isLoading()
```

----------------------------------------

TITLE: Allowing NTLM Credentials for Electron Session Domains (JavaScript)
DESCRIPTION: Configures the session to automatically send integrated authentication credentials (NTLM or Negotiate) for a specified list of domains. The `domains` parameter accepts a comma-separated string of host patterns, including wildcards (`*`). This allows pre-configuring authentication behavior for known internal or trusted domains.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const { session } = require('electron')
// consider any url ending with `example.com`, `foobar.com`, `baz`
// for integrated authentication.
session.defaultSession.allowNTLMCredentialsForDomains('*example.com, *foobar.com, *baz')

// consider all urls for integrated authentication.
session.defaultSession.allowNTLMCredentialsForDomains('*')
```

----------------------------------------

TITLE: Replacing powerMonitor.querySystemIdleTime - JavaScript
DESCRIPTION: The asynchronous powerMonitor.querySystemIdleTime method was removed in Electron 7.0. This snippet shows its replacement with the synchronous powerMonitor.getSystemIdleTime API, which returns the idle time directly instead of using a callback. Requires the powerMonitor module.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_17

LANGUAGE: javascript
CODE:
```
// Removed in Electron 7.0
powerMonitor.querySystemIdleTime(callback)
```

LANGUAGE: javascript
CODE:
```
// Replace with synchronous API
const idleTime = powerMonitor.getSystemIdleTime()
```

----------------------------------------

TITLE: Start and Stop Electron contentTracing in JavaScript
DESCRIPTION: This snippet demonstrates how to start content tracing with all categories included (`*`), wait for a fixed duration, and then stop tracing, logging the path to the resulting trace file. It requires waiting for the Electron application's `ready` event.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/content-tracing.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, contentTracing } = require('electron')

app.whenReady().then(() => {
  (async () => {
    await contentTracing.startRecording({
      include_categories: ['*']
    })
    console.log('Tracing started')
    await new Promise(resolve => setTimeout(resolve, 5000))
    const path = await contentTracing.stopRecording()
    console.log('Tracing data recorded to ' + path)
  })()
})
```

----------------------------------------

TITLE: Clearing JumpList Tasks with Electron.js
DESCRIPTION: This snippet shows how to remove all previously set custom tasks from the Windows JumpList. It utilizes the `app.setUserTasks` API from Electron, passing an empty array to effectively clear the task list associated with the application's taskbar icon. This action removes the custom entries from the right-click context menu.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-taskbar.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.setUserTasks([])
```

----------------------------------------

TITLE: Clearing Recent Documents Electron JavaScript
DESCRIPTION: This snippet demonstrates how to remove all entries from the operating system's recent documents list associated with the Electron application using the `app.clearRecentDocuments` API. This will empty the Jump List or dock menu's recent items section for the app.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/recent-documents.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.clearRecentDocuments()
```

----------------------------------------

TITLE: Execute JavaScript - Electron webview - JavaScript
DESCRIPTION: Evaluates the provided JavaScript `code` string within the context of the guest page. Returns a Promise that resolves with the result or rejects if the executed code returns a rejected promise. An optional `userGesture` boolean can simulate user interaction.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_39

LANGUAGE: JavaScript
CODE:
```
<webview>.executeJavaScript(code[, userGesture])
```

----------------------------------------

TITLE: Creating BrowserWindow - JavaScript
DESCRIPTION: Creates a new Electron browser window using the `BrowserWindow` class. This class is only accessible and intended for use within the Electron Main process. It instantiates a window where web content can be loaded.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/quick-start.md#_snippet_10

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
```

----------------------------------------

TITLE: Getting Frame ID in Renderer Electron IPC JavaScript
DESCRIPTION: Illustrates how a renderer process can obtain its unique routing ID, which corresponds to the frameId used in main process IPC methods like `sendToFrame`. It accesses the ID via `require('electron').webFrame.routingId`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_25

LANGUAGE: javascript
CODE:
```
// In a renderer process
console.log('My frameId is:', require('electron').webFrame.routingId)
```

----------------------------------------

TITLE: Emulating Network Conditions Electron JavaScript
DESCRIPTION: Demonstrates how to use the `enableNetworkEmulation` method on a `webContents.session` to simulate network conditions like latency and throughput (GPRS example) or a complete network outage. Requires access to a `WebContents` object and its session.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
// To emulate a GPRS connection with 50kbps throughput and 500 ms latency.
window.webContents.session.enableNetworkEmulation({
  latency: 500,
  downloadThroughput: 6400,
  uploadThroughput: 6400
})
```

LANGUAGE: JavaScript
CODE:
```
// To emulate a network outage.
window.webContents.session.enableNetworkEmulation({ offline: true })
```

----------------------------------------

TITLE: Replacing session.clearAuthCache with Options - JavaScript
DESCRIPTION: The session.clearAuthCache() API previously accepted an options object to specify what to clear, which is now deprecated. This snippet shows the new behavior in Electron 7+, where the method no longer accepts arguments and unconditionally clears the entire authentication cache.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_15

LANGUAGE: javascript
CODE:
```
// Deprecated
session.clearAuthCache({ type: 'password' })
```

LANGUAGE: javascript
CODE:
```
// Replace with
session.clearAuthCache()
```

----------------------------------------

TITLE: Clearing Thumbnail Toolbar Buttons with Electron.js
DESCRIPTION: This snippet shows how to remove all previously set thumbnail toolbar buttons from an Electron `BrowserWindow`. It calls `win.setThumbarButtons` with an empty array, effectively clearing the toolbar that appears when hovering over the window's taskbar preview. This action reverts the window's thumbnail preview to its default state without custom buttons.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-taskbar.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow()
win.setThumbarButtons([])
```

----------------------------------------

TITLE: Configuring Widevine CDM Path and Version in Electron (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure an Electron application to use the Widevine CDM library. It appends the `--widevine-cdm-path` switch with the path to the library file (<code>libwidevinecdm.dylib</code> on macOS, <code>widevinecdm.dll</code> on Windows) and the `--widevine-cdm-version` switch with the version obtained from <code>chrome://components</code>. These switches must be set before the <code>app</code> module emits the <code>ready</code> event.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/testing-widevine-cdm.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

// You have to pass the directory that contains widevine library here, it is
// * `libwidevinecdm.dylib` on macOS,
// * `widevinecdm.dll` on Windows.
app.commandLine.appendSwitch('widevine-cdm-path', '/path/to/widevine_library')
// The version of plugin can be got from `chrome://components` page in Chrome.
app.commandLine.appendSwitch('widevine-cdm-version', '1.4.8.866')

let win = null
app.whenReady().then(() => {
  win = new BrowserWindow()
  win.show()
})
```

----------------------------------------

TITLE: Run JavaScript Linting with Args (npm)
DESCRIPTION: Runs the JavaScript linter (`standard`) using npm, allowing additional arguments to be passed directly to the `standard` command by including them after the double dash (`--`).
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_1

LANGUAGE: shell
CODE:
```
npm run lint-js --
```

----------------------------------------

TITLE: Calling Exposed API in Electron Renderer JavaScript
DESCRIPTION: This snippet shows how to access and invoke the API function (`doThing`) that was exposed from the isolated preload script onto the main world's `window.electron` object.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/context-bridge.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// Renderer (Main World)

window.electron.doThing()
```

----------------------------------------

TITLE: Setting Web Preferences webview HTML
DESCRIPTION: Uses the `webpreferences` attribute to specify a comma-separated string of web preferences, applying various rendering and security settings to the guest page similar to `BrowserWindow` options.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_12

LANGUAGE: HTML
CODE:
```
<webview src=""https://github.com"" webpreferences=""allowRunningInsecureContent, javascript=no""></webview>
```

----------------------------------------

TITLE: Navigate Back - Electron webview - JavaScript
DESCRIPTION: Navigates the webview to the previous page in its history, if one exists. This method does not require any parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_30

LANGUAGE: JavaScript
CODE:
```
<webview>.goBack()
```

----------------------------------------

TITLE: Enabling File Read/Write Entitlement for Save Dialog (XML)
DESCRIPTION: Adds the entitlement key necessary for a sandboxed Mac App Store application to use the `dialog.showSaveDialog` function to write files selected by the user. This key must be added to the `parent.plist` file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_9

LANGUAGE: XML
CODE:
```
<key>com.apple.security.files.user-selected.read-write</key>
<true/>
```

----------------------------------------

TITLE: Run Specific Unit Tests by Pattern (npm)
DESCRIPTION: Executes only the unit tests that match a given regex `PATTERN`. The `-g` flag is used to filter tests based on their description.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_5

LANGUAGE: shell
CODE:
```
npm run test --
-g=PATTERN
```

----------------------------------------

TITLE: Load URL - Electron webview - JavaScript
DESCRIPTION: Loads the specified URL in the webview tag. It requires a protocol prefix like `http://` or `file://` and returns a Promise that resolves upon successful load or rejects on failure. Optional parameters allow setting referrer, user agent, extra headers, post data, and base URL for data URLs.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_16

LANGUAGE: JavaScript
CODE:
```
<webview>.loadURL(url[, options])
```

----------------------------------------

TITLE: Opening and Accessing Native Window - Renderer Process (Native Window)
DESCRIPTION: Shows how to call `window.open` in a renderer process when `nativeWindowOpen` is enabled. The method returns a native `Window` object, allowing direct access to its properties and methods, such as writing directly to the child window's document.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/window-open.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// renderer process (mainWindow)
const childWindow = window.open('', 'modal')
childWindow.document.write('<h1>Hello</h1>')
```

----------------------------------------

TITLE: Start Electron REPL (Local Install) - sh
DESCRIPTION: This command starts Electron in interactive (REPL) mode for the main process when Electron is installed locally as a project dependency. It executes the Electron binary located in the `node_modules/.bin` directory.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/repl.md#_snippet_0

LANGUAGE: sh
CODE:
```
./node_modules/.bin/electron --interactive
```

----------------------------------------

TITLE: Programmatic electron-installer-snap usage; JavaScript
DESCRIPTION: Demonstrates how to use the `electron-installer-snap` module programmatically within a Node.js script. It takes an options object and returns a promise that resolves with the path to the created snap file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_2

LANGUAGE: js
CODE:
```
const snap = require('electron-installer-snap')

snap(options)
  .then(snapPath => console.log(`Created snap at ${snapPath}!`))
```

----------------------------------------

TITLE: Building Snap package; Shell
DESCRIPTION: Executes the `snapcraft` command in the terminal to build the Snap package based on the `snapcraft.yaml` configuration in the project directory. This process fetches sources, builds parts, and creates the `.snap` file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_4

LANGUAGE: sh
CODE:
```
$ snapcraft

<output snipped>
Snapped electron-packager-hello-world_0.1_amd64.snap
```

----------------------------------------

TITLE: Handling Window Close with onbeforeunload in Electron Javascript
DESCRIPTION: Demonstrates how to use the standard browser's `window.onbeforeunload` event handler within an Electron BrowserWindow to prevent the window from closing. Setting `e.returnValue = false` cancels the close action. Note that unlike standard browsers, this action is silent in Electron, and using the dialog API for user confirmation is recommended.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_5

LANGUAGE: javascript
CODE:
```
window.onbeforeunload = (e) => {
  console.log('I do not want to be closed')

  // Unlike usual browsers that a message box will be prompted to users, returning
  // a non-void value will silently cancel the close.
  // It is recommended to use the dialog API to let the user confirm closing the
  // application.
  e.returnValue = false // equivalent to `return false` but not recommended
}
```

----------------------------------------

TITLE: Insecure Use of openExternal in Electron JavaScript (Bad Example)
DESCRIPTION: Illustrates an unsafe practice of using `shell.openExternal` with data that is controlled by the user. This can expose the application and the user's system to potential attacks if the user-controlled data is a malicious protocol URI or command.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/security.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
//  Bad
const { shell } = require('electron')
shell.openExternal(USER_CONTROLLED_DATA_HERE)
```

----------------------------------------

TITLE: Handling Paint Event (Electron) - JavaScript
DESCRIPTION: This code snippet demonstrates how to handle the Electron `webContents` 'paint' event, which is emitted when a new frame is ready, primarily in offscreen rendering scenarios. It receives the dirty rectangle (`dirty`) and the image data (`image`) of the whole frame, allowing developers to process the rendered content, although the example comment shows placeholder usage like `updateBitmap`. The `BrowserWindow` is configured with `webPreferences.offscreen: true`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_5

LANGUAGE: JavaScript
CODE:
```
const { BrowserWindow } = require('electron')

const win = new BrowserWindow({ webPreferences: { offscreen: true } })
win.webContents.on('paint', (event, dirty, image) => {
  // updateBitmap(dirty, image.getBitmap())
})
win.loadURL('http://github.com')
```

----------------------------------------

TITLE: Remove Inserted CSS - Electron webview - JavaScript
DESCRIPTION: Removes a previously inserted CSS stylesheet from the current web page using its unique key. Returns a Promise that resolves upon successful removal.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_38

LANGUAGE: JavaScript
CODE:
```
<webview>.removeInsertedCSS(key)
```

----------------------------------------

TITLE: Configuring Custom Electron Mirror (China CDN) - shell
DESCRIPTION: Sets the ELECTRON_MIRROR environment variable to use the China CDN mirror for downloading Electron binaries during installation. This is useful in regions where the default GitHub releases download is slow or inaccessible.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_4

LANGUAGE: shell
CODE:
```
ELECTRON_MIRROR=""https://cdn.npm.taobao.org/dist/electron/""
```

----------------------------------------

TITLE: Setting NODE_OPTIONS in Shell
DESCRIPTION: Provides an example of setting the `NODE_OPTIONS` environment variable in a shell to pass specific Node.js CLI options to the Electron process. This allows customizing Node.js runtime behavior, though some options conflicting with Chromium are excluded.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/environment-variables.md#_snippet_2

LANGUAGE: sh
CODE:
```
export NODE_OPTIONS=""--no-warnings --max-old-space-size=2048""
```

----------------------------------------

TITLE: Logging Electron app session-created Event (JavaScript)
DESCRIPTION: Illustrates attaching a listener to the Electron `app` 'session-created' event. When a new session is created, the listener receives the `session` object and logs it to the console. This is useful for monitoring session creation or performing setup on new sessions.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_4

LANGUAGE: javascript
CODE:
```
const { app } = require('electron')

app.on('session-created', (session) => {
  console.log(session)
})
```

----------------------------------------

TITLE: Displaying Electron Menu Structure with Group Positioning Shell
DESCRIPTION: Shows the resulting menu structure generated from the template that utilizes group positioning properties and separators. This output illustrates how `beforeGroupContaining` and `afterGroupContaining` effectively rearrange the relative positions of item groups within the final menu display.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_6

LANGUAGE: sh
CODE:
```
- 3\n- 4\n- ---\n- 1\n- ---\n- 2
```

----------------------------------------

TITLE: Login Helper App Sandbox Entitlements (XML)
DESCRIPTION: Specifies the app sandbox entitlements for the application's login helper process, commonly used for launching the app at login. It simply enables the app sandbox for this component.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_3

LANGUAGE: XML
CODE:
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
  <dict>
    <key>com.apple.security.app-sandbox</key>
    <true/>
  </dict>
</plist>
```

----------------------------------------

TITLE: Preventing Native Module Loading in Electron Workers JavaScript
DESCRIPTION: This code snippet demonstrates a method to prevent the unsafe loading of native Node.js modules, particularly after Web Workers have started. It achieves this by overriding the `process.dlopen` function to throw an error, thereby blocking attempts to load native modules. It then shows the creation of a `Worker`, illustrating that native modules should not be loaded after this prevention mechanism is in place.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/multithreading.md#_snippet_1

LANGUAGE: javascript
CODE:
```
process.dlopen = () => {
  throw new Error('Load native module is not safe')
}
const worker = new Worker('script.js')
```

----------------------------------------

TITLE: Configuring VSCode Debugging for Electron Native C++ on Windows (JSON)
DESCRIPTION: Configures a VSCode launch setting for debugging the native C++ Electron codebase on Windows using the `cppvsdbg` debugger. It requires the C/C++ extension and specifies the path to the built Electron executable and the Electron project to be launched by it. The configuration includes important environment variables for debugging and maps source paths for symbol resolution.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/debugging-vscode.md#_snippet_2

LANGUAGE: json
CODE:
```
{
  ""version"": ""0.2.0"",
  ""configurations"": [
    {
      ""name"": ""(Windows) Launch"",
      ""type"": ""cppvsdbg"",
      ""request"": ""launch"",
      ""program"": ""${workspaceFolder}\\out\\your-executable-location\\electron.exe"",
      ""args"": [""your-electron-project-path""],
      ""stopAtEntry"": false,
      ""cwd"": ""${workspaceFolder}"",
      ""environment"": [
          {""name"": ""ELECTRON_ENABLE_LOGGING"", ""value"": ""true""},
          {""name"": ""ELECTRON_ENABLE_STACK_DUMPING"", ""value"": ""true""},
          {""name"": ""ELECTRON_RUN_AS_NODE"", ""value"": """"}
      ],
      ""externalConsole"": false,
      ""sourceFileMap"": {
          ""o:\\"": ""${workspaceFolder}""
      }
    }
  ]
}
```

----------------------------------------

TITLE: Synchronous protocol.unregisterProtocol (Electron 10)
DESCRIPTION: Illustrates the change in protocol.unregisterProtocol from an asynchronous method requiring a callback to a synchronous method where the callback is no longer needed.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_7

LANGUAGE: javascript
CODE:
```
// Deprecated
protocol.unregisterProtocol(scheme, () => { /* ... */ })
```

LANGUAGE: javascript
CODE:
```
// Replace with
protocol.unregisterProtocol(scheme)
```

----------------------------------------

TITLE: Windows Native Module Linker Command (Linker)
DESCRIPTION: Illustrates the required structure of a Windows `link.exe` command for compiling a native Node module (`foo.node`) to work correctly with Electron 4.x+, emphasizing the necessity of linking against Electron's `node.lib`, using the `/DELAYLOAD:node.exe` flag, and including the `win_delay_load_hook.obj` file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-native-node-modules.md#_snippet_4

LANGUAGE: plaintext
CODE:
```
 link.exe /OUT:""foo.node"" ""...\node.lib"" delayimp.lib /DELAYLOAD:node.exe /DLL
     ""my_addon.obj"" ""win_delay_load_hook.obj""
```

----------------------------------------

TITLE: Using Electron Clipboard Selection on Linux (JavaScript)
DESCRIPTION: This snippet demonstrates how to interact with the 'selection' clipboard specifically on Linux systems using the Electron `clipboard` module. It writes a string to the 'selection' clipboard and then reads it back, printing the result to the console.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

clipboard.writeText('Example String', 'selection')
console.log(clipboard.readText('selection'))
```

----------------------------------------

TITLE: Starting and Stopping NetLog in Electron Session JavaScript
DESCRIPTION: This snippet illustrates how to use the `ses.netLog` object to capture network events for a specific session partition in Electron. It starts logging to a specified path and then asynchronously stops logging, printing the path where the log was saved, after the `app` is ready.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_11

LANGUAGE: JavaScript
CODE:
```
const { app, session } = require('electron')

app.whenReady().then(async () => {
  const netLog = session.fromPartition('some-partition').netLog
  netLog.startLogging('/path/to/net-log')
  // After some network events
  const path = await netLog.stopLogging()
  console.log('Net-logs written to', path)
})
```

----------------------------------------

TITLE: Profiling Module Loading - Node.js - Shell
DESCRIPTION: This command line snippet uses Node.js flags to generate CPU and heap profiles when requiring a specific module (here, 'request'). It helps developers analyze the resource cost of loading a module to identify potential bottlenecks. The output files (.cpuprofile, .heapprofile) can be analyzed in Chrome Developer Tools.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/performance.md#_snippet_0

LANGUAGE: shell
CODE:
```
node --cpu-prof --heap-prof -e ""require('request')""
```

----------------------------------------

TITLE: Configuring Embedded DevTools in Webview Electron Main JavaScript
DESCRIPTION: Shows the main process logic required to handle the renderer-sent `webContents` IDs when embedding DevTools in a `<webview>`. It receives the IDs via `ipcMain`, retrieves the corresponding `WebContents` objects using `webContents.fromId`, sets the devtools `WebContents`, and then opens the DevTools for the target `WebContents`. Requires `electron`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_21

LANGUAGE: javascript
CODE:
```
// Main process
const { ipcMain, webContents } = require('electron')
ipcMain.on('open-devtools', (event, targetContentsId, devtoolsContentsId) => {
  const target = webContents.fromId(targetContentsId)
  const devtools = webContents.fromId(devtoolsContentsId)
  target.setDevToolsWebContents(devtools)
  target.openDevTools()
})
```

----------------------------------------

TITLE: Reading asar Archive as File using original-fs - JavaScript
DESCRIPTION: This snippet demonstrates how to bypass Electron's asar support for the `fs` module by using the `original-fs` module, allowing you to read the asar archive file content itself as a regular file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_8

LANGUAGE: javascript
CODE:
```
const originalFs = require('original-fs')
originalFs.readFileSync('/path/to/example.asar')
```

----------------------------------------

TITLE: Run JavaScript Linting (npm)
DESCRIPTION: Executes the JavaScript linter (`standard`) on the Electron codebase and unit tests using an npm script to ensure compliance with the project's coding style.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_0

LANGUAGE: shell
CODE:
```
npm run lint-js
```

----------------------------------------

TITLE: Execute Cut - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `cut` within the focused element or selection of the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_52

LANGUAGE: JavaScript
CODE:
```
<webview>.cut()
```

----------------------------------------

TITLE: Installing Spectron npm package (sh)
DESCRIPTION: Command to install Spectron as a development dependency using npm. Spectron is the official testing framework for Electron based on WebdriverIO.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save-dev spectron
```

----------------------------------------

TITLE: Replacing protocol.isProtocolHandled (Electron 10)
DESCRIPTION: Explains the replacement of the deprecated asynchronous protocol.isProtocolHandled() method with the synchronous protocol.isProtocolRegistered() and protocol.isProtocolIntercepted() methods to check the status of a protocol.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_9

LANGUAGE: javascript
CODE:
```
// Deprecated
protocol.isProtocolHandled(scheme).then(() => { /* ... */ })
```

LANGUAGE: javascript
CODE:
```
// Replace with
const isRegistered = protocol.isProtocolRegistered(scheme)
const isIntercepted = protocol.isProtocolIntercepted(scheme)
```

----------------------------------------

TITLE: Using Auth Server Whitelist Flag Electron Shell
DESCRIPTION: Provides a command-line example of how to use the `--auth-server-whitelist` flag. It shows how to specify a comma-separated list of server URLs for which integrated authentication is enabled, using wildcard `*` prefixes.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/command-line-switches.md#_snippet_1

LANGUAGE: sh
CODE:
```
--auth-server-whitelist='*example.com, *foobar.com, *baz'
```

----------------------------------------

TITLE: Setting User Agent webview HTML
DESCRIPTION: Uses the `useragent` attribute to define the user agent string used by the guest page before the initial navigation occurs.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_8

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" useragent=""Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; AS; rv:11.0) like Gecko""></webview>
```

----------------------------------------

TITLE: Handling Bluetooth Device Selection (Electron) - JavaScript
DESCRIPTION: This snippet demonstrates how to handle the Electron `webContents` 'select-bluetooth-device' event. It prevents the default behavior, searches for a specific device ('test'), and calls the provided `callback` with the selected `deviceId` or an empty string to cancel the request. This functionality requires the `webPreferences.webBluetooth` option and the `--enable-experimental-web-platform-features` command line switch.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_4

LANGUAGE: JavaScript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null
app.commandLine.appendSwitch('enable-experimental-web-platform-features')

app.whenReady().then(() => {
  win = new BrowserWindow({ width: 800, height: 600 })
  win.webContents.on('select-bluetooth-device', (event, deviceList, callback) => {
    event.preventDefault()
    const result = deviceList.find((device) => {
      return device.deviceName === 'test'
    })
    if (!result) {
      callback('')
    } else {
      callback(result.deviceId)
    }
  })
})
```

----------------------------------------

TITLE: Inspect Element - Electron webview - JavaScript
DESCRIPTION: Opens DevTools and starts inspecting the HTML element at the specified coordinates (`x`, `y`) within the webview's guest page. Requires integer coordinates.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_44

LANGUAGE: JavaScript
CODE:
```
<webview>.inspectElement(x, y)
```

----------------------------------------

TITLE: Reload Ignoring Cache - Electron webview - JavaScript
DESCRIPTION: Reloads the guest page, specifically ignoring the browser's cache for all resources. This ensures fresh content is loaded.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_25

LANGUAGE: JavaScript
CODE:
```
<webview>.reloadIgnoringCache()
```

----------------------------------------

TITLE: Example TraceConfig Object Configuration - JavaScript
DESCRIPTION: This snippet provides a concrete example of a TraceConfig object configuration, demonstrating how to set the `recording_mode` and specify `included_categories` and `excluded_categories` to capture tracing data similar to Chrome DevTools. It shows how to include specific timeline and V8 categories while excluding all others.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/structures/trace-config.md#_snippet_0

LANGUAGE: js
CODE:
```
{
  recording_mode: 'record-until-full',
  included_categories: [
    'devtools.timeline',
    'disabled-by-default-devtools.timeline',
    'disabled-by-default-devtools.timeline.frame',
    'disabled-by-default-devtools.timeline.stack',
    'v8.execute',
    'blink.console',
    'blink.user_timing',
    'latencyInfo',
    'disabled-by-default-v8.cpu_profiler',
    'disabled-by-default-v8.cpu_profiler.hires'
  ],
  excluded_categories: ['*']
}
```

----------------------------------------

TITLE: Configuring Custom Buttons on Hover on macOS (JavaScript)
DESCRIPTION: Applicable only to frameless windows on macOS, this snippet configures custom-drawn close and miniaturize buttons that appear when hovering near the top-left corner. This style helps prevent mouse event issues with standard buttons in frameless windows and is set via `titleBarStyle: 'customButtonsOnHover'`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/frameless-window.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow({ titleBarStyle: 'customButtonsOnHover', frame: false })
win.show()
```

----------------------------------------

TITLE: Attaching Event Listener to Remote Window (Javascript)
DESCRIPTION: Shows how to get the current window's remote object using `remote.getCurrentWindow()` and attach a `close` event listener in the renderer process. This illustrates passing a renderer callback to the main process via an event handler but comes with a warning about the necessity of manually cleaning up listeners to prevent leaks upon window reload.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_3

LANGUAGE: Javascript
CODE:
```
require('electron').remote.getCurrentWindow().on('close', () => {
  // window was closed...
})
```

----------------------------------------

TITLE: Execute Paste and Match Style - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `pasteAndMatchStyle` within the focused element of the webview's guest page. This method pastes content while matching the target element's style.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_55

LANGUAGE: JavaScript
CODE:
```
<webview>.pasteAndMatchStyle()
```

----------------------------------------

TITLE: Installing Electron-compatible ChromeDriver for WebDriverJs (sh)
DESCRIPTION: Command to install the `electron-chromedriver` npm package, which provides a ChromeDriver binary specifically built for Electron versions. This is a prerequisite for using `selenium-webdriver` with Electron.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-selenium-and-webdriver.md#_snippet_2

LANGUAGE: sh
CODE:
```
npm install electron-chromedriver
```

----------------------------------------

TITLE: Inspect Service Worker - Electron webview - JavaScript
DESCRIPTION: Opens the DevTools window specifically for debugging any Service Worker contexts present within the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_46

LANGUAGE: JavaScript
CODE:
```
<webview>.inspectServiceWorker()
```

----------------------------------------

TITLE: Stop Find In Page - Electron webview - JavaScript
DESCRIPTION: Stops any active `findInPage` request for the webview and specifies an action to take regarding the current selection (clear, keep, or activate). Requires a string `action` parameter.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_63

LANGUAGE: JavaScript
CODE:
```
<webview>.stopFindInPage(action)
```

----------------------------------------

TITLE: Check if Can Go Forward - Electron webview - JavaScript
DESCRIPTION: Checks if there is a next page in the navigation history that the webview can navigate forward to. Returns a boolean.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_27

LANGUAGE: JavaScript
CODE:
```
<webview>.canGoForward()
```

----------------------------------------

TITLE: Adding Directory to DevTools Workspace Electron WebContents JavaScript
DESCRIPTION: Illustrates how to add a file system path to the Electron DevTools workspace. This is typically done in the main process after the DevTools have been created and the `devtools-opened` event has fired. It uses `win.webContents.addWorkSpace(__dirname)`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_19

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')
const win = new BrowserWindow()
win.webContents.on('devtools-opened', () => {
  win.webContents.addWorkSpace(__dirname)
})
```

----------------------------------------

TITLE: Reading asar Archive as File by Disabling asar - JavaScript
DESCRIPTION: This snippet shows another method to bypass asar support for the standard `fs` module by temporarily setting `process.noAsar = true`, allowing you to read the asar archive file itself.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const fs = require('fs')
process.noAsar = true
fs.readFileSync('/path/to/example.asar')
```

----------------------------------------

TITLE: Handling Keyboard Events in Renderer Process Browser JavaScript
DESCRIPTION: Illustrates handling keyboard events directly within the renderer process using the standard DOM `addEventListener` API on the `window` object. The third parameter `true` ensures the listener captures events during the capture phase before other listeners.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/keyboard-shortcuts.md#_snippet_2

LANGUAGE: JavaScript
CODE:
```
window.addEventListener('keyup', doSomething, true)
```

----------------------------------------

TITLE: Clear Navigation History - Electron webview - JavaScript
DESCRIPTION: Removes all entries from the webview's navigation history, preventing back or forward navigation. This method has no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_29

LANGUAGE: JavaScript
CODE:
```
<webview>.clearHistory()
```

----------------------------------------

TITLE: Check if DevTools Opened - Electron webview - JavaScript
DESCRIPTION: Checks if a DevTools window is currently attached and open for the webview's guest page. Returns a boolean value.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_42

LANGUAGE: JavaScript
CODE:
```
<webview>.isDevToolsOpened()
```

----------------------------------------

TITLE: Writing Buffer Data to Electron Clipboard (JavaScript)
DESCRIPTION: This experimental snippet shows how to write a Node.js Buffer containing binary data to the default clipboard using the `clipboard.writeBuffer()` method, associating it with a specified format string.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/clipboard.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const { clipboard } = require('electron')

const buffer = Buffer.from('writeBuffer', 'utf8')
clipboard.writeBuffer('public.utf8-plain-text', buffer)
```

----------------------------------------

TITLE: Set Audio Muted - Electron webview - JavaScript
DESCRIPTION: Sets the audio mute state for the webview's guest page. Requires a boolean parameter `muted` to specify whether to mute (`true`) or unmute (`false`).
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_47

LANGUAGE: JavaScript
CODE:
```
<webview>.setAudioMuted(muted)
```

----------------------------------------

TITLE: Starting and Stopping Net Logging with Electron
DESCRIPTION: This snippet demonstrates how to initiate and terminate network logging using Electron's `netLog` module. It requires the `app` module to be ready, starts logging to a specific file path, waits for network events (not shown), stops logging, and then prints the path of the generated log file. It depends on the `electron` module and its `app` and `netLog` components.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/net-log.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { netLog } = require('electron')

app.whenReady().then(async () => {
  await netLog.startLogging('/path/to/net-log')
  // After some network events
  const path = await netLog.stopLogging()
  console.log('Net-logs written to', path)
})
```

----------------------------------------

TITLE: Handling RPC Messages in Electron App - Node.js
DESCRIPTION: This snippet demonstrates how the Electron application process can listen for RPC-style messages sent by the custom `TestDriver`. It checks for the `APP_TEST_DRIVER` environment variable, defines a handler (`onMessage`) to parse incoming RPC requests, execute methods from a predefined `METHODS` object, and send back the result or an error via `process.send`. This provides the server-side logic for the custom RPC.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/automated-testing-with-a-custom-driver.md#_snippet_3

LANGUAGE: javascript
CODE:
```
if (process.env.APP_TEST_DRIVER) {
  process.on('message', onMessage)
}

async function onMessage ({ msgId, cmd, args }) {
  let method = METHODS[cmd]
  if (!method) method = () => new Error('Invalid method: ' + cmd)
  try {
    const resolve = await method(...args)
    process.send({ msgId, resolve })
  } catch (err) {
    const reject = {
      message: err.message,
      stack: err.stack,
      name: err.name
    }
    process.send({ msgId, reject })
  }
}

const METHODS = {
  isReady () {
    // do any setup needed
    return true
  }
  // define your RPC-able methods here
}
```

----------------------------------------

TITLE: Excluding BrowserWindow from macOS Windows Menu JS
DESCRIPTION: This snippet demonstrates how to create a BrowserWindow and exclude it from the application's standard macOS ""Window"" menu using the `excludedFromShownWindowsMenu` property. It shows setting the property to `true` and then building and setting the application menu which includes the standard 'windowmenu' role. Requires the `Menu` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_9

LANGUAGE: javascript
CODE:
```
const win = new BrowserWindow({ height: 600, width: 600 })

const template = [
  {
    role: 'windowmenu'
  }
]

win.excludedFromShownWindowsMenu = true

const menu = Menu.buildFromTemplate(template)
Menu.setApplicationMenu(menu)
```

----------------------------------------

TITLE: Execute Copy - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `copy` within the focused element or selection of the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_53

LANGUAGE: JavaScript
CODE:
```
<webview>.copy()
```

----------------------------------------

TITLE: Enabling Node Integration in Subframes webview HTML
DESCRIPTION: Adds the experimental boolean `nodeintegrationinsubframes` attribute to enable Node.js support within iframes inside the webview, executing preload scripts for each iframe.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_3

LANGUAGE: HTML
CODE:
```
<webview src=""http://www.google.com/"" nodeintegrationinsubframes></webview>
```

----------------------------------------

TITLE: Open DevTools - Electron webview - JavaScript
DESCRIPTION: Opens a DevTools window specifically for inspecting and debugging the content within the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_40

LANGUAGE: JavaScript
CODE:
```
<webview>.openDevTools()
```

----------------------------------------

TITLE: Replacing crashReporter companyName argument (Electron 10)
DESCRIPTION: Illustrates the migration from using the deprecated companyName argument directly in crashReporter.start() options to passing the company name within the globalExtra object.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_4

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 10
crashReporter.start({ companyName: 'Umbrella Corporation' })
```

LANGUAGE: javascript
CODE:
```
// Replace with
crashReporter.start({ globalExtra: { _companyName: 'Umbrella Corporation' } })
```

----------------------------------------

TITLE: Verify Node.js and npm Versions (PowerShell)
DESCRIPTION: This snippet provides PowerShell commands to verify the successful installation of Node.js and npm on Windows. It executes `node -v` to print the installed Node.js version and `npm -v` to print the installed npm version, confirming that the executables are available and functioning correctly in the PowerShell environment.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/development-environment.md#_snippet_1

LANGUAGE: powershell
CODE:
```
node -v

npm -v
```

----------------------------------------

TITLE: Accessing Main Process built-in Modules via remote (Javascript)
DESCRIPTION: Illustrates accessing the Electron `app` module, which resides in the main process, directly from the renderer process by using `require('electron').remote.app`. This shows how `remote` makes main process built-in modules available as getters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_4

LANGUAGE: Javascript
CODE:
```
const app = require('electron').remote.app
console.log(app)
```

----------------------------------------

TITLE: Check if Audio Audible - Electron webview - JavaScript
DESCRIPTION: Checks whether audio is currently playing from the webview's guest page. Returns a boolean value.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_49

LANGUAGE: JavaScript
CODE:
```
<webview>.isCurrentlyAudible()
```

----------------------------------------

TITLE: Check if Can Go To Offset - Electron webview - JavaScript
DESCRIPTION: Checks if the webview can navigate to a specific offset in its navigation history relative to the current page. Requires an integer `offset`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_28

LANGUAGE: JavaScript
CODE:
```
<webview>.canGoToOffset(offset)
```

----------------------------------------

TITLE: Execute Paste - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `paste` within the focused element of the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_54

LANGUAGE: JavaScript
CODE:
```
<webview>.paste()
```

----------------------------------------

TITLE: Prompting for Touch ID with Electron JavaScript
DESCRIPTION: This snippet demonstrates how to request Touch ID authentication using Electron's `systemPreferences.promptTouchID` API. It requires the `electron` module. The method takes a `reason` string and returns a `Promise`. The promise resolves on successful authentication or rejects on failure. Note that this API is only available on macOS 10.12.2+.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/system-preferences.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
const { systemPreferences } = require('electron')

systemPreferences.promptTouchID('To get consent for a Security-Gated Thing').then(success => {
  console.log('You have successfully authenticated with Touch ID!')
}).catch(err => {
  console.log(err)
})
```

----------------------------------------

TITLE: Simple Snap launch script; Shell
DESCRIPTION: A basic shell script intended to be used as the `command` for the application within the Snap. It executes the main application binary, passing command-line arguments and redirecting standard output and error.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_8

LANGUAGE: sh
CODE:
```
#!/bin/sh

exec ""$@"" --executed-from=""$(pwd)"" --pid=$$ > /dev/null 2>&1 &
```

----------------------------------------

TITLE: Running installed Snap application; Shell
DESCRIPTION: Launches the Electron application that has been installed as a Snap package. The command is the name specified in the `snapcraft.yaml` file's `apps` section.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_6

LANGUAGE: sh
CODE:
```
electron-packager-hello-world
```

----------------------------------------

TITLE: Showing Packaged Electron App Structure - plaintext
DESCRIPTION: Illustrates the typical directory and file structure of an Electron application after being packaged by a tool like `electron-packager`. This structure represents the input expected by the `electron-windows-store` conversion tool, showing the executable, resources, and dependencies.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-store-guide.md#_snippet_1

LANGUAGE: plaintext
CODE:
```
├── Ghost.exe
├── LICENSE
├── content_resources_200_percent.pak
├── content_shell.pak
├── d3dcompiler_47.dll
├── ffmpeg.dll
├── icudtl.dat
├── libEGL.dll
├── libGLESv2.dll
├── locales
│   ├── am.pak
│   ├── ar.pak
│   ├── [...]
├── node.dll
├── resources
│   └── app.asar
├── v8_context_snapshot.bin
├── squirrel.exe
└── ui_resources_200_percent.pak
```

----------------------------------------

TITLE: Accessing asar File using Web API - HTML/JavaScript
DESCRIPTION: This snippet shows how to access a file within an asar archive from a web page context using the `file:` protocol, demonstrated here with a script tag and a library like jQuery.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-packaging.md#_snippet_7

LANGUAGE: html
CODE:
```
<script>
let $ = require('./jquery.min.js')
$.get('file:///path/to/example.asar/file.txt', (data) => {
  console.log(data)
})
</script>
```

----------------------------------------

TITLE: ASAR Packaging Structure Windows/Linux Plaintext
DESCRIPTION: This snippet illustrates the location of the `app.asar` archive when packaging your Electron application into a single file on Windows and Linux. The `app.asar` file replaces the `app` directory and is placed directly in the `resources/` directory next to the Electron executable.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_3

LANGUAGE: plaintext
CODE:
```
electron/resources/
└── app.asar
```

----------------------------------------

TITLE: Execute Undo - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `undo` within the focused element of the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_50

LANGUAGE: JavaScript
CODE:
```
<webview>.undo()
```

----------------------------------------

TITLE: ASAR Packaging Structure macOS Plaintext
DESCRIPTION: This snippet shows where to place the `app.asar` archive when packaging your Electron application into a single file on macOS. The `app.asar` file replaces the `app` directory and is located directly in the `Contents/Resources/` directory within the Electron bundle.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_2

LANGUAGE: plaintext
CODE:
```
electron/Electron.app/Contents/Resources/
└── app.asar
```

----------------------------------------

TITLE: Execute Delete - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `delete` within the focused element or selection of the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_56

LANGUAGE: JavaScript
CODE:
```
<webview>.delete()
```

----------------------------------------

TITLE: Execute Select All - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `selectAll` within the webview's guest page, typically selecting all content. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_57

LANGUAGE: JavaScript
CODE:
```
<webview>.selectAll()
```

----------------------------------------

TITLE: Example PrinterInfo Object Structure (JavaScript)
DESCRIPTION: This snippet provides an example of the structure and content of a `PrinterInfo` object as returned by Electron. It shows the standard properties (`name`, `displayName`, `description`, `status`, `isDefault`) and demonstrates the variable `options` object which contains platform-specific printer details.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/structures/printer-info.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
{
  name: 'Austin_4th_Floor_Printer___C02XK13BJHD4',
  displayName: 'Austin 4th Floor Printer @ C02XK13BJHD4',
  description: 'TOSHIBA ColorMFP',
  status: 3,
  isDefault: false,
  options: {
    copies: '1',
    'device-uri': 'dnssd://Austin%204th%20Floor%20Printer%20%40%20C02XK13BJHD4._ipps._tcp.local./?uuid=71687f1e-1147-3274-6674-22de61b110bd',
    finishings: '3',
    'job-cancel-after': '10800',
    'job-hold-until': 'no-hold',
    'job-priority': '50',
    'job-sheets': 'none,none',
    'marker-change-time': '0',
    'number-up': '1',
    'printer-commands': 'ReportLevels,PrintSelfTestPage,com.toshiba.ColourProfiles.update,com.toshiba.EFiling.update,com.toshiba.EFiling.checkPassword',
    'printer-info': 'Austin 4th Floor Printer @ C02XK13BJHD4',
    'printer-is-accepting-jobs': 'true',
    'printer-is-shared': 'false',
    'printer-is-temporary': 'false',
    'printer-location': '',
    'printer-make-and-model': 'TOSHIBA ColorMFP',
    'printer-state': '3',
    'printer-state-change-time': '1573472937',
    'printer-state-reasons': 'offline-report,com.toshiba.snmp.failed',
    'printer-type': '10531038',
    'printer-uri-supported': 'ipp://localhost/printers/Austin_4th_Floor_Printer___C02XK13BJHD4',
    system_driverinfo: 'T'
  }
}
```

----------------------------------------

TITLE: Check if DevTools Focused - Electron webview - JavaScript
DESCRIPTION: Checks if the DevTools window attached to the webview's guest page currently has focus. Returns a boolean value.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_43

LANGUAGE: JavaScript
CODE:
```
<webview>.isDevToolsFocused()
```

----------------------------------------

TITLE: Running Electron Application and Observing IPC Output Shell
DESCRIPTION: This snippet shows the expected console output when running the Electron application after implementing the IPC-based online/offline detection. The `npm start` command launches the app, and the 'online' message is logged to the console by the Main process, indicating successful reception of the initial status message from the renderer via IPC.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_5

LANGUAGE: sh
CODE:
```
npm start

> electron@1.0.0 start /electron
> electron .

online
```

----------------------------------------

TITLE: Enabling File Read Entitlement for Open Dialog (XML)
DESCRIPTION: Adds the entitlement key necessary for a sandboxed Mac App Store application to use the `dialog.showOpenDialog` function to read files selected by the user. This key must be added to the `parent.plist` file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_8

LANGUAGE: XML
CODE:
```
<key>com.apple.security.files.user-selected.read-only</key>
<true/>
```

----------------------------------------

TITLE: Using JS Flags Command Line Electron Shell
DESCRIPTION: Illustrates how to pass specific flags to the Node.js engine used by Electron via the `--js-flags` command-line switch. Shows an example enabling `--harmony_proxies` and `--harmony_collections` when launching an Electron app.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/command-line-switches.md#_snippet_2

LANGUAGE: sh
CODE:
```
$ electron --js-flags=""--harmony_proxies --harmony_collections"" your-app
```

----------------------------------------

TITLE: Close DevTools - Electron webview - JavaScript
DESCRIPTION: Closes the DevTools window that is currently attached to the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_41

LANGUAGE: JavaScript
CODE:
```
<webview>.closeDevTools()
```

----------------------------------------

TITLE: Launching Electron Debug Build PowerShell
DESCRIPTION: This command executes a debug build of the Electron executable, passing the path to an Electron application directory as a command-line parameter. This starts the Electron process that will be attached to and debugged using tools like Visual Studio. Requires a locally built debug version of electron.exe and an Electron app directory.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/debug-instructions-windows.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
./out/Testing/electron.exe ~/my-electron-app/
```

----------------------------------------

TITLE: Default Options for printToPDF Electron WebContents JavaScript
DESCRIPTION: Describes the default settings used when calling `webContents.printToPDF` without providing an options object. It lists the default values for margins, background printing, selection only printing, landscape orientation, page size, and scale factor.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_17

LANGUAGE: javascript
CODE:
```
{
  marginsType: 0,
  printBackground: false,
  printSelectionOnly: false,
  landscape: false,
  pageSize: 'A4',
  scaleFactor: 100
}
```

----------------------------------------

TITLE: Disabling Blink Features webview HTML
DESCRIPTION: Uses the `disableblinkfeatures` attribute with a comma-separated string to deactivate specific features within Chromium's Blink rendering engine for the guest content.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_14

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" disableblinkfeatures=""PreciseMemoryInfo, CSSVariables""></webview>
```

----------------------------------------

TITLE: Deprecated shell.moveItemToTrash (Electron 12)
DESCRIPTION: Shows the deprecated synchronous shell.moveItemToTrash() method and its asynchronous replacement shell.trashItem(). The new method returns a Promise and should be used instead.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// Deprecated in Electron 12
shell.moveItemToTrash(path)
```

LANGUAGE: javascript
CODE:
```
// Replace with
shell.trashItem(path).then(/* ... */)
```

----------------------------------------

TITLE: Execute Redo - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `redo` within the focused element of the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_51

LANGUAGE: JavaScript
CODE:
```
<webview>.redo()
```

----------------------------------------

TITLE: Execute Replace Misspelling - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `replaceMisspelling` within the focused element of the webview's guest page, replacing a detected misspelling with the provided text. Requires the `text` string.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_60

LANGUAGE: JavaScript
CODE:
```
<webview>.replaceMisspelling(text)
```

----------------------------------------

TITLE: Implementing a TouchBar Slot Machine Game in Electron JavaScript
DESCRIPTION: This snippet demonstrates creating a custom Electron TouchBar layout for macOS applications. It defines TouchBarLabels for game reels and results, a TouchBarButton for spinning, and game logic for a simple slot machine. It then creates a TouchBar instance with these items and attaches it to a BrowserWindow.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/touch-bar.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow, TouchBar } = require('electron')

const { TouchBarLabel, TouchBarButton, TouchBarSpacer } = TouchBar

let spinning = false

// Reel labels
const reel1 = new TouchBarLabel()
const reel2 = new TouchBarLabel()
const reel3 = new TouchBarLabel()

// Spin result label
const result = new TouchBarLabel()

// Spin button
const spin = new TouchBarButton({
  label: '🎰 Spin',
  backgroundColor: '#7851A9',
  click: () => {
    // Ignore clicks if already spinning
    if (spinning) {
      return
    }

    spinning = true
    result.label = ''

    let timeout = 10
    const spinLength = 4 * 1000 // 4 seconds
    const startTime = Date.now()

    const spinReels = () => {
      updateReels()

      if ((Date.now() - startTime) >= spinLength) {
        finishSpin()
      } else {
        // Slow down a bit on each spin
        timeout *= 1.1
        setTimeout(spinReels, timeout)
      }
    }

    spinReels()
  }
})

const getRandomValue = () => {
  const values = ['🍒', '💎', '7️⃣', '🍊', '🔔', '⭐', '🍇', '🍀']
  return values[Math.floor(Math.random() * values.length)]
}

const updateReels = () => {
  reel1.label = getRandomValue()
  reel2.label = getRandomValue()
  reel3.label = getRandomValue()
}

const finishSpin = () => {
  const uniqueValues = new Set([reel1.label, reel2.label, reel3.label]).size
  if (uniqueValues === 1) {
    // All 3 values are the same
    result.label = '💰 Jackpot!'
    result.textColor = '#FDFF00'
  } else if (uniqueValues === 2) {
    // 2 values are the same
    result.label = '😍 Winner!'
    result.textColor = '#FDFF00'
  } else {
    // No values are the same
    result.label = '🙁 Spin Again'
    result.textColor = null
  }
  spinning = false
}

const touchBar = new TouchBar({
  items: [
    spin,
    new TouchBarSpacer({ size: 'large' }),
    reel1,
    new TouchBarSpacer({ size: 'small' }),
    reel2,
    new TouchBarSpacer({ size: 'small' }),
    reel3,
    new TouchBarSpacer({ size: 'large' }),
    result
  ]
})

let window

app.whenReady().then(() => {
  window = new BrowserWindow({
    frame: false,
    titleBarStyle: 'hiddenInset',
    width: 200,
    height: 200,
    backgroundColor: '#000'
  })
  window.loadURL('about:blank')
  window.setTouchBar(touchBar)
})
```

----------------------------------------

TITLE: Defining Main Process Functions for Remote Callbacks (Javascript)
DESCRIPTION: Defines two functions in a main process module: one that accepts a `mapper` callback (potentially from renderer) and applies it to an array, and another that uses a local, main-process callback. This is part of an example highlighting the limitations of synchronous renderer callbacks in the main process.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_1

LANGUAGE: Javascript
CODE:
```
// main process mapNumbers.js
exports.withRendererCallback = (mapper) => {
  return [1, 2, 3].map(mapper)
}

exports.withLocalCallback = () => {
  return [1, 2, 3].map(x => x + 1)
}
```

----------------------------------------

TITLE: Handling Serial Port Selection in Electron Javascript
DESCRIPTION: This code sets up an event listener for the experimental `select-serial-port` event on a window's session. It prevents the default behavior, finds a specific port by vendor and product ID in the provided list, and calls the callback with the chosen port's ID or an empty string to cancel. Requires enabling experimental features via command line and web preferences. Requires the `electron` module.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/session.md#_snippet_3

LANGUAGE: javascript
CODE:
```
const { app, BrowserWindow } = require('electron')

let win = null
app.commandLine.appendSwitch('enable-features', 'ElectronSerialChooser')

app.whenReady().then(() => {
  win = new BrowserWindow({
    width: 800,
    height: 600,
    webPreferences: {
      enableBlinkFeatures: 'Serial'
    }
  })
  win.webContents.session.on('select-serial-port', (event, portList, callback) => {
    event.preventDefault()
    const selectedPort = portList.find((device) => {
      return device.vendorId === 0x2341 && device.productId === 0x0043
    })
    if (!selectedPort) {
      callback('')
    } else {
      callback(result1.portId)
    }
  })
})
```

----------------------------------------

TITLE: Inspect Shared Worker - Electron webview - JavaScript
DESCRIPTION: Opens the DevTools window specifically for debugging any Shared Worker contexts present within the webview's guest page. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_45

LANGUAGE: JavaScript
CODE:
```
<webview>.inspectSharedWorker()
```

----------------------------------------

TITLE: Example Output Structure for WebFrame Resource Usage
DESCRIPTION: This snippet illustrates the structure of the object returned by the `webFrame.getResourceUsage()` method. It shows that the object contains properties like `images`, `cssStyleSheets`, etc., each being an object with `count`, `size`, and `liveSize` properties, providing details about memory cache usage.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-frame.md#_snippet_5

LANGUAGE: javascript
CODE:
```
{ images: { count: 22, size: 2549, liveSize: 2542 }, cssStyleSheets: { /* same with ""images"" */ }, xslStyleSheets: { /* same with ""images"" */ }, fonts: { /* same with ""images"" */ }, other: { /* same with ""images"" */ } }
```

----------------------------------------

TITLE: Example Main Process Module for remote.require (Javascript)
DESCRIPTION: Defines a simple Javascript module (`main/foo.js`) located in the main process directory that exports a string value. This module is used in the subsequent snippet to demonstrate how `remote.require('./foo')` from the renderer can load modules relative to the main process entry point.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_6

LANGUAGE: Javascript
CODE:
```
// some relative module: main/foo.js
module.exports = 'bar'
```

----------------------------------------

TITLE: Installing electron-installer-snap; Shell
DESCRIPTION: Installs the `electron-installer-snap` tool as a development dependency using npm. This package simplifies the creation of Snap packages for Electron applications.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install --save-dev electron-installer-snap
```

----------------------------------------

TITLE: Setting ELECTRON_ENABLE_LOGGING in PowerShell
DESCRIPTION: Shows how to set the `ELECTRON_ENABLE_LOGGING` environment variable in a Windows PowerShell console before running Electron. Setting this variable activates internal Chrome logging to the console for debugging purposes.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/environment-variables.md#_snippet_1

LANGUAGE: powershell
CODE:
```
> set ELECTRON_ENABLE_LOGGING=true
> electron
```

----------------------------------------

TITLE: Using remote.require for Relative Paths from Renderer (Javascript)
DESCRIPTION: Demonstrates how `require('electron').remote.require('./foo')` is used in the renderer process (`renderer/index.js`) to load a module (`foo.js`) located in the main process directory (`main/`). It highlights that `remote.require` resolves relative paths based on the main process's entry point, not the renderer process's location.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_7

LANGUAGE: Javascript
CODE:
```
// renderer process: renderer/index.js
const foo = require('electron').remote.require('./foo') // bar
```

----------------------------------------

TITLE: Unsafe Exposure of ipcRenderer.send with contextBridge JavaScript
DESCRIPTION: This snippet demonstrates an insecure practice when using `contextBridge`. Directly exposing `ipcRenderer.send` allows the rendered website to send arbitrary IPC messages to the main process, bypassing intended message filtering and potentially introducing vulnerabilities. This is explicitly marked as bad code.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/context-isolation.md#_snippet_3

LANGUAGE: javascript
CODE:
```
// ❌ Bad code
contextBridge.exposeInMainWorld('myAPI', {
  send: ipcRenderer.send
})
```

----------------------------------------

TITLE: Running Tests with Extra Flags
DESCRIPTION: Executes the test suite using the 'npm run test' script and passes additional flags to the Electron binary. This example enables logging and filters tests to run only those matching 'BrowserWindow module'.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_19

LANGUAGE: sh
CODE:
```
npm run test -- \
  --enable-logging -g 'BrowserWindow module'
```

----------------------------------------

TITLE: Explicitly enabling remote module in BrowserWindow (Electron 10)
DESCRIPTION: Shows how to explicitly enable the remote module for a BrowserWindow by setting enableRemoteModule: true within the webPreferences option, required because the default changed to false in Electron 10.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const w = new BrowserWindow({
  webPreferences: {
    enableRemoteModule: true
  }
})
```

----------------------------------------

TITLE: Enabling Browser Plugins webview HTML
DESCRIPTION: Adds the boolean `plugins` attribute to the `<webview>` tag, allowing the guest page to utilize browser plugins that might be installed.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_5

LANGUAGE: HTML
CODE:
```
<webview src=""https://www.github.com/"" plugins></webview>
```

----------------------------------------

TITLE: Configuring Custom Electron Mirror (China Non-CDN) - shell
DESCRIPTION: Sets both ELECTRON_MIRROR and ELECTRON_CUSTOM_DIR environment variables to use the China non-CDN mirror and customize the directory format for downloading Electron binaries. This provides an alternative download source and path structure.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_5

LANGUAGE: shell
CODE:
```
ELECTRON_MIRROR=""https://npm.taobao.org/mirrors/electron/""
ELECTRON_CUSTOM_DIR=""{{ version }}""
```

----------------------------------------

TITLE: Including Renderer Script for Online Status HTML
DESCRIPTION: This simple HTML snippet is placed within the `online-status.html` file, typically before the closing `</body>` tag. Its purpose is to include the `renderer.js` script, which contains the JavaScript logic for detecting and responding to online/offline events using `navigator.onLine` in the browser window.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/online-offline-events.md#_snippet_1

LANGUAGE: html
CODE:
```
<script src=""renderer.js""></script>
```

----------------------------------------

TITLE: Install surf-build Tool Shell
DESCRIPTION: This command installs the `surf-build` tool globally using npm. `surf-build` is a utility used for creating custom Electron releases, typically from a fork.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_5

LANGUAGE: shell
CODE:
```
npm install -g surf-build@latest
```

----------------------------------------

TITLE: Defining Custom Linux Launcher Actions (.desktop file)
DESCRIPTION: This snippet shows the structure for defining custom actions within a Linux `.desktop` file. It specifies actions via the `Actions` key and details each action in a `[Desktop Action]` section, including its display name (`Name`) and the command to execute (`Exec`) when selected. It also restricts the action's visibility to the Unity environment (`OnlyShowIn=Unity;`). This configuration allows applications to expose specific functions directly in the desktop launcher's context menu.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/linux-desktop-actions.md#_snippet_0

LANGUAGE: plaintext
CODE:
```
Actions=PlayPause;Next;Previous

[Desktop Action PlayPause]
Name=Play-Pause
Exec=audacious -t
OnlyShowIn=Unity;

[Desktop Action Next]
Name=Next
Exec=audacious -f
OnlyShowIn=Unity;

[Desktop Action Previous]
Name=Previous
Exec=audacious -r
OnlyShowIn=Unity;
```

----------------------------------------

TITLE: Code Signing Electron App for MAS (Bash)
DESCRIPTION: A bash script demonstrating the process of code signing the various components of an Electron application for Mac App Store submission. It uses the `codesign` tool with specified certificates, entitlements files, and paths.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_4

LANGUAGE: Bash
CODE:
```
#!/bin/bash

# Name of your app.
APP=""YourApp""
# The path of your app to sign.
APP_PATH=""/path/to/YourApp.app""
# The path to the location you want to put the signed package.
RESULT_PATH=""~/Desktop/$APP.pkg""
# The name of certificates you requested.
APP_KEY=""3rd Party Mac Developer Application: Company Name (APPIDENTITY)""
INSTALLER_KEY=""3rd Party Mac Developer Installer: Company Name (APPIDENTITY)""
# The path of your plist files.
CHILD_PLIST=""/path/to/child.plist""
PARENT_PLIST=""/path/to/parent.plist""
LOGINHELPER_PLIST=""/path/to/loginhelper.plist""

FRAMEWORKS_PATH=""$APP_PATH/Contents/Frameworks""

codesign -s ""$APP_KEY"" -f --entitlements ""$CHILD_PLIST"" ""$FRAMEWORKS_PATH/Electron Framework.framework/Versions/A/Electron Framework""
codesign -s ""$APP_KEY"" -f --entitlements ""$CHILD_PLIST"" ""$FRAMEWORKS_PATH/Electron Framework.framework/Versions/A/Libraries/libffmpeg.dylib""
codesign -s ""$APP_KEY"" -f --entitlements ""$CHILD_PLIST"" ""$FRAMEWORKS_PATH/Electron Framework.framework/Versions/A/Libraries/libnode.dylib""
codesign -s ""$APP_KEY"" -f --entitlements ""$CHILD_PLIST"" ""$FRAMEWORKS_PATH/Electron Framework.framework""
codesign -s ""$APP_KEY"" -f --entitlements ""$CHILD_PLIST"" ""$FRAMEWORKS_PATH/$APP Helper.app/Contents/MacOS/$APP Helper""
codesign -s ""$APP_KEY"" -f --entitlements ""$CHILD_PLIST"" ""$FRAMEWORKS_PATH/$APP Helper.app/""
codesign -s ""$APP_KEY"" -f --entitlements ""$LOGINHELPER_PLIST"" ""$APP_PATH/Contents/Library/LoginItems/$APP Login Helper.app/Contents/MacOS/$APP Login Helper""
codesign -s ""$APP_KEY"" -f --entitlements ""$LOGINHELPER_PLIST"" ""$APP_PATH/Contents/Library/LoginItems/$APP Login Helper.app/""
codesign -s ""$APP_KEY"" -f --entitlements ""$CHILD_PLIST"" ""$APP_PATH/Contents/MacOS/$APP""
codesign -s ""$APP_KEY"" -f --entitlements ""$PARENT_PLIST"" ""$APP_PATH""

productbuild --component ""$APP_PATH"" /Applications --sign ""$INSTALLER_KEY"" ""$RESULT_PATH""
```

----------------------------------------

TITLE: Installing Electron with Specific Platform - npm
DESCRIPTION: This command installs Electron specifically for the 'win32' platform, overriding the default platform detected by npm. Useful for cross-platform development or building on a different OS.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_3

LANGUAGE: shell
CODE:
```
npm install --platform=win32 electron
```

----------------------------------------

TITLE: Rebase Local Branch onto Upstream Master | Shell
DESCRIPTION: Fetches the latest changes from the configured 'upstream' remote (the official Electron repository), then rebases the current branch onto the 'upstream/master' branch. This incorporates the latest changes from the main project while keeping local commits on top.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_3

LANGUAGE: Shell
CODE:
```
$ git fetch upstream
$ git rebase upstream/master
```

----------------------------------------

TITLE: Resolving Patch Conflicts (Manual Continue) in Electron Bash
DESCRIPTION: If `git-import-patches -3` pauses due to an unresolvable merge conflict, these commands describe how to continue the process after manually resolving the conflict. After editing the files to fix the conflict, stage the resolved files using `git add` and then resume applying the rest of the patches with `git am --continue`.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/patches.md#_snippet_4

LANGUAGE: bash
CODE:
```
git add
git am --continue
```

----------------------------------------

TITLE: Running electron-installer-snap; Shell
DESCRIPTION: Executes the `electron-installer-snap` command via npx, specifying the path to the packaged Electron application output. This command builds the `.snap` file from the packaged source.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_1

LANGUAGE: sh
CODE:
```
npx electron-installer-snap --src=out/myappname-linux-x64
```

----------------------------------------

TITLE: Snapcraft app command with desktop-launch; YAML
DESCRIPTION: Defines the `command` for the application within a `snapcraft.yaml` using the `desktop-launch` helper, typically for `strict` confinement. It sets environment variables and points to the application's entry point.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_9

LANGUAGE: yaml
CODE:
```
apps:
  myApp:
    # Correct the TMPDIR path for Chromium Framework/Electron to ensure
    # libappindicator has readable resources.
    command: env TMPDIR=$XDG_RUNTIME_DIR PATH=/usr/local/bin:${PATH} ${SNAP}/bin/desktop-launch $SNAP/myApp/desktop
    desktop: usr/share/applications/desktop.desktop
```

----------------------------------------

TITLE: Installing Electron with Unsafe Permissions - sh
DESCRIPTION: Installs Electron using 'sudo' and the '--unsafe-perm=true' flag. This can resolve installation errors related to permissions (EACCESS) but should be used with caution as it disables npm's safety checks regarding running scripts as root.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/installation.md#_snippet_7

LANGUAGE: sh
CODE:
```
sudo npm install electron --unsafe-perm=true
```

----------------------------------------

TITLE: Creating BrowserWindow Instance using remote Module (Javascript)
DESCRIPTION: Shows how to require and use the `BrowserWindow` constructor from the main process within a renderer process via the `remote` module to create a new window. This demonstrates synchronous access to a main process class.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_0

LANGUAGE: Javascript
CODE:
```
const { BrowserWindow } = require('electron').remote
const win = new BrowserWindow({ width: 800, height: 600 })
win.loadURL('https://github.com')
```

----------------------------------------

TITLE: Main Process Entry Point Example for remote.require (Javascript)
DESCRIPTION: Provides a basic example of an Electron main process entry point file (`main/index.js`) that requires the `app` module and waits for the `ready` event. This snippet is part of the context for demonstrating how `remote.require` resolves paths relative to this main entry point.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_5

LANGUAGE: Javascript
CODE:
```
// main process: main/index.js
const { app } = require('electron')
app.whenReady().then(() => { /* ... */ })
```

----------------------------------------

TITLE: Setting up Desktop App Converter - PowerShell
DESCRIPTION: Runs the setup script for the Windows Desktop App Converter tool, which is an alternative method for packaging desktop applications including Electron apps into .appx format. It requires specifying the path to a Windows base image file (`BaseImage-14316.wim`) used for the container environment. This must be run from an elevated PowerShell after downloading the necessary files.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-store-guide.md#_snippet_4

LANGUAGE: powershell
CODE:
```
.\DesktopAppConverter.ps1 -Setup -BaseImage .\BaseImage-14316.wim
```

----------------------------------------

TITLE: Checking DevTools Extension Installation in Electron JS
DESCRIPTION: This snippet demonstrates how to check if a specific DevTools extension, 'devtron', is installed by accessing the `BrowserWindow.getDevToolsExtensions()` method and checking for the extension's name as a key in the returned object. It then logs the result. Note that `getDevToolsExtensions` is deprecated.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/browser-window.md#_snippet_7

LANGUAGE: javascript
CODE:
```
const { BrowserWindow } = require('electron')

const installed = 'devtron' in BrowserWindow.getDevToolsExtensions()
console.log(installed)
```

----------------------------------------

TITLE: Setting Windbg Symbol Path (MS and Electron) - Windbg Symbol Path
DESCRIPTION: Configures the Windbg debugger's symbol path to include both Microsoft's public symbol server and the Electron symbol server. Microsoft's server is listed first, meaning symbols will be searched there before the Electron server. A local cache directory is used for downloaded symbols.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/setting-up-symbol-server.md#_snippet_1

LANGUAGE: Windbg Symbol Path
CODE:
```
SRV*c:\code\symbols\*https://msdl.microsoft.com/download/symbols;SRV*c:\code\symbols\*https://symbols.electronjs.org
```

----------------------------------------

TITLE: Formatting Changed Code with git-clang-format (Shell)
DESCRIPTION: This command runs clang-format on the code changes currently staged in your Git repository. It modifies the staged files according to the configured style.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/clang-format.md#_snippet_3

LANGUAGE: Shell
CODE:
```
git-clang-format
```

----------------------------------------

TITLE: Defining Snapcraft config from .deb; YAML
DESCRIPTION: Configures a `snapcraft.yaml` file to build a Snap package using an existing `.deb` package as the primary source. It defines metadata, confinement, and parts that stage the `.deb` contents and necessary libraries.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_7

LANGUAGE: yaml
CODE:
```
name: myApp
version: '2.0.0'
summary: A little description for the app.
description: |
 You know what? This app is amazing! It does all the things
 for you. Some say it keeps you young, maybe even happy.

grade: stable
confinement: classic

parts:
  slack:
    plugin: dump
    source: my-deb.deb
    source-type: deb
    after:
      - desktop-gtk3
    stage-packages:
      - libasound2
      - libnotify4
      - libnspr4
      - libnss3
      - libpcre3
      - libpulse0
      - libxss1
      - libxtst6
  electron-launch:
    plugin: dump
    source: files/
    prepare: |
      chmod +x bin/electron-launch

apps:
  myApp:
    command: bin/electron-launch $SNAP/usr/lib/myApp/myApp
    desktop: usr/share/applications/myApp.desktop
    # Correct the TMPDIR path for Chromium Framework/Electron to ensure
    # libappindicator has readable resources.
    environment:
      TMPDIR: $XDG_RUNTIME_DIR
```

----------------------------------------

TITLE: Example HTML Form for POST Data Limitation
DESCRIPTION: Provides an example of an HTML form using method=""POST"" and enctype=""application/x-www-form-urlencoded"". This snippet illustrates a limitation where keys starting with '--' are not correctly handled, potentially causing it to be submitted as multipart/form-data unexpectedly when nativeWindowOpen is disabled.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/structures/post-body.md#_snippet_0

LANGUAGE: html
CODE:
```
<form
  target=""_blank""
  method=""POST""
  enctype=""application/x-www-form-urlencoded""
  action=""https://postman-echo.com/post""
>
  <input type=""text"" name=""--theKey"">
  <input type=""submit"">
</form>
```

----------------------------------------

TITLE: Accessing webContents Module Directly (JavaScript)
DESCRIPTION: This snippet shows how to directly require the webContents module from Electron. Accessing the module provides static methods like `getAllWebContents` and `getFocusedWebContents` that operate across all WebContents instances.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/web-contents.md#_snippet_1

LANGUAGE: javascript
CODE:
```
const { webContents } = require('electron')
console.log(webContents)
```

----------------------------------------

TITLE: Syncing gclient for Windows on Arm (CMD)
DESCRIPTION: Sets the ELECTRON_BUILDING_WOA environment variable to 1 and then runs 'gclient sync -f' with branch heads and tags. This prepares the environment and synchronizes dependencies specifically for building Electron for Windows on Arm (WoA) using the Command Prompt.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_16

LANGUAGE: bat
CODE:
```
set ELECTRON_BUILDING_WOA=1
gclient sync -f --with_branch_heads --with_tags
```

----------------------------------------

TITLE: Generating Testing Build Config Arguments
DESCRIPTION: Uses the `gn gen` command to create or update the build configuration for the 'out/Testing' directory, specifically importing the arguments defined in 'testing.gn'. This command generates the build files needed by Ninja.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_6

LANGUAGE: sh
CODE:
```
gn gen out/Testing --args=""import(\""//electron/build/args/testing.gn\"") $GN_EXTRA_ARGS""
```

----------------------------------------

TITLE: Syncing gclient for Windows on Arm (PowerShell)
DESCRIPTION: Sets the ELECTRON_BUILDING_WOA environment variable to 1 using PowerShell syntax and then runs 'gclient sync -f' with branch heads and tags. This prepares the environment and synchronizes dependencies specifically for building Electron for Windows on Arm (WoA) using PowerShell.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_17

LANGUAGE: powershell
CODE:
```
$env:ELECTRON_BUILDING_WOA=1
gclient sync -f --with_branch_heads --with_tags
```

----------------------------------------

TITLE: Running Exclusive Mocha Tests - Mocha - JavaScript
DESCRIPTION: This JavaScript snippet demonstrates how to use the `.only` feature provided by the Mocha test framework. Appending `.only` to a `describe` or `it` block limits the test runner to only execute that specific block or test case, which is useful for focusing on and debugging individual tests.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-system-overview.md#_snippet_3

LANGUAGE: JavaScript
CODE:
```
describe.only('some feature', () => {
  // ... only tests in this block will be run
})
```

----------------------------------------

TITLE: Staging Changed Files with Git (Shell)
DESCRIPTION: This Git command stages a modified file, preparing it for a commit. This is used before and after running `git-clang-format` in the recommended workflow to track changes made by the formatting tool.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/clang-format.md#_snippet_2

LANGUAGE: Shell
CODE:
```
git add your_changed_file.cc
```

----------------------------------------

TITLE: Enabling Node Integration webview HTML
DESCRIPTION: Adds the boolean `nodeintegration` attribute to the `<webview>` tag, granting the guest page access to Node.js APIs like `require` and `process`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_2

LANGUAGE: HTML
CODE:
```
<webview src=""http://www.google.com/"" nodeintegration></webview>
```

----------------------------------------

TITLE: Rebuilding for Custom Electron Build (npm Shell)
DESCRIPTION: Provides an npm command to rebuild all installed native modules, specifically instructing `node-gyp` (which npm uses internally for rebuilding) to use the Node.js headers located at the specified path within a custom Electron build directory, bypassing standard header downloads.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/using-native-node-modules.md#_snippet_3

LANGUAGE: sh
CODE:
```
npm rebuild --nodedir=/path/to/electron/vendor/node
```

----------------------------------------

TITLE: Resolving libtinfo.so.5 Loading Error (Shell)
DESCRIPTION: This command creates a symbolic link to resolve a common troubleshooting error where prebuilt `clang` cannot find `libtinfo.so.5`. It links to `libncurses.so.5`, which often provides the necessary functionality.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_7

LANGUAGE: sh
CODE:
```
$ sudo ln -s /usr/lib/libncurses.so.5 /usr/lib/libtinfo.so.5
```

----------------------------------------

TITLE: Main App App Sandbox Entitlements (XML)
DESCRIPTION: Defines the entitlements for the main application process when submitting to the Mac App Store. It enables the app sandbox and specifies application groups for inter-process communication, requiring replacement of placeholders with your specific Team ID and bundle ID.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_2

LANGUAGE: XML
CODE:
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<!DOCTYPE plist PUBLIC ""-//Apple//DTD PLIST 1.0//EN"" ""http://www.apple.com/DTDs/PropertyList-1.0.dtd"">
<plist version=""1.0"">
  <dict>
    <key>com.apple.security.app-sandbox</key>
    <true/>
    <key>com.apple.security.application-groups</key>
    <array>
      <string>TEAM_ID.your.bundle.id</string>
    </array>
  </dict>
</plist>
```

----------------------------------------

TITLE: Example Basic GPU Info Response Structure - Electron
DESCRIPTION: Illustrates the structure of the object returned by the `app.getGPUInfo('basic')` method, showing the typical properties available for basic GPU information, including attributes, device details, and machine model.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_8

LANGUAGE: JavaScript
CODE:
```
{
  auxAttributes:
   {
     amdSwitchable: true,
     canSupportThreadedTextureMailbox: false,
     directComposition: false,
     directRendering: true,
     glResetNotificationStrategy: 0,
     inProcessGpu: true,
     initializationTime: 0,
     jpegDecodeAcceleratorSupported: false,
     optimus: false,
     passthroughCmdDecoder: false,
     sandboxed: false,
     softwareRendering: false,
     supportsOverlays: false,
     videoDecodeAcceleratorFlags: 0
   },
  gpuDevice:
   [{ active: true, deviceId: 26657, vendorId: 4098 },
     { active: false, deviceId: 3366, vendorId: 32902 }],
  machineModelName: 'MacBookPro',
  machineModelVersion: '11.5'
}
```

----------------------------------------

TITLE: Generating Release Build Config Arguments
DESCRIPTION: Uses the `gn gen` command to create or update the build configuration for the 'out/Release' directory, specifically importing the arguments defined in 'release.gn'. This configures a release (non-component or static) build.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_7

LANGUAGE: sh
CODE:
```
gn gen out/Release --args=""import(\""//electron/build/args/release.gn\"") $GN_EXTRA_ARGS""
```

----------------------------------------

TITLE: Modify CFBundleIdentifier in Electron Info.plist (XML)
DESCRIPTION: This snippet shows how to modify the `CFBundleIdentifier` key within the `Info.plist` file of the Electron application bundle. This change is required during development and testing to match the bundle identifier created in iTunes Connect, enabling the application to interact with Apple's In-App Purchase service.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/in-app-purchases.md#_snippet_0

LANGUAGE: xml
CODE:
```
<key>CFBundleIdentifier</key>
<string>com.example.app</string>
```

----------------------------------------

TITLE: Calling Main Process Functions with Remote Callbacks (Javascript)
DESCRIPTION: Demonstrates how to use `remote.require` to access a main process module and call its functions (`withRendererCallback`, `withLocalCallback`) from the renderer process. It shows that the synchronous return value from a renderer callback executed in the main process (`withRendererCb`) is not propagated correctly, resulting in `undefined`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/remote.md#_snippet_2

LANGUAGE: Javascript
CODE:
```
// renderer process
const mapNumbers = require('electron').remote.require('./mapNumbers')
const withRendererCb = mapNumbers.withRendererCallback(x => x + 1)
const withLocalCb = mapNumbers.withLocalCallback()

console.log(withRendererCb, withLocalCb)
// [undefined, undefined, undefined], [2, 3, 4]
```

----------------------------------------

TITLE: Overriding Electron Distribution Path in Shell
DESCRIPTION: Demonstrates setting the `ELECTRON_OVERRIDE_DIST_PATH` environment variable in a shell. This variable is used when running from the `electron` package to direct the `electron` command to a specific local Electron build instead of the default downloaded version.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/environment-variables.md#_snippet_4

LANGUAGE: sh
CODE:
```
export ELECTRON_OVERRIDE_DIST_PATH=/Users/username/projects/electron/out/Testing
```

----------------------------------------

TITLE: Generating Xcode Project with GN Shell
DESCRIPTION: This shell command uses the `gn gen` tool to create an Xcode project workspace (`.xcworkspace`) in the specified output directory (`out/Testing`). The `--ide=xcode` argument tells GN to generate files compatible with Xcode, which allows debugging of Electron sources (though not building from Xcode itself). This workspace is necessary for setting breakpoints and inspecting the code.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/debugging-instructions-macos-xcode.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ gn gen out/Testing --ide=xcode
```

----------------------------------------

TITLE: Staging and Committing Changes | Shell
DESCRIPTION: Stages the specified modified files for the next commit using 'git add', then opens the default editor to write the commit message for the staged changes using 'git commit'. Used to save logical groups of changes.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ git add my/changed/files
$ git commit
```

----------------------------------------

TITLE: Building Release Configuration with Ninja
DESCRIPTION: Compiles the Electron project using the Ninja build system, targeting the 'electron' target within the 'out/Release' build directory.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_9

LANGUAGE: sh
CODE:
```
ninja -C out/Release electron
```

----------------------------------------

TITLE: Enabling Network Client Access Entitlement (XML)
DESCRIPTION: Adds the entitlement key required for a sandboxed Mac App Store application to make outgoing network connections (act as a network client). This key must be added to the `parent.plist` file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_6

LANGUAGE: XML
CODE:
```
<key>com.apple.security.network.client</key>
<true/>
```

----------------------------------------

TITLE: Replacing Deprecated webview.getWebContents() - JavaScript
DESCRIPTION: The webview.getWebContents() API is deprecated due to its reliance on the remote module. This snippet shows the direct replacement using require('electron').remote.webContents.fromId(), passing the webContents ID obtained from the deprecated method's replacement. It requires the electron module.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_13

LANGUAGE: javascript
CODE:
```
// Deprecated
webview.getWebContents()
```

LANGUAGE: javascript
CODE:
```
// Replace with
const { remote } = require('electron')
remote.webContents.fromId(webview.getWebContentsId())
```

----------------------------------------

TITLE: Displaying Default Electron Menu Structure Shell
DESCRIPTION: Displays the resulting hierarchical structure of an Electron menu built from the default template. This output confirms that, without specific positioning instructions, menu items are displayed in the same sequence as defined in the input template array.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_4

LANGUAGE: sh
CODE:
```
- 1\n- 2\n- 3\n- 4
```

----------------------------------------

TITLE: Configuring Electron Build with System Clang (Shell)
DESCRIPTION: This `gn gen` command configures the Electron build to use a system-installed `clang` compiler instead of the default prebuilt Chromium version. It specifies the path to the system clang using the `clang_base_path` argument.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_8

LANGUAGE: sh
CODE:
```
$ gn gen out/Testing --args='import(""//electron/build/args/testing.gn"") clang_base_path = ""/usr/local/bin""'
```

----------------------------------------

TITLE: Creating Missing NPM Directory (PowerShell)
DESCRIPTION: This command uses the `mkdir` utility to create the `npm` directory within the user's `AppData\Roaming` folder. It is a troubleshooting step recommended to fix an `Error: ENOENT, stat 'C:\Users\USERNAME\AppData\Roaming\npm'` that can occur when npm cannot find this expected directory.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-windows.md#_snippet_2

LANGUAGE: powershell
CODE:
```
$ mkdir ~\AppData\Roaming\npm
```

----------------------------------------

TITLE: Checking Code Style - npm - Shell
DESCRIPTION: This command executes the project's linting scripts via npm to check if code changes conform to the established coding style guidelines. It helps maintain code consistency across the project.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-system-overview.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ npm run lint
```

----------------------------------------

TITLE: Running Tests with Release Build - npm - Shell
DESCRIPTION: This command executes the test suite using the release build of Electron. This is required for testing functionality that depends on native modules, which may not be compatible with the debug build. The `-R` flag is specific to how the Electron test runner is configured to select the build type.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-system-overview.md#_snippet_5

LANGUAGE: Shell
CODE:
```
$ npm test -- -R
```

----------------------------------------

TITLE: Adding New Upstream Patch in Electron Bash
DESCRIPTION: This sequence of commands demonstrates how to add a new patch to an upstream dependency's patch set in Electron. It involves navigating to the dependency's source directory, modifying code, creating a git commit for the changes, and then using the `git-export-patches` script to generate the patch file and update the `.patches` manifest. A commit is required because `git-export-patches` only exports committed changes.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/patches.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd src/third_party/electron_node
vim some/code/file.cc
git commit
../../electron/script/git-export-patches -o ../../electron/patches/node
```

----------------------------------------

TITLE: Installing Snap package locally; Shell
DESCRIPTION: Installs the locally built `.snap` package using the `snap install` command with the `--dangerous` flag. This flag is necessary for installing snaps that are not signed and published in the Snap Store.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/snapcraft.md#_snippet_5

LANGUAGE: sh
CODE:
```
sudo snap install electron-packager-hello-world_0.1_amd64.snap --dangerous
```

----------------------------------------

TITLE: Create Node Headers Directory (Windows)
DESCRIPTION: Creates the required directory structure (`gen\node_headers\Release`) within the build output folder. This is where the copied `node.lib` file will be placed.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_9

LANGUAGE: powershell
CODE:
```
mkdir gen\node_headers\Release
```

----------------------------------------

TITLE: Generating Build Config (Linux/macOS)
DESCRIPTION: Changes directory to 'src', sets the CHROMIUM_BUILDTOOLS_PATH environment variable, optionally sets GN_EXTRA_ARGS for sccache, and runs 'gn gen' to generate the build configuration files for a specified output directory (e.g., out/Testing) using imported arguments.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_4

LANGUAGE: sh
CODE:
```
cd src
export CHROMIUM_BUILDTOOLS_PATH=`pwd`/buildtools
export GN_EXTRA_ARGS=""${GN_EXTRA_ARGS} cc_wrapper=\""${PWD}/electron/external_binaries/sccache\""""
gn gen out/Testing --args=""import(\""//electron/build/args/testing.gn\"") $GN_EXTRA_ARGS""
```

----------------------------------------

TITLE: Installing ARM Cross-Compilation Deps on Ubuntu (Shell)
DESCRIPTION: This `apt-get` command installs the specific packages needed on Ubuntu for cross-compiling Electron to the `arm` architecture. It includes the necessary cross-development libraries and the appropriate cross-compiler.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_4

LANGUAGE: sh
CODE:
```
$ sudo apt-get install libc6-dev-armhf-cross linux-libc-dev-armhf-cross \
                       g++-arm-linux-gnueabihf
```

----------------------------------------

TITLE: Structuring API Reference Page Title and Description
DESCRIPTION: This snippet shows the required format for an API reference page, using the actual object name as the H1 title and a brief description on the line immediately following, prefixed with a '>' symbol.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_1

LANGUAGE: markdown
CODE:
```
# session

> Manage browser sessions, cookies, cache, proxy settings, etc.
```

----------------------------------------

TITLE: Setting up Git Cache
DESCRIPTION: Configures a shared git cache directory to speed up subsequent checkouts of the Electron repository and its dependencies using `gclient`. This is beneficial when working with multiple local copies of the Electron source code.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_0

LANGUAGE: sh
CODE:
```
export GIT_CACHE_PATH=""${HOME}/.git_cache""
mkdir -p ""${GIT_CACHE_PATH}""
```

----------------------------------------

TITLE: Renamed macOS App Structure Plaintext
DESCRIPTION: This snippet displays the expected directory structure for a rebranded Electron application on macOS. It shows how the main app bundle and its helper app bundle are renamed, reflecting the new application name throughout the structure.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_4

LANGUAGE: plaintext
CODE:
```
MyApp.app/Contents
├── Info.plist
├── MacOS/
│   └── MyApp
└── Frameworks/
    └── MyApp Helper.app
        ├── Info.plist
        └── MacOS/
            └── MyApp Helper
```

----------------------------------------

TITLE: Displaying Electron Menu Structure with Item Positioning Shell
DESCRIPTION: Displays the final menu structure generated from the template that employs `before` and `after` properties for individual item positioning. This output demonstrates the reordering of specific items based on the positioning instructions, including an unexpected leading separator.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/menu.md#_snippet_8

LANGUAGE: sh
CODE:
```
- ---\n- 3\n- 2\n- 1
```

----------------------------------------

TITLE: Adding Arm64 Components to VS 2017 PowerShell
DESCRIPTION: Command used to add the necessary Arm64 development components and workloads to an existing Visual Studio 2017 installation, required for compiling native modules for Windows on Arm.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-arm.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
vs_installer.exe ^
--add Microsoft.VisualStudio.Workload.NativeDesktop ^
--add Microsoft.VisualStudio.Component.VC.ATLMFC ^
--add Microsoft.VisualStudio.Component.VC.Tools.ARM64 ^
--add Microsoft.VisualStudio.Component.VC.MFC.ARM64 ^
--includeRecommended
```

----------------------------------------

TITLE: Generating Visual Studio Project (PowerShell)
DESCRIPTION: This command runs `gn gen` to process the Electron build configuration and generate a Visual Studio project file (`.sln`) in the `out/Testing` directory. The `--ide=vs2017` flag specifies the target Visual Studio version. This allows developers to open and browse the project structure within Visual Studio, although the actual build is typically still performed via command line.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-windows.md#_snippet_1

LANGUAGE: powershell
CODE:
```
$ gn gen out/Testing --ide=vs2017
```

----------------------------------------

TITLE: Generating 32bit Electron Build Files (PowerShell)
DESCRIPTION: This command uses the `gn gen` tool to create build configuration files specifically for a 32-bit (x86) release build of Electron. It targets the `out/Release-x86` directory, imports standard release arguments, and sets the target CPU architecture to `x86`. This prepares the build environment for compiling the 32-bit version.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-windows.md#_snippet_0

LANGUAGE: powershell
CODE:
```
$ gn gen out/Release-x86 --args=""import(""//electron/build/args/release.gn"") target_cpu=\""x86\""""
```

----------------------------------------

TITLE: Copy electron.lib to node.lib (Windows)
DESCRIPTION: Copies the generated `electron.lib` file from the build output directory to the newly created `gen\node_headers\Release` folder, renaming it to `node.lib`. This step is crucial for the Windows testing setup.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_10

LANGUAGE: powershell
CODE:
```
copy electron.lib gen\node_headers\Release\node.lib
```

----------------------------------------

TITLE: Installing Build Dependencies on Fedora (Shell)
DESCRIPTION: This `dnf` command installs the required build dependencies for Electron on Fedora Linux distributions. It ensures that all necessary compilers, development libraries, and tools are present for a successful build.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_3

LANGUAGE: sh
CODE:
```
$ sudo dnf install clang dbus-devel gtk3-devel libnotify-devel \
                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \
                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \
                   nss-devel python-dbusmock openjdk-8-jre
```

----------------------------------------

TITLE: Change Directory to Build Output (Windows)
DESCRIPTION: Changes the current working directory to the 'Testing' build output folder (`out\Testing`). This step is required before copying the `electron.lib` file.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_8

LANGUAGE: powershell
CODE:
```
cd out\Testing
```

----------------------------------------

TITLE: Run Custom Electron Build with surf-build Shell
DESCRIPTION: This command uses `surf-build` to trigger a custom Electron build from a specific commit (`YOUR_COMMIT`) in a specified GitHub repository (`https://github.com/MYORG/electron`). The `-n` flag sets the build name format.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_7

LANGUAGE: sh
CODE:
```
surf-build -r https://github.com/MYORG/electron -s YOUR_COMMIT -n 'surf-PLATFORM-ARCH'
```

----------------------------------------

TITLE: Get User Agent - Electron webview - JavaScript
DESCRIPTION: Returns the current user agent string being used by the guest page in the webview. This can be the default or an overridden one.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_36

LANGUAGE: JavaScript
CODE:
```
<webview>.getUserAgent()
```

----------------------------------------

TITLE: Illustrating Markdown Page Title Structure
DESCRIPTION: This snippet demonstrates the required heading levels for the main page title and subsequent chapters and sub-chapters within an Electron documentation page.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_0

LANGUAGE: markdown
CODE:
```
# Quick Start

...

## Main process

...

## Renderer process

...

## Run your app

...

### Run as a distribution

...

### Manually downloaded Electron binary

...
```

----------------------------------------

TITLE: Sending Non-Serializable Objects via IPC (Deprecated) - JavaScript
DESCRIPTION: This shows the old behavior before Electron 8, where sending functions over IPC would silently drop them. Starting from Electron 8, this action now throws an error due to the use of the Structured Clone Algorithm. It demonstrates a breaking change in how non-serializable data is handled.
SOURCE: https://github.com/discord/electron/blob/main/docs/breaking-changes.md#_snippet_11

LANGUAGE: javascript
CODE:
```
// Previously:
ipcRenderer.send('channel', { value: 3, someFunction: () => {} })
// => results in { value: 3 } arriving in the main process
```

LANGUAGE: javascript
CODE:
```
// From Electron 8:
ipcRenderer.send('channel', { value: 3, someFunction: () => {} })
// => throws Error(""() => {} could not be cloned."")
```

----------------------------------------

TITLE: VS 2017 x86_arm64 Cross-Compile Command Prompt Output
DESCRIPTION: Example output displayed when initializing a Visual Studio 2017 Developer Command Prompt for cross-compilation from x86 to arm64, typically used when developing directly on an Arm device.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-arm.md#_snippet_3

LANGUAGE: Batch
CODE:
```
**********************************************************************
** Visual Studio 2017 Developer Command Prompt v15.9.15
** Copyright (c) 2017 Microsoft Corporation
**********************************************************************
[vcvarsall.bat] Environment initialized for: 'x86_arm64'
```

----------------------------------------

TITLE: Running Built Executable (Linux)
DESCRIPTION: Executes the built Electron application from the specified path within the 'out/Testing' directory on Linux. The path points directly to the executable file.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_12

LANGUAGE: sh
CODE:
```
./out/Testing/electron
```

----------------------------------------

TITLE: Aborting Git Am After Sync Interruption
DESCRIPTION: Provides troubleshooting steps to resolve a 'gclient sync' error related to rebase conflicts when no conflicts exist in the 'src/electron' directory. It navigates to the 'src' directory, aborts any pending 'git am' operation, returns to the 'electron' directory, and re-runs 'gclient sync -f'.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_21

LANGUAGE: sh
CODE:
```
cd ../
git am --abort
cd electron
gclient sync -f
```

----------------------------------------

TITLE: Running Built Executable (macOS)
DESCRIPTION: Executes the built Electron application from the specified path within the 'out/Testing' directory on macOS. The path points to the executable inside the .app bundle.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_10

LANGUAGE: sh
CODE:
```
./out/Testing/Electron.app/Contents/MacOS/Electron
```

----------------------------------------

TITLE: Building Testing Configuration with Ninja
DESCRIPTION: Compiles the Electron project using the Ninja build system, targeting the 'electron' target within the 'out/Testing' build directory.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_8

LANGUAGE: sh
CODE:
```
ninja -C out/Testing electron
```

----------------------------------------

TITLE: Install Python 2.7 with Homebrew (sh)
DESCRIPTION: Installs Python 2.7 using the Homebrew package manager and then forces a link to make it the default python executable. This is recommended if your system's default Python version lacks TLS 1.2 support.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-macos.md#_snippet_1

LANGUAGE: sh
CODE:
```
brew install python@2 && brew link python@2 --force
```

----------------------------------------

TITLE: Check if Audio Muted - Electron webview - JavaScript
DESCRIPTION: Checks whether the audio output for the webview's guest page is currently muted. Returns a boolean value.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_48

LANGUAGE: JavaScript
CODE:
```
<webview>.isAudioMuted()
```

----------------------------------------

TITLE: Run All Unit Tests (npm)
DESCRIPTION: Executes all unit tests for Electron using an npm script. The tests are structured as an Electron application located in the `spec` folder.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_4

LANGUAGE: shell
CODE:
```
npm run test
```

----------------------------------------

TITLE: Packaging Distributable Zip
DESCRIPTION: Uses the Ninja build system to execute the 'electron:electron_dist_zip' target within the 'out/Release' build directory, which packages the built Electron distribution into a zip file.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_14

LANGUAGE: sh
CODE:
```
ninja -C out/Release electron:electron_dist_zip
```

----------------------------------------

TITLE: Installing Build Dependencies on Ubuntu (Shell)
DESCRIPTION: This `apt-get` command installs the essential development libraries and tools required to build Electron on Ubuntu distributions. It includes build tools, specific library headers (GTK 3, libnotify, etc.), and other necessary packages like `python-dbusmock` and `openjdk-8-jre`.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_1

LANGUAGE: sh
CODE:
```
$ sudo apt-get install build-essential clang libdbus-1-dev libgtk-3-dev \
                       libnotify-dev libgnome-keyring-dev \
                       libasound2-dev libcap-dev libcups2-dev libxtst-dev \
                       libxss1 libnss3-dev gcc-multilib g++-multilib curl \
                       gperf bison python-dbusmock openjdk-8-jre
```

----------------------------------------

TITLE: Navigate To Index - Electron webview - JavaScript
DESCRIPTION: Navigates to a specific page in the webview's history using its absolute index. Requires an integer `index`.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_32

LANGUAGE: JavaScript
CODE:
```
<webview>.goToIndex(index)
```

----------------------------------------

TITLE: Generating Build Config (Windows)
DESCRIPTION: Changes directory to 'src', sets the CHROMIUM_BUILDTOOLS_PATH environment variable using Windows path syntax, and runs 'gn gen' to generate the build configuration files for a specified output directory (e.g., out/Testing) using imported arguments.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_5

LANGUAGE: bat
CODE:
```
cd src
set CHROMIUM_BUILDTOOLS_PATH=%cd%\buildtools
gn gen out\Testing --args=""import(\""//electron/build/args/testing.gn\"")""
```

----------------------------------------

TITLE: Formatting a Single C++ File (Shell)
DESCRIPTION: This command uses clang-format to format a specific C++ file in place (`-i`). Replace `path/to/electron/file.cc` with the actual path to the file you want to format.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/clang-format.md#_snippet_1

LANGUAGE: Shell
CODE:
```
clang-format -i path/to/electron/file.cc
```

----------------------------------------

TITLE: Committing and Pushing Updates for Pull Request | Shell
DESCRIPTION: Stages modified files, creates a new commit with those changes, and pushes the updated local branch to the user's remote fork on GitHub. This sequence is used to incorporate feedback and make updates to an existing pull request.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_7

LANGUAGE: Shell
CODE:
```
$ git add my/changed/files
$ git commit
$ git push origin my-branch
```

----------------------------------------

TITLE: Running Built Executable (Windows)
DESCRIPTION: Executes the built Electron application from the specified path within the 'out/Testing' directory on Windows. The path points directly to the .exe file.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_11

LANGUAGE: bat
CODE:
```
./out/Testing/electron.exe
```

----------------------------------------

TITLE: Including Renderer Script in HTML
DESCRIPTION: Adds a <script> tag to an HTML file (typically an Electron renderer process view) to load an external JavaScript file. This file will contain the logic to run within the renderer context, such as initializing frontend behavior or sending notifications using the HTML5 API.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/notifications.md#_snippet_0

LANGUAGE: html
CODE:
```
<script src=""renderer.js""></script>

```

----------------------------------------

TITLE: Editing Existing Upstream Patch in Electron Bash
DESCRIPTION: This command sequence shows how to modify an existing patch applied to an upstream dependency in Electron. It involves navigating to the dependency's source, editing the relevant file, finding the SHA of the original patch commit, creating a fixup commit, interactively rebasing to squash the fixup commit into the original patch commit, and finally exporting the updated patch set using `git-export-patches`. This process updates the corresponding patch file and potentially changes its shasum.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/patches.md#_snippet_1

LANGUAGE: bash
CODE:
```
cd src/v8
vim some/code/file.cc
git log
# Find the commit sha of the patch you want to edit.
git commit --fixup [COMMIT_SHA]
git rebase --autosquash -i [COMMIT_SHA]^
../electron/script/git-export-patches -o ../electron/patches/v8
```

----------------------------------------

TITLE: Execute Unselect - Electron webview - JavaScript
DESCRIPTION: Executes the editing command `unselect` within the webview's guest page, removing any current selection. This method requires no parameters.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/webview-tag.md#_snippet_58

LANGUAGE: JavaScript
CODE:
```
<webview>.unselect()
```

----------------------------------------

TITLE: Building and Testing Changes - npm - Shell
DESCRIPTION: This command sequence first triggers a rebuild of the Electron source code using `npm run build` and then immediately runs the test suite using `npm test`. This ensures that the tests are executed against the most recent build artifacts after code modifications.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-system-overview.md#_snippet_2

LANGUAGE: Shell
CODE:
```
$ npm run build && npm test
```

----------------------------------------

TITLE: Manually Enabling Accessibility on macOS (Objective-C)
DESCRIPTION: This Objective-C code defines a class method to programmatically enable or disable the `AXManualAccessibility` attribute for a running Electron application on macOS. It uses the Accessibility API (`AXUIElementRef`, `AXUIElementSetAttributeValue`) to set the attribute value, which allows third-party assistive technology to interact with the app's accessibility tree. Requires linking against the Accessibility framework.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/accessibility.md#_snippet_1

LANGUAGE: objectivec
CODE:
```
CFStringRef kAXManualAccessibility = CFSTR(""AXManualAccessibility"");

+ (void)enableAccessibility:(BOOL)enable inElectronApplication:(NSRunningApplication *)app
{
    AXUIElementRef appRef = AXUIElementCreateApplication(app.processIdentifier);
    if (appRef == nil)
        return;

    CFBooleanRef value = enable ? kCFBooleanTrue : kCFBooleanFalse;
    AXUIElementSetAttributeValue(appRef, kAXManualAccessibility, value);
    CFRelease(appRef);
}
```

----------------------------------------

TITLE: Installing Build Dependencies on RHEL/CentOS (Shell)
DESCRIPTION: This `yum` command installs the necessary build dependencies for Electron on RHEL and CentOS systems. It covers core development packages such as `clang`, `dbus-devel`, `gtk3-devel`, various library development files, and supplementary tools.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_2

LANGUAGE: sh
CODE:
```
$ sudo yum install clang dbus-devel gtk3-devel libnotify-devel \
                   libgnome-keyring-devel xorg-x11-server-utils libcap-devel \
                   cups-devel libXtst-devel alsa-lib-devel libXrandr-devel \
                   nss-devel python-dbusmock openjdk-8-jre
```

----------------------------------------

TITLE: Displaying git-clang-format Help (Shell)
DESCRIPTION: This command shows the help documentation for the git-clang-format tool, listing available options and usage details.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/clang-format.md#_snippet_5

LANGUAGE: Shell
CODE:
```
git-clang-format -h
```

----------------------------------------

TITLE: Check Electron Python TLS Support (sh)
DESCRIPTION: Runs a script provided by Electron to verify that your Python 2.7 setup supports TLS 1.2, which is required for building Electron. This command uses npx to execute the script without needing it installed globally.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-macos.md#_snippet_0

LANGUAGE: sh
CODE:
```
npx @electron/check-python-tls
```

----------------------------------------

TITLE: Run C++ Linting (npm)
DESCRIPTION: Executes the C++ linter (`cpplint` script) using an npm script to check compliance with the Electron project's C++ coding style.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm run lint-cpp
```

----------------------------------------

TITLE: Checking Python TLS Support with npx (Shell)
DESCRIPTION: This command uses npx to execute a specific Electron tool (`@electron/check-python-tls`) which verifies if your Python installation supports TLS 1.2 or later. This is a crucial prerequisite check to ensure compatibility during the build process.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_0

LANGUAGE: sh
CODE:
```
$ npx @electron/check-python-tls
```

----------------------------------------

TITLE: Installing ARM64 Cross-Compilation Deps on Ubuntu (Shell)
DESCRIPTION: This `apt-get` command installs the necessary packages on Ubuntu for cross-compiling Electron to the `arm64` architecture. It provides the required cross-development libraries and the `aarch64` cross-compiler.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_5

LANGUAGE: sh
CODE:
```
$ sudo apt-get install libc6-dev-arm64-cross linux-libc-dev-arm64-cross \
                       g++-aarch64-linux-gnu
```

----------------------------------------

TITLE: Compile Node Headers for Testing (Windows)
DESCRIPTION: Compiles the Node.js headers specifically for the 'Testing' build configuration using the Ninja build tool. This is a necessary prerequisite step for running unit tests on Windows.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_7

LANGUAGE: powershell
CODE:
```
ninja -C out\Testing third_party\electron_node:headers
```

----------------------------------------

TITLE: Installing clang-format and git-clang-format (Shell)
DESCRIPTION: This command installs the clang-format and git-clang-format tools globally using npm. These tools are required for automatic C++ code formatting according to Electron's style guide.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/clang-format.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm install -g clang-format
```

----------------------------------------

TITLE: Updating Git Origin URLs
DESCRIPTION: Changes the git remote origin URL within the cloned 'src/electron' directory to the official Electron repository, removes the old origin, sets the tracking branch to master, and navigates back to the parent directory. This is necessary if the initial clone was from a fork and you intend to pull/push to the official repository.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_2

LANGUAGE: sh
CODE:
```
cd src/electron
git remote remove origin
git remote add origin https://github.com/electron/electron
git checkout master
git branch --set-upstream-to=origin/master
cd -
```

----------------------------------------

TITLE: Setting PowerShell Execution Policy - PowerShell
DESCRIPTION: Modifies the PowerShell execution policy to allow running local scripts without restrictions, which is necessary for executing the `DesktopAppConverter.ps1` setup script. This command should be run from an elevated PowerShell prompt before attempting to set up the Desktop App Converter.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-store-guide.md#_snippet_3

LANGUAGE: powershell
CODE:
```
Set-ExecutionPolicy bypass
```

----------------------------------------

TITLE: Pushing Local Branch to Remote Fork | Shell
DESCRIPTION: Pushes the local branch 'my-branch' to the 'origin' remote, which is typically the user's fork on GitHub. This makes the commits available online and updates the associated pull request if one exists.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_6

LANGUAGE: Shell
CODE:
```
$ git push origin my-branch
```

----------------------------------------

TITLE: Formatting Event Signatures and Arguments
DESCRIPTION: This snippet demonstrates the required format for documenting events, including the event name in single quotes and a 'Returns' section listing any data returned by the event with its type.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_7

LANGUAGE: markdown
CODE:
```
### Event: 'wake-up'

Returns:

* `time` String

...
```

----------------------------------------

TITLE: Getting Electron Source Code
DESCRIPTION: Creates a directory for the Electron source code, navigates into it, configures gclient to manage the repository and its dependencies, and then syncs the code, including branch heads and tags.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_1

LANGUAGE: sh
CODE:
```
mkdir electron && cd electron
gclient config --name ""src/electron"" --unmanaged https://github.com/electron/electron
gclient sync --with_branch_heads --with_tags
```

----------------------------------------

TITLE: Configuring Electron Build for ARM Target (Shell)
DESCRIPTION: This `gn gen` command configures the Electron build system using GN (Generate Ninja) to target the `arm` architecture. This step is essential for cross-compilation after installing the required cross-toolchains.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-linux.md#_snippet_6

LANGUAGE: sh
CODE:
```
$ gn gen out/Testing --args='import(...) target_cpu=""arm""'
```

----------------------------------------

TITLE: Install Python pyobjc module with pip (sh)
DESCRIPTION: Installs the pyobjc module for Python using pip. This module is required if you are using a Homebrew-provided Python installation for building Electron.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-macos.md#_snippet_2

LANGUAGE: sh
CODE:
```
pip install pyobjc
```

----------------------------------------

TITLE: Documenting Platform-Specific Parameters
DESCRIPTION: This snippet illustrates how to denote parameters that are specific to certain platforms (macOS, Windows, or Linux) by listing the applicable platforms in italics after the parameter's type.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_6

LANGUAGE: markdown
CODE:
```
* `animate` Boolean (optional) _macOS_ _Windows_ - Animate the thing.
```

----------------------------------------

TITLE: Exporting V8 Patches from Node.js Git Repository - Shell
DESCRIPTION: This script sequence extracts V8-specific changes from the Node.js source tree. It finds the commit where V8 was last updated upstream and generates a patch file containing all subsequent changes in the `deps/v8` directory, excluding the `gypfiles` subdirectory, formatted to apply relative to the V8 repository root. Requires a Node.js source checkout and git.
SOURCE: https://github.com/discord/electron/blob/main/patches/v8/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ cd third_party/electron_node\n$ CURRENT_NODE_VERSION=vX.Y.Z  # e.g. v10.11.0\n\n# Find the last commit with the message ""deps: update V8 to <some version>""\n# This commit corresponds to node resetting V8 to its pristine upstream\n# state at the stated version.\n$ LAST_V8_UPDATE=""$(git log --grep='^deps: update V8' --format='%H' -1 deps/v8)""\n\n# This creates a patch file containing all changes in deps/v8 from\n# $LAST_V8_UPDATE up to the current node version, formatted in a way that\n# it will apply cleanly to the V8 repository (i.e. with `deps/v8`\n# stripped off the path and excluding the v8/gypfiles directory, which\n# isn't present in V8.\n$ git format-patch \\n    --relative=deps/v8 \\n    $LAST_V8_UPDATE..$CURRENT_NODE_VERSION \\n    deps/v8 \\n    ':(exclude)deps/v8/gypfiles' \\n    --stdout
```

----------------------------------------

TITLE: Building Electron with Goma using Ninja (Bash)
DESCRIPTION: This command demonstrates how to build the 'electron' target using the Ninja build tool within a specific output directory when Goma is enabled. The '-j' flag sets a high level of parallelism, which is significantly increased when using Goma compared to local builds. Recommended limits are 200 for Windows/Linux and 50 for macOS.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/goma.md#_snippet_0

LANGUAGE: bash
CODE:
```
ninja -C out/Testing electron -j 200
```

----------------------------------------

TITLE: Stripping Binaries (Linux)
DESCRIPTION: Runs a Python script provided by Electron to strip debugging and symbol information from the built binaries in the specified output directory (e.g., out/Release) on Linux, reducing the final file size.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_13

LANGUAGE: sh
CODE:
```
electron/script/strip-binaries.py -d out/Release
```

----------------------------------------

TITLE: Removing Upstream Patch in Electron Bash
DESCRIPTION: This set of commands outlines the process for removing a patch from an upstream dependency's patch set in Electron. It involves manually editing the `.patches` manifest file to remove the line corresponding to the patch, resetting the dependency's git repository to the state before Electron's patches were applied, using `git-import-patches` to re-apply the remaining patches, and then re-exporting the patch set using `git-export-patches` to synchronize the files.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/patches.md#_snippet_2

LANGUAGE: bash
CODE:
```
vim src/electron/patches/node/.patches
# Delete the line with the name of the patch you want to remove
cd src/third_party/electron_node
git reset --hard refs/patches/upstream-head
../../electron/script/git-import-patches ../../electron/patches/node
../../electron/script/git-export-patches -o ../../electron/patches/node
```

----------------------------------------

TITLE: Run Python Linting (npm)
DESCRIPTION: Executes the Python linter (`pylint`) using an npm script to check compliance with the Electron project's Python coding style.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/testing.md#_snippet_3

LANGUAGE: shell
CODE:
```
npm run lint-py
```

----------------------------------------

TITLE: Create S3 Directory Structure Shell
DESCRIPTION: This shell script snippet demonstrates how to create the required directory structure (`electron/symbols/` and `electron/dist/`) within an S3 bucket. These directories are used by `surf-build` to upload build artifacts like symbols and distribution files.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/application-distribution.md#_snippet_6

LANGUAGE: sh
CODE:
```
- electron/
  - symbols/
  - dist/
```

----------------------------------------

TITLE: Troubleshooting Symbol Loading - Windbg Commands
DESCRIPTION: Executes Windbg commands to diagnose issues with symbol loading. The !sym noisy command enables detailed output about the symbol search process, and .reload /f electron.exe attempts to force the debugger to reload symbol files for the specified executable, ignoring cached symbols.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/setting-up-symbol-server.md#_snippet_2

LANGUAGE: Windbg Commands
CODE:
```
> !sym noisy
> .reload /f electron.exe
```

----------------------------------------

TITLE: Setting Windbg Symbol Path (Electron Only) - Windbg Symbol Path
DESCRIPTION: Configures the Windbg debugger's symbol path to point exclusively to the official Electron symbol server. It includes a local cache directory to store downloaded symbol files, preventing redundant fetches. The string format is SRV*<cache_path>*<symbol_server_url>.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/setting-up-symbol-server.md#_snippet_0

LANGUAGE: Windbg Symbol Path
CODE:
```
SRV*c:\code\symbols\*https://symbols.electronjs.org
```

----------------------------------------

TITLE: Enabling Git Long Paths (Shell)
DESCRIPTION: This command configures Git on the system level to allow support for long file paths. Setting `core.longpaths` to `true` helps resolve issues where deep directory structures, common in dependencies like Node.js, exceed the default Windows path limit that Git respects. This is necessary to avoid 'cannot create directory at...: Filename too long' errors during operations like `gclient sync`.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-windows.md#_snippet_3

LANGUAGE: shell
CODE:
```
$ git config --system core.longpaths true
```

----------------------------------------

TITLE: Configuring Xvfb on Travis CI (yml)
DESCRIPTION: This YAML snippet shows the necessary configuration for a `.travis.yml` file to enable testing Electron applications on Travis CI. It installs the `xvfb` package using `apt`, sets the required `DISPLAY` environment variable to `:99.0`, and starts the Xvfb server on display 99 with a screen resolution of 1024x768 and 24-bit color depth, redirecting output to `/dev/null` and running it in the background.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/testing-on-headless-ci.md#_snippet_1

LANGUAGE: yaml
CODE:
```
addons:
  apt:
    packages:
      - xvfb

install:
  - export DISPLAY=':99.0'
  - Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
```

----------------------------------------

TITLE: Setting Up Local Fork Remote | Shell
DESCRIPTION: Clones the user's fork of the Electron repository, changes into the directory, adds the official upstream repository as a remote, and fetches its branches and commits. Required for synchronizing changes with the main project.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_0

LANGUAGE: Shell
CODE:
```
$ git clone git@github.com:username/electron.git
$ cd electron
$ git remote add upstream https://github.com/electron/electron.git
$ git fetch upstream
```

----------------------------------------

TITLE: Generating Cross-Compiling Config
DESCRIPTION: Generates a build configuration using `gn gen` for a specified output directory, including build arguments from a file (e.g., testing.gn) and additional arguments like `target_cpu` to specify the desired architecture for cross-compilation.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_15

LANGUAGE: sh
CODE:
```
gn gen out/Testing-x86 --args='... target_cpu = ""x86""'
```

----------------------------------------

TITLE: Disabling SMBv2 Directory Cache (PowerShell)
DESCRIPTION: Modifies the Windows registry to set the DirectoryCacheLifetime value to 0 for SMBv2 clients. This is required when sharing the git cache over a network share on Windows to prevent issues with the git cache script's locking mechanism.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_20

LANGUAGE: powershell
CODE:
```
New-ItemProperty -Path ""HKLM:\System\CurrentControlSet\Services\Lanmanworkstation\Parameters"" -Name DirectoryCacheLifetime -Value 0 -PropertyType DWORD -Force
```

----------------------------------------

TITLE: Resolving Patch Conflicts (Abort/Retry) in Electron Bash
DESCRIPTION: When `git-import-patches` fails due to conflicts, these commands show how to abort the failed patch application process and retry it using git's 3-way merge algorithm. Navigate to the dependency's source directory, run `git am --abort` to clean up from the failed apply, and then run `git-import-patches` again with the `-3` flag to enable 3-way merging.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/patches.md#_snippet_3

LANGUAGE: bash
CODE:
```
cd src/third_party/electron_node
# If the patch application failed midway through, you can reset it with:
git am --abort
# And then retry with 3-way merge:
../../electron/script/git-import-patches -3 ../../electron/patches/node
```

----------------------------------------

TITLE: Pulling Latest Code and Syncing Dependencies
DESCRIPTION: Navigates into the 'src/electron' directory, pulls the latest changes from the remote repository, and then runs 'gclient sync -f' to ensure all dependencies match the updated DEPS file.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_3

LANGUAGE: sh
CODE:
```
cd src/electron
git pull
gclient sync -f
```

----------------------------------------

TITLE: Enabling Network Server Access Entitlement (XML)
DESCRIPTION: Adds the entitlement key required for a sandboxed Mac App Store application to accept incoming network connections (act as a network server). This key must be added to the `parent.plist` file.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/mac-app-store-submission-guide.md#_snippet_7

LANGUAGE: XML
CODE:
```
<key>com.apple.security.network.server</key>
<true/>
```

----------------------------------------

TITLE: Creating New Feature Branch from Upstream | Shell
DESCRIPTION: Creates a new local branch named 'my-branch', checks it out, and sets its upstream tracking branch to 'upstream/master'. This ensures the new branch is based on the latest code from the official repository.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/pull-requests.md#_snippet_1

LANGUAGE: Shell
CODE:
```
$ git checkout -b my-branch -t upstream/master
```

----------------------------------------

TITLE: VS 2017 x64_arm64 Cross-Compile Command Prompt Output
DESCRIPTION: Example output displayed when successfully initializing a Visual Studio 2017 Developer Command Prompt for cross-compilation from x64 to arm64, confirming the environment setup.
SOURCE: https://github.com/discord/electron/blob/main/docs/tutorial/windows-arm.md#_snippet_2

LANGUAGE: Batch
CODE:
```
**********************************************************************
** Visual Studio 2017 Developer Command Prompt v15.9.15
** Copyright (c) 2017 Microsoft Corporation
**********************************************************************
[vcvarsall.bat] Environment initialized for: 'x64_arm64'
```

----------------------------------------

TITLE: Structuring Module Methods and Events in API References
DESCRIPTION: This snippet illustrates how to structure the documentation for a module that is not a class, listing its methods and events under dedicated 'Methods' and 'Events' chapters with appropriate heading levels.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_2

LANGUAGE: markdown
CODE:
```
# autoUpdater

## Events

### Event: 'error'

## Methods

### `autoUpdater.setFeedURL(url[, requestHeaders])`
```

----------------------------------------

TITLE: Generating Node.js Headers for Tests
DESCRIPTION: Compiles the 'third_party/electron_node:headers' target using Ninja within the specified build directory (e.g., out/Testing). This generates the necessary build headers that native Node.js modules need to compile against the version of Node.js built as part of Electron.
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-instructions-gn.md#_snippet_18

LANGUAGE: sh
CODE:
```
ninja -C out/Testing third_party/electron_node:headers
```

----------------------------------------

TITLE: Filtering Tests by Pattern - Mocha/npm - Shell
DESCRIPTION: This command runs the test suite via `npm test` and passes the `--grep` option to the underlying Mocha test runner. This filters the tests executed to only include those whose descriptions match the provided regular expression pattern (`child_process` in this example).
SOURCE: https://github.com/discord/electron/blob/main/docs/development/build-system-overview.md#_snippet_4

LANGUAGE: Shell
CODE:
```
$ npm test -- --grep child_process
```

----------------------------------------

TITLE: Accessing Security Scoped Resource - Electron app - JavaScript
DESCRIPTION: Demonstrates how to initiate access to a security-scoped resource using bookmark data on macOS for MAS builds. The snippet shows how to obtain the necessary stop function and emphasizes calling it to release the resource once finished, preventing resource leaks.
SOURCE: https://github.com/discord/electron/blob/main/docs/api/app.md#_snippet_10

LANGUAGE: javascript
CODE:
```
// Start accessing the file.
const stopAccessingSecurityScopedResource = app.startAccessingSecurityScopedResource(data)
// You can now access the file outside of the sandbox 🎉

// Remember to stop accessing the file once you've finished with it.
stopAccessingSecurityScopedResource()
```

----------------------------------------

TITLE: Indicating Optional Arguments in Signatures
DESCRIPTION: This small snippet, presented as shell syntax, shows the required notation using square brackets `[]` to indicate optional arguments and the optional comma needed if the argument follows another.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_5

LANGUAGE: sh
CODE:
```
required[, optional]
```

----------------------------------------

TITLE: Formatting Method Signatures and Parameters
DESCRIPTION: This snippet demonstrates the required format for documenting methods, including the signature with placeholder names and optional arguments denoted by square brackets, followed by a list detailing each parameter's name, type, and description.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_4

LANGUAGE: markdown
CODE:
```
### `objectName.methodName(required[, optional]))`

* `required` String - A parameter description.
* `optional` Integer (optional) - Another parameter description.

...
```

----------------------------------------

TITLE: Structuring Class API References
DESCRIPTION: This extensive snippet provides an example of documenting a class within an API reference, showing how to define the class chapter, instance events, methods, and properties, including how related classes (like 'Cookies' within 'session') should be structured.
SOURCE: https://github.com/discord/electron/blob/main/docs/styleguide.md#_snippet_3

LANGUAGE: markdown
CODE:
```
# session

## Methods

### session.fromPartition(partition)

## Static Properties

### session.defaultSession

## Class: Session

### Instance Events

#### Event: 'will-download'

### Instance Methods

#### `ses.getCacheSize()`

### Instance Properties

#### `ses.cookies`

## Class: Cookies

### Instance Methods

#### `cookies.get(filter, callback)`
```","electron",""