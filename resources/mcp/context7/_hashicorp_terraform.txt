"terraform","TITLE: Illustrate replace function usage with examples in HCL
DESCRIPTION: These examples demonstrate how to use the `replace` function in HCL. The first example shows a simple string replacement, while the second illustrates using a regular expression for the substring argument to replace a pattern.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/replace.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
replace(""1 + 2 + 3"", ""+"", ""-"")
replace(""hello world"", ""/w.*d/"", ""everybody"")
```

----------------------------------------

TITLE: Example Terraform Service Discovery Document
DESCRIPTION: Illustrates a basic JSON response from the `/.well-known/terraform.json` endpoint. This example declares support for version 1 of the module registry protocol and provides its base URL.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/remote-service-discovery.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""modules.v1"": ""https://modules.example.com/v1/""
}
```

----------------------------------------

TITLE: HCL formatlist Function Usage Examples
DESCRIPTION: Illustrates common use cases for the `formatlist` function, showing how it processes single and mixed list/non-list arguments to produce formatted string lists. The examples include the function call and its resulting output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatlist.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> formatlist(""Hello, %s!"", [""Valentina"", ""Ander"", ""Olivia"", ""Sam""])
[
  ""Hello, Valentina!"",
  ""Hello, Ander!"",
  ""Hello, Olivia!"",
  ""Hello, Sam!"",
]
```

LANGUAGE: hcl
CODE:
```
> formatlist(""%s, %s!"", ""Salutations"", [""Valentina"", ""Ander"", ""Olivia"", ""Sam""])
[
  ""Salutations, Valentina!"",
  ""Salutations, Ander!"",
  ""Salutations, Olivia!"",
  ""Salutations, Sam!"",
]
```

----------------------------------------

TITLE: Terraform tomap Function Examples
DESCRIPTION: Examples demonstrating the usage and behavior of the `tomap` function in Terraform, including basic map conversion and handling of mixed-type elements to ensure type consistency within the resulting map.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tomap.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> tomap({""a"" = 1, ""b"" = 2})
{
  ""a"" = 1
  ""b"" = 2
}
```

LANGUAGE: HCL
CODE:
```
> tomap({""a"" = ""foo"", ""b"" = true})
{
  ""a"" = ""foo""
  ""b"" = ""true""
}
```

----------------------------------------

TITLE: Example: Delete a Terraform Workspace
DESCRIPTION: An example demonstrating how to use the `terraform workspace delete` command to remove a workspace named 'example' and the expected output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/delete.mdx#_snippet_1

LANGUAGE: Bash
CODE:
```
$ terraform workspace delete example
Deleted workspace ""example"".
```

----------------------------------------

TITLE: Example JSON for Terraform provision_progress Message
DESCRIPTION: Provides an example of a `provision_progress` message, which conveys ongoing output from a provisioner during its execution. The `hook` object includes resource, provisioner, and the output log.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_13

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""null_resource.none[0]: (local-exec): Executing: [\""/bin/sh\"" \""-c\"" \""sleep 10 && exit 1\""]"",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2021-03-26T16:38:43.997869-04:00"",
  ""hook"": {
    ""resource"": {
      ""addr"": ""null_resource.none[0]"",
      ""module"": """",
      ""resource"": ""null_resource.none[0]"",
      ""implied_provider"": ""null"",
      ""resource_type"": ""null_resource"",
      ""resource_name"": ""none"",
      ""resource_key"": 0
    },
    ""provisioner"": ""local-exec"",
    ""output"": ""Executing: [\""/bin/sh\"" \""-c\"" \""sleep 10 && exit 1\""]""
  },
  ""type"": ""provision_progress""
}
```

----------------------------------------

TITLE: Illustrate chunklist Function Usage with Examples in HCL
DESCRIPTION: These examples demonstrate the practical application of the `chunklist` function in HCL. They show how an input list is divided into sub-lists based on different specified chunk sizes, illustrating the function's output format.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/chunklist.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> chunklist([""a"", ""b"", ""c"", ""d"", ""e""], 2)
[
  [
    ""a"",
    ""b"",
  ],
  [
    ""c"",
    ""d"",
  ],
  [
    ""e"",
  ],
]
> chunklist([""a"", ""b"", ""c"", ""d"", ""e""], 1)
[
  [
    ""a"",
  ],
  [
    ""b"",
  ],
  [
    ""c"",
  ],
  [
    ""d"",
  ],
  [
    ""e"",
  ],
]
```

----------------------------------------

TITLE: Terraform `range` Function Basic Usage Examples
DESCRIPTION: Demonstrates various ways to use the Terraform `range` function with different `start`, `limit`, and `step` values, including positive, negative, and fractional steps, and their resulting number sequences.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
> range(3)
[
  0,
  1,
  2,
]

> range(1, 4)
[
  1,
  2,
  3,
]

> range(1, 8, 2)
[
  1,
  3,
  5,
  7,
]

> range(1, 4, 0.5)
[
  1,
  1.5,
  2,
  2.5,
  3,
  3.5,
]

> range(4, 1)
[
  4,
  3,
  2,
]

> range(10, 5, -2)
[
  10,
  8,
  6,
]
```

----------------------------------------

TITLE: HCL join Function Usage Examples
DESCRIPTION: Illustrates various uses of the `join` function in HCL, demonstrating how different delimiters and list sizes affect the output string. Examples include joining with hyphens, commas, and handling single-element lists.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/join.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> join(""-"", [""foo"", ""bar"", ""baz""])
""foo-bar-baz""
> join("", "", [""foo"", ""bar"", ""baz""])
foo, bar, baz
> join("", "", [""foo""])
foo
```

----------------------------------------

TITLE: Terraform Nested Module Path Example
DESCRIPTION: Provides a concrete example of a complex, nested module path demonstrating how to address specific instances of modules using both numerical and string indices. This illustrates addressing modules that are themselves instances of other modules.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
module.foo[0].module.bar[""a""]
```

----------------------------------------

TITLE: alltrue Function Command-Line Examples
DESCRIPTION: Demonstrates the behavior of the `alltrue` function through command-line examples, illustrating its output for lists containing boolean and string 'true' values, as well as mixed truthy and falsy values.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/alltrue.mdx#_snippet_1

LANGUAGE: command
CODE:
```
> alltrue([""true"", true])
true
> alltrue([true, false])
false
```

----------------------------------------

TITLE: Create Terraform Workspace from Existing State File
DESCRIPTION: Illustrates how to create a new Terraform workspace and initialize it with state from a pre-existing local state file. The example creates a workspace named 'example' using 'old.terraform.tfstate' as its initial state.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/new.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
$ terraform workspace new -state=old.terraform.tfstate example
Created and switched to workspace ""example"".

You're now on a new, empty workspace. Workspaces isolate their state,
so if you run ""terraform plan"" Terraform will not see any existing state
for this configuration.
```

----------------------------------------

TITLE: Terraform `can` Function Interactive Examples
DESCRIPTION: These HCL console examples illustrate the `can` function's behavior in different scenarios. They show how `can` returns `true` for valid attribute access and `false` for non-existent attributes. The examples also demonstrate that `can` does not handle errors related to undeclared local values, as these are static analysis errors.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/can.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
> local.foo
{
  ""bar"" = ""baz""
}
> can(local.foo.bar)
true
> can(local.foo.boop)
false

> can(local.nonexist)

Error: Reference to undeclared local value

A local value with the name ""nonexist"" has not been declared.
```

----------------------------------------

TITLE: Example Input Values for Networks and Subnets Variables
DESCRIPTION: Provides concrete example data for the `networks` and `subnets` variables, demonstrating the expected structure and values that would be used as input for the Terraform configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#_snippet_8

LANGUAGE: HCL
CODE:
```
networks = {
  a = {
    base_cidr_block = ""10.1.0.0/16""
  }
  b = {
    base_cidr_block = ""10.2.0.0/16""
  }
}
subnets = {
  a = {
    number = 1
  }
  b = {
    number = 2
  }
  c = {
    number = 3
  }
}
```

----------------------------------------

TITLE: Example: Switching Terraform Workspaces
DESCRIPTION: Demonstrates how to list existing Terraform workspaces and then switch to a different one using the `terraform workspace select` command in a shell environment.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/select.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
$ terraform workspace list
  default
* development
  jsmith-test

$ terraform workspace select default
Switched to workspace ""default"".
```

----------------------------------------

TITLE: Create a Basic Terraform Workspace
DESCRIPTION: Demonstrates the fundamental usage of `terraform workspace new` to create a new, empty workspace named 'example'. This command automatically switches to the newly created workspace.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/new.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
$ terraform workspace new example
Created and switched to workspace ""example""!

You're now on a new, empty workspace. Workspaces isolate their state,
so if you run ""terraform plan"" Terraform will not see any existing state
for this configuration.
```

----------------------------------------

TITLE: Terraform HCL: `one` function interactive examples
DESCRIPTION: Provides interactive console examples demonstrating the `one` function's behavior with various inputs: empty lists, single-element lists, multi-element lists (error case), and its application with empty and single-element sets.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/one.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
> one([])
null
> one([""hello""])
""hello""
> one([""hello"", ""goodbye""])

Error: Invalid function argument

Invalid value for ""list"" parameter: must be a list, set, or tuple value with
either zero or one elements.
> one(toset([]))
null
> one(toset([""hello""]))
""hello""
> one(toset([""hello"",""goodbye""]))

Error: Invalid function argument

Invalid value for ""list"" parameter: must be a list, set, or tuple value with
either zero or one elements.
```

----------------------------------------

TITLE: Example Usage of Terraform `filebase64` Function
DESCRIPTION: Demonstrates how to use the `filebase64` function in Terraform to read a file and get its base64-encoded content. The example shows reading `hello.txt` and its expected base64 output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filebase64.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
filebase64(""${path.module}/hello.txt"")
SGVsbG8gV29ybGQ=
```

----------------------------------------

TITLE: Terraform `trim` Function Usage Examples
DESCRIPTION: Illustrates various use cases of the `trim` function in Terraform, demonstrating how it removes specified characters from the start and end of strings based on a provided character set.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trim.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> trim(""?!hello?!"", ""!?"")
""hello""

> trim(""foobar"", ""far"")
""oob""

> trim(""   hello! world.!  "", ""! "")
""hello! world.""
```

----------------------------------------

TITLE: Complete templatestring example with S3 data source and output in HCL
DESCRIPTION: A comprehensive example showing how to fetch a template from an S3 bucket using a `data` block and then render it with `templatestring`, exposing the result as an output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatestring.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
data ""aws_s3_object"" ""example"" {
  bucket = ""example-example""
  key    = ""example.tmpl""
}

output ""example"" {
  value = templatestring(data.aws_s3_object.example.body, {
    name = var.name
  })
}
```

----------------------------------------

TITLE: Example Terraform Stack Output Block Configuration
DESCRIPTION: Illustrates a complete `output` block configuration in Terraform Stacks, showing how to define an output with a description, type, value, and sensitivity/ephemeral flags. This example demonstrates the syntax for exposing information from your infrastructure.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#_snippet_5

LANGUAGE: hcl
CODE:
```
output ""unique_name_of_output"" {
  description = ""Description of the purpose of this output""
  type        = string
  value       = component.component_name.some_value
  sensitive   = false
  ephemeral   = false
}
```

----------------------------------------

TITLE: Terraform File Provisioner Usage Example
DESCRIPTION: Demonstrates how to use the `file` provisioner in Terraform to copy files, directories, or inline content to a remote resource. It shows examples for copying a single file, inline string content, a directory, and all contents of a directory, highlighting the `source`, `content`, and `destination` arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/file.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...

  # Copies the myapp.conf file to /etc/myapp.conf
  provisioner ""file"" {
    source      = ""conf/myapp.conf""
    destination = ""/etc/myapp.conf""
  }

  # Copies the string in content into /tmp/file.log
  provisioner ""file"" {
    content     = ""ami used: ${self.ami}""
    destination = ""/tmp/file.log""
  }

  # Copies the configs.d folder to /etc/configs.d
  provisioner ""file"" {
    source      = ""conf/configs.d""
    destination = ""/etc""
  }

  # Copies all files and folders in apps/app1 to D:/IIS/webapp1
  provisioner ""file"" {
    source      = ""apps/app1/""
    destination = ""D:/IIS/webapp1""
  }
}
```

----------------------------------------

TITLE: Example JSON for Terraform provision_start Message
DESCRIPTION: Shows the structure of a `provision_start` message, signaling the beginning of a provisioning step for a resource. The `hook` object specifies the resource and the provisioner type.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_12

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""null_resource.none[0]: Provisioning with 'local-exec'..."",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2021-03-26T16:38:43.997431-04:00"",
  ""hook"": {
    ""resource"": {
      ""addr"": ""null_resource.none[0]"",
      ""module"": """",
      ""resource"": ""null_resource.none[0]"",
      ""implied_provider"": ""null"",
      ""resource_type"": ""null_resource"",
      ""resource_name"": ""none"",
      ""resource_key"": 0
    },
    ""provisioner"": ""local-exec""
  },
  ""type"": ""provision_start""
}
```

----------------------------------------

TITLE: Terraform setintersection Function Examples
DESCRIPTION: Practical examples demonstrating the usage of the `setintersection` function with various data types and set configurations in Terraform HCL.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setintersection.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> setintersection([""a"", ""b""], [""b"", ""c""], [""b"", ""d""])
[
  ""b"",
]
```

LANGUAGE: HCL
CODE:
```
> setintersection([3,3.3,4], [4,3.3,65,99], [4.0,3.3])
toset([
  3.3,
  4,
])
```

LANGUAGE: HCL
CODE:
```
> setintersection([""bob"",""jane"",3], [""jane"",3,""ajax"",10], [""3"",""jane"",26,""nomad""])
toset([
  ""3"",
  ""jane"",
])
```

----------------------------------------

TITLE: Example Usage of Terraform's `values` Function
DESCRIPTION: This example demonstrates how the `values` function extracts and orders elements from a map. It shows that the returned list of values is ordered based on the lexicographical order of the map's keys.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/values.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> values({a=3, c=2, d=1})
[
  3,
  2,
  1,
]
```

----------------------------------------

TITLE: Example of zipmap Function Usage in HCL
DESCRIPTION: Provides a concrete example of using `zipmap` to construct a map. It demonstrates mapping string keys 'a' and 'b' to integer values 1 and 2, respectively, resulting in a map like `{""a"" = 1, ""b"" = 2}`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/zipmap.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
zipmap([""a"", ""b""], [1, 2])
```

----------------------------------------

TITLE: Example Output of `encode_tfvars` Function Call
DESCRIPTION: This HCL snippet shows the string result produced by `provider::terraform::encode_tfvars` when given the input `{ example = ""Hello!"" }`. The output `example = ""Hello!""` adheres to the standard `.tfvars` file format.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_tfvars.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
example = ""Hello!""
```

----------------------------------------

TITLE: Terraform Resource Precondition Check Example
DESCRIPTION: Shows how to implement a `precondition` within a resource's `lifecycle` block to validate input parameters before resource creation or modification. This example checks the architecture of an AMI, providing early error feedback and ensuring configuration correctness.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/syntax.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""example"" {
  instance_type = ""t2.micro""
  ami           = ""ami-abc123""

  lifecycle {
    # The AMI ID must refer to an AMI that contains an operating system
    # for the `x86_64` architecture.
    precondition {
      condition     = data.aws_ami.example.architecture == ""x86_64""
      error_message = ""The selected AMI must be for the x86_64 architecture.""
    }
  }
}
```

----------------------------------------

TITLE: HCL Example: Complete Identity Token Block Configuration
DESCRIPTION: A complete HCL example demonstrating the configuration of an `identity_token` block, specifying the audience for the generated JSON Web Token (JWT).
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#_snippet_8

LANGUAGE: HCL
CODE:
```
identity_token ""unique_to_stack_name"" {
  audience = [""audience this token is intended for""]
}
```

----------------------------------------

TITLE: Example JSON Output from Terraform Encoding
DESCRIPTION: This is an example of the JSON output produced by the `jsonencode` function when applied to a data structure containing a list of backend addresses. It demonstrates the final formatted JSON string.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#_snippet_5

LANGUAGE: JSON
CODE:
```
{""backends"":[""10.0.0.1:8080"",""10.0.0.2:8080""]}
```

----------------------------------------

TITLE: Example Terraform HCL Configuration for Console Testing
DESCRIPTION: A sample `main.tf` configuration written in HashiCorp Configuration Language (HCL). This configuration defines a variable map and a `random_pet` resource, serving as the context for interactive `terraform console` examples.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
variable ""apps"" {
  type = map(any)
  default = {
    ""foo"" = {
      ""region"" = ""us-east-1"",
    },
    ""bar"" = {
      ""region"" = ""eu-west-1"",
    },
    ""baz"" = {
      ""region"" = ""ap-south-1"",
    },
  }
}

resource ""random_pet"" ""example"" {
  for_each = var.apps
}
```

----------------------------------------

TITLE: Launch Terraform Documentation Site Locally for Preview
DESCRIPTION: This command builds and launches a local preview of the entire Terraform documentation website. It allows contributors to review their changes in a browser, with automatic rebuilding on file modifications, before submitting them for review.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
make website
```

----------------------------------------

TITLE: Example Usage of base64sha256 in Terraform Console
DESCRIPTION: Illustrates a practical example of using the `base64sha256` function in a console environment, showing the input string 'hello world' and its corresponding Base64-encoded SHA256 hash output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64sha256.mdx#_snippet_1

LANGUAGE: Console
CODE:
```
> base64sha256(""hello world"")
uU0nuZNNPgilLlLX2n2r+sSE7+N6U4DukIj3rOLvzek=
```

----------------------------------------

TITLE: HCL log Function Basic Usage Examples
DESCRIPTION: These examples demonstrate the fundamental application of the `log` function in HCL. They show how to calculate logarithms for different numbers using various bases, such as base 10 and base 2.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/log.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
log(50, 10)
log(16, 2)
```

----------------------------------------

TITLE: Terraform HCL fileexists Basic Usage Example
DESCRIPTION: An example demonstrating the basic usage of the `fileexists` function in Terraform HCL, checking for the existence of 'hello.txt' relative to the module path.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileexists.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
fileexists(""${path.module}/hello.txt"")
true
```

----------------------------------------

TITLE: Illustrate `fileset` Pattern Matching Examples in HCL
DESCRIPTION: Provides various examples demonstrating how the `fileset` function uses different glob patterns (`*`, `**`, `{alternatives}`) to match and return file names from a specified path in Terraform HCL.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileset.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> fileset(path.module, ""files/*.txt"")
[
  ""files/hello.txt"",
  ""files/world.txt"",
]

> fileset(path.module, ""files/{hello,world}.txt"")
[
  ""files/hello.txt"",
  ""files/world.txt"",
]

> fileset(""${path.module}/files"", ""*"")
[
  ""hello.txt"",
  ""world.txt"",
]

> fileset(""${path.module}/files"", ""**"")
[
  ""hello.txt"",
  ""world.txt"",
  ""subdirectory/anotherfile.txt"",
]
```

----------------------------------------

TITLE: Interactive Examples with Terraform Console
DESCRIPTION: Illustrates various interactive commands and expressions within the `terraform console`, demonstrating how to access map values, filter collections, check resource status, and test built-in functions using the provided `main.tf` configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#_snippet_3

LANGUAGE: terraform-console
CODE:
```
> var.apps.foo
{
  ""region"" = ""us-east-1""
}

> { for key, value in var.apps : key => value if value.region == ""us-east-1"" }
{
  ""foo"" = {
    ""region"" = ""us-east-1""
  }
}

> random_pet.example
(known after apply)

> cidrnetmask(""172.16.0.0/12"")
""255.240.0.0""
```

----------------------------------------

TITLE: Defining a Fixed Object Collection with Nested Block Syntax
DESCRIPTION: This HCL example demonstrates how to define a fixed collection of objects using the nested block syntax. It implicitly specifies a two-element list of objects assigned to the `example` argument, treating it as a nested block type. This is the recommended approach for readability when defining fixed collections.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
example {
  foo = ""bar""
}
example {
  foo = ""baz""
}
```

----------------------------------------

TITLE: Example usage of `transpose` function in Terraform
DESCRIPTION: This example demonstrates the input and output of the `transpose` function. It takes a map where keys are strings and values are lists of strings, then returns a new map where the original list elements become keys, and the original map keys become elements in new lists.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/transpose.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> transpose({""a"" = [""1"", ""2""], ""b"" = [""2"", ""3""]})
{
  ""1"" = [
    ""a"",
  ],
  ""2"" = [
    ""a"",
    ""b"",
  ],
  ""3"" = [
    ""b"",
  ],
}
```

----------------------------------------

TITLE: Example Output of Combined `network_subnets` List
DESCRIPTION: Shows the expected structure and content of the `network_subnets` local variable after the `setproduct` function has been applied to the example input, illustrating the resulting combinations of network and subnet data.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#_snippet_9

LANGUAGE: HCL
CODE:
```
[
  {
    ""cidr_block"" = ""10.1.16.0/20""
    ""network_id"" = ""vpc-0bfb00ca6173ea5aa""
    ""network_key"" = ""a""
    ""subnet_key"" = ""a""
  },
  {
    ""cidr_block"" = ""10.1.32.0/20""
    ""network_id"" = ""vpc-0bfb00ca6173ea5aa""
    ""network_key"" = ""a""
    ""subnet_key"" = ""b""
  },
  {
    ""cidr_block"" = ""10.1.48.0/20""
    ""network_id"" = ""vpc-0bfb00ca6173ea5aa""
    ""network_key"" = ""a""
    ""subnet_key"" = ""c""
  },
  {
    ""cidr_block"" = ""10.2.16.0/20""
    ""network_id"" = ""vpc-0d193e011f6211a7d""
    ""network_key"" = ""b""
    ""subnet_key"" = ""a""
  },
  {
    ""cidr_block"" = ""10.2.32.0/20""
    ""network_id"" = ""vpc-0d193e011f6211a7d""
    ""network_key"" = ""b""
    ""subnet_key"" = ""b""
  },
  {
    ""cidr_block"" = ""10.2.48.0/20""
    ""network_id"" = ""vpc-0d193e011f6211a7d""
    ""network_key"" = ""b""
    ""subnet_key"" = ""c""
  }
]
```

----------------------------------------

TITLE: Terraform HCL `startswith` Function Reference
DESCRIPTION: Detailed documentation for the `startswith` function in Terraform's HCL, including its signature, parameters, return value, and usage examples.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/startswith.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
startswith(string, prefix)
  - Description: Checks if a given string begins with a specified prefix string.
  - Parameters:
    - string: The string to be checked for the prefix.
    - prefix: The prefix string to look for at the beginning of the 'string'.
  - Returns: boolean (true if 'string' starts with 'prefix', false otherwise).
  - Examples:
    startswith(""hello world"", ""hello"")
    // Returns: true

    startswith(""hello world"", ""world"")
    // Returns: false
```

----------------------------------------

TITLE: Get Terraform Version and Plugin Information
DESCRIPTION: Demonstrates the basic usage of the `terraform version` command to display the current Terraform binary version, platform, installed providers, and any upgrade or security bulletin checks, including an example of an out-of-date warning.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/version.mdx#_snippet_1

LANGUAGE: shellsession
CODE:
```
$ terraform version
Terraform v0.15.0
on darwin_amd64
+ provider registry.terraform.io/hashicorp/null v3.0.0

Your version of Terraform is out of date! The latest version
is X.Y.Z. You can update by downloading from https://developer.hashicorp.com/terraform/install
```

----------------------------------------

TITLE: Terraform cidrhost Function Usage Examples
DESCRIPTION: Practical examples demonstrating the use of the `cidrhost` function with various CIDR prefixes and host numbers, illustrating its behavior for both IPv4 and IPv6 addresses.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrhost.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> cidrhost(""10.12.112.0/20"", 16)
10.12.112.16
> cidrhost(""10.12.112.0/20"", 268)
10.12.113.12
> cidrhost(""fd00:fd12:3456:7890:00a2::/72"", 34)
fd00:fd12:3456:7890::22
```

----------------------------------------

TITLE: Basic setsubtract Usage Example in HCL
DESCRIPTION: This example demonstrates a straightforward application of the `setsubtract` function. It shows how to find elements present in the first list (acting as a set) but not in the second, returning the resulting set.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setsubtract.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> setsubtract([""a"", ""b"", ""c""], [""a"", ""c""])
toset([
  ""b"",
])
```

----------------------------------------

TITLE: Terraform Provider Version Incompatibility Errors
DESCRIPTION: Examples of error messages displayed by `terraform init` when a provider's version is incompatible with the current Terraform Core version. These messages guide users on selecting compatible provider versions or upgrading Terraform Core, or indicate issues with manually installed plugins.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/plugin-protocol/README.md#_snippet_0

LANGUAGE: console
CODE:
```
Provider ""aws"" v1.0.0 is not compatible with Terraform v0.12.0.

Provider version v2.0.0 is the earliest compatible version.
Select it with the following version constraint:

    version = ""~> 2.0.0""
```

LANGUAGE: console
CODE:
```
Provider ""aws"" v3.0.0 is not compatible with Terraform v0.12.0.
Provider version v2.34.0 is the latest compatible version. Select 
it with the following constraint:

    version = ""~> 2.34.0""

Alternatively, upgrade to the latest version of Terraform for compatibility with newer provider releases.
```

LANGUAGE: console
CODE:
```
The installed version of provider ""example"" is not compatible with Terraform v0.12.0.

This provider was loaded from:
     /usr/local/bin/terraform-provider-example_v0.1.0
```

----------------------------------------

TITLE: Terraform CLI: Show a For-Each Configured Resource Instance
DESCRIPTION: Demonstrates how to use `terraform state show` to display the attributes of a resource instance configured with the `for_each` meta-argument, specifically the `""example""` instance of `packet_device.worker`. Includes examples for Linux/macOS/UNIX, PowerShell, and Windows `cmd.exe` due to varying quoting and escaping requirements.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#_snippet_4

LANGUAGE: Shell
CODE:
```
$ terraform state show 'packet_device.worker[""example""]'
```

LANGUAGE: PowerShell
CODE:
```
$ terraform state show 'packet_device.worker[\""example\""]'
```

LANGUAGE: cmd.exe
CODE:
```
$ terraform state show packet_device.worker[\""example\""]
```

----------------------------------------

TITLE: Example Usage of matchkeys Function
DESCRIPTION: Demonstrates a practical application of the `matchkeys` function. It filters a list of instance IDs (`valueslist`) based on matching availability zones (`keyslist`) against a specified `searchset`, illustrating how to extract a subset of elements.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/matchkeys.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
matchkeys([""i-123"", ""i-abc"", ""i-def""], [""us-west"", ""us-east"", ""us-east""], [""us-east""])
[
  ""i-abc"",
  ""i-def"",
]
```

----------------------------------------

TITLE: HCL `endswith` Function Examples
DESCRIPTION: Illustrates the usage of the `endswith` function with practical examples, demonstrating how it returns `true` when a string ends with the specified suffix and `false` otherwise.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/endswith.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> endswith(""hello world"", ""world"")
true

> endswith(""hello world"", ""hello"")
false
```

----------------------------------------

TITLE: Complete Terraform `terraform` Block Configuration Example
DESCRIPTION: Illustrates a comprehensive `terraform` block configuration, showcasing all supported built-in arguments including `required_version`, `required_providers`, `provider_meta`, `backend`, `cloud` (with nested `organization`, `workspaces`, `hostname`, `token`), and `experiments`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
terraform {
  required_version = ""<version>""
  required_providers {
    <PROVIDER> {
      version = ""<version-constraint>""
      source = ""<provider-address>""
    }
  }
  provider_meta ""<LABEL>"" { 
    # Shown for completeness but only used for specific cases     
  }
  backend ""<TYPE>"" {        
    # `backend` is mutually exclusive with `cloud` 
    ""<ARGUMENTS>""
  }
  cloud {                   
    # `cloud` is mutually exclusive with `backend` 
    organization = ""<organization-name>""
    workspaces {
      tags = [ ""<tag>"" ]
      name = ""<workspace-name>""
      project = ""<project-name>""
    }
    hostname = ""app.terraform.io""
    token - ""<TOKEN>""
  }
  experiments = [ ""<feature-name>"" ]
}
```

----------------------------------------

TITLE: Terraform `get` Command Reference
DESCRIPTION: Documents the `terraform get` command, which is used to download and update modules declared in the root module. It also specifies the location where modules are downloaded and available command-line options.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/get.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform get [options]
  - Description: Downloads and updates modules declared in the root module.
  - Behavior: Modules are downloaded into a `.terraform` subdirectory of the current working directory. This directory should not be committed to version control.

Options:
  -update
    - Description: If specified, modules that are already downloaded will be checked for updates and the updates will be downloaded if present.
  -no-color
    - Description: Disable text coloring in the output.
```

----------------------------------------

TITLE: HCL indent Function Usage Example
DESCRIPTION: Demonstrates how to apply the `indent` function within an HCL output block. This example formats a multi-line string by adding two spaces to the beginning of each line, excluding the first, to improve readability.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/indent.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
output ""formatted_description"" {
  value = indent(2, var.description)
}
```

----------------------------------------

TITLE: Define AWS Instance Resource Block for Import
DESCRIPTION: This HCL snippet defines a resource block for an AWS EC2 instance named 'example'. This block serves as a placeholder in the Terraform configuration before the actual import operation, allowing Terraform to associate the imported resource with this definition. The body of the block can be completed after the instance is successfully imported.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/import/usage.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  # ...instance configuration...
}
```

----------------------------------------

TITLE: Terraform HCL Basic Syntax Example
DESCRIPTION: Illustrates the fundamental syntax of Terraform's HCL, showing a resource block definition and a generic block structure with placeholders for block type, labels, identifiers, and expressions. This snippet demonstrates the basic building blocks of a Terraform configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/index.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
resource ""aws_vpc"" ""main"" {
  cidr_block = var.base_cidr_block
}

<BLOCK TYPE> ""<BLOCK LABEL>"" ""<BLOCK LABEL>"" {
  # Block body
  <IDENTIFIER> = <EXPRESSION> # Argument
}
```

----------------------------------------

TITLE: Normalize Varied Input Types to a List with Terraform try()
DESCRIPTION: This HCL example uses `try` to normalize a variable that can be either a single string or a list into a consistent list format. If `var.example` is a string, it's converted to a single-element list; otherwise, it attempts to convert to a list directly, ensuring `local.example` is always a list.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/try.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
variable ""example"" {
  type = any
}

locals {
  example = try(
    [tostring(var.example)],
    tolist(var.example),
  )
}
```

----------------------------------------

TITLE: Example Terraform Test Output in JUnit XML Format
DESCRIPTION: This XML snippet shows the structure of a JUnit XML file generated by `terraform test -junit-xml`. It includes examples of successful and failed test cases, demonstrating the `<testsuite>`, `<testcase>`, and `<failure>` elements, along with error details.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_7

LANGUAGE: XML
CODE:
```
<?xml version=""1.0"" encoding=""UTF-8""?><testsuites>
  <testsuite name=""example_1.tftest.hcl"" tests=""1"" skipped=""0"" failures=""0"" errors=""0"">
    <testcase name=""true_is_true"" classname=""example_1.tftest.hcl"" time=""0.002295"" timestamp=""2025-01-13T19:23:16Z""></testcase>
  </testsuite>
  <testsuite name=""example_2.tftest.hcl"" tests=""1"" skipped=""0"" failures=""1"" errors=""0"">
    <testcase name=""false_is_false"" classname=""example_2.tftest.hcl"" time=""0.001468"" timestamp=""2025-01-13T19:23:16Z"">
      <failure message=""local.false did not match expected value""><![CDATA[
Error: Test assertion failed

  on example_2.tftest.hcl line 3, in run ""false_is_false"":
   3:     condition     = local.false == ""false""
    ├────────────────
    │ local.false is ""true""

local.false did not match expected value
]]></failure>
    </testcase>
  </testsuite>
</testsuites>
```

----------------------------------------

TITLE: HCL Configuration Example for abs function
DESCRIPTION: A practical example demonstrating how to use the `abs` function within a Terraform configuration. It defines a variable and an output to calculate and display its absolute value.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/abs.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
variable ""num"" {
  default = -10
}

output ""absolute_value"" {
  value = abs(var.num)
}
```

----------------------------------------

TITLE: Terraform Stack Provider Block with for_each Example
DESCRIPTION: Illustrates the use of the `for_each` meta-argument within a Terraform Stack `provider` block to create multiple provider configurations dynamically based on a variable, such as different AWS regions. This advanced example showcases how to manage multiple provider instances efficiently.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#_snippet_8

LANGUAGE: hcl
CODE:
```
provider ""aws"" ""configurations"" {
    for_each = var.regions

    config {
        region = each.value

        assume_role_with_web_identity {
            role_arn           = var.role_arn
            web_identity_token = var.identity_token
        }

        default_tags {
            tags = var.default_tags
        }
    }
}
```

----------------------------------------

TITLE: Terraform Module Usage with Inline AMI Creation
DESCRIPTION: This example demonstrates how to use a Terraform module when the required AMI needs to be created as part of the configuration. It defines an 'aws_ami_copy' resource to create a local copy of an AMI and then passes the output of this resource directly to the 'ami' input variable of the 'example' module.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
# In situations where the AMI will be directly managed:

resource ""aws_ami_copy"" ""example"" {
  name              = ""local-copy-of-ami""
  source_ami_id     = ""ami-abc123""
  source_ami_region = ""eu-west-1""
}

module ""example"" {
  source = ""./modules/example""

  ami = aws_ami_copy.example
}
```

----------------------------------------

TITLE: Get Current UTC Timestamp in Terraform
DESCRIPTION: Demonstrates the usage of the `timestamp()` function in Terraform to retrieve the current UTC date and time. The function returns a string formatted according to RFC 3339, as shown in the example output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timestamp.mdx#_snippet_0

LANGUAGE: terraform
CODE:
```
> timestamp()
2018-05-13T07:44:12Z
```

----------------------------------------

TITLE: Invoking Terraform Credentials Helper for `get` Operation
DESCRIPTION: This command demonstrates how Terraform invokes a credentials helper (e.g., `terraform-credentials-credstore`) to retrieve credentials for a specific host (`app.terraform.io`). It includes arguments configured for the helper and the `get` verb.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
terraform-credentials-credstore --host=credstore.example.com get app.terraform.io
```

----------------------------------------

TITLE: Example of filesha512 Function Execution
DESCRIPTION: This example demonstrates the execution of the `filesha512` function, showing a typical command-line invocation and its hexadecimal output. Although the document focuses on `filesha256`, this snippet provides a concrete illustration of a file hashing function's output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha256.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
$ filesha512(""example.txt"")
a591a6d40bf420404a011733cfb7b190d62c65bf0bcda32b0b571d0f6a26f2bb
```

----------------------------------------

TITLE: tostring Function Usage Examples
DESCRIPTION: Illustrates the `tostring` function's behavior in Terraform, showing conversions for string, number, boolean, and null inputs, as well as an error case when attempting to convert an unsupported type like a list.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tostring.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> tostring(""hello"")
""hello""
> tostring(1)
""1""
> tostring(true)
""true""
> tostring(null)
tostring(null)
> tostring([])
Error: Invalid function argument

Invalid value for ""v"" parameter: cannot convert tuple to string.
```

----------------------------------------

TITLE: HCL Deployment Block Example with Inputs
DESCRIPTION: Demonstrates a practical `deployment` block configuration named 'production', specifying `aws_region` and `instance_count` as input variables. This example shows how to pass specific values to your Stack's infrastructure.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
deployment ""production"" {
    inputs = {
        aws_region     = ""us-west-1""
        instance_count = 2
    }
}
```

----------------------------------------

TITLE: Example JSON for Terraform apply_complete Message
DESCRIPTION: Illustrates the structure of an `apply_complete` message, indicating successful completion of a resource creation. The `hook` object contains details about the resource, action, and elapsed time.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""random_pet.animal: Creation complete after 0s [id=smart-lizard]"",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2021-05-25T13:32:41.826179-04:00"",
  ""hook"": {
    ""resource"": {
      ""addr"": ""random_pet.animal"",
      ""module"": """",
      ""resource"": ""random_pet.animal"",
      ""implied_provider"": ""random"",
      ""resource_type"": ""random_pet"",
      ""resource_name"": ""animal"",
      ""resource_key"": null
    },
    ""action"": ""create"",
    ""id_key"": ""id"",
    ""id_value"": ""smart-lizard"",
    ""elapsed_seconds"": 0
  },
  ""type"": ""apply_complete""
}
```

----------------------------------------

TITLE: Call `encode_tfvars` Function with an Example Object in HCL
DESCRIPTION: This HCL snippet demonstrates calling `provider::terraform::encode_tfvars`, passing a simple object `{ example = ""Hello!"" }`. The function processes this object to produce a string formatted for `.tfvars` files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_tfvars.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
provider::terraform::encode_tfvars({
  example = ""Hello!""
})
```

----------------------------------------

TITLE: HCL index Function Basic Usage
DESCRIPTION: An example demonstrating the `index` function's behavior when finding a value in a simple string list. It shows how the function returns the zero-based index of the first occurrence.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index_function.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> index([""a"", ""b"", ""c""], ""b"")
1
```

----------------------------------------

TITLE: Terraform HCL Version Constraint Range Example
DESCRIPTION: Provides a practical example of a version constraint in Terraform HCL that specifies a range of acceptable versions. This constraint allows versions 1.2.0 and newer, but strictly older than 2.0.0.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/version-constraints.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
version = "">= 1.2.0, < 2.0.0""
```

----------------------------------------

TITLE: Illustrate strrev function usage with examples in HCL
DESCRIPTION: Provides examples of the `strrev` function in HashiCorp Configuration Language (HCL), demonstrating its ability to reverse strings, including those with Unicode characters, while respecting grapheme cluster boundaries.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/strrev.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> strrev(""hello"")
olleh
> strrev(""a ☃"")
☃ a
```

----------------------------------------

TITLE: Example Generated Terraform HCL Configuration
DESCRIPTION: This HCL code snippet illustrates an example of a `generated.tf` file, which is automatically created by Terraform when importing existing infrastructure. It defines an `aws_iot_thing` resource named 'bar' with a specified name 'foo', ready for review and modification.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
resource ""aws_iot_thing"" ""bar"" {
  name = ""foo""
}
```

----------------------------------------

TITLE: Terraform `slice` Function Usage Example
DESCRIPTION: Demonstrates how to use the `slice` function in Terraform to extract a sub-list from a string array, showing the input and expected output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/slice.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
slice([""a"", ""b"", ""c"", ""d""], 1, 3)
# Expected output:
# [
#   ""b"",
#   ""c"",
# ]
```

----------------------------------------

TITLE: HCL element Function Usage Examples
DESCRIPTION: Demonstrates various use cases of the `element` function in HCL, including standard indexing, wrap-around behavior for indices exceeding list length, and retrieving the last element using negative indexing.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/element.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> element([""a"", ""b"", ""c""], 1)
""b""
```

LANGUAGE: hcl
CODE:
```
> element([""a"", ""b"", ""c""], 3)
""a""
```

LANGUAGE: hcl
CODE:
```
> element([""a"", ""b"", ""c""], -1)
""c""
```

----------------------------------------

TITLE: Example of Terraform min() Function Call
DESCRIPTION: Demonstrates the usage of the `min` function in Terraform, which takes multiple numeric arguments and returns the smallest value among them.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/function-calls.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
min(55, 3453, 2)
```

----------------------------------------

TITLE: Importing a Terraform Resource with For_Each Meta-Argument
DESCRIPTION: This example demonstrates how to import a specific instance of a resource that has been defined using the `for_each` meta-argument. The `to` argument includes the key of the target instance, enabling the import of a particular resource from a collection.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#_snippet_8

LANGUAGE: HCL
CODE:
```
import {
  to = aws_instance.example[""foo""]
  id = ""i-abcd1234""
}
```

----------------------------------------

TITLE: Terraform `main.tf` for Test Output Example
DESCRIPTION: This `main.tf` snippet defines local variables used in subsequent Terraform test examples. It intentionally includes a variable (`false`) with an incorrect value to demonstrate a failing test assertion.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
# main.tf
locals {
  true  = ""true""
  false = ""true"" # incorrect, should be ""false""!
}
```

----------------------------------------

TITLE: HCL Example: Auto-approve Orchestration Block
DESCRIPTION: An example of an `orchestrate` block in HCL that automatically approves deployments if a specific component, 'component.pet', has no proposed changes. This demonstrates using the `context.plan.component_changes` variable.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#_snippet_6

LANGUAGE: HCL
CODE:
```
orchestrate ""auto_approve"" ""no_pet_changes"" {
  check {
    condition = context.plan.component_changes[""component.pet""].total == 0
    reason    = ""Changes proposed to pet component.""
  }
}
```

----------------------------------------

TITLE: Sample Terraform Apply JSON Output
DESCRIPTION: This snippet provides a multi-line JSON output example from running `terraform apply -json`. It demonstrates various event types, including version information, planned changes, resource creation progress, and final apply summaries, showcasing the typical structure and content of Terraform's structured UI output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
{""@level"":""info"",""@message"":""Terraform 0.15.4"",""@module"":""terraform.ui"",""@timestamp"":""2021-05-25T13:32:41.275359-04:00"",""terraform"":""0.15.4"",""type"":""version"",""ui"":""0.1.0""}
{""@level"":""info"",""@message"":""random_pet.animal: Plan to create"",""@module"":""terraform.ui"",""@timestamp"":""2021-05-25T13:32:41.705503-04:00"",""change"":{""resource"":{""addr"":""random_pet.animal"",""module"":"""",""resource"":""random_pet.animal"",""implied_provider"":""random"",""resource_type"":""random_pet"",""resource_name"":""animal"",""resource_key"":null},""action"":""create""},""type"":""planned_change""}
{""@level"":""info"",""@message"":""Plan: 1 to add, 0 to change, 0 to destroy."",""@module"":""terraform.ui"",""@timestamp"":""2021-05-25T13:32:41.705638-04:00"",""changes"":{""add"":1,""change"":0,""remove"":0,""operation"":""plan""},""type"":""change_summary""}
{""@level"":""info"",""@message"":""random_pet.animal: Creating..."",""@module"":""terraform.ui"",""@timestamp"":""2021-05-25T13:32:41.825308-04:00"",""hook"":{""resource"":{""addr"":""random_pet.animal"",""module"":"""",""resource"":""random_pet.animal"",""implied_provider"":""random"",""resource_type"":""random_pet"",""resource_name"":""animal"",""resource_key"":null},""action"":""create""},""type"":""apply_start""}
{""@level"":""info"",""@message"":""random_pet.animal: Creation complete after 0s [id=smart-lizard]"",""@module"":""terraform.ui"",""@timestamp"":""2021-05-25T13:32:41.826179-04:00"",""hook"":{""resource"":{""addr"":""random_pet.animal"",""module"":"""",""resource"":""random_pet.animal"",""implied_provider"":""random"",""resource_type"":""random_pet"",""resource_name"":""animal"",""resource_key"":null},""action"":""create"",""id_key"":""id"",""id_value"":""smart-lizard"",""elapsed_seconds"":0},""type"":""apply_complete""}
{""@level"":""info"",""@message"":""Apply complete! Resources: 1 added, 0 changed, 0 destroyed."",""@module"":""terraform.ui"",""@timestamp"":""2021-05-25T13:32:41.869168-04:00"",""changes"":{""add"":1,""change"":0,""remove"":0,""operation"":""apply""},""type"":""change_summary""}
{""@level"":""info"",""@message"":""Outputs: 1"",""@module"":""terraform.ui"",""@timestamp"":""2021-05-25T13:32:41.869280-04:00"",""outputs"":{""pets"":{""sensitive"":false,""type"":""string"",""value"":""smart-lizard""}},""type"":""outputs""}
```

----------------------------------------

TITLE: Example Deployment Configuration File
DESCRIPTION: This snippet shows the beginning of a deployment configuration file (`deployments.tfdeploy.hcl`) which is used to define how many times the infrastructure specified by a Stack will be deployed. It typically contains configurations for different environments, accounts, or regions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/design.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
# deployments.tfdeploy.hcl

```

----------------------------------------

TITLE: Terraform `regex` Function Examples
DESCRIPTION: Demonstrates various uses of the `regex` function in Terraform, including extracting substrings, capturing groups, and named captures. It also illustrates the error handling when a pattern does not match the given string.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/regex.mdx#_snippet_2

LANGUAGE: Terraform HCL
CODE:
```
> regex(""[a-z]+"", ""53453453.345345aaabbbccc23454"")
aaabbbccc

> regex(""(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)"", ""2019-02-01"")
[
  ""2019"",
  ""02"",
  ""01"",
]

> regex(""^(?:(?P<scheme>[^:/?#]+):)?(?://(?P<authority>[^/?#]*))?"", ""https://terraform.io/docs/"")
{
  ""authority"" = ""terraform.io""
  ""scheme"" = ""https""
}

> regex(""[a-z]+"", ""53453453.34534523454"")

Error: Error in function call

Call to function ""regex"" failed: pattern did not match any part of the given
string.
```

----------------------------------------

TITLE: Terraform `anytrue` Function Command-Line Examples
DESCRIPTION: These examples demonstrate the behavior of the `anytrue` function when executed from the command line. They show how `anytrue` evaluates various input collections, including those with string 'true', boolean true, mixed booleans, and empty lists, returning `true` if any element is true and `false` otherwise.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/anytrue.mdx#_snippet_1

LANGUAGE: command
CODE:
```
> anytrue([""true""])
true
> anytrue([true])
true
> anytrue([true, false])
true
> anytrue([])
false
```

----------------------------------------

TITLE: Example Backend Configuration File for Terraform S3
DESCRIPTION: A sample `state.config` file providing the actual values for an S3 backend. This file is designed to be used in conjunction with a partial Terraform configuration, supplying the concrete `bucket`, `key`, `region`, and `profile` values that were omitted in the main configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
bucket = ""your-bucket""
key    = ""your-state.tfstate""
region = ""eu-central-1""
profile= ""Your_Profile""
```

----------------------------------------

TITLE: Terraform CLI Initialization Commands
DESCRIPTION: Documents the primary Terraform CLI commands for preparing a working directory: `terraform init` for full initialization and `terraform get` for module-specific downloads. It outlines their functionalities, when to use them, and their idempotency.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/init/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform init
  - Description: Initializes a Terraform working directory. This command must be run before any other Terraform operations (e.g., `plan`, `apply`).
  - Actions Performed:
    - Accesses state in the configured backend.
    - Downloads and installs required provider plugins.
    - Downloads modules referenced in the configuration.
  - Idempotency: The command is idempotent; it can be run multiple times. If no changes are required, it will have no effect.
  - Reinitialization: Required when there are changes to provider requirements, module sources/version constraints, or backend configurations.

terraform get
  - Description: Downloads modules referenced in the configuration.
  - Limitation: This command only downloads modules and does not perform other essential initialization tasks (like installing providers or configuring backends).
  - Usage: Primarily for niche workflows. `terraform init` is generally preferred for comprehensive directory preparation.
```

----------------------------------------

TITLE: Basic Usage and Error Handling of Terraform try()
DESCRIPTION: These examples illustrate the basic behavior of the `try` function. It shows how `try` returns a fallback value when an attribute is missing (`local.foo.boop`) but fails if the reference itself is undeclared (`local.nonexist`), demonstrating it only catches dynamic errors.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/try.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
> local.foo
{
  ""bar"" = ""baz""
}
> try(local.foo.bar, ""fallback"")
baz
> try(local.foo.boop, ""fallback"")
fallback

> try(local.nonexist, ""fallback"")

Error: Reference to undeclared local value

A local value with the name ""nonexist"" has not been declared.
```

----------------------------------------

TITLE: Using `toset` Function in Terraform
DESCRIPTION: Examples demonstrating the behavior of the `toset` function in Terraform, including basic list-to-set conversion, handling of mixed-type elements, and removal of duplicates with loss of ordering.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/toset.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> toset([""a"", ""b"", ""c""])
[
  ""a"",
  ""b"",
  ""c"",
]
```

LANGUAGE: Terraform
CODE:
```
> toset([""a"", ""b"", 3])
[
  ""3"",
  ""a"",
  ""b"",
]
```

LANGUAGE: Terraform
CODE:
```
> toset([""c"", ""b"", ""b""])
[
  ""b"",
  ""c"",
]
```

----------------------------------------

TITLE: Example JSON for Terraform provision_complete Message
DESCRIPTION: Illustrates the structure of a `provision_complete` message, indicating the successful completion of a provisioning step. The `hook` object contains the resource and provisioner type.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_14

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""null_resource.none[0]: (local-exec) Provisioning complete"",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2021-03-17T09:34:06.239043-04:00"",
  ""hook"": {
    ""resource"": {
      ""addr"": ""null_resource.none[0]"",
      ""module"": """",
      ""resource"": ""null_resource.none[0]"",
      ""implied_provider"": ""null"",
      ""resource_type"": ""null_resource"",
      ""resource_name"": ""none"",
      ""resource_key"": 0
    },
    ""provisioner"": ""local-exec""
  },
  ""type"": ""provision_complete""
}
```

----------------------------------------

TITLE: Terraform AWS Network Topology Configuration Example
DESCRIPTION: A comprehensive example demonstrating a simple network topology for Amazon Web Services using Terraform. This configuration includes defining required providers, input variables, an AWS VPC, and dynamically creating subnets across multiple availability zones, showcasing resource dependencies and the use of built-in functions like `cidrsubnet`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/index.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
terraform {
  required_providers {
    aws = {
      source  = ""hashicorp/aws""
      version = ""~> 1.0.4""
    }
  }
}

variable ""aws_region"" {}

variable ""base_cidr_block"" {
  description = ""A /16 CIDR range definition, such as 10.1.0.0/16, that the VPC will use""
  default = ""10.1.0.0/16""
}

variable ""availability_zones"" {
  description = ""A list of availability zones in which to create subnets""
  type = list(string)
}

provider ""aws"" {
  region = var.aws_region
}

resource ""aws_vpc"" ""main"" {
  # Referencing the base_cidr_block variable allows the network address
  # to be changed without modifying the configuration.
  cidr_block = var.base_cidr_block
}

resource ""aws_subnet"" ""az"" {
  # Create one subnet for each given availability zone.
  count = length(var.availability_zones)

  # For each subnet, use one of the specified availability zones.
  availability_zone = var.availability_zones[count.index]

  # By referencing the aws_vpc.main object, Terraform knows that the subnet
  # must be created only after the VPC is created.
  vpc_id = aws_vpc.main.id

  # Built-in functions and operators can be used for simple transformations of
  # values, such as computing a subnet address. Here we create a /20 prefix for
  # each subnet, using consecutive addresses for each availability zone,
  # such as 10.1.16.0/20 .
  cidr_block = cidrsubnet(aws_vpc.main.cidr_block, 4, count.index+1)
}
```

----------------------------------------

TITLE: Illustrative Examples of abs function behavior in HCL
DESCRIPTION: Demonstrates the `abs` function's output for positive, zero, and negative input values when executed in a console-like environment, showing its core functionality.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/abs.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
$ abs(23)
23
$ abs(0)
0
$ abs(-12.4)
12.4
```

----------------------------------------

TITLE: Placeholder Backend Block for Terraform Backend-Config
DESCRIPTION: An example of a Terraform configuration with an empty `backend` block. This setup indicates that the actual values for the backend will be supplied externally, typically through a `-backend-config` file or command-line arguments during `terraform init`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#_snippet_7

LANGUAGE: hcl
CODE:
```
terraform {
  backend {
    # values provided by backend-config file
  }
}
```

----------------------------------------

TITLE: Examples of Terraform moved blocks for instance key changes in HCL
DESCRIPTION: This HCL snippet provides various examples of `moved` blocks for handling changes in resource instance keys. It covers scenarios like renaming elements within `for_each`, mapping `count` to `for_each`, and mapping `count` to a single instance, ensuring state preservation during refactoring.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#_snippet_5

LANGUAGE: HCL
CODE:
```
# Both old and new configuration used ""for_each"", but the
# ""small"" element was renamed to ""tiny"".
moved {
  from = aws_instance.b[""small""]
  to   = aws_instance.b[""tiny""]
}

# The old configuration used ""count"" and the new configuration
# uses ""for_each"", with the following mappings from
# index to key:
moved {
  from = aws_instance.c[0]
  to   = aws_instance.c[""small""]
}
moved {
  from = aws_instance.c[1]
  to   = aws_instance.c[""tiny""]
}

# The old configuration used ""count"", and the new configuration
# uses neither ""count"" nor ""for_each"", and you want to keep
# only the object at index 2.
moved {
  from = aws_instance.d[2]
  to   = aws_instance.d
}
```

----------------------------------------

TITLE: Terraform HCL fileexists Conditional Logic Example
DESCRIPTION: An example showing how to use `fileexists` within a conditional expression in Terraform HCL to dynamically load content from 'custom-section.sh' or use a default.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileexists.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
fileexists(""custom-section.sh"") ? file(""custom-section.sh"") : local.default_content
```

----------------------------------------

TITLE: Terraform HCL `base64gzip` Function Usage Examples
DESCRIPTION: Practical examples demonstrating the use of the `base64gzip` function within Terraform HCL configurations, ranging from basic syntax illustration to a real-world application of uploading gzipped and Base64-encoded content to an AWS S3 bucket.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64gzip.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
base64gzip(ARGS)
```

LANGUAGE: hcl
CODE:
```
base64gzip(local.my_data)
```

LANGUAGE: hcl
CODE:
```
resource ""aws_s3_object"" ""example"" {
  bucket = ""my_bucket""
  key = ""example.txt""
  content_base64 = base64gzip(local.my_data)
  content_encoding = ""gzip""
}
```

----------------------------------------

TITLE: Terraform Stack AWS Provider Configuration Example
DESCRIPTION: Demonstrates how to configure `required_providers` and a `provider` block for AWS within a Terraform Stack, including defining a source, version, and passing configuration arguments like region and assume role details. This example shows how to declare and configure a cloud provider for your Stack.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#_snippet_7

LANGUAGE: hcl
CODE:
```
required_providers {
    aws = {
        source  = ""hashicorp/aws""
        version = ""~> 5.7.0""
    }
}

# ""main"" is the alias for this provider
provider ""aws"" ""main"" {
# The config block accepts the configuration for a provider
    config {
        region = var.region

        assume_role_with_web_identity {
            role_arn           = var.role_arn
            web_identity_token = var.identity_token
        }
    }
}
```

----------------------------------------

TITLE: HCL Tuple Literal Example
DESCRIPTION: An example of an HCL tuple literal that matches a `tuple([string, number, bool])` type. This demonstrates how ordered elements are defined within a tuple value, where each element's type must match its position in the schema.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
[""a"", 15, true]
```

----------------------------------------

TITLE: Examples of uuidv5 Function Usage in Terraform
DESCRIPTION: Illustrates various ways to use the `uuidv5` function in Terraform, demonstrating its behavior with different predefined namespace keywords (DNS, URL, OID, X.500) and direct UUID namespace IDs. The examples show how the function produces consistent UUIDs based on the input namespace and name.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/uuidv5.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
uuidv5(""dns"", ""www.terraform.io"")
a5008fae-b28c-5ba5-96cd-82b4c53552d6
```

LANGUAGE: HCL
CODE:
```
uuidv5(""url"", ""https://www.terraform.io/"")
9db6f67c-dd95-5ea0-aa5b-e70e5c5f7cf5
```

LANGUAGE: HCL
CODE:
```
uuidv5(""oid"", ""1.3.6.1.4"")
af9d40a5-7a36-5c07-b23a-851cd99fbfa5
```

LANGUAGE: HCL
CODE:
```
uuidv5(""x500"", ""CN=Example,C=GB"")
84e09961-4aa4-57f8-95b7-03edb1073253
```

LANGUAGE: HCL
CODE:
```
uuidv5(""6ba7b810-9dad-11d1-80b4-00c04fd430c8"", ""www.terraform.io"")
a5008fae-b28c-5ba5-96cd-82b4c53552d6
```

LANGUAGE: HCL
CODE:
```
uuidv5(""743ac3c0-3bf7-4a5b-9e6c-59360447c757"", ""LIBS:diskfont.library"")
ede1a974-df7e-5f17-84b9-76208818b2c8
```

----------------------------------------

TITLE: Example Usage of textencodebase64 with UTF-16LE
DESCRIPTION: Demonstrates how to use the `textencodebase64` function in Terraform to encode the string 'Hello World' using the UTF-16LE character encoding. The example shows the function call and its expected Base64 encoded output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/textencodebase64.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
textencodebase64(""Hello World"", ""UTF-16LE"")
# Expected Output: SABlAGwAbABvACAAVwBvAHIAbABkAA==
```

----------------------------------------

TITLE: Illustrate a Complete Terraform Module Structure
DESCRIPTION: This snippet demonstrates a comprehensive Terraform module structure, encompassing all optional elements. It showcases the maximum complexity a module can achieve, including nested modules and dedicated examples directories.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/structure.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
$ tree complete-module/
.
├── README.md
├── main.tf
├── variables.tf
├── outputs.tf
├── ...
├── modules/
│   ├── nestedA/
│   │   ├── README.md
│   │   ├── variables.tf
│   │   ├── main.tf
│   │   └── outputs.tf
│   ├── nestedB/
│   └── .../
└── examples/
    ├── exampleA/
    │   └── main.tf
    ├── exampleB/
    └── .../
```

----------------------------------------

TITLE: Example filesha512 Function Call and Output
DESCRIPTION: Demonstrates how to invoke the `filesha512` function with a specific file path (`example.txt`) and displays the resulting SHA-512 hash output, typically seen when executed in a shell or CLI context.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha512.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
$ filesha512(""example.txt"")
861844d6704e8573fec34d967e20bcfe6e061b3348b3b0c7e9b7c6a482f6f15a48bffd0fb928fd8c9f9196f7a8596d5e32b45d5a25488a8499396a67442c1d76
```

----------------------------------------

TITLE: Terraform lookup Function Usage Examples
DESCRIPTION: Illustrates the usage of the Terraform `lookup` function with various inputs. It shows how `lookup` returns the value associated with a key if present, or a specified default value if the key is absent from the map.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/lookup.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> lookup({a=""ay"", b=""bee""}, ""a"", ""what?"")
ay
> lookup({a=""ay"", b=""bee""}, ""c"", ""what?"")
what?
```

----------------------------------------

TITLE: Initialize a new Terraform project and configuration
DESCRIPTION: This snippet demonstrates how to initialize a new Git repository for infrastructure, create an initial Terraform configuration file (`main.tf`), and run `terraform init` to prepare the working directory.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#_snippet_2

LANGUAGE: sh
CODE:
```
# Create repository
$ git init my-infra && cd my-infra

Initialized empty Git repository in /.../my-infra/.git/

# Write initial config
$ vim main.tf

# Initialize Terraform
$ terraform init

Initializing provider plugins...
# ...
Terraform has been successfully initialized!
```

----------------------------------------

TITLE: Using the floor function in Terraform
DESCRIPTION: Examples demonstrating how the `floor` function rounds down a number to the nearest whole integer in Terraform's configuration language.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/floor.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> floor(5)
5
> floor(4.9)
4
```

----------------------------------------

TITLE: Example Terraform OAuth `login.v1` Service Discovery Configuration
DESCRIPTION: This JSON snippet provides an example of the `login.v1` service discovery object used by Terraform for OAuth configuration. It defines the client ID, supported grant types, authorization and token endpoints, and a specific port range for the redirection endpoint.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/login-protocol.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""login.v1"": {
    ""client"": ""terraform-cli"",
    ""grant_types"": [""authz_code""],
    ""authz"": ""/oauth/authorization"",
    ""token"": ""/oauth/token"",
    ""ports"": [10000, 10010]
  }
}
```

----------------------------------------

TITLE: Parse Integer Examples in Terraform Configuration Language
DESCRIPTION: Demonstrates the usage of the `parseint` function with various bases (decimal, hexadecimal, binary, base 62) and inputs. It includes examples of successful conversions and a case that results in an error due to an invalid digit for the specified base.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/parseint.mdx#_snippet_0

LANGUAGE: Terraform Configuration Language
CODE:
```
> parseint(""100"", 10)
100

> parseint(""FF"", 16)
255

> parseint(""-10"", 16)
-16

> parseint(""1011111011101111"", 2)
48879

> parseint(""aA"", 62)
656

> parseint(""12"", 2)

Error: Invalid function argument

Invalid value for ""number"" parameter: cannot parse ""12"" as a base 2 integer.
```

----------------------------------------

TITLE: Using Arbitrary Expressions with Argument Syntax
DESCRIPTION: This example illustrates how to assign arbitrary dynamic expressions to resource arguments that behave like attributes, even though block syntax is generally recommended for readability. The expression must resolve to the expected result type. This allows for more dynamic and programmatic construction of object collections.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
example = [
  for name in var.names: {
    foo = name
  }
]
```

----------------------------------------

TITLE: Pseudocode for Terraform `range` Function Algorithm
DESCRIPTION: Illustrates the internal algorithm used by the Terraform `range` function to generate number sequences, showing how `start`, `limit`, and `step` are processed iteratively until the limit is reached.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#_snippet_1

LANGUAGE: Pseudocode
CODE:
```
let num = start
while num < limit: (or, for negative step, num > limit)
  append num to the sequence
  num = num + step
return the sequence
```

----------------------------------------

TITLE: Terraform AWS DynamoDB Table Resource with Replicas
DESCRIPTION: This HCL example defines an `aws_dynamodb_table` resource, demonstrating the configuration of a DynamoDB table with a hash key and multiple `replica` blocks for regional replication. It illustrates how repeated nested attributes are structured in a Terraform resource.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#_snippet_12

LANGUAGE: HCL
CODE:
```
resource ""aws_dynamodb_table"" ""my_table"" {
  name     = ""my_table""
  hash_key = ""key""

  attribute {
    name = ""key""
    type = ""S""
  }

  replica {
    region_name = ""eu-west-2""
  }

  replica {
    region_name = ""us-east-1""
  }
}
```

----------------------------------------

TITLE: Example Terraform Provider Installation HCL Configuration
DESCRIPTION: This HCL snippet demonstrates the basic structure of a `provider_installation` block within Terraform's CLI configuration. It shows how to define a `filesystem_mirror` for specific providers and a `direct` method for others, using `include` and `exclude` patterns to control which installation method applies to which provider.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
provider_installation {
  filesystem_mirror {
    path    = ""/usr/share/terraform/providers""
    include = [""example.com/*/*""]
  }
  direct {
    exclude = [""example.com/*/*""]
  }
}
```

----------------------------------------

TITLE: Example Usage of trimspace Function in HCL
DESCRIPTION: Demonstrates how the `trimspace` function removes leading and trailing whitespace, including newlines, from a string in Terraform's configuration language. The example shows the input string with spaces and newlines, and the resulting trimmed string.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimspace.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> trimspace(""  hello\n\n"")
hello
```

----------------------------------------

TITLE: Example Usage of Terraform `file` Function
DESCRIPTION: Demonstrates how to use the `file` function in Terraform to read the content of a text file located relative to the current module, showing the expected output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/file.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
file(""${path.module}/hello.txt"")
# Expected output: Hello World
```

----------------------------------------

TITLE: Example Usage of Terraform's chomp Function
DESCRIPTION: Illustrates how the `chomp` function processes strings with different trailing newline characters, showing its effect in an interactive shell-like environment by removing the newlines.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/chomp.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
> chomp(""hello\n"")
hello
> chomp(""hello\r\n"")
hello
> chomp(""hello\n\n"")
hello
```

----------------------------------------

TITLE: Example JSON for Terraform provision_errored Message
DESCRIPTION: Demonstrates the structure of a `provision_errored` message, signaling a failure during a provisioning step. The `hook` object specifies the resource and the provisioner type.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_15

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""null_resource.none[0]: (local-exec) Provisioning errored"",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2021-03-26T16:38:54.013572-04:00"",
  ""hook"": {
    ""resource"": {
      ""addr"": ""null_resource.none[0]"",
      ""module"": """",
      ""resource"": ""null_resource.none[0]"",
      ""implied_provider"": ""null"",
      ""resource_type"": ""null_resource"",
      ""resource_name"": ""none"",
      ""resource_key"": 0
    },
    ""provisioner"": ""local-exec""
  },
  ""type"": ""provision_errored""
}
```

----------------------------------------

TITLE: Terraform `regexall` Function Usage Examples
DESCRIPTION: Illustrates various uses of the `regexall` function in Terraform, including extracting all alphabetical sequences from a string and checking for the presence of matches using the `length` function.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/regexall.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> regexall(""[a-z]+"", ""1234abcd5678efgh9"")
[
  ""abcd"",
  ""efgh"",
]

> length(regexall(""[a-z]+"", ""1234abcd5678efgh9""))
2

> length(regexall(""[a-z]+"", ""123456789"")) > 0
false
```

----------------------------------------

TITLE: Terraform `formatdate` Function Usage Examples
DESCRIPTION: Illustrates various ways to use the `formatdate` function in Terraform to format RFC 3339 timestamps into different human-readable string representations. Examples demonstrate different format specifiers and their corresponding outputs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatdate.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> formatdate(""DD MMM YYYY hh:mm ZZZ"", ""2018-01-02T23:12:01Z"")
02 Jan 2018 23:12 UTC
> formatdate(""EEEE, DD-MMM-YY hh:mm:ss ZZZ"", ""2018-01-02T23:12:01Z"")
Tuesday, 02-Jan-18 23:12:01 UTC
> formatdate(""EEE, DD MMM YYYY hh:mm:ss ZZZ"", ""2018-01-02T23:12:01-08:00"")
Tue, 02 Jan 2018 23:12:01 -0800
> formatdate(""MMM DD, YYYY"", ""2018-01-02T23:12:01Z"")
Jan 02, 2018
> formatdate(""HH:mmaa"", ""2018-01-02T23:12:01Z"")
11:12pm
```

----------------------------------------

TITLE: Importing a Terraform Resource with Count Meta-Argument
DESCRIPTION: This example shows how to import a specific instance of a resource that has been defined using the `count` meta-argument. The `to` argument includes the index of the target instance, allowing precise control over which resource is imported.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#_snippet_7

LANGUAGE: HCL
CODE:
```
import {
  to = aws_instance.example[0]
  id = ""i-abcd1234""
}
```

----------------------------------------

TITLE: Example Decrypting with rsadecrypt in HCL
DESCRIPTION: This example demonstrates how to use the `rsadecrypt` function in HCL to decrypt a ciphertext. It reads the base64-encoded ciphertext from a file specified by `path.module/ciphertext` and the PEM-encoded private key from `privatekey.pem`. The output shows the decrypted cleartext 'Hello, world!'.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/rsadecrypt.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> rsadecrypt(filebase64(""${path.module}/ciphertext""), file(""privatekey.pem""))
Hello, world!
```

----------------------------------------

TITLE: Terraform Monorepo Directory Structure Example
DESCRIPTION: Illustrates a typical monorepo structure for a Terraform project, organizing modules for functions, queues, and VPCs, alongside root configuration files for the overall infrastructure.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_17

LANGUAGE: Filesystem
CODE:
```
.
├── modules
│   ├── function
│   │   ├── main.tf      # contains aws_iam_role, aws_lambda_function
│   │   ├── outputs.tf
│   │   └── variables.tf
│   ├── queue
│   │   ├── main.tf      # contains aws_sqs_queue
│   │   ├── outputs.tf
│   │   └── variables.tf
│   └── vpc
│       ├── main.tf      # contains aws_vpc, aws_subnet
│       ├── outputs.tf
│       └── variables.tf
├── main.tf
├── outputs.tf
└── variables.tf
```

----------------------------------------

TITLE: Illustrate cidrsubnet function usage with examples
DESCRIPTION: Provides practical examples of the `cidrsubnet` function, demonstrating its application with both IPv4 and IPv6 prefixes to calculate new subnet addresses based on specified `newbits` and `netnum` values. Shows how the function extends the prefix and assigns the network number.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrsubnet.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> cidrsubnet(""172.16.0.0/12"", 4, 2)
172.18.0.0/16
> cidrsubnet(""10.1.2.0/24"", 4, 15)
10.1.2.240/28
> cidrsubnet(""fd00:fd12:3456:7890::/56"", 16, 162)
fd00:fd12:3456:7800:a200::/72
```

----------------------------------------

TITLE: HCL Object Literal Example
DESCRIPTION: An example of an HCL object literal that matches an `object({ name=string, age=number })` type. This demonstrates how named attributes are defined within an object value. An object like `aws_vpc.example_vpc` could also match `object({ id=string, cidr_block=string })`, with extra attributes discarded.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
{
  name = ""John""
  age  = 52
}
```

----------------------------------------

TITLE: Illustrate cidrnetmask function usage with example in HCL
DESCRIPTION: This example demonstrates the practical application of the `cidrnetmask` function. It shows how providing an IPv4 CIDR prefix like `172.16.0.0/12` results in the corresponding subnet mask `255.240.0.0`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrnetmask.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
cidrnetmask(""172.16.0.0/12"")
255.240.0.0
```

----------------------------------------

TITLE: Encoding Terraform Data Structures to YAML
DESCRIPTION: These examples demonstrate the usage of the `yamlencode` function in Terraform to convert different data structures, including simple maps, lists, and nested objects, into their YAML block-style string representations. Each example shows the Terraform function call and its corresponding YAML output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamlencode.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
yamlencode({""a"":""b"", ""c"":""d""})
```

LANGUAGE: YAML
CODE:
```
""a"": ""b""
""c"": ""d""
```

LANGUAGE: HCL
CODE:
```
yamlencode({""foo"":[1, 2, 3], ""bar"": ""baz""})
```

LANGUAGE: YAML
CODE:
```
""bar"": ""baz""
""foo"":
- 1
- 2
- 3
```

LANGUAGE: HCL
CODE:
```
yamlencode({""foo"":[1, {""a"":""b"",""c"":""d""}, 3], ""bar"": ""baz""})
```

LANGUAGE: YAML
CODE:
```
""bar"": ""baz""
""foo"":
- 1
- ""a"": ""b""
  ""c"": ""d""
- 3
```

----------------------------------------

TITLE: Interactive Terraform 0.13upgrade Execution
DESCRIPTION: Example of running the `terraform 0.13upgrade` command interactively. The command explains its actions and prompts the user for confirmation before applying changes to the configuration files in the current directory.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.13upgrade.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
$ terraform 0.13upgrade

This command will update the configuration files in the given directory to use
the new provider source features from Terraform v0.13. It will also highlight
any providers for which the source cannot be detected, and advise how to
proceed.

We recommend using this command in a clean version control work tree, so that
you can easily see the proposed changes as a diff against the latest commit.
If you have uncommited changes already present, we recommend aborting this
command and dealing with them before running this command again.

Would you like to upgrade the module in the current directory?
  Only 'yes' will be accepted to confirm.

  Enter a value: yes
```

----------------------------------------

TITLE: Example Output of `terraform modules` Command
DESCRIPTION: This snippet shows the human-readable hierarchical output of the `terraform modules` command without any flags, detailing declared modules, their sources, and versions. It illustrates the nested structure representing module composition.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/modules.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
Modules declared by configuration:

.
├── ""my_private_registry_module""[app.terraform.io/hashicorp/label/null] 1.0.0 (>=1.0.0, < 2.0.1)
├── ""my_public_registry_module""[terraform-aws-modules/iam/aws] 5.47.1 (>5.0.1)
└── ""my_local_module_a""[./path/to/local/module_a]
    └── ""my_local_module_b""[./path/to/local/module_a/module_b]
        └── ""my_local_module_c""[./path/to/local/module/module_a/module_b/module_c]
```

----------------------------------------

TITLE: Example JSON for Terraform apply_errored Message
DESCRIPTION: Demonstrates the structure of an `apply_errored` message, indicating a failure during a resource apply operation. The `hook` object includes resource details, action, and elapsed time.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_11

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""null_resource.none[0]: Creation errored after 10s"",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2021-03-26T16:38:54.013910-04:00"",
  ""hook"": {
    ""resource"": {
      ""addr"": ""null_resource.none[0]"",
      ""module"": """",
      ""resource"": ""null_resource.none[0]"",
      ""implied_provider"": ""null"",
      ""resource_type"": ""null_resource"",
      ""resource_name"": ""none"",
      ""resource_key"": 0
    },
    ""action"": ""create"",
    ""elapsed_seconds"": 10
  },
  ""type"": ""apply_errored""
}
```

----------------------------------------

TITLE: Configure Default and Aliased AWS Providers for Module Call
DESCRIPTION: This HCL example demonstrates how to define a default AWS provider configuration and an aliased one (`usw2`). It then shows how to call a child module named 'example' and explicitly pass the aliased `aws.usw2` provider configuration to it using the `providers` meta-argument, ensuring the child module uses the `us-west-2` region for its AWS resources.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/module-providers.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
# The default ""aws"" configuration is used for AWS resources in the root
# module where no explicit provider instance is selected.
provider ""aws"" {
  region = ""us-west-1""
}

# An alternate configuration is also defined for a different
# region, using the alias ""usw2"".
provider ""aws"" {
  alias  = ""usw2""
  region = ""us-west-2""
}

# An example child module is instantiated with the alternate configuration,
# so any AWS resources it defines will use the us-west-2 region.
module ""example"" {
  source    = ""./example""
  providers = {
    aws = aws.usw2
  }
}
```

----------------------------------------

TITLE: Terraform `range` Function with `for` Expression Example
DESCRIPTION: Illustrates a practical application of the Terraform `range` function within a `for` expression to dynamically generate formatted names based on counts from a map variable. This example shows how `range` can be combined with other collection-manipulation functions to produce structured outputs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
variable ""name_counts"" {
  type    = map(number)
  default = {
    ""foo"" = 2
    ""bar"" = 4
  }
}

locals {
  expanded_names = {
    for name, count in var.name_counts : name => [
      for i in range(count) : format(""%s%02d"", name, i)
    ]
  }
}

output ""expanded_names"" {
  value = local.expanded_names
}
```

----------------------------------------

TITLE: Terraform Init Command Options
DESCRIPTION: Comprehensive documentation for the `terraform init` command, detailing its functionalities for backend configuration, state migration, and child module installation, along with various command-line options.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/init.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
terraform init [options]

Backend Initialization Options:
  -reconfigure
    Disregards any existing backend configuration, preventing migration of any existing state.
  -migrate-state
    Attempts to copy existing state to the new backend. May result in interactive prompts to confirm migration of workspace states.
  -force-copy
    Suppresses interactive prompts for state migration and answers ""yes"" to migration questions. Automatically enables -migrate-state.
  -backend=false
    Skips backend configuration. Recommended only when the working directory was already previously initialized for a particular backend.
  -backend-config=<path> | -backend-config=""key=value""
    Used for partial backend configuration when settings are dynamic or sensitive. Can be a path to a file or key-value pairs.

Child Module Installation Options:
  -upgrade
    Overrides default module installation behavior, updating all modules to the latest available source code.
  -get=false
    Skips child module installation. Recommended only when the working directory was already previously initialized with its child modules.
```

----------------------------------------

TITLE: Terraform init Command Reference and Options
DESCRIPTION: Comprehensive documentation for the `terraform init` command, detailing its purpose, general usage, and all available command-line options for controlling input, state locking, output formatting, module upgrades, and copying source modules.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/init.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform init command:

Usage: terraform init [options]
  - Initializes a working directory containing Terraform configuration files.
  - This is the first command you should run after writing a new Terraform configuration or cloning an existing configuration from version control.
  - It is safe to run this command multiple times; it will never delete your existing configuration or state.

General Options:
  -input=true
    - Description: Ask for input if necessary. If false, will error if input was required.
  -lock=false
    - Description: Disable locking of state files during state-related operations.
  -lock-timeout=<duration>
    - Description: Override the time Terraform will wait to acquire a state lock. The default is `0s` (zero seconds), which causes immediate failure if the lock is already held by another process.
  -no-color
    - Description: Disable color codes in the command output.
  -upgrade
    - Description: Opt to upgrade modules and plugins as part of their respective installation steps.

Special Mode: Copy a Source Module
  -from-module=MODULE-SOURCE
    - Description: Copies the given module into the target directory before any other initialization steps are run.
    - Use Cases:
      - Shorthand for checking out a configuration from version control and then initializing the working directory for it.
      - Copying an example configuration into a local directory to be used as a basis for a new configuration.
```

----------------------------------------

TITLE: Using for_each with a Map for Azure Resource Groups
DESCRIPTION: This HCL example demonstrates how to use the `for_each` meta-argument with a map to create multiple Azure resource groups. Each key-value pair in the map corresponds to a unique resource group instance, with `each.key` used for the resource group's name and `each.value` for its location.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
resource ""azurerm_resource_group"" ""rg"" {
  for_each = tomap({
    a_group       = ""eastus""
    another_group = ""westus2""
  })
  name     = each.key
  location = each.value
}
```

----------------------------------------

TITLE: Define Terraform Nested Blocks with Logical Keys
DESCRIPTION: This HCL example illustrates a hypothetical Terraform resource with nested blocks that use logical keys ('foo', 'bar') to identify individual blocks. This pattern allows for direct referencing of specific nested blocks using index syntax.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
device ""foo"" {
  size = 2
}
device ""bar"" {
  size = 4
}
```

----------------------------------------

TITLE: Example JSON Output of `terraform modules -json` Command
DESCRIPTION: This snippet illustrates the machine-readable JSON output generated by the `terraform modules -json` command, providing structured data for each declared module including key, source, and version. It also shows the `format_version` key.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/modules.mdx#_snippet_2

LANGUAGE: JSON
CODE:
```
{
    ""format_version"": ""1.0"",
    ""modules"": [
        {
            ""key"": ""my_private_registry_module"",
            ""source"": ""app.terraform.io/hashicorp/label/null"",
            ""version"": ""1.0.0""
        },
        {
            ""key"": ""my_public_registry_module"",
            ""source"": ""terraform-aws-modules/iam/aws"",
            ""version"": ""5.47.1""
        },
        {
            ""key"": ""my_local_module_a"",
            ""source"": ""./path/to/local/module_a"",
            ""version"": """"
        },
        {
            ""key"": ""my_local_module_b"",
            ""source"": ""./path/to/local/module_a/module_b"",
            ""version"": """"
        },
        {
            ""key"": ""my_local_module_c"",
            ""source"": ""./path/to/local/module/module_a/module_b/module_c"",
            ""version"": """"
        }
    ]
}
```

----------------------------------------

TITLE: Convert a list of strings to a list using Terraform's tolist function
DESCRIPTION: This example demonstrates the `tolist` function in Terraform, showing how it processes an input that is already a list of strings. The function ensures the output is a list, preserving the order of elements from the original list.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tolist.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> tolist([""a"", ""b"", ""c""])
[
  ""a"",
  ""b"",
  ""c"",
]
```

----------------------------------------

TITLE: Basic `timecmp` Usage Examples in HCL
DESCRIPTION: Illustrates various comparisons using the `timecmp` function with different RFC 3339 formatted timestamps, demonstrating the -1, 0, and 1 return values based on the relative order of the input timestamps.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timecmp.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> timecmp(""2017-11-22T00:00:00Z"", ""2017-11-22T00:00:00Z"")
0
> timecmp(""2017-11-22T00:00:00Z"", ""2017-11-22T01:00:00Z"")
-1
> timecmp(""2017-11-22T01:00:00Z"", ""2017-11-22T00:00:00Z"")
1
> timecmp(""2017-11-22T01:00:00Z"", ""2017-11-22T00:00:00-01:00"")
0
```

----------------------------------------

TITLE: Example Usage of Terraform `bcrypt` Function
DESCRIPTION: Illustrates a basic call to the `bcrypt` function with 'hello world' as input. The output shown is a sample bcrypt hash, which will vary on each execution due to the function's use of a random salt.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/bcrypt.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
bcrypt(""hello world"")
# Example output:
# $2a$10$D5grTTzcsqyvAeIAnY/mYOIqliCoG7eAMX0/oFcuD.iErkksEbcAa
```

----------------------------------------

TITLE: Terraform Values Representation JSON Structure Example
DESCRIPTION: This example illustrates the comprehensive JSON structure of a Terraform values representation. It details the format for root module outputs, resources, and nested child modules, including properties like address, type, schema version, and attribute values, along with handling of sensitive data.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#_snippet_4

LANGUAGE: javascript
CODE:
```
{
  ""outputs"": {
    ""private_ip"": {
      ""value"": ""192.168.3.2"",
      ""type"": ""string"",
      ""sensitive"": false
    }
  },
  ""root_module"": {
    ""resources"": [
      {
        ""address"": ""aws_instance.example[1]"",
        ""mode"": ""managed"",
        ""type"": ""aws_instance"",
        ""name"": ""example"",
        ""index"": 1,
        ""provider_name"": ""aws"",
        ""schema_version"": 2,
        ""values"": {
          ""id"": ""i-abc123"",
          ""instance_type"": ""t2.micro""
        },
        ""sensitive_values"": {
          ""id"": true
        }
      }
    ],
    ""child_modules"": [
      {
        ""address"": ""module.child"",
        ""resources"": [
            {
              ""address"": ""module.child.aws_instance.foo""
            }
        ],
        ""child_modules"": [ ]
      }
    ]
  }
}
```

----------------------------------------

TITLE: Terraform ceil Function Usage Examples
DESCRIPTION: Illustrates the application of the `ceil` function in Terraform's configuration language, demonstrating its behavior with both integer and decimal inputs to return the next highest whole number.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ceil.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> ceil(5)
5
> ceil(5.1)
6
```

----------------------------------------

TITLE: Configure Terraform S3 Backend Example
DESCRIPTION: An HCL configuration snippet demonstrating how to set up the Terraform S3 backend, specifying the S3 bucket name, the key path for the state file within the bucket, and the AWS region where the bucket is located.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
terraform {
  backend ""s3"" {
    bucket = ""mybucket""
    key    = ""path/to/my/key""
    region = ""us-east-1""
  }
}
```

----------------------------------------

TITLE: Configure Terraform COS Backend with Shared Credentials in HCL
DESCRIPTION: Example HCL configuration for a Terraform COS backend, demonstrating how to specify `shared_credentials_dir` and `profile` for using shared Tencent Cloud credentials. Includes examples for both Linux/macOS and Windows paths.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#_snippet_7

LANGUAGE: HCL
CODE:
```
terraform {
  backend ""cos"" {
    region                 = ""ap-guangzhou""
    bucket                 = ""bucket-for-terraform-state-{appid}""
    prefix                 = ""terraform/state""
    shared_credentials_dir = ""/Users/tf_user/.tccli""
    profile                = ""default""
  }
}
```

LANGUAGE: HCL
CODE:
```
terraform {
  backend ""cos"" {
    region                 = ""ap-guangzhou""
    bucket                 = ""bucket-for-terraform-state-{appid}""
    prefix                 = ""terraform/state""
    shared_credentials_dir = ""C:\\Users\\tf_user\\.tccli""
    profile                = ""default""
  }
}
```

----------------------------------------

TITLE: Using the split function in HCL
DESCRIPTION: Demonstrates the syntax and various usage examples of the `split` function in HashiCorp Configuration Language (HCL). This function takes a separator and a string, returning a list of substrings.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/split.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
split(separator, string)
```

LANGUAGE: HCL
CODE:
```
> split("","", ""foo,bar,baz"")
[
  ""foo"",
  ""bar"",
  ""baz"",
]
> split("","", ""foo"")
[
  ""foo"",
]
> split("","", """")
[
  """",
]
```

----------------------------------------

TITLE: Declare Terraform Variables and Outputs with Best Practices
DESCRIPTION: This HCL example demonstrates the declaration of Terraform input variables and output values, adhering to recommended practices. It shows how to define `type`, `description`, `default`, and `sensitive` attributes for variables, and `description` and `value` for outputs, promoting clear and secure configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_9

LANGUAGE: hcl
CODE:
```
variable ""db_disk_size"" {
  type        = number
  description = ""Disk size for the API database""
  default     = 100
}

variable ""db_password"" {
  type        = string
  description = ""Database password""
  sensitive   = true
}

output ""web_public_ip"" {
  description = ""Public IP of the web instance""
  value       = aws_instance.web.public_ip
}
```

----------------------------------------

TITLE: Terraform `substr` Example: Basic Extraction
DESCRIPTION: Demonstrates basic usage of the `substr` function to extract a substring from a given string using a positive offset and length.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> substr(""hello world"", 1, 4)
ello
```

----------------------------------------

TITLE: Terraform Default Test Directory Structure Example
DESCRIPTION: This snippet illustrates the recommended directory structure for a Terraform module that includes tests in the default `tests` directory and a separate `testing/setup` module for test setup configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_1

LANGUAGE: plaintext
CODE:
```
project/
|-- main.tf
|-- outputs.tf
|-- terraform.tf
|-- variables.tf
|-- tests/
|   |-- validations.tftest.hcl
|   |-- outputs.tftest.hcl
|-- testing/
    |-- setup/
        |-- main.tf
        |-- outputs.tf
        |-- terraform.tf
        |-- variables.tf
```

----------------------------------------

TITLE: Example: Locking Terraform providers for multiple platforms
DESCRIPTION: This example demonstrates how to use the `terraform providers lock` command with the `-platform` option to ensure that the dependency lock file includes checksums for providers across multiple target operating systems and architectures, such as Windows, macOS, and Linux.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/lock.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
terraform providers lock \
  -platform=windows_amd64 \ # 64-bit Windows
  -platform=darwin_amd64 \  # 64-bit macOS
  -platform=linux_amd64     # 64-bit Linux
```

----------------------------------------

TITLE: HCL Deployment Block Complete Configuration Example
DESCRIPTION: Illustrates the full structure of a `deployment` block in `tfdeploy.hcl`, showing how to define inputs for a Stack instance. The `unique_name` label identifies this specific deployment.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
deployment ""unique_name"" {
  inputs = {
    key     = ""value""
  }
}
```

----------------------------------------

TITLE: Scripting Terraform Console for Expression Evaluation
DESCRIPTION: Demonstrates how to use `terraform console` in non-interactive scripts by piping newline-separated commands to it. The example shows evaluating a `split` function and capturing its output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
$ echo 'split("","", ""foo,bar,baz"")' | terraform console
tolist([
  ""foo"",
  ""bar"",
  ""baz"",
])
```

----------------------------------------

TITLE: Example Terraform CLI Configuration Syntax
DESCRIPTION: This HCL snippet illustrates the general syntax for a Terraform CLI configuration file. It demonstrates how to specify a plugin cache directory and disable checkpoint checks, which are common settings for customizing Terraform CLI behavior.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
plugin_cache_dir   = ""$HOME/.terraform.d/plugin-cache""
disable_checkpoint = true
```

----------------------------------------

TITLE: Define Terraform Resources with Data Source Dependencies
DESCRIPTION: This HCL example demonstrates the recommended order for defining Terraform resources and their dependent data sources. It shows how to declare `aws_ami` and `aws_availability_zones` data sources before referencing them in an `aws_instance` resource, improving code readability and logical flow.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_7

LANGUAGE: hcl
CODE:
```
data ""aws_ami"" ""web"" {
  ##...
}

data ""aws_availability_zones"" ""available"" {
  ##...
}

resource ""aws_instance"" ""web"" {
  ami               = data.aws_ami.web.id
  availability_zone = data.aws_availability_zones.available.names[0]
  ##...
}
```

----------------------------------------

TITLE: Core Terraform CLI Commands
DESCRIPTION: Documentation for the essential Terraform command-line interface (CLI) commands used in the core workflow: `init` for initializing a working directory, `plan` for previewing changes, and `apply` for provisioning infrastructure.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform init
  - Initializes a working directory containing Terraform configuration files.
  - Downloads and installs providers and modules.
  - Must be run before `terraform plan` or `terraform apply`.
  - Output: ""Terraform has been successfully initialized!""

terraform plan
  - Generates an execution plan, showing what actions Terraform will take to achieve the desired state.
  - Does not make any changes to real infrastructure.
  - Useful for reviewing changes before applying them.
  - Output: ""An execution plan has been generated and is shown below.""

terraform apply
  - Executes the actions proposed in a Terraform plan to provision or update infrastructure.
  - Requires explicit confirmation ('yes') to proceed.
  - Output: ""Apply complete! Resources: X added, Y changed, Z destroyed.""
```

----------------------------------------

TITLE: Using a Terraform Registry Module
DESCRIPTION: This HCL example demonstrates how to reference and use a module published on the Terraform Registry within a Terraform configuration. It specifies the module source using the `hashicorp/consul/aws` identifier, allowing Terraform to automatically download and utilize the module.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/publish.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
module ""consul"" {
  source = ""hashicorp/consul/aws""
}
```

----------------------------------------

TITLE: HCL setunion Function Example
DESCRIPTION: An example demonstrating the practical application of the `setunion` function in HCL. It shows how to combine three distinct sets of strings (`[""a"", ""b""]`, `[""b"", ""c""]`, and `[""d""]`) into a single union set, illustrating that duplicate elements are removed and the resulting order is not preserved.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setunion.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> setunion([""a"", ""b""], [""b"", ""c""], [""d""])
[
  ""d"",
  ""b"",
  ""c"",
  ""a"",
]
```

----------------------------------------

TITLE: Illustrate `contains` function usage in HCL
DESCRIPTION: These examples demonstrate how the `contains` function evaluates to `true` when a value is present in a list and `false` when it is not, showcasing its behavior with different inputs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/contains.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> contains([""a"", ""b"", ""c""], ""a"")
true
> contains([""a"", ""b"", ""c""], ""d"")
false
```

----------------------------------------

TITLE: Chaining `for_each` for related AWS resources in Terraform
DESCRIPTION: This example demonstrates how to use `for_each` to create multiple AWS VPCs based on an input map and then chain that `for_each` into another resource (`aws_internet_gateway`) to create a corresponding internet gateway for each VPC. It illustrates how `each.value` adapts to the context of the `for_each` iteration, allowing for concise management of related resource instances.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
variable ""vpcs"" {
  type = map(object({
    cidr_block = string
  }))
}

resource ""aws_vpc"" ""example"" {
  # One VPC for each element of var.vpcs
  for_each = var.vpcs

  # each.value here is a value from var.vpcs
  cidr_block = each.value.cidr_block
}

resource ""aws_internet_gateway"" ""example"" {
  # One Internet Gateway per VPC
  for_each = aws_vpc.example

  # each.value here is a full aws_vpc object
  vpc_id = each.value.id
}

output ""vpc_ids"" {
  value = {
    for k, v in aws_vpc.example : k => v.id
  }

  # The VPCs aren't fully functional until their
  # internet gateways are running.
  depends_on = [aws_internet_gateway.example]
}
```

----------------------------------------

TITLE: Define an AWS EC2 Instance Resource in HCL
DESCRIPTION: This HCL code defines an AWS EC2 instance resource named 'example' with specified AMI, instance type, and two EBS block devices. It demonstrates a typical Terraform resource declaration, including nested blocks.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  ami           = ""ami-abc123""
  instance_type = ""t2.micro""

  ebs_block_device {
    device_name = ""sda2""
    volume_size = 16
  }
  ebs_block_device {
    device_name = ""sda3""
    volume_size = 20
  }
}
```

----------------------------------------

TITLE: Query Specific Terraform Outputs
DESCRIPTION: Examples of querying individual output variables by name using `terraform output`, showing how sensitive values are revealed when queried directly and how non-sensitive values are returned.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#_snippet_3

LANGUAGE: shell
CODE:
```
$ terraform output password
password = notasecurepassword
```

LANGUAGE: shell
CODE:
```
$ terraform output lb_address
""my-app-alb-1657023003.us-east-1.elb.amazonaws.com""
```

LANGUAGE: shell
CODE:
```
$ terraform output instance_ips
instance_ips = [
  ""54.43.114.12"",
  ""52.122.13.4"",
  ""52.4.116.53""
]
```

----------------------------------------

TITLE: Example: Replace Terraform AWS Provider
DESCRIPTION: Demonstrates how to use `terraform state replace-provider` to switch the `hashicorp/aws` provider to a custom `acme/aws` provider hosted at a private registry.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/replace-provider.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
$ terraform state replace-provider hashicorp/aws registry.acme.corp/acme/aws
```

----------------------------------------

TITLE: Step-by-Step Process for Terraform Expression Evaluation
DESCRIPTION: Outlines the five main steps involved in the Terraform language runtime's expression evaluation, from initial analysis to final value assembly and error handling.
SOURCE: https://github.com/hashicorp/terraform/blob/main/internal/stacks/stackruntime/internal/stackeval/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Terraform Expression Evaluation Process:

1. Analyze Expression:
   - Action: Find all HCL symbol references (`hcl.Traversal` values) within the expression(s).

2. Parse Reference (stackaddrs):
   - Action: Use `stackaddrs.ParseReference` to elevate the reference into a higher-level address type, wrapped in a `stackaddrs.Reference`.
   - Failure Condition: Syntactically invalid references.
   - Limitation: Cannot detect references to non-existent objects due to lack of dynamic symbol table access.

3. Resolve Reference (EvaluationScope):
   - Action: Pass the `stackaddrs.Reference` to the `EvaluationScope` implementation.
   - Method Used: `EvaluationScope.ResolveExpressionReference`.
   - Outcome: If the address refers to a declared object, that object (implementing `Referenceable`) is returned.
   - Failure Condition: Syntactically valid reference refers to something not declared.

4. Get Reference Value (Referenceable):
   - Action: Call `ExprReferenceValue` on each collected `Referenceable` object, passing the current `EvalPhase`.
   - Outcome: The method must return a `cty.Value`. If a concrete value is unavailable, an unknown value (e.g., `cty.DynamicVal`) should be returned to allow continued evaluation for diagnostics.

5. Assemble and Evaluate (hcl.EvalContext):
   - Action: Assemble all collected values into an `hcl.EvalContext`, attach available functions, and evaluate the original expression within this context.
   - Failure Condition: Expression itself is invalid (e.g., type/value expectation mismatch, like adding non-numbers).
```

----------------------------------------

TITLE: Terraform Test Cleanup Message
DESCRIPTION: Example JSON output for a `test_cleanup` message, detailing resources that Terraform could not destroy after test execution. These resources are listed as `failed_resources` and require manual cleanup by the user.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_24

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""Terraform left some resources in state after executing main.tftest.hcl, they need to be cleaned up manually."",
  ""@module"": ""terraform.ui"",
  ""@testfile"": ""validation.tftest.hcl"",
  ""@testrun"": ""successful_validation"",
  ""@timestamp"": ""2023-08-09T16:12:30.724407+02:00"",
  ""test_cleanup"": {
    ""failed_resources"": [
      {
        ""instance"": ""aws_instance.primary""
      },
      {
         ""instance"": ""aws_instance.secondary""
      }
    ]
  },
  ""type"": ""test_cleanup""
}
```

----------------------------------------

TITLE: Run Local Content Validation for Terraform Documentation
DESCRIPTION: This command allows contributors to validate content changes locally against a predefined set of rules before submitting a pull request. It helps identify and address issues early, ensuring documentation quality.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
npm run content-check
```

----------------------------------------

TITLE: Dynamic Component Management and Removal with `for_each` in HCL
DESCRIPTION: Illustrates a comprehensive pattern for dynamically defining and removing components in Terraform Stacks using the `for_each` meta-argument. This example shows how to manage components across multiple regions and systematically remove them by shifting entries between variables.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#_snippet_11

LANGUAGE: HCL
CODE:
```
variable ""regions"" {
    type = set(string)
}

# Adding a region to this variable instructs HCP Terraform to remove it.
variable ""removed_regions"" {
    type = set(string)
}

component ""s3_buckets"" {
    source = ""./s3""

    for_each = var.regions

    providers = {
        aws = provider.aws.config[each.value]
    }

    variables = {
        region = each.value
    }
}

removed {
    source = ""./s3""
    # Iterate and remove the regions in our new removed_regions variable.
    for_each = var.removed_regions

    from = component.s3_buckets[each.value]
    providers = {
        aws = provider.aws.config[each.value]
    }
}
```

----------------------------------------

TITLE: Correct Terraform Resource Naming Convention
DESCRIPTION: Shows an example of good resource naming in Terraform, adhering to best practices by using a descriptive noun, underscores for separation, and excluding the resource type from the identifier, enclosed in double quotes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_6

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""web_api"" {...}
```

----------------------------------------

TITLE: Example `plantimestamp` Function Call
DESCRIPTION: Demonstrates a basic call to the `plantimestamp()` function and its expected output, a UTC timestamp string in RFC 3339 format, as seen in a console.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/plantimestamp.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
> plantimestamp()
2018-05-13T07:44:12Z
```

----------------------------------------

TITLE: Terraform filesha1 CLI Usage Example
DESCRIPTION: Demonstrates how to use the `filesha1` function directly in the Terraform CLI to compute the SHA-1 hash of a specified file and displays the resulting hexadecimal hash.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha1.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
$ filesha1(""example.txt"")
d3486ae9136e7856bc42212385ea797094475802
```

----------------------------------------

TITLE: Declaring Derived Local Values in HCL
DESCRIPTION: This example illustrates how local values can be derived from other resources, variables, or even other local values using expressions. It shows combining resource attributes and constructing an object with references to other locals.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/locals.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
locals {
  # Ids for multiple sets of EC2 instances, merged together
  instance_ids = concat(aws_instance.blue.*.id, aws_instance.green.*.id)
}

locals {
  # Common tags to be assigned to all resources
  common_tags = {
    Service = local.service_name
    Owner   = local.owner
  }
}
```

----------------------------------------

TITLE: Terraform `substr` Example: Negative Offset and Length
DESCRIPTION: Shows the use of negative offset to count from the end of the string and -1 length to return the remainder of the string.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
> substr(""hello world"", -5, -1)
world
```

----------------------------------------

TITLE: Initialize Terraform with Backend Configuration File
DESCRIPTION: Demonstrates how to initialize Terraform using a backend configuration file (e.g., `state.config`) to provide missing backend arguments for a partial configuration. This command instructs Terraform to read additional backend settings from the specified file.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
$ `terraform init -backend-config=""./state.config""`
```

----------------------------------------

TITLE: Example Usage of base64sha512 Function in Terraform HCL
DESCRIPTION: This snippet illustrates how to invoke the `base64sha512` function with the input string 'hello world'. The output demonstrates the resulting Base64-encoded SHA512 hash, showcasing the function's direct application within Terraform's configuration language.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/base64sha512.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> base64sha512(""hello world"")
MJ7MSJwS1utMxA9QyQLytNDtd+5RGnx6m808qG1M2G+YndNbxf9JlnDaNCVbRbDP2DDoH2Bdz33FVC6TrpzXbw==
```

----------------------------------------

TITLE: Call max() function in HCL
DESCRIPTION: Demonstrates the basic syntax for calling a built-in function within Terraform's HashiCorp Configuration Language (HCL). This example shows the `max` function used with multiple integer arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
max(5, 12, 9)
```

----------------------------------------

TITLE: Import Multiple Module Instances with `for_each`
DESCRIPTION: Illustrates how to use `for_each` within an `import` block to expand imports across multiple module instances. This example maps complex local data structures to specific module resource addresses, enabling dynamic import of resources managed by different module instances.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
locals {
  buckets = [
    {
      group = ""one""
      key   = ""bucket1""
      id    = ""one_1""
    },
    {
      group = ""one""
      key   = ""bucket2""
      id    = ""one_2""
    },
    {
      group = ""two""
      key   = ""bucket1""
      id    = ""two_1""
    },
    {
      group = ""two""
      key   = ""bucket2""
      id    = ""two_2""
    }
  ]
}

import {
  for_each = local.buckets
  id = each.value.id
  to = module.group[each.value.group].aws_s3_bucket.this[each.value.key]
}
```

----------------------------------------

TITLE: Using the strcontains function in HCL
DESCRIPTION: This snippet illustrates the signature and practical examples of the `strcontains` function in HCL. It demonstrates how to check for the presence of a substring within a string, showing both true and false outcomes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/strcontains.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
strcontains(string, substr)
```

LANGUAGE: hcl
CODE:
```
> strcontains(""hello world"", ""wor"")
true
```

LANGUAGE: hcl
CODE:
```
> strcontains(""hello world"", ""wod"")
false
```

----------------------------------------

TITLE: Using for_each with a Set of Strings for AWS IAM Users
DESCRIPTION: This HCL example illustrates the use of the `for_each` meta-argument with a set of strings to create multiple AWS IAM user resources. Each string in the set becomes a unique user, with `each.key` (which is equivalent to `each.value` for sets) used for the user's name.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
resource ""aws_iam_user"" ""the-accounts"" {
  for_each = toset([""Todd"", ""James"", ""Alice"", ""Dottie""])
  name     = each.key
}
```

----------------------------------------

TITLE: Demonstrating trimprefix function in HCL
DESCRIPTION: Illustrates the behavior of the `trimprefix` function in HashiCorp Configuration Language (HCL). It shows how the function removes a specified prefix from the start of a string, and how it returns the original string if the prefix is not found.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimprefix.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> trimprefix(""helloworld"", ""hello"")
world
```

LANGUAGE: HCL
CODE:
```
> trimprefix(""helloworld"", ""cat"")
helloworld
```

LANGUAGE: HCL
CODE:
```
> trimprefix(""--hello"", ""-"")
-hello
```

----------------------------------------

TITLE: Terraform Provider Installation Method Types Reference
DESCRIPTION: This section provides a detailed reference for the supported provider installation method types within Terraform's `provider_installation` block. It describes the purpose, parameters, and specific behaviors of `direct`, `filesystem_mirror`, and `network_mirror` methods, including their respective configurations and considerations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
direct:
  - Description: Requests information about the provider directly from its origin registry and downloads over the network from the location that registry indicates.
  - Parameters: None
  - Usage Notes: This method expects no additional arguments. It's the default behavior and can be excluded for specific providers.

filesystem_mirror:
  - Description: Consults a directory on the local disk for copies of providers.
  - Parameters:
    - path (string, required): The directory to look in.
  - Supported Layouts:
    - Packed: HOSTNAME/NAMESPACE/TYPE/terraform-provider-TYPE_VERSION_TARGET.zip (distribution zip file)
    - Unpacked: HOSTNAME/NAMESPACE/TYPE/VERSION/TARGET (directory containing extracted files, allows symlinking)
  - Usage Notes: Multiple `filesystem_mirror` blocks can be included to specify several directories.

network_mirror:
  - Description: Consults a particular HTTPS server for copies of providers, regardless of which registry host they belong to.
  - Parameters:
    - url (string, required): The mirror base URL, must use `https:` scheme and end with a trailing slash.
  - Protocol: Implements the provider network mirror protocol.
  - Security Warning: Do not configure `network_mirror` URLs that you do not trust, as malicious content could be served despite TLS checks.
```

----------------------------------------

TITLE: Import AWS Instance into For_Each-Configured Terraform Resource
DESCRIPTION: These commands demonstrate how to import an existing AWS EC2 instance (identified by `i-abcd1234`) into a specific instance (`""example""`) of a Terraform `aws_instance` resource named `baz` that is configured with the `for_each` meta-argument. Different commands are provided for Linux/Mac/UNIX, PowerShell, and Windows `cmd.exe` due to quoting differences.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#_snippet_5

LANGUAGE: shell
CODE:
```
$ terraform import 'aws_instance.baz[""example""]' i-abcd1234
```

LANGUAGE: powershell
CODE:
```
$ terraform import 'aws_instance.baz[\""example\""]' i-abcd1234
```

LANGUAGE: cmd
CODE:
```
$ terraform import aws_instance.baz[\""example\""] i-abcd1234
```

----------------------------------------

TITLE: Importing a Terraform Resource into a Module
DESCRIPTION: This example demonstrates how to use the `import` block to bring an existing infrastructure resource into the state managed by a Terraform module. The `to` argument specifies the target resource within the module, and `id` provides the identifier of the existing resource.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#_snippet_5

LANGUAGE: HCL
CODE:
```
import {
  to = module.instances.aws_instance.example
  id = ""i-abcd1234""
}
```

----------------------------------------

TITLE: Example Usage of encode_expr with tfe_variable
DESCRIPTION: This HCL example demonstrates how to use the `encode_expr` function in conjunction with the `tfe_variable` resource. It shows how to encode complex local variables into Terraform expression syntax for HCP Terraform workspace variables, emphasizing the need to set `hcl = true`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-encode_expr.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
locals {
  workspace_vars = {
    example1 = ""Hello""
    example2 = [""A"", ""B""]
  }
}

resource ""tfe_variable"" ""test"" {
  for_each = local.workspace_vars

  category     = ""terraform""
  workspace_id = tfe_workspace.example.id

  key   = each.key
  value = provider::terraform::encode_expr(each.value)
  hcl   = true
}
```

----------------------------------------

TITLE: Applying Terraform Configuration for Infrastructure Import
DESCRIPTION: This shell output demonstrates the execution of the `terraform apply` command to import an existing `aws_iot_thing` resource. It shows the detailed planning phase, the actual import process, and the final confirmation of a successful import, indicating that the resource has been brought under Terraform management.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#_snippet_4

LANGUAGE: shell
CODE:
```
$ terraform apply

aws_iot_thing.bar: Preparing import... [id=foo]
aws_iot_thing.bar: Refreshing state... [id=foo]

Terraform will perform the following actions:

  # aws_iot_thing.bar will be imported
    resource ""aws_iot_thing"" ""bar"" {
        arn               = ""arn:aws:iot:eu-west-1:1234567890:thing/foo""
        attributes        = {}
        default_client_id = ""foo""
        id                = ""foo""
        name              = ""foo""
        version           = 1
    }

Plan: 1 to import, 0 to add, 0 to change, 0 to destroy.
aws_iot_thing.bar: Importing... [id=foo]
aws_iot_thing.bar: Import complete [id=foo]

Apply complete! Resources: 1 imported, 0 added, 0 changed, 0 destroyed.
```

----------------------------------------

TITLE: Define Terraform Output Variables
DESCRIPTION: Example HCL code defining various output variables, including a list of IPs, a single DNS address, and a sensitive password, for use with the `terraform output` command.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/output.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
output ""instance_ips"" {
  value = aws_instance.web.*.public_ip
}

output ""lb_address"" {
  value = aws_alb.web.public_dns
}

output ""password"" {
  sensitive = true
  value     = var.secret_password
}
```

----------------------------------------

TITLE: Terraform UI Resource Operation Messages and Hook Objects
DESCRIPTION: Describes various messages emitted during Terraform resource operations, such as 'apply_start', 'apply_progress', and 'apply_complete'. It details the common 'hook' object structure for these messages, including 'resource', 'action', 'id_key', 'id_value', and 'elapsed_seconds', along with JSON examples for 'apply_start' and 'apply_progress' messages.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Operation Message Types Overview:
  - apply_start: when starting to apply changes for a resource
  - apply_progress: periodically, showing elapsed time output
  - apply_complete: on successful operation completion
  - apply_errored: when an error is encountered during the operation
  - provision_start: when starting a provisioner step
  - provision_progress: on provisioner output
  - provision_complete: on successful provisioning
  - provision_errored: when an error is enountered during provisioning
  - refresh_start: when reading a resource during refresh
  - refresh_complete: on successful refresh
  - ephemeral_op_start: when starting an ephemeral resource operation
  - ephemeral_op_progress: periodically showing elapsed time output during ephemeral resource operation
  - ephemeral_op_complete: on successful ephemeral resource operation completion
  - ephemeral_op_errored: when an error is encountered during ephemeral resource operation

Common Hook Object Structure:
  All operation messages have a 'hook' object.
  resource: object - A reference to the resource object being operated on.

apply_start Message:
  Description: Emitted when Terraform begins applying changes for a specific resource.
  Hook Object Keys:
    resource: object - A resource object identifying the resource.
    action: string - The action to be taken for the resource. Values: noop, create, read, update, replace, delete.
    id_key: string (optional) - A key used to identify this instance of the resource, omitted when unknown.
    id_value: string (optional) - A value used to identify this instance of the resource, omitted when unknown.
  Example JSON apply_start Message:
  {
    ""@level"": ""info"",
    ""@message"": ""random_pet.animal: Creating..."",
    ""@module"": ""terraform.ui"",
    ""@timestamp"": ""2021-05-25T13:32:41.825308-04:00"",
    ""hook"": {
      ""resource"": {
        ""addr"": ""random_pet.animal"",
        ""module"": """",
        ""resource"": ""random_pet.animal"",
        ""implied_provider"": ""random"",
        ""resource_type"": ""random_pet"",
        ""resource_name"": ""animal"",
        ""resource_key"": null
      },
      ""action"": ""create""
    },
    ""type"": ""apply_start""
  }

apply_progress Message:
  Description: Emitted periodically during an apply operation to show elapsed time and ongoing progress.
  Hook Object Keys:
    resource: object - A resource object identifying the resource.
    action: string - The action being taken for the resource. Values: noop, create, read, update, replace, delete.
    elapsed_seconds: integer - Time elapsed since the apply operation started, expressed as an integer number of seconds.
  Example JSON apply_progress Message:
  {
    ""@level"": ""info"",
    ""@message"": ""null_resource.none[4]: Still creating... [30s elapsed]"",
    ""@module"": ""terraform.ui"",
    ""@timestamp"": ""2021-03-17T09:34:26.222465-04:00"",
    ""hook"": {
      ""resource"": {
        ""addr"": ""null_resource.none[4]"",
        ""module"": """",
        ""resource"": ""null_resource.none[4]"",
        ""implied_provider"": ""null"",
        ""resource_type"": ""null_resource"",
        ""resource_name"": ""none"",
        ""resource_key"": 4
      },
      ""action"": ""create"",
      ""elapsed_seconds"": 30
    },
    ""type"": ""apply_progress""
  }

apply_complete Message:
  Description: Emitted upon successful completion of an apply operation for a resource.
  Hook Object Keys:
    resource: object - A resource object identifying the resource.
    action: string - The action taken for the resource. Values: noop, create, read, update, replace, delete.
    id_key: string (optional) - A key used to identify this instance of the resource, omitted when unknown.
    id_value: string (optional) - A value used to identify this instance of the resource, omitted when unknown.
    elapsed_seconds: integer - Time elapsed since the apply operation started, expressed as an integer number of seconds.
```

----------------------------------------

TITLE: Display Current Terraform Workspace
DESCRIPTION: This example demonstrates how to use the `terraform workspace show` command to output the name of the currently selected Terraform workspace. The output shows 'development' as the active workspace, indicating the command's typical output format.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/show.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
$ terraform workspace show
development
```

----------------------------------------

TITLE: Convert mixed-type elements to a list using Terraform's tolist function
DESCRIPTION: This example illustrates how Terraform's `tolist` function handles an input containing mixed-type elements (strings and numbers). It converts all elements to the most general type, which is string in this case, to maintain type consistency within the resulting list.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tolist.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> tolist([""a"", ""b"", 3])
[
  ""a"",
  ""b"",
  ""3"",
]
```

----------------------------------------

TITLE: Define a basic heredoc string in Terraform
DESCRIPTION: Illustrates the basic syntax of a heredoc string in Terraform, using `<<EOT` to start and `EOT` on a new line to end, allowing multi-line content. The delimiter word can be any identifier.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
<<EOT
hello
world
EOT
```

----------------------------------------

TITLE: Define Multiple Terraform Local-Exec Provisioners
DESCRIPTION: This HCL example illustrates how to define multiple `local-exec` provisioners within a single `aws_instance` resource. Terraform executes these provisioners sequentially in the order they are defined in the configuration file.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...

  provisioner ""local-exec"" {
    command = ""echo first""
  }

  provisioner ""local-exec"" {
    command = ""echo second""
  }
}
```

----------------------------------------

TITLE: Normalize Complex Data Structures with Terraform try()
DESCRIPTION: This HCL example demonstrates how to use the `try` function to normalize a `yamldecode` result. It ensures that `name` is always a string (or null) and `groups` is always a list (or empty list), preventing errors from missing attributes and simplifying subsequent configuration references.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/try.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
locals {
  raw_value = yamldecode(file(""${path.module}/example.yaml""))
  normalized_value = {
    name   = tostring(try(local.raw_value.name, null))
    groups = try(local.raw_value.groups, [])
  }
}
```

----------------------------------------

TITLE: Terraform Test State Output JSON Example
DESCRIPTION: This JSON snippet illustrates the ""test_state"" message, emitted by ""terraform test"" in verbose mode for ""run"" blocks that completed an apply. It contains a subset of the Terraform state (""state_format_version"", ""root_module"", ""outputs"") and provider schemas (""provider_format_version"", ""provider_schemas""), mirroring ""terraform show -json"" and ""terraform providers schema -json"" outputs respectively.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_27

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""-verbose flag enabled, printing state"",
  ""@module"": ""terraform.ui"",
  ""@testfile"": ""validation.tftest.hcl"",
  ""@testrun"": ""successful_validation"",
  ""@timestamp"": ""2023-08-09T17:18:21.173008+02:00"",
  ""test_state"": {
    ""state_format_version"": ""1.0"",
    ""root_module"": {
      ""resources"": [
        {
          ""address"": ""aws_instance.primary"",
          ""mode"": ""managed"",
          ""type"": ""aws_instance"",
          ""name"": ""primary"",
          ""provider_name"": ""registry.terraform.io/hashicorp/aws"",
          ""schema_version"": 0,
          ""values"": {
            ""ami"": ""af84f887-e3eb-9e52-5f8b-8a2803734fd0""
          },
          ""sensitive_values"": {}
        }
      ]
    },
    ""provider_format_version"": ""1.0"",
    ""provider_schemas"": {
      ""registry.terraform.io/hashicorp/aws"": {
        ""provider"": {
          ""version"": 0
        },
        ""resource_schemas"": {
          ""aws_instance"": {
            ""version"": 0,
            ""block"": {
              ""attributes"": {
                ""ami"": {
                  ""type"": ""string"",
                  ""description_kind"": ""plain"",
                  ""required"": true
                }
              },
              ""description_kind"": ""plain""
            }
          }
        }
      }
    }
  },
  ""type"": ""test_state""
}
```

----------------------------------------

TITLE: Initialize Terraform with Command-Line Backend Configuration
DESCRIPTION: Demonstrates how to provide multiple backend configuration arguments directly on the `terraform init` command line. Each key-value pair is specified using a separate `-backend-config=""KEY=VALUE""` flag, allowing for dynamic configuration without files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#_snippet_8

LANGUAGE: bash
CODE:
```
$ terraform init \
    -backend-config=""address=demo.consul.io"" \
    -backend-config=""path=example_app/terraform_state"" \
    -backend-config=""scheme=https""
```

----------------------------------------

TITLE: Build Terraform with experimental features enabled
DESCRIPTION: This Go build command compiles the Terraform binary, using `ldflags` to set the `main.experimentsAllowed` variable to `yes`. This enables experimental features within the compiled binary, which are typically disabled by default. The `-w` and `-s` flags are included to optimize the binary size by removing debugging information and symbols.
SOURCE: https://github.com/hashicorp/terraform/blob/main/BUILDING.md#_snippet_1

LANGUAGE: Go
CODE:
```
go build -ldflags ""-w -s -X 'main.experimentsAllowed=yes'"" -o bin/ .
```

----------------------------------------

TITLE: Graphviz Diagram for Create Before Destroy (Replace All)
DESCRIPTION: Illustrates the dependency graph for resources A and B when resource A is configured with `create_before_destroy` and both resources require replacement. This diagram visualizes the altered order of creation and destruction operations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_6

LANGUAGE: Graphviz
CODE:
```
digraph replacement {
    subgraph create {
        rank=same;
        a [label=""A create""];
        b [label=""B create""];
        a -> b [dir=back];
    }
    subgraph destroy {
        rank=same;
        a_d [label=""A destroy""];
        b_d [label=""B destroy""];
        a_d -> b_d;
    }

    a -> a_d [dir=back];
    a -> b_d;
    b -> a_d [dir=back];
    b -> b_d;
}
```

----------------------------------------

TITLE: Importing a Terraform Resource with a Variable ID
DESCRIPTION: This example illustrates how to dynamically specify the ID of the resource to be imported by referencing a Terraform variable. This approach is useful when the resource ID is not known at design time or needs to be provided externally.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#_snippet_6

LANGUAGE: HCL
CODE:
```
import {
  to = aws_instance.example
  id = var.instance_id
}
```

----------------------------------------

TITLE: Terraform Credentials Helper Protocol (APIDOC)
DESCRIPTION: This section details the protocol for Terraform credentials helpers, outlining how Terraform interacts with external programs to manage API credentials. It covers the command-line invocation format, the JSON data exchange for tokens, and the specific behaviors for the `get` operation, including success and error handling.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Terraform Credentials Helper Protocol:

Invocation Format:
terraform-credentials-<helper_name> [helper_args] <verb> <hostname>

Credentials Representation:
JSON object with a ""token"" property:
{
  ""token"": ""example-token-value""
}

Supported Verbs:
- get: retrieve the credentials for the given hostname
- store: store new credentials for the given hostname
- forget: delete any stored credentials for the given hostname

Detailed Behavior for 'get' verb:

Command Example:
terraform-credentials-credstore --host=credstore.example.com get app.terraform.io

Expected Output and Exit Codes:
- Success (credentials found):
  - Output: JSON credentials object to stdout (e.g., {""token"": ""example-token-value""})
  - Exit Code: 0
- Success (no credentials found):
  - Output: Empty JSON object ""{}"" to stdout
  - Exit Code: 0
- Failure (unable to provide for any other reason):
  - Output: End-user-oriented plain text error message to stderr
  - Exit Code: Non-zero
```

----------------------------------------

TITLE: Terraform For Expression Equivalent of Legacy Splat
DESCRIPTION: Illustrates a `for` expression in Terraform that achieves the same behavior as the legacy attribute-only splat expression. This example clarifies how the indexing operation `[0]` is applied to the aggregated result of the iteration, rather than to individual elements during iteration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/splat.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
[for o in var.list : o.interfaces][0].name
```

----------------------------------------

TITLE: Terraform HCL: `one` function and the splat operator
DESCRIPTION: This HCL example illustrates the inverse relationship between the `one` function and the splat operator (`[*]`). It shows how `one` can convert a zero-or-one element list (created by splatting a potentially null variable) back into a single value that might be null.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/one.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
variable ""ec2_instance_type"" {
  description = ""The type of instance to create. If set to null, no instance will be created.""

  type    = string
  default = null
}

resource ""aws_instance"" ""example"" {
  count = length(var.ec2_instance_type[*])

  instance_type = var.ec2_instance_type
  # (other resource arguments...)
}

output ""instance_ip_address"" {
  value = one(aws_instance.example[*].private_ip)
}
```

----------------------------------------

TITLE: Terraform Provider Registry Service Discovery Response
DESCRIPTION: Example JSON response for Terraform's remote service discovery protocol. This indicates the base URL for the provider registry protocol (`providers.v1`), which is interpreted as relative to the discovery document itself.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""providers.v1"": ""/terraform/providers/v1/""
}
```

----------------------------------------

TITLE: Terraform `formatdate` Function Usage Examples
DESCRIPTION: Demonstrates how to use the `formatdate` function in Terraform to format timestamps according to custom specifications, including handling literal characters and escaping quotes within the format string.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/formatdate.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
formatdate(""h'h'mm"", ""2018-01-02T23:12:01-08:00"")
# Expected output: 23h12
```

LANGUAGE: HCL
CODE:
```
formatdate(""H 'o''clock'"", ""2018-01-02T23:12:01-08:00"")
# Expected output: 11 o'clock
```

----------------------------------------

TITLE: Defining a resource block with nested arguments and blocks in HCL
DESCRIPTION: Illustrates the hierarchical structure of a Terraform block, using a 'resource' block as an example. A block consists of a type, optional labels, and a body enclosed in curly braces. The body can contain further arguments and nested blocks, forming the core structure of Terraform configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/configuration.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  ami = ""abc123""

  network_interface {
    # ...
  }
}
```

----------------------------------------

TITLE: Reverse a list using the `reverse` function in Terraform HCL
DESCRIPTION: This example demonstrates how to use the `reverse` function in Terraform's configuration language to reverse the order of elements within a list. The input shows the function call with a sample list, and the output displays the resulting list with elements in reverse order.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/reverse.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> reverse([1, 2, 3])
[
  3,
  2,
  1,
]
```

----------------------------------------

TITLE: Terraform `format` Function and Formatting Verbs Reference
DESCRIPTION: Comprehensive documentation for the `format` function in Terraform HCL, detailing its signature, argument handling, and a complete list of supported formatting verbs with their respective behaviors and accepted types.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
format(spec, values...)
  - Description: Produces a string by formatting a number of other values according to a specification string. Similar to C's `printf`.
  - Parameters:
    - spec: string - The specification string including formatting verbs.
    - values: any... - One or more values to be formatted.
  - Behavior:
    - By default, '%' sequences consume successive arguments.
    - `[n]` sequence immediately before verb letter (e.g., `%[1]s`) explicitly chooses a particular value argument by its one-based index. Subsequent calls without explicit index proceed with `n`+1, `n`+2, etc.
    - Errors if impossible conversion, access more arguments than given, or unsupported format verb.

Formatting Verbs:
  - `%%`: Literal percent sign, consuming no value.
  - `%v`: Default formatting based on the value type. Accepts all types (null, list, map).
  - `%#v`: JSON serialization of the value, as with `jsonencode`. Accepts all types (null, list, map).
  - `%t`: Convert to boolean and produce `true` or `false`.
  - `%b`: Convert to integer number and produce binary representation.
  - `%d`: Convert to integer number and produce decimal representation.
  - `%o`: Convert to integer number and produce octal representation.
  - `%x`: Convert to integer number and produce hexadecimal representation with lowercase letters.
  - `%X`: Like `%x`, but use uppercase letters.
  - `%e`: Convert to number and produce scientific notation, like `-1.234456e+78`.
  - `%E`: Like `%e`, but use an uppercase `E` to introduce the exponent.
  - `%f`: Convert to number and produce decimal fraction notation with no exponent, like `123.456`.
  - `%g`: Like `%e` for large exponents or like `%f` otherwise.
  - `%G`: Like `%E` for large exponents or like `%f` otherwise.
  - `%s`: Convert to string and insert the string's characters.
  - `%q`: Convert to string and produce a JSON quoted string representation.
```

----------------------------------------

TITLE: HCL Orchestrate Block Complete Configuration Example
DESCRIPTION: Shows the complete structure of an `orchestrate` block in `tfdeploy.hcl`, including the rule type, name, and a `check` block with a condition and reason. This block is used to define automation rules for deployment plans.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
# auto_approve is the rule type
orchestrate ""auto_approve"" ""name_of_check"" {
  check {
    condition = <the condition that HCP Terraform evaluates>
    reason =""Provide the reason why this check failed.""
  }
}
```

----------------------------------------

TITLE: Defining a Terraform Input Variable as `set(string)`
DESCRIPTION: This example illustrates how to define an input variable with the type `set(string)`. This allows the variable to directly accept a set of strings, which can then be used with `for_each` without requiring an explicit `toset` conversion, simplifying module interfaces.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#_snippet_5

LANGUAGE: hcl
CODE:
```
variable ""subnet_ids"" {
  type = set(string)
}

resource ""aws_instance"" ""server"" {
  for_each = var.subnet_ids

  # (and the other arguments as above)
}
```

----------------------------------------

TITLE: Using concat function in Terraform
DESCRIPTION: Demonstrates how to use the `concat` function in Terraform to combine multiple lists into a single list. Examples include combining strings, numbers, and nested lists, as well as handling empty list arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/concat.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> concat([""a"", """"], [""b"", ""c""])
[
  ""a"",
  """",
  ""b"",
  ""c"",
]
```

LANGUAGE: Terraform
CODE:
```
# Can do multiple lists of mixed types, arguments can also be empty lists
concat([], [1, ""a""], [[3], ""c""])
[
  1,
  ""a"",
  [
    3,
  ],
  ""c"",
]
```

----------------------------------------

TITLE: Use `each` and `count` objects for resource iteration in Terraform
DESCRIPTION: Illustrates the use of `each` and `count` objects in blocks where `for_each` or `count` are set. This example demonstrates iterating over `vpc_cidrs` to create `aws_vpc` data sources and then using `each.key` and `each.value` to configure `aws_internet_gateway` resources, including a precondition check.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#_snippet_14

LANGUAGE: HCL
CODE:
```
variable ""vpc_cidrs"" {
  type = set(string)
}

data ""aws_vpc"" ""example"" {
  for_each = var.vpc_cidrs

  filter {
    name   = ""cidr""
    values = [each.key]
  }
}

resource ""aws_internet_gateway"" ""example"" {
  for_each = data.aws_vpc.example
  vpc_id = each.value.id

  lifecycle {
    precondition {
      condition     = data.aws_vpc.example[each.key].state == ""available""
      error_message = ""VPC ${each.key} must be available.""
    }
  }
}
```

----------------------------------------

TITLE: Terraform Passing Test Assertion Example
DESCRIPTION: This HCL test file (`.tftest.hcl`) demonstrates a passing test assertion. It verifies that the `local.true` variable, defined in `main.tf`, correctly equals 'true', providing a custom error message for failure.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_5

LANGUAGE: HCL
CODE:
```
# example_1.tftest.hcl
run ""true_is_true"" {
  assert {
    condition     = local.true == ""true""
    error_message = ""local.true did not match expected value""
  }
}
```

----------------------------------------

TITLE: Terraform remote-exec Provisioner Example with Inline Commands
DESCRIPTION: Demonstrates how to use the `remote-exec` provisioner within a Terraform `aws_instance` resource. It configures an SSH connection and executes inline commands on the remote host after resource creation, useful for basic bootstrapping or configuration tasks.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/remote-exec.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...

  # Establishes connection to be used by all
  # generic remote provisioners (i.e. file/remote-exec)
  connection {
    type     = ""ssh""
    user     = ""root""
    password = var.root_password
    host     = self.public_ip
  }

  provisioner ""remote-exec"" {
    inline = [
      ""puppet apply"",
      ""consul join ${aws_instance.web.private_ip}"",
    ]
  }
}
```

----------------------------------------

TITLE: Terraform `substr` Example: Length Exceeding String
DESCRIPTION: Demonstrates behavior when the specified length is greater than the remaining characters, returning all characters from the offset to the end.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
> substr(""hello world"", 6, 10)
world
```

----------------------------------------

TITLE: Filtering Terraform Resource Instances with for Expression
DESCRIPTION: Provides an example of filtering Terraform resource instances, such as `aws_instance`, using a `for` expression. This allows selecting specific instances based on their attributes, like `availability_zone`, which is common in infrastructure as code configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/matchkeys.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
[for x in aws_instance.example: x.id if x.availability_zone == ""us-east-1a""]
[
  ""i-abc123"",
  ""i-def456"",
]
```

----------------------------------------

TITLE: Terraform Test Run Status (In Progress)
DESCRIPTION: Example JSON output for a `terraform test` run block indicating that the test is currently in progress. This message includes the elapsed time for the ongoing test, providing real-time feedback on its execution.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_23

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""  \""successful_validation\""... in progress"",
  ""@module"": ""terraform.ui"",
  ""@testfile"": ""validation.tftest.hcl"",
  ""@testrun"": ""successful_validation"",
  ""@timestamp"": ""2023-08-09T16:12:30.724407+02:00"",
  ""test_run"": {
    ""path"": ""main.tftest.hcl"",
    ""run"": ""successful_validation"",
    ""progress"": ""running"",
    ""elapsed"": 2024
  },
  ""type"": ""test_run""
}
```

----------------------------------------

TITLE: Terraform Resource Addressing with For_Each Meta-Argument
DESCRIPTION: Illustrates how to define a resource with multiple instances using the `for_each` meta-argument based on a map, and how to reference specific instances using their corresponding map keys in resource addresses. This provides flexibility for managing resources with distinct configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#_snippet_5

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...
  for_each = tomap({
    ""terraform"": ""value1"",
    ""resource"":  ""value2"",
    ""indexing"":  ""value3"",
    ""example"":   ""value4"",
  })
}
```

LANGUAGE: HCL
CODE:
```
aws_instance.web[""example""]
```

----------------------------------------

TITLE: Use scp-like SSH syntax for Terraform Git module source
DESCRIPTION: This HCL example demonstrates the alternative 'scp-like' syntax for specifying a Git repository source over SSH. Unlike the `ssh://` prefixed URL, this format omits the scheme and uses a colon to separate the host from the repository path. This syntax is consistent with how Git itself interprets 'scp-like' addresses.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#_snippet_9

LANGUAGE: hcl
CODE:
```
module ""storage"" {
  source = ""git::username@example.com:storage.git""
}
```

----------------------------------------

TITLE: Terraform CLI: state push Command Reference
DESCRIPTION: Documents the `terraform state push` command, detailing its usage, options, and built-in safety checks for managing Terraform state files. It explains how to push local state to remote or local backends, including handling input from stdin and the implications of disabling safety checks.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/push.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform state push [options] PATH
  - Uploads a local state file to remote or local Terraform state.
  - Usage:
    - PATH: Specifies the path to the local state file.
    - If PATH is ""-"", state data is read from stdin.
  - Options:
    - -force: (Not recommended) Disables safety checks (differing lineage, higher remote serial). Overwrites destination state.
    - -ignore-remote-version: (HCP Terraform CLI integration or 'remote' backend only) Ignores remote version checks.
  - Safety Checks (prevented by default):
    - Differing lineage: Prevents push if the ""lineage"" value in the state differs, suggesting completely different states.
    - Higher remote serial: Prevents push if the ""serial"" value in the destination state is higher, suggesting newer data in remote.
  - Notes:
    - Terraform state files must be in UTF-8 format without a byte order mark (BOM).
    - Example for PowerShell: terraform state push | Set-Content terraform.tfstate
```

----------------------------------------

TITLE: Example Terraform Configuration for Type Error Demonstration
DESCRIPTION: This HCL code defines a variable and a local, then attempts a conditional assignment in an output. This setup is designed to produce a type inconsistency error, which the `type` function can then help diagnose.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/type.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
variable ""list"" {
  default = []
}

locals {
  default_list = [
    {
      foo = ""bar""
      map = { bleep = ""bloop"" }
    },
    {
      beep = ""boop""
    },
  ]
}

output ""list"" {
  value = var.list != [] ? var.list : local.default_list
}
```

----------------------------------------

TITLE: Terraform `substr` Example: Unicode Characters
DESCRIPTION: Illustrates how the `substr` function handles Unicode characters, counting offsets and lengths based on characters rather than bytes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/substr.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
> substr(""🤔🤷"", 0, 1)
🤔
```

----------------------------------------

TITLE: Terraform Import Block Example
DESCRIPTION: Demonstrates how to use an `import` block in Terraform to bring an existing AWS EC2 instance under Terraform's management. The `import` block specifies the target resource address (`to`) and the external resource's identifier (`id`), alongside its corresponding `resource` block definition.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
import {
  to = aws_instance.example
  id = ""i-abcd1234""
}

resource ""aws_instance"" ""example"" {
  name = ""hashi""
  # (other resource arguments...)
}
```

----------------------------------------

TITLE: Terraform Module Usage with Existing AMI Data Source
DESCRIPTION: This HCL snippet illustrates how to consume a Terraform module when the required AMI already exists. It uses an 'aws_ami' data source to retrieve information about an existing AMI based on owner and tags, then passes the output of this data source to the 'ami' input variable of the 'example' module.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#_snippet_5

LANGUAGE: HCL
CODE:
```
# Or, in situations where the AMI already exists:

data ""aws_ami"" ""example"" {
  owner = ""9999933333""

  tags = {
    application = ""example-app""
    environment = ""dev""
  }
}

module ""example"" {
  source = ""./modules/example""

  ami = data.aws_ami.example
}
```

----------------------------------------

TITLE: Using terraform_data as a container for provisioners
DESCRIPTION: This example illustrates `terraform_data` acting as a placeholder for arbitrary actions executed by a provisioner. It uses `triggers_replace` to ensure the provisioner runs when specified resource IDs change, effectively replacing the functionality of the deprecated `null_resource` for this use case.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/terraform-data.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...
}

resource ""aws_instance"" ""database"" {
  # ...
}

# A use-case for terraform_data is as a do-nothing container
# for arbitrary actions taken by a provisioner.
resource ""terraform_data"" ""bootstrap"" {
  triggers_replace = [
    aws_instance.web.id,
    aws_instance.database.id
  ]

  provisioner ""local-exec"" {
    command = ""bootstrap-hosts.sh""
  }
}
```

----------------------------------------

TITLE: Terraform Stacks CLI: Core Commands
DESCRIPTION: Documentation for key commands of the `terraform-stacks-cli`, including `init` for dependency management and `validate` for configuration syntax and type checking.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstacks-cli.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
tfstacks init
  - Description: Attempts to download any dependencies your Stack configuration requires.
  - Behavior: If the command cannot find a dependency, it warns you of the reason why and installs a false dependency in the real one's place to unblock any future validation. Missing dependencies are not validated.
  - Usage Example:
    $ tfstacks init

tfstacks validate
  - Description: Loads your Stack configuration and validates that your stack’s syntax and static types are correct.
  - Recommendation: Run this command whenever you change your Stack configuration.
  - Usage Example:
    $ tfstacks validate
```

----------------------------------------

TITLE: Get Terraform Version as JSON
DESCRIPTION: Illustrates how to use the `-json` flag with `terraform version` to output version details in a machine-readable JSON format, which excludes upgrade and security information.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/version.mdx#_snippet_2

LANGUAGE: shellsession
CODE:
```
$ terraform version -json
{
  ""terraform_version"": ""0.15.0"",
  ""platform"": ""darwin_amd64"",
  ""provider_selections"": {
    ""registry.terraform.io/hashicorp/null"": ""3.0.0""
  },
  ""terraform_outdated"": true
}
```

----------------------------------------

TITLE: Illustrating Correct Terraform Create Before Destroy Replacement
DESCRIPTION: This DOT graph visualizes the correct dependency resolution for Terraform's `create_before_destroy` lifecycle attribute. It demonstrates how reversing incoming edges to all preceding resources (`A destroy`) resolves cycles, ensuring proper order of operations and preventing issues when `create_before_destroy` is inherited.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_10

LANGUAGE: DOT
CODE:
```
digraph replacement {
    subgraph create {
        rank=same;
        a [label=""A create""];
        b [label=""B create""];
        a -> b [dir=back];
    }
    subgraph destroy {
        rank=same;
        a_d [label=""A destroy""];
        b_d [label=""B destroy""];
        a_d -> b_d;
    }

    a -> a_d [dir=back];
    a -> b_d [dir=back, style=dotted];
    b -> a_d [dir=back, style=dotted];
    b -> b_d [dir=back];
}
```

----------------------------------------

TITLE: Terraform Provider Network Mirror Protocol URL Convention
DESCRIPTION: This section specifies the URL conventions for the Terraform Provider Network Mirror Protocol. It describes how URL paths are structured, distinguishing between literal segments and dynamic placeholders, and provides an example pattern for provider resolution.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Provider Network Mirror Protocol URL Convention:

All URLs are relative to the configured base URL (e.g., `https://terraform.example.com/providers/`).

URL Path Structure:
  - Path portions prefixed with a colon (e.g., `:hostname`, `:namespace`, `:type`) are placeholders for dynamically-selected values.
  - Other path portions are literal strings (e.g., `index.json`).

Example URL Pattern:
  - `:hostname/:namespace/:type/index.json`
    - `:hostname`: Represents the provider's origin registry hostname (e.g., `registry.terraform.io`).
    - `:namespace`: Represents the provider's namespace (e.g., `hashicorp`).
    - `:type`: Represents the provider's type (e.g., `aws`).
```

----------------------------------------

TITLE: Terraform Failing Test Assertion Example
DESCRIPTION: This HCL test file (`.tftest.hcl`) illustrates a failing test assertion. It attempts to verify that `local.false` equals 'false', which is incorrect based on its definition in `main.tf`, triggering the specified error message.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_6

LANGUAGE: HCL
CODE:
```
# example_2.tftest.hcl
run ""false_is_false"" {
  assert {
    condition     = local.false == ""false""
    error_message = ""local.false did not match expected value""
  }
}
```

----------------------------------------

TITLE: Terraform UI Outputs Message Structure
DESCRIPTION: Documents the JSON structure of the 'outputs' message emitted by Terraform after a successful plan or apply. It details the keys within the 'outputs' object, including 'action', 'value', 'type', and 'sensitive', and provides a full JSON example of such a message.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Outputs Message Type:
  Description: Contains the values of all root module output values after a successful plan or apply.
  Structure:
    outputs: object
      keys: output names
      values: object
        action: string (for planned outputs) - Values: noop, create, update, delete
        value: any (for applied outputs) - The value of the output, encoded in JSON
        type: string (for applied outputs) - Detected HCL type of the output value
        sensitive: boolean - true if the output is sensitive and should be hidden from UI by default.

Example JSON Output Message:
{
  ""@level"": ""info"",
  ""@message"": ""Outputs: 1"",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2021-05-25T13:32:41.869280-04:00"",
  ""outputs"": {
    ""pets"": {
      ""sensitive"": false,
      ""type"": ""string"",
      ""value"": ""smart-lizard""
    }
  },
  ""type"": ""outputs""
}
```

----------------------------------------

TITLE: Terraform Resource with Dynamic Nested Block
DESCRIPTION: This HCL example demonstrates the use of a `dynamic` block to generate multiple `setting` nested blocks within an AWS Elastic Beanstalk environment resource. It uses `for_each` to iterate over a variable and `content` to define the attributes for each dynamically created block, showcasing how to construct flexible configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/dynamic-blocks.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
resource ""aws_elastic_beanstalk_environment"" ""tfenvtest"" {
  name                = ""tf-test-name""
  application         = aws_elastic_beanstalk_application.tftest.name
  solution_stack_name = ""64bit Amazon Linux 2018.03 v2.11.4 running Go 1.12.6""

  dynamic ""setting"" {
    for_each = var.settings
    content {
      namespace = setting.value[""namespace""]
      name = setting.value[""name""]
      value = setting.value[""value""]
    }
  }
}
```

----------------------------------------

TITLE: Terraform Test Plan Message (Verbose Mode)
DESCRIPTION: Example JSON output for a `test_plan` message, emitted when `terraform test` is run in verbose mode. This message contains detailed information about the planned infrastructure changes, including resource additions/modifications and the relevant provider schemas.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_26

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""-verbose flag enabled, printing plan"",
  ""@module"": ""terraform.ui"",
  ""@testfile"": ""validation.tftest.hcl"",
  ""@testrun"": ""successful_validation"",
  ""@timestamp"": ""2023-08-09T17:10:06.211942+02:00"",
  ""test_plan"": {
    ""plan_format_version"": ""1.2"",
    ""resource_changes"": [
      {
        ""address"": ""aws_instance.primary"",
        ""mode"": ""managed"",
        ""type"": ""aws_instance"",
        ""name"": ""primary"",
        ""provider_name"": ""registry.terraform.io/hashicorp/aws"",
        ""change"": {
          ""actions"": [
            ""create""
          ],
          ""before"": null,
          ""after"": {
            ""ami"": ""af84f887-e3eb-9e52-5f8b-8a2803734fd0""
          },
          ""after_unknown"": {},
          ""before_sensitive"": false,
          ""after_sensitive"": {}
        }
      }
    ],
    ""provider_format_version"": ""1.0"",
    ""provider_schemas"": {
      ""registry.terraform.io/hashicorp/aws"": {
        ""provider"": {
          ""version"": 0
        },
        ""resource_schemas"": {
          ""aws_instance"": {
            ""version"": 0,
            ""block"": {
              ""attributes"": {
                ""ami"": {
                  ""type"": ""string"",
                  ""description_kind"": ""plain"",
                  ""required"": true
                }
              },
              ""description_kind"": ""plain""
            }
          }
        }
      }
    }
  },
  ""type"": ""test_plan""
}
```

----------------------------------------

TITLE: Execute PowerShell Command with Terraform local-exec Provisioner
DESCRIPTION: Shows how to configure the `local-exec` provisioner to use PowerShell as an interpreter. This snippet runs a PowerShell command to get the current date and redirect its output to `completed.txt`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
resource ""terraform_data"" ""example2"" {
  provisioner ""local-exec"" {
    command = ""Get-Date > completed.txt""
    interpreter = [""PowerShell"", ""-Command""]
  }
}
```

----------------------------------------

TITLE: List All Terraform State Resources
DESCRIPTION: Demonstrates how to list all resources, including modules, present in the Terraform state file using the `terraform state list` command without any filters.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/list.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
$ terraform state list
aws_instance.foo
aws_instance.bar[0]
aws_instance.bar[1]
module.elb.aws_elb.main
```

----------------------------------------

TITLE: Terraform Workspace New Command Reference
DESCRIPTION: Detailed documentation for the `terraform workspace new` command, outlining its syntax, parameters, and behavior for creating new Terraform workspaces. It covers options for locking, timeout, and initializing from an existing state file.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/new.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform workspace new [OPTIONS] NAME [DIR]
  - Creates a new workspace with the given name.
  - A workspace with this name must not already exist.
  - If the -state flag is given, the state specified by the given path will be copied to initialize the state for this new workspace.
  - Parameters:
    - NAME: The name of the new workspace. (string, required)
    - DIR: (Optional) The directory where the workspace will be created. (string)
    - OPTIONS:
      - -lock=false: Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace. (boolean, default: true)
      - -lock-timeout=DURATION: Duration to retry a state lock. Default 0s. (duration, default: 0s)
      - -state=path: Path to an existing state file to initialize the state of this environment. (string)
```

----------------------------------------

TITLE: Terraform Template: Generate YAML with yamlencode
DESCRIPTION: This example illustrates the use of the `yamlencode` function inside a Terraform template. It shows how to convert a Terraform expression, including a `for` loop for list generation, into a valid YAML string, handling all necessary formatting automatically.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#_snippet_4

LANGUAGE: Terraform
CODE:
```
${yamlencode({
  ""backends"": [for addr in ip_addrs : ""${addr}:${port}""],
})}
```

----------------------------------------

TITLE: Assign Terraform Variables via Command Line
DESCRIPTION: Shows how to pass individual variable values to Terraform commands (`plan`, `apply`) using the `-var` option. Examples include assigning string, list, and map values, demonstrating different shell quoting for complex types.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_10

LANGUAGE: shell
CODE:
```
terraform apply -var=""image_id=ami-abc123""
terraform apply -var='image_id_list=[""ami-abc123"",""ami-def456""]' -var=""instance_type=t2.micro""
terraform apply -var='image_id_map={""us-east-1"":""ami-abc123"",""us-east-2"":""ami-def456""}'
```

----------------------------------------

TITLE: Defining Terraform Variable in .tfvars File
DESCRIPTION: Provides an example of defining a variable value in a `.tfvars` file. This demonstrates how Terraform reads variable assignments from dedicated variable definition files, which is a common practice for managing input values.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_18

LANGUAGE: hcl
CODE:
```
mosse = ""Moose""
```

----------------------------------------

TITLE: Comparing format function with HCL Template Interpolation
DESCRIPTION: Illustrates how the `format` function can achieve similar results to HCL's template interpolation for simple variable substitution, highlighting that interpolation is often more readable.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
> format(""Hello, %s!"", var.name)
Hello, Valentina!
> ""Hello, ${var.name}!""
Hello, Valentina!
```

----------------------------------------

TITLE: Illustrating Terraform Lock File Checksum Addition with Diff
DESCRIPTION: This diff snippet shows an example of a `terraform.lock.hcl` file update, specifically highlighting the addition of a new `h1:` checksum to the `hashes` array for a provider. It demonstrates how Terraform records new checksums as it learns about them, reflecting a transition between hashing schemes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/files/dependency-lock.mdx#_snippet_4

LANGUAGE: diff
CODE:
```
--- .terraform.lock.hcl	2020-10-07 17:24:23.397892140 -0700
+++ .terraform.lock.hcl	2020-10-07 17:24:57.423130253 -0700
@@ -10,6 +10,7 @@
   version     = ""2.1.0""
   constraints = ""~> 2.1.0""
   hashes = [
+    ""h1:1xvaS5D8B8t6J6XmXxX8spo97tAzjhacjedFX1B47Fk="",
     ""h1:EOJImaEaVThWasdqnJjfYc6/P8N/MRAq1J3avx5ZbV4="",
     ""zh:0015b491cf9151235e57e35ea6b89381098e61bd923f56dffc86026d58748880"",
     ""zh:4c5682ba1e0fc7e2e602d3f103af1638f868c31fe80cc1a884a97f6dad6e1c11"",
```

----------------------------------------

TITLE: Example Usage of Terraform Test Run Blocks
DESCRIPTION: Demonstrates how to define and configure `run` blocks within a Terraform test file (`.tftest.hcl`), including parallel execution settings, variable definitions, and assertions. It shows how to implicitly and explicitly control parallel execution for individual run blocks.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#_snippet_5

LANGUAGE: hcl
CODE:
```
# with_config.tftest.hcl
test {
  parallel = true
}

variables {
  bucket_prefix = ""test""
}

run ""first"" {
  assert {
    condition     = aws_s3_bucket.bucket.bucket == ""test-bucket""
    error_message = ""S3 bucket name did not match expected""
  }
}

run ""second"" {
  assert {
    condition     = aws_s3_bucket.bucket.bucket == ""test-bucket""
    error_message = ""S3 bucket name did not match expected""
  }
}

run ""third"" {
  parallel = false
  assert {
    condition     = aws_s3_bucket.bucket.bucket == ""test-bucket""
    error_message = ""S3 bucket name did not match expected""
  }
}
```

----------------------------------------

TITLE: Decoding YAML strings with Terraform's yamldecode function
DESCRIPTION: Examples demonstrating the `yamldecode` function's behavior, including simple string decoding, boolean parsing, handling of YAML anchors, and error cases for cyclic references and unsupported tags.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/yamldecode.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
yamldecode(""hello: world"")
{
  ""hello"" = ""world""
}
```

LANGUAGE: Terraform
CODE:
```
yamldecode(""true"")
true
```

LANGUAGE: Terraform
CODE:
```
yamldecode(""{a: &foo [1, 2, 3], b: *foo}"")
{
  ""a"" = [
    1,
    2,
    3,
  ]
  ""b"" = [
    1,
    2,
    3,
  ]
}
```

LANGUAGE: Terraform
CODE:
```
yamldecode(""{a: &foo [1, *foo, 3]}"")

Error: Error in function call

Call to function ""yamldecode"" failed: cannot refer to anchor ""foo"" from inside
its own definition.
```

LANGUAGE: Terraform
CODE:
```
yamldecode(""{a: !not-supported foo}"")

Error: Error in function call

Call to function ""yamldecode"" failed: unsupported tag ""!not-supported"".
```

----------------------------------------

TITLE: Apply title() function to a string in Terraform
DESCRIPTION: Demonstrates the usage of the `title` function in Terraform's configuration language to capitalize the first letter of each word in a given string. The example shows the input 'hello world' and its corresponding output 'Hello World' as it would appear in a Terraform console.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/title.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
> title(""hello world"")
Hello World
```

----------------------------------------

TITLE: Compose Terraform modules with flat hierarchy in HCL
DESCRIPTION: This HCL example illustrates module composition in Terraform, advocating for a flat module tree. It shows how a `consul_cluster` module receives its network dependencies (`vpc_id`, `subnet_ids`) from a `network` module, demonstrating how modules can be assembled to build larger systems.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
module ""network"" {
  source = ""./modules/aws-network""

  base_cidr_block = ""10.0.0.0/8""
}

module ""consul_cluster"" {
  source = ""./modules/aws-consul-cluster""

  vpc_id     = module.network.vpc_id
  subnet_ids = module.network.subnet_ids
}
```

----------------------------------------

TITLE: Using for_each with a Set of Strings for Terraform Modules
DESCRIPTION: This HCL example demonstrates how to use the `for_each` meta-argument with a set of strings to instantiate a child module multiple times. The first block (`my_buckets.tf`) defines the module call, passing `each.key` as part of the bucket name. The second block (`publish_bucket/bucket-and-cloudfront.tf`) shows the module's internal definition, where `var.name` receives the value from the calling module, allowing each instance to have a unique bucket name.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
# my_buckets.tf
module ""bucket"" {
  for_each = toset([""assets"", ""media""])
  source   = ""./publish_bucket""
  name     = ""${each.key}_bucket""
}

# publish_bucket/bucket-and-cloudfront.tf
variable ""name"" {} # this is the input parameter of the module

resource ""aws_s3_bucket"" ""example"" {
  # Because var.name includes each.key in the calling
  # module block, its value will be different for
  # each instance of this module.
  bucket = var.name

  # ...
}

resource ""aws_iam_user"" ""deploy_user"" {
  # ...
}
```

----------------------------------------

TITLE: Referencing a data-only module in Terraform
DESCRIPTION: This HCL example demonstrates how to call a data-only module (e.g., 'join-network-aws') to retrieve information about existing infrastructure, such as network details. The outputs from this data-only module can then be consumed by other modules (e.g., 'aws-k8s-cluster') that require this shared information, promoting reusability and abstraction.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/composition.mdx#_snippet_11

LANGUAGE: HCL
CODE:
```
module ""network"" {
  source = ""./modules/join-network-aws""

  environment = ""production""
}

module ""k8s_cluster"" {
  source = ""./modules/aws-k8s-cluster""

  subnet_ids = module.network.aws_subnet_ids
}
```

----------------------------------------

TITLE: Basic String and Integer Formatting with Terraform's format function
DESCRIPTION: Demonstrates basic usage of the `format` function in HCL for string and integer substitution, similar to `printf`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
> format(""Hello, %s!"", ""Ander"")
Hello, Ander!
> format(""There are %d lights"", 4)
There are 4 lights
```

----------------------------------------

TITLE: HCL log and ceil Functions for Binary Digits Calculation
DESCRIPTION: This example illustrates a practical application of combining the `log` and `ceil` functions in HCL. It demonstrates how to determine the minimum number of binary digits necessary to represent a given count of distinct values, showcasing their utility in numerical computations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/log.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
ceil(log(15, 2))
ceil(log(16, 2))
ceil(log(17, 2))
```

----------------------------------------

TITLE: Terraform Resource Object Structure
DESCRIPTION: Defines the structure of the `resource` object used in Terraform UI messages to identify a resource address. It details each key and its purpose, including `addr`, `module`, `resource`, `resource_type`, `resource_name`, `resource_key`, and `implied_provider`, along with an example.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_20

LANGUAGE: APIDOC
CODE:
```
resource object:
  Description: A decomposed structure representing a resource address in configuration.
  Keys:
    - addr: string (the full unique address of the resource)
    - module: string (the address of the module containing the resource, e.g., `module.foo.module.bar`, or empty for root)
    - resource: string (the module-relative address, identical to `addr` for root module resources)
    - resource_type: string (the type of resource being addressed)
    - resource_name: string (the name label for the resource)
    - resource_key: string | null (the address key for `count` or `for_each` value, or `null` if neither are used)
    - implied_provider: string (the provider type implied by the resource type; may not reflect actual provider if aliases are used)

  Example:
  {
    ""addr"": ""module.pets.random_pet.pet[\""friend\""]"",
    ""module"": ""module.pets"",
    ""resource"": ""random_pet.pet[\""friend\""]"",
    ""implied_provider"": ""random"",
    ""resource_type"": ""random_pet"",
    ""resource_name"": ""pet"",
    ""resource_key"": ""friend""
  }
```

----------------------------------------

TITLE: Define a complete component block in HCL
DESCRIPTION: Illustrates the full structure of a `component` block in `tfstack.hcl`, showing how to source a Terraform module, define input variables, and specify provider configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
component ""unique_name"" {
    source = <The Terraform module to source>
    inputs = {
        input_name          = <variable_value>
    }
    providers = {
        random    = provider.provider_name.provider_alias
    }
}
```

----------------------------------------

TITLE: Configure Terraform OCI Backend
DESCRIPTION: Example HCL configuration for setting up the Terraform OCI backend, specifying required parameters like bucket and namespace, and optional authentication details such as tenancy OCID, user OCID, fingerprint, private key path, region, and key for state file storage. It also shows how to configure workspace key prefixes and KMS key IDs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oci.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
terraform {
  backend ""oci"" {
    # Required
    bucket            = ""mybucket""
    namespace         = ""my-namespace""
     # Optional
    tenancy_ocid      = ""ocid1.tenancy.oc1..xxxxxxx""
    user_ocid         = ""ocid1.user.oc1..xxxxxxxx""
    fingerprint       = ""xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx""
    private_key_path  = ""~/.oci/oci_api_key.pem""
    region            = ""us-ashburn-1""
    key               = ""path/to/my/key""
    workspace_key_prefix = ""envs/""
    kms_key_id        = ""ocid1.key.oc1.iad.xxxxxxxxxxxxxx""
    auth              = ""APIKey""
    config_file_profile = ""DEFAULT""
  }
}
```

----------------------------------------

TITLE: Move Specific Terraform Resource Instance (For Each)
DESCRIPTION: Details how to move a specific instance of a Terraform resource configured with the `for_each` meta-argument. It demonstrates using string keys for instance identification and provides shell-specific quoting examples for Unix, Windows Command Prompt, and PowerShell due to special characters in keys.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#_snippet_5

LANGUAGE: shell
CODE:
```
terraform state mv 'packet_device.worker[\""example123\""]' 'packet_device.helper[\""example456\""]'
```

LANGUAGE: cmd
CODE:
```
terraform state mv packet_device.worker[\""example123\""] packet_device.helper[\""example456\""]
```

LANGUAGE: powershell
CODE:
```
terraform state mv 'packet_device.worker[\""example123\""]' 'packet_device.helper[\""example456\""]'
```

----------------------------------------

TITLE: Example: Renaming a Terraform Resource with state mv
DESCRIPTION: Illustrates the process of renaming a Terraform resource in the configuration and subsequently updating the Terraform state using the `terraform state mv` command. This ensures that the existing remote object is tracked under its new name, preventing its destruction and recreation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/mv.mdx#_snippet_1

LANGUAGE: diff
CODE:
```
-resource ""packet_device"" ""worker"" {
+resource ""packet_device"" ""helper"" {
  # ...
}
```

LANGUAGE: shell
CODE:
```
terraform state mv packet_device.worker packet_device.helper
```

----------------------------------------

TITLE: Terraform CLI: Resource Targeting with -target Option
DESCRIPTION: Describes the usage and behavior of the `-target` command-line option in Terraform, including how it interprets resource addresses for selection and its implications for dependency management. It also outlines best practices and warnings regarding its use.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
terraform <command> -target=<resource_address>

-target option:
  Description: Focuses Terraform's attention on only a subset of resources during operations (e.g., plan, apply, destroy).
  Parameter:
    resource_address: string
      Description: Specifies the target resource(s) using Terraform's resource address syntax.
      Interpretation:
        - If the given address identifies one specific resource instance (e.g., `aws_instance.example[0]`):
          - Terraform selects that instance alone.
          - For resources with `count` or `for_each`, the address must include the instance index.
        - If the given address identifies a resource as a whole (e.g., `aws_instance.example`):
          - Terraform selects all instances of that resource.
          - For resources with `count` or `for_each`, this selects all current instance indexes.
          - For single-instance resources, this is identical to a specific instance address.
        - If the given address identifies an entire module instance (e.g., `module.my_module`):
          - Terraform selects all instances of all resources that belong to that module instance and all of its child module instances.
  Behavior:
    - Once Terraform has selected one or more resource instances directly targeted, it extends the selection to include all other objects that those selections depend on, either directly or indirectly.
  Usage Recommendations:
    - Provided for exceptional circumstances (e.g., recovering from mistakes or working around Terraform limitations).
    - NOT recommended for routine operations, as it can lead to undetected configuration drift and confusion about state.
    - Alternatives: Break large configurations into several smaller, independently applicable configurations; use data sources to access information about resources created in other configurations.
```

----------------------------------------

TITLE: Terraform HCL: Using `one` with conditional resource creation
DESCRIPTION: This HCL example demonstrates how to use the `one` function to extract a single value (e.g., IP address) from a list that results from a conditional `count` argument on an `aws_instance` resource. It returns `null` if no instance is created, or the IP if one is.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/one.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
variable ""include_ec2_instance"" {
  type    = bool
  default = true
}

resource ""aws_instance"" ""example"" {
  count = var.include_ec2_instance ? 1 : 0

  # (other resource arguments...)
}

output ""instance_ip_address"" {
  value = one(aws_instance.example[*].private_ip)
}
```

----------------------------------------

TITLE: Terraform HCL timeadd Function Reference
DESCRIPTION: Comprehensive documentation for the `timeadd` function in Terraform's configuration language, including its signature, parameter details, supported duration units, return value, and usage examples for adding and subtracting time.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/timeadd.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
timeadd(timestamp, duration)
  - Adds a duration to a timestamp, returning a new timestamp.
  - Parameters:
    - timestamp (string): A string representation of a date in RFC 3339 format (e.g., ""2024-08-16T12:45:05Z"").
      Refer to RFC 3339's Internet Date/Time Format section for how to construct a timestamp string.
    - duration (string): A string representation of a time difference.
      Consists of sequences of number and unit pairs (e.g., ""1.5h"", ""1h30m"").
      Supported units:
        - ns: nanosecond
        - us or µs: microsecond
        - ms: millisecond
        - s: second
        - m: minute
        - h: hour
      To indicate a negative duration, make the first number negative (e.g., ""-2h5m"").
  - Returns: A string, also in RFC 3339 format, representing the result of adding the given duration to the given timestamp.
  - Examples:
    - Add ten minutes:
      timeadd(""2024-08-16T12:45:05Z"", ""10m"")
      // Returns: ""2024-08-16T12:55:05Z""
    - Subtract ten minutes:
      timeadd(""2024-08-16T12:45:05Z"", ""-10m"")
      // Returns: ""2024-08-16T12:35:05Z""
```

----------------------------------------

TITLE: Terraform templatefile Function API Reference
DESCRIPTION: Comprehensive documentation for the `templatefile` function in Terraform, detailing its signature, parameters, return values, and important usage constraints.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
templatefile(path, vars)
  - Reads the file at the given path and renders its content as a template using a supplied set of template variables.
  - Parameters:
    - path: The path to the template file. Must be a file that already exists on disk at the beginning of a Terraform run.
    - vars: An object (map) where each key is available as a variable for interpolation within the template. Variable names must start with a letter, followed by zero or more letters, digits, or underscores.
  - Returns: The rendered string content of the template.
  - Constraints:
    - The template syntax is the same as for string templates in the main Terraform language, including interpolation sequences delimited with `${ ... }`.
    - Recursive calls to `templatefile` are not permitted.
    - File contents are interpreted as UTF-8 encoded text; invalid UTF-8 sequences will produce an error.
    - Cannot be used with files that are generated dynamically during a Terraform operation.
  - Recommended Naming Pattern: `*.tftpl` for template files.
```

----------------------------------------

TITLE: Filter and Execute Specific Terraform Test Files
DESCRIPTION: These commands demonstrate how to use the `terraform test` command with the `-filter` option to execute specific test files. Examples are provided for Linux/macOS, PowerShell, and Windows Command Prompt, highlighting platform-specific path quoting.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_2

LANGUAGE: shell
CODE:
```
terraform test -filter=tests/validations.tftest.hcl
```

LANGUAGE: PowerShell
CODE:
```
terraform test -filter='tests\validations.tftest.hcl'
```

LANGUAGE: shell
CODE:
```
terraform test -filter=tests\validations.tftest.hcl
```

----------------------------------------

TITLE: Terraform Module Registry Service Discovery Response
DESCRIPTION: Example JSON response for Terraform's remote service discovery protocol, indicating the base URL for the module registry API. This response is used by Terraform CLI to locate the module registry service.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/module-registry-protocol.mdx#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""modules.v1"": ""/terraform/modules/v1/""
}
```

----------------------------------------

TITLE: Enable for_each for a Terraform resource and map old state in HCL
DESCRIPTION: This HCL example shows how to refactor a single-instance resource to use `for_each` while preserving the state of the original instance. The `moved` block explicitly maps the old `aws_instance.a` to `aws_instance.a[""small""]` within the new `for_each` configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
locals {
  instances = tomap({
    big = {
      instance_type = ""m3.large""
    }
    small = {
      instance_type = ""t2.medium""
    }
  })
}

resource ""aws_instance"" ""a"" {
  for_each = local.instances

  instance_type = each.value.instance_type
  # (other resource-type-specific configuration)
}

moved {
  from = aws_instance.a
  to   = aws_instance.a[""small""]
}
```

----------------------------------------

TITLE: Declaring Terraform Input Variables with Type Constraints and Defaults
DESCRIPTION: This HCL snippet demonstrates how to declare input variables in Terraform. It shows examples of a simple string variable, a list of strings with a default value, and a complex list of objects, illustrating type constraints and the use of default values for optional variables.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
variable ""image_id"" {
  type = string
}

variable ""availability_zone_names"" {
  type    = list(string)
  default = [""us-west-1a""]
}

variable ""docker_ports"" {
  type = list(object({
    internal = number
    external = number
    protocol = string
  }))
  default = [
    {
      internal = 8300
      external = 8300
      protocol = ""tcp""
    }
  ]
}
```

----------------------------------------

TITLE: Execute Perl Command with Terraform local-exec Provisioner
DESCRIPTION: Illustrates how to specify a custom interpreter for the `local-exec` provisioner in Terraform. This example uses `perl -e` to execute a Perl one-liner that writes the current local time to `completed.txt`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
resource ""terraform_data"" ""example1"" {
  provisioner ""local-exec"" {
    command = ""open WFH, '>completed.txt' and print WFH scalar localtime""
    interpreter = [""perl"", ""-e""]
  }
}
```

----------------------------------------

TITLE: Terraform `slice` Function Reference
DESCRIPTION: Comprehensive reference for the `slice` function, detailing its signature, parameters, return value, and error conditions in Terraform's configuration language.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/slice.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
slice(list, startindex, endindex)
  - Extracts consecutive elements from within a list.
  - Parameters:
    - list: The source list from which to extract elements.
    - startindex: The inclusive starting index for the slice.
    - endindex: The exclusive ending index for the slice.
  - Returns: A new list containing the extracted elements.
  - Error Conditions: Returns an error if 'startindex' or 'endindex' are outside the bounds of valid indices for the given list.
```

----------------------------------------

TITLE: Terraform `lifecycle` Block Arguments Reference
DESCRIPTION: Comprehensive reference for the arguments available within a Terraform `lifecycle` block, detailing their types, purpose, and behavior. These meta-arguments apply to all resource blocks.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
lifecycle block:
  create_before_destroy (bool):
    - By default, Terraform destroys the existing object and then creates a new replacement. This argument changes the behavior so that the new replacement object is created first, and the prior object is destroyed after the replacement is created.
    - This is an opt-in behavior due to potential unique name requirements or other constraints for concurrent existence of old and new objects.
    - Terraform propagates this behavior to all resource dependencies. Destroy provisioners do not run if set to true.

  prevent_destroy (bool):
    - When set to `true`, Terraform will reject with an error any plan that would destroy the infrastructure object associated with the resource, as long as the argument remains present in the configuration.
    - Useful as a safety measure against accidental replacement of costly objects (e.g., database instances). However, it can make certain configuration changes impossible and prevents `terraform destroy`.
    - This setting does not prevent destruction if the resource block is entirely removed from the configuration.

  ignore_changes (list of attribute names):
    - Specifies resource attributes that Terraform should ignore when planning updates to the associated remote object. This is used when a resource is created with references to data that may change in the future but should not affect the resource after creation, or when external processes modify settings.
    - Arguments are considered during a _create_ operation but ignored during an _update_. Attributes can be referenced using index notation (e.g., `tags[""Name""]`, `list[0]`).
    - The special keyword `all` can be used to ignore all attributes, meaning Terraform will only create and destroy the object, never proposing updates.
    - Only attributes defined by the resource type can be ignored; cannot be applied to itself or other meta-arguments.

  replace_triggered_by (list of resource or attribute references):
    - (Added in Terraform 1.2) Triggers the replacement of the resource when any of the referenced managed resources or attributes change.
    - Supply a list of expressions referencing managed resources or their attributes.
```

----------------------------------------

TITLE: Terraform HCL: Managing Multi-Region/Multi-Cloud with Separate Module Blocks
DESCRIPTION: This HCL example illustrates the recommended approach for scenarios where different instances of a module need distinct provider configurations (e.g., different regions or cloud providers). Instead of using `count` or `for_each` to pass varying providers, it shows how to define separate `module` blocks, each explicitly configured with its own set of aliased AWS and Google Cloud providers.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#_snippet_10

LANGUAGE: HCL
CODE:
```
provider ""aws"" {
  alias  = ""usw1""
  region = ""us-west-1""
}

provider ""aws"" {
  alias  = ""usw2""
  region = ""us-west-2""
}

provider ""google"" {
  alias       = ""usw1""
  credentials = file(""account.json"")
  project     = ""my-project-id""
  region      = ""us-west1""
  zone        = ""us-west1-a""
}

provider ""google"" {
  alias       = ""usw2""
  credentials = file(""account.json"")
  project     = ""my-project-id""
  region      = ""us-west2""
  zone        = ""us-west2-a""
}

module ""bucket_w1"" {
  source    = ""./publish_bucket""
  providers = {
    aws.src    = aws.usw1
    google.src = google.usw1
  }
}

module ""bucket_w2"" {
  source    = ""./publish_bucket""
  providers = {
    aws.src    = aws.usw2
    google.src = google.usw2
  }
}
```

----------------------------------------

TITLE: Define an AWS EC2 Instance Resource
DESCRIPTION: This HCL snippet defines a basic AWS EC2 instance resource. It serves as an example of a resource that might be subject to address changes during module refactoring, demonstrating a typical resource declaration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#_snippet_12

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""c"" {
  # (other resource-type-specific configuration)
}
```

----------------------------------------

TITLE: Terraform local-exec Provisioner Argument Reference
DESCRIPTION: Detailed documentation for the arguments supported by the `local-exec` provisioner in Terraform. This includes `command`, `working_dir`, `interpreter`, `environment`, `when`, and `quiet`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Terraform local-exec Provisioner Arguments:

command (Required)
  - Description: The command to execute. Can be relative or absolute path. Evaluated in a shell, supports environment variable substitution. Avoid Terraform variables for substitution to prevent shell injection; use `environment` parameter instead.
  - Type: string

working_dir (Optional)
  - Description: Specifies the working directory for `command` execution. Can be relative or absolute path. The directory must exist.
  - Type: string

interpreter (Optional)
  - Description: A list of interpreter arguments used to execute the command. The first argument is the interpreter path (relative or absolute). Remaining arguments are appended before the command (e.g., [""/bin/bash"", ""-c"", ""echo foo""]). If unspecified, sensible OS defaults are chosen.
  - Type: list of strings

environment (Optional)
  - Description: A block of key-value pairs representing environment variables for the executed command. Inherits the current process environment.
  - Type: map of strings

when (Optional)
  - Description: Specifies when Terraform will execute the command (e.g., `when = destroy` for destroy-time provisioners).
  - Type: string (e.g., ""create"", ""destroy"")

quiet (Optional)
  - Description: If `true`, Terraform suppresses printing the command to stdout, showing ""Suppressed by quiet=true"" instead. Command output is still printed.
  - Type: boolean
```

----------------------------------------

TITLE: Terraform `range` Function API Definition
DESCRIPTION: Defines the various call signatures for the `range` function in Terraform, which generates sequences of numbers. It can be called with a maximum value, or with explicit start, limit, and optional step values.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/range.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
range(max)
range(start, limit)
range(start, limit, step)

Parameters:
- max: The upper limit (exclusive) for the sequence, starting from 0 with a step of 1.
- start: The initial value of the sequence.
- limit: The upper (exclusive for positive step) or lower (exclusive for negative step) bound of the sequence.
- step: The increment or decrement value for each number in the sequence. Defaults to 1 or -1 based on start/limit if omitted.
```

----------------------------------------

TITLE: Dynamic Resource Provisioning using csvdecode with for_each
DESCRIPTION: Illustrates an advanced use case of `csvdecode` in Terraform, parsing CSV data to define a collection of AWS EC2 instances. This example demonstrates how to transform the `csvdecode` output into a map suitable for the `for_each` meta-argument, using a unique identifier from the CSV to track individual resources.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/csvdecode.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
locals {
  # We've included this inline to create a complete example, but in practice
  # this is more likely to be loaded from a file using the ""file"" function.
  csv_data = <<-CSV
    local_id,instance_type,ami
    foo1,t2.micro,ami-54d2a63b
    foo2,t2.micro,ami-54d2a63b
    foo3,t2.micro,ami-54d2a63b
    bar1,m3.large,ami-54d2a63b
  CSV

  instances = csvdecode(local.csv_data)
}

resource ""aws_instance"" ""example"" {
  for_each = tomap({ for inst in local.instances : inst.local_id => inst })

  instance_type = each.value.instance_type
  ami           = each.value.ami
}
```

----------------------------------------

TITLE: Terraform Provider Address Specification
DESCRIPTION: Defines the canonical structure for uniquely identifying Terraform providers within a registry, detailing its components and common usage examples. This address is crucial for Terraform to locate and manage providers.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Provider Address Syntax: hostname/namespace/type

Components:
- hostname: The registry host from which the provider originates. This portion is optional and defaults to `registry.terraform.io/` if omitted.
- namespace: A unique name within a given hostname, typically representing the organization publishing the provider.
- type: The specific provider type (e.g., ""azurerm"", ""aws""). This type is unique within a particular hostname and namespace.

Examples:
- `hashicorp/aws` (shorthand for `registry.terraform.io/hashicorp/aws`)
- `example/foo` (shorthand for `registry.terraform.io/example/foo`)
- `example.com/bar/baz`
```

----------------------------------------

TITLE: Demonstrating tonumber function behavior in Terraform HCL
DESCRIPTION: This example illustrates how the `tonumber` function converts various input types (integer, string, null) to a number in Terraform's configuration language, and demonstrates an error case for an invalid string input.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/tonumber.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> tonumber(1)
1
> tonumber(""1"")
1
> tonumber(null)
null
> tonumber(""no"")
Error: Invalid function argument

Invalid value for ""v"" parameter: cannot convert ""no"" to number: string must be
a decimal representation of a number.
```

----------------------------------------

TITLE: Provisioning Files with Terraform Cloud-Init Config
DESCRIPTION: This HCL code demonstrates how to use the `cloudinit_config` data source in Terraform to provision files on a target system using cloud-init. It configures a multi-part MIME message with a `text/cloud-config` part, encoding a `write_files` block using `yamlencode` to specify file paths and their content, including static strings, file references, and template files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
data ""cloudinit_config"" ""my_cloud_config"" {
  gzip          = false
  base64_encode = false

  part {
    content_type = ""text/cloud-config""
    filename     = ""cloud.conf""
    content = yamlencode(
      {
        ""write_files"" : [
          {
            ""path"" : ""/etc/foo.conf"",
            ""content"" : ""foo contents"",
          },
          {
            ""path"" : ""/etc/bar.conf"",
            ""content"" : file(""bar.conf""),
          },
          {
            ""path"" : ""/etc/baz.conf"",
            ""content"" : templatefile(""baz.tpl.conf"", { SOME_VAR = ""qux"" }),
          },
        ],
      }
    )
  }
}
```

----------------------------------------

TITLE: Terraform Filesystem and Workspace Information Variables
DESCRIPTION: Describes special built-in variables that provide information about the current module's filesystem path, the root module's path, the original working directory, and the currently selected Terraform workspace. Includes a usage example demonstrating `terraform.workspace`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Available Variables:
  path.module
    - Description: Filesystem path of the module where the expression is placed.
    - Caution: Not recommended for write operations due to potential race conditions with local module sources.

  path.root
    - Description: Filesystem path of the root module of the configuration.

  path.cwd
    - Description: Filesystem path of the original working directory from where Terraform was run. Absolute path.
    - Caution: Can hurt portability if used directly in resource arguments. Prefer path.root or path.module.

  terraform.workspace
    - Description: Name of the currently selected Terraform workspace.
    - Caution: Can hurt portability or composability if used directly for namespacing in shared modules.
```

LANGUAGE: HCL
CODE:
```
module ""example"" {
  # ...

  name_prefix = ""app-${terraform.workspace}""
}
```

----------------------------------------

TITLE: Configure Terraform COS Backend with Assume Role in HCL
DESCRIPTION: Example HCL configuration for a Terraform COS backend, demonstrating how to specify an `assume_role` block with `role_arn`, `session_name`, and `session_duration` for role assumption within the backend definition.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/cos.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
terraform {
  backend ""cos"" {
    region = ""ap-guangzhou""
    bucket = ""bucket-for-terraform-state-{appid}""
    prefix = ""terraform/state""
    assume_role {
      role_arn         = ""qcs::cam::uin/xxx:roleName/yyy""
      session_name     = ""my-session-name""
      session_duration = 7200
    }
  }
}
```

----------------------------------------

TITLE: Terraform Test State Management with Default Behavior
DESCRIPTION: This HCL example illustrates how Terraform automatically manages in-memory state files during `terraform test` execution when `state_key` is not explicitly set. It shows how state is created and reused for the main configuration and different modules (`setup`, `loader`) across various `run` blocks, leading to multiple distinct state files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#_snippet_19

LANGUAGE: hcl
CODE:
```
run ""setup"" {

  # This run block references an alternate module and is the first run block
  # to reference this particular alternate module. Therefore, Terraform creates
  # and populates a new empty state file for this run block.

  module {
    source = ""./testing/setup""
  }
}

run ""init"" {

  # This run block does not reference an alternate module, so it uses the main
  # state file for the configuration under test. As this is the first run block
  # to reference the main configuration, the previously empty state file now
  # contains the resources created by this run block.

  assert {
    # In practice we'd do some interesting checks and tests here but the
    # assertions aren't important for this example.
  }

  # ... more assertions ...
}

run ""update_setup"" {

  # We've now re-referenced the setup module, so the state file that was created
  # for the first ""setup"" run block will be reused. It will contain any
  # resources that were created as part of the other run block before this run
  # block executes and will be updated with any changes made by this run block
  # after.

  module {
    source = ""./testing/setup""
  }

  variables {
    # In practice, we'd likely make some changes to the module compared to the
    # first run block here. Otherwise, there would be no point recalling the
    # module.
  }
}

run ""update"" {

  # As with the ""init"" run block, we are executing against the main configuration
  # again. This means we'd load the main state file that was initially populated
  # by the ""init"" run block, and any changes made by this ""run"" block will be
  # carried forward to any future run blocks that execute against the main
  # configuration.

  # ... updated variables ...

  # ... assertions ...
}

run ""loader"" {

  # This run block is now referencing our second alternate module so will create
  # our third and final state file. The other two state files are managing
  # resources from the main configuration and resources from the setup module.
  # We are getting a new state file for this run block as the loader module has
  # not previously been referenced by any run blocks.

  module {
    source = ""./testing/loader""
  }
```

----------------------------------------

TITLE: Terraform S3 Backend with Web Identity Role Assumption Example
DESCRIPTION: Illustrates a Terraform configuration block for an S3 backend, demonstrating how to specify the bucket, key, region, and integrate `assume_role_with_web_identity` for authentication using a web identity token. This setup enables secure state management in S3.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#_snippet_11

LANGUAGE: terraform
CODE:
```
terraform {
  backend ""s3"" {
    bucket = ""example-bucket""
    key    = ""path/to/state""
    region = ""us-east-1""
    assume_role_with_web_identity = {
      role_arn           = ""arn:aws:iam::PRODUCTION-ACCOUNT-ID:role/Terraform""
      web_identity_token = ""<token value>""
    }
  }
}
```

----------------------------------------

TITLE: Load Shared Mock Data from a File in Terraform
DESCRIPTION: This example demonstrates how to load mock data definitions from an external `.tfmock.hcl` or `.tfmock.json` file into a `mock_provider` block using the `source` attribute. This enables the use of shared mock configurations defined in dedicated files, simplifying test setup.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#_snippet_6

LANGUAGE: hcl
CODE:
```
mock_provider ""aws"" {
  source = ""./testing/aws""
}
```

----------------------------------------

TITLE: Define Partial S3 Backend Configuration in Terraform
DESCRIPTION: An example of a partial Terraform S3 backend configuration (`state.tf`) where `bucket`, `key`, `region`, and `profile` attributes are left empty. These empty values serve as placeholders, indicating that the actual values will be supplied externally, typically via a backend configuration file or command-line arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
terraform {
  backend ""s3"" {
    bucket = """"
    key    = """"
    region = """"
    profile= """"
  }
}
```

----------------------------------------

TITLE: Terraform Core RPC API Object Handles
DESCRIPTION: Explains the concept of `int64` handles used in the Terraform Core RPC API for passing live objects between services, including their lifecycle, type safety considerations, and design principles for robust client interactions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/internal/rpcapi/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
API Object Handles:
  - Definition: `int64` values that uniquely identify a live object of a particular type.
  - Creation: Typically created by RPC functions prefixed with `Open`.
  - Closure: Closed by functions prefixed with `Close`.
  - Persistence: Persist between calls to the same RPC API process; automatically discarded on process shutdown.
  - Best Practice: Callers should explicitly close handles for objects no longer in use.
  - Dependencies: Objects represented by handles can depend on other objects, requiring specific closure order.
  - Internal Representation: `handle` generic type (parameterized by underlying object type) for type safety.
  - Wire Protocol: Handle type information is erased; service implementation must check handle type.
  - Uniqueness: Currently unique across all object types, but clients should not rely on this implementation detail.
  - Design Principle: When designing services accepting multiple handle types, accept each as a separate request field; do not rely on internal state for handle type checking.
```

----------------------------------------

TITLE: Mapping Terraform Test Concepts to JUnit XML Elements
DESCRIPTION: This section details how various Terraform test concepts, such as test directories, files, and run blocks, are mapped to specific elements within the JUnit XML output structure. It clarifies the corresponding JUnit XML elements for successful tests, failures, skipped tests, and errors, providing a comprehensive guide for interpreting the JUnit XML output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Terraform Test Concept Mapping to JUnit XML:

Test directory: <testsuites>
  - Description: Represents the top-level container for all test suites.
Test file: <testsuite>
  - Description: Represents a single test file, containing multiple test cases.
Run block: <testcase>
  - Description: Represents an individual test run block within a test file.
Run block assertion: None; details are included only on failure
  - Description: Assertions themselves don't have a direct JUnit XML element; their outcome is reflected in the <testcase> or <failure> element.
Test failure: <failure>
  - Description: Indicates a test case failure, including an error message and details.
Test was skipped: <skipped>
  - Description: Indicates a test case was skipped, with details on why.
Test stopped due to error: <error>
  - Description: Indicates an error occurred during test execution, causing the test to stop.
Any unhandled warnings or errors: <system-err>
  - Description: Captures any unhandled warnings or errors output during the test run.
```

----------------------------------------

TITLE: Accessing Remote State with 'local' Backend in Terraform
DESCRIPTION: This example illustrates the usage of the `terraform_remote_state` data source with the `local` backend to retrieve outputs from a local Terraform state file. It includes syntax variations for Terraform 0.12+ and <= 0.11 for accessing the `subnet_id` output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/remote-state-data.mdx#_snippet_9

LANGUAGE: HCL
CODE:
```
data ""terraform_remote_state"" ""vpc"" {
  backend = ""local""

  config = {
    path = ""...""
  }
}

# Terraform >= 0.12
resource ""aws_instance"" ""foo"" {
  # ...
  subnet_id = data.terraform_remote_state.vpc.outputs.subnet_id
}

# Terraform <= 0.11
resource ""aws_instance"" ""foo"" {
  # ...
  subnet_id = ""${data.terraform_remote_state.vpc.subnet_id}""
}
```

----------------------------------------

TITLE: Splitting Users into Admin and Regular Groups with HCL Locals
DESCRIPTION: This HCL example defines a variable for users and then uses `for` expressions within `locals` to split a map of users into two separate maps: `admin_users` and `regular_users`. It filters users based on their `is_admin` attribute, demonstrating conditional grouping of complex objects.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#_snippet_5

LANGUAGE: HCL
CODE:
```
variable ""users"" {
  type = map(object({
    is_admin = bool
  }))
}

locals {
  admin_users = {
    for name, user in var.users : name => user
    if user.is_admin
  }
  regular_users = {
    for name, user in var.users : name => user
    if !user.is_admin
  }
}
```

----------------------------------------

TITLE: Graphviz Diagram for Create Before Destroy (Update Destroyed Dependency)
DESCRIPTION: Depicts a simplified dependency graph for a scenario where a `create_before_destroy` resource A is destroyed and resource B is updated. It illustrates how the `create_before_destroy` logic ensures proper ordering even when dependencies are being removed.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_8

LANGUAGE: Graphviz
CODE:
```
digraph update {
    subgraph create {
        rank=same;
        b [label=""B update""];
    }
    subgraph destroy {
        rank=same;
        a_d [label=""A destroy""];
    }

    b -> a_d [dir=back];
}
```

----------------------------------------

TITLE: Calculating Symmetric Difference with setsubtract and setunion in HCL
DESCRIPTION: This example illustrates a more complex use case, combining `setsubtract` with `setunion` to compute the symmetric difference between two sets. It effectively finds elements unique to either set.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setsubtract.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
> setunion(setsubtract([""a"", ""b"", ""c""], [""a"", ""c"", ""d""]), setsubtract([""a"", ""c"", ""d""], [""a"", ""b"", ""c""]))
toset([
  ""b"",
  ""d"",
])
```

----------------------------------------

TITLE: Define a single AWS EC2 instance resource without iteration in HCL
DESCRIPTION: This HCL snippet defines a basic AWS EC2 instance resource named 'a' without `count` or `for_each`. It serves as a starting point for refactoring to use iterative meta-arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""a"" {
  # (resource-type-specific configuration)
}
```

----------------------------------------

TITLE: Render Map Configuration with templatefile
DESCRIPTION: Illustrates using the `templatefile` function to iterate over a map of configuration settings and generate output, showcasing variable interpolation for both keys and values within the template.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
%{ for config_key, config_value in config }
set ${config_key} = ${config_value}
%{ endfor ~}
```

LANGUAGE: HCL
CODE:
```
templatefile(
               ""${path.module}/config.tftpl"",
               {
                 config = {
                   ""x""   = ""y""
                   ""foo"" = ""bar""
                   ""key"" = ""value""
                 }
               }
              )
```

LANGUAGE: HCL
CODE:
```
set foo = bar
set key = value
set x = y
```

----------------------------------------

TITLE: Referencing Local Values in HCL Resources
DESCRIPTION: This example shows how to access and use a previously defined local value within a Terraform resource block, specifically assigning a map of common tags to an AWS EC2 instance.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/locals.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  # ...

  tags = local.common_tags
}
```

----------------------------------------

TITLE: Basic Usage Examples of Terraform's sensitive() Function
DESCRIPTION: Illustrates the behavior of the `sensitive` function when applied to various data types (integer, string, list). Shows that the function returns a 'sensitive value' regardless of the input type, indicating Terraform's internal handling of sensitive data.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sensitive.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> sensitive(1)
(sensitive value)
> sensitive(""hello"")
(sensitive value)
> sensitive([])
(sensitive value)
```

----------------------------------------

TITLE: Terraform pg Backend Configuration Variables Reference
DESCRIPTION: Comprehensive reference for all supported configuration options and their corresponding environment variables for the Terraform pg backend. These variables control connection details, schema management, and table/index creation behavior.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/pg.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
conn_str:
  Description: Postgres connection string; a postgres:// URL.
  Environment Variable: PG_CONN_STR (and standard libpq variables)
schema_name:
  Description: Name of the automatically-managed Postgres schema.
  Default: terraform_remote_state
  Environment Variable: PG_SCHEMA_NAME
skip_schema_creation:
  Description: If true, the Postgres schema must already exist. Terraform will not attempt to create it.
  Type: boolean
  Environment Variable: PG_SKIP_SCHEMA_CREATION
skip_table_creation:
  Description: If true, the Postgres table must already exist. Terraform will not attempt to create it.
  Type: boolean
  Environment Variable: PG_SKIP_TABLE_CREATION
skip_index_creation:
  Description: If true, the Postgres index must already exist. Terraform will not attempt to create it.
  Type: boolean
  Environment Variable: PG_SKIP_INDEX_CREATION
```

----------------------------------------

TITLE: Remove duplicate elements from a list using distinct function in HCL
DESCRIPTION: This example demonstrates the usage of the `distinct` function in Terraform's HCL to remove duplicate elements from a list, preserving the order of the first occurrence of each element.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/distinct.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> distinct([""a"", ""b"", ""a"", ""c"", ""d"", ""b""])
[
  ""a"",
  ""b"",
  ""c"",
  ""d"",
]
```

----------------------------------------

TITLE: Chaining Moved Blocks for Multiple Resource Address Changes
DESCRIPTION: To document a sequence of resource address changes over time, Terraform allows chaining `moved` blocks. This HCL example shows how to link multiple `moved` blocks, where the `to` address of one becomes the `from` address of the next, ensuring a continuous upgrade path for users across multiple versions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#_snippet_15

LANGUAGE: HCL
CODE:
```
moved {
  from = aws_instance.a
  to   = aws_instance.b
}

moved {
  from = aws_instance.b
  to   = aws_instance.c
}
```

----------------------------------------

TITLE: Encode Terraform Map to JSON String using jsonencode
DESCRIPTION: This example demonstrates the `jsonencode` function in a Terraform console context. It shows how a Terraform map (object) is converted into its minified JSON string representation, highlighting the function's core capability of serializing HCL data structures to JSON.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/jsonencode.mdx#_snippet_0

LANGUAGE: Terraform Console
CODE:
```
> jsonencode({""hello""=""world""})
{""hello"":""world""}
```

----------------------------------------

TITLE: Rename a Terraform resource using a moved block in HCL
DESCRIPTION: This HCL example demonstrates how to rename an existing Terraform resource from 'aws_instance.a' to 'aws_instance.b' while preserving its state. The `moved` block ensures Terraform tracks the state change correctly, preventing recreation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""b"" {
  count = 2

  # (resource-type-specific configuration)
}

moved {
  from = aws_instance.a
  to   = aws_instance.b
}
```

----------------------------------------

TITLE: Terraform CLI: `terraform show` Command Reference
DESCRIPTION: Documents the `terraform show` command, which provides human-readable or machine-readable (JSON) output from Terraform state or plan files. It details the command's usage, available options, and considerations for sensitive data.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/show.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform show command

Usage: terraform show [options] [file]
  - Provides human-readable output from a state or plan file.
  - Use to inspect a plan to ensure operations are expected, or to inspect the current state.

Parameters:
  [file]: Optional. Path to a Terraform state file or plan file.
    - If not specified, Terraform will show the latest state snapshot.

Options:
  -no-color
    - Description: Disables output with coloring.

  -json
    - Description: Displays machine-readable output from a state or plan file.
    - Note: Requires Terraform v0.12 or later.
    - Warning: When using this flag, any sensitive values in Terraform state will be displayed in plain text.
    - For Terraform state files (including when no path is provided), shows a JSON representation of the state.
    - For Terraform plan files, shows a JSON representation of the plan, configuration, and current state.
    - If viewing a plan, it must be created without `-refresh=false`.
    - If viewing a state file, run `terraform refresh` first if providers contain new schema versions.

Output:
  - Human-readable representation of the state or plan by default.
  - JSON representation when the `-json` flag is used.
```

----------------------------------------

TITLE: Terraform: Implementing Custom Precondition Checks for Resource Validation
DESCRIPTION: This HCL example illustrates the use of a `precondition` block within a resource's `lifecycle` to enforce custom validation rules before resource creation or update. The snippet defines a precondition for an `aws_instance` resource, ensuring that the selected AMI's architecture is `x86_64`. If the condition is not met, a custom `error_message` is displayed, providing early feedback on configuration issues.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  instance_type = ""t2.micro""
  ami           = ""ami-abc123""

  lifecycle {
    # The AMI ID must refer to an AMI that contains an operating system
    # for the `x86_64` architecture.
    precondition {
      condition     = data.aws_ami.example.architecture == ""x86_64""
      error_message = ""The selected AMI must be for the x86_64 architecture.""
    }
  }
}
```

----------------------------------------

TITLE: Convert relative path to absolute using abspath in Terraform
DESCRIPTION: This example demonstrates how to use the `abspath` function in the Terraform console. It takes `path.root`, which represents the root module's directory, and converts it into its absolute filesystem path.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/abspath.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> abspath(path.root)
/home/user/some/terraform/root
```

----------------------------------------

TITLE: Terraform CLI Planning Modes
DESCRIPTION: Details the usage and behavior of alternative planning modes (`-destroy` and `-refresh-only`) for the `terraform plan` and `terraform apply` commands, including their purpose, activation, and version compatibility notes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
terraform plan [options]
terraform apply [options]

Planning Modes:

1. Destroy Mode (-destroy)
   - Purpose: Creates a plan to destroy all remote objects, resulting in an empty Terraform state.
   - Activation: Use the `-destroy` command line option with `terraform plan` or `terraform apply`.
   - Equivalence: Similar to running `terraform destroy`.
   - Use Case: Useful for transient development environments.
   - Compatibility:
     - Terraform v0.15 and earlier: Supported only by `terraform plan`, not `terraform apply`. For apply, use `terraform destroy`.

2. Refresh-Only Mode (-refresh-only)
   - Purpose: Creates a plan to only update the Terraform state and root module output values to reflect changes made to remote objects outside of Terraform.
   - Activation: Use the `-refresh-only` command line option with `terraform plan` or `terraform apply`.
   - Use Case: Reconciling Terraform's records with external changes (e.g., during incident response).
   - Compatibility:
     - Available only in Terraform v0.15.4 and later.

General Notes:
   - ""Normal mode"" refers to the default planning behavior without alternative modes.
   - All planning modes are mutually exclusive.
```

----------------------------------------

TITLE: Call Terraform decode_tfvars Function Example
DESCRIPTION: This HCL snippet demonstrates how to call the `decode_tfvars` function, passing an inline multi-line string containing `.tfvars` content. The function parses this string into an HCL object.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-decode_tfvars.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
provider::terraform::decode_tfvars(
  <<EOT
    example = ""Hello!""
  EOT
)
```

----------------------------------------

TITLE: Essential Git Commands for Infrastructure as Code
DESCRIPTION: Documentation for fundamental Git command-line interface (CLI) commands used to manage version control for infrastructure as code: `init` for creating a new repository, `add` for staging changes, `commit` for saving changes, `remote` for managing remote repositories, and `push` for uploading changes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
git init [directory]
  - Creates a new empty Git repository or reinitializes an existing one.
  - Parameters:
    - directory: The path where the repository should be created (defaults to current directory).
  - Output: ""Initialized empty Git repository in ...""

git add <pathspec>...
  - Adds file contents to the index (staging area).
  - Parameters:
    - pathspec: Files or directories to add.
  - Example: `git add main.tf`

git commit -m <message>
  - Records changes to the repository.
  - Parameters:
    - -m <message>: Use the given <message> as the commit message.
  - Output: ""[branch (root-commit) hash] message""

git remote add <name> <url>
  - Adds a remote repository.
  - Parameters:
    - name: The name of the remote (e.g., 'origin').
    - url: The URL of the remote repository.
  - Example: `git remote add origin https://github.com/*user*/*repo*.git`

git push [remote [branch]]
  - Updates remote refs along with associated objects.
  - Parameters:
    - remote: The name of the remote to push to (e.g., 'origin').
    - branch: The name of the branch to push (e.g., 'main').
  - Example: `git push origin main`
```

----------------------------------------

TITLE: Compute MD5 Hash of a String in HCL
DESCRIPTION: This example demonstrates how to use the `md5` function in Terraform's HCL to compute the MD5 hash of the string 'hello world'. The function returns the hash encoded in hexadecimal digits.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/md5.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> md5(""hello world"")
5eb63bbbe01eeed093cb22bb8f5acdc3
```

----------------------------------------

TITLE: Terraform Module Output and Data Source References
DESCRIPTION: Explains how to reference outputs from child modules and attributes from data sources in Terraform configurations, including behavior with `count` and `for_each` meta-arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Module Output References:
  module.<MODULE NAME>.<OUTPUT NAME>
    - Description: Accesses a specific output value from a child module.
    - Behavior with 'count': If the module uses 'count', the reference becomes a list of objects, where each object represents a module instance and contains its outputs.
    - Behavior with 'for_each': If the module uses 'for_each', the reference becomes a map of objects, where keys correspond to 'for_each' keys, and values are objects representing module instances and their outputs.

Data Source References:
  data.<DATA TYPE>.<NAME>
    - Description: Accesses attributes of a data resource.
    - Behavior with 'count': If the data resource uses 'count', the reference becomes a list of objects, where each object represents a data resource instance.
    - Behavior with 'for_each': If the data resource uses 'for_each', the reference becomes a map of objects, where keys correspond to 'for_each' keys, and values are objects representing data resource instances.
```

----------------------------------------

TITLE: Using terraform_data for replace_triggered_by lifecycle argument
DESCRIPTION: This example demonstrates how to use `terraform_data` to indirectly trigger resource replacement based on changes to a plain variable, which is not directly supported by `replace_triggered_by`. The `input` argument of `terraform_data` tracks the variable's value, forcing replacement of the dependent resource when the variable changes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/terraform-data.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
variable ""revision"" {
  default = 1
}

resource ""terraform_data"" ""replacement"" {
  input = var.revision
}

# This resource has no convenient attribute which forces replacement,
# but can now be replaced by any change to the revision variable value.
resource ""example_database"" ""test"" {
  lifecycle {
    replace_triggered_by = [terraform_data.replacement]
  }
}
```

----------------------------------------

TITLE: HCL Iteration for String Generation with %{for} Directive
DESCRIPTION: Shows how to use the `%{for <NAME> in <COLLECTION>}` directive in HCL to iterate over collections. This directive evaluates a nested template for each element, concatenating the results to dynamically build multi-line strings, often used with heredocs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/strings.mdx#_snippet_8

LANGUAGE: HCL
CODE:
```
<<EOT
%{ for ip in aws_instance.example[*].private_ip }
server ${ip}
%{ endfor }
EOT
```

----------------------------------------

TITLE: Graphviz Diagram for Create Before Destroy (Replace Dependency)
DESCRIPTION: Visualizes the dependency graph when resource A uses `create_before_destroy` and resource B is updated, showing how the creation of the new A precedes the update of B, and the destruction of the old A occurs last. This highlights the importance for resources that register others.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_7

LANGUAGE: Graphviz
CODE:
```
digraph replacement {
    subgraph create {
        rank=same;
        a [label=""A create""];
        b [label=""B update""];
        a -> b [dir=back];
    }
    subgraph destroy {
        rank=same;
        a_d [label=""A destroy""];
    }

    a -> a_d [dir=back, style=dotted];
    b -> a_d [dir=back];
}
```

----------------------------------------

TITLE: Terraform `lifecycle` Block with `ignore_changes` Example
DESCRIPTION: Demonstrates how to use the `ignore_changes` meta-argument within a Terraform `lifecycle` block to prevent Terraform from managing specific attribute changes, such as `tags`, which might be updated by external management agents.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/lifecycle.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""example"" {
  # ...

  lifecycle {
    ignore_changes = [
      # Ignore changes to tags, e.g. because a management agent
      # updates these based on some ruleset managed elsewhere.
      tags,
    ]
  }
}
```

----------------------------------------

TITLE: Compute SHA256 Hash of a String in Terraform
DESCRIPTION: This example demonstrates how to use the `sha256` function within Terraform's configuration language to compute the SHA256 hash of the string 'hello world'. The output shows the resulting hexadecimal hash.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sha256.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> sha256(""hello world"")
b94d27b9934d3e08a52e52d7da7dabfac484efe37a5380ee9088f7ace2efcde9
```

----------------------------------------

TITLE: Terraform decode_tfvars Function Output Example
DESCRIPTION: This HCL snippet illustrates the typical object structure returned by the `decode_tfvars` function after successfully parsing a `.tfvars` string. The result always uses the most general type for each value.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/terraform-decode_tfvars.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
{
  example = ""Hello!""
}
```

----------------------------------------

TITLE: Terraform `init` Command-Line Options for Plugin Management
DESCRIPTION: This section outlines the command-line arguments available for the `terraform init` command, which control the installation and management of provider plugins. It details options for upgrading plugins, skipping installation, specifying custom plugin directories, and managing the dependency lock file, including notes on deprecation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/init.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
-upgrade
  - Description: Upgrades all previously-selected plugins to the newest version that complies with the configuration's version constraints. This option causes Terraform to ignore any selections recorded in the dependency lock file and select the newest available version matching configured constraints.
-get-plugins=false
  - Description: Skips plugin installation.
  - Note: Superseded by `provider_installation` and `plugin_cache_dir` settings in Terraform 0.13+. This option should not be used in Terraform versions 0.13+ and was removed in Terraform 0.15.
-plugin-dir=PATH
  - Description: Forces plugin installation to read plugins ONLY from the specified directory. This behaves as if the directory had been configured as a `filesystem_mirror` in the CLI configuration. It is intended as a one-time override for exceptional situations, such as testing a local build of a provider plugin.
-lockfile=MODE
  - Description: Sets a dependency lockfile mode.
  - Valid Modes:
    - readonly
      - Description: Suppresses lockfile changes but verifies checksums against the information already recorded. This mode conflicts with the `-upgrade` flag. It is useful for controlling explicit lockfile changes when updating with third-party dependency management tools.
```

----------------------------------------

TITLE: Incorrect Terraform Resource Naming Convention
DESCRIPTION: Illustrates an example of poor resource naming in Terraform, where the resource type is included in the identifier and naming conventions (like using double quotes and underscores) are not followed, leading to reduced readability.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_5

LANGUAGE: hcl
CODE:
```
resource aws_instance webAPI-aws-instance {...}
```

----------------------------------------

TITLE: Terraform Apply Command-Line Options and Directory Handling
DESCRIPTION: This entry describes the various command-line flags that can be used with `terraform apply` to modify its behavior, output, and concurrency. It also includes information on legacy options for the `local` backend and important changes in how Terraform handles configuration directories across different versions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
terraform apply [options] [plan_file_or_directory]

Options:
  -auto-approve
    - Skips interactive approval of the plan before applying.
    - Terraform ignores this option when a previously-saved plan file is passed, as passing the plan file implies approval.

  -compact-warnings
    - Shows any warning messages in a compact form, including only summary messages.
    - Full warning text is displayed if warnings are accompanied by at least one error, providing useful context.

  -input=false
    - Disables all of Terraform's interactive prompts.
    - This also prevents Terraform from prompting for interactive approval of a plan, leading to operation failure if approval is required.
    - For non-interactive contexts, consider approaches detailed in 'Running Terraform in Automation'.

  -json
    - Enables machine-readable JSON UI output.
    - Implies `-input=false`, so the configuration must have no unassigned variable values.
    - To enable this flag, you must also either enable the `-auto-approve` flag or specify a previously-saved plan.

  -lock=false
    - Don't hold a state lock during the operation.
    - This is dangerous if others might concurrently run commands against the same workspace.

  -lock-timeout=DURATION
    - Unless locking is disabled with `-lock=false`, instructs Terraform to retry acquiring a lock for a period of time before returning an error.
    - The duration syntax is a number followed by a time unit letter, such as ""3s"" for three seconds.

  -no-color
    - Disables terminal formatting sequences in the output.
    - Use this if you are running Terraform in a context where its output will be rendered by a system that cannot interpret terminal formatting.

  -parallelism=n
    - Limit the number of concurrent operations as Terraform walks the graph.
    - Defaults to 10.

  -replace=resource
    - Terraform will plan to replace this resource instance instead of doing an update or no-op action.

  All planning modes and planning options for `terraform plan`
    - Customize how Terraform will create the plan.
    - Only available when you run `terraform apply` without a saved plan file.

Legacy Options (for `local` backend only):
  -state
  -state-out
  -backup
    - These options are accepted by `terraform apply` for configurations using the `local` backend.

Directory Handling Changes:
  Terraform v0.13 and earlier:
    - Accepted a directory path in place of the plan file argument to `terraform apply`.
    - Used that directory as the root module instead of the current working directory.

  Terraform v0.14 and v0.15+:
    - Usage of directory path as argument was deprecated in v0.14 and removed in v0.15.
    - Use the `-chdir` global option for switching working directories across all commands.
    - Use the `TF_DATA_DIR` environment variable to direct Terraform to write the `.terraform` subdirectory to a location other than the current working directory if needed.
```

----------------------------------------

TITLE: Specify Git revision for Terraform module source using ref argument
DESCRIPTION: This HCL example illustrates how to select a specific Git revision for a Terraform module source. The `ref` URL argument can be used to specify a branch, a tag (e.g., `v1.2.0`), or a full SHA-1 commit hash. This allows precise control over the module version used in your Terraform configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#_snippet_7

LANGUAGE: hcl
CODE:
```
# select a specific tag
module ""vpc"" {
  source = ""git::https://example.com/vpc.git?ref=v1.2.0""
}

# directly select a commit using its SHA-1 hash
module ""storage"" {
  source = ""git::https://example.com/storage.git?ref=51d462976d84fdea54b47d80dcabbf680badcdb8""
}
```

----------------------------------------

TITLE: Sharing Terraform Test State with state_key Attribute
DESCRIPTION: This HCL example demonstrates how to explicitly share a single in-memory state file between different `run` blocks during `terraform test` using the `state_key` attribute. It shows how `run` blocks referencing different modules can still operate on the same state by assigning them the same `state_key`, ensuring resources created by one block are available to another.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#_snippet_20

LANGUAGE: hcl
CODE:
```
run ""setup"" {
  state_key = ""main""

  module {
    source = ""./testing/setup""
  }
}

run ""init"" {

  # By setting the state key to ""main"" we are telling Terraform to use the same
  # state file for this run block as the ""setup"" run block. This means that the
  # resources created by the ""setup"" run block will be available to the
  # configuration in this run block.
  state_key = ""main""

  assert {
    # In practice we'd do some interesting checks and tests here but the
    # assertions aren't important for this example.
  }

  # ... more assertions ...
}
```

----------------------------------------

TITLE: Declare and Configure a Terraform Provider
DESCRIPTION: This HCL example shows how to declare a provider using the `required_providers` block and then configure it using a `provider` block. The `mycloud` local name is used consistently for both declaration and configuration, illustrating how Terraform refers to providers by their local names after declaration. The `provider` block would contain specific configuration arguments for the provider.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/requirements.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
terraform {
  required_providers {
    mycloud = {
      source  = ""mycorp/mycloud""
      version = ""~> 1.0""
    }
  }
}

provider ""mycloud"" {
  # ...
}
```

----------------------------------------

TITLE: Create AWS VPCs Using `for_each` from Network Variables
DESCRIPTION: Demonstrates a straightforward application of `for_each` to create AWS VPC resources directly from the `var.networks` map. Each VPC instance corresponds one-to-one with an element in the `networks` variable.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#_snippet_6

LANGUAGE: HCL
CODE:
```
resource ""aws_vpc"" ""example"" {
  for_each = var.networks

  cidr_block = each.value.base_cidr_block
}
```

----------------------------------------

TITLE: Assign Values to Terraform Variable with Optional Attributes
DESCRIPTION: Example `terraform.tfvars` file demonstrating how to assign values to the `buckets` variable. It illustrates providing values for some attributes while relying on defaults for others, and using heredoc for complex string values.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/type-constraints.mdx#_snippet_9

LANGUAGE: hcl
CODE:
```
buckets = [
  {
    name = ""production""
    website = {
      routing_rules = <<-EOT
      [
        {
          ""Condition"" = { ""KeyPrefixEquals"": ""img/"" },
          ""Redirect""  = { ""ReplaceKeyPrefixWith"": ""images/"" }
        }
      ]
      EOT
    }
  },
  {
    name = ""archived""
    enabled = false
  },
  {
    name = ""docs""
    website = {
      index_document = ""index.txt""
      error_document = ""error.txt""
    }
  }
]
```

----------------------------------------

TITLE: Terraform CLI Core Provisioning Commands
DESCRIPTION: Documents the fundamental Terraform CLI commands (`plan`, `apply`, `destroy`) used for managing infrastructure lifecycle. These commands enable users to preview, provision, and deprovision resources according to their Terraform configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/run/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform plan
  - Purpose: Evaluates a Terraform configuration to determine the desired state of resources and compares it to the real infrastructure.
  - Behavior: Presents a description of changes necessary to achieve the desired state without performing actual modifications.
  - Output: Can save its plan as a runnable artifact for `terraform apply`.

terraform apply
  - Purpose: Performs a plan and then executes the planned changes to each resource using the relevant infrastructure provider's API.
  - Behavior: Asks for user confirmation before making changes (unless explicitly told to skip approval).
  - Input: Can accept a plan file produced by `terraform plan` to reliably perform a pre-approved set of changes.

terraform destroy
  - Purpose: Destroys all resources being managed by the current working directory and workspace.
  - Behavior: Asks for user confirmation before proceeding.
  - Effect: Behaves like deleting every resource from the configuration and then running an apply, but without requiring configuration edits.
```

----------------------------------------

TITLE: Use `fileset` with `for_each` for Resource Creation in HCL
DESCRIPTION: Demonstrates a common use case of the `fileset` function in Terraform HCL, where its output is used with the `for_each` meta-argument to create multiple resource instances based on matched files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/fileset.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
resource ""example_thing"" ""example"" {
  for_each = fileset(path.module, ""files/*"")

  # other configuration using each.value
}
```

----------------------------------------

TITLE: Create a Speculative Terraform Destroy Plan
DESCRIPTION: Shows how to run `terraform plan` in destroy mode to preview changes without executing them, useful for understanding the impact of a destroy operation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/destroy.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
terraform plan -destroy
```

----------------------------------------

TITLE: Pass Environment Variables to local-exec Provisioner Command
DESCRIPTION: Demonstrates how to pass custom environment variables to a command executed by the `local-exec` provisioner. This example sets `FOO`, `BAR`, and `BAZ` variables which are then used within the `echo` command, writing their values to `env_vars.txt`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...

  provisioner ""local-exec"" {
    command = ""echo $FOO $BAR $BAZ >> env_vars.txt""

    environment = {
      FOO = ""bar""
      BAR = 1
      BAZ = ""true""
    }
  }
}
```

----------------------------------------

TITLE: Terraform Resource Addressing with Count Meta-Argument
DESCRIPTION: Demonstrates how to define a resource with multiple instances using the `count` meta-argument and how to reference individual instances or all instances using numerical indices in resource addresses. This is crucial for managing identical resources programmatically.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/state/resource-addressing.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...
  count = 4
}
```

LANGUAGE: HCL
CODE:
```
aws_instance.web[3]
aws_instance.web
```

----------------------------------------

TITLE: Using trimsuffix in Terraform HCL
DESCRIPTION: Examples demonstrating the behavior of the `trimsuffix` function in Terraform's HashiCorp Configuration Language (HCL), showing successful suffix removal, cases where the suffix is not found, and handling of multiple suffix occurrences.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/trimsuffix.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
trimsuffix(""helloworld"", ""world"")
hello
```

LANGUAGE: HCL
CODE:
```
trimsuffix(""helloworld"", ""cat"")
helloworld
```

LANGUAGE: HCL
CODE:
```
trimsuffix(""hello--"", ""-"")
hello-
```

----------------------------------------

TITLE: Move an AWS Instance Address in Terraform
DESCRIPTION: This HCL example illustrates how to use the `moved` block to refactor an AWS instance resource from one address (`aws_instance.a`) to another (`aws_instance.b`) within a Terraform configuration, preventing resource destruction.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/moved.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
moved {
  from = aws_instance.a
  to   = aws_instance.b
}
```

----------------------------------------

TITLE: Apply Terraform Configuration with Variable Files
DESCRIPTION: Demonstrates how to use the `-var-file` option with `terraform apply` to load variable values from a `.tfvars` file. Examples are provided for different operating system shells (Linux/Mac/UNIX, PowerShell, Windows cmd.exe).
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_11

LANGUAGE: shell
CODE:
```
terraform apply -var-file=""testing.tfvars""
```

LANGUAGE: shell
CODE:
```
terraform apply -var-file='testing.tfvars'
```

LANGUAGE: shell
CODE:
```
terraform apply -var-file=""testing.tfvars""
```

----------------------------------------

TITLE: Terraform `terraform` Block Configuration API Reference
DESCRIPTION: Comprehensive API documentation for the `terraform` block, detailing its arguments, nested blocks, data types, constraints, and purpose for configuring Terraform CLI behavior, provider requirements, backend, and cloud integration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform block:
  Description: Parent block that contains configurations that define Terraform behavior.
  Constraints: Only constant values; arguments cannot refer to named objects or use built-in Terraform language functions.

  Arguments:
    required_version:
      Description: Specifies which version of the Terraform CLI is allowed to run the configuration.
      Data type: string
      Default: None
      Example:
        terraform {
          required_version = ""<Terraform version>""
        }
      Notes:
        - Refer to Version constraints for details about supported syntax.
        - Ensures consistent Terraform CLI usage in collaborative environments.
        - Terraform prints an error and exits if the version does not meet constraints.
        - Applies only to Terraform CLI, not provider plugins.

    required_providers:
      Description: Defines required providers and their versions/sources.
      Data type: block
      Nested arguments:
        <PROVIDER>:
          Description: A block for a specific provider.
          Data type: block
          Nested arguments:
            version:
              Description: Version constraint for the provider.
              Data type: string
            source:
              Description: Address of the provider.
              Data type: string

    provider_meta ""<LABEL>"":
      Description: Used for specific cases, typically for provider-specific metadata.
      Data type: block

    backend ""<BACKEND_TYPE>"":
      Description: Configures a backend for state storage. Mutually exclusive with `cloud`.
      Data type: block
      Arguments: ""<ARGUMENTS>"" (specific to backend type)

    cloud:
      Description: Configures integration with HCP Terraform. Mutually exclusive with `backend`.
      Data type: block
      Nested arguments:
        organization:
          Description: Name of the HCP Terraform organization.
          Data type: string
          Required: Yes, when connecting to HCP Terraform.

        workspaces:
          Description: Defines workspaces for HCP Terraform integration.
          Data type: block
          Required: Yes, when connecting to HCP Terraform.
          Nested arguments:
            tags:
              Description: List of tags to identify workspaces. Mutually exclusive with `name`.
              Data type: list
            name:
              Description: Specific workspace name. Mutually exclusive with `tags`.
              Data type: string
            project:
              Description: Name of the project within the organization.
              Data type: string

        hostname:
          Description: Hostname for HCP Terraform.
          Data type: string
          Default: `app.terraform.io`

        token:
          Description: Authentication token for HCP Terraform.
          Data type: string

    experiments:
      Description: List of experimental features to enable.
      Data type: list
```

----------------------------------------

TITLE: HCL indent Function Syntax
DESCRIPTION: Illustrates the basic syntax for using the `indent` function in HCL, specifying the arguments for the number of indentation spaces and the target multi-line string.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/indent.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
indent(num_spaces, string)
```

----------------------------------------

TITLE: Terraform Graph Walk Components and Context Management
DESCRIPTION: Documents the key components and methods involved in Terraform's graph walk, including the low-level DAG traversal, the higher-level context management for modules, and mechanisms for safe concurrent state access.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Terraform Graph Walk Components:

AcyclicGraph.Walk (from internal/dag package):
  - Description: The low-level algorithm for walking a Directed Acyclic Graph (DAG).
  - Purpose: Visits each vertex respecting ""happens after"" edges.
  - Concurrency: Can evaluate multiple vertices concurrently.

terraform.ContextGraphWalker (from internal/terraform package):
  - Description: Implements higher-level operations performed during the Terraform graph walk.
  - Role: Orchestrates the evaluation process within the Terraform context.

terraform.ContextGraphWalker.EnterPath(module_address: string):
  - Description: Method called for each module during the graph walk.
  - Parameters:
    - module_address: The address of the module being entered.
  - Returns: A `terraform.EvalContext` instance.
  - Purpose: Tracks objects and manages namespaces within the specific module.
  - Context Management:
    - `terraform.Context`: Represents the global context for the entire operation.
    - `terraform.EvalContext`: Represents the context for processing within a single module, ensuring namespace separation.

states.SyncState (from internal/states package):
  - Description: A helper wrapper used to safely implement concurrent reads and writes from shared state objects (e.g., `states.State`).
  - Purpose: Ensures thread-safe access to shared resources during concurrent graph evaluation.
```

----------------------------------------

TITLE: Convert string to lowercase using Terraform's `lower` function
DESCRIPTION: Demonstrates the usage of the `lower` function in Terraform's configuration language to convert strings to their lowercase equivalent. This function supports Unicode characters, as shown in the second example.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/lower.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> lower(""HELLO"")
hello
> lower(""ΓΕΙΑ ΣΟΥ"")
""γεια σου""
```

----------------------------------------

TITLE: Terraform cidrhost Function Reference
DESCRIPTION: Detailed reference for the `cidrhost` function in Terraform's configuration language, including its signature, parameters, return value, and specific behavioral notes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/cidrhost.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
cidrhost(prefix, hostnum)
  - Calculates a full host IP address for a given host number within a given IP network address prefix.
  - Parameters:
    - prefix (string): The IP network address prefix in CIDR notation (e.g., ""10.0.0.0/8""). Must be valid according to RFC 4632 section 3.1. Supports both IPv4 and IPv6 prefixes.
    - hostnum (number): A whole number representing the host. If `hostnum` is negative, the count starts from the end of the available range.
  - Returns: string - The calculated full host IP address, using the same addressing scheme as the given prefix.
  - Notes:
    - Conventionally, host number zero represents the network address itself.
    - The host number that fills all host bits with binary 1 represents the network's broadcast address.
    - For backward compatibility, IPv4 address octets with leading zeros are interpreted as decimal numbers, not octal.
```

----------------------------------------

TITLE: Terraform Backend Operations and Context
DESCRIPTION: This section describes the core interfaces and methods used by Terraform's 'local' backend to manage state and execute operations. It highlights the `statemgr.Filesystem` for local state, the central `terraform.Context` object for performing operations, and key methods like `Plan` and `Apply` that initiate execution.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
statemgr.Filesystem
  - Description: Default state manager implementation used by the 'local' backend.
  - Purpose: Manages state snapshots stored in the familiar `terraform.tfstate` local file.

terraform.Context
  - Description: The main object that performs Terraform operations.
  - Purpose: Constructed by the backend using state, configuration, and operation settings to execute commands.

Context.Plan()
  - Description: Method on `terraform.Context` to begin execution of the 'plan' command.
  - Purpose: Constructs a graph and determines changes required.

Context.Apply()
  - Description: Method on `terraform.Context` to begin execution of the 'apply' command.
  - Purpose: Constructs a graph and applies the planned changes to infrastructure.
```

----------------------------------------

TITLE: Check Terraform value sensitivity with issensitive function
DESCRIPTION: Demonstrates the usage of the `issensitive` function in Terraform to determine if a given value is marked as sensitive. Examples include checking an explicitly sensitive string, a regular string, and a variable configured as sensitive.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/issensitive.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
issensitive(sensitive(""secret""))
true
issensitive(""hello"")
false
issensitive(var.my-var-with-sensitive-set-to-true)
true
```

----------------------------------------

TITLE: Terraform Test Summary Message
DESCRIPTION: Example JSON output for a `test_summary` message, providing an overall status of the `terraform test` operation. It includes counts of passed, failed, errored, and skipped tests, along with the final status of the entire test run.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_25

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""Success! 2 passed, 0 failed."",
  ""@module"": ""terraform.ui"",
  ""@timestamp"": ""2023-08-09T16:26:45.482070+02:00"",
  ""test_summary"": {
    ""status"": ""pass"",
    ""passed"": 2,
    ""failed"": 0,
    ""errored"": 0,
    ""skipped"": 0
  },
  ""type"": ""test_summary""
}
```

----------------------------------------

TITLE: Terraform Console Command API Reference
DESCRIPTION: Comprehensive documentation for the `terraform console` command, including its interactive and non-interactive usage, available options, and behavior when interacting with Terraform state and execution plans.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/console.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform console [options]
  - Opens an interactive console for evaluating Terraform expressions.
  - Usage:
    - `terraform console`: Starts an interactive session.
    - `echo 'expression' | terraform console`: Non-interactive evaluation by piping commands.
  - Options:
    - `-state=path`: (Legacy, for `local` backend only) Specifies a path to a state file to load for evaluation.
    - `-plan`: Generates an execution plan first and evaluates expressions against the _planned_ state, providing a more complete set of values.
  - Interaction:
    - To close the console: Enter the `exit` command or press Control-C or Control-D.
  - Behavior:
    - Holds a lock on the state during its operation.
    - Reads remote state from the configured backend if applicable.
    - Using `-plan` can trigger actions during the planning phase if the configuration includes providers that make changes (e.g., `external` data source).
```

----------------------------------------

TITLE: Import Existing AWS EC2 Instance using Terraform CLI
DESCRIPTION: This shell command uses `terraform import` to attach an existing AWS EC2 instance (identified by `i-abcd1234`) to a Terraform resource configuration (`aws_instance.example`). It locates the instance by its ID, retrieves its current settings via the EC2 API, and saves the mapping in the Terraform state file. This enables Terraform to manage the previously unmanaged resource.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/import/usage.mdx#_snippet_1

LANGUAGE: shell
CODE:
```
$ terraform import aws_instance.example i-abcd1234
```

----------------------------------------

TITLE: Iterating Over a Map with Key and Value in HCL
DESCRIPTION: This HCL `for` expression demonstrates iterating over a map (`var.map`) using both the key (`k`) and value (`v`) of each element. It calculates the combined length of the key and value for each entry, producing a tuple of these sums.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
[for k, v in var.map : length(k) + length(v)]
```

----------------------------------------

TITLE: Terraform State Commands Reference
DESCRIPTION: This entry details the `terraform state` command family, which provides advanced capabilities for managing Terraform's state file. It outlines the general usage, lists available subcommands, and explains behavior with remote state and backup file generation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform state <subcommand> [options] [args]
  - Description: The `terraform state` group of commands enables advanced Terraform state management.
  - Purpose: Used to modify the Terraform state without direct manual intervention.
  - Subcommands:
    - `terraform state list`: Lists resources within the state.
    - `terraform state mv`: Moves an item in the state.
    - `terraform state pull`: Pulls the current remote state and outputs to stdout.
    - `terraform state replace-provider`: Replaces a provider in the state.
    - `terraform state rm`: Removes an instance from the state.
    - `terraform state show`: Shows the attributes of a resource in the state.
  - Remote State Compatibility: All `terraform state` subcommands work with remote state, though network roundtrips may increase read/write times.
  - Backup Files: Commands that modify the state (e.g., `mv`, `rm`) automatically write backup files. The backup path can be controlled with the `-backup` option. Backup creation for state modifications cannot be disabled.
```

----------------------------------------

TITLE: Terraform Lifecycle Block Arguments
DESCRIPTION: Documentation for arguments within Terraform's lifecycle block, which control resource update and replacement behavior. These arguments allow fine-grained control over how Terraform manages resource changes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/planning-behaviors.md#_snippet_0

LANGUAGE: HCL
CODE:
```
resource ""example_resource"" ""my_resource"" {
  # ... other configurations ...

  lifecycle {
    # ignore_changes: Ignores changes to specific arguments, preventing Terraform updates.
    # Example: ignore_changes = [tags, ""instance_type""]
    ignore_changes = [
      # List of arguments to ignore
    ]

    # replace_triggered_by: Forces a resource replacement when a specified dependency changes.
    # Example: replace_triggered_by = [aws_instance.other_instance]
    replace_triggered_by = [
      # List of resources that trigger replacement
    ]

    # create_before_destroy: Controls the order of operations during resource replacement.
    # If true, Terraform creates the new resource before destroying the old one.
    # Default is false (Destroy then Create).
    create_before_destroy = true
  }
}
```

----------------------------------------

TITLE: Reference Terraform Input Variables in Resources
DESCRIPTION: Illustrates how to access the value of a declared Terraform input variable within a resource block using the `var.<NAME>` syntax. This example shows assigning an AMI ID from a variable to an `aws_instance` resource.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_9

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  instance_type = ""t2.micro""
  ami           = var.image_id
}
```

----------------------------------------

TITLE: Execute Local Command on AWS Instance Creation with Terraform
DESCRIPTION: Demonstrates how to use the `local-exec` provisioner within a Terraform `aws_instance` resource to run a local command. This example appends the private IP of the created instance to a file named `private_ips.txt` on the machine running Terraform.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/local-exec.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...

  provisioner ""local-exec"" {
    command = ""echo ${self.private_ip} >> private_ips.txt""
  }
}
```

----------------------------------------

TITLE: Convert Terraform Set to List and Access Elements
DESCRIPTION: Demonstrates how to define a Terraform set variable, convert it to a list using the `tolist` function, and then access individual elements by their numerical index. This is necessary because sets are unordered and do not support direct indexing.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/types.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
variable ""example_set"" {
  type    = set(string)
  default = [""foo"", ""bar""]
}
```

LANGUAGE: HCL
CODE:
```
locals {
  example_list = tolist(var.example_set)
}
```

LANGUAGE: HCL
CODE:
```
output ""first_element"" {
  value = local.example_list[0]
}
output ""second_element"" {
  value = local.example_list[1]
}
```

----------------------------------------

TITLE: Determine Sign of a Number using signum Function in Terraform HCL
DESCRIPTION: This example demonstrates the usage of the `signum` function in Terraform HCL to determine the sign of various numbers, returning -1 for negative, 0 for zero, and 1 for positive inputs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/signum.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> signum(-13)
-1
> signum(0)
0
> signum(344)
1
```

----------------------------------------

TITLE: Extract Basename from Path using Terraform HCL
DESCRIPTION: This example demonstrates how to use the `basename` function in Terraform's HCL to extract the last component of a filesystem path. The function operates on the string representation of the path and does not interact with the actual filesystem.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/basename.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> basename(""foo/bar/baz.txt"")
baz.txt
```

----------------------------------------

TITLE: Example Terraform Check Error Message Structure
DESCRIPTION: This JSON snippet illustrates the typical structure of an error message generated when a Terraform precondition or postcondition fails. It shows how the 'message' field contains the evaluated string from the failing condition's 'error_message' argument.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#_snippet_11

LANGUAGE: JSON
CODE:
```
{
            // ""message"" is the string that resulted from evaluating the
            // error_message argument of the failing condition.
            ""message"": ""Server does not have a public IPv6 address.""
          }
```

----------------------------------------

TITLE: Terraform providers Command Reference
DESCRIPTION: Provides a comprehensive reference for the `terraform providers` command, detailing its purpose to inspect provider requirements within a Terraform configuration and noting its various subcommands.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform providers
  - Description: Shows information about the provider requirements of the configuration in the current working directory.
  - Purpose: Aids in understanding where each requirement was detected from.
  - Subcommands: This command also has several subcommands with different purposes.
```

----------------------------------------

TITLE: Terraform `for_each` for Dynamic AWS Instance Creation
DESCRIPTION: This HCL code demonstrates using the `for_each` meta-argument with a list variable to dynamically create multiple `aws_instance` resources. It shows how to use `each.key` for unique naming and how to extract specific attributes like private IPs using `for` expressions in outputs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_13

LANGUAGE: hcl
CODE:
```
variable ""web_instances"" {
  type        = list(string)
  description = ""A list of instances for the web application""
  default = [
    ""ui"",
    ""api"",
    ""db"",
    ""metrics""
  ]
}
resource ""aws_instance"" ""web"" {
  for_each = toset(var.web_instances)
  ami           = data.aws_ami.webapp.id
  instance_type = ""t3.micro""
  tags = {
    Name = ""web_${each.key}""
  }
}
output ""web_private_ips"" {
  description = ""Private IPs of the web instances""
  value = {
    for k, v in aws_instance.web : k => v.private_ip
  }
}
output ""web_ui_public_ip"" {
  description = ""Public IP of the web UI instance""
  value       = aws_instance.web[""ui""].public_ip
}
```

----------------------------------------

TITLE: Basic Terraform Function Call Syntax
DESCRIPTION: Illustrates the general syntax for calling functions in Terraform's configuration language, showing how function names are followed by arguments enclosed in parentheses.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/function-calls.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
<FUNCTION NAME>(<ARGUMENT 1>, <ARGUMENT 2>)
```

----------------------------------------

TITLE: Using `toset` with `for_each` for AWS Instances
DESCRIPTION: This snippet demonstrates how to convert a list of subnet IDs into a set using the `toset` function within a `locals` block. This set is then iterated over by the `for_each` argument of an `aws_instance` resource, showing that `each.key` and `each.value` are identical for set elements.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/for_each.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
locals {
  subnet_ids = toset([
    ""subnet-abcdef"",
    ""subnet-012345"",
  ])
}

resource ""aws_instance"" ""server"" {
  for_each = local.subnet_ids

  ami           = ""ami-a1b2c3d4""
  instance_type = ""t2.micro""
  subnet_id     = each.key # note: each.key and each.value are the same for a set

  tags = {
    Name = ""Server ${each.key}""
  }
}
```

----------------------------------------

TITLE: Terraform `plantimestamp` Function Reference
DESCRIPTION: Detailed reference for the `plantimestamp` function in Terraform, including its signature, return value, and specific use cases for validating time-sensitive resources during the plan phase.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/plantimestamp.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
plantimestamp()
  - Description: Returns a UTC timestamp string in RFC 3339 format, representing the date and time during the plan operation.
  - Parameters: None
  - Returns: string (UTC timestamp in RFC 3339 format)
  - Availability: Terraform v1.5 and later. Not available in the Terraform console.
  - Usage Notes:
    - Intended for use within Custom Conditions to validate time-sensitive resources (e.g., TLS certificates).
    - The result changes for every plan operation.
    - Value may be recomputed but not propagated to resources during Refresh-only plans; recommended for comparing against provider-exported timestamps.
  - Related Functions:
    - timestamp(): Returns the current timestamp evaluated during the apply step.
```

----------------------------------------

TITLE: Decode JSON string to Terraform value using jsondecode
DESCRIPTION: This example demonstrates how to use the `jsondecode` function in Terraform to parse a JSON string into its corresponding Terraform language value. It shows decoding both a JSON object and a JSON boolean from a shell-like console.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/jsondecode.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
> jsondecode(""{\""hello\"": \""world\""}"")
{
  ""hello"" = ""world""
}
> jsondecode(""true"")
true
```

----------------------------------------

TITLE: Terraform Comment Syntax Reference
DESCRIPTION: Explains the different comment styles supported in the HashiCorp Configuration Language (HCL) used by Terraform, including single-line and multi-line options, along with best practices for their usage.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/configuration.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Terraform Comment Syntax:

# Single-line comment (preferred style)
  - Syntax: # <comment text>
  - Description: Begins with a hash symbol and extends to the end of the line. This is the idiomatic style.
  - Usage: Recommended for most single-line comments.

// Single-line comment (alternative style)
  - Syntax: // <comment text>
  - Description: Begins with two forward slashes and extends to the end of the line.
  - Usage: Less idiomatic; automatic formatters may convert this to '#' style.

/* Multi-line comment */
  - Syntax: /* <comment text> */
  - Description: Begins with '/*' and ends with '*/', allowing comments to span multiple lines.
  - Usage: Suitable for longer explanations or temporarily disabling blocks of code.
```

----------------------------------------

TITLE: Define multiple deployment blocks in HCL
DESCRIPTION: This HCL example shows how to define multiple `deployment` blocks in `deployments.tfdeploy.hcl` for different environments like 'production' and 'staging'. Each block specifies unique input configurations, such as AWS region and instance count, for its respective deployment.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/config.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
# deployments.tfdeploy.hcl

deployment ""production"" {
  inputs = {
    aws_region     = ""us-west-1""
    instance_count = 2
  }
}

deployment ""staging"" {
  inputs = {
    aws_region     = ""us-west-1""
    instance_count = 1
  }
}
```

----------------------------------------

TITLE: Basic CSV Decoding with csvdecode
DESCRIPTION: Demonstrates the fundamental operation of the `csvdecode` function, showing how a simple CSV string input is parsed into a list of maps, with the first row serving as keys for the resulting maps.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/csvdecode.mdx#_snippet_0

LANGUAGE: Terraform
CODE:
```
> csvdecode(""a,b,c\n1,2,3\n4,5,6"")
[
  {
    ""a"" = ""1""
    ""b"" = ""2""
    ""c"" = ""3""
  },
  {
    ""a"" = ""4""
    ""b"" = ""5""
    ""c"" = ""6""
  }
]
```

----------------------------------------

TITLE: Creating an Object from a List with HCL for Expression
DESCRIPTION: This HCL `for` expression transforms a list (`var.list`) into an object. It uses the `=>` symbol to define key-value pairs, where the original list element (`s`) becomes the key and its uppercase version (`upper(s)`) becomes the value.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/for.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
{for s in var.list : s => upper(s)}
```

----------------------------------------

TITLE: Terraform `plan` Command-Line Options
DESCRIPTION: This entry documents the various command-line arguments that can be used with the `terraform plan` command to control its behavior regarding input, output, and execution, rather than the content of the plan itself.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#_snippet_9

LANGUAGE: APIDOC
CODE:
```
terraform plan command options:

-compact-warnings
  Description: Shows any warning messages in a compact form, including only summary messages, unless warnings are accompanied by at least one error.
  Parameters: None
  Returns: Affects the format of warning messages in the output.

-detailed-exitcode
  Description: Returns a detailed exit code when the command exits, providing more granular information about the resulting plan.
  Parameters: None
  Returns:
    0 = Succeeded with empty diff (no changes)
    1 = Error
    2 = Succeeded with non-empty diff (changes present)

-generate-config-out=PATH (Experimental)
  Description: If 'import' blocks are present, instructs Terraform to generate HCL for any imported resources not already present. The configuration is written to a new file at PATH, which must not already exist.
  Parameters:
    PATH (string): The path to the new file where the generated configuration will be written.
  Returns: Writes HCL configuration to the specified PATH.

-input=false
  Description: Disables Terraform's default behavior of prompting for input for root module input variables that have not otherwise been assigned a value. Useful in non-interactive automation systems.
  Parameters: None
  Returns: Prevents interactive prompts for variable input.

-json
  Description: Enables machine-readable JSON output. This implies -input=false, so the configuration must have no unassigned variable values.
  Parameters: None
  Returns: JSON formatted output of the plan.

-lock=false
  Description: Don't hold a state lock during the operation. This is dangerous if others might concurrently run commands against the same workspace.
  Parameters: None
  Returns: Disables state locking for the operation.

-lock-timeout=DURATION
  Description: Unless locking is disabled with -lock=false, instructs Terraform to retry acquiring a lock for a period of time before returning an error.
  Parameters:
    DURATION (string): The duration to retry acquiring a lock (e.g., ""3s"", ""1m"").
  Returns: Affects the timeout for acquiring a state lock.

-no-color
  Description: Disables terminal formatting sequences in the output. Use this if running Terraform in a context where its output will be rendered by a system that cannot interpret terminal formatting.
  Parameters: None
  Returns: Plain text output without color or formatting.

-out=FILENAME
  Description: Writes the generated plan to the given filename in an opaque file format. This file can later be passed to 'terraform apply' to execute the planned changes.
  Parameters:
    FILENAME (string): The path to the file where the plan will be saved.
  Returns: Creates a binary plan file.
  Note: The generated file is not for consumption by other software and may contain sensitive data in cleartext. Do not use suffixes like '.tf'.

-parallelism=n
  Description: Limits the number of concurrent operations as Terraform walks the graph.
  Parameters:
    n (integer): The maximum number of concurrent operations. Defaults to 10.
  Returns: Affects the concurrency of plan execution.

Legacy Option (for 'local' backend only):
-state=PATH
  Description: Specifies the path to the state file to use for the operation. This is a legacy option for configurations using the 'local' backend only.
  Parameters:
    PATH (string): The path to the state file.
  Returns: Uses the specified state file for the operation.
```

----------------------------------------

TITLE: Calculate SHA1 Hash of a String in Terraform
DESCRIPTION: Demonstrates how to use the `sha1` function in Terraform's configuration language to compute the SHA1 hash of a given string. The function takes a string as input and returns its hexadecimal SHA1 hash, as shown in a console example.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sha1.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> sha1(""hello world"")
2aae6c35c94fcfb415dbe95f408b9ce91ee846ed
```

----------------------------------------

TITLE: Render List of IP Addresses with templatefile
DESCRIPTION: Demonstrates how to use the `templatefile` function to render a list of IP addresses into a backend configuration, utilizing a `for` loop within the template to iterate over the provided list.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatefile.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
%{ for addr in ip_addrs ~}
backend ${addr}:${port}
%{ endfor ~}
```

LANGUAGE: HCL
CODE:
```
templatefile(""${path.module}/backends.tftpl"", { port = 8080, ip_addrs = [""10.0.0.1"", ""10.0.0.2""] })
```

LANGUAGE: HCL
CODE:
```
backend 10.0.0.1:8080
backend 10.0.0.2:8080
```

----------------------------------------

TITLE: Refactor Terraform Modules with Moved Blocks
DESCRIPTION: This HCL example demonstrates how to refactor a Terraform module by splitting it into new sub-modules (`x` and `y`) while preserving the state of existing resources. The `moved` blocks inform Terraform about the new addresses of resources that have been relocated, ensuring a smooth upgrade path for users.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/refactoring.mdx#_snippet_13

LANGUAGE: HCL
CODE:
```
module ""x"" {
  source = ""../modules/x""

  # ...
}

module ""y"" {
  source = ""../modules/y""

  # ...
}

moved {
  from = aws_instance.a
  to   = module.x.aws_instance.a
}

moved {
  from = aws_instance.b
  to   = module.x.aws_instance.b
}

moved {
  from = aws_instance.c
  to   = module.y.aws_instance.c
}
```

----------------------------------------

TITLE: Referencing Terraform Module Output Values
DESCRIPTION: Child modules can declare output values to selectively export certain values. The calling module can then reference these results using the `module.<module_name>.<output_name>` expression, as shown in this HCL example for an AWS ELB instance list.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
resource ""aws_elb"" ""example"" {
  # ...

  instances = module.servers.instance_ids
}
```

----------------------------------------

TITLE: Define a Minimal Terraform Module Structure
DESCRIPTION: This snippet illustrates the recommended minimal directory structure for a Terraform module. It includes essential configuration files such as `main.tf`, `variables.tf`, and `outputs.tf`, along with a `README.md` for documentation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/structure.mdx#_snippet_1

LANGUAGE: sh
CODE:
```
$ tree minimal-module/
.
├── README.md
├── main.tf
├── variables.tf
└── outputs.tf
```

----------------------------------------

TITLE: Terraform Workspace Management: Select Command
DESCRIPTION: Documents the `terraform workspace select` command, used to switch between existing Terraform workspaces or create a new one if specified. It details the command's syntax, arguments, and available flags.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/select.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform workspace select NAME [DIR]
  - Selects a different workspace to use for further operations.
  - The named workspace must already exist unless the `-or-create` flag is used.
  - Parameters:
    - NAME: The name of the workspace to select. This workspace must exist.
    - DIR: (Optional) The directory containing the Terraform configuration.
  - Flags:
    - -or-create: Boolean flag. If the workspace specified by NAME does not exist, it will be created. Default is 'false'.
```

----------------------------------------

TITLE: Terraform Test Run Status (Pass)
DESCRIPTION: Example JSON output for a `terraform test` run block indicating a successful validation and completion. This message is emitted when a test run finishes with a 'pass' status, showing the path, run name, progress, and final status.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_22

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""  \""successful_validation\""... pass"",
  ""@module"": ""terraform.ui"",
  ""@testfile"": ""validation.tftest.hcl"",
  ""@testrun"": ""successful_validation"",
  ""@timestamp"": ""2023-08-09T16:12:30.724407+02:00"",
  ""test_run"": {
    ""path"": ""main.tftest.hcl"",
    ""run"": ""successful_validation"",
    ""progress"": ""complete"",
    ""status"": ""pass""
  },
  ""type"": ""test_run""
}
```

----------------------------------------

TITLE: Terraform CLI: Show a Count-Indexed Resource Instance
DESCRIPTION: Shows how to target and display the attributes of a specific instance of a resource configured with the `count` meta-argument, specifically the first instance (`[0]`) of `packet_device.worker`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#_snippet_3

LANGUAGE: Shell
CODE:
```
$ terraform state show 'packet_device.worker[0]'
```

----------------------------------------

TITLE: Terraform HCL: Referencing Specific Variable Set Key with `varset` Store
DESCRIPTION: Demonstrates how to define a `store` block of type `varset` to access a specific variable set. It then shows how to reference an individual key (e.g., `example_token`) from that variable set within a `deployment` block's inputs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfdeploy.mdx#_snippet_15

LANGUAGE: HCL
CODE:
```
store ""varset"" ""tokens"" {
  id       = ""<variable_set_id>""
  category = ""terraform""
}

deployment ""main"" {
  inputs = {
    token = store.varset.tokens.example_token
  }
}
```

----------------------------------------

TITLE: Calculate Sum of Numbers in Terraform Console
DESCRIPTION: This example demonstrates how to use the `sum` function within the Terraform console. It takes a list of numbers as input and returns their total sum. The function is designed to work with both lists and sets of numeric values.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sum.mdx#_snippet_0

LANGUAGE: Terraform Console
CODE:
```
> sum([10, 13, 6, 4.5])
33.5
```

----------------------------------------

TITLE: Using nonsensitive with sha256 for output
DESCRIPTION: This example demonstrates how to use the `nonsensitive` function to expose a SHA256 hash of a sensitive variable in Terraform output. It overrides Terraform's default behavior of marking derived values as sensitive, assuming the hash itself is considered non-sensitive.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/nonsensitive.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
output ""sensitive_example_hash"" {
  value = nonsensitive(sha256(var.sensitive_example))
}
```

----------------------------------------

TITLE: Interactive Usage of terraform 0.12upgrade Command
DESCRIPTION: Demonstrates the interactive prompt and confirmation process when running the `terraform 0.12upgrade` command without the `-yes` option. It explains the command's purpose and prompts the user for confirmation before proceeding with configuration file rewrites.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/0.12upgrade.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
$ terraform 0.12upgrade

This command will rewrite the configuration files in the given directory so
that they use the new syntax features from Terraform v0.12, and will identify
any constructs that may need to be adjusted for correct operation with
Terraform v0.12.

We recommend using this command in a clean version control work tree, so that
you can easily see the proposed changes as a diff against the latest commit.
If you have uncommitted changes already present, we recommend aborting this
command and dealing with them before running this command again.

Would you like to upgrade the module in the current directory?
  Only 'yes' will be accepted to confirm.

  Enter a value: yes
```

----------------------------------------

TITLE: Set GOPATH Environment Variable for Terraform Local Development
DESCRIPTION: These commands configure the `GOPATH` environment variable, which is essential for Go-based projects like Terraform. Setting this variable correctly ensures that Go tools can locate source code, packages, and compiled binaries.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
export GOPATH=~/go
```

LANGUAGE: Zsh
CODE:
```
echo -n 'export GOPATH=~/go' >> ~/.zshrc
```

----------------------------------------

TITLE: Documenting Terraform Input Variables with Description
DESCRIPTION: This snippet demonstrates how to add a user-facing description to a Terraform input variable. The `description` argument provides essential context and expectations for module users, significantly improving module usability and supporting auto-generated documentation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
variable ""image_id"" {
  type        = string
  description = ""The id of the machine image (AMI) to use for the server.""
}
```

----------------------------------------

TITLE: Ordering Arguments and Blocks in Terraform HCL
DESCRIPTION: Illustrates the recommended structure for Terraform HCL blocks, placing meta-arguments first, followed by other arguments, then nested blocks, and finally meta-argument blocks, with appropriate blank lines for separation to maintain consistency.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  # meta-argument first
  count = 2

  ami           = ""abc123""
  instance_type = ""t2.micro""

  network_interface {
    # ...
  }

  # meta-argument block last
  lifecycle {
    create_before_destroy = true
  }
}
```

----------------------------------------

TITLE: Terraform Language Meta-Arguments Reference
DESCRIPTION: This section defines special arguments and blocks applicable to any Terraform resource, controlling behavior like dependencies, instance creation, provider selection, and lifecycle management. These meta-arguments enhance the flexibility and control over resource provisioning and state management.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/syntax.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Meta-Arguments:

- depends_on:
  - Description: Specifies explicit hidden dependencies between resources, ensuring operations occur in a specific order.
  - Usage: `depends_on = [resource.type.name, ...]`

- count:
  - Description: Creates multiple resource instances based on a numerical count, allowing for scalable resource deployment.
  - Parameters:
    - count: (number) The number of identical resource instances to create.
  - Usage: `count = 3`

- for_each:
  - Description: Creates multiple resource instances based on a map or set of strings, enabling dynamic resource creation from collections.
  - Parameters:
    - for_each: (map or set of strings) A collection used to generate distinct resource instances.
  - Usage: `for_each = toset([""a"", ""b""])`

- provider:
  - Description: Selects a non-default provider configuration for a specific resource, useful when managing resources across multiple accounts or regions.
  - Parameters:
    - provider: (string) The alias of the desired provider configuration.
  - Usage: `provider = aws.us_east_1`

- lifecycle:
  - Description: A block that customizes the lifecycle behavior of a resource, including preventing destruction, ignoring changes, or creating before destroying.
  - Sub-arguments:
    - create_before_destroy: (bool) Creates new resource before destroying old one. Default: `false`.
    - prevent_destroy: (bool) Prevents resource from being destroyed. Default: `false`.
    - ignore_changes: (list of strings) A list of resource attributes to ignore during planning, preventing Terraform from detecting changes to them.
  - Usage:
    ```hcl
    lifecycle {
      prevent_destroy = true
      ignore_changes = [""tags""]
    }
    ```

- provisioner:
  - Description: A block that defines actions to be taken on the local or remote machine after resource creation or before destruction.
  - Sub-arguments:
    - type: (string) The type of provisioner (e.g., 'local-exec', 'remote-exec').
    - when: (string, optional) Specifies when to run the provisioner ('create' or 'destroy'). Default: 'create'.
  - Usage:
    ```hcl
    provisioner ""local-exec"" {
      command = ""echo 'Resource created.'""
      when    = create
    }
    ```
```

----------------------------------------

TITLE: Using max function with list expansion in HCL
DESCRIPTION: Illustrates how to apply the `max` function to a list or set of numbers in Terraform's HCL by using the `...` operator to expand the collection into individual arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/max.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
max([12, 54, 3]...)
```

----------------------------------------

TITLE: Terraform CLI Command Reference
DESCRIPTION: This section provides a comprehensive reference for the Terraform command-line interface (CLI) and its subcommands. It details the primary workflow commands, less common commands, and global options available for managing infrastructure as code.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Usage: terraform [global options] <subcommand> [args]

The available commands for execution are listed below.
The primary workflow commands are given first, followed by
less common or more advanced commands.

Main commands:
  init          Prepare your working directory for other commands
  validate      Check whether the configuration is valid
  plan          Show changes required by the current configuration
  apply         Create or update infrastructure
  destroy       Destroy previously-created infrastructure

All other commands:
  console       Try Terraform expressions at an interactive command prompt
  fmt           Reformat your configuration in the standard style
  force-unlock  Release a stuck lock on the current workspace
  get           Install or upgrade remote Terraform modules
  graph         Generate a Graphviz graph of the steps in an operation
  import        Associate existing infrastructure with a Terraform resource
  login         Obtain and save credentials for a remote host
  logout        Remove locally-stored credentials for a remote host
  metadata      Metadata related commands
  modules       Show all declared modules in a working directory
  output        Show output values from your root module
  providers     Show the providers required for this configuration
  refresh       Update the state to match remote systems
  show          Show the current state or a saved plan
  state         Advanced state management
  taint         Mark a resource instance as not fully functional
  untaint       Remove the 'tainted' state from a resource instance
  version       Show the current Terraform version
  workspace     Workspace management

Global options (use these before the subcommand, if any):
  -chdir=DIR    Switch to a different working directory before executing the
                given subcommand.
  -help         Show this help output or the help for a specified subcommand.
  -version      An alias for the ""version"" subcommand.
```

----------------------------------------

TITLE: AWS VPC Tagging for Resource Discovery Across Terraform Configurations
DESCRIPTION: This snippet explains how to implement resource discovery across separate Terraform configurations using AWS VPC resources and data sources combined with a consistent tagging convention. Resources are tagged during creation, and then other configurations can query for them based on these tags.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/workspaces/index.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Resource: aws_vpc
  - Purpose: Assign suitable tags to an AWS VPC during its creation.
  - Usage: Establish a tagging convention (e.g., 'environment:dev', 'component:web') to identify resources for discovery by other configurations.

Data Source: aws_vpc
  - Purpose: Query AWS VPCs by tags or other attributes.
  - Usage: Retrieve information about VPCs based on predefined tagging conventions in other configurations, allowing for dynamic referencing of shared network infrastructure.
```

----------------------------------------

TITLE: Configure a Test Run Block with a Shared State Key
DESCRIPTION: This `run` block uses an existing `state_key` (`unique_7`), which means it will implicitly wait for any other run block using the same state key (like `site_six`) to complete before it can start. This demonstrates state key-based synchronization in Terraform tests.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#_snippet_32

LANGUAGE: HCL
CODE:
```
run ""same_state"" {
  state_key = ""unique_7""
  variables {
    input = ""another_external_db""
  }

  assert {
    condition = output.value == var.foo
    error_message = ""double bad""
  }
}
```

----------------------------------------

TITLE: Importing a Terraform Resource from a Custom Provider
DESCRIPTION: This example illustrates how to import a resource using a custom-aliased provider configuration. It first defines an AWS provider with an alias 'europe' and then uses this aliased provider within the `import` block to specify which provider instance should handle the import operation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/index.mdx#_snippet_9

LANGUAGE: HCL
CODE:
```
provider ""aws"" {
  alias = ""europe""
  region = ""eu-west-1""
}

import {
  provider = aws.europe
  to = aws_instance.example[""foo""]
  id = ""i-abcd1234""
}
```

----------------------------------------

TITLE: HCL index Function with Duplicates
DESCRIPTION: Illustrates the `index` function's behavior when the target value appears multiple times in the list. It confirms that the function returns the index of the *first* occurrence found.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index_function.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
> index([""one"", ""two"", ""two""], ""two"")
1
```

----------------------------------------

TITLE: Understanding Implicit Ephemeral Behavior in Terraform
DESCRIPTION: This example demonstrates that if an expression, such as a local value, references an ephemeral variable, the resulting expression also becomes implicitly ephemeral. This mechanism ensures that sensitive data propagation is contained and not inadvertently persisted in state or plan files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_6

LANGUAGE: hcl
CODE:
```
variable ""password"" {
  type      = string
  ephemeral = true
}

locals {
  # local.database_password is implicitly ephemeral because 
  # var.password is ephemeral.
  database_password = var.password
}
```

----------------------------------------

TITLE: List Terraform Workspaces
DESCRIPTION: Demonstrates how to list all existing Terraform workspaces using the `terraform workspace list` command. The output shows the names of available workspaces, with an asterisk (*) indicating the currently selected workspace.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/workspace/list.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
$ terraform workspace list
  default
* development
  jsmith-test
```

----------------------------------------

TITLE: Get Directory Name from Path
DESCRIPTION: Demonstrates the usage of the `dirname` function within a shell-like environment to extract the directory path from a given file path string. The function removes the last segment, returning the parent directory. It operates on the string and does not interact with the actual filesystem.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/dirname.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
> dirname(""foo/bar/baz.txt"")
foo/bar
```

----------------------------------------

TITLE: Convert String to Uppercase using Terraform's `upper` function
DESCRIPTION: This example demonstrates how to use the `upper` function in Terraform's configuration language to convert strings to their uppercase equivalent. It showcases its application with both Latin and Cyrillic characters, highlighting its Unicode support.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/upper.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> upper(""hello"")
HELLO
> upper(""алло!"")
АЛЛО!
```

----------------------------------------

TITLE: Terraform `templatestring` Function Reference
DESCRIPTION: Detailed reference for the `templatestring` function in Terraform, including its syntax, arguments, and purpose.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatestring.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
templatestring(source_string_reference, variables_object, ...)
  - Renders a string defined elsewhere in the module as a template using a supplied set of template variables.
  - Parameters:
    - source_string_reference: (Required) A reference to an object defined in the module that contains the string to be rendered as a template. Direct template expressions are not allowed here.
    - variables_object: (Required) An object (map) specifying variables to use for rendering the template.
    - ...: (Optional) Additional objects can be provided to specify multiple sets of variables for the template.
  - Usage Example:
    templatestring(data.aws_s3_object.example.body, {
      name = var.name
    })
  - Related Functions:
    - templatefile: Reads a file from disk and renders its content as a template.
```

----------------------------------------

TITLE: Terraform CLI: `terraform state show` Command Reference
DESCRIPTION: Documents the `terraform state show` command, which displays the attributes of a single resource from the Terraform state. It details the command's usage, required address format, and optional flags like `-state`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/show.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform state show [options] ADDRESS
  - Description: Shows the attributes of a single resource in the Terraform state.
  - Parameters:
    - ADDRESS: Required. An address that points to a single resource in the state, using resource addressing format (e.g., 'packet_device.worker', 'module.foo.packet_device.worker', 'packet_device.worker[0]').
    - -state=path: Optional. Path to the state file. Defaults to ""terraform.tfstate"". This flag is ignored when remote state is used.
  - Returns: The attributes of the specified resource, formatted for human consumption. For programmatic extraction, use 'terraform show -json'.
```

----------------------------------------

TITLE: Terraform File Provisioner Arguments Reference
DESCRIPTION: Details the supported arguments for the Terraform `file` provisioner, including `source` for file/directory paths, `content` for inline string data, and `destination` for the remote target path. It specifies argument constraints and notes on how destination paths are interpreted by the remote system, particularly for SSH and WinRM connections.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/file.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Arguments:

source
  - Description: The source file or directory. Specify it either relative to the current working directory or as an absolute path.
  - Constraints: Cannot be combined with `content`.

content
  - Description: The direct content to copy on the destination. If destination is a file, the content will be written on that file. In case of a directory, a file named `tf-file-content` is created inside that directory. We recommend using a file as the destination when using `content`.
  - Constraints: Cannot be combined with `source`.

destination (Required)
  - Description: The destination path to write to on the remote system.
  - Notes: Evaluated by the remote system, not Terraform. Valid values depend on the operating system and remote access software. For SSH, paths are passed verbatim to `scp`. For WinRM, a more complex process involving base64 encoding and PowerShell is used, and care must be taken with meta-characters.
```

----------------------------------------

TITLE: Creating AWS Instances using count with a list in Terraform
DESCRIPTION: This HCL snippet demonstrates a common pattern of using the `count` meta-argument with `length` and `count.index` to provision multiple AWS EC2 instances based on a list of subnet IDs. It illustrates how `count.index` is used to assign distinct `subnet_id` values from the input list to each instance, while also highlighting the fragility of this approach when list elements change.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/count.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
variable ""subnet_ids"" {
  type = list(string)
}

resource ""aws_instance"" ""server"" {
  # Create one instance for each subnet
  count = length(var.subnet_ids)

  ami           = ""ami-a1b2c3d4""
  instance_type = ""t2.micro""
  subnet_id     = var.subnet_ids[count.index]

  tags = {
    Name = ""Server ${count.index}""
  }
}
```

----------------------------------------

TITLE: Terraform Module Usage
DESCRIPTION: Demonstrates how to use public modules from the Terraform Registry and how to build and use a local module for managing AWS S3 buckets.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/use-cases.mdx#_snippet_2

LANGUAGE: Terraform
CODE:
```
# Example of using a module from the Terraform Registry
# module ""s3_bucket"" {
#   source  = ""terraform-aws-modules/s3-bucket/aws""
#   version = ""3.15.0""
#
#   bucket_name = ""my-unique-app-bucket""
#   # ... other module inputs
# }
```

LANGUAGE: Terraform
CODE:
```
# Example of creating a local Terraform module for S3 buckets
# In a separate directory (e.g., ./modules/s3_bucket):
# ---
# # modules/s3_bucket/main.tf
# resource ""aws_s3_bucket"" ""this"" {
#   bucket = var.bucket_name
#   tags   = var.tags
# }
#
# variable ""bucket_name"" {
#   description = ""Name of the S3 bucket""
#   type        = string
# }
#
# variable ""tags"" {
#   description = ""Tags to apply to the S3 bucket""
#   type        = map(string)
#   default     = {}
# }
#
# output ""bucket_id"" {
#   value = aws_s3_bucket.this.id
# }
# ---
# # In your root configuration:
# module ""my_s3"" {
#   source = ""./modules/s3_bucket""
#   bucket_name = ""my-local-module-bucket""
#   tags = {
#     Environment = ""dev""
#   }
# }
```

----------------------------------------

TITLE: Terraform HCL: Example Output of `ephemeralasnull` Filtering
DESCRIPTION: This snippet displays the expected console output after applying a Terraform configuration that uses `ephemeralasnull` to filter ephemeral values from a map. It illustrates how ephemeral elements are represented as `tostring(null)` in the final output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ephemeralasnull.mdx#_snippet_3

LANGUAGE: terraform-output
CODE:
```
Outputs:

configuration_settings = {
  ""env"" = ""development""
  ""session_token"" = tostring(null)
}
```

----------------------------------------

TITLE: Access Remote Terraform State from GCS
DESCRIPTION: This HCL example illustrates how to access remote Terraform state stored in a GCS bucket using the `terraform_remote_state` data source. It includes configurations for both Terraform 0.12+ and 0.11- versions, demonstrating how to retrieve outputs from the remote state for use in other resources.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/gcs.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
data ""terraform_remote_state"" ""foo"" {
  backend = ""gcs""
  config = {
    bucket  = ""terraform-state""
    prefix  = ""prod""
  }
}

# Terraform >= 0.12
resource ""local_file"" ""foo"" {
  content  = data.terraform_remote_state.foo.outputs.greeting
  filename = ""${path.module}/outputs.txt""
}

# Terraform <= 0.11
resource ""local_file"" ""foo"" {
  content  = ""${data.terraform_remote_state.foo.greeting}""
  filename = ""${path.module}/outputs.txt""
}
```

----------------------------------------

TITLE: Graphviz DOT for Terraform Dependency Replacement
DESCRIPTION: Illustrates the Graphviz DOT graph for replacing only resource A while updating B. It shows the destruction of A, recreation of A, and subsequent update of B, highlighting the dependency flow during partial replacement.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_4

LANGUAGE: dot
CODE:
```
digraph replacement {
    subgraph create {
        rank=same;
        a [label=""A create""];
        b [label=""B update""];
        a -> b [dir=back];
    }
    subgraph destroy {
        rank=same;
        a_d [label=""A destroy""];
    }

    a -> a_d;
    b -> a_d [style=dotted];
}
```

----------------------------------------

TITLE: Terraform Graph Command Reference
DESCRIPTION: Documents the `terraform graph` command, which generates visual representations of Terraform configurations or execution plans using the DOT language. It details the command's usage, available options, and how to interpret its output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/graph.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform graph [options]

Description: Generates a visual representation of a configuration or execution plan using the DOT language.

Default Behavior:
  - Produces a simplified graph showing only the dependency ordering of resources and data blocks.

Options:
  - -plan=tfplan:
      Description: Produce a graph for applying the given plan.
      Implies: -type=apply.
  - -draw-cycles:
      Description: Highlight any cycles in the graph with colored edges, aiding in diagnosing cycle errors.
      Supported only with: Real graph operation types (when using -type=...). This option is not supported with the default simplified graph.
  - -type=...:
      Description: Selects a specific operation type to show the graph of, instead of the default simplified graph.
      Possible Values: plan, plan-refresh-only, plan-destroy, apply.

Output Format:
  - The graph output uses the DOT language (machine-readable graph description language).
  - Can be rendered into images using Graphviz's `dot` command or third-party online services.
```

----------------------------------------

TITLE: Calling a Terraform Module with Input Variables
DESCRIPTION: Demonstrates how to call a child module in Terraform using a `module` block. It specifies the module's source path (relative to the calling module) and passes an input variable `servers` to configure the module's behavior.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
module ""servers"" {
  source = ""./app-cluster""

  servers = 5
}
```

----------------------------------------

TITLE: Pass Aliased Provider to Terraform Module
DESCRIPTION: This snippet demonstrates how to pass a specific aliased AWS provider configuration (`aws.usw2`) to a Terraform module named 'example'. The `providers` argument maps the child module's expected provider to a configuration defined in the current module.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#_snippet_5

LANGUAGE: hcl
CODE:
```
module ""example"" {
  source    = ""./example""
  providers = {
    aws = aws.usw2
  }
}
```

----------------------------------------

TITLE: Terraform Providers Mirror Command Reference
DESCRIPTION: Documents the `terraform providers mirror` command, which facilitates offline installation of Terraform providers by downloading and mirroring them to a local directory. This is particularly useful in isolated network environments where direct access to the Terraform Registry is not possible. The command creates a directory structure with provider `.zip` files and `.json` index files for local filesystem or static website hosting.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/providers/mirror.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform providers mirror [options] <target-dir>

Purpose:
  Downloads providers required for the current configuration and copies them into a local filesystem directory, creating a local mirror.
  Useful for environments without direct access to the Terraform Registry.

Availability:
  Terraform v0.13 or later.

Arguments:
  <target-dir> (required):
    The directory where the provider mirror will be created. Terraform will populate this with `.zip` files containing plugins and `.json` index files.

Options:
  -platform=OS_ARCH:
    Choose which target platform to build a mirror for. By default, Terraform obtains packages for the platform where the command is run.
    Can be used multiple times to include packages for multiple target systems.
    Format: `operating_system_cpu_architecture` (e.g., `linux_amd64`).

  -lock-file=false:
    Ignore the provider lock file when fetching providers. By default, the mirror command uses version information from the lock file if the configuration directory has been previously initialized.

Behavior on re-run:
  Running `terraform providers mirror` again on an existing mirror directory updates it with new packages. For example, adding a new `-platform` option will place packages for that platform without removing previously downloaded packages, merging the resulting set and updating JSON index files.
```

----------------------------------------

TITLE: Configure AWS provider with OIDC web identity in HCL
DESCRIPTION: This HCL example shows how to configure an AWS provider in `providers.tfstack.hcl` to assume a role using a web identity token. It references variables for region, role ARN, and the OIDC token, typically generated by an `identity_token` block in `tfdeploy.hcl`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/config.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
# providers.tfstack.hcl

provider ""aws"" ""this"" {
  config {
    region = var.aws_region
    assume_role_with_web_identity {
      role_arn           = var.aws_role
      web_identity_token = var.aws_token
    }
  }
}
```

----------------------------------------

TITLE: Illustrating Incorrect Terraform Create Before Destroy Replacement
DESCRIPTION: This DOT graph visualizes an incorrect dependency resolution for Terraform's `create_before_destroy` lifecycle attribute. It shows how a direct inversion of ordering for a dependent resource (`B`) can lead to a cycle when `A` does not have `create_before_destroy`, highlighting the issue of 'infected' dependencies.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_9

LANGUAGE: DOT
CODE:
```
digraph replacement {
    subgraph create {
        rank=same;
        a [label=""A create""];
        b [label=""B create""];
        a -> b [dir=back];
    }
    subgraph destroy {
        rank=same;
        a_d [label=""A destroy""];
        b_d [label=""B destroy""];
        a_d -> b_d;
    }

    a -> a_d;
    a -> b_d [style=dotted];
    b -> a_d [style=dotted];
    b -> b_d [dir=back];
}
```

----------------------------------------

TITLE: Experiment with max() function in Terraform Console
DESCRIPTION: Illustrates how to use the `terraform console` command for interactive testing of built-in functions. This snippet shows the input for the `max` function and its corresponding output in the console.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/index.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
> max(5, 12, 9)
12
```

----------------------------------------

TITLE: Accessing Remote State with 'remote' Backend in Terraform
DESCRIPTION: This example demonstrates how to use the `terraform_remote_state` data source with the `remote` backend to retrieve outputs from a remote Terraform configuration. It shows syntax for both Terraform 0.12+ and earlier versions (<= 0.11) for accessing the `subnet_id` output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/remote-state-data.mdx#_snippet_8

LANGUAGE: HCL
CODE:
```
data ""terraform_remote_state"" ""vpc"" {
  backend = ""remote""

  config = {
    organization = ""hashicorp""
    workspaces = {
      name = ""vpc-prod""
    }
  }
}

# Terraform >= 0.12
resource ""aws_instance"" ""foo"" {
  # ...
  subnet_id = data.terraform_remote_state.vpc.outputs.subnet_id
}

# Terraform <= 0.11
resource ""aws_instance"" ""foo"" {
  # ...
  subnet_id = ""${data.terraform_remote_state.vpc.subnet_id}""
}
```

----------------------------------------

TITLE: Terraform Resource and Data Block JSON Mapping
DESCRIPTION: Demonstrates how 'resource' and 'data' blocks are structured in JSON. It highlights the special handling for meta-arguments like 'provider' (as a string reference), 'depends_on' (an array of string references), and 'ignore_changes' (a string 'all' or an array of property references). The 'type' argument within 'connection' blocks is also interpreted literally.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""resource"": {
    ""aws_instance"": {
      ""example"": {
        ""provider"": ""aws.foo""
      }
    }
  }
}
```

----------------------------------------

TITLE: Add a Precondition Check to a Terraform Output
DESCRIPTION: This HCL example shows how to add a `precondition` block to a Terraform output. It ensures that a specific condition, such as an EC2 instance's root volume being encrypted, is met. An `error_message` is provided if the condition fails, aiding in early error diagnosis.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/outputs.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
output ""api_base_url"" {
  value = ""https://${aws_instance.example.private_dns}:8433/""

  # The EC2 instance must have an encrypted root volume.
  precondition {
    condition     = data.aws_ebs_volume.example.encrypted
    error_message = ""The server's root volume is not encrypted.""
  }
}
```

----------------------------------------

TITLE: Connect Terraform to Terraform Enterprise with Key-Only Tags
DESCRIPTION: This HCL configuration connects Terraform to a specific Terraform Enterprise instance (`my.terraform-enterprise.host`) within the `example_corp` organization, using a key-only tag `app` for workspace selection. This tag format is typically used with older versions of Terraform Enterprise or Terraform CLI.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#_snippet_13

LANGUAGE: hcl
CODE:
```
terraform {
  cloud {
    organization = ""example_corp""
    hostname = ""my.terraform-enterprise.host""
    workspaces {
      tags = [""app""]
    }
  }
}
```

----------------------------------------

TITLE: Terraform Provider Configuration Concepts and Meta-Arguments
DESCRIPTION: Documentation for configuring Terraform providers, including aliasing, default behavior, and how to reference and select alternate provider configurations for resources and modules. This covers the structure and usage of provider blocks and related meta-arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/providers/configuration.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Provider Block Definition:
  provider ""<NAME>"" {
    alias: (Optional) A unique name for this configuration. If omitted, it defines the default configuration for the provider.
    <PROVIDER_SPECIFIC_ARGUMENTS>: (Required/Optional) Arguments specific to the provider (e.g., 'region', 'access_key').
  }
  - Purpose: Defines a specific configuration for a provider, allowing multiple configurations of the same provider.

Required Providers Block (within `terraform` block):
  terraform {
    required_providers {
      <LOCAL_NAME> = {
        source: (Required) The source address of the provider.
        version: (Optional) A version constraint for the provider.
        configuration_aliases: (Optional) A list of aliases that this module expects to receive from a parent module. E.g., `[ mycloud.alternate ]`.
      }
    }
  }
  - Purpose: Declares the providers required by a module and their version constraints, and allows defining expected aliases.

Referring to Alternate Provider Configurations:
  Syntax: `<PROVIDER_NAME>.<ALIAS>`
  Example: `aws.west`
  - Purpose: A special expression used to reference a specific aliased provider configuration.
  - Usage: Valid in the `provider` meta-argument of `resource`, `data`, and `module` blocks.

`provider` Meta-Argument (for Resources and Data Sources):
  Syntax: `provider = <PROVIDER_NAME>.<ALIAS>`
  Example: `provider = aws.west`
  - Purpose: Explicitly selects a specific aliased provider configuration for a resource or data source, overriding the default.

`providers` Meta-Argument (for Modules):
  Syntax: `providers = { <LOCAL_PROVIDER_NAME> = <PARENT_PROVIDER_REFERENCE> }`
  Example: `providers = { aws = aws.west }`
  - Purpose: Maps parent module provider configurations to local provider names within the child module, allowing child modules to obtain configurations from parents.

`version` Meta-Argument (Deprecated):
  Syntax: `version = ""<CONSTRAINT>""`
  Example: `version = ""~> 1.0""`
  - Purpose: Specifies a version constraint for a provider within a `provider` block.
  - Warning: This argument is deprecated in Terraform 0.13 and later. Always declare provider version constraints in the `required_providers` block instead.
```

----------------------------------------

TITLE: Generate Combined Network-Subnet List and Create AWS Subnets with `setproduct`
DESCRIPTION: Illustrates how to use `locals` and the `setproduct` function to create a list of all unique combinations of network and subnet elements. This combined list is then transformed into a map suitable for `for_each` to provision AWS subnets, calculating CIDR blocks based on the combined data.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#_snippet_7

LANGUAGE: HCL
CODE:
```
locals {
  # setproduct works with sets and lists, but the variables are both maps
  # so convert them first.
  networks = [
    for key, network in var.networks : {
      key        = key
      cidr_block = network.cidr_block
    }
  ]
  subnets = [
    for key, subnet in var.subnets : {
      key    = key
      number = subnet.number
    }
  ]

  network_subnets = [
    # in pair, element zero is a network and element one is a subnet,
    # in all unique combinations.
    for pair in setproduct(local.networks, local.subnets) : {
      network_key = pair[0].key
      subnet_key  = pair[1].key
      network_id  = aws_vpc.example[pair[0].key].id

      # The cidr_block is derived from the corresponding network. Refer to the
      # cidrsubnet function for more information on how this calculation works.
      cidr_block = cidrsubnet(pair[0].cidr_block, 4, pair[1].number)
    }
  ]
}

resource ""aws_subnet"" ""example"" {
  # local.network_subnets is a list, so project it into a map
  # where each key is unique. Combine the network and subnet keys to
  # produce a single unique key per instance.
  for_each = tomap({
    for subnet in local.network_subnets : ""${subnet.network_key}.${subnet.subnet_key}"" => subnet
  })

  vpc_id            = each.value.network_id
  availability_zone = each.value.subnet_key
  cidr_block        = each.value.cidr_block
}
```

----------------------------------------

TITLE: Terraform RE2 Regular Expression Syntax Reference
DESCRIPTION: Comprehensive reference for the RE2 regular expression syntax used in Terraform, covering repetition, grouping, literal matching, zero-width assertions, and matching flags. RE2 does not support backreferences.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/regex.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
RE2 Regular Expression Syntax in Terraform:

Repetition Operators:
  x*      : Zero or more x, preferring more (greedy)
  x*?     : Zero or more x, preferring fewer (non-greedy)
  x+      : One or more x, preferring more (greedy)
  x+?     : One or more x, preferring fewer (non-greedy)
  x?      : Zero or one x, preferring one (greedy)
  x??     : Zero or one x, preferring zero (non-greedy)
  x{n,m}  : Between n and m repetitions of x, preferring more (greedy)
  x{n,m}?: Between n and m repetitions of x, preferring fewer (non-greedy)
  x{n,}   : At least n repetitions of x, preferring more (greedy)
  x{n,}?  : At least n repetitions of x, preferring fewer (non-greedy)
  x{n}    : Exactly n repetitions of x

Grouping and Capturing:
  (x)         : Unnamed capture group for sub-pattern x
  (?P<name>x) : Named capture group, named 'name', for sub-pattern x
  (?:x)       : Non-capturing sub-pattern x

Literal Matching:
  \*          : Literal * (e.g., \. is a literal .)
  \Q...\E     : Literal ... for any text ... as long as it does not include literally \E

Zero-Width Matching Operators (do not consume characters):
  ^           : At the beginning of the given string (affected by 'm' flag)
  $           : At the end of the given string (affected by 'm' flag)
  \A          : At the beginning of the given string (unaffected by 'm' flag)
  \z          : At the end of the given string (unaffected by 'm' flag)
  \b          : At an ASCII word boundary (transition between \w and either \W, \A or \z, or vice-versa)
  \B          : Not at an ASCII word boundary

Matching Flags (can be set using (?flags) or (?flags:x)):
  i           : Case insensitive matching
  m           : Multi-line mode; ^ and $ match beginning/end of lines
  s           : Dotall mode; . also matches newline characters
  U           : Ungreedy mode; inverts the meaning of presence or absence of ? after a repetition operator (e.g., x* becomes x*?)

Note: RE2 does not support backreferences.
```

----------------------------------------

TITLE: Terraform filebase64sha256 Function Reference
DESCRIPTION: Detailed reference for the `filebase64sha256` function in Terraform's configuration language, explaining its purpose, parameters, return value, and key differences from related functions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filebase64sha256.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
filebase64sha256(filename)
  - Computes the SHA256 hash of the contents of a given file and encodes it with Base64.
  - Parameters:
    - filename: (string) The path to the file whose contents will be hashed.
  - Returns: (string) The Base64 encoded SHA256 hash of the file's contents.
  - Notes:
    - This function is a variant of `base64sha256` for file contents.
    - Unlike `file(filename)`, it can be used to create hashes for binary files as it does not require UTF-8 text.
```

----------------------------------------

TITLE: Specifying Non-Default Provider Configuration for Terraform Data Blocks
DESCRIPTION: Illustrates how to use the `provider` meta-argument within a Terraform `data` block to specify a non-default provider configuration. This allows a data source to use a specific provider instance, for example, `aws.west`, when multiple configurations for the same provider exist.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/data-sources/index.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
data ""aws_ami"" ""web"" {
  provider = aws.west

  # ...
}
```

----------------------------------------

TITLE: Configure Terraform Credentials Helper
DESCRIPTION: This HCL configuration block instructs Terraform to use an external program as a credentials helper. The helper is consulted for hosts that are not explicitly configured in `credentials` blocks. The optional `args` parameter allows passing additional arguments to the helper program for configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/config/config-file.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
credentials_helper ""example"" {
  args = []
}
```

----------------------------------------

TITLE: Terraform CLI: `terraform import` Command Reference
DESCRIPTION: Comprehensive reference for the `terraform import` command, including its syntax, required arguments (ADDRESS, ID), and all available command-line flags. This command is used to import existing infrastructure resources into Terraform's state file.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/import.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Usage: terraform import [options] ADDRESS ID
  - Imports an existing resource into your Terraform state.
  - ADDRESS: A valid resource address where the imported resource will be managed.
  - ID: The unique identifier of the existing resource to import. This format is dependent on the resource type and provider (e.g., AWS EC2 instance ID 'i-abcd1234', AWS Route53 zone ID 'Z12ABC4UGMOZ2N').

Options:
  -config=path
    - Path to directory of Terraform configuration files that configure the provider for import. Defaults to your working directory.
  -input=true
    - Whether to ask for input for provider configuration.
  -lock=false
    - Don't hold a state lock during the operation. Dangerous if others might concurrently run commands against the same workspace.
  -lock-timeout=0s
    - Duration to retry a state lock.
  -no-color
    - If specified, output won't contain any color.
  -parallelism=n
    - Limit the number of concurrent operations as Terraform walks the graph. Defaults to 10.
  -provider=provider (Deprecated)
    - Override the provider configuration to use when importing the object. By default, Terraform uses the provider specified in the configuration for the target resource.
  -var 'foo=bar'
    - Set a variable in the Terraform configuration. Can be set multiple times. Variable values are interpreted as literal expressions.
  -var-file=foo
    - Set variables in the Terraform configuration from a variable file. Can be used multiple times. Overrides values from auto-loaded files (terraform.tfvars, *.auto.tfvars). Only useful with -config flag.

Conditional Options:
  -ignore-remote-version
    - For configurations using the HCP Terraform CLI integration or the 'remote' backend only.
  -state
  -state-out
  -backup
    - Legacy options for configurations using the 'local' backend only.
```

----------------------------------------

TITLE: Terraform Diagnostic Source Position Object Structure
DESCRIPTION: Defines the structure of a source position object, which is used in the `range` property of a diagnostic object to indicate specific locations (byte, line, column) within a source file. It clarifies that `start` positions are inclusive and `end` positions are exclusive.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/validate.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
A source position object, as used in the `range` property of a diagnostic object, has the following properties:
  - `byte` (number): A zero-based byte offset into the indicated file.
  - `line` (number): A one-based line count for the line containing the relevant position in the indicated file.
  - `column` (number): A one-based count of _Unicode characters_ from the start of the line indicated in `line`.
A `start` position is inclusive while an `end` position is exclusive. The exact positions used for particular error messages are intended for human interpretation only.
```

----------------------------------------

TITLE: Terraform: Declaring a Constant List-of-Objects Expression
DESCRIPTION: This snippet demonstrates a basic declaration of a constant list-of-objects expression in Terraform. It shows how to define a list where each element is an object with attributes, in this case, 'foo'. This is a valid, though not always recommended, way to define structured data.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
example = [
  {
    foo = ""bar""
  },
  {
    foo = ""baz""
  },
]
```

----------------------------------------

TITLE: Connect Terraform to HCP Terraform with Tags
DESCRIPTION: This HCL configuration links the current working directory to HCP Terraform workspaces within the `example_corp` organization that are tagged with `layer=app`. This allows Terraform to automatically select the correct workspace based on defined tags.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#_snippet_12

LANGUAGE: hcl
CODE:
```
terraform {
  cloud {
    organization = ""example_corp""
    workspaces {
      tags = {
        layer = ""app""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Terraform Provisioner Connections for SSH and WinRM
DESCRIPTION: This example demonstrates how to define `connection` blocks within Terraform `provisioner` configurations to establish SSH and WinRM connections. It illustrates setting the connection type, user, password, and host for file transfers, showcasing both SSH for Linux and WinRM for Windows environments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/connection.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
# Copies the file as the root user using SSH
provisioner ""file"" {
  source      = ""conf/myapp.conf""
  destination = ""/etc/myapp.conf""

  connection {
    type     = ""ssh""
    user     = ""root""
    password = var.root_password
    host     = var.host
  }
}

# Copies the file as the Administrator user using WinRM
provisioner ""file"" {
  source      = ""conf/myapp.conf""
  destination = ""C:/App/myapp.conf""

  connection {
    type     = ""winrm""
    user     = ""Administrator""
    password = var.admin_password
    host     = var.host
  }
}
```

----------------------------------------

TITLE: Referencing Local Terraform Modules
DESCRIPTION: This HCL snippet demonstrates how to reference a local Terraform module using a relative path. Local paths must begin with `./` or `../` to differentiate them from module registry addresses. This approach is commonly used for factoring out closely-related code elements within a single source repository.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
module ""consul"" {
  source = ""./consul""
}
```

----------------------------------------

TITLE: Terraform GitHub Actions Setup
DESCRIPTION: This snippet demonstrates how to set up the Terraform CLI within a GitHub Actions workflow using the official HashiCorp Terraform GitHub Action. It configures the Terraform version and sets up authentication for cloud providers.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/phases/collaborate.mdx#_snippet_0

LANGUAGE: yaml
CODE:
```
name: Terraform CI

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  terraform:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.0
          # Add cloud provider credentials here if needed, e.g., AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY

      - name: Terraform Init
        run: terraform init
        env:
          # Example for AWS provider
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Plan
        run: terraform plan
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
```

----------------------------------------

TITLE: Initialize Terraform with External Backend Configuration
DESCRIPTION: This shell command demonstrates how to initialize a Terraform configuration by providing backend details from an external file. The `-backend-config` flag points to the `.tfbackend` file, allowing for dynamic and environment-specific backend setups without modifying the main configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/remote.mdx#_snippet_6

LANGUAGE: Shell
CODE:
```
terraform init -backend-config=config.remote.tfbackend
```

----------------------------------------

TITLE: Terraform Test Files in Root Directory Structure Example
DESCRIPTION: This snippet shows an alternative directory structure where Terraform test files (`.tftest.hcl`) are placed directly within the main configuration directory, alongside the core Terraform files. This setup still allows `terraform test` to operate correctly.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/test.mdx#_snippet_3

LANGUAGE: plaintext
CODE:
```
project/
|-- main.tf
|-- outputs.tf
|-- terraform.tf
|-- variables.tf
|-- validations.tftest.hcl
|-- outputs.tftest.hcl
|-- testing/
    |-- setup/
        |-- main.tf
        |-- outputs.tf
        |-- terraform.tf
        |-- variables.tf
```

----------------------------------------

TITLE: Build terraform-bundle from Go source (v0.15 branch)
DESCRIPTION: Instructions to clone the Terraform repository's v0.15 branch and build the `terraform-bundle` executable using the Go toolchain. This creates a bundle compatible with Terraform v0.13 and later, suitable for transitional use.
SOURCE: https://github.com/hashicorp/terraform/blob/main/tools/terraform-bundle/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
git clone --single-branch --branch=v0.15 --depth=1 https://github.com/hashicorp/terraform.git
cd terraform
go build -o ../terraform-bundle ./tools/terraform-bundle
```

----------------------------------------

TITLE: Terraform CLI Commands for Provider Management
DESCRIPTION: This section details various Terraform CLI commands used to manage providers (plugins), including initialization, information retrieval, and strategies for offline installation and version locking.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/plugins/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform init
  - Initializes a working directory and installs any required providers.
  - By default, requires network access to download providers from their source registry.
  - Can be configured to limit or skip network access, or to use providers not available through a networked source.

terraform providers
  - Displays information about the providers required by the current working directory's configuration.

terraform version (or terraform -version)
  - Shows the specific provider versions installed for the current working directory.

terraform providers schema
  - Provides machine-readable information about the resources and configuration options offered by each provider.

terraform providers mirror
  - Downloads local copies of every provider required by the current working directory's configuration.
  - Creates a nested directory layout that Terraform expects for local plugin installation, suitable for air-gapped environments.

terraform providers lock
  - Updates the lock file that Terraform uses to ensure predictable runs when using ambiguous provider version constraints.
```

----------------------------------------

TITLE: Fetch Terraform Module from HTTP Archive URL
DESCRIPTION: Demonstrates sourcing a Terraform module directly from an HTTP/HTTPS URL pointing to a recognized archive file (e.g., `.zip`). Terraform bypasses its standard `terraform-get` redirection for these URLs and extracts the module content directly from the archive.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#_snippet_13

LANGUAGE: hcl
CODE:
```
module ""vpc"" {
  source = ""https://example.com/vpc-module.zip""
}
```

----------------------------------------

TITLE: Compute SHA512 Hash of a String in Terraform HCL
DESCRIPTION: This example demonstrates how to use the `sha512` function in Terraform's configuration language. The function takes a string, encodes it as UTF-8, applies the SHA512 algorithm (RFC 4634), and returns the raw hash encoded to lowercase hexadecimal digits.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sha512.mdx#_snippet_0

LANGUAGE: Terraform HCL
CODE:
```
> sha512(""hello world"")
309ecc489c12d6eb4cc40f50c902f2b4d0ed77ee511a7c7a9bcd3ca86d4cd86f989dd35bc5ff499670da34255b45b0cfd830e81f605dcf7dc5542e93ae9cd76f
```

----------------------------------------

TITLE: Enable Terraform Experimental Features
DESCRIPTION: This setting allows opting into experimental features by specifying a list of feature names. Experimental features are subject to change, may not be released in stable form, and are not recommended for production modules due to potential breaking changes in minor/patch releases. Enabling them generates warnings.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/terraform.mdx#_snippet_9

LANGUAGE: HCL
CODE:
```
terraform {
  experiments = [ ""<feature-name>"" ]
  # . . .
}
```

LANGUAGE: APIDOC
CODE:
```
experiments Attribute Details:

Description: Specifies a list of experimental feature names to opt into.
Data type: List.
Default: None.
Warning: Subject to arbitrary changes, not recommended for production. May introduce breaking changes in minor/patch releases.
Usage: Modules with experiments enabled generate a warning on every `terraform plan` or `terraform apply`.
Recommendation: Use only in alpha/beta releases of shared modules.
Reference: Terraform changelog for available experiment keywords.
```

----------------------------------------

TITLE: Terraform HCL Version Constraint Operators Reference
DESCRIPTION: Details the various operators used to define version constraints in Terraform's HCL configuration. This reference explains the behavior of each operator, including exact matches, exclusions, comparisons, and the tilde operator for patch-level increments, along with usage examples.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/version-constraints.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Operators for Terraform Version Constraints:

=, no operator:
  - Description: Allows only one exact version number.
  - Constraint: Cannot be combined with other conditions.

!=
  - Description: Excludes an exact version number.

>, >=, <, <=
  - Description: Compares to a specified version.
  - Behavior: Terraform allows versions that resolve to 'true'.
  - > and >=: Request newer versions.
  - < and <=: Request older versions.

~>
  - Description: Allows only the right-most version component to increment.
  - Example 1: ~> 1.0.4
    - Allows: 1.0.5, 1.0.10
    - Disallows: 1.1.0
  - Example 2: ~> 1.1
    - Allows: 1.2, 1.10
    - Disallows: 2.0

Pre-release Version Specification:
  - To select a pre-release version (e.g., 1.2.0-beta), use the '=' operator or omit the operator to specify the exact version number.
  - Terraform does not match pre-release versions using >, >=, <, <=, or ~> operators.
```

----------------------------------------

TITLE: Implementing Custom Validation Rules for Terraform Variables
DESCRIPTION: This example illustrates how to define custom validation rules for a Terraform input variable using a `validation` block. It includes a `condition` expression that must evaluate to true and an `error_message` to provide specific feedback when validation fails, ensuring input data integrity.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/values/variables.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
variable ""image_id"" {
  type        = string
  description = ""The id of the machine image (AMI) to use for the server.""

  validation {
    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == ""ami-""
    error_message = ""The image_id value must be a valid AMI id, starting with \""ami-\"".""
  }
}
```

----------------------------------------

TITLE: Exposing Nested Module Outputs as Root Outputs in Terraform
DESCRIPTION: This example shows how to explicitly configure a passthrough for a nested module's output value to make it accessible as a root module output. This is necessary for `terraform_remote_state` to access values from nested modules, specifically for Terraform 0.12 and later.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/state/remote-state-data.mdx#_snippet_11

LANGUAGE: HCL
CODE:
```
module ""app"" {
  source = ""...""
}

output ""app_value"" {
  # This syntax is for Terraform 0.12 or later.
  value = module.app.example
}
```

----------------------------------------

TITLE: Terraform Configuration Language: Named Value References
DESCRIPTION: Describes the syntax and behavior for referencing various named values within Terraform configurations, including resources, input variables, and local values. This covers how values are accessed and how their structure changes based on configuration arguments like 'count' or 'for_each'.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Resources:
  Syntax: <RESOURCE TYPE>.<NAME>
  Description: References a managed resource of the given type and name.
  Behavior:
    - Without count or for_each: Value is an object; attributes accessed via dot or square bracket notation.
    - With count: Value is a list of objects representing instances.
    - With for_each: Value is a map of objects representing instances.

Input Variables:
  Syntax: var.<NAME>
  Description: References the value of an input variable.
  Behavior:
    - Automatic type conversion based on variable's type constraint.
    - Only attributes defined in the variable's type constraint are available, even if the caller provides additional attributes.

Local Values:
  Syntax: local.<NAME>
  Description: References the value of a local value.
  Behavior:
    - Can refer to other local values, even within the same 'locals' block.
    - Circular dependencies are not allowed.
```

----------------------------------------

TITLE: HCL Variable Validation Rule Using `can`
DESCRIPTION: This HCL example demonstrates how to implement a custom variable validation rule using the `can` function. It checks if a given `timestamp` string can be successfully parsed by `formatdate`, providing a specific error message if the format is invalid. This pattern ensures robust input validation for Terraform variables.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/can.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
variable ""timestamp"" {
  type        = string

  validation {
    # formatdate fails if the second argument is not a valid timestamp
    condition     = can(formatdate("""", var.timestamp))
    error_message = ""The timestamp argument requires a valid RFC 3339 timestamp.""
  }
}
```

----------------------------------------

TITLE: Build terraform-bundle from Go source (v0.12 branch)
DESCRIPTION: Instructions to clone the Terraform repository's v0.12 branch and build the `terraform-bundle` executable using the Go toolchain. This creates a bundle compatible with Terraform v0.12, which has different plugin packaging expectations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/tools/terraform-bundle/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
git clone --single-branch --branch=v0.12 --depth=1 https://github.com/hashicorp/terraform.git
cd terraform
go build -o ../terraform-bundle ./tools/terraform-bundle
```

----------------------------------------

TITLE: Graphviz DOT for Terraform Resource Updates
DESCRIPTION: Illustrates resource update dependencies in Terraform using Graphviz DOT. It shows A creation, B update, and C update, with dependencies flowing from A to B to C, mirroring the creation order for updates.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_1

LANGUAGE: dot
CODE:
```
digraph update {
    subgraph nodes {
        rank=same;
        a [label=""A create""];
        b [label=""B update""];
        c [label=""C update""];
        b -> c [dir=back];
        a -> b [dir=back];
    }
}
```

----------------------------------------

TITLE: Use for_each with component block in HCL
DESCRIPTION: Demonstrates how to use the `for_each` meta-argument within a `component` block to provision modules dynamically, such as deploying an S3 module across multiple AWS regions based on a variable.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/reference/tfstack.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
component ""s3"" {
    for_each = var.regions

    source = ""./s3""

    inputs = {
        region = each.value
    }

    providers = {
        aws    = provider.aws.configurations[each.value]
        random = provider.random.this
    }
}
```

----------------------------------------

TITLE: Terraform Issue Workflow Steps
DESCRIPTION: Describes the process for addressing confirmed bugs and crashes in the Terraform project. It involves explaining the behavior or locating the defect in the codebase.
SOURCE: https://github.com/hashicorp/terraform/blob/main/BUGPROCESS.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Workflow Step 1: Explain or Fix Confirmed Issues
  - For confirmed issues, either explain why the behavior is expected and close it, or locate the cause of the defect in the codebase.
  - If the defect is located and described, label the issue as ""explained"".
  - Crashes are considered high impact and should be addressed promptly.

Workflow Step 2: Fix Explained Issues
  - For explained issues, the next step is to create a Pull Request (PR) to fix them.
  - Issues expected to be fixed in a future release should be assigned to a milestone.
```

----------------------------------------

TITLE: Terraform Output for File SHA256 Hash
DESCRIPTION: This Terraform configuration snippet shows how to use the `filesha256` function within an `output` block. It computes the SHA-256 hash of 'example.txt' and exposes it as a module output, useful for verifying file integrity or for use in other configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha256.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
output ""file_hash"" {
  value = filesha256(""example.txt"")
}
```

----------------------------------------

TITLE: Basic usage of max function in HCL
DESCRIPTION: Demonstrates the basic usage of the `max` function in Terraform's HCL, taking multiple numeric arguments and returning the single greatest value among them.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/max.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
max(12, 54, 3)
```

----------------------------------------

TITLE: Terraform Condition Expression with `contains` Function
DESCRIPTION: Demonstrates how to use the `contains` function within a Terraform `condition` expression to validate if a variable's value is present in a predefined list of allowed values. This example checks if `var.environment` is either 'STAGE' or 'PROD', providing a concise way to enforce enumerated values.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#_snippet_5

LANGUAGE: HCL
CODE:
```
condition = contains([""STAGE"", ""PROD""], var.environment)
```

----------------------------------------

TITLE: Terraform Condition Expression with Logical Operators
DESCRIPTION: Illustrates the use of logical operators (`&&` for AND, `||` for OR, `!` for NOT) within a Terraform `condition` expression. This specific example checks if a variable `var.name` is not empty and if its lowercase version matches the original, ensuring a non-empty, lowercase name. This pattern is useful for input validation or complex assertions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
condition = var.name != """" && lower(var.name) == var.name
```

----------------------------------------

TITLE: Terraform Language Functions for Collections and Sets
DESCRIPTION: Documentation for several built-in Terraform functions that operate on lists and sets, useful for data manipulation within HCL configurations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#_snippet_10

LANGUAGE: APIDOC
CODE:
```
contains(list_or_set, element_value)
  - Tests whether a given list or set contains a given element value.
  - Parameters:
    - list_or_set: The collection to search (list or set).
    - element_value: The value to search for.
  - Returns: bool (true if found, false otherwise).

flatten(list_of_lists)
  - Flattens hierarchical data into a single list.
  - Parameters:
    - list_of_lists: A list containing other lists or nested structures.
  - Returns: list (a single-level list).

setintersection(set1, set2, ...)
  - Computes the intersection of multiple sets.
  - Parameters:
    - setN: Multiple set values.
  - Returns: set (elements common to all input sets).

setsubtract(set1, set2)
  - Computes the relative complement of two sets (elements in set1 but not in set2).
  - Parameters:
    - set1: The base set.
    - set2: The set of elements to subtract.
  - Returns: set (elements from set1 not present in set2).

setunion(set1, set2, ...)
  - Computes the union of multiple sets.
  - Parameters:
    - setN: Multiple set values.
  - Returns: set (all unique elements from all input sets).
```

----------------------------------------

TITLE: Syntax for templatestring function in HCL
DESCRIPTION: Illustrates the basic syntax for calling the `templatestring` function in HashiCorp Configuration Language (HCL), showing placeholder arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/templatestring.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
templatestring(ARG1, ARG2, . . .)
```

----------------------------------------

TITLE: Specify Custom Mock Data for Terraform Resources and Data Sources
DESCRIPTION: This example shows how to define specific default values for computed attributes within a mock provider. It uses `mock_resource` and `mock_data` blocks to set a custom `arn` for `aws_s3_bucket` resources and data sources, overriding the generic data generation rules.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/mocking.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
mock_provider ""aws"" {
  mock_resource ""aws_s3_bucket"" {
    defaults = {
      arn = ""arn:aws:s3:::name""
    }
  }

  mock_data ""aws_s3_bucket"" {
    defaults = {
      arn = ""arn:aws:s3:::name""
    }
  }
}
```

----------------------------------------

TITLE: HCP Terraform `cloud` Block Configuration Reference
DESCRIPTION: Comprehensive reference for the `cloud` block within the `terraform` configuration, used to connect the Terraform CLI to HCP Terraform. It details required and optional attributes for specifying organization, hostname, and workspace linking strategies via tags or direct naming.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/cloud/settings.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
terraform {
  cloud {
    organization: string
      - Specifies the name of an HCP Terraform organization to connect to.
    hostname: string (optional)
      - Defaults to app.terraform.io.
    workspaces {
      tags: map of string or list of string (legacy style)
        - Links the working directory to existing workspaces with matching tags.
        - If no matching workspaces, prompts to create a new workspace with these tags.
      name: string
        - Specifies the name of an existing workspace to associate with the configuration.
        - Cannot be used with `tags`.
      project: string
        - Specifies the name of an existing project.
        - Associates the configuration with workspaces in the project that match `name` or `tags`.
    }
  }
}
```

----------------------------------------

TITLE: Terraform Hashing Functions Reference
DESCRIPTION: Comprehensive API documentation for Terraform's `sha1` and `filesha1` functions. It details their signatures, parameters, return values, and important security considerations regarding SHA1's susceptibility to collision attacks.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/sha1.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
sha1(input_string: string) -> string (hexadecimal SHA1 hash)
  - Computes the SHA1 hash of a given string.
  - The input string is first encoded as UTF-8.
  - The SHA1 algorithm is applied as defined in RFC 3174.
  - The raw hash is then encoded to lowercase hexadecimal digits before returning.
  - Parameters:
    - input_string: The string to be hashed.
  - Returns: A string representing the SHA1 hash in lowercase hexadecimal format.
  - Security Note: Collision attacks have been successfully performed against SHA1. Review relevant literature before using this function for security-sensitive purposes.

filesha1(path: string) -> string (hexadecimal SHA1 hash)
  - Calculates the SHA1 hash from the contents of a file at the given path.
```

----------------------------------------

TITLE: Calculate Power using pow function in HCL
DESCRIPTION: Demonstrates the usage of the `pow` function in Terraform's HCL to calculate the exponent of a number. It takes two arguments: the base and the exponent, returning the result. Examples include `pow(3, 2)` yielding 9 and `pow(4, 0)` yielding 1.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/pow.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
> pow(3, 2)
9
> pow(4, 0)
1
```

----------------------------------------

TITLE: Create and Select Terraform Workspaces
DESCRIPTION: These shell commands demonstrate how to create new Terraform workspaces for different environments (e.g., 'staging' and 'production') and then select a specific workspace. Workspaces allow managing multiple distinct states for the same configuration, which is crucial when combined with dynamic role assumption for cross-account deployments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/s3.mdx#_snippet_14

LANGUAGE: shell
CODE:
```
$ terraform workspace new staging
Created and switched to workspace ""staging""!

...

$ terraform workspace new production
Created and switched to workspace ""production""!
```

LANGUAGE: shell
CODE:
```
$ terraform workspace select staging
$ terraform apply
...
```

----------------------------------------

TITLE: Sample JSON Response for Terraform Provider Download
DESCRIPTION: This JSON object illustrates the typical response received when querying for a Terraform provider's download information. It encompasses essential details such as supported protocols, target operating system and architecture, filename, direct download URL, URLs for SHA256 checksums and their signatures, the SHA256 sum itself, and PGP public keys for cryptographic verification of the downloaded package.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-registry-protocol.mdx#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""protocols"": [""4.0"", ""5.1""],
  ""os"": ""linux"",
  ""arch"": ""amd64"",
  ""filename"": ""terraform-provider-random_2.0.0_linux_amd64.zip"",
  ""download_url"": ""https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_linux_amd64.zip"",
  ""shasums_url"": ""https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS"",
  ""shasums_signature_url"": ""https://releases.hashicorp.com/terraform-provider-random/2.0.0/terraform-provider-random_2.0.0_SHA256SUMS.sig"",
  ""shasum"": ""5f9c7aa76b7c34d722fc9123208e26b22d60440cb47150dd04733b9b94f4541a"",
  ""signing_keys"": {
    ""gpg_public_keys"": [
      {
        ""key_id"": ""51852D87348FFC4C"",
        ""ascii_armor"": ""-----BEGIN PGP PUBLIC KEY BLOCK-----\nVersion: GnuPG v1\n\nmQENBFMORM0BCADBRyKO1MhCirazOSVwcfTr1xUxjPvfxD3hjUwHtjsOy/bT6p9f\nW2mRPfwnq2JB5As+paL3UGDsSRDnK9KAxQb0NNF4+eVhr/EJ18s3wwXXDMjpIifq\nfIm2WyH3G+aRLTLPIpscUNKDyxFOUbsmgXAmJ46Re1fn8uKxKRHbfa39aeuEYWFA\n3drdL1WoUngvED7f+RnKBK2G6ZEpO+LDovQk19xGjiMTtPJrjMjZJ3QXqPvx5wca\nKSZLr4lMTuoTI/ZXyZy5bD4tShiZz6KcyX27cD70q2iRcEZ0poLKHyEIDAi3TM5k\nSwbbWBFd5RNPOR0qzrb/0p9ksKK48IIfH2FvABEBAAG0K0hhc2hpQ29ycCBTZWN1\ncml0eSA8c2VjdXJpdHlAaGFzaG9pY29ycC5jb20+iJATgQQTAQIgJgJTMORM0CGwMG\nCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEFGFLYc0j/xMyWIIAIPhcVqiQ59n\nJc07gjUX0SWBJAxEG1lKxfzS4Xp+57h2xxTpdotGQ1fZwsihaIqow337YHQI3q0i\nSqV534Ms+j/tU7X8sq11xFJIeEVG8PASRCwmryUwghFKPlHETQ8jJ+Y8+1asRydi\npsP3B/5Mjhqv/uOK+Vy3zAyIpyDOMtIpOVfjSpCplVRdtSTFWBu9Em7j5I2HMn1w\nsJZnJgXKpybpibGiiTtmnFLOwibmprSu04rsnP4ncdC2XRD4wIjoyA+4PKgX3sCO\nklEzKryWYBmLkJOMDdo52LttP3279s7XrkLEE7ia0fXa2c12EQ0f0DQ1tGUvyVEW\nWmJVccm5bq25AQ0EUw5EzQEIANaPUY04/g7AmYkOMjaCZ6iTp9hB5Rsj/4ee/ln9\nwArzRO9+3eejLWh53FoN1rO+su7tiXJA5YAzVy6tuolrqjM8DBztPxdLBbEi4V+j\n2tK0dATdBQBHEh3OJApO2UBtcjaZBT31zrG9K55D+CrcgIVEHAKY8Cb4kLBkb5wM\nskn+DrASKU0BNIV1qRsxfiUdQHZfSqtp004nrql1lbFMLFEuiY8FZrkkQ9qduixo\nmTT6f34/oiY+Jam3zCK3RDN/OjuWheIPGj/Qbx9JuNiwgX6yRj7OE1tjUx6d8g9y\n0H1fmLJbb3WZZbuuGFnK6qrE3bGeY8+AWaJAZ37wpWh1p0cAEQEAAYkBHwQYAQIA\nCQUCUw5EzQIbDAAKCRBRhS2HNI/8TJntCAClU7TOO/X053eKF1jqNW4A1qpxctVc\nz8eTcY8Om5O4f6a/rfxfNFKn9Qyja/OG1xWNobETy7MiMXYjaa8uUx5iFy6kMVaP\n0BXJ59NLZjMARGw6lVTYDTIvzqqqwLxgliSDfSnqUhubGwvykANPO+93BBx89MRG\nunNoYGXtPlhNFrAsB1VR8+EyKLv2HQtGCPSFBhrjuzH3gxGibNDDdFQLxxuJWepJ\nEK1UbTS4ms0NgZ2Uknqn1WRU1Ki7rE4sTy68iZtWpKQXZEJa0IGnuI2sSINGcXCJ\noEIgXTMyCILo34Fa/C6VCm2WBgz9zZO8/rHIiQm1J5zqz0DrDwKBUM9C\n=LYpS\n-----END PGP PUBLIC KEY BLOCK-----"",
        ""trust_signature"": """",
        ""source"": ""HashiCorp"",
        ""source_url"": ""https://www.hashicorp.com/security.html""
      }
    ]
  }
}
```

----------------------------------------

TITLE: Define and Pass Multiple Aliased Providers to Module
DESCRIPTION: This example illustrates defining two aliased AWS provider configurations (`aws.usw1` and `aws.usw2`) for different regions. It then shows how to pass these specific aliased configurations to a module named 'tunnel' using the `providers` map, mapping `aws.src` to `aws.usw1` and `aws.dst` to `aws.usw2`.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#_snippet_6

LANGUAGE: hcl
CODE:
```
provider ""aws"" {
  alias  = ""usw1""
  region = ""us-west-1""
}

provider ""aws"" {
  alias  = ""usw2""
  region = ""us-west-2""
}

module ""tunnel"" {
  source    = ""./tunnel""
  providers = {
    aws.src = aws.usw1
    aws.dst = aws.usw2
  }
}
```

----------------------------------------

TITLE: Terraform CLI Documentation Reference
DESCRIPTION: The Terraform CLI is the primary command-line interface for interacting with Terraform. It allows users to provision and manage infrastructure defined in configuration files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/terraform-editions.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Terraform CLI Commands:
  Description: Core commands for interacting with Terraform infrastructure as code.
  Key Commands:
    - terraform init: Initializes a working directory, downloading providers and modules.
    - terraform plan: Creates an execution plan, showing what Terraform will do.
    - terraform apply: Applies the execution plan to create or update infrastructure.
    - terraform destroy: Destroys the infrastructure managed by Terraform.
    - terraform fmt: Reformats configuration files to a standard style.
    - terraform validate: Checks the syntax and internal consistency of configuration files.
  Usage:
    - Commands are executed in the directory containing the Terraform configuration files.
    - Requires a Terraform configuration file (e.g., main.tf).
  Related Resources:
    - CLI Documentation: /terraform/cli
    - Configuration Language Documentation: /terraform/language
```

----------------------------------------

TITLE: Terraform String Formatting Width and Precision Modifiers
DESCRIPTION: Details how to use width and precision modifiers with Terraform format verbs to control the number of characters used to represent a value. Provides examples demonstrating various combinations of width and precision, and notes special considerations for non-numeric types where these modifiers are interpreted differently.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#_snippet_6

LANGUAGE: Terraform
CODE:
```
Sequence | Result
-------- | ----------------------------
`%f`     | Default width and precision.
`%9f`    | Width 9, default precision.
`%.2f`   | Default width, precision 2.
`%9.2f`  | Width 9, precision 2.
```

----------------------------------------

TITLE: Terraform CLI Planning and Application Options
DESCRIPTION: This comprehensive entry details the command-line flags used with `terraform plan` and `terraform apply` to control various aspects of Terraform's planning and execution. It covers options for state synchronization, resource replacement, targeted operations, and input variable management.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
-refresh=false
  - Description: Disables the default behavior of synchronizing the Terraform state with remote objects before checking for configuration changes. This can make the planning operation faster by reducing the number of remote API requests. However, setting `refresh=false` causes Terraform to ignore external changes, which could result in an incomplete or incorrect plan. You cannot use `refresh=false` in refresh-only planning mode because it would effectively disable the entirety of the planning operation.
  - Parameters:
    - false (boolean): Specifies whether to disable the refresh operation.
  - Usage: terraform plan -refresh=false

-replace=ADDRESS
  - Description: Instructs Terraform to plan to replace the resource instance with the given address. This is helpful when one or more remote objects have become degraded, and you can use replacement objects with the same configuration to align with immutable infrastructure patterns. Terraform will use a ""replace"" action if the specified resource would normally cause an ""update"" action or no action at all. Include this option multiple times to replace several objects at once. You cannot use `-replace` with the `-destroy` option, and it is only available from Terraform v0.15.2 onwards. For earlier versions, use `terraform taint` to achieve a similar result.
  - Parameters:
    - ADDRESS (string): The address of the resource instance to replace.
  - Usage: terraform plan -replace='aws_instance.example[0]'

-target=ADDRESS
  - Description: Instructs Terraform to focus its planning efforts only on resource instances that match the given address and on any objects that those instances depend on. Note: Use `-target=ADDRESS` in exceptional circumstances only, such as recovering from mistakes or working around Terraform limitations.
  - Parameters:
    - ADDRESS (string): The address of the resource instance to target.
  - Usage: terraform plan -target='aws_instance.example'

-var 'NAME=VALUE'
  - Description: Sets a value for a single input variable declared in the root module of the configuration. Use this option multiple times to set more than one variable.
  - Parameters:
    - NAME (string): The name of the input variable.
    - VALUE (string): The value to assign to the variable.
  - Usage: terraform plan -var 'region=us-east-1'

-var-file=FILENAME
  - Description: Sets values for potentially many input variables declared in the root module of the configuration, using definitions from a ""tfvars"" file. Use this option multiple times to include values from more than one file.
  - Parameters:
    - FILENAME (string): The path to the tfvars file.
  - Usage: terraform plan -var-file='terraform.tfvars'
```

----------------------------------------

TITLE: Terraform State List Command Reference
DESCRIPTION: Documents the `terraform state list` command, including its syntax, optional flags (`-state`, `-id`), and how it filters resources within a Terraform state file. It explains that resources can be filtered by address patterns and are sorted by module depth.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/list.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Usage: terraform state list [options] [address...]
  - Lists resources within a Terraform state file.
  - If no addresses are given, all resources are listed.
  - Resources are sorted by module depth and then alphabetically.

Parameters:
  [options]: Optional flags to modify command behavior.
  [address...]: One or more patterns in resource addressing format to filter the list.

Flags:
  -state=path:
    - Description: Path to the state file.
    - Default: ""terraform.tfstate""
    - Note: Ignored when remote state is used.
  -id=id:
    - Description: ID of resources to show.
    - Note: Ignored when unset.
```

----------------------------------------

TITLE: Terraform HCL: Nullifying an Ephemeral Variable in Output
DESCRIPTION: This example shows how to define an ephemeral string variable and then use `ephemeralasnull` within an output block. The function ensures that the ephemeral variable's value is converted to `null` before being exposed, preventing sensitive data from being stored in the Terraform state or plan files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/ephemeralasnull.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
variable ""example"" {
  type      = string
  default   = ""test""
  ephemeral = true
}

# This output returns null.
output ""example_output"" {
  value       = ephemeralasnull(var.example)
}
```

----------------------------------------

TITLE: Terraform Backend Interfaces
DESCRIPTION: Describes the key Go interfaces implemented by Terraform backends. The `backend.Backend` interface is fundamental for state storage, while `backendrun.OperationsBackend` extends this for backends capable of executing operations directly.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
backend.Backend:
  - Purpose: The primary interface that all Terraform backends must implement.
  - Role: Defines the contract for how Terraform interacts with state storage mechanisms.

backendrun.OperationsBackend:
  - Purpose: An optional interface implemented by backends that can execute operations (like 'plan' or 'apply') directly within their context.
  - Relationship: Extends the functionality of `backend.Backend`.
  - Implementation: Primarily implemented by the default `local` backend and HCP Terraform backends (`remote`, `cloud`). Most other backends do not implement this and rely on local execution wrapped by `local.Local`.
```

----------------------------------------

TITLE: Configure a Terraform Credentials Helper
DESCRIPTION: This HCL snippet configures a `credstore` credentials helper in Terraform, specifying arguments to be passed to the helper program. This allows Terraform to use an external program for credential management.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/credentials-helpers.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
credentials_helper ""credstore"" {
  args = [""--host=credstore.example.com""]
}
```

----------------------------------------

TITLE: Terraform: Explicit Null for Optional Arguments in List-of-Objects
DESCRIPTION: This example illustrates a key behavior when using list-of-objects expressions for argument declarations. Due to the rule that such declarations fully override any default values, optional arguments cannot be omitted and must be explicitly assigned a value, even if it's `null`, to satisfy the argument's schema.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#_snippet_4

LANGUAGE: hcl
CODE:
```
example = [
  {
    # Cannot omit foo in this case, even though it would be optional in the
    # nested block syntax.
    foo = null
  },
]
```

----------------------------------------

TITLE: Terraform CLI `providers mirror` Command
DESCRIPTION: Explains the `terraform providers mirror` subcommand, a utility for creating local or static website-based provider mirrors. It automates downloading required provider packages and generating the necessary `index.json` and version-specific JSON files compatible with the provider mirror protocol. The command supports merging requirements from multiple configurations into a single mirror directory.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
terraform providers mirror <output_directory>

Description:
  Analyzes the current Terraform configuration to identify required providers.
  Downloads the specified provider packages from their origin registries.
  Places the downloaded packages and generates corresponding JSON index files
  (e.g., `index.json`, version-specific `.json` files) into the specified
  `<output_directory>`. These files are formatted to be compatible with
  the Terraform provider mirror protocol, suitable for static website hosting.

Usage Notes:
  - Can be run multiple times with the same `<output_directory>` to merge
    provider requirements from different Terraform configurations into a
    single mirror.
  - Generated JSON files should be served with `application/json` media type.
```

----------------------------------------

TITLE: Defining Multiple Aliased Provider Configurations in Terraform
DESCRIPTION: This HCL example demonstrates how to define multiple configurations for the same provider in a Terraform root module, including an aliased configuration. This setup is crucial for scenarios where child modules or specific resources need to use different instances of the same provider, enabling explicit provider passing.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#_snippet_4

LANGUAGE: HCL
CODE:
```
# The default ""aws"" configuration is used for AWS resources in the root
# module where no explicit provider instance is selected.
provider ""aws"" {
  region = ""us-west-1""
}

# An alternate configuration is also defined for a different
# region, using the alias ""usw2"".
provider ""aws"" {
  alias  = ""usw2""
  region = ""us-west-2""
}
```

----------------------------------------

TITLE: Execute Terraform Plan and Generate Configuration Output
DESCRIPTION: This shell command initiates a Terraform plan with configuration generation enabled. It shows the console output, including the import preparation, state refresh, the planned import action, and the generated HCL configuration for the imported resource. It also highlights the experimental nature of the feature.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#_snippet_2

LANGUAGE: Shell
CODE:
```
$ terraform plan -generate-config-out=generated.tf

aws_iot_thing.bar: Preparing import... [id=foo]
aws_iot_thing.bar: Refreshing state... [id=foo]

Terraform will perform the following actions:

  # aws_iot_thing.bar will be imported
  # (config will be generated)
    resource ""aws_iot_thing"" ""bar"" {
        arn               = ""arn:aws:iot:eu-west-1:1234567890:thing/foo""
        attributes        = {}
        default_client_id = ""foo""
        id                = ""foo""
        name              = ""foo""
        version           = 1
    }

Plan: 1 to import, 0 to add, 0 to change, 0 to destroy.

╷
│ Warning: Config generation is experimental
│ 
│ Generating configuration during import is currently experimental, and the generated configuration format may change in future versions.
╵

──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────

Terraform has generated configuration and written it to generated.tf. Please review the configuration and edit it as necessary before adding it to version control.
```

----------------------------------------

TITLE: Configure and Select Terraform Provider Alias
DESCRIPTION: This HCL example demonstrates how to define a default and an aliased provider configuration for Google Cloud. It then shows how to explicitly select the aliased provider configuration (`google.europe`) for a `google_compute_instance` resource using the `provider` meta-argument, overriding Terraform's default provider selection based on resource type.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/resource-provider.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
# default configuration
provider ""google"" {
  region = ""us-central1""
}

# alternate configuration, whose alias is ""europe""
provider ""google"" {
  alias  = ""europe""
  region = ""europe-west1""
}

resource ""google_compute_instance"" ""example"" {
  # This ""provider"" meta-argument selects the google provider
  # configuration whose alias is ""europe"", rather than the
  # default configuration.
  provider = google.europe

  # ...
}
```

----------------------------------------

TITLE: Review Terraform execution plan before applying
DESCRIPTION: This snippet shows the output when `terraform apply` is run, indicating that an execution plan has been generated for review. This is a crucial step for confirming intended infrastructure changes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#_snippet_5

LANGUAGE: sh
CODE:
```
$ terraform apply

An execution plan has been generated and is shown below.
# ...
```

----------------------------------------

TITLE: Terraform State Manager Interfaces and Implementations
DESCRIPTION: This section details the interfaces and implementations responsible for storing and retrieving Terraform state snapshots. It describes the `statemgr` package interfaces, particularly `statemgr.Full`, and the default `statemgr.Filesystem` implementation for local state, as well as the `states.State` object representing a state snapshot.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
statemgr Package Interfaces
  - Description: Defines interfaces for state managers responsible for storing and retrieving Terraform state snapshots.
  - Package: `github.com/hashicorp/terraform/internal/states/statemgr`

statemgr.Full
  - Description: A comprehensive interface that most practical state managers implement.
  - Purpose: Provides the full set of operations for state management, typically provided by a backend.

statemgr.Filesystem
  - Description: The default implementation of a state manager, used by the 'local' backend.
  - Purpose: Manages state stored in the `terraform.tfstate` local file.

states.State
  - Description: Object representing a state snapshot.
  - Package: `github.com/hashicorp/terraform/internal/states`
  - Purpose: Accepted and returned by state managers. Serialized using a JSON format for storage.
```

----------------------------------------

TITLE: Define Multiple Aliased AWS Providers in Terraform HCL
DESCRIPTION: This example illustrates how to define multiple configurations for the same Terraform provider using aliasing. It sets up a default AWS provider in `us-east-1` and an aliased provider named `west` in `us-west-2`. This pattern is essential for managing resources in different regions or accounts within a single Terraform configuration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_11

LANGUAGE: hcl
CODE:
```
provider ""aws"" {
  region = ""us-east-1""
}

provider ""aws"" {
  alias  = ""west""
  region = ""us-west-2""
}
```

----------------------------------------

TITLE: Calculate Cartesian product for environments and applications in HCL
DESCRIPTION: Demonstrates the primary use case of `setproduct` to generate all combinations of environments and applications, resulting in a list of lists where each inner list represents a unique combination.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
> setproduct([""development"", ""staging"", ""production""], [""app1"", ""app2""])
[
  [
    ""development"",
    ""app1"",
  ],
  [
    ""development"",
    ""app2"",
  ],
  [
    ""staging"",
    ""app1"",
  ],
  [
    ""staging"",
    ""app2"",
  ],
  [
    ""production"",
    ""app1"",
  ],
  [
    ""production"",
    ""app2"",
  ],
]
```

----------------------------------------

TITLE: Terraform Console: Explicitly Revealing Sensitive Data with `nonsensitive`
DESCRIPTION: This example illustrates how the `nonsensitive` function can be used in the Terraform console to explicitly reveal the full content of sensitive variables and local values, including nested sensitive attributes. It underscores the user's responsibility in handling such data, as using `nonsensitive` will expose the values.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/nonsensitive.mdx#_snippet_3

LANGUAGE: Terraform Console
CODE:
```
> nonsensitive(var.mixed_content_json)
<<EOT
{
  ""username"": ""zqb"",
  ""password"": ""p4ssw0rd""
}
EOT
> nonsensitive(local.mixed_content)
{
  ""password"" = ""p4ssw0rd""
  ""username"" = ""zqb""
}
> nonsensitive(local.mixed_content[""password""])
""p4ssw0rd""
```

----------------------------------------

TITLE: Understanding Terraform Test `parallel = false` Synchronization
DESCRIPTION: This explanation clarifies how setting `parallel = false` in a `run` block acts as a synchronization point within Terraform tests. It ensures all preceding parallel runs complete before the sequential block starts, and then subsequent runs only begin after the sequential block finishes, effectively dividing the workflow into distinct phases.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#_snippet_34

LANGUAGE: APIDOC
CODE:
```
Note: When you configure a series of runs that have `parallel=true` in a test file and include a single run with `parallel=false` you create synchronization point that divides the workflow into two groups. All runs before the `parallel=false` run must complete first. Then, after the run with `parallel=false` completes, the subsequent runs begin.

Run A (parallel: true)
Run B (parallel: true)
Run C (parallel: false)
Run D (parallel: true)
Run E (parallel: true)

Runs A and B execute simultaneously. Run C waits until both A and B are done before starting. Finally, runs D and E run in parallel, but only after C completes.
```

----------------------------------------

TITLE: Expanding List Arguments in Terraform Function Calls
DESCRIPTION: Shows how to expand a list or tuple into separate arguments for a Terraform function using the `...` symbol, useful when arguments are already grouped in a collection.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/function-calls.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
min([55, 2453, 2]...)
```

----------------------------------------

TITLE: Terraform CLI: Generate JSON Output
DESCRIPTION: Describes the `terraform show` command used to generate machine-readable JSON representations of Terraform plan or state files. This command is essential for programmatic analysis of Terraform's output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/json-format.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform show -json <FILE>
  - Parameters:
    - -json: (Flag) Output in JSON format.
    - <FILE>: (Path) Path to the plan file or state file.
  - Returns: JSON representation of the plan or state.
  - Usage Notes: This command is used for inspecting Terraform's internal data structures programmatically. The output format version is indicated by `format_version` (e.g., ""1.0""), with minor versions for backward-compatible changes and major versions for breaking changes.
```

----------------------------------------

TITLE: Using depends_on for hidden dependencies with AWS IAM and EC2
DESCRIPTION: This HCL example demonstrates how to use the `depends_on` meta-argument in Terraform to explicitly declare a hidden dependency. It shows an `aws_instance` resource depending on an `aws_iam_role_policy` that Terraform cannot automatically infer through expression references, ensuring the policy is in place before the instance is created. It also illustrates automatically inferred dependencies.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/depends_on.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
resource ""aws_iam_role"" ""example"" {
  name = ""example""

  # assume_role_policy is omitted for brevity in this example. Refer to the
  # documentation for aws_iam_role for a complete example.
  assume_role_policy = ""...""
}

resource ""aws_iam_instance_profile"" ""example"" {
  # Because this expression refers to the role, Terraform can infer
  # automatically that the role must be created first.
  role = aws_iam_role.example.name
}

resource ""aws_iam_role_policy"" ""example"" {
  name   = ""example""
  role   = aws_iam_role.example.name
  policy = jsonencode({
    ""Statement"" = [{
      # This policy allows software running on the EC2 instance to
      # access the S3 API.
      ""Action"" = ""s3:*"",
      ""Effect"" = ""Allow"",
    }],
  })
}

resource ""aws_instance"" ""example"" {
  ami           = ""ami-a1b2c3d4""
  instance_type = ""t2.micro""

  # Terraform can infer from this that the instance profile must
  # be created before the EC2 instance.
  iam_instance_profile = aws_iam_instance_profile.example

  # However, if software running in this EC2 instance needs access
  # to the S3 API in order to boot properly, there is also a ""hidden""
  # dependency on the aws_iam_role_policy that Terraform cannot
  # automatically infer, so it must be declared explicitly:
  depends_on = [
    aws_iam_role_policy.example
  ]
}
```

----------------------------------------

TITLE: Graphviz DOT for Simple Terraform Resource Creation
DESCRIPTION: Defines a Graphviz DOT graph illustrating the creation order of Terraform resources A, B, and C, where B depends on A, and C depends on B. Edges represent dependencies, not operational flow, reflecting Terraform's internal graph structure.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_0

LANGUAGE: dot
CODE:
```
digraph create {
    subgraph nodes {
        rank=same;
        a [label=""A create""];
        b [label=""B create""];
        c [label=""C create""];
        b -> c [dir=back];
        a -> b [dir=back];
    }
}
```

----------------------------------------

TITLE: Legacy Command Line Arguments for Terraform Local Backend State Management
DESCRIPTION: Describes legacy command-line arguments used with the Terraform 'local' backend for overriding state file paths during read and write operations, and for controlling backup file creation. These options are preserved for backward compatibility but are not recommended for new systems.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/local.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
-state=FILENAME
  - Description: Overrides the state filename when reading the prior state snapshot.
-state-out=FILENAME
  - Description: Overrides the state filename when writing new state snapshots. If used without -state, Terraform will use the -state filename for both, overwriting the input file.
-backup=FILENAME
  - Description: Overrides the default filename for backup files when writing new state. If used with -state, -state filename is used as a prefix. Use -backup=- to disable backup creation.
```

----------------------------------------

TITLE: Terraform Root Module with Implicit Provider Configuration
DESCRIPTION: This HCL example shows a root Terraform module configuring a default AWS provider and instantiating a child module. This setup facilitates implicit provider inheritance, where the child module automatically uses the parent's default provider configuration without needing explicit declaration.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
provider ""aws"" {
  region = ""us-west-1""
}

module ""child"" {
  source = ""./child""
}
```

----------------------------------------

TITLE: Terraform Expression Evaluation Interfaces: EvaluationScope and Referenceable
DESCRIPTION: Details the two key interfaces, `EvaluationScope` and `Referenceable`, that govern how expressions are resolved and values are provided during Terraform's language runtime evaluation process. It explains their responsibilities and how they interact.
SOURCE: https://github.com/hashicorp/terraform/blob/main/internal/stacks/stackruntime/internal/stackeval/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
EvaluationScope (interface):
  - Purpose: Implemented by objects that can have expressions evaluated within their context.
  - Responsibilities:
    - Translates a `stackaddrs.Reference` (decoded reference expression) into an object implementing `Referenceable`.
    - Checks if a syntactically valid reference refers to a declared object.
  - Key Method:
    - ResolveExpressionReference: Resolves a `stackaddrs.Reference` to a `Referenceable` object.
  - Implementations: `Stack` (global scope), `Component`, `StackCall`, `Provider` (child scopes extending global with local context like `each.key`, `each.value`, `self`).

Referenceable (interface):
  - Purpose: Implemented by objects that can be referred to in expressions (e.g., `var.foo` refers to an `InputVariable`).
  - Responsibilities:
    - Returns a `cty.Value` to insert into the expression scope for a particular `EvalPhase`.
    - Should return an unknown value (e.g., `cty.DynamicVal`) if a concrete value cannot be returned, to allow evaluation to continue for diagnostics.
  - Key Method:
    - ExprReferenceValue(EvalPhase): Returns the `cty.Value` for the object based on the evaluation phase (e.g., `PlanPhase` vs. `ApplyPhase`).
  - Example Implementations: `InputVariable`, `Component` (returns output values from plan or final state).
```

----------------------------------------

TITLE: Configure Terraform Azure Backend with OIDC for GitHub
DESCRIPTION: Example HCL configuration for the Terraform Azure backend, demonstrating how to enable OpenID Connect (OIDC) authentication and specify essential backend parameters like storage account name, container, and key. This setup is particularly suited for GitHub Actions where ID Token environment variables are automatically handled.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
terraform {
  backend ""azurerm"" {
    use_oidc             = true                                    # Can also be set via `ARM_USE_OIDC` environment variable.
    use_azuread_auth     = true                                    # Can also be set via `ARM_USE_AZUREAD` environment variable.
    tenant_id            = ""00000000-0000-0000-0000-000000000000""  # Can also be set via `ARM_TENANT_ID` environment variable.
    client_id            = ""00000000-0000-0000-0000-000000000000""  # Can also be set via `ARM_CLIENT_ID` environment variable.
    storage_account_name = ""abcd1234""                              # Can be passed via `-backend-config=`""storage_account_name=<storage account name>""` in the `init` command.
    container_name       = ""tfstate""                               # Can be passed via `-backend-config=`""container_name=<container name>""` in the `init` command.
    key                  = ""prod.terraform.tfstate""                # Can be passed via `-backend-config=`""key=<blob key name>""` in the `init` command.
  }
}
```

----------------------------------------

TITLE: Configure Terraform module source from Git repository via HTTPS or SSH
DESCRIPTION: This HCL snippet demonstrates how to declare a Terraform module source from a Git repository. It shows examples for both HTTPS and SSH protocols, using the `git::` prefix followed by a standard Git URL. Authentication relies on local Git configuration, respecting SSH keys or configured credential storage.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#_snippet_6

LANGUAGE: hcl
CODE:
```
module ""vpc"" {
  source = ""git::https://example.com/vpc.git""
}

module ""storage"" {
  source = ""git::ssh://username@example.com/storage.git""
}
```

----------------------------------------

TITLE: Terraform Provider Block JSON Mapping
DESCRIPTION: Illustrates the JSON structure for 'provider' blocks. The 'alias' and 'version' meta-arguments are literal strings. It also demonstrates how multiple configurations for the same provider are represented as an array of objects.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#_snippet_10

LANGUAGE: json
CODE:
```
{
  ""provider"": {
    ""aws"": [
      {
        ""region"": ""us-east-1""
      },
      {
        ""alias"": ""usw1"",
        ""region"": ""us-west-1""
      }
    ]
  }
}
```

----------------------------------------

TITLE: Terraform `filebase64` Function Reference
DESCRIPTION: Comprehensive documentation for the `filebase64` function in Terraform's configuration language. It reads the contents of a file at a given path and returns them as a base64-encoded string, suitable for handling binary data. The function uses standard Base64 (RFC 4648 section 4) and only works with static files present at the start of a Terraform run.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filebase64.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
filebase64(path)
  - Reads the contents of the file at the given path and returns them as a base64-encoded string.
  - Parameters:
    - path: The path to the file to be read.
  - Returns: A Base64 representation of the raw bytes in the given file.
  - Limitations: Can only be used with static files on disk at the beginning of a Terraform run; cannot be used with dynamically generated files.
  - Related Functions:
    - file: Reads file contents as UTF-8 text.
    - base64decode: Decodes a Base64 string.
```

----------------------------------------

TITLE: Pass List Variable to Terraform in Unix Shell and Windows Command Prompt
DESCRIPTION: Shows how to pass a list variable to Terraform using the `-var` option, requiring a valid Terraform language expression for the value. Examples are provided for both Unix-style shells (using single quotes) and Windows Command Prompt (using double quotes and escaped inner quotes).
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#_snippet_7

LANGUAGE: shell
CODE:
```
terraform plan -var 'name=[""a"", ""b"", ""c""]'
```

LANGUAGE: cmd
CODE:
```
terraform plan -var ""name=[\""a\"", \""b\"", \""c\""]""
```

----------------------------------------

TITLE: Accessing Resource Attributes in Terraform
DESCRIPTION: Demonstrates the syntax used within Terraform configurations to reference attributes of resources. This allows for dynamic configuration and dependency management between infrastructure components.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/behavior.mdx#_snippet_0

LANGUAGE: terraform
CODE:
```
<RESOURCE TYPE>.<NAME>.<ATTRIBUTE>
```

----------------------------------------

TITLE: Using terraform_data for Cluster Bootstrapping with Remote Execution
DESCRIPTION: This HCL example demonstrates how to use `terraform_data` to execute a remote bootstrap script on an AWS instance cluster. The `triggers_replace` argument ensures re-provisioning upon instance replacement, while the `connection` block specifies how to connect to the target host. The `remote-exec` provisioner runs an inline script, passing the private IPs of all cluster nodes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/null_resource.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""cluster"" {
  count = 3

  # ...
}

resource ""terraform_data"" ""cluster"" {
  # Replacement of any instance of the cluster requires re-provisioning
  triggers_replace = aws_instance.cluster[*].id

  # Bootstrap script can run on any instance of the cluster
  # So we just choose the first in this case
  connection {
    host = aws_instance.cluster[0].public_ip
  }

  provisioner ""remote-exec"" {
    # Bootstrap script called with private_ip of each node in the cluster
    inline = [
      ""bootstrap-cluster.sh ${join("" "", aws_instance.cluster[*].private_ip)}"",
    ]
  }
}
```

----------------------------------------

TITLE: Using coalesce with List Expansion in Terraform
DESCRIPTION: Illustrates how to apply the `coalesce` function to elements of a list by expanding the list using the `...` symbol, effectively treating list elements as individual arguments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/coalesce.mdx#_snippet_1

LANGUAGE: Shell
CODE:
```
> coalesce(["""", ""b""]...)
b
```

----------------------------------------

TITLE: Remove Specific Terraform for_each Resource Instance Across Shells
DESCRIPTION: This snippet demonstrates how to remove a specific instance of a Terraform resource identified by `for_each` using the `terraform state rm` command. It provides examples for different shell environments, illustrating the required quoting and escaping for the resource address string, which includes special characters like brackets and quotes.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/state/rm.mdx#_snippet_5

LANGUAGE: shell
CODE:
```
$ terraform state rm 'packet_device.worker[""example""]'
```

LANGUAGE: shell
CODE:
```
$ terraform state rm packet_device.worker[\""example\""]
```

LANGUAGE: shell
CODE:
```
$ terraform state rm 'packet_device.worker[\""example\""]'
```

----------------------------------------

TITLE: Terraform HCL: Passing Aliased Providers to Counted Modules
DESCRIPTION: This HCL example demonstrates how to explicitly pass an aliased AWS provider configuration (`aws.east`) to a module that uses the `count` argument. It shows the definition of multiple AWS providers in the root module and how the `providers` argument within the `module` block overrides the default provider for the child module's resources.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/develop/providers.mdx#_snippet_9

LANGUAGE: HCL
CODE:
```
provider ""aws"" {
  region = ""us-west-1""
}

provider ""aws"" {
  region = ""us-east-1""
  alias  = ""east""
}

module ""child"" {
  count = 2
  providers = {
    # By default, the child module would use the
    # default (unaliased) AWS provider configuration
    # using us-west-1, but this will override it
    # to use the additional ""east"" configuration
    # for its resources instead.
    aws = aws.east
  }
}
```

----------------------------------------

TITLE: Referencing a Public Terraform Registry Module
DESCRIPTION: This HCL snippet demonstrates how to reference a module from the public Terraform Registry. It specifies the module source using the `<NAMESPACE>/<NAME>/<PROVIDER>` format and includes a specific version constraint for precise module selection.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
module ""consul"" {
  source = ""hashicorp/consul/aws""
  version = ""0.1.0""
}
```

----------------------------------------

TITLE: Define and Use Local Values in Terraform HCL
DESCRIPTION: This snippet demonstrates how to define and use local values in Terraform HCL. Local values allow you to assign a name to an expression, making it reusable across multiple resources. This example creates a `name_suffix` local value by combining region and environment variables, then appends it to an AWS instance name for consistent naming conventions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/style.mdx#_snippet_10

LANGUAGE: hcl
CODE:
```
locals {
  name_suffix = ""${var.region}-${var.environment}""
}

resource ""aws_instance"" ""web"" {
  ami           = data.aws_ami.ubuntu.id
  instance_type = ""t3.micro""

  tags = {
    Name = ""web-${local.name_suffix}""
  }
}
```

----------------------------------------

TITLE: Terraform UI Message hook Object API Reference
DESCRIPTION: Comprehensive documentation for the `hook` object structure across various Terraform UI message types. It details the specific keys and their meanings for `apply_complete`, `apply_errored`, `provision_start`, `provision_progress`, `provision_complete`, and `provision_errored` messages.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_16

LANGUAGE: APIDOC
CODE:
```
Terraform UI Message General Structure:
  - @level (string): Log level (e.g., ""info"")
  - @message (string): Human-readable log message
  - @module (string): Source module (e.g., ""terraform.ui"")
  - @timestamp (string): ISO 8601 timestamp
  - hook (object): Contains event-specific details; structure varies by 'type'
  - type (string): The type of UI message (e.g., ""apply_complete"", ""provision_start"")

hook object for type: ""apply_complete"" and ""apply_errored"":
  - resource (object): A `resource` object identifying the resource.
  - action (string): The action taken for the resource. Values: `noop`, `create`, `read`, `update`, `replace`, `delete`.
  - elapsed_seconds (integer): Time elapsed since the apply operation started, in seconds.

hook object for type: ""provision_start"", ""provision_complete"", and ""provision_errored"":
  - resource (object): A `resource` object identifying the resource.
  - provisioner (string): The type of provisioner (e.g., ""local-exec"").

hook object for type: ""provision_progress"":
  - resource (object): A `resource` object identifying the resource.
  - provisioner (string): The type of provisioner.
  - output (string): The output log from the provisioner.
```

----------------------------------------

TITLE: Configure Terraform Remote State Data Source for OCI Backend
DESCRIPTION: This HCL snippet demonstrates how to declare a `terraform_remote_state` data source to retrieve state from an OCI backend. It specifies the backend type as 'oci' and provides configuration details such as bucket, key, namespace, and OCI API key authentication parameters. This configuration also serves as an example of the data source's output.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/oci.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
data ""terraform_remote_state"" ""mystate"" {
  backend = ""oci""
  config = {
    bucket            = ""mybucket""
    key               = ""path/to/my/key""
    namespace         = ""my-namespace""
    tenancy_ocid      = ""ocid1.tenancy.oc1..xxxxxxx""
    user_ocid         = ""ocid1.user.oc1..xxxxxxxx""
    fingerprint       = ""xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx""
    private_key_path  = ""~/.oci/oci_api_key.pem""
    region            = ""us-ashburn-1""
  }
}
```

----------------------------------------

TITLE: Define a Terraform Check Block with HTTP Data Source
DESCRIPTION: This HCL example demonstrates how to define a `check` block in Terraform to validate infrastructure. It uses a scoped `http` data source to fetch the status code from `https://www.terraform.io` and asserts that the returned status code is `200`. This check runs after plan/apply operations to provide continuous verification without blocking the main workflow.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/checks/index.mdx#_snippet_0

LANGUAGE: HCL
CODE:
```
check ""health_check"" {
  data ""http"" ""terraform_io"" {
    url = ""https://www.terraform.io""
  }

  assert {
    condition = data.http.terraform_io.status_code == 200
    error_message = ""${data.http.terraform_io.url} returned an unhealthy status code""
  }
}
```

----------------------------------------

TITLE: Generate Terraform Configuration with `terraform plan`
DESCRIPTION: This command executes a Terraform plan, instructing it to generate HCL configuration for resources specified in `import` blocks that are not yet present in the state. The generated configuration is written to the specified output file.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#_snippet_0

LANGUAGE: Shell
CODE:
```
terraform plan -generate-config-out=""generated_resources.tf""
```

----------------------------------------

TITLE: Validate Terraform Input Variables with Custom Conditions
DESCRIPTION: These HCL examples demonstrate how to add `validation` blocks to Terraform input variables. They show two methods for validating an `image_id`: one using string length and substring checks, and another using a regular expression with the `can` function to handle potential expression failures. Both provide custom error messages for invalid inputs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
variable ""image_id"" {
  type        = string
  description = ""The id of the machine image (AMI) to use for the server.""

  validation {
    condition     = length(var.image_id) > 4 && substr(var.image_id, 0, 4) == ""ami-""
    error_message = ""The image_id value must be a valid AMI id, starting with \""ami-\"".""
  }
}
```

LANGUAGE: hcl
CODE:
```
variable ""image_id"" {
  type        = string
  description = ""The id of the machine image (AMI) to use for the server.""

  validation {
    # regex(...) fails if it cannot find a match
    condition     = can(regex(""^ami-"", var.image_id))
    error_message = ""The image_id value must be a valid AMI id, starting with \""ami-\"".""
  }
}
```

----------------------------------------

TITLE: Terraform Check Block with HTTP Health Assertion
DESCRIPTION: This example demonstrates how to define a `check` block in Terraform to validate the health of a web service. It utilizes an `http` data source to fetch the status code of `terraform.io` and an `assert` block to ensure the status code is 200, providing a custom error message if the condition fails. This check executes at the end of the plan and apply stages.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
check ""health_check"" {
  data ""http"" ""terraform_io"" {
    url = ""https://www.terraform.io""
  }

  assert {
    condition = data.http.terraform_io.status_code == 200
    error_message = ""${data.http.terraform_io.url} returned an unhealthy status code""
  }
}
```

----------------------------------------

TITLE: Define Terraform `import` Block
DESCRIPTION: This HCL snippet demonstrates how to define an `import` block in Terraform. It specifies the target resource address (`to`) in the state file and the external resource's `id` to be imported. This block is crucial for Terraform to identify which resource to import and potentially generate configuration for.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/import/generating-configuration.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
import {
  to = aws_iot_thing.bar
  id = ""foo""
}
```

----------------------------------------

TITLE: Define a Postcondition for AWS AMI Data Source
DESCRIPTION: This HCL example demonstrates how to use a `postcondition` block within a `data` block's `lifecycle` to validate the attributes of a retrieved AWS AMI. It ensures that the AMI identified by `var.aws_ami_id` has a 'Component' tag with the value 'nomad-server', preventing the use of an incorrect AMI. The `self` object is used to refer to the data source's own attributes for validation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
data ""aws_ami"" ""example"" {
  id = var.aws_ami_id

  lifecycle {
    # The AMI ID must refer to an existing AMI that has the tag ""nomad-server"".
    postcondition {
      condition     = self.tags[""Component""] == ""nomad-server""
      error_message = ""tags[\""Component\""] must be \""nomad-server\"".""
    }
  }
}
```

----------------------------------------

TITLE: Manage Ephemeral DB Password with AWS Secrets Manager and Write-Only Arguments
DESCRIPTION: This comprehensive HCL example demonstrates generating a random password using an `ephemeral` resource, storing it securely in AWS Secrets Manager, and then dynamically passing it to the `password_wo` argument of an `aws_db_instance`. It showcases how `ephemeral` resources can be used to handle sensitive, write-only data that is not stored in Terraform state, ensuring secure and dynamic password management.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/write-only.mdx#_snippet_5

LANGUAGE: hcl
CODE:
```
ephemeral ""random_password"" ""db_password"" {
  length           = 16
  override_special = ""!#$%&*()-_=+[]{}<>:?""
}

resource ""aws_secretsmanager_secret"" ""db_password"" {
  name = ""db_password""
}

resource ""aws_secretsmanager_secret_version"" ""db_password"" {
  secret_id                = aws_secretsmanager_secret.db_password.id
  secret_string_wo         = ephemeral.random_password.db_password.result
  secret_string_wo_version = 1
}

ephemeral ""aws_secretsmanager_secret_version"" ""db_password"" {
  secret_id = aws_secretsmanager_secret_version.db_password.secret_id
}

resource ""aws_db_instance"" ""example"" {
  instance_class      = ""db.t3.micro""
  allocated_storage   = ""5""
  engine              = ""postgres""
  username            = ""example""
  skip_final_snapshot = true
  password_wo         = ephemeral.aws_secretsmanager_secret_version.db_password.secret_string
  password_wo_version = aws_secretsmanager_secret_version.db_password.secret_string_wo_version
}
```

----------------------------------------

TITLE: Configure Terraform AzureRM Backend with Client Secret Authentication (Deprecated)
DESCRIPTION: This HCL example demonstrates configuring the AzureRM backend using an Azure Active Directory Service Principal's client ID and client secret for authentication. This method is retained for backward compatibility but is discouraged for new workloads due to the need for secret management. It specifies the tenant ID, client credentials, and state storage details.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/azurerm.mdx#_snippet_9

LANGUAGE: hcl
CODE:
```
terraform {
  backend ""azurerm"" {
    use_azuread_auth     = true
    tenant_id            = ""00000000-0000-0000-0000-000000000000""
    client_id            = ""00000000-0000-0000-0000-000000000000""
    client_secret        = ""************************************""
    storage_account_name = ""abcd1234""
    container_name       = ""tfstate""
    key                  = ""prod.terraform.tfstate""
  }
}
```

----------------------------------------

TITLE: Graphviz DOT for Simple Terraform Resource Destruction
DESCRIPTION: Shows the inverse dependency graph for Terraform resource destruction (C, B, A) using Graphviz DOT. Edges indicate dependencies for destruction, leading to an inverse operational order compared to creation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/destroying.md#_snippet_2

LANGUAGE: dot
CODE:
```
digraph destroy {
    subgraph nodes {
        rank=same;
        a [label=""A destroy""];
        b [label=""B destroy""];
        c [label=""C destroy""];
        a -> b;
        b -> c;
    }
}
```

----------------------------------------

TITLE: Securely passing database password using Terraform write-only arguments
DESCRIPTION: This HCL example demonstrates how to use Terraform's write-only arguments (`password_wo`) in conjunction with `ephemeral` resources and AWS Secrets Manager to securely pass a database password to an `aws_db_instance` without storing it in Terraform state. The password is generated ephemerally, stored temporarily in Secrets Manager, and then referenced by the database instance, ensuring it's discarded after the operation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/ephemeral/index.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
ephemeral ""random_password"" ""db_password"" {
  length           = 16
  override_special = ""!#$%&*()-_=+[]{}<>:?""
}

resource ""aws_secretsmanager_secret"" ""db_password"" {
  name = ""db_password""
}

resource ""aws_secretsmanager_secret_version"" ""db_password"" {
  secret_id                = aws_secretsmanager_secret.db_password.id
  secret_string_wo         = ephemeral.random_password.db_password.result
  secret_string_wo_version = 1
}

ephemeral ""aws_secretsmanager_secret_version"" ""db_password"" {
  secret_id = aws_secretsmanager_secret_version.db_password.secret_id
}

resource ""aws_db_instance"" ""example"" {
  instance_class      = ""db.t3.micro""
  allocated_storage   = ""5""
  engine              = ""postgres""
  username            = ""example""
  skip_final_snapshot = true
  password_wo         = ephemeral.aws_secretsmanager_secret_version.db_password.secret_string
  password_wo_version = aws_secretsmanager_secret_version.db_password.secret_string_wo_version
}
```

----------------------------------------

TITLE: Define a local-exec provisioner in Terraform
DESCRIPTION: Demonstrates how to add a `local-exec` provisioner block within an `aws_instance` resource in Terraform to execute a command on the local machine after resource creation. It shows referencing the parent resource's attributes using the special `self` object.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#_snippet_2

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...

  provisioner ""local-exec"" {
    command = ""echo The server's IP address is ${self.private_ip}""
  }
}
```

----------------------------------------

TITLE: Terraform Configuration Loading and HCL Types
DESCRIPTION: This snippet outlines the structures and entry points for loading and processing Terraform configurations. It covers the `configs` package for representing the overall configuration, the `configload.Loader` for handling module installation and loading, and the underlying HCL types used for deferred interpretation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
configs.Config
  - Description: Represents a whole Terraform configuration, including the root module and all descendant modules.
  - Package: `github.com/hashicorp/terraform/internal/configs`

configload.Loader
  - Description: Main entry point for loading Terraform configurations.
  - Package: `github.com/hashicorp/terraform/internal/configs/configload`
  - Purpose: Handles details of installing child modules during `terraform init` and locating them for loading.
  - Output: Produces a single `configs.Config` object representing the entire configuration.

hcl.Body
  - Description: Low-level HCL type representing a block of HCL configuration.
  - Package: `github.com/hashicorp/hcl/v2`
  - Purpose: Used to represent parts of the configuration that cannot be interpreted until graph walking.

hcl.Expression
  - Description: Low-level HCL type representing an expression within HCL configuration.
  - Package: `github.com/hashicorp/hcl/v2`
  - Purpose: Used to represent parts of the configuration that cannot be interpreted until graph walking.
```

----------------------------------------

TITLE: Launch Terraform with Delve Headless Debug Server
DESCRIPTION: Executes the compiled Terraform binary under Delve, starting a headless debug server on a specified port (e.g., 2345). This command allows you to debug a specific Terraform operation (e.g., `apply`) in a non-interactive mode, enabling remote connections from debug clients like VS Code or the Delve CLI. The `--log` flag provides verbose logging for the debug server.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/debugging.md#_snippet_1

LANGUAGE: Shell
CODE:
```
dlv exec $HOME/go/bin/terraform --headless --listen :2345 --log -- apply
```

----------------------------------------

TITLE: Terraform Provider Configuration Referencing Test Run Outputs
DESCRIPTION: This example illustrates how a Terraform provider (AWS) can dynamically retrieve credentials (access_key, secret_key) from the outputs of a preceding `run` block (`vault_setup`). This feature, available from Terraform v1.7.0, enables complex setup flows where one `run` block prepares data (e.g., fetching secrets from Vault) for subsequent provider initialization, allowing for more secure and dynamic test environments.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/tests/index.mdx#_snippet_14

LANGUAGE: HCL
CODE:
```
provider ""vault"" {
  # ... vault configuration ...
}

provider ""aws"" {
  region     = ""us-east-1""

  # The `aws` provider can reference the outputs of the ""vault_setup"" run block.
  access_key = run.vault_setup.aws_access_key
  secret_key = run.vault_setup.aws_secret_key
}

run ""vault_setup"" {
  module {
    # This module should only include reference to the Vault provider. Terraform
    # will automatically work out which providers to supply based on the module
    # configuration. The tests will error if a run block requires access to a
    # provider that references outputs from a run block that has not executed.
    source = ""./testing/vault-setup""
  }
}

run ""use_aws_provider"" {
  # This run block can then use both the `aws` and `vault` providers, as the
  # previous run block provided all the data required for the `aws` provider.
}
```

----------------------------------------

TITLE: Define Terraform Destroy-Time Local-Exec Provisioner
DESCRIPTION: This HCL snippet demonstrates how to define a `local-exec` provisioner that runs when the associated `aws_instance` resource is destroyed. It uses the `when = destroy` argument to specify the execution timing, ensuring the command runs before resource removal.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/resources/provisioners/syntax.mdx#_snippet_3

LANGUAGE: HCL
CODE:
```
resource ""aws_instance"" ""web"" {
  # ...

  provisioner ""local-exec"" {
    when    = destroy
    command = ""echo 'Destroy-time provisioner'""
  }
}
```

----------------------------------------

TITLE: Terraform `file` Function Reference
DESCRIPTION: Comprehensive documentation for the `file` function in Terraform HCL, detailing its signature, parameters, return value, UTF-8 handling, and limitations regarding dynamic file generation. Includes related functions for file operations.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/file.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
file(path)
  - Reads the contents of a file at the given path and returns them as a string.
  - Interprets file contents as UTF-8 encoded text. Will produce an error if the file contains invalid UTF-8 sequences.
  - Can only be used with files that already exist on disk at the beginning of a Terraform run.
  - Does not participate in the dependency graph; cannot be used with files generated dynamically during a Terraform operation.
  - Parameters:
    - path: (string) The path to the file to read.
  - Returns: (string) The content of the file.
  - Related Functions:
    - filebase64: Reads file contents and returns raw bytes Base64-encoded.
    - fileexists: Determines whether a file exists at a given path.
    - templatefile: Renders using a file from disk as a template.
  - Related Data Sources:
    - local_file data source: Can be used to read files while respecting resource dependencies for dynamically generated files.
```

----------------------------------------

TITLE: Terraform Test Interrupt Output JSON Example
DESCRIPTION: This JSON snippet demonstrates the ""test_interrupt"" message, generated when ""terraform test"" is canceled or impeded. It details resources that Terraform could not destroy (""state"" for main config, ""states"" for ""run"" blocks) and those that were planned but not finished creating (""planned""), providing crucial information for debugging interrupted test runs.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/machine-readable-ui.mdx#_snippet_28

LANGUAGE: json
CODE:
```
{
  ""@level"": ""info"",
  ""@message"": ""-verbose flag enabled, printing state"",
  ""@module"": ""terraform.ui"",
  ""@testfile"": ""validation.tftest.hcl"",
  ""@testrun"": ""successful_validation"",
  ""@timestamp"": ""2023-08-09T17:18:21.173008+02:00"",
  ""test_interrupt"": {
    ""state"": [
      {
        ""instance"": ""aws_instance.primary""
      }
    ],
    ""states"": {
      ""unsuccessful_validation"": [
        {
          ""instance"": ""aws_instance.secondary""
        }
      ]
    },
    ""planned"": [
      ""aws_instance.secondary""
    ]
  },
  ""type"": ""test_interrupt""
}
```

----------------------------------------

TITLE: Define Terraform Module Source via HTML Meta Tag
DESCRIPTION: Illustrates the HTML `meta` tag used by Terraform to find an alternative module source address when fetching from an HTTP/HTTPS URL. Terraform looks for this tag with `name=""terraform-get""` if no `X-Terraform-Get` header is present.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/sources.mdx#_snippet_12

LANGUAGE: html
CODE:
```
<meta name=""terraform-get"" content=""github.com/hashicorp/example"" />
```

----------------------------------------

TITLE: Access HCP Terraform Variable Sets via Store Block
DESCRIPTION: This `deployments.tfdeploy.hcl` example illustrates how to use a `store` block to securely access an HCP Terraform variable set. It defines a `varset` store named 'tokens' linked to a specific variable set ID and category. Subsequently, a `deployment` block accesses the stored values (e.g., AWS access keys) and passes them as inputs to the deployment, facilitating credential injection.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/deploy/authenticate.mdx#_snippet_7

LANGUAGE: HCL
CODE:
```
# deployments.tfdeploy.hcl

# Source environment secrets from your HCP Terraform variable set
store ""varset"" ""tokens"" {
  id       = ""varset-<variables-set-id>""
  category = ""env""
}

# Access your variable set's value using your store and pass them into your 
# deployment's inputs.
deployment ""test"" {
  inputs = {
    access_key = store.varset.tokens.AWS_ACCESS_KEY_ID    
    secret_key = store.varset.tokens.AWS_SECRET_ACCESS_KEY
    session_token = store.varset.tokens.AWS_SESSION_TOKEN
  }
}
```

----------------------------------------

TITLE: Configure Module with Multiple Aliased Provider Configurations
DESCRIPTION: This HCL example demonstrates how to define two aliased AWS provider configurations (`usw1` and `usw2`) for different regions. It then shows how to call a child module named 'tunnel' and explicitly map internal provider names (`aws.src`, `aws.dst`) to the parent module's aliased configurations (`aws.usw1`, `aws.usw2`) using the `providers` meta-argument. This is useful for modules that require distinct provider configurations for different parts of their functionality, such as cross-region connectivity.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/meta-arguments/module-providers.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
provider ""aws"" {
  alias  = ""usw1""
  region = ""us-west-1""
}

provider ""aws"" {
  alias  = ""usw2""
  region = ""us-west-2""
}

module ""tunnel"" {
  source    = ""./tunnel""
  providers = {
    aws.src = aws.usw1
    aws.dst = aws.usw2
  }
}
```

----------------------------------------

TITLE: Terraform Additional String Formatting Options
DESCRIPTION: Describes additional symbols that can be used immediately after the `%` symbol to apply specific formatting requirements. These options include controlling sign display for numbers, and specifying padding behavior (left vs. right, spaces vs. zeros).
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/format.mdx#_snippet_7

LANGUAGE: Terraform
CODE:
```
Symbol | Result
------ | --------------------------------------------------------------
space  | Leave a space where the sign would be if a number is positive.
`+`    | Show the sign of a number even if it is positive.
`-`    | Pad the width with spaces on the right rather than the left.
`0`    | Pad the width with leading zeros rather than spaces.
```

----------------------------------------

TITLE: Terraform Core Workflow
DESCRIPTION: Illustrates the fundamental three-stage workflow of Terraform: Write, Plan, and Apply. This process defines infrastructure, generates an execution plan, and then applies the changes to provision or modify resources.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Terraform Workflow:
  1. Write: Define infrastructure resources in configuration files.
  2. Plan: Terraform creates an execution plan detailing infrastructure changes.
  3. Apply: Execute the plan to create, update, or destroy infrastructure resources.
```

----------------------------------------

TITLE: Iteratively develop Terraform configuration
DESCRIPTION: This snippet shows the iterative process of editing Terraform configuration files and reviewing changes by repeatedly running `terraform plan` to catch syntax errors and ensure the configuration is as expected.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#_snippet_3

LANGUAGE: sh
CODE:
```
# Make edits to config
$ vim main.tf

# Review plan
$ terraform plan

# Make additional edits, and repeat
$ vim main.tf
```

----------------------------------------

TITLE: Terraform CLI Commands for Configuration Management
DESCRIPTION: Overview of Terraform CLI commands used to develop, format, validate, and upgrade Terraform configuration files.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/code/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform console
  - Starts an interactive shell for evaluating Terraform expressions.
  - Purpose: Quickly verify resource argument values.

terraform fmt [options] [path]
  - Automatically rewrites Terraform configuration files to a canonical format and style.
  - Usage: Often used as a pre-commit hook.

terraform validate [options] [path]
  - Validates the syntax and arguments of Terraform configuration files in a directory.
  - Includes checks for argument and attribute names and types for resources and modules.
  - Note: `plan` and `apply` commands automatically validate configurations. Useful as a pre-commit hook or in CI/CD pipelines.

terraform 0.13upgrade [path]
  - Modifies configuration files to deal with major syntax changes from Terraform 0.13.
  - Availability: Only available in Terraform versions associated with 0.13.

terraform 0.12upgrade [path]
  - Modifies configuration files to deal with major syntax changes from Terraform 0.12.
  - Availability: Only available in Terraform versions associated with 0.12.
  - Note: Upgrade to 0.12 compatibility before attempting 0.13 compatibility.
```

----------------------------------------

TITLE: zipmap Function Signature in HCL
DESCRIPTION: Illustrates the syntax for the `zipmap` function in HCL, which accepts two list arguments: `keyslist` (list of strings) and `valueslist` (list of any type). Both lists must have the same length.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/zipmap.mdx#_snippet_0

LANGUAGE: hcl
CODE:
```
zipmap(keyslist, valueslist)
```

----------------------------------------

TITLE: Related Terraform Hashing Functions
DESCRIPTION: Overview of other hashing functions available in Terraform's configuration language, including string and file-based hashing with different algorithms.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/filesha1.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
sha1(string)
  - Computes the SHA-1 hash of a given string and encodes it with hexadecimal digits.

filesha256(path)
  - Computes the SHA-256 hash of a given file and encodes it with hexadecimal digits.

filesha512(path)
  - Computes the SHA-512 hash of a given file and encodes it with hexadecimal digits.
```

----------------------------------------

TITLE: Define Backend Configuration File Attributes for Terraform
DESCRIPTION: Shows the structure of a dedicated backend configuration file (e.g., `config.consul.tfbackend`). In such files, attributes like `address`, `path`, and `scheme` are defined as top-level attributes, without the need to be nested within `terraform` or `backend` blocks.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/backend/index.mdx#_snippet_6

LANGUAGE: hcl
CODE:
```
address = ""demo.consul.io""
path    = ""example_app/terraform_state""
scheme  = ""https""
```

----------------------------------------

TITLE: Using `type` Function in Terraform Console to Inspect Value Types
DESCRIPTION: This snippet demonstrates how to execute the `type` function within the `terraform console` to inspect the precise type definitions of `var.list` and `local.default_list`. The output reveals detailed type structures, aiding in the diagnosis of type-related errors.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/type.mdx#_snippet_1

LANGUAGE: Console
CODE:
```
> type(var.list)
tuple
> type(local.default_list)
tuple([
    object({
        foo: string,
        map: object({
            bleep: string,
        }),
    }),
    object({
        beep: string,
    }),
])
```

----------------------------------------

TITLE: Explicitly Specifying Zero Objects with Argument Syntax
DESCRIPTION: This HCL snippet shows how to explicitly specify zero objects for a resource argument using argument syntax with an empty list. This method is necessary when you need to purge all existing sub-objects of a certain type. It's important to note that this form cannot be mixed with explicit single blocks for the same argument.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/attr-as-blocks.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
example = []
```

----------------------------------------

TITLE: List Available Provider Installation Packages API
DESCRIPTION: Documents the API endpoint for retrieving download URLs and metadata for distribution packages of a specific Terraform provider version. This is used by the Terraform CLI to find the correct zip archive after selecting a provider version.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/internals/provider-network-mirror-protocol.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
GET :hostname/:namespace/:type/:version.json
  - Produces: application/json
  - Description: Retrieves download URLs and associated metadata for distribution packages of a specific provider version. Each package is associated with an operating system and architecture.
  - Parameters:
    - hostname (required): The hostname portion of the requested provider's address.
    - namespace (required): The namespace portion of the requested provider's address.
    - type (required): The type portion of the requested provider's address.
    - version (required): The exact version string (e.g., ""2.0.0"") obtained from the ""List Available Versions"" API.
  - Sample Request:
    curl 'https://terraform.example.com/providers/registry.terraform.io/hashicorp/random/2.0.0.json'
  - Sample Response:
    {
      ""archives"": {
        ""darwin_amd64"": {
          ""url"": ""terraform-provider-random_2.0.0_darwin_amd64.zip"",
          ""hashes"": [
            ""h1:4A07+ZFc2wgJwo8YNlQpr1rVlgUDlxXHhPJciaPY5gs=""
          ]
        },
        ""linux_amd64"": {
          ""url"": ""terraform-provider-random_2.0.0_linux_amd64.zip"",
          ""hashes"": [
            ""h1:lCJCxf/LIowc2IGS9TPjWDyXY4nOmdGdfcwwDQCOURQ=""
          ]
        }
      }
    }
  - Response Properties:
    - archives: A JSON object where keys are platform identifiers (e.g., ""darwin_amd64"", ""linux_amd64""). Each value is an object containing:
      - url: The URL to download the distribution package (e.g., a zip archive).
      - hashes: An array of cryptographic hashes for the package, used for integrity verification.
  - Note: Terraform CLI does not send credentials when retrieving these archive URLs.
```

----------------------------------------

TITLE: Terraform Internal Language and Graph Evaluation APIs
DESCRIPTION: This section documents key Go interfaces and methods used internally by Terraform for expression evaluation and dynamic graph expansion. These components facilitate the analysis of configuration references, the evaluation of HCL expressions, and the dynamic generation of graph nodes for features like resource counting.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
lang.References
  - Description: Analyzes configuration expressions to identify other objects they refer to.
  - Related: lang.ReferencesInBlock, lang.ReferencesInExpr

lang.ReferencesInBlock
  - Description: A helper wrapper around `lang.References` for analyzing references within configuration blocks.

lang.ReferencesInExpr
  - Description: A helper wrapper around `lang.References` for analyzing references within specific expressions.

lang.Scope
  - Description: An interface providing methods for evaluating HCL expressions and blocks against data and function lookup tables.
  - Related: lang.Scope.EvalBlock, lang.Scope.EvalExpr

lang.Scope.EvalBlock
  - Description: Evaluates an HCL configuration block within a given scope, typically combining steps of data retrieval, function preparation, and HCL evaluation.

lang.Scope.EvalExpr
  - Description: Evaluates a single HCL expression within a given scope, producing a dynamic value.

hcl.Expression
  - Description: Represents an expression object within the HashiCorp Configuration Language (HCL) evaluation context.

cty.Value
  - Description: A Go type (`github.com/zclconf/go-cty/cty#Value`) representing dynamic values from the Terraform language. These values are eventually passed to provider plugins.

terraform.GraphNodeDynamicExpandable
  - Description: An interface (`github.com/hashicorp/terraform/internal/terraform#GraphNodeDynamicExpandable`) implemented by vertex objects that have special behavior to build and walk a separate sub-graph after their initial evaluation steps are complete. This is primarily used for dynamic resource instances (e.g., when the 'count' argument is set).
```

----------------------------------------

TITLE: Check index existence with `can` in Terraform
DESCRIPTION: Demonstrates using the `can` function to verify if a sequence (like a list or tuple) has an element at a specific index. While `length(var.example) > 0` might be clearer for checking non-emptiness, `can` can be used for direct index validation.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/custom-conditions.mdx#_snippet_12

LANGUAGE: HCL
CODE:
```
condition = can(var.example[0])
```

----------------------------------------

TITLE: Add a New Environment to Existing Deployments in HCL
DESCRIPTION: This HCL snippet extends an existing Stack configuration by adding a 'staging' deployment block. It demonstrates the ease with which new environments can be incorporated into a `tfdeploy.hcl` file, maintaining consistency across all defined environments while allowing for distinct input parameters for the new environment.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/stacks/use-cases.mdx#_snippet_1

LANGUAGE: hcl
CODE:
```
# deployments.tfdeploy.hcl

deployment ""production"" {
    inputs = {
        aws_region     = ""us-west-1""
        instance_count = 2
        role_arn       = ""<YOUR_ROLE_ARN>""
        identity_token = identity_token.aws.jwt
    }
}

deployment ""development"" {
    inputs = {
        aws_region     = ""us-east-1""
        instance_count = 2
        role_arn       = ""<YOUR_ROLE_ARN>""
        identity_token = identity_token.aws.jwt
    }
}

deployment ""staging"" {
    inputs = {
        aws_region     = ""us-east-1""
        instance_count = 2
        role_arn       = ""<YOUR_ROLE_ARN>""
        identity_token = identity_token.aws.jwt
    }
}
```

----------------------------------------

TITLE: Mapping Multiple Ordered Labeled Terraform Nested Blocks to JSON
DESCRIPTION: Demonstrates the mapping of multiple, ordered, and labeled nested blocks, like `provisioner` blocks, from native HCL to Terraform's JSON configuration. An array is used to preserve the order of these blocks, with each array element being an object representing a single labeled block.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/syntax/json.mdx#_snippet_3

LANGUAGE: hcl
CODE:
```
resource ""aws_instance"" ""example"" {
  # (resource configuration omitted for brevity)

  provisioner ""local-exec"" {
    command = ""echo 'Hello World' >example.txt""
  }
  provisioner ""file"" {
    source      = ""example.txt""
    destination = ""/tmp/example.txt""
  }
  provisioner ""remote-exec"" {
    inline = [
      ""sudo install-something -f /tmp/example.txt"",
    ]
  }
}
```

LANGUAGE: json
CODE:
```
{
  ""resource"": {
    ""aws_instance"": {
      ""example"": {
        ""provisioner"": [
          {
            ""local-exec"": {
              ""command"": ""echo 'Hello World' >example.txt""
            }
          },
          {
            ""file"": {
              ""source"": ""example.txt"",
              ""destination"": ""/tmp/example.txt""
            }
          },
          {
            ""remote-exec"": {
              ""inline"": [""sudo install-something -f /tmp/example.txt""]
            }
          }
        ]
      }
    }
  }
}
```

----------------------------------------

TITLE: Instantiate a computed.Diff for List Updates in Go
DESCRIPTION: This Go snippet demonstrates how to create a `computed.Diff` object representing changes within a list of primitive values. It shows the use of `computed.NewDiff` with various `renderers.Primitive` and `plans` actions to simulate updates, deletions, and creations within the list. This object can then be used for human-readable rendering or further processing.
SOURCE: https://github.com/hashicorp/terraform/blob/main/internal/command/jsonformat/README.md#_snippet_1

LANGUAGE: Go
CODE:
```
    listDiff := computed.NewDiff(renderers.List([]computed.Diff{
        computed.NewDiff(renderers.Primitive(0.0, 0.0, cty.Number), plans.NoOp, false),
        computed.NewDiff(renderers.Primitive(1.0, nil, cty.Number), plans.Delete, false),
        computed.NewDiff(renderers.Primitive(nil, 4.0, cty.Number), plans.Create, false),
        computed.NewDiff(renderers.Primitive(2.0, 2.0, cty.Number), plans.NoOp, false)
    }, plans.Update, false))
```

----------------------------------------

TITLE: Terraform CLI: `plan` Command Reference
DESCRIPTION: Documents the `terraform plan` command, which generates an execution plan showing changes Terraform will make to infrastructure without applying them. It covers default operations, saving plans to file, speculative plans, and various command options.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/plan.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Usage: terraform plan [options]
  - Creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure.
  - Does not actually carry out the proposed changes; used to check whether proposed changes match expectations.
  - Default operations:
    - Reads the current state of any already-existing remote objects.
    - Compares the current configuration to the prior state.
    - Proposes a set of change actions.
  - Options:
    - -out=FILE: Saves the generated plan to a file on disk. This file can later be executed by passing it to `terraform apply`. Primarily intended for automation.
  - Types of plans:
    - Speculative plan (default without -out=FILE): A description of the effect of the plan but without any intent to actually apply it. Useful for verifying changes before code review.
  - Related concepts:
    - Planning Modes: Special alternative planning modes for situations where the goal is not just to change the remote system to match the configuration.
    - Planning Options: Options to customize the planning process for unusual needs (e.g., Resource Targeting).
    - Other Options: Changes the behavior of the planning command itself, rather than customizing the content of the generated plan.
```

----------------------------------------

TITLE: Terraform `keys` Function Reference
DESCRIPTION: Detailed documentation for the `keys` function in Terraform's configuration language. This function extracts all keys from a given map, returning them as a list in lexicographical order. It ensures consistent ordering for reproducible results across executions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/keys.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
keys(map)
  - Description: Returns a list containing the keys from a given map. The keys are returned in lexicographical order, ensuring that the result will be identical as long as the keys in the map don't change.
  - Parameters:
    - map (map): The input map from which to extract keys.
  - Returns: (list of string) A list of keys from the input map.
  - Example Usage:
    keys({a=1, c=2, d=3})
    # Result:
    # [
    #   ""a"",
    #   ""c"",
    #   ""d""
    # ]
```

----------------------------------------

TITLE: Terraform Graph Node Execution and Evaluation Context
DESCRIPTION: Documents the core interfaces and implementations for executing graph nodes in Terraform, including the `GraphNodeExecutable.Execute` method, the `EvalContext` interface, and specific `Execute` implementations for planning, applying, and destroying resource instances.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/architecture.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
terraform.GraphNodeExecutable.Execute
  - Description: The core method implemented by all graph nodes that are executable during a Terraform graph walk. It defines the action taken for a vertex during execution, operating against an `EvalContext`.
  - Signature: Execute(ctx EvalContext) error (Implicit from context, common Go pattern)
  - Parameters:
    - ctx: An instance of `terraform.EvalContext` providing coordinated access to plugins, current state, and current plan.
  - Returns: An error if execution fails, otherwise nil.

terraform.EvalContext
  - Description: An interface defining the context for evaluation operations. It coordinates access to various components during graph execution.

terraform.BuiltinEvalContext
  - Description: The concrete implementation of `terraform.EvalContext` used in production. It provides coordinated access to plugins, the current state, and the current plan via its interface methods.

Specific Execute Implementations:
  - NodePlannableResource.Execute
    - Description: Handles the `plan` operation for a resource instance. Its high-level steps include:
      1. Retrieve the resource's associated provider from the `EvalContext`.
      2. Retrieve from the state the portion relevant to the specific resource instance.
      3. Evaluate attribute expressions given for the resource in configuration, potentially retrieving values from other resource instances via `EvalContext`.
      4. Pass the current instance state and resource configuration to the provider to produce an _instance diff_.
      5. Save the instance diff as part of the plan being constructed.
  - NodeApplyableResourceInstance.Execute
    - Description: Handles the main `apply` operation for a resource instance.
  - NodeDestroyResourceInstance.Execute
    - Description: Handles the main `destroy` operation for a resource instance.
```

----------------------------------------

TITLE: Commit Terraform configuration and review final plan
DESCRIPTION: After iterative development, this snippet demonstrates committing the Terraform configuration to Git and performing a final review of the execution plan using `terraform apply` before actual infrastructure changes are made.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/intro/core-workflow.mdx#_snippet_4

LANGUAGE: sh
CODE:
```
$ git add main.tf
$ git commit -m 'Managing infrastructure as code!'

[main (root-commit) f735520] Managing infrastructure as code!
 1 file changed, 1 insertion(+)
```

----------------------------------------

TITLE: Terraform Module Meta-arguments
DESCRIPTION: Terraform defines several optional meta-arguments that control the behavior of module blocks, affecting instance creation, provider configuration, and dependency management. These arguments are applied across all modules.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/modules/syntax.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
count: int
  - Creates multiple instances of a module from a single module block.
  - Type: Integer
  - Usage: module <NAME> { count = <NUMBER> }

for_each: map(string) or set(string)
  - Creates multiple instances of a module from a single module block based on a map or set.
  - Type: Map or Set
  - Usage: module <NAME> { for_each = <COLLECTION> }

providers: map(string)
  - Passes provider configurations to a child module.
  - Type: Map of provider aliases to configurations.
  - Default: Child module inherits default (un-aliased) provider configurations from calling module.
  - Usage: module <NAME> { providers = { <ALIAS> = <CONFIG> } }

depends_on: list(any)
  - Creates explicit dependencies between the entire module and the listed targets.
  - Type: List of resource or module addresses.
  - Usage: module <NAME> { depends_on = [<TARGET1>, <TARGET2>] }
```

----------------------------------------

TITLE: setproduct with an empty argument in HCL
DESCRIPTION: Illustrates that if any argument provided to `setproduct` is an empty list, the resulting Cartesian product will also be an empty list, similar to multiplication by zero.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/functions/setproduct.mdx#_snippet_2

LANGUAGE: HCL
CODE:
```
> setproduct([""development"", ""staging"", ""production""], [])
[]
```

----------------------------------------

TITLE: Terraform Expressions for Resource Attribute Referencing
DESCRIPTION: This snippet demonstrates various Terraform expression syntaxes for accessing resource attributes. It covers direct attribute access, splat expressions for lists, indexed access for keyed blocks and counted resources, `for` expressions for mapped resources, and using `values()` with splat for `for_each` resources.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/references.mdx#_snippet_5

LANGUAGE: hcl
CODE:
```
aws_instance.example.ami
aws_instance.example.id
aws_instance.example.ebs_block_device[*].device_name
aws_instance.example.ebs_block_device[*].id
aws_instance.example.device[""foo""].size
{for k, device in aws_instance.example.device : k => device.size}
aws_instance.example[*].id
aws_instance.example[0].id
aws_instance.example[""a""].id
[for value in aws_instance.example: value.id]
values(aws_instance.example)[*].id
```

----------------------------------------

TITLE: Define a Map or Object in Terraform HCL
DESCRIPTION: This snippet illustrates the basic syntax for defining a map or object in HashiCorp Configuration Language (HCL). It shows how key-value pairs are structured within curly braces, where keys can be unquoted identifiers or quoted strings, and values can be arbitrary expressions.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/language/expressions/types.mdx#_snippet_1

LANGUAGE: HCL
CODE:
```
{
  name = ""John""
  age  = 52
}
```

----------------------------------------

TITLE: Terraform CLI: `terraform apply` Command Reference
DESCRIPTION: Documents the `terraform apply` command, which is used to execute a Terraform plan to create, update, or destroy infrastructure. This entry details its two primary modes of operation: automatic plan generation and application, and applying a pre-saved plan file. It also covers important command-line options and their implications.
SOURCE: https://github.com/hashicorp/terraform/blob/main/website/docs/cli/commands/apply.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
terraform apply [options] [plan file]

Purpose:
  Executes the actions proposed in a Terraform plan to create, update, or destroy infrastructure.

Modes of Operation:

1. Automatic Plan Mode:
   - Usage: `terraform apply [options]` (when no saved plan file is provided)
   - Description: Terraform automatically generates a new execution plan (similar to `terraform plan`), prompts the user for approval, and then proceeds to apply the proposed changes.
   - Supported Options:
     - `-auto-approve`: (Boolean flag) Instructs Terraform to apply the plan without requiring explicit user confirmation. 
       - Warning: Use with caution, especially in automated environments, to prevent unintended infrastructure changes.
     - All planning modes and options available for `terraform plan` are supported, including:
       - Planning Modes:
         - `-destroy`: Creates a plan specifically to destroy all remote objects managed by the configuration.
         - `-refresh-only`: Creates a plan to update Terraform state and root module output values without making any infrastructure changes.
       - Planning Options:
         - `-replace=<address>`: Specifies a resource instance address to be replaced (destroyed and re-created).
         - `-var='<name>=<value>'`: Sets a Terraform input variable directly on the command line.
         - `-var-file=<path>`: Loads Terraform input variables from a specified file.

2. Saved Plan Mode:
   - Usage: `terraform apply <plan file>` (when a path to a saved plan file is provided)
   - Description: Terraform executes the actions defined within the specified pre-generated plan file without prompting for confirmation.
   - Use Case: Primarily used for running Terraform in automated workflows where a plan is generated and reviewed separately before application.
   - Inspection: It is recommended to inspect a saved plan file using `terraform show <plan file>` before applying it.
   - Limitations: When applying a saved plan, no additional planning modes or options can be specified, as the plan file already contains the final decisions and actions.
```

----------------------------------------

TITLE: Go Text Segmentation Module Usage
DESCRIPTION: Illustrates the import path for the go-textseg library, specifying a particular Unicode version. This is crucial for understanding how Terraform and its dependencies access Unicode segmentation data.
SOURCE: https://github.com/hashicorp/terraform/blob/main/docs/unicode.md#_snippet_1

LANGUAGE: go
CODE:
```
github.com/apparentlymart/go-textseg/v13
```","terraform",""