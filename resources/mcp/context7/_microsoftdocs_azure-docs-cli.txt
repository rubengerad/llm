"azure cli","TITLE: Creating Azure Resource Group with PowerShell
DESCRIPTION: This snippet illustrates how to create an Azure resource group using the `az group create` command in a PowerShell environment. It defines PowerShell variables for the resource group name and location, which are subsequently used as arguments for the command. Resource groups help organize Azure resources into manageable collections.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-1.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
# Create PowerShell variables
$resourceGroup = ""VMTutorialResources""
$location = ""eastus""

az group create --name $resourceGroup --location $location
```

----------------------------------------

TITLE: Updating Default Values for Azure PostgreSQL Flexible Server Creation Azure CLI
DESCRIPTION: Several default values for `az postgres flexible-server create` are changing in Azure CLI 2.73.0. The `--sku-name` default will become region-dependent, `--version` will default to '17', and `--create-default-database` will default to 'Disabled'. Additionally, `--active-directory-auth` is deprecated; use `--microsoft-entra-auth` for Microsoft Entra authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/upcoming-breaking-changes.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server create --sku-name Standard_D2s_v3
```

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server create --version 16
```

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server create --create-default-database Enabled
```

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server create --active-directory-auth
```

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server create --microsoft-entra-auth
```

----------------------------------------

TITLE: Conditionally Creating an Azure Resource Group
DESCRIPTION: This script uses an If-Then-Else statement to conditionally create an Azure resource group. It first checks if a resource group with the specified name already exists using `az group exists` and only proceeds with creation if it does not.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_13

LANGUAGE: azurecli
CODE:
```
if [ $(az group exists --name $resourceGroup) = false ]; then 
   az group create --name $resourceGroup --location ""$location"" 
else
   echo $resourceGroup
fi
```

----------------------------------------

TITLE: Creating an Azure Resource Group using Azure CLI
DESCRIPTION: This snippet illustrates how to create a new resource group in Azure using the Azure CLI. A resource group is a logical container for Azure resources. The command requires a specified `--location` (e.g., `westus`) and a unique `--name` for the resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-6.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az group create --location westus --name myResourceGroupName
```

----------------------------------------

TITLE: Correct JMESPath Query Quoting in PowerShell
DESCRIPTION: Provides five different methods to correctly quote JMESPath queries with the Azure CLI in PowerShell, addressing the shell's specific quoting rules to ensure the query is passed correctly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
az version --query '""azure-cli""'
```

LANGUAGE: azurecli
CODE:
```
az version --query ""\`""azure-cli\`""""
```

LANGUAGE: azurecli
CODE:
```
az version --query """"""azure-cli""""""
```

LANGUAGE: azurecli
CODE:
```
az --% version --query ""\""azure-cli\""""
```

LANGUAGE: azurecli
CODE:
```
az --% version --query \""azure-cli\""
```

----------------------------------------

TITLE: Debugging Azure CLI Resource Group Creation Error
DESCRIPTION: This snippet demonstrates using the `--debug` parameter with an `az group create` command that intentionally omits quotes around the resource group name, leading to an ""unrecognized argument"" error. It's used to show how debug output can help diagnose issues.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-troubleshooting.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
# Error example: Create a resource group, but omit the quotes around the resource group name.
az group create --location eastus2 --name msdocs-rg-test --debug
```

----------------------------------------

TITLE: Getting Command Help with Azure CLI --help
DESCRIPTION: This snippet demonstrates how to use the `--help` global parameter with an Azure CLI command, specifically `az group create`. It provides on-console reference information, including available subgroups and parameter lists, aiding in understanding command usage and options.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-global-parameters.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az group create --name myResourceGroup --location eastus --help
```

----------------------------------------

TITLE: Performing Interactive Login with Azure CLI
DESCRIPTION: This command initiates an interactive login process for Azure CLI. By default, it uses Web Account Manager (WAM) on Windows and a browser-based login on Linux/macOS, simplifying access for ad-hoc management tasks and scenarios requiring multifactor authentication (MFA).
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-interactively.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az login
```

----------------------------------------

TITLE: Creating Azure Resource Group with Bash
DESCRIPTION: This snippet demonstrates how to create an Azure resource group using the `az group create` command in a Bash shell. It initializes shell variables for the resource group name and location, which are then passed as parameters to the command. Resource groups provide a logical container for Azure resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-1.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# create Bash shell variables
resourceGroup=VMTutorialResources
location=eastus

az group create --name $resourceGroup --location $location
```

----------------------------------------

TITLE: Troubleshooting ROPC Error with Azure CLI Login
DESCRIPTION: This snippet demonstrates the `az login` command using username and password, which represents the ROPC (Resource Owner Password Credential) flow. This method is not compatible with multi-factor authentication (MFA) and will result in an `AADSTS50076` error if MFA is required for the user. The solution is to switch to an MFA-compatible authentication method like service principals or managed identities.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-mfa.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az login --username $username â€“password $password
```

----------------------------------------

TITLE: Authenticating with Azure CLI
DESCRIPTION: The `az login` command initiates the authentication process for Azure CLI. By default, it attempts to open a browser for the authorization code flow. If a browser is unavailable or fails, it falls back to the device code flow, requiring manual code entry. The `--use-device-code` option can force the device code flow.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/interactive-login.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az login
```

----------------------------------------

TITLE: Getting In-Line Help for Azure CLI Command Groups
DESCRIPTION: The --help parameter provides detailed in-line documentation for any Azure CLI command group, such as az account. It displays descriptions, available subcommands, and parameters, aiding users in understanding command usage.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az account --help
```

----------------------------------------

TITLE: Changing Default Azure Subscription with Azure CLI
DESCRIPTION: This command allows users with multiple Azure subscriptions to change their active default subscription for subsequent Azure CLI commands. It requires either the subscription's unique ID or its friendly name as a parameter.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""<subscription ID or name>""
```

----------------------------------------

TITLE: Creating an Azure VM with `az vm create` (Bash)
DESCRIPTION: This snippet demonstrates how to create a new Azure Virtual Machine running Ubuntu using the `az vm create` command in a Bash shell. It configures the VM to use SSH authentication, connects it to a specified VNet and subnet, and generates SSH keys if not already present. The `--verbose` option provides detailed output, and `--output json` formats the result.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-3.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# create Bash shell variable
vmName=TutorialVM1

az vm create \
  --resource-group $resourceGroup \
  --name $vmName \
  --image Ubuntu2204 \
  --vnet-name $vnetName \
  --subnet $subnetName \
  --generate-ssh-keys \
  --output json \
  --verbose
```

----------------------------------------

TITLE: Creating Resource Group with Azure CLI
DESCRIPTION: This command creates a new resource group in Azure. It requires a unique name for the resource group and the Azure region (location) where it should be created. Resource groups are logical containers for Azure resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/what-is-azure-cli.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az group create --name <ResourceGroupName> --location eastus
```

----------------------------------------

TITLE: Creating Azure Resource Group with Azure CLI
DESCRIPTION: This command creates a new Azure resource group in a specified location with a unique name. Resource groups act as logical containers for Azure resources, facilitating their management and organization.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az group create --location <myLocation> --name <myUniqueRGname>
```

----------------------------------------

TITLE: Conditionally Deleting an Azure Resource Group (Azure CLI)
DESCRIPTION: This snippet checks if a specified Azure resource group exists using 'az group exists'. If it does, the resource group is deleted using 'az group delete' with the '--no-wait' argument for asynchronous operation and '-y' for confirmation. Otherwise, a message is echoed indicating the resource group does not exist.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_33

LANGUAGE: azurecli
CODE:
```
if [ $(az group exists --name $resourceGroup) = true ]; then 
   az group delete --name $resourceGroup -y  --no-wait
else
   echo The $resourceGroup resource group does not exist
fi
```

----------------------------------------

TITLE: Authenticating to Azure with Azure CLI
DESCRIPTION: This Azure CLI command initiates an interactive login process to Azure. It opens a web browser for authentication, allowing the user to securely connect and manage Azure resources. This step is mandatory before executing most Azure CLI operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli-windows.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az login
```

----------------------------------------

TITLE: Getting In-Line Help for Specific Azure CLI Commands
DESCRIPTION: Applying --help to a specific command, such as az vm create, reveals all its required and optional parameters, their descriptions, and usage examples. This is essential for correctly constructing complex commands like creating a virtual machine.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az vm create --help
```

----------------------------------------

TITLE: Setting Azure Subscription with Azure CLI
DESCRIPTION: This command sets the active Azure subscription for subsequent Azure CLI operations. It requires the exact name of the subscription as a parameter. This is crucial for ensuring commands are executed against the correct Azure environment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/what-is-azure-cli.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az account set --subscription ""my subscription name""
```

----------------------------------------

TITLE: Enabling Immediate Exit on Error in Shell Scripts (Bash)
DESCRIPTION: This command, `set -e`, configures the shell to exit immediately if any command fails (returns a non-zero exit status). This is crucial for robust scripting to prevent unintended operations after an error occurs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_30

LANGUAGE: bash
CODE:
```
set -e
```

----------------------------------------

TITLE: Creating Disk with Shell Variables in PowerShell
DESCRIPTION: This snippet demonstrates how to use PowerShell shell variables to assign values and reuse them in Azure CLI commands. It retrieves the OS type of an existing VM's disk and then uses that type to create a new disk. It highlights assigning command output to a variable and the importance of 'tsv' output format for direct value assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-variables.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
# PowerShell script
# Assign values to variables
$MyResourceGroup = ""ContosoRGforVM""
$MySubscription = ""Contoso subscription""
$vmName = ""VM01""

# Get a value for a variable based on an existing virtual machine
$osType=$(az vm get-instance-view --resource-group $MyResourceGroup `
   --name $vmName --subscription $MySubscription `
   --query 'storageProfile.osDisk.osType' --output tsv)

# Create a disk of the same type by using the variable value
az disk create --resource-group $MyResourceGroup --name DestinationDisk --size-gb 20 --os-type $osType
```

----------------------------------------

TITLE: Creating Service Principal with New Certificate in Azure Key Vault (Azure CLI)
DESCRIPTION: This command creates a new Azure Active Directory service principal and automatically generates a new self-signed certificate, storing it securely in the specified Azure Key Vault. It assigns a role and scopes to the service principal, making it ready for use in automated processes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_8

LANGUAGE: azurecli
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --create-cert \
                         --cert myCertificateName \
                         --keyvault myVaultName
```

----------------------------------------

TITLE: Deleting All Virtual Machines in a Resource Group using Azure CLI
DESCRIPTION: This script deletes all Virtual Machines within a specified Azure resource group. It uses the `--force-deletion-types` parameter to target only `Microsoft.Compute/virtualMachines` for deletion, ensuring other resources in the group are preserved unless explicitly targeted.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/delete-azure-resources-at-scale.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
# Set your resource group variable
rgName=<msdocs-rg-0000000>

az group delete -n $rgName --force-deletion-types Microsoft.Compute/virtualMachines
```

----------------------------------------

TITLE: Authenticating to Azure CLI (Bash)
DESCRIPTION: This command initiates the interactive sign-in process for the Azure CLI. It opens a web browser to authenticate with Azure using a user's credentials, a service principal, managed identity, or Web Account Manager (WAM), establishing a session for subsequent Azure CLI commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_1

LANGUAGE: Bash
CODE:
```
az login
```

----------------------------------------

TITLE: Enabling Debug Logging for Azure CLI Commands
DESCRIPTION: This snippet shows how to use the `--debug` global parameter to output the entire log of an Azure CLI command. This comprehensive log is crucial for detailed troubleshooting and is often required when submitting bug reports for Azure CLI issues.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az group create --name myrResourceGroup --location eastus --debug
```

----------------------------------------

TITLE: Creating a Service Principal with Multiple Scopes (PowerShell)
DESCRIPTION: This snippet illustrates creating an Azure service principal named 'myServicePrincipalName2' using Azure CLI within a PowerShell environment, assigning 'reader' permissions across multiple, space-delimited scopes. It grants access to all resources in 'myRG1' and specifically to 'myVM' within 'myRG2', demonstrating multi-resource permission assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName2 --role reader --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG2/providers/Microsoft.Compute/virtualMachines/myVM
```

----------------------------------------

TITLE: Signing in with User-Assigned Managed Identity using Azure CLI
DESCRIPTION: This command signs into Azure using a user-assigned managed identity. It requires specifying the managed identity's client ID, object ID, or resource ID via the `--username` parameter in conjunction with the `--identity` flag. This allows authentication using a pre-defined and managed identity.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-managed-identity.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az login --identity --username <client_id|object_id|resource_id>
```

----------------------------------------

TITLE: Managing Azure Role Assignments with Azure CLI
DESCRIPTION: These commands demonstrate how to create and delete role assignments in Azure using the CLI. The 'create' command assigns a role (e.g., 'Reader') to a service principal within a specified scope, while the 'delete' command removes a role (e.g., 'Contributor') from a user. These are fundamental for access control.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/what-is-azure-cli.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az role assignment create --assignee servicePrincipalName --role Reader --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName
```

LANGUAGE: azurecli
CODE:
```
az role assignment delete --assignee userSign-inName --role Contributor
```

----------------------------------------

TITLE: Resetting Service Principal Credential to Variable (Bash)
DESCRIPTION: This Bash script resets an Azure Active Directory service principal's credentials and captures the new password directly into a variable using `--query password --output tsv`. This prevents the sensitive password from being displayed in the console, improving security. The `echo` line is for demonstration and should be removed in production.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_12

LANGUAGE: Bash
CODE:
```
# Bash Script
# reset service principal credentials returning results to a variable
myNewPassword=$(az ad sp credential reset --id myServicePrincipalID --query password --output tsv)

# Display the new password (remove this line in production for security)
echo ""New password: $myNewPassword""
```

----------------------------------------

TITLE: Creating Service Principal with New Certificate in Azure Key Vault (Azure CLI)
DESCRIPTION: This command creates a new Azure Active Directory service principal and generates a new self-signed certificate, storing it securely in the specified Azure Key Vault. It assigns a role and scopes the principal to a specific resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --create-cert \
                         --cert myCertificateName \
                         --keyvault myVaultName
```

----------------------------------------

TITLE: Updating Azure CLI and Extensions with az upgrade
DESCRIPTION: This command updates the Azure CLI to its latest version. By default, it also updates all installed extensions. This feature is available for Azure CLI versions 2.11.0 and later.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/az-upgrade.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az upgrade
```

----------------------------------------

TITLE: Filtering Azure VMs by OS Disk Size
DESCRIPTION: These snippets illustrate how to filter Azure Virtual Machines based on their OS disk size using JMESPath. The query selects VMs with an OS disk size greater than or equal to 50 GB, projecting their name, admin username, and disk size. Special attention is drawn to the necessary escaping of numerical values (e.g., \`50\` or \`\`50\`\`) due to parsing considerations across different shell environments (Bash, PowerShell, Cmd) to ensure the Azure CLI receives the correct value.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_10

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=\`50\`].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=\`\`50\`\`].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=\`50\`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

----------------------------------------

TITLE: Creating Service Principal with Azure CLI
DESCRIPTION: This snippet demonstrates how to create an Azure Service Principal (SP) for Role-Based Access Control (RBAC) using the Azure CLI. It initializes variables for the resource group, service principal name, and role, then executes the `az ad sp create-for-rbac` command to create the SP with specified scopes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
echo ""Using subscription ID $subscriptionID""
resourceGroup=""myResourceGroupName""

echo ""Creating SP for RBAC with name $servicePrincipalName, with role $roleName and in scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup""
az ad sp create-for-rbac --name $servicePrincipalName \
                         --role $roleName \
                         --scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup
```

----------------------------------------

TITLE: Setting Current Azure Subscription in Azure CLI
DESCRIPTION: This command allows you to change the active Azure subscription for the current CLI session. Once set, subsequent Azure CLI commands will target resources within this specified subscription, eliminating the need to explicitly include the --subscription parameter.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-variables.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""My Demos""
```

----------------------------------------

TITLE: Create and Remove Service Principal Roles using Azure CLI
DESCRIPTION: This snippet demonstrates how to add the 'Reader' role and remove the 'Contributor' role for a service principal using `az role assignment create` and `az role assignment delete` commands. It illustrates the principle of least privilege by granting read-only access while revoking broader permissions. The `--assignee`, `--role`, and `--scope` parameters are essential for specifying the target service principal, the role to assign/remove, and the resource scope respectively.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-5.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az role assignment create --assignee myServicePrincipalID \
                          --role Reader \
                          --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName

az role assignment delete --assignee myServicePrincipalID \
                          --role Contributor \
                          --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName
```

----------------------------------------

TITLE: Deleting an Azure Resource Group - Azure CLI
DESCRIPTION: This command deletes an Azure resource group along with all resources contained within it. The `--name` parameter specifies the resource group to be removed. This action is irreversible.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az group delete --name MyResourceGroup
```

----------------------------------------

TITLE: Securely Prompting for Service Principal Password in Bash
DESCRIPTION: This Bash snippet provides a secure way to input the service principal password without displaying it on the console. It uses `read -sp` to prompt for the password, stores it in a variable, and then passes it to the `az login` command for authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-2.md#_snippet_3

LANGUAGE: bash
CODE:
```
read -sp ""Azure password: "" AZ_PASS && echo && az login --service-principal -u <app-id> -p $AZ_PASS --tenant <tenant>
```

----------------------------------------

TITLE: Filtering and Extracting VM Names from TSV Output in Bash
DESCRIPTION: This command lists Azure VMs in ordered TSV format, then pipes the output to `grep` to filter for lines containing 'RGD', and finally uses `cut` to extract the fourth field (VM name). This demonstrates how to integrate Azure CLI TSV output with standard Unix-like command-line tools for advanced processing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_7

LANGUAGE: Bash
CODE:
```
az vm list --output tsv --query '[].[id, location, resourceGroup, name]' | grep RGD | cut -f4
```

----------------------------------------

TITLE: Signing In to Azure CLI (Shell)
DESCRIPTION: This command initiates the interactive sign-in process for the Azure CLI. It prompts the user to open a web browser to complete authentication using their Azure credentials, a service principal, managed identity, or WAM. Successful authentication allows subsequent Azure CLI commands to manage Azure resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_1

LANGUAGE: Shell
CODE:
```
az login
```

----------------------------------------

TITLE: Creating Azure Key Vault and Secret (Bash)
DESCRIPTION: This Bash script demonstrates creating an Azure Key Vault and a secret within it, capturing their IDs into variables. It initializes variables for resource group, Key Vault name, and location, sets CLI output to none during creation, and then creates the Key Vault and a secret, echoing their IDs for verification. Finally, it resets the CLI output format to JSON.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_9

LANGUAGE: bash
CODE:
```
# Set your variables.
let ""randomIdentifier=$RANDOM*$RANDOM""
rgName=""<msdocs-tutorial-rg-00000000>""
kvName=""msdocs-kv-$randomIdentifier""
location=""eastus""

# Set your default output to none
az config set core.output=none

# Create a new Azure Key Vault returning the Key Vault ID
myNewKeyVaultID=$(az keyvault create --name $kvName --resource-group $rgName --location $location --query id --output tsv)
echo ""My new Azure Kev Vault ID is $myNewKeyVaultID""

# Wait about 1 minute for your Key Vault creation to complete.

# Create a new secret returning the secret ID
kvSecretName=""<myKVSecretName>""
kvSecretValue=""<myKVSecretValue>""
myNewSecretID=$(az keyvault secret set --vault-name $kvName --name $kvSecretName --value $kvSecretValue --query id --output tsv)
echo ""My new secret ID is $myNewSecretID""

# Reset your default output to json
az config set core.output=json
```

----------------------------------------

TITLE: Sign in with System-Assigned Managed Identity using Azure CLI
DESCRIPTION: This command signs into Azure using a system-assigned managed identity. It leverages the `--identity` flag to automatically authenticate with the identity associated with the resource, eliminating the need for explicit credentials.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-managed-identity.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az login --identity
```

----------------------------------------

TITLE: Deprecating Active Directory Auth for Azure PostgreSQL Flexible Server Update Azure CLI
DESCRIPTION: The `--active-directory-auth` parameter for `az postgres flexible-server update` is deprecated and will be removed in Azure CLI 2.73.0. Users should transition to using `--microsoft-entra-auth` for managing Microsoft Entra authentication settings. Note that compute and storage updates will require user confirmation due to server restart implications.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/upcoming-breaking-changes.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server update --active-directory-auth
```

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server update --microsoft-entra-auth
```

----------------------------------------

TITLE: Creating Azure Storage Account with Azure CLI (PowerShell)
DESCRIPTION: This snippet provides a PowerShell example using Azure CLI to create a new resource group and an Azure Storage Account. It defines variables for a random identifier, location, resource group name, and storage account name, then executes `az group create` and `az storage account create` commands. The storage account is configured as `Standard_RAGRS` and `StorageV2`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
# PowerShell syntax example

# Variable block
$randomIdentifier = $(Get-Random)
$location=""eastus""
$resourceGroup=""msdocs-test-rg-$randomIdentifier""
$storageAccount=""msdocssa$randomIdentifier""

# Create a resource group.
az group create --name $resourceGroup --location $location

# Create a storage account.
echo ""Creating storage account $storageAccount in resource group $resourceGroup""
az storage account create --name $storageAccount `
    --resource-group $resourceGroup `
    --location $location `
    --sku Standard_RAGRS `
    --kind StorageV2 `
    --output json
```

----------------------------------------

TITLE: Deleting Azure Resource Groups by Name using Azure CLI
DESCRIPTION: This script sets the Azure subscription, then identifies and deletes all resource groups whose names start with 'msdocs'. It logs the deletion progress to a specified file, `myLogName.txt`, and uses `--yes` for no confirmation and `--no-wait` for asynchronous deletion. Finally, it displays the log file content.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/delete-azure-resources-at-scale.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Set your subscription
subscriptionID=00000000-0000-0000-0000-00000000
az account set --subscription $subscriptionID

# Set your log file location
logFileLocation=""myLogName.txt""

# Get the name of all resource groups that start with 'msdocs'
az group list --query ""[?starts_with(name, 'msdocs') == \`true\`].name"" -o table

# Delete resource groups without a confirmation prompt (--yes)
# Do not wait for the operation to finish (--no-wait)
echo ""Deleting resource groups"">$logFileLocation
for rgList in $(az group list --query ""[?starts_with(name, 'msdocs') == \`true\`].name"" -o tsv); 
do
    echo ""deleting resource group $rgList"">>$logFileLocation
    az group delete --name $rgList --yes --no-wait
done

# read your log file with Linux ""cat"" command
clear
cat $logFileLocation
```

----------------------------------------

TITLE: Creating Azure Key Vault and Secret (PowerShell)
DESCRIPTION: This PowerShell script demonstrates creating an Azure Key Vault and a secret within it, capturing their IDs into variables. It initializes variables for resource group, Key Vault name, and location, sets CLI output to none during creation, and then creates the Key Vault and a secret, echoing their IDs for verification. Finally, it resets the CLI output format to JSON.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_10

LANGUAGE: powershell
CODE:
```
# Set your variables.
$randomIdentifier=(New-Guid).ToString().Substring(0,8)
$rgName=""<msdocs-tutorial-rg-00000000>""
$kvName=""msdocs-kv-$randomIdentifier""
$location=""eastus""

# Set your default output to none
az config set core.output=none

# Create a new Azure Key Vault returning the Key Vault ID
$myNewKeyVaultID=$(az keyvault create --name $kvName --resource-group $rgName --location $location --query id --output tsv)
echo ""My new Azure Kev Vault ID is $myNewKeyVaultID""

# Wait about 1 minute for your Key Vault creation to complete.

# Create a new secret returning the secret ID
$kvSecretName=""<myKVSecretName>""
$kvSecretValue=""<myKVSecretValue>""
$myNewSecretID=$(az keyvault secret set --vault-name $kvName --name $kvSecretName --value $kvSecretValue --query id --output tsv)
echo ""My new secret ID is $myNewSecretID""

# Reset your default output to json
az config set core.output=json
```

----------------------------------------

TITLE: Bulk Applying RBAC Role Assignments for Cosmos DB SQL API with Azure CLI
DESCRIPTION: This snippet shows how to retrieve account and user details, list Cosmos DB accounts, and then bulk apply SQL API role assignments, facilitating fine-grained access control.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_38

LANGUAGE: Azure CLI
CODE:
```
az account show
az ad signed-in-user show
az cosmosdb list
az cosmosdb sql role assignment create
az identity show
```

----------------------------------------

TITLE: Creating Azure Storage Account in Bash
DESCRIPTION: This snippet demonstrates how to create an Azure Storage Account using the Azure CLI in a Bash environment. It initializes variables for location, resource group, and a unique storage account name, then executes the `az storage account create` command with specified SKU and kind.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_3

LANGUAGE: Bash
CODE:
```
# Variable block
let ""randomIdentifier=$RANDOM*$RANDOM""
location=""eastus""
resourceGroup=""<msdocs-tutorial-rg-00000000>""
storageAccount=""msdocssa$randomIdentifier""

# Create a storage account.
echo ""Creating storage account $storageAccount in resource group $resourceGroup""
az storage account create --name $storageAccount \
                          --resource-group $resourceGroup \
                          --location $location \
                          --sku Standard_RAGRS \
                          --kind StorageV2 \
                          --output json
```

----------------------------------------

TITLE: Creating Azure Service Principal without Name
DESCRIPTION: This command creates an Azure service principal using `az ad sp create-for-rbac`. When executed without the `--name` parameter, a name containing a timestamp is automatically generated. The output includes the `appId`, `displayName`, `password`, and `tenant` of the new service principal. It's crucial to record the system-assigned password as it cannot be retrieved later.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac
```

LANGUAGE: JSON
CODE:
```
{
  ""appId"": ""myAppId"",
  ""displayName"": ""myServicePrincipalName"",
  ""password"": ""myServicePrincipalPassword"",
  ""tenant"": ""myTentantId""
}
```

----------------------------------------

TITLE: Creating and Connecting to Azure MySQL Flexible Server in VNet using Azure CLI
DESCRIPTION: This script creates an Azure Database for MySQL Flexible Server with private access within a Virtual Network, including DNS zone setup, VNet and subnet creation, and a VM for connectivity testing. It uses `az mysql flexible-server create`, `az mysql flexible-server list-skus`, `az network private-dns zone create`, `az network vnet create`, `az network vnet list-endpoint-services`, `az network vnet subnet create`, `az network vnet subnet show`, `az vm create`, and `az vm open-port` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_60

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
az mysql flexible-server list-skus
az network private-dns zone create
az network vnet create
az network vnet list-endpoint-services
az network vnet subnet create
az network vnet subnet show
az vm create
az vm open-port
```

----------------------------------------

TITLE: Creating Service Principal with Existing Certificate from Azure Key Vault (Azure CLI)
DESCRIPTION: This command creates a new Azure Active Directory service principal and associates it with an existing certificate already stored in Azure Key Vault. It requires specifying the certificate name and the Key Vault where it resides, along with the desired role and scopes for the service principal.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_9

LANGUAGE: azurecli
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert myCertificateName \
                         --keyvault myVaultName
```

----------------------------------------

TITLE: Logging in with Azure CLI using a Service Principal and Certificate
DESCRIPTION: This command illustrates how to authenticate to Azure CLI using a service principal's application ID, a PEM-formatted certificate file, and the tenant ID. This approach offers a more secure authentication method compared to client secrets.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-service-principal.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az login --service-principal --username APP_ID --certificate /path/to/cert.pem --tenant TENANT_ID
```

----------------------------------------

TITLE: Creating Azure Storage Account - Azure CLI
DESCRIPTION: This snippet demonstrates the basic syntax for creating an Azure Storage Account using the Azure CLI. It illustrates the typical command pattern: command group, command subgroup, command, and parameters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az storage account create --name myStorageAccount
```

----------------------------------------

TITLE: Getting Command Help with Azure CLI --help
DESCRIPTION: This snippet uses the `--help` global parameter to display reference information for the `az group create` command. It provides details on available subgroups, parameters, and usage examples directly in the console, aiding in understanding command syntax and options.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az group create --name myResourceGroup --location eastus --help
```

----------------------------------------

TITLE: Creating an Azure Resource Group (Azure CLI)
DESCRIPTION: This snippet creates a new Azure resource group in a specified location. Resource groups are logical containers for Azure resources, allowing for easier management and organization of related assets.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-6.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az group create --location westus --name myResourceGroupName
```

----------------------------------------

TITLE: Creating an Azure Resource Group - Azure CLI
DESCRIPTION: This command creates a new Azure resource group named `MyResourceGroup` in the `eastus` location. Resource groups act as containers for related Azure resources, and each group must be assigned to a single Azure region.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az group create --name MyResourceGroup --location eastus
```

----------------------------------------

TITLE: Deleting Azure Resource Group by Name (Azure CLI)
DESCRIPTION: This snippet demonstrates how to list existing Azure resource groups and then delete a specific one using Azure CLI. Deleting a resource group removes all contained resources. The `--no-wait` parameter allows the command to return immediately without waiting for the deletion to complete.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-4-delete-resources.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Get a list of resource groups in the active subscription
az group list --output table

# Delete a resource group and do not wait for the operation to finish
az group delete --name <msdocs-tutorial-rg-0000000> --no-wait
```

----------------------------------------

TITLE: Using az interactive for auto-completion and examples (Azure CLI)
DESCRIPTION: This command provides an interactive shell experience for Azure CLI, offering auto-completion, command descriptions, and examples as you type. It's useful for learning and exploring Azure CLI commands directly in the console.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az interactive
```

----------------------------------------

TITLE: Changing Active Azure Subscription by Name
DESCRIPTION: This snippet demonstrates how to change the currently active Azure subscription using its display name. The `az account set` command is used with the `--subscription` parameter, providing the exact name of the target subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""My Demos""
```

----------------------------------------

TITLE: Creating an Azure Resource Group with Azure CLI
DESCRIPTION: This command creates a new Azure resource group with a specified name and in a designated location. Resource groups act as logical containers for Azure resources, facilitating organization, management, and lifecycle operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az group create --location <myLocation> --name <myUniqueRGname>
```

----------------------------------------

TITLE: Creating a Service Principal with Single Scope (Bash)
DESCRIPTION: This snippet demonstrates how to create an Azure service principal named 'myServicePrincipalName1' using Azure CLI in a Bash environment. It assigns 'reader' permissions to all resources within a specified resource group, '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1', adhering to the principle of least privilege.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName1 \
                            --role reader \
                            --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1
```

----------------------------------------

TITLE: Setting Default Resource Group and Location in Azure CLI
DESCRIPTION: This command uses `az config set` to establish default values for the `location` and `group` parameters across all Azure CLI commands. By setting these defaults, users can omit specifying `westus2` for location and `MyResourceGroup` for resource group in subsequent commands, streamlining their workflow.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-configuration.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az config set defaults.location=westus2 defaults.group=MyResourceGroup
```

----------------------------------------

TITLE: Creating a Service Principal with Password Authentication using Azure CLI
DESCRIPTION: This snippet demonstrates how to create a new Azure service principal with password-based authentication using the `az ad sp create-for-rbac` command. It assigns the 'reader' role to the service principal within a specified resource group and subscription scope. The command automatically generates a random password for the service principal, which must be copied from the output.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-2.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role reader \
                         --scopes /subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName
```

----------------------------------------

TITLE: Creating Azure Resource Group with Debugging (Azure CLI)
DESCRIPTION: This Azure CLI command creates a resource group named 'msdocs-rg-test' in the 'eastus2' region. The `--debug` flag enables verbose logging, providing detailed insights into the command's execution, including underlying API calls and request/response details, which is essential for troubleshooting and understanding command behavior. The resource group name is enclosed in quotes as a best practice for names that might contain special characters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-troubleshooting.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az group create --location eastus2 --name ""msdocs-rg-test"" --debug
```

----------------------------------------

TITLE: Handling Spaces and Special Characters with Quotes in Azure CLI
DESCRIPTION: This example illustrates the behavior of single and double quotes in Bash when defining variables and passing arguments to Azure CLI commands. It shows how quotes affect the evaluation of special characters like '$' and the handling of spaces within string values, crucial for correctly parsing commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_11

LANGUAGE: azurecli
CODE:
```
resourceGroup='msdocs-learn-bash-$randomIdentifier'
echo $resourceGroup # The $ is ignored in the creation of the $resourceGroup variable
resourceGroup=""msdocs-learn-bash-$randomIdentifier""
echo $resourceGroup # The $randomIdentifier is evaluated when defining the $resourceGroup variable
location=""East US"" # The space is ignored when defining the $location variable
echo The value of the location variable is $location # The value of the $location variable is evaluated
echo ""The value of the location variable is $location"" # The value of the $location variable is evaluated
echo ""The value of the location variable is \$location"" # The value of the $location variable is not evaluated
echo 'The value of the location variable is $location' # The value of the $location variable is not evaluated
az group create --name $resourceGroup --location $location # Notice that the space in the $location variable is not ignored and the command fails as it treats the value after the space as a new command 
az group create --name $resourceGroup --location ""$location"" # Notice that the space in the $location variable is ignored and the location argument accepts the entire string as the value
```

----------------------------------------

TITLE: Configuring Auto-Scale for VMSS with Host Metrics (Azure CLI)
DESCRIPTION: This script demonstrates how to set up auto-scaling for an Azure Virtual Machine Scale Set (VMSS) based on host metrics. It involves `az vmss create` to provision the scale set, `az monitor autoscale create` to enable autoscale, and `az monitor autoscale rule create` to define scaling rules based on performance metrics.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_84

LANGUAGE: Azure CLI
CODE:
```
az monitor autoscale create
az monitor autoscale rule create
az vmss create
```

----------------------------------------

TITLE: Integrating Service Principal Creation with Azure Key Vault (Azure CLI)
DESCRIPTION: This snippet introduces the `--keyvault` parameter for creating or retrieving certificates directly within Azure Key Vault during service principal creation. When using `--keyvault`, the `--cert` parameter is also required, specifying the name of the certificate within Key Vault. This approach enhances security by centralizing certificate management.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_6

LANGUAGE: azurecli
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --keyvault myKeyVaultName \
                         --cert myCertificateName
```

----------------------------------------

TITLE: Retrieving Service Principal Details and Signing In using Azure CLI
DESCRIPTION: This snippet shows how to dynamically retrieve the `appId` and `tenantID` of an existing service principal using `az ad sp list` based on its display name. These retrieved values are then used to sign in to Azure via `az login --service-principal`, demonstrating a more robust sign-in method.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-2.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
spID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{spID:appId}"" --output tsv)
tenantID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{tenant:appOwnerOrganizationId}"" --output tsv)
echo ""Using appId $spID in tenant $tenantID""

az login --service-principal \
         --username $spID \
         --password {paste your password here} \
         --tenant $tenantID
```

----------------------------------------

TITLE: Querying and Formatting Array Properties with Azure CLI
DESCRIPTION: This snippet demonstrates how to extract specific properties from a JSON array returned by an Azure CLI command and format them into a readable table. It uses JMESPath to select `id`, `name`, and `isDefault` properties and rename them for clarity.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[].{subscription_id:id, name:name, isDefault:isDefault}"" -o table
```

----------------------------------------

TITLE: Deleting Azure Resource Groups with Azure CLI
DESCRIPTION: These commands remove one or more specified Azure resource groups and all resources contained within them. The example shows deleting 'ContosoRGforVM' and 'ContosoStorageRG'. This operation is irreversible and should be used with caution to clean up deployed resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-variables.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az group delete --name ContosoRGforVM
az group delete --name ContosoStorageRG
```

----------------------------------------

TITLE: Retrieving Public IP Address by ID - Azure CLI
DESCRIPTION: This command uses the previously obtained public IP object ID to query and retrieve the actual public IP address. The result is then stored in a shell variable named `vmIpAddress` for subsequent use, demonstrating how to chain CLI commands and store intermediate results.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-5.md#_snippet_4

LANGUAGE: Bash
CODE:
```
vmIpAddress=$(az network public-ip show --ids $ipId \
  --query ipAddress \
  -o tsv)
```

LANGUAGE: PowerShell
CODE:
```
$vmIpAddress = $(az network public-ip show \`
    --ids $ipId \`
    --query ipAddress \`
    -o tsv)
```

----------------------------------------

TITLE: Creating an Azure Resource Group - Azure CLI
DESCRIPTION: This command creates a new Azure resource group with a specified name and location. The `--name` parameter defines the resource group's name, and `--location` specifies the Azure region where it will reside, such as 'eastus'.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az group create --name MyResourceGroup --location eastus
```

----------------------------------------

TITLE: Initiating Azure Resource Group Deletion with Azure CLI
DESCRIPTION: This command initiates the deletion of an Azure resource group specified by the '$resourceGroup' variable. The '--no-wait' parameter prevents the CLI from blocking, allowing the command to return immediately while the deletion proceeds in the background. This method is recommended for safely removing all resources created during a tutorial.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-6.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az group delete --name $resourceGroup --no-wait
```

----------------------------------------

TITLE: Listing Azure VMs in JSON Format (Default) with Azure CLI
DESCRIPTION: This command lists all virtual machines in your Azure subscriptions, displaying the output in the default JSON format. The JSON output provides a comprehensive, structured representation of the VM properties, including nested objects. An example of the output shows fields like availabilitySet, hardwareProfile, id, location, name, and networkProfile.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az vm list --output json
```

----------------------------------------

TITLE: Creating a Resource Group with Azure CLI (PowerShell)
DESCRIPTION: This snippet illustrates how to create an Azure resource group using the 'az group create' command in a PowerShell environment. It sets PowerShell variables for the resource group name and location, then utilizes them to execute the command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-1.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
# Create PowerShell variables
$resourceGroup = ""VMTutorialResources""
$location = ""eastus""

az group create --name $resourceGroup --location $location
```

----------------------------------------

TITLE: Signing In with an Azure Service Principal using Azure CLI
DESCRIPTION: This snippet demonstrates how to authenticate to Azure using a service principal via the Azure CLI. It requires the service principal's application ID (`username`), password, and tenant ID. Successful authentication allows the service principal to manage Azure resources based on its assigned permissions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-6.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az login --service-principal \
             --username myServicePrincipalID \
             --password myServicePrincipalPassword \
             --tenant myOrganizationTenantID
```

----------------------------------------

TITLE: Setting Default Resource Group and Location in Azure CLI
DESCRIPTION: This command uses `az config set` to establish default values for the `location` and `group` parameters. Once set, these defaults are automatically applied to subsequent Azure CLI commands, eliminating the need to specify them repeatedly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-configuration.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az config set defaults.location=westus2 defaults.group=MyResourceGroup
```

----------------------------------------

TITLE: Filtering Boolean Values and Using Variables in Azure CLI
DESCRIPTION: This collection of commands demonstrates advanced Azure CLI querying, including filtering arrays based on boolean values (e.g., `isDefault`), retrieving specific properties, and formatting results. It also shows how to capture query output into a shell variable for subsequent use, such as setting the active subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az account list
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault]""
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault]"" -o table
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault].[name,id]""
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault].[name,id]"" -o table
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault].{SubscriptionName: name, SubscriptionId: id}"" -o table
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault == \`false\`]""
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault == \`false\`].name"" -o table
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""[?isDefault].id"" -o tsv
```

LANGUAGE: Azure CLI
CODE:
```
subscriptionId=""$(az account list --query \""[?isDefault].id\"" -o tsv)""
```

LANGUAGE: Azure CLI
CODE:
```
echo $subscriptionId
```

LANGUAGE: Azure CLI
CODE:
```
az account list --query ""
```

LANGUAGE: undefined
CODE:
```
undefined
```

----------------------------------------

TITLE: Setting Azure CLI Subscription Globally
DESCRIPTION: This command sets the active Azure subscription for subsequent Azure CLI commands using its unique ID. This is a global parameter that affects all commands run in the current session until changed again. It requires a valid subscription ID (e.g., 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx') as input.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-global-parameters.md#_snippet_5

LANGUAGE: azurecli-interactive
CODE:
```
az account set --subscription ""xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx""
```

----------------------------------------

TITLE: Creating a Resource Group with Azure CLI (Bash)
DESCRIPTION: This snippet demonstrates how to create an Azure resource group using the 'az group create' command in a Bash shell. It first defines shell variables for the resource group name and location, then uses these variables to create the group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-1.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# create Bash shell variables
resourceGroup=VMTutorialResources
location=eastus

az group create --name $resourceGroup --location $location
```

----------------------------------------

TITLE: Troubleshooting and Changing Azure Subscriptions (Azure CLI)
DESCRIPTION: This script provides a sequence of Azure CLI commands to diagnose and resolve issues related to incorrect or missing subscriptions. It includes steps to check the current subscription, list available subscriptions, refresh credentials, clear cache, and set a new active subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_21

LANGUAGE: azurecli
CODE:
```
# See what subscription you are currently using.
az account show

# Get a list of available subscriptions.
az account list --output table

# If the subscription you are seeking is not in the list
#   close and reopen your terminal window,
#   or logout and then sign in again.
az logout
az login

# You can also clear your cache to refresh the
#    available subscription list
az account clear
az login

# Did your available subscription list change?
az account list --output table

# If the subscription you are seeking is still not in the list,
#    contact your system administrator. You cannot change your
#    subscription to an ID that is not in the list.

# If the subscription you are seeking is now in the list,
#   change your subscription.
az account set --subscription 00000000-0000-0000-0000-00000000000
```

----------------------------------------

TITLE: Creating an Azure Resource Group with Azure CLI
DESCRIPTION: This snippet demonstrates how to create a new Azure resource group using the Azure CLI. It first generates a unique identifier for the resource group name, sets the location, and then uses the `az group create` command to provision the resource group. The output is set to JSON format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
$randomIdentifier = (New-Guid).ToString().Substring(0,8)
$location=""eastus""
$resourceGroup=""msdocs-tutorial-rg-$randomIdentifier""
az group create --name $resourceGroup --location $location --output json
```

----------------------------------------

TITLE: Creating Virtual Network and Subnet with Azure CLI (PowerShell)
DESCRIPTION: This snippet illustrates how to create an Azure Virtual Network (VNet) named `TutorialVNet1` with an address prefix of 10.0.0.0/16 and a subnet named `TutorialSubnet1` with an address prefix of 10.0.0.0/24 using the `az network vnet create` command in PowerShell. It defines PowerShell variables for network names and prefixes, and uses an existing resource group `VMTutorialResources`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-2.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
# create PowerShell variables
$vnetName = ""TutorialVNet1""
$subnetName = ""TutorialSubnet1""
$vnetAddressPrefix = ""10.0.0.0/16""
$subnetAddressPrefix = ""10.0.0.0/24""

# Use the existing resource group
$resourceGroup = ""VMTutorialResources""

# Create a virtual network and subnet
az network vnet create `
  --name $vnetName `
  --resource-group $resourceGroup `
  --address-prefixes $vnetAddressPrefix `
  --subnet-name $subnetName `
  --subnet-prefixes $subnetAddressPrefix
```

----------------------------------------

TITLE: Creating Disk with Shell Variables in Bash
DESCRIPTION: This snippet demonstrates how to use Bash shell variables to assign values and reuse them in Azure CLI commands. It retrieves the OS type of an existing VM's disk and then uses that type to create a new disk. It highlights assigning command output to a variable and the importance of 'tsv' output format for direct value assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-variables.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# Bash script
# Assign values to variables
MyResourceGroup=ContosoRGforVM
MySubscription=""Contoso subscription""
vmName=VM01

# Get a value for a variable based on an existing virtual machine
osType=$(az vm get-instance-view --resource-group $MyResourceGroup \
   --name $vmName --subscription ""$MySubscription"" \
   --query 'storageProfile.osDisk.osType' --output tsv)

# Create a disk of the same type by using the variable value
az disk create --resource-group $MyResourceGroup --name DestinationDisk --size-gb 20 --os-type $osType
```

----------------------------------------

TITLE: Creating an Azure Resource Group (Azure CLI)
DESCRIPTION: This snippet creates a new Azure resource group with a unique name and a specified location. It first generates a random identifier using PowerShell's `New-Guid` to ensure uniqueness, then defines the location and constructs the resource group name. Finally, it uses `az group create` to provision the resource group, outputting the result in JSON format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
$randomIdentifier = (New-Guid).ToString().Substring(0,8)
$location=""eastus""
$resourceGroup=""msdocs-tutorial-rg-$randomIdentifier""
az group create --name $resourceGroup --location $location --output json
```

----------------------------------------

TITLE: Resetting Service Principal Credential to Variable (PowerShell)
DESCRIPTION: This PowerShell script resets an Azure Active Directory service principal's credentials and captures the new password directly into a variable using `--query password --output tsv`. This prevents the sensitive password from being displayed in the console, improving security. The `echo` line is for demonstration and should be removed in production.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_13

LANGUAGE: PowerShell
CODE:
```
# PowerShell script
# Reset service principal credentials and capture the new password
$myNewPassword = (az ad sp credential reset --id myServicePrincipalID --query password --output tsv)

# Display the new password (remove this line in production for security)
echo ""New password: $myNewPassword""
```

----------------------------------------

TITLE: Managing Resource Locks for Cosmos DB (Azure CLI)
DESCRIPTION: This snippet demonstrates how to manage Azure resource locks using Azure CLI, including creating, deleting, listing, and showing details of locks. These locks can be applied to Cosmos DB resources to prevent accidental deletion or modification.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_16

LANGUAGE: Azure CLI
CODE:
```
az lock create
az lock delete
az lock list
az lock show
```

----------------------------------------

TITLE: Resetting Service Principal Credential to Variable (PowerShell)
DESCRIPTION: This PowerShell script resets the credentials for an Azure Active Directory service principal and securely captures the new password directly into a variable using `--query password --output tsv`. This prevents the sensitive password from being displayed in the console. The `echo` line is for demonstration and should be removed in production.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_13

LANGUAGE: azurecli
CODE:
```
# PowerShell script
# Reset service principal credentials and capture the new password
$myNewPassword = (az ad sp credential reset --id myServicePrincipalID --query password --output tsv)

# Display the new password (remove this line in production for security)
echo ""New password: $myNewPassword""
```

----------------------------------------

TITLE: Extracting Multiple Values to Variables (TSV Output) - Azure CLI
DESCRIPTION: This command extracts the public IP address ID and subnet ID from the network interface, outputting them in TSV format without custom JSON keys. The output is then processed by the `read` command (Bash) or `-split` (PowerShell) to load the values into separate shell variables, suitable for command-line tool integration.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-5.md#_snippet_2

LANGUAGE: Bash
CODE:
```
read -d '' ipId subnetId <<< $(az network nic show \
  --ids $nicId \
  --query '[ipConfigurations[].publicIPAddress.id, ipConfigurations[].subnet.id]' \
  -o tsv)
```

LANGUAGE: PowerShell
CODE:
```
$output = az network nic show --ids $nicId --query ""[ipConfigurations[].publicIPAddress.id, ipConfigurations[].subnet.id]"" -o tsv

# Split the output into two variables
$ipId, $subnetId = $output -split ""`t""
```

----------------------------------------

TITLE: Starting Multiple VMs in Parallel with xargs (Azure CLI)
DESCRIPTION: This snippet shows how to use the 'xargs' command with the '-P' flag to parallelize the execution of 'az vm start' for a list of stopped VM IDs. This approach can significantly improve performance when processing multiple resources concurrently.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az vm list --resource-group MyResourceGroup --show-details \
    --query ""[?powerState=='VM stopped'].id"" \
    --output tsv | xargs -I {} -P 10 az vm start --ids ""{}""
```

----------------------------------------

TITLE: Assigning NIC ID to Variable with Azure CLI
DESCRIPTION: This command retrieves the NIC object ID using a JMESPath query and assigns it to a shell variable. It demonstrates the use of short arguments (`-n`, `-g`, `-o`) for conciseness and outputs the result in TSV format, making it suitable for direct assignment to a variable.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-4.md#_snippet_2

LANGUAGE: Bash
CODE:
```
nicId=$(az vm show \
  -n $vmName \
  -g $resourceGroup \
  --query 'networkProfile.networkInterfaces[].id' \
  -o tsv)
```

LANGUAGE: PowerShell
CODE:
```
$nicId = $(az vm show `
   -n $vmName `
   -g $resourceGroup `
   --query 'networkProfile.networkInterfaces[].id' `
   -o tsv)
```

----------------------------------------

TITLE: Handling White Spaces and Quoting in PowerShell
DESCRIPTION: This snippet illustrates correct and incorrect ways to assign string variables in PowerShell, emphasizing the use of single and double quotes when values contain other quotes. It highlights that escaped quotes within a string can lead to incorrect parsing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
# Correct
$myVariable = ""my string ' ' wrapped in single quotes""
$myVariable = 'my string "" "" wrapped in double quotes'

# Wrong
$myVariable = ""my value with escaped `"" `"" double quotes""
$myVariable = 'my value with escaped `' `' single quotes'

# after each example ...
echo $myVariable
```

LANGUAGE: output
CODE:
```
my string ' ' wrapped in double quotes
my string "" "" wrapped in single quotes
```

----------------------------------------

TITLE: Deleting Multiple Azure Storage Accounts (PowerShell)
DESCRIPTION: This PowerShell script provides an automated way to delete multiple Azure storage accounts within a specified resource group. It retrieves a list of storage accounts, filters them by name, and then iterates through each to perform a silent deletion. The script concludes by verifying that the targeted storage accounts have been removed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-4-delete-resources.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
# Set your resource group variable
$rgName=""<msdocs-tutorial-rg-0000000>""

# Get the name of all storage accounts in a resource group.
az storage account list --resource-group $rgName `
    --query ""[].{Name:name}"" `
    --output table

# Delete storage accounts without a confirmation prompt.
ForEach ($saList in $(az storage account list --resource-group $rgName `
    --query ""[?starts_with(name, 'msdocs') == ``true``].id"" `
    --output tsv)
    )
    {
    echo ""deleting storage account $saList""
    az storage account delete --ids $saList --yes
    }

# Verify the storage accounts are gone.
az storage account list --resource-group $rgName `
    --query ""[?starts_with(name, 'msdocs') == ``true``].name""
```

----------------------------------------

TITLE: Conditionally Creating Azure Resource Group using CASE (Azure CLI)
DESCRIPTION: This snippet demonstrates how to use a CASE statement in Azure CLI to check for the existence of a resource group. If the resource group specified by '$resourceGroup' does not exist, it proceeds to create it using 'az group create'. Otherwise, it echoes a message indicating that the resource group already exists. It relies on 'az group list' to query existing resource groups.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_17

LANGUAGE: azurecli
CODE:
```
var=$(az group list --query ""[? contains(name, '$resourceGroup')].name"" --output tsv)
case $resourceGroup in
$var)
echo The $resourceGroup resource group already exists.;;
*)
az group create --name $resourceGroup --location ""$location"";;
esac
```

----------------------------------------

TITLE: Configuring Audit Logs for Azure MySQL Flexible Server using Azure CLI
DESCRIPTION: This script creates an Azure Database for MySQL Flexible Server, sets up a firewall rule, and configures server parameters to enable and manage audit logs. It uses `az mysql flexible-server create`, `az mysql flexible-server firewall-rule create`, and `az mysql flexible-server parameter set` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_58

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server parameter set
```

----------------------------------------

TITLE: Assigning Running VM IDs to a Variable (Azure CLI)
DESCRIPTION: This snippet demonstrates how to assign the IDs of running Azure Virtual Machines to a shell variable. It uses `az vm list` with a JMESPath query to filter for 'VM running' power states and outputs the IDs in TSV format. The variable can then be used in subsequent commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
# assign the list of running VMs to a variable
running_vm_ids=$(az vm list --resource-group MyResourceGroup --show-details \
    --query ""[?powerState=='VM running'].id"" --output tsv)

# verify the value of the variable
echo $running_vm_ids
```

----------------------------------------

TITLE: Creating Azure Storage Account (Azure CLI)
DESCRIPTION: This command creates a new Azure Storage account. It uses the 'az storage account create' command, specifying the account name ('$storageAccount'), location ('$location'), resource group ('$resourceGroup'), SKU ('Standard_LRS'), and enabling blob encryption services. The '$randomIdentifier' variable is used to ensure a unique storage account name.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_18

LANGUAGE: azurecli
CODE:
```
storageAccount=""learnbash$randomIdentifier""
az storage account create --name $storageAccount --location ""$location"" --resource-group $resourceGroup --sku Standard_LRS --encryption-services blob
```

----------------------------------------

TITLE: Configuring Audit Logs for Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This script creates an Azure MySQL Flexible Server, sets up a firewall rule, and configures server parameters to enable and manage audit logging.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_71

LANGUAGE: Bash
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server parameter set
```

----------------------------------------

TITLE: Creating Azure Container Registry with Service Principal and Role Assignment (Azure CLI)
DESCRIPTION: This snippet demonstrates how to create an Azure Container Registry, generate a service principal, and assign it the necessary roles for accessing the registry, enabling automated operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_13

LANGUAGE: Bash
CODE:
```
az acr create
az acr show
az ad sp create-for-rbac
az ad sp list
az role assignment create
```

----------------------------------------

TITLE: Extracting VM Admin Username (TSV Output)
DESCRIPTION: This snippet illustrates how to retrieve the administrator username of an Azure VM using `az vm show` with the `--output tsv` format. This format provides raw, unquoted output, making it suitable for direct assignment to shell variables and scripting without additional parsing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_28

LANGUAGE: bash
CODE:
```
USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"" --output tsv)
echo $USER
```

LANGUAGE: powershell
CODE:
```
$USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"" --output tsv)
echo $USER
```

LANGUAGE: cmd
CODE:
```
FOR /f %i IN ('az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"" --output tsv') DO SET USER=%i
echo %USER%
```

LANGUAGE: json
CODE:
```
azureuser
```

----------------------------------------

TITLE: Creating an Azure Storage Account within a Resource Group - Azure CLI
DESCRIPTION: This command creates a new Azure storage account named `storage134` within the `MyResourceGroup` resource group. It specifies the `eastus` location and uses the `Standard_LRS` SKU for locally redundant storage, demonstrating how resources are associated with a resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az storage account create --resource-group MyResourceGroup --name storage134 --location eastus --sku Standard_LRS
```

----------------------------------------

TITLE: Creating Service Principal with Existing Certificate String (Azure CLI)
DESCRIPTION: These commands demonstrate how to create a service principal using an existing certificate provided directly as a string. The `--cert` parameter accepts the certificate content, which should be in an ASCII format like PEM, CER, or DER. For security, only the public certificate should be included, not the private key. Both single-line and multi-line string formats are shown.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
# create a service principal with the certificate as a string
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert ""MIICoT...""

# or provide -----BEGIN CERTIFICATE----- and -----END CERTIFICATE----- lines
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert ""-----BEGIN CERTIFICATE-----
MIICoT...
-----END CERTIFICATE-----""
```

----------------------------------------

TITLE: Creating Azure Resource Group with Debugging (Azure CLI)
DESCRIPTION: This command creates an Azure resource group named ""msdocs-rg-test"" in the ""eastus2"" location. The `--debug` flag enables verbose logging, providing detailed information about the command execution, including API calls and request/response headers, which is useful for troubleshooting. The resource group name is enclosed in double quotes because it contains special characters or to ensure it's treated as a single string.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-troubleshooting.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az group create --location eastus2 --name ""msdocs-rg-test"" --debug
```

----------------------------------------

TITLE: Deleting Multiple Azure Storage Accounts with Bash Script (Azure CLI)
DESCRIPTION: This Bash script automates the deletion of multiple Azure storage accounts within a specified resource group. It first lists all storage accounts, then filters and iterates through those whose names start with 'msdocs', deleting each one without a confirmation prompt. Finally, it verifies the deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-4-delete-resources.md#_snippet_1

LANGUAGE: Bash
CODE:
```
# Set your resource group variable
rgName=""<msdocs-tutorial-rg-0000000>""

# Get the name of all storage accounts in a resource group.
az storage account list --resource-group $rgName \
    --query ""[].{Name:name}"" \
    --output table

# Delete storage accounts without a confirmation prompt.
for saList in $(az storage account list --resource-group $rgName \
    --query ""[?starts_with(name, 'msdocs') == \`true\`].id"" \
    --output tsv); do
    echo ""deleting storage account $saList""
    az storage account delete --ids $saList --yes
done

# Verify the storage accounts are gone.
az storage account list --resource-group $rgName \
    --query ""[?starts_with(name, 'msdocs') == \`true\`].name""
```

----------------------------------------

TITLE: Installing Applications on VM Scale Set (Azure CLI)
DESCRIPTION: This script outlines how to deploy and install applications on instances within an Azure Virtual Machine Scale Set. It involves `az vmss create` to set up the scale set, `az network public-ip show` for public IP details, `az network lb rule create` for load balancer rules, and `az vmss extension set` to apply custom script extensions for application installation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_87

LANGUAGE: Azure CLI
CODE:
```
az network lb rule create
az network public-ip show
az vmss create
az vmss extension set
```

----------------------------------------

TITLE: Retrieving Azure Subscription Information with Azure CLI
DESCRIPTION: This snippet provides multiple ways to query Azure subscription details. It demonstrates how to get the current default subscription using `az account show` or `az account list`, and how to filter subscriptions by name using JMESPath queries with `az account list`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
# get the current default subscription using show
az account show --output table

# get the current default subscription using list
az account list --query ""[?isDefault]""

# get a subscription that contains search words or phrases
az account list --query ""[?contains(name,'search phrase')].{SubscriptionName:name, SubscriptionID:id, TenantID:tenantId}"" --output table
```

----------------------------------------

TITLE: Demonstrating Invalid Value Error with Azure CLI JSON Output
DESCRIPTION: This snippet illustrates how using the default JSON output from 'az account list' can lead to an 'Invalid value' error when attempting to set the subscription. The JSON output includes quotes around the ID, making the variable value invalid for direct use in 'az account set'.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-troubleshooting.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
# Get a subscription that contains a name or phrase
subscriptionID=$(az account list --query ""[?contains(name,'my case sensitive search phrase')].id"")
echo $subscriptionID

# output as JSON
[ ""00000000-0000-0000-0000-000000000000"" ]

# Try to set your subscription to the new ID
az account set --subscription $subscriptionID
```

----------------------------------------

TITLE: Generating a Random Identifier in Bash
DESCRIPTION: This snippet demonstrates how to generate a sufficiently unique random identifier using the Bash built-in `$RANDOM` function and the `let` command. This is useful for creating unique names for resources to avoid naming conflicts when running scripts multiple times.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_10

LANGUAGE: azurecli
CODE:
```
let ""randomIdentifier=$RANDOM*$RANDOM""
```

----------------------------------------

TITLE: Resetting Service Principal Password (Variable Storage) - Bash
DESCRIPTION: This Bash script resets the service principal password and securely stores the new password in a variable using ""--query password --output tsv"". This method prevents the password from being directly written to the console or log files. The ""echo"" command is included for testing but should be removed in production.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-7.md#_snippet_4

LANGUAGE: bash
CODE:
```
# Bash script
myNewPassword=$(az ad sp credential reset --id myServicePrincipalID --query password --output tsv)

# the echo command writes to the log file
# only use it when testing
echo $myNewPassword
```

----------------------------------------

TITLE: Creating and Waiting for Multiple VMs in Parallel with Azure CLI
DESCRIPTION: This script demonstrates creating two Azure virtual machines in parallel using the --no-wait parameter. It then uses az vm wait --created to pause execution until both VMs are successfully created, ensuring subsequent operations can proceed safely.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
az vm create --resource-group VMResources --name virtual-machine-01 --image centos --no-wait
az vm create --resource-group VMResources --name virtual-machine-02 --image centos --no-wait

subscription=$(az account show --query ""id"" -o tsv)
vm1_id=""/subscriptions/$subscription/resourceGroups/VMResources/providers/Microsoft.Compute/virtualMachines/virtual-machine-01""
vm2_id=""/subscriptions/$subscription/resourceGroups/VMResources/providers/Microsoft.Compute/virtualMachines/virtual-machine-02""
az vm wait --created --ids $vm1_id $vm2_id
```

----------------------------------------

TITLE: Integrate App Service with Application Gateway (Azure CLI)
DESCRIPTION: This script creates an Azure App Service plan and web app, then integrates it with an Azure Application Gateway. It configures network settings, public IPs, and access restrictions for secure web app deployment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_0

LANGUAGE: Bash
CODE:
```
az appservice plan create
az network application-gateway create
az network application-gateway http-settings update
az network public-ip create
az network public-ip show
az network vnet create
az webapp config access-restriction add
az webapp create
az webapp show
```

----------------------------------------

TITLE: Changing Active Azure Subscription Using a Variable
DESCRIPTION: These snippets demonstrate how to dynamically change the active Azure subscription by first retrieving the ID of a specific subscription by name and storing it in a variable, then using that variable with `az account set` to switch the active subscription. This approach is highly beneficial for scripting and automating subscription changes across different shell environments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_7

LANGUAGE: Bash
CODE:
```
subscriptionId=""$(az account list --query ""[?name=='my case sensitive subscription full name'].id"" --output tsv)""
az account set --subscription $subscriptionId
```

LANGUAGE: PowerShell
CODE:
```
$subscriptionId = az account list --query ""[?name=='my case sensitive subscription full name'].id"" -o tsv
az account set --subscription $subscriptionId
```

----------------------------------------

TITLE: Troubleshooting and Changing Azure Subscriptions (Azure CLI)
DESCRIPTION: This comprehensive script helps diagnose and resolve issues where a subscription might not appear or needs to be changed. It includes commands to show current subscription, list available subscriptions, refresh session/cache, and set a new active subscription. It also provides guidance for when the desired subscription is still not found.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_18

LANGUAGE: azurecli
CODE:
```
# See what subscription you are currently using.
az account show

# Get a list of available subscriptions.
az account list --output table

# If the subscription you are seeking is not in the list
#   close and reopen your terminal window,
#   or logout and then sign in again.
az logout
az login

# You can also clear your cache to refresh the
#    available subscription list
az account clear
az login

# Did your available subscription list change?
az account list --output table

# If the subscription you are seeking is still not in the list,
#    contact your system administrator. You cannot change your
#    subscription to an ID that is not in the list.

# If the subscription you are seeking is now in the list,
#   change your subscription.
az account set --subscription 00000000-0000-0000-0000-00000000000
```

----------------------------------------

TITLE: Authenticating to Azure CLI
DESCRIPTION: This command initiates an interactive sign-in process to Azure, which is required before executing most Azure CLI commands. It typically opens a browser window for authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/install-azure-cli-windows.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az login
```

----------------------------------------

TITLE: Logging in with Azure CLI using a Service Principal and Client Secret
DESCRIPTION: This command demonstrates how to authenticate to Azure CLI using a service principal's application ID, client secret, and tenant ID. This method is commonly used for automated scripts where the secret can be securely managed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-service-principal.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az login --service-principal --username APP_ID --password CLIENT_SECRET --tenant TENANT_ID
```

----------------------------------------

TITLE: Storing a Specific Azure Subscription ID in Bash
DESCRIPTION: This Bash snippet demonstrates how to retrieve the ID of an Azure subscription by its exact name and store it in a variable. The `az account list` command with a JMESPath query filters for the specific subscription, and `--output tsv` ensures only the ID is returned. The ID is then echoed to the console.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_4

LANGUAGE: Bash
CODE:
```
subscriptionId=""$(az account list --query ""[?name=='my case sensitive subscription full name'].id"" --output tsv)""
echo $subscriptionId
```

----------------------------------------

TITLE: Changing Default Azure Subscription with Azure CLI
DESCRIPTION: This command allows users to change their active Azure subscription. It is essential when managing resources across multiple subscriptions, ensuring subsequent CLI commands target the correct environment. The command requires either the subscription ID or its name as a parameter.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""<subscription ID or name>""
```

----------------------------------------

TITLE: Deleting Azure Resource Group
DESCRIPTION: This command deletes an entire Azure resource group, which in turn removes all resources contained within it. This is a common practice for cleaning up resources after completing a task or tutorial.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
az group delete --resource-group <resourceGroupName>
```

----------------------------------------

TITLE: Creating an Azure Resource Group (CLI vs PowerShell)
DESCRIPTION: This example shows how to create a new Azure Resource Group using both Azure CLI and Azure PowerShell. The command requires a name for the resource group and a location (e.g., 'eastus') where it will be deployed. Resource groups are fundamental containers for Azure resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/what-is-azure-cli.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az group create --name <ResourceGroupName> --location eastus
```

LANGUAGE: powershell
CODE:
```
New-AzResourceGroup -Name <ResourceGroupName> -Location eastus
```

----------------------------------------

TITLE: Creating Azure Resource Group with Random ID (Bash)
DESCRIPTION: This Bash script demonstrates how to create an Azure resource group with a randomly generated identifier appended to its name. This approach is highly beneficial for testing and automation, as it ensures unique resource group names, preventing conflicts and allowing for repeated execution without manual cleanup delays.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_10

LANGUAGE: Bash
CODE:
```
let ""randomIdentifier=$RANDOM*$RANDOM""
location=""eastus""
resourceGroup=""msdocs-tutorial-rg-$randomIdentifier""
az group create --name $resourceGroup --location $location --output json
```

----------------------------------------

TITLE: Creating Zone-Redundant VM Scale Set (Azure CLI)
DESCRIPTION: This script demonstrates the creation of a zone-redundant Azure Virtual Machine Scale Set, distributing instances across multiple availability zones for enhanced resilience. It uses `az network public-ip show` for IP details, `az network nsg rule create` for network security, `az vmss create` to deploy the zone-redundant scale set, and `az vmss extension set` for configuration.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_86

LANGUAGE: Azure CLI
CODE:
```
az network nsg rule create
az network public-ip show
az vmss create
az vmss extension set
```

----------------------------------------

TITLE: Authenticate Azure CLI with service principal using certificate
DESCRIPTION: This command authenticates to Azure using a service principal by providing its application ID, a path to an X509 certificate in PEM format, and the tenant ID. This method offers enhanced security over client secrets.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-service-principal.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az login --service-principal --username APP_ID --certificate /path/to/cert.pem --tenant TENANT_ID
```

----------------------------------------

TITLE: Load Balancing Multiple Web Sites on VMs - Azure CLI
DESCRIPTION: This snippet details Azure CLI commands for configuring a load balancer to manage traffic for multiple websites hosted on virtual machines. It includes creating a VNet, public IP, availability set, VM, and setting up load balancer components like address pools, frontend IPs, probes, and rules, along with NIC IP configurations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_36

LANGUAGE: Azure CLI
CODE:
```
az network lb address-pool create
az network lb create
az network lb frontend-ip create
az network lb probe create
az network lb rule create
az network nic create
az network nic ip-config create
az network public-ip create
az network vnet create
az vm availability-set create
az vm create
az vm list
```

----------------------------------------

TITLE: Setting Azure Storage Environment Variables (Azure CLI)
DESCRIPTION: This snippet demonstrates how to set AZURE_STORAGE_ACCOUNT and AZURE_STORAGE_KEY environment variables using 'export' in Azure CLI. Once set, subsequent 'az storage' commands, such as 'az storage container list', can automatically use these credentials, eliminating the need to specify them with every command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_26

LANGUAGE: azurecli
CODE:
```
export AZURE_STORAGE_ACCOUNT=$storageAccount
export AZURE_STORAGE_KEY=$accountKey
az storage container list # Uses the environment variables to display the list of containers.
```

----------------------------------------

TITLE: Retrieve Azure Account Tenant and Subscription IDs (Azure CLI)
DESCRIPTION: This snippet demonstrates how to retrieve the tenant ID and subscription ID of the currently active Azure account and subscription using the `az account show` command. It uses a JMESPath query to select and rename the `tenantId` and `id` fields into a custom object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_0

LANGUAGE: Bash
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

LANGUAGE: PowerShell
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

LANGUAGE: Cmd
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

----------------------------------------

TITLE: Setting Azure Key Vault Secret with No Output (Azure CLI)
DESCRIPTION: This command creates a new secret in Azure Key Vault. The `--output none` parameter ensures that the sensitive secret value is not displayed in the console, enhancing security. The secret can be retrieved later using `az keyvault secret show`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_10

LANGUAGE: Azure CLI
CODE:
```
az keyvault secret set --name MySecretName \
                       --vault-name MyKeyVaultName \
                       --value MySecretValue\
                       --output none
```

----------------------------------------

TITLE: Creating Azure Storage Account with Azure CLI (Bash)
DESCRIPTION: This snippet provides a Bash example using Azure CLI to create a new resource group and an Azure Storage Account. It defines variables for a random identifier, location, resource group name, and storage account name, then executes `az group create` and `az storage account create` commands. The storage account is configured as `Standard_RAGRS` and `StorageV2`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
# Bash syntax example

# Variable block
let ""randomIdentifier=$RANDOM*$RANDOM""
location=eastus
resourceGroup=""msdocs-test-rg-$randomIdentifier""
storageAccount=""msdocssa$randomIdentifier""

# Create a resource group.
az group create --name $resourceGroup --location $location

# Create a storage account.
echo ""Creating storage account $storageAccount in resource group $resourceGroup""
az storage account create --name $storageAccount \
    --resource-group $resourceGroup \
    --location $location \
    --sku Standard_RAGRS \
    --kind StorageV2 \
    --output json
```

----------------------------------------

TITLE: Disabling Azure CLI Secret Warning
DESCRIPTION: This command disables the sensitive information warning feature in Azure CLI, which is enabled by default since version 2.61. By setting `clients.show_secrets_warning` to `no`, the CLI will no longer display warnings when secrets are detected in command output. This can be particularly useful in automated scripts or CI/CD pipelines where warning messages sent to STDERR might halt execution if `failOnStderr` is enabled.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-manage-secrets.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az config set clients.show_secrets_warning=no
```

----------------------------------------

TITLE: Creating Storage Account with Azure CLI
DESCRIPTION: This command creates a new Azure Storage Account. It requires a unique name, the resource group it belongs to, the location, the SKU (e.g., Standard_LRS for Locally Redundant Storage), and the kind of storage account (e.g., StorageV2 for general-purpose v2). Storage accounts are used to store various types of data.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/what-is-azure-cli.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az storage account create --name <StorageAccountName> --resource-group <ResourceGroupName> --location eastus --sku Standard_LRS --kind StorageV2
```

----------------------------------------

TITLE: Managing Azure Subscriptions with Azure CLI
DESCRIPTION: This snippet demonstrates how to view your current Azure subscription, list all available subscriptions, and change the active subscription using its name or ID. It's crucial for ensuring subsequent Azure CLI commands are executed against the correct Azure context.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# see your current/default subscription
az account show

# find the list of subscriptions available to you
az account list --output table

# change your current/default subscription
az account set --subscription <mySubscriptionName>

# you can also set your subscription using a subscription ID
az account set --subscription <00000000-0000-0000-0000-000000000000>
```

----------------------------------------

TITLE: Creating Service Principal for RBAC using PowerShell
DESCRIPTION: This PowerShell snippet demonstrates creating an Azure Service Principal (SP) for RBAC. It dynamically generates a unique service principal name, defines a role, and retrieves the current subscription ID. The `az ad sp create-for-rbac` command is then executed to create the SP with the specified role and scope within a resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
# PowerShell script
$randomIdentifier = (New-Guid).ToString().Substring(0,8)
$servicePrincipalName=""msdocs-sp-$randomIdentifier""
$roleName=""azureRoleName""
$subscriptionID=$(az account show --query id --output tsv)
$resourceGroup=""myResourceGroupName""
echo ""Creating SP for RBAC with name $servicePrincipalName, with role $roleName and in scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup""

az ad sp create-for-rbac --name $servicePrincipalName --role $roleName --scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup
```

----------------------------------------

TITLE: Creating an Azure VM with VNet Connection - Azure CLI
DESCRIPTION: This snippet demonstrates how to create a new Azure Virtual Machine (VM) using the `az vm create` command. It connects the VM to a specified virtual network and subnet, generates SSH keys for authentication, and outputs the result in JSON format. Prerequisites include an existing resource group, virtual network, and subnet.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-3.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# create Bash shell variable
vmName=TutorialVM1

az vm create \
  --resource-group $resourceGroup \
  --name $vmName \
  --image Ubuntu2204 \
  --vnet-name $vnetName \
  --subnet $subnetName \
  --generate-ssh-keys \
  --output json \
  --verbose 
```

LANGUAGE: PowerShell
CODE:
```
# Create PowerShell variable
$vmName = ""TutorialVM1""

az vm create `
    --resource-group $resourceGroup `
    --name $vmName `
    --image Ubuntu2204 `
    --vnet-name $vnetName `
    --subnet $subnetName `
    --generate-ssh-keys `
    --output json `
    --verbose
```

----------------------------------------

TITLE: Demonstrating Invalid Subscription ID Assignment (JSON Output)
DESCRIPTION: This snippet demonstrates an incorrect way to capture and use an Azure subscription ID. By default, `az account list` outputs JSON, which includes quotes around the ID. When this quoted ID is then used with `az account set`, it leads to an ""invalid subscription"" error because the quotes are interpreted as part of the ID. This highlights the need for proper output formatting when assigning values to variables.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-troubleshooting.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
# Get a subscription that contains a name or phrase
subscriptionID=$(az account list --query ""[?contains(name,'my case sensitive search phrase')].id"")
echo $subscriptionID

# output as JSON
[ ""00000000-0000-0000-0000-000000000000"" ]

# Try to set your subscription to the new ID
az account set --subscription $subscriptionID

# error output
The subscription of '""00000000-0000-0000-0000-000000000000""' doesn't exist in cloud 'AzureCloud'.
```

----------------------------------------

TITLE: Creating an Azure Storage Account using Azure CLI
DESCRIPTION: This snippet shows how to create an Azure Storage account within a specified resource group using the Azure CLI. It requires a unique `--name` for the storage account, the `--resource-group` it belongs to, a `--kind` (e.g., `StorageV2`, `BlobStorage`), an `--sku` (e.g., `F0`), and a `--location`. The `--yes` flag confirms the operation without a prompt.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-6.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az storage account create --name myStorageAccountName \
                              --resource-group myResourceGroupName \
                              --kind <KIND> \
                              --sku F0 \
                              --location westus \
                              --yes
```

----------------------------------------

TITLE: Processing Multi-Value VM IDs with a For Loop (Bash)
DESCRIPTION: This Bash script iterates through a list of running VM IDs obtained from `az vm list`. For each VM, it attempts to stop the VM using `az vm stop --ids`. It includes error handling to check the exit status of the `az vm stop` command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_2

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
for vmList in $(az vm list --resource-group MyResourceGroup --show-details --query ""[?powerState=='VM running'].id""   -output tsv); do
    echo stopping $vmList
    az vm stop --ids $vmList
    if [ $? -ne 0 ]; then
        echo ""Failed to stop $vmList""
        exit 1
    fi
    echo $vmList stopped
done
```

----------------------------------------

TITLE: Deleting Multiple Azure Storage Accounts with PowerShell Script (Azure CLI)
DESCRIPTION: This PowerShell script automates the deletion of multiple Azure storage accounts within a specified resource group. It first lists all storage accounts, then filters and iterates through those whose names start with 'msdocs', deleting each one without a confirmation prompt. Finally, it verifies the deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-4-delete-resources.md#_snippet_2

LANGUAGE: PowerShell
CODE:
```
# Set your resource group variable
$rgName=""<msdocs-tutorial-rg-0000000>""

# Get the name of all storage accounts in a resource group.
az storage account list --resource-group $rgName `
    --query ""[].{Name:name}"" `
    --output table

# Delete storage accounts without a confirmation prompt.
ForEach ($saList in $(az storage account list --resource-group $rgName `
    --query ""[?starts_with(name, 'msdocs') == ``true``].id"" `
    --output tsv)
    )
    {
    echo ""deleting storage account $saList""
    az storage account delete --ids $saList --yes
    }

# Verify the storage accounts are gone.
az storage account list --resource-group $rgName `
    --query ""[?starts_with(name, 'msdocs') == ``true``].name""
```

----------------------------------------

TITLE: Configuring Service Endpoints for Cosmos DB (Azure CLI)
DESCRIPTION: This snippet shows how to create a Cosmos DB account integrated with Azure Virtual Network service endpoints. It includes commands to create a VNet, a subnet, and then configure the Cosmos DB account to use these endpoints.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_27

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az network vnet create
az network vnet subnet create
az network vnet subnet show
```

----------------------------------------

TITLE: Resetting Service Principal Password (Variable Storage) - PowerShell
DESCRIPTION: This PowerShell script resets the service principal password and stores it in a variable, utilizing ""--query password --output tsv"" to avoid direct exposure in the console or logs. The ""Write-Host"" cmdlet is shown for testing purposes; it should be commented out or removed in production for security.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-7.md#_snippet_5

LANGUAGE: powershell
CODE:
```
# PowerShell script
$myNewPassword = az ad sp credential reset --id myServicePrincipalID --query password --output tsv

# The Write-Host cmdlet can be used for displaying the value when testing.
# Comment it out or remove it in production if you don't want to display the password.
Write-Host $myNewPassword
```

----------------------------------------

TITLE: Setting Default Azure CLI Output Format to None (Azure CLI)
DESCRIPTION: This command configures the default output format for Azure CLI commands to `none`. This is particularly useful when creating resources that might return sensitive information like keys, passwords, or secrets, preventing them from being displayed on the console or written to log files.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az config set core.output=none
```

----------------------------------------

TITLE: Create Azure PostgreSQL Server in VNet (Azure CLI)
DESCRIPTION: This snippet illustrates Azure CLI commands for creating an Azure Database for PostgreSQL server within a virtual network. It covers creating the VNet, listing endpoint services, creating and showing subnets, creating the PostgreSQL server, and establishing a VNet rule.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_73

LANGUAGE: Bash
CODE:
```
az network vnet create
az network vnet list-endpoint-services
az network vnet subnet create
az network vnet subnet show
az postgres server create
az postgres server vnet-rule create
```

----------------------------------------

TITLE: Deleting Azure Resource Group using Azure CLI
DESCRIPTION: This command safely removes all resources within a specified resource group. The `--no-wait` parameter prevents the CLI from blocking, allowing the deletion operation to proceed in the background. It is the recommended method for cleaning up all tutorial-related resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-8.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az group delete --name myResourceGroup --no-wait
```

----------------------------------------

TITLE: Merging and Listing Azure Resource Tags (PowerShell)
DESCRIPTION: This snippet shows how to retrieve a storage account's resource ID in PowerShell, then append new tags to it without overwriting existing ones using `az tag update` with `--operation merge`. It also demonstrates how to list all tags associated with the resource using `az tag list`, adapting the commands for PowerShell syntax.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_14

LANGUAGE: PowerShell
CODE:
```
# Get the resource ID of your storage account.
$saID=$(az resource show --resource-group <msdocs-tutorial-rg-00000000> `
                         --name <msdocssa00000000> `
                         --resource-type Microsoft.Storage/storageAccounts `
                         --query ""id"" `
                         --output tsv)

echo My storage account ID is $saID

# Append new tags.
az tag update --resource-id $saID `
              --operation merge `
              --tags <tagName>=<tagValue>

# Get a list of all tags.
az tag list --resource-id $saID
```

----------------------------------------

TITLE: Installing Latest Azure CLI with WinGet (PowerShell)
DESCRIPTION: This command installs the latest stable version of the Azure CLI using WinGet. The `--exact` option ensures that the official Microsoft.AzureCLI package is installed, preventing potential conflicts with similarly named packages. It's suitable for initial installations or updating to the newest release.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-windows-winget.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
winget install --exact --id Microsoft.AzureCLI
```

----------------------------------------

TITLE: Listing Supported Azure Regions with Azure CLI
DESCRIPTION: This command retrieves a tabular list of all Azure regions supported by your current subscription. It's useful for identifying valid locations when creating new Azure resources or resource groups, ensuring compliance with regional availability.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az account list-locations --query ""[].{Region:name}"" --output table
```

----------------------------------------

TITLE: Deleting Azure Storage Accounts by Creation Date using Azure CLI
DESCRIPTION: This script identifies and deletes Azure storage accounts within a specified resource group that were created within the last 30 days. It sets a log file location, defines the resource group, queries for storage accounts based on their creation time, and then iterates to delete them without confirmation, logging the process.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/delete-azure-resources-at-scale.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
# Set your log file location
logFileLocation=""myLogName.txt""

# Set your resource group variable
rgName=<msdocs-rg-0000000>

# Get a list of Azure storage accounts that were created in the last 30 days. Return the results as a table.
saDate=$(date +%F -d ""-30days"")
az storage account list --resource-group $rgName \
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" \
                        --output table

# Delete storage accounts without a confirmation prompt (--yes).
# Do not wait for the operation to finish (--no-wait)
echo ""Deleting storage accounts"">$logFileLocation
for saList in $(az storage account list --resource-group $rgName \
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" \
                        --output tsv);
do
    echo ""deleting storage account $saList"">>$logFileLocation
    az storage account delete --ids $saList --yes --no-wait
done

# read your log file with Linux ""cat"" command
clear
cat $logFileLocation
```

----------------------------------------

TITLE: Creating an Azure Storage Account (Azure CLI)
DESCRIPTION: This snippet creates an Azure Storage account within a specified resource group and location. It requires defining the storage account name, resource group, kind of storage (e.g., BlobStorage, StorageV2), and SKU.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-6.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az storage account create --name myStorageAccountName \
                              --resource-group myResourceGroupName \
                              --kind <KIND> \
                              --sku F0 \
                              --location westus \
                              --yes
```

----------------------------------------

TITLE: Granting Application Permissions - Azure AD App - Azure CLI
DESCRIPTION: This snippet describes the breaking changes for the `az ad app permission grant` command. The `--expires` argument has been removed, and the `--scope` argument is now required and no longer defaults to `user_impersonation`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/microsoft-graph-migration.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
--expires removed
--scope no longer defaults to user_impersonation and is now required
```

----------------------------------------

TITLE: Handling White Spaces and Quoting in Bash
DESCRIPTION: This snippet demonstrates how to correctly use single and double quotes for variable assignment in Bash, especially when values contain white spaces or other quotes. It also shows how escaped double quotes are treated as part of the string, while escaped single quotes are not.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
# Correct
myVariable=""my string ' ' wrapped in double quotes""
myVariable='my string "" "" wrapped in single quotes'
myVariable=""my string with escaped \"" \"" double quotes wrapped in double quotes""

# Wrong, escaped single quotes in Bash are not treated as part of the string
myVariable='my value with escaped \' \' single quotes wrapped in single quotes'

# after each example ...
echo $myVariable
```

LANGUAGE: output
CODE:
```
my string ' ' wrapped in double quotes
my string "" "" wrapped in single quotes
my string with escaped "" "" double quotes wrapped in double quotes
```

LANGUAGE: output
CODE:
```
echo \""$myVariable\""
""my string ' ' wrapped in double quotes""

echo \'$myVariable\'
'my string "" "" wrapped in single quotes'

echo \""$myVariable\""
""my string with escaped "" "" double quotes wrapped in double quotes""
```

----------------------------------------

TITLE: Listing Supported Azure Locations - Azure CLI
DESCRIPTION: This command lists all Azure regions supported by the current subscription. It helps users identify available locations for deploying resources and resource groups.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az account list-locations
```

----------------------------------------

TITLE: Setting Default Resource Group and Location in Azure CLI
DESCRIPTION: This command configures default values for the resource group and location, streamlining future Azure CLI operations by eliminating the need to specify these parameters repeatedly. ""westus2"" and ""MyResourceGroup"" are examples.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_18

LANGUAGE: Azure CLI
CODE:
```
az config set defaults.location=westus2 defaults.group=MyResourceGroup
```

----------------------------------------

TITLE: Conditional Resource Group Creation using Azure CLI CASE Statement
DESCRIPTION: This snippet demonstrates how to conditionally create an Azure resource group. It first queries existing resource groups to check if a group with the specified name ($resourceGroup) already exists. If it does, a message is echoed; otherwise, the az group create command is executed to create the new resource group in the specified location.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_16

LANGUAGE: azurecli
CODE:
```
var=$(az group list --query ""[? contains(name, '$resourceGroup')].name"" --output tsv)
case $resourceGroup in
$var)
echo The $resourceGroup resource group already exists.;;
*)
az group create --name $resourceGroup --location ""$location"";;
esac
```

----------------------------------------

TITLE: Deleting Azure Resource Group with Azure CLI
DESCRIPTION: This command initiates the deletion of all resources within the specified resource group. The --no-wait parameter ensures the CLI does not block, allowing the command to return immediately while the deletion process continues in the background, guaranteeing resources are deallocated in the correct order.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-6.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az group delete --name $resourceGroup --no-wait
```

----------------------------------------

TITLE: Creating Service Principal with Existing Certificate from Azure Key Vault (Azure CLI)
DESCRIPTION: This command creates a new Azure Active Directory service principal, associating it with an existing certificate already stored in Azure Key Vault. It assigns a role and scopes the principal to a specific resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert myCertificateName \
                         --keyvault myVaultName
```

----------------------------------------

TITLE: Configuring Same-Zone High Availability for Azure MySQL Flexible Server using Azure CLI
DESCRIPTION: This script creates an Azure Database for MySQL Flexible Server, sets up a firewall rule, and updates the server configuration to enable same-zone high availability. It uses `az mysql flexible-server create`, `az mysql flexible-server firewall-rule create`, and `az mysql flexible-server update` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_62

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server update
```

----------------------------------------

TITLE: Creating VM from Snapshot (Azure CLI)
DESCRIPTION: This script outlines how to create an Azure Virtual Machine directly from a disk snapshot. It involves `az account set` for subscription context, `az snapshot show` to get snapshot details, `az disk create` to create a new disk from the snapshot, and `az vm create` to provision the VM using the new disk.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_81

LANGUAGE: Azure CLI
CODE:
```
az account set
az disk create
az snapshot show
az vm create
```

----------------------------------------

TITLE: Parallel VM Start with xargs (Azure CLI)
DESCRIPTION: This snippet demonstrates using `xargs` to process a list of stopped VM IDs in parallel. It pipes the IDs from `az vm list` to `xargs`, which then executes `az vm start --ids` for each ID, with a specified parallelism of 10.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az vm list --resource-group MyResourceGroup --show-details \
    --query ""[?powerState=='VM stopped'].id"" \
    --output tsv | xargs -I {} -P 10 az vm start --ids ""{}""
```

----------------------------------------

TITLE: Deleting Azure Resources by Name using Azure CLI
DESCRIPTION: This script demonstrates how to delete Azure resource groups whose names start with a specific prefix ('msdocs' in this example). It sets the subscription, defines a log file, lists matching resource groups, and then iterates through them to delete each one without confirmation, logging progress to the specified file.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/delete-azure-resources-at-scale.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Set your subscription
subscriptionID=00000000-0000-0000-0000-00000000
az account set --subscription $subscriptionID

# Set your log file location
logFileLocation=""myLogName.txt""

# Get the name of all resource groups that start with 'msdocs'
az group list --query ""[?starts_with(name, 'msdocs') == \`true\`].name"" -o table

# Delete resource groups without a confirmation prompt (--yes)
# Do not wait for the operation to finish (--no-wait)
echo ""Deleting resource groups"">$logFileLocation
for rgList in $(az group list --query ""[?starts_with(name, 'msdocs') == \`true\`].name"" -o tsv); 
do
    echo ""deleting resource group $rgList"">>$logFileLocation
    az group delete --name $rgList --yes --no-wait
done

# read your log file with Linux ""cat"" command
clear
cat $logFileLocation
```

----------------------------------------

TITLE: Load Balance Multiple Web Sites on VMs (Azure CLI)
DESCRIPTION: This script configures an Azure Load Balancer to manage traffic for multiple web sites hosted on virtual machines. It involves creating a VNet, public IP, NICs with multiple IP configurations, availability sets, VMs, and detailed load balancer components including frontend IPs, address pools, probes, and rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_49

LANGUAGE: Azure CLI
CODE:
```
az network lb address-pool create
az network lb create
az network lb frontend-ip create
az network lb probe create
az network lb rule create
az network nic create
az network nic ip-config create
az network public-ip create
az network vnet create
az vm availability-set create
az vm create
az vm list
```

----------------------------------------

TITLE: Querying Multiple and Nested Values with Azure CLI
DESCRIPTION: These commands demonstrate how to retrieve multiple properties, including nested ones (e.g., `user.name`), from a JSON dictionary output using Azure CLI. They show both default JSON and tabular output formats for the selected values.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az account show --query [name,id,user.name]
```

LANGUAGE: Azure CLI
CODE:
```
az account show --query [name,id,user.name] -o table
```

----------------------------------------

TITLE: Listing Azure VMs with Table Output Format
DESCRIPTION: This command lists all virtual machines within a specified resource group, formatting the output as a table. The `--output` global parameter allows control over the display format, with accepted values including json, jsonc, none, table, tsv, yaml, and yamlc. The example output demonstrates the tabular format for VM name, resource group, and location, providing a human-readable summary.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-global-parameters.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group myResourceGroup --output table
```

----------------------------------------

TITLE: Storing Specific Azure Subscription ID in Bash
DESCRIPTION: This snippet demonstrates how to retrieve the ID of an Azure subscription by its full name and store it in a Bash variable. It uses `az account list` with a JMESPath query to filter by name and `tsv` output for easy extraction. The ID is then echoed to the console.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_4

LANGUAGE: Bash
CODE:
```
subscriptionId=""$(az account list --query ""[?name=='my case sensitive subscription full name'].id"" --output tsv)""
echo $subscriptionId
```

----------------------------------------

TITLE: Integrating Service Principal Creation with Azure Key Vault (Azure CLI)
DESCRIPTION: This command initiates the creation of a service principal while integrating with Azure Key Vault for certificate management. The `--keyvault` parameter specifies that the certificate should be created or retrieved from Key Vault. This approach enhances security by centralizing certificate storage and management.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --keyvault
```

----------------------------------------

TITLE: Creating NAT Gateway for Virtual Network (Azure CLI)
DESCRIPTION: This script demonstrates the creation and configuration of an Azure NAT Gateway for a virtual network, enabling outbound internet connectivity for resources within a subnet. It involves `az network vnet create` and `az network vnet subnet create` for network setup, `az network public-ip create` for the public IP, `az network nat gateway create` to provision the gateway, `az network vnet subnet update` to associate the subnet, and `az network bastion create` and `az vm create` for testing connectivity.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_91

LANGUAGE: Azure CLI
CODE:
```
az network bastion create
az network nat gateway create
az network public-ip create
az network vnet create
az network vnet subnet create
az network vnet subnet update
az vm create
```

----------------------------------------

TITLE: Storing Multiple Query Results in Shell Variables
DESCRIPTION: This set of commands demonstrates how to extract multiple values (public IP address ID and subnet ID) from Azure CLI output formatted as TSV and store them into separate shell variables. The Bash example uses `read -d ''` for delimiter-less parsing, while the PowerShell example uses the `-split` operator.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-5.md#_snippet_2

LANGUAGE: bash
CODE:
```
read -d '' ipId subnetId <<< $(az network nic show \
  --ids $nicId \
  --query '[ipConfigurations[].publicIPAddress.id, ipConfigurations[].subnet.id]' \
  -o tsv)
```

LANGUAGE: powershell
CODE:
```
$output = az network nic show --ids $nicId --query ""[ipConfigurations[].publicIPAddress.id, ipConfigurations[].subnet.id]"" -o tsv

# Split the output into two variables
$ipId, $subnetId = $output -split ""`t""
```

----------------------------------------

TITLE: Listing Azure VMs with Ordered TSV Output using JMESPath
DESCRIPTION: This command lists Azure virtual machines, outputting data in TSV format. It uses a JMESPath query `[].[id, location, resourceGroup, name]` to explicitly define and enforce the order of columns (ID, location, resource group, name) in the output, addressing the lack of guaranteed ordering in default TSV output.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az vm list --output tsv --query '[].[id, location, resourceGroup, name]'
```

----------------------------------------

TITLE: Creating a Service Principal with Password Authentication using Azure CLI
DESCRIPTION: This snippet demonstrates how to create a new Azure service principal using the `az ad sp create-for-rbac` command. It assigns a 'reader' role to the service principal within a specified resource group and generates a random password for authentication. The output includes the `appId`, `displayName`, `password`, and `tenant`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-2.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role reader \
                         --scopes /subscriptions/mySubscriptionId/resourceGroups/myResourceGroupName
```

----------------------------------------

TITLE: Filtering for Default Azure Subscriptions
DESCRIPTION: These commands demonstrate how to list Azure accounts and filter for the default subscription using a boolean query. The examples show returning the full list, filtering for `isDefault` (which assumes `true`), and then formatting the output as a table or selecting specific properties like `name` and `id` with optional renaming.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_8

LANGUAGE: azurecli-interactive
CODE:
```
az account list
```

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault]""
```

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault]"" -o table
```

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault].[name,id]""
```

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault].[name,id]"" -o table
```

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault].{SubscriptionName: name, SubscriptionId: id}"" -o table
```

----------------------------------------

TITLE: Deprecating Managed Identity ID with Username for Azure CLI Login
DESCRIPTION: The practice of passing a managed identity ID using the `--username` parameter with `az login` is deprecated. This functionality will be removed in Azure CLI 2.73.0. Users should instead specify the managed identity using `--client-id`, `--object-id`, or `--resource-id` for authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/upcoming-breaking-changes.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az login --username <managed-identity-id>
```

LANGUAGE: Azure CLI
CODE:
```
az login --client-id <client-id>
```

LANGUAGE: Azure CLI
CODE:
```
az login --object-id <object-id>
```

LANGUAGE: Azure CLI
CODE:
```
az login --resource-id <resource-id>
```

----------------------------------------

TITLE: Sign in with User-Assigned Managed Identity (Client ID) using Azure CLI
DESCRIPTION: This command authenticates to Azure using a user-assigned managed identity by specifying its client ID with the `--client-id` flag. This is one of three ways to identify a specific user-assigned managed identity for login.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-managed-identity.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az login --identity --client-id <client_id>
```

----------------------------------------

TITLE: Deleting Multiple Azure Storage Accounts (Bash)
DESCRIPTION: This Bash script automates the deletion of multiple Azure storage accounts within a specified resource group. It first lists all storage accounts, then filters for those starting with 'msdocs', iterates through their IDs, and deletes each one without a confirmation prompt. Finally, it verifies the deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-4-delete-resources.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
# Set your resource group variable
rgName=""<msdocs-tutorial-rg-0000000>""

# Get the name of all storage accounts in a resource group.
az storage account list --resource-group $rgName \
    --query ""[].{Name:name}"" \
    --output table

# Delete storage accounts without a confirmation prompt.
for saList in $(az storage account list --resource-group $rgName \
    --query ""[?starts_with(name, 'msdocs') == \`true\`].id"" \
    --output tsv); do
    echo ""deleting storage account $saList""
    az storage account delete --ids $saList --yes
done

# Verify the storage accounts are gone.
az storage account list --resource-group $rgName \
    --query ""[?starts_with(name, 'msdocs') == \`true\`].name""
```

----------------------------------------

TITLE: Querying Multiple VM Properties (Bash)
DESCRIPTION: This Bash command demonstrates how to retrieve multiple properties from the `az vm show` output using a multiselect list (`[]`). It fetches the VM name, admin username, and the first SSH public key's data in a single query.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_6

LANGUAGE: bash
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]""
```

----------------------------------------

TITLE: Deleting Azure Resource Groups
DESCRIPTION: These commands demonstrate how to remove one or more resource groups and all their contained resources using the az group delete command. This is a common cleanup operation after testing or when resources are no longer needed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
az group delete --name MyResourceGroup
az group delete --name OtherResourceGroup
az group delete --name StorageGroups
```

----------------------------------------

TITLE: Create and Remove Azure Service Principal Roles with Azure CLI
DESCRIPTION: This snippet demonstrates how to assign the 'Reader' role and remove the 'Contributor' role for an Azure service principal using the Azure CLI. It highlights the importance of using the principle of least privilege to restrict access to Azure resources. Parameters include `--assignee` (service principal ID), `--role` (role name), and `--scope` (resource ID).
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-5.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az role assignment create --assignee myServicePrincipalID \
                          --role Reader \
                          --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName

az role assignment delete --assignee myServicePrincipalID \
                          --role Contributor \
                          --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName
```

----------------------------------------

TITLE: Creating a Service Principal with a New Self-Signed Certificate (Azure CLI)
DESCRIPTION: This command creates a new Azure Active Directory service principal and generates a self-signed certificate for authentication. The `--create-cert` parameter instructs Azure CLI to automatically generate the certificate and store it locally. It requires specifying a name, role, and the scope of access for the service principal.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --create-cert
```

----------------------------------------

TITLE: Creating a Service Principal with Multiple Scopes (Bash)
DESCRIPTION: This snippet illustrates creating an Azure service principal named 'myServicePrincipalName2' with Azure CLI in a Bash environment, assigning 'reader' permissions across multiple, space-delimited scopes. It grants access to all resources in 'myRG1' and specifically to 'myVM' within 'myRG2', showcasing how to apply permissions to diverse resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName2 \
                            --role reader \
                            --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG2/providers/Microsoft.Compute/virtualMachines/myVM
```

----------------------------------------

TITLE: Creating and Using Custom VM Image for VMSS (Azure CLI)
DESCRIPTION: This script demonstrates the end-to-end process of creating a custom VM image and then using it to deploy an Azure Virtual Machine Scale Set. It involves `az account show` for account details, `az vm create` to prepare the source VM, `az sig create`, `az sig image-definition create`, and `az sig image-version create` to manage the Shared Image Gallery, and finally `az vmss create` to deploy the scale set from the custom image.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_89

LANGUAGE: Azure CLI
CODE:
```
az account show
az sig create
az sig image-definition create
az sig image-version create
az vm create
az vmss create
```

----------------------------------------

TITLE: Filtering Storage Accounts by Blob Public Access (Bash, Azure CLI)
DESCRIPTION: This Bash script filters Azure storage accounts within a specified resource group to find those that allow blob public access. It first sets the resource group name in a variable and then uses `az storage account list` with a JMESPath query to filter for accounts where `allowBlobPublicAccess` is true, returning their names. Note the use of backticks (```) to escape the boolean value `true` within the query string for Bash compatibility.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_3

LANGUAGE: Bash
CODE:
```
rgName=""<msdocs-tutorial-rg-00000000>""

# Get a list of all Azure storage accounts that allow blob public access.
# Notice the backticks and escape characters needed for boolean values.
az storage account list --resource-group $rgName \
                        --query ""[?allowBlobPublicAccess == \`true\`].name""
```

----------------------------------------

TITLE: Securely Logging in with Azure CLI using Bash and Client Secret
DESCRIPTION: This Bash snippet shows how to securely input a service principal's client secret using `read -s` to prevent the password from being displayed in the console or stored in history. This enhances security for interactive logins.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-service-principal.md#_snippet_2

LANGUAGE: bash
CODE:
```
read -sp ""Azure password: "" AZ_PASS && echo && az login --service-principal --username <app-id> --password $AZ_PASS --tenant <tenant>
```

----------------------------------------

TITLE: Changing Active Azure Subscription with PowerShell Variable
DESCRIPTION: This PowerShell snippet retrieves the ID of a specific Azure subscription by name and stores it in a variable. It then utilizes this variable with `az account set` to change the active subscription, enabling dynamic subscription switching.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_10

LANGUAGE: PowerShell
CODE:
```
$subscriptionId = az account list --query ""[?name=='my case sensitive subscription full name'].id"" -o tsv
az account set --subscription $subscriptionId
```

----------------------------------------

TITLE: Deploy Custom Domain with Azure Front Door (Azure CLI)
DESCRIPTION: This script deploys an Azure Front Door instance and configures a custom domain with HTTPS. It involves creating DNS records, storage accounts, and setting up Front Door routing rules for content delivery.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_5

LANGUAGE: Bash
CODE:
```
az network dns record-set a create
az network dns record-set cname set-record
az network front-door create
az network front-door frontend-endpoint create
az network front-door frontend-endpoint enable-https
az network front-door routing-rule create
az network front-door routing-rule update
az storage account create
az storage account show
az storage blob service-properties update
az storage blob upload
```

----------------------------------------

TITLE: Creating Azure MariaDB Server with VNet Rule - Azure CLI
DESCRIPTION: This snippet outlines the Azure CLI commands for creating an Azure MariaDB server and integrating it with a virtual network using a VNet rule. It involves creating a VNet, subnet, listing endpoint services, and then creating the MariaDB server with a VNet rule.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_42

LANGUAGE: Azure CLI
CODE:
```
az mariadb server create
az mariadb server vnet-rule create
az network vnet create
az network vnet list-endpoint-services
az network vnet subnet create
az network vnet subnet show
```

----------------------------------------

TITLE: Creating Virtual Network and Subnet with Azure CLI (Bash)
DESCRIPTION: This snippet demonstrates how to create an Azure Virtual Network (VNet) named `TutorialVNet1` with an address prefix of 10.0.0.0/16 and a subnet named `TutorialSubnet1` with an address prefix of 10.0.0.0/24 using the `az network vnet create` command in a Bash shell. It utilizes predefined shell variables for network names and prefixes, and an existing resource group `VMTutorialResources`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-2.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# create Bash shell variables
vnetName=TutorialVNet1
subnetName=TutorialSubnet1
vnetAddressPrefix=10.0.0.0/16
subnetAddressPrefix=10.0.0.0/24

# Use the existing resource group
resourceGroup=VMTutorialResources

az network vnet create \
  --name $vnetName \
  --resource-group $resourceGroup \
  --address-prefixes $vnetAddressPrefix \
  --subnet-name $subnetName \
  --subnet-prefixes $subnetAddressPrefix
```

----------------------------------------

TITLE: Passing JSON from a File as Parameter in Azure CLI
DESCRIPTION: Illustrates the recommended method for passing complex JSON data to an Azure CLI parameter by referencing a local JSON file. This approach simplifies handling large or intricate JSON structures.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_8

LANGUAGE: Bash
CODE:
```
az some-command --contact address.details=./address_details.JSON
```

----------------------------------------

TITLE: Managing Azure Role Assignments with Azure CLI
DESCRIPTION: These commands illustrate how to create and delete Azure role assignments using the Azure CLI. The 'create' command assigns a 'Reader' role to a service principal within a specific resource group scope. The 'delete' command removes a 'Contributor' role from a user. These operations are crucial for managing access control in Azure.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/what-is-azure-cli.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az role assignment create --assignee servicePrincipalName --role Reader --scope /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName
az role assignment delete --assignee userSign-inName --role Contributor
```

----------------------------------------

TITLE: Listing Azure CLI Subgroups with Help
DESCRIPTION: Using the `--help` argument with a command group (e.g., `az vm`) displays a complete list of its subgroups, parameters, and examples. This helps in understanding the structure and available operations within a specific Azure service area like virtual machines.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-with-azure-cli.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az vm --help
```

----------------------------------------

TITLE: Creating Storage Account with and without Default Resource Group
DESCRIPTION: These commands demonstrate how setting a default resource group simplifies command syntax. The first command explicitly specifies the resource group, while the second achieves the same result by relying on the previously set default resource group, `MyResourceGroup`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_8

LANGUAGE: azurecli
CODE:
```
az storage account create --resource-group MyResourceGroup --name storage01  --location eastus --sku Standard_LRS
az storage account create --name storage01 --location eastus --sku Standard_LRS
```

----------------------------------------

TITLE: Backing Up and Restoring Azure MySQL Server using Azure CLI
DESCRIPTION: This script demonstrates how to create an Azure Database for MySQL server and then restore it, typically for point-in-time recovery. It uses `az mysql server create` and `az mysql server restore` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_53

LANGUAGE: Azure CLI
CODE:
```
az mysql server create
az mysql server restore
```

----------------------------------------

TITLE: Creating a Resource Group Deletion Lock
DESCRIPTION: This command applies a CanNotDelete lock to a resource group, preventing accidental or unauthorized deletion of the group and its contained resources. This is a crucial administrative action for protecting critical infrastructure.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_10

LANGUAGE: Azure CLI
CODE:
```
az group lock create --name ""Cannot delete resource group"" --lock-type CanNotDelete
```

----------------------------------------

TITLE: Updating Microsoft Graph Application Redirect URIs
DESCRIPTION: This example demonstrates using `az rest` to interact with the Microsoft Graph API. It first performs a GET request to retrieve an application's details and then uses a PATCH request to update its `redirectUris` property within the `web` object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
# Get the application
az rest --method GET \
    --uri 'https://graph.microsoft.com/v1.0/applications/b4e4d2ab-e2cb-45d5-a31a-98eb3f364001'

# Update `redirectUris` for `web` property
az rest --method PATCH \
    --uri 'https://graph.microsoft.com/v1.0/applications/b4e4d2ab-e2cb-45d5-a31a-98eb3f364001' \
    --body '{""web"":{""redirectUris"":[""https://myapp.com""]}}'
```

----------------------------------------

TITLE: Updating Microsoft Graph Application Redirect URIs (Azure CLI)
DESCRIPTION: This example demonstrates using `az rest` to interact with the Microsoft Graph API. It first retrieves an application's details using GET, then updates its `redirectUris` property using a PATCH request with a JSON body.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_15

LANGUAGE: Azure CLI
CODE:
```
# Get the application
az rest --method GET \
    --uri 'https://graph.microsoft.com/v1.0/applications/b4e4d2ab-e2cb-45d5-a31a-98eb3f364001'

# Update `redirectUris` for `web` property
az rest --method PATCH \
    --uri 'https://graph.microsoft.com/v1.0/applications/b4e4d2ab-e2cb-45d5-a31a-98eb3f364001' \
    --body '{""web"":{""redirectUris"":[""https://myapp.com""]}}'
```

----------------------------------------

TITLE: Creating Azure Key Vault and Secret, Storing Output (PowerShell)
DESCRIPTION: This script demonstrates how to create an Azure Key Vault and a secret within it, capturing their IDs into variables. It generates a random identifier for the Key Vault name and temporarily suppresses Azure CLI output. It then echoes the captured IDs for verification. Users should replace placeholder values for `rgName`, `kvSecretName`, and `kvSecretValue`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_11

LANGUAGE: PowerShell
CODE:
```
# Set your variables.
$randomIdentifier=(New-Guid).ToString().Substring(0,8)
$rgName=""<msdocs-tutorial-rg-00000000>""
$kvName=""msdocs-kv-$randomIdentifier""
$location=""eastus""

# Set your default output to none
az config set core.output=none

# Create a new Azure Key Vault returning the Key Vault ID
$myNewKeyVaultID=$(az keyvault create --name $kvName --resource-group $rgName --location $location --query id --output tsv)
echo ""My new Azure Kev Vault ID is $myNewKeyVaultID""

# Wait about 1 minute for your Key Vault creation to complete.

# Create a new secret returning the secret ID
$kvSecretName=""<myKVSecretName>""
$kvSecretValue=""<myKVSecretValue>""
$myNewSecretID=$(az keyvault secret set --vault-name $kvName --name $kvSecretName --value $kvSecretValue --query id --output tsv)
echo ""My new secret ID is $myNewSecretID""

# Reset your default output to json
az config set core.output=json
```

----------------------------------------

TITLE: Starting Multiple VMs with Built-in Parallel Processing (Azure CLI)
DESCRIPTION: This example leverages Azure CLI's built-in support for processing multiple '--ids' in parallel. By piping a list of stopped VM IDs and using '@-' with 'az vm start', the CLI automatically handles the parallel execution, achieving similar results to 'xargs'.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az vm list --resource-group MyResourceGroup --show-details \
    --query ""[?powerState=='VM stopped'].id"" \
    --output tsv | az vm start --ids @-
```

----------------------------------------

TITLE: Creating Azure MySQL Server with VNet Integration using Azure CLI
DESCRIPTION: This script creates an Azure Database for MySQL server and integrates it with an Azure Virtual Network (VNet) by creating VNet rules and subnets. It uses `az mysql server create`, `az mysql server vnet-rule create`, `az network vnet create`, `az network vnet list-endpoint-services`, `az network vnet subnet create`, and `az network vnet subnet show` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_56

LANGUAGE: Azure CLI
CODE:
```
az mysql server create
az mysql server vnet-rule create
az network vnet create
az network vnet list-endpoint-services
az network vnet subnet create
az network vnet subnet show
```

----------------------------------------

TITLE: Viewing Full Debug Logs with Azure CLI --debug
DESCRIPTION: This snippet illustrates the use of the `--debug` global parameter with an Azure CLI command. It generates a comprehensive log of the command's execution, including internal CLI operations, which is crucial for detailed troubleshooting and when submitting bug reports.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-global-parameters.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az group create --name myrResourceGroup --location eastus --debug
```

----------------------------------------

TITLE: Create Azure MariaDB Server with VNet Integration (Azure CLI)
DESCRIPTION: This script creates an Azure MariaDB server and integrates it with an Azure Virtual Network using a VNet service endpoint. It involves creating a VNet and subnet, listing endpoint services, and then creating the MariaDB server with a VNet rule for secure and private access.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_55

LANGUAGE: Azure CLI
CODE:
```
az mariadb server create
az mariadb server vnet-rule create
az network vnet create
az network vnet list-endpoint-services
az network vnet subnet create
az network vnet subnet show
```

----------------------------------------

TITLE: Retiring Helm 2 Support and Commands in Azure Container Registry Azure CLI
DESCRIPTION: Azure Container Registry (ACR) is retiring support for Helm 2 and its associated legacy Helm repository functionality. The `az acr helm push` command was retired to prevent new Helm 2 chart pushes, and the entire `az acr helm` command group will be retired, ending all legacy Helm repository capabilities. Users should transition to Helm 3 and store charts as OCI artifacts. The `az acr helm list` command can be used to identify charts stored in legacy repositories at risk of deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/upcoming-breaking-changes.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az acr helm push
```

LANGUAGE: Azure CLI
CODE:
```
az acr helm
```

LANGUAGE: Azure CLI
CODE:
```
az acr helm list
```

----------------------------------------

TITLE: Assigning Azure Subscription ID to Bash Variable
DESCRIPTION: This Bash script snippet retrieves the active Azure subscription ID using `az account show --query id --output tsv` and assigns it to the `subscriptionID` variable. It then prints the stored ID, demonstrating how to capture and use CLI output in shell scripts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_8

LANGUAGE: Bash
CODE:
```
subscriptionID=$(az account show --query id --output tsv)
echo ""Using subscription ID $subscriptionID""
```

----------------------------------------

TITLE: Assigning Queried NIC ID to a Shell Variable in Azure CLI
DESCRIPTION: This example shows how to capture the extracted Network Interface Controller (NIC) object ID into a shell variable. It utilizes short arguments (`-n` for name, `-g` for resource group, `-o` for output) for conciseness and the `tsv` output format to ensure the result is a bare string suitable for direct assignment to a variable.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-4.md#_snippet_2

LANGUAGE: bash
CODE:
```
nicId=$(az vm show \
  -n $vmName \
  -g $resourceGroup \
  --query 'networkProfile.networkInterfaces[].id' \
  -o tsv)
```

LANGUAGE: powershell
CODE:
```
$nicId = $(az vm show `
   -n $vmName `
   -g $resourceGroup `
   --query 'networkProfile.networkInterfaces[].id' `
   -o tsv)
```

----------------------------------------

TITLE: Troubleshooting Azure CLI: Reloading Shell Cache for 'az' Command Not Found (Bash)
DESCRIPTION: This `bash` command, `hash -r`, clears and reloads the shell's command hash cache. It's a common troubleshooting step when the `az` command is not recognized after installation, often due to the shell not being restarted or having a stale cache.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-linux-script.md#_snippet_5

LANGUAGE: bash
CODE:
```
hash -r
```

----------------------------------------

TITLE: Setting Multiple Default Azure CLI Configuration Values (Azure CLI)
DESCRIPTION: This command sets multiple default configuration values simultaneously for the Azure CLI. It configures both the default location (`defaults.location`) and the default resource group (`defaults.group`), allowing users to omit `--location` and `--resource-group` parameters in subsequent commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az config set defaults.location=westus2 defaults.group=<msdocs-tutorial-rg-0000000>
```

----------------------------------------

TITLE: Restart, Start, and Stop Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This snippet provides Azure CLI commands for controlling the lifecycle of an Azure Database for MySQL Flexible Server. It covers the initial server creation and firewall setup, followed by commands to restart, start, and stop the server as needed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_65

LANGUAGE: Bash
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server restart
az mysql flexible-server start
az mysql flexible-server stop
```

----------------------------------------

TITLE: Debugging Azure CLI Resource Group Creation Error
DESCRIPTION: This Azure CLI command attempts to create a resource group named `msdocs-rg-test` in the `eastus2` location. The `--debug` parameter is included to provide detailed diagnostic output. This specific example is designed to demonstrate an 'unrecognized arguments' error, which occurs because the resource group name `msdocs-rg-test` is not enclosed in quotes, causing it to be parsed incorrectly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-troubleshooting.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az group create --location eastus2 --name msdocs-rg-test --debug
```

----------------------------------------

TITLE: Parallel VM Start with Built-in --ids @- (Azure CLI)
DESCRIPTION: This example uses the Azure CLI's built-in support for processing multiple `--ids` in parallel. It pipes a list of stopped VM IDs directly to `az vm start`, using `@-` to indicate that the IDs should be read from standard input, achieving similar parallelism to `xargs`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az vm list --resource-group MyResourceGroup --show-details \
    --query ""[?powerState=='VM stopped'].id"" \
    --output tsv | az vm start --ids @-
```

----------------------------------------

TITLE: Assigning Running VM IDs to a Variable (Azure CLI)
DESCRIPTION: This snippet demonstrates how to capture the IDs of running Azure Virtual Machines into a Bash variable using the 'az vm list' command with a JMESPath query. This approach is useful when the value needs to be reused multiple times in subsequent commands or scripts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
# assign the list of running VMs to a variable
running_vm_ids=$(az vm list --resource-group MyResourceGroup --show-details \
    --query ""[?powerState=='VM running'].id"" --output tsv)

# verify the value of the variable
echo $running_vm_ids
```

----------------------------------------

TITLE: Setting Multiple Default Azure CLI Configuration Values
DESCRIPTION: This snippet demonstrates how to set multiple default configuration values simultaneously using `az config set`. It configures both the default location to `westus2` and the default resource group, reducing the need to specify these parameters repeatedly in subsequent Azure CLI commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az config set defaults.location=westus2 defaults.group=<msdocs-tutorial-rg-0000000>
```

----------------------------------------

TITLE: Listing VM Details with JMESPath in Azure CLI
DESCRIPTION: This snippet demonstrates how to list virtual machine details (Name, OS type, and admin username) from a specified resource group using `az vm list` and a JMESPath query. The query flattens the top-level array and projects specific properties into a new object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_12

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: json
CODE:
```
[
  {
    ""Name"": ""Test-2"",
    ""OS"": ""Linux"",
    ""admin"": ""sttramer""
  },
  {
    ""Name"": ""TestVM"",
    ""OS"": ""Linux"",
    ""admin"": ""azureuser""
  },
  {
    ""Name"": ""WinTest"",
    ""OS"": ""Windows"",
    ""admin"": ""winadmin""
  }
]
```

----------------------------------------

TITLE: Listing Azure Accounts with Table Output in Azure CLI
DESCRIPTION: This command lists all Azure accounts accessible to the authenticated user and formats the output as a human-readable table. The '--output table' parameter is used to override the default JSON output, making it easier to view summary information directly in the terminal.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/what-is-azure-cli.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
az account list --output table
```

----------------------------------------

TITLE: Managing Data Disks with VM Scale Sets (Azure CLI)
DESCRIPTION: This script illustrates how to manage data disks within an Azure Virtual Machine Scale Set, including attaching and detaching them. It uses `az vmss create` to provision the scale set, `az vmss disk attach` and `az vmss disk detach` for disk operations, `az vmss extension set` for configuration, and `az vmss show` to display scale set details.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_90

LANGUAGE: Azure CLI
CODE:
```
az vmss create
az vmss disk attach
az vmss disk detach
az vmss extension set
az vmss show
```

----------------------------------------

TITLE: Creating a Service Principal with Single Scope (PowerShell)
DESCRIPTION: This snippet demonstrates how to create an Azure service principal named 'myServicePrincipalName1' using Azure CLI within a PowerShell environment. It assigns 'reader' permissions to all resources within a specified resource group, '/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1', by removing Bash line continuation characters for PowerShell compatibility.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName1 --role reader --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1
```

----------------------------------------

TITLE: Passing JSON Parameters Correctly in PowerShell
DESCRIPTION: Illustrates three correct methods for passing a JSON string to an Azure CLI command in PowerShell. These include using single quotes, using double quotes with backtick escapes for internal quotes, and using double quotes with doubled internal quotes, all ensuring proper JSON parsing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_5

LANGUAGE: powershell
CODE:
```
az '{""key"": ""value""}' --debug

az ""{`""key`"": `""value`""}"" --debug

az ""{""""key"""": """"value""""}"" --debug
```

----------------------------------------

TITLE: Advanced Error Handling with Try-Catch in Azure CLI (PowerShell)
DESCRIPTION: Illustrates a more robust error handling approach in PowerShell for Azure CLI commands using 'try-catch' blocks. It sets '$ErrorActionPreference' to 'Stop' to catch non-terminating errors and throws an exception if the Azure CLI command fails, allowing the 'catch' block to handle the error gracefully.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_22

LANGUAGE: powershell
CODE:
```
# Script for a PowerShell scripting language

$ErrorActionPreference = ""Stop""
try {
    az group create --name MyResourceGroup
    if ($? -eq $false) {
        throw 'Group create failed.'
    }
}
catch {
    Write-Error ""Error creating the resource group.""
}
$ErrorActionPreference = ""Continue""
```

----------------------------------------

TITLE: Create and Manage Read Replicas for Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This snippet details Azure CLI commands for creating and managing read replicas for Azure Database for MySQL Flexible Server. It includes commands to show account details, create the primary server, configure firewall rules, create new read replicas, list existing replicas, and stop replication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_67

LANGUAGE: Bash
CODE:
```
az account show
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server replica create
az mysql flexible-server replica list
az mysql flexible-server replica stop-replication
```

----------------------------------------

TITLE: Signing in with System-Assigned Managed Identity using Azure CLI
DESCRIPTION: This command signs into Azure using a system-assigned managed identity. It leverages the `--identity` flag to automatically authenticate with the resource's identity without requiring explicit credentials. This method is ideal for resources where Azure automatically manages the identity.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-managed-identity.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az login --identity
```

----------------------------------------

TITLE: Retrieving Azure CLI Access Tokens
DESCRIPTION: This snippet demonstrates how to retrieve an access token using the `az account get-access-token` command. It shows how to get a token for the currently active subscription and how to specify a particular subscription by ID or name.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/refresh-token.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
# get access token for the active subscription
az account get-access-token

# get access token for a specific subscription
az account get-access-token --subscription ""<subscription ID or name>""
```

----------------------------------------

TITLE: Conditionally Deleting Azure Resource Group with Bash
DESCRIPTION: This Bash script checks if an Azure resource group with a specified name exists. If it does, the script deletes the resource group using `az group delete -y`, waiting for the operation to complete. The `--no-wait` argument is mentioned as an alternative for asynchronous deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_15

LANGUAGE: azurecli
CODE:
```
if [ $(az group exists --name $resourceGroup) = true ]; then 
   az group delete --name $resourceGroup -y # --no-wait
else
   echo The $resourceGroup resource group does not exist
fi
```

----------------------------------------

TITLE: Finding Azure CLI Commands - Azure CLI
DESCRIPTION: The `az find` command helps users discover Azure CLI commands by searching for keywords. This makes it easier to locate relevant commands for specific tasks or functionalities within the CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
az find
```

----------------------------------------

TITLE: Deleting All Virtual Machines in a Resource Group using Azure CLI
DESCRIPTION: This concise command demonstrates how to delete all resources of a specific type (e.g., Virtual Machines) within a given Azure resource group. It uses the `--force-deletion-types` parameter to target only the specified resource type for deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/delete-azure-resources-at-scale.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
# Set your resource group variable
rgName=<msdocs-rg-0000000>

az group delete -n $rgName --force-deletion-types Microsoft.Compute/virtualMachines
```

----------------------------------------

TITLE: Querying Azure CLI Command Output with JMESPath
DESCRIPTION: This command demonstrates how to query and filter the output of an Azure CLI command using a JMESPath expression. It extracts specific properties like tenantId and id (renamed to subscriptionid) from the account show output.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_19

LANGUAGE: Azure CLI
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

----------------------------------------

TITLE: Signing In with a Service Principal (Azure CLI)
DESCRIPTION: This snippet demonstrates how to sign in to Azure CLI using a service principal. It requires the application ID (username), password, and tenant ID obtained during service principal creation to authenticate to Azure.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-6.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az login --service-principal \
             --username myServicePrincipalID \
             --password myServicePrincipalPassword \
             --tenant myOrganizationTenantID
```

----------------------------------------

TITLE: Changing Active Tenant with Azure CLI Login
DESCRIPTION: This snippet shows how to change the active tenant using `az login`. It provides two methods: signing in as a different user with `--user` and `--password` (though MFA might cause issues), or directly specifying the tenant ID with `--tenant` for a more robust sign-in experience, especially with MFA.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
# sign in as a different user
az login --user <myAlias@myCompany.com> --password <myPassword>

# sign in with a different tenant
az login --tenant <myTenantID>
```

----------------------------------------

TITLE: Piping Ordered TSV Output to Bash Commands (Azure CLI)
DESCRIPTION: This example illustrates how to pipe ordered `tsv` output from an Azure CLI command to standard Bash utilities. The `grep` command filters results, and `cut -f4` extracts the fourth field (VM name), demonstrating a common pattern for processing CLI output in scripts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_7

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --output tsv --query '[].[id, location, resourceGroup, name]' | grep RGD | cut -f4
```

----------------------------------------

TITLE: Creating Service Principal with Existing Certificate File (Azure CLI)
DESCRIPTION: This command illustrates how to create a service principal by referencing an existing certificate file using the `@path` format with the `--cert` parameter. The certificate file should be in an ASCII format (e.g., PEM, CER, DER) and contain only the public certificate for optimal security. Any tool using this service principal must have access to the corresponding private key.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
# create a service principal with the certificate file location
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert @/path/to/cert.pem
```

----------------------------------------

TITLE: Converting Cosmos DB Throughput to Autoscale with Azure CLI
DESCRIPTION: This extensive snippet demonstrates how to convert existing manual throughput settings to autoscale for various Cosmos DB APIs (Cassandra, Gremlin, MongoDB, SQL, Table) across keyspaces, databases, tables, and containers.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_32

LANGUAGE: Azure CLI
CODE:
```
az account set
az cosmosdb cassandra keyspace list
az cosmosdb cassandra keyspace throughput migrate
az cosmosdb cassandra keyspace throughput show
az cosmosdb cassandra table list
az cosmosdb cassandra table throughput migrate
az cosmosdb cassandra table throughput show
az cosmosdb gremlin database list
az cosmosdb gremlin database throughput migrate
az cosmosdb gremlin database throughput show
az cosmosdb gremlin graph list
az cosmosdb gremlin graph throughput migrate
az cosmosdb gremlin graph throughput show
az cosmosdb list
az cosmosdb mongodb collection list
az cosmosdb mongodb collection throughput migrate
az cosmosdb mongodb collection throughput show
az cosmosdb mongodb database list
az cosmosdb mongodb database throughput migrate
az cosmosdb mongodb database throughput show
az cosmosdb sql container list
az cosmosdb sql container throughput migrate
az cosmosdb sql container throughput show
az cosmosdb sql database list
az cosmosdb sql database throughput migrate
az cosmosdb sql database throughput show
az cosmosdb table list
az cosmosdb table throughput migrate
az cosmosdb table throughput show
```

----------------------------------------

TITLE: Configuring Silent Automatic Updates for Azure CLI
DESCRIPTION: This command configures the Azure CLI's automatic update feature to proceed without requiring user confirmation. It prevents interruption in automated scripts by suppressing upgrade prompts and only displaying warnings and errors during the update process.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/update-azure-cli.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az config set auto-upgrade.prompt=no
```

----------------------------------------

TITLE: Assigning Azure CLI Query Output to PowerShell Variable
DESCRIPTION: This example demonstrates how to retrieve the administrator username of a specific Azure VM using `az vm show` with a JMESPath query and assign it to a PowerShell variable. It illustrates a common scenario where the default JSON output (with quotes) might require careful handling when directly assigned to a variable.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_16

LANGUAGE: PowerShell
CODE:
```
$USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"")
echo $USER
```

----------------------------------------

TITLE: Assigning Azure CLI Query Output to Bash Variable
DESCRIPTION: This example shows how to retrieve the administrator username of a specific Azure VM using `az vm show` with a JMESPath query and assign it to a Bash environment variable. It highlights a potential issue where default JSON output (with quotes) might not be correctly interpreted by the shell when directly assigned to a variable.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_15

LANGUAGE: Bash
CODE:
```
USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"")
echo $USER
```

----------------------------------------

TITLE: Getting next command recommendations with az next (Azure CLI)
DESCRIPTION: This command provides recommendations for the next Azure CLI command based on common customer execution patterns. It prompts the user to select a command path, aiding in workflow discovery.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az next
```

----------------------------------------

TITLE: Deleting Azure Resource Group using Azure CLI
DESCRIPTION: This command safely removes an entire Azure resource group and all its contained resources. The `--no-wait` parameter ensures the CLI command returns immediately without waiting for the deletion to complete, allowing for non-blocking operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-8.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az group delete --name myResourceGroup --no-wait
```

----------------------------------------

TITLE: Setting default resource group and location (Azure CLI)
DESCRIPTION: This command configures default values for the resource group and location, streamlining subsequent Azure CLI commands by eliminating the need to specify these parameters repeatedly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_13

LANGUAGE: Azure CLI
CODE:
```
az config set defaults.location=westus2 defaults.group=MyResourceGroup
```

----------------------------------------

TITLE: Setting Default Resource Group in Azure CLI
DESCRIPTION: This command sets a default resource group for all subsequent Azure CLI commands. It stores the key-value pair `defaults.group=MyResourceGroup` in the local Azure CLI configuration file, simplifying command execution by omitting the `--resource-group` parameter.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_7

LANGUAGE: azurecli
CODE:
```
az config set defaults.group=MyResourceGroup
```

----------------------------------------

TITLE: Setting Active Azure Subscription
DESCRIPTION: This command allows you to change the active Azure subscription. Replace `<subscription-id>` with the ID of the subscription you wish to make active. This is crucial for managing resources within a specific subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-with-azure-cli.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""<subscription-id>""
```

----------------------------------------

TITLE: Using File Convention for JSON Parameters in Azure CLI
DESCRIPTION: This snippet shows how to provide JSON parameter values to Azure CLI commands using the `@<file>` convention. This method allows bypassing shell interpretation mechanisms, which is useful for complex JSON structures or when dealing with quoting issues. It demonstrates creating an Azure AD application with a manifest loaded from a file.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az ad app create --display-name myName --native-app --required-resource-accesses @manifest.json
```

----------------------------------------

TITLE: Filtering Azure VMs by SSD Storage Type (Piped Query)
DESCRIPTION: This snippet illustrates the use of JMESPath pipe expressions (|) to refine query results. It first projects the VM name and storage type, then pipes the result to a filter expression that selects only those VMs with 'SSD' in their storage type, demonstrating a two-step query process.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_24

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

----------------------------------------

TITLE: Quickly Creating a Linux VM (Azure CLI)
DESCRIPTION: This script provides a quick and straightforward method to create a basic Linux Azure Virtual Machine. Its primary function is handled by the `az vm create` command, which provisions the VM with default or minimal configurations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_82

LANGUAGE: Azure CLI
CODE:
```
az vm create
```

----------------------------------------

TITLE: Setting Azure Subscription with Azure CLI
DESCRIPTION: This command demonstrates how to switch the active Azure subscription using the Azure CLI. It requires the exact name of the subscription to be set. This is a common task for users managing resources across multiple subscriptions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/what-is-azure-cli.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az account set --subscription ""my subscription name""
```

----------------------------------------

TITLE: Creating Azure AD App with JSON File Parameter (PowerShell)
DESCRIPTION: Illustrates how to create an Azure AD application using 'az ad app create', specifically demonstrating the best practice of passing a JSON file as a parameter via the '@<file>' convention to bypass shell interpretation of complex JSON strings in PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_19

LANGUAGE: azurecli
CODE:
```
# Script for a PowerShell scripting language

az ad app create --display-name myTestAppName `
    --is-fallback-public-client `
    --required-resource-accesses ""@manifest.json""
```

----------------------------------------

TITLE: Securely Signing In with Service Principal using Bash in Azure CLI
DESCRIPTION: This Bash command provides a secure way to sign in with a service principal by prompting for the password without displaying it on the console. It uses `read -sp` to read the password into a variable, which is then passed to the `az login` command, preventing sensitive information from being logged.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-2.md#_snippet_3

LANGUAGE: Bash
CODE:
```
read -sp ""Azure password: "" AZ_PASS && echo && az login --service-principal -u <app-id> -p $AZ_PASS --tenant <tenant>
```

----------------------------------------

TITLE: Regenerating Azure Container Registry Credentials (Bash)
DESCRIPTION: This `az rest` command uses the POST method to regenerate one of the login credentials for an Azure Container Registry. It sends a JSON body specifying the name of the credential to be regenerated, here set to 'password'.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_6

LANGUAGE: Bash
CODE:
```
# Variable block
$passwordValue=""password""

az rest --method post \
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName/regenerateCredential?api-version=2023-01-01-preview \
    --body ""{'name': '$passwordValue'}""
```

----------------------------------------

TITLE: Creating an Azure Storage Account within a Resource Group - Azure CLI
DESCRIPTION: This command creates a new Azure storage account within a specified resource group. It requires the resource group name (`--resource-group`), a unique storage account name (`--name`), the deployment location (`--location`), and the SKU (`--sku`) for the storage account.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az storage account create --resource-group MyResourceGroup --name storage134 --location eastus --sku Standard_LRS
```

----------------------------------------

TITLE: Setting Default Azure CLI Resource Group
DESCRIPTION: This command sets a default resource group for subsequent Azure CLI commands. By configuring `defaults.group`, users can omit the `--resource-group` parameter in future commands, streamlining their workflow. Replace `<msdocs-tutorial-rg-0000000>` with your actual resource group name.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az config set defaults.group=<msdocs-tutorial-rg-0000000>
```

----------------------------------------

TITLE: Setting Default Azure Resource Group
DESCRIPTION: This command configures a default resource group for all subsequent Azure CLI commands, storing the setting locally in the CLI's configuration file. It streamlines operations by eliminating the need to specify the resource group repeatedly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az config set defaults.group=MyResourceGroup
```

----------------------------------------

TITLE: Securely prompt for Azure CLI password in PowerShell
DESCRIPTION: This PowerShell snippet uses `Get-Credential` to securely prompt for the Azure password, which is then passed to `az login` for service principal authentication. This prevents the password from being exposed in plain text.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-service-principal.md#_snippet_3

LANGUAGE: powershell
CODE:
```
$AzCred = Get-Credential -UserName <app-id>
az login --service-principal --username $AzCred.UserName --password $AzCred.GetNetworkCredential().Password --tenant <tenant>
```

----------------------------------------

TITLE: Load Balancing VMs within Specific Availability Zone - Azure CLI
DESCRIPTION: This snippet provides Azure CLI commands for configuring a load balancer to distribute traffic specifically among virtual machines within a designated availability zone. It covers creating a VNet, public IP, NSG, NIC, and setting up load balancer rules, probes, and inbound NAT rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_37

LANGUAGE: Azure CLI
CODE:
```
az network lb create
az network lb inbound-nat-rule create
az network lb probe create
az network lb rule create
az network nic create
az network nsg create
az network nsg rule create
az network public-ip create
az network vnet create
az vm create
az vm list
```

----------------------------------------

TITLE: Displaying Active Azure Subscription
DESCRIPTION: After logging in, this command is commonly used to display details about the currently active Azure subscription, confirming the context for subsequent CLI operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/install-azure-cli-windows.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az account show
```

----------------------------------------

TITLE: Creating an Azure VM with `az vm create` (PowerShell)
DESCRIPTION: This snippet illustrates how to create an Azure Virtual Machine running Ubuntu using the `az vm create` command within a PowerShell environment. It sets up the VM with SSH authentication, connects it to a specified VNet and subnet, and generates SSH keys. The backtick (`) is used for line continuation in PowerShell, and variables are declared with a dollar sign ($).
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-3.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
# Create PowerShell variable
$vmName = ""TutorialVM1""

az vm create `
    --resource-group $resourceGroup `
    --name $vmName `
    --image Ubuntu2204 `
    --vnet-name $vnetName `
    --subnet $subnetName `
    --generate-ssh-keys `
    --output json `
    --verbose
```

----------------------------------------

TITLE: Authenticate Azure CLI with service principal using client secret
DESCRIPTION: This command authenticates to Azure using a service principal by providing its application ID, client secret, and tenant ID. It's suitable for automated scripts where the client secret can be securely managed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-service-principal.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az login --service-principal --username APP_ID --password CLIENT_SECRET --tenant TENANT_ID
```

----------------------------------------

TITLE: Listing Multiple VM Details (JSON Output)
DESCRIPTION: This snippet demonstrates how to list multiple Azure VMs within a resource group and project specific properties (Name, OS Type, Admin Username) into a custom JSON array using a JMESPath query. This provides a structured overview of key VM attributes in a machine-readable format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_30

LANGUAGE: bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: powershell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: json
CODE:
```
[
  {
    ""Name"": ""Test-2"",
    ""OS"": ""Linux"",
    ""admin"": ""sttramer""
  },
  {
    ""Name"": ""TestVM"",
    ""OS"": ""Linux"",
    ""admin"": ""azureuser""
  },
  {
    ""Name"": ""WinTest"",
    ""OS"": ""Windows"",
    ""admin"": ""winadmin""
  }
]
```

----------------------------------------

TITLE: Retrieving Specific JSON Properties as an Array from Azure Storage Account using Azure CLI
DESCRIPTION: This command fetches a comma-delimited list of specific properties (ID, primary location, blob endpoint, and last enabled time for blob encryption) from an Azure storage account. The `--query` parameter is used to return these properties as a JSON array.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az storage account show --resource-group <msdocs-tutorial-rg-00000000> \
                        --name <msdocssa000000000> \
                        --query ""[id, primaryLocation, primaryEndpoints.blob, encryption.services.blob.lastEnabledTime]""
```

----------------------------------------

TITLE: Filtering Azure Subscriptions by Default Property
DESCRIPTION: This snippet illustrates how to filter Azure subscriptions based on their `isDefault` boolean property using JMESPath. It demonstrates queries to find the default subscription, as well as non-default subscriptions using both the `!` logical operator and explicit `== \`false\`` comparison, noting PowerShell's specific escaping requirements.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_14

LANGUAGE: azurecli-interactive
CODE:
```
# Boolean values are assumed to be true, so you can directly evaluate the isDefault property to return the default subscription.
az account list --query ""[?isDefault].name""

# To check if a Boolean property is false, you can use the comparison operator == or the logical operator !.
az account list --query '[?!isDefault].name'
az account list --query ""[?isDefault == \`false\`].name""
```

LANGUAGE: azurecli-interactive
CODE:
```
# Boolean values are assumed to be true, so you can directly evaluate the isDefault property to return the default subscription.
az account list --query ""[?isDefault].name""

# To check if a Boolean property is false, you can use the comparison operator == or the logical operator !.
az account list --query ""[?!isDefault].name""
az account list --query ""[?isDefault == ``false``].name""
```

----------------------------------------

TITLE: Create Azure MariaDB Server and Firewall Rule (Azure CLI)
DESCRIPTION: This script demonstrates the creation of an Azure MariaDB server along with a corresponding firewall rule to control network access. It uses 'az mariadb server create' to provision the database server and 'az mariadb server firewall-rule create' to define access policies for specific IP ranges.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_54

LANGUAGE: Azure CLI
CODE:
```
az mariadb server create
az mariadb server firewall-rule create
```

----------------------------------------

TITLE: Formatting Azure CLI Command Output as a Table
DESCRIPTION: This command lists all accessible Azure subscriptions and formats the output as a readable table. The --output table parameter is commonly used to present data in a structured, human-friendly format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_20

LANGUAGE: Azure CLI
CODE:
```
az account list --output table
```

----------------------------------------

TITLE: Querying Public IP and Subnet IDs with Azure CLI
DESCRIPTION: This command queries the network interface information to extract specific details: the public IP address ID and the subnet ID. It formats the output as a JSON object with custom keys ('IP' and 'Subnet') for improved human readability, which is useful for custom scripts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-5.md#_snippet_1

LANGUAGE: bash
CODE:
```
az network nic show --ids $nicId \
  --query '{IP:ipConfigurations[].publicIPAddress.id, Subnet:ipConfigurations[].subnet.id}' \
  -o json
```

LANGUAGE: powershell
CODE:
```
az network nic show --ids $nicId `
  --query '{IP:ipConfigurations[].publicIPAddress.id, Subnet:ipConfigurations[].subnet.id}' `
  -o json
```

----------------------------------------

TITLE: Handling Spaces and Quotes in Azure CLI Bash Variables
DESCRIPTION: This section illustrates the difference between single and double quotes in Bash when defining variables and passing them to Azure CLI commands. It shows how single quotes ignore special characters like `$` and spaces, while double quotes allow variable evaluation and proper handling of spaces in arguments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
resourceGroup='msdocs-learn-bash-$randomIdentifier'
echo $resourceGroup # The $ is ignored in the creation of the $resourceGroup variable
resourceGroup=""msdocs-learn-bash-$randomIdentifier""
echo $resourceGroup # The $randomIdentifier is evaluated when defining the $resourceGroup variable
location=""East US"" # The space is ignored when defining the $location variable
echo The value of the location variable is $location # The value of the $location variable is evaluated
echo ""The value of the location variable is $location"" # The value of the $location variable is evaluated
echo ""The value of the location variable is \$location"" # The value of the $location variable is not evaluated
echo 'The value of the location variable is $location' # The value of the location variable is not evaluated
az group create --name $resourceGroup --location $location # Notice that the space in the $location variable is not ignored and the command fails as it treats the value after the space as a new command 
az group create --name $resourceGroup --location ""$location"" # Notice that the space in the $location variable is ignored and the location argument accepts the entire string as the value 
```

----------------------------------------

TITLE: Deleting Service Principal - Azure AD SP - Azure CLI
DESCRIPTION: This snippet details the behavioral changes for `az ad sp delete`. The command no longer automatically deletes the corresponding application or its role assignments. Users must now explicitly use `az ad app delete` and `az role assignment delete` for these operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/microsoft-graph-migration.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
Command no longer deletes corresponding application (use az ad app delete)
Command no longer deletes corresponding role assignments (use az role assignment delete)
```

----------------------------------------

TITLE: Deleting Azure Resource Group (Azure CLI)
DESCRIPTION: This command deletes an entire Azure resource group, which in turn removes all resources contained within it. This is a common practice for cleaning up resources after completing a task or tutorial.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_16

LANGUAGE: Azure CLI
CODE:
```
az group delete --resource-group <resourceGroupName>
```

----------------------------------------

TITLE: Deleting an Azure Resource Group - Azure CLI
DESCRIPTION: This command permanently deletes the Azure resource group named `MyResourceGroup`. Deleting a resource group also removes all resources contained within it, and this action cannot be undone.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az group delete --name MyResourceGroup
```

----------------------------------------

TITLE: Conditionally Creating Azure Resource Group with Bash
DESCRIPTION: This Bash script checks if an Azure resource group with a specified name already exists using `az group exists`. If it does not exist, the script proceeds to create the resource group using `az group create`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_14

LANGUAGE: azurecli
CODE:
```
if [ $(az group exists --name $resourceGroup) = false ]; then 
   az group create --name $resourceGroup --location ""$location"" 
else
   echo $resourceGroup
fi
```

----------------------------------------

TITLE: Resolving Invalid Value Error with Azure CLI TSV Output
DESCRIPTION: This snippet demonstrates the correct approach to retrieve a subscription ID using 'az account list' by specifying '--output tsv'. This ensures the 'subscriptionID' variable contains a clean ID without quotes, allowing it to be successfully used with 'az account set' to change the active subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-troubleshooting.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
# Get the active subscription
subscriptionID=$(az account list --query ""[?contains(name,'my case sensitive search phrase')].id"" --output tsv)
echo $subscriptionID

# output as TSV
00000000-0000-0000-0000-000000000000

# Successfully set your subscription to the new ID
az account set --subscription $subscriptionID
```

----------------------------------------

TITLE: Saving VM IDs to Variable and Stopping VMs (Cmd)
DESCRIPTION: This Cmd script retrieves the IDs of all running VMs in a specified resource group using Azure CLI, stores them in a variable, and then uses the collected IDs to stop all identified VMs in parallel.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_12

LANGUAGE: Cmd
CODE:
```
ECHO OFF
SETLOCAL
FOR /F ""tokens=* USEBACKQ"" %%F IN (
   `az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv`
) DO (
    SET ""vm_ids=%%F %vm_ids%""  :: construct the id list
)
az vm stop --ids %vm_ids% :: CLI stops all VMs in parallel
```

----------------------------------------

TITLE: Deploying Container Instances with Custom NAT Gateway (Azure CLI)
DESCRIPTION: This script illustrates how to deploy Azure Container Instances within a virtual network, configuring a custom NAT Gateway for outbound connectivity. It involves creating public IPs, NAT gateways, and updating VNet subnets.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_23

LANGUAGE: Azure CLI
CODE:
```
az container create
az container logs
az network nat gateway create
az network public-ip create
az network public-ip show
az network vnet subnet update
```

----------------------------------------

TITLE: Starting Azure CLI Docker Container
DESCRIPTION: This command starts a new Docker container with the Azure CLI preinstalled, using the `cbl-mariner2.0` tag. It provides an isolated environment for running CLI commands. When used in a pipeline, a deterministic tag name is recommended for consistency.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/run-azure-cli-docker.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -it mcr.microsoft.com/azure-cli:cbl-mariner2.0
```

----------------------------------------

TITLE: Reading and Filtering JSON in Bash with jq
DESCRIPTION: This Bash script demonstrates how to read a JSON file, display its contents, extract specific dictionary objects, and filter arrays based on conditions using the `jq` command-line JSON processor. It requires `jq` to be installed in the environment to function correctly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_12

LANGUAGE: bash
CODE:
```
# Show the contents of a file in the console
fileName=""msdocs-tutorial.json""
cat $fileName | jq

# Get a JSON dictionary object
stgKV=$(jq -r '.environments.stg.""kv-secretName""' $fileName)
echo $stgKV

# Filter a JSON array
devKV=$(jq -r '.environments.dev[] | select(.status==""active"") | .""kv-secretName""' $fileName)
echo $devKV
```

----------------------------------------

TITLE: Filtering Network Traffic with NSG (Azure CLI)
DESCRIPTION: This script illustrates how to filter network traffic in an Azure Virtual Network using Network Security Groups (NSGs). It involves `az network vnet create` and `az network vnet subnet create` for network setup, `az network nsg create` to create the NSG, `az network nsg rule create` to define traffic rules, `az network public-ip create` and `az network nic create` for network interfaces, and `az vm create` to deploy a VM for testing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_92

LANGUAGE: Azure CLI
CODE:
```
az network nic create
az network nsg create
az network nsg rule create
az network public-ip create
az network vnet create
az network vnet subnet create
az network vnet subnet update
az vm create
```

----------------------------------------

TITLE: Displaying Current Azure Subscription in Azure CLI
DESCRIPTION: This command shows the currently active Azure subscription for the CLI session. It's useful for verifying which subscription commands will operate against. The output is formatted as a table for readability.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-variables.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az account show --output table
```

----------------------------------------

TITLE: Quickly Creating a Windows VM (Azure CLI)
DESCRIPTION: This script offers a rapid way to deploy a basic Windows Azure Virtual Machine. It primarily uses the `az vm create` command to provision the VM with essential Windows image settings.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_83

LANGUAGE: Azure CLI
CODE:
```
az vm create
```

----------------------------------------

TITLE: Securely Resetting Azure AD Service Principal Password (PowerShell)
DESCRIPTION: This PowerShell script illustrates how to reset a service principal's password and store the new password directly into a variable using `--query password --output tsv`. This approach ensures that the sensitive password is not exposed in console output or logs. The `Write-Host` cmdlet is used for testing and should be commented out or removed in production environments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-7.md#_snippet_5

LANGUAGE: powershell
CODE:
```
# PowerShell script
$myNewPassword = az ad sp credential reset --id myServicePrincipalID --query password --output tsv

# The Write-Host cmdlet can be used for displaying the value when testing.
# Comment it out or remove it in production if you don't want to display the password.
Write-Host $myNewPassword
```

----------------------------------------

TITLE: Securely prompt for Azure CLI password in Bash
DESCRIPTION: This Bash command securely prompts for the Azure password using `read -sp`, preventing it from being displayed on the console or stored in history. The password is then passed to `az login` for service principal authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-service-principal.md#_snippet_2

LANGUAGE: bash
CODE:
```
read -sp ""Azure password: "" AZ_PASS && echo && az login --service-principal --username <app-id> --password $AZ_PASS --tenant <tenant>
```

----------------------------------------

TITLE: Listing Azure Accounts with Table Output in Azure CLI
DESCRIPTION: This command lists all Azure accounts accessible to the current user, formatting the output as a table. The `--output table` parameter is used to change the default JSON output to a more human-readable table format, which is useful for quick viewing in a terminal.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/what-is-azure-cli.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az account list --output table
```

----------------------------------------

TITLE: Securely Resetting Azure AD Service Principal Password (Bash)
DESCRIPTION: This Bash script demonstrates how to reset a service principal's password and securely capture the new password directly into a variable using `--query password --output tsv`. This method prevents the sensitive password from being written to console or log files, enhancing security. The `echo` command is included for testing purposes only and should be removed in production.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-7.md#_snippet_4

LANGUAGE: bash
CODE:
```
# Bash script
myNewPassword=$(az ad sp credential reset --id myServicePrincipalID --query password --output tsv)

# the echo command writes to the log file
# only use it when testing
echo $myNewPassword
```

----------------------------------------

TITLE: Setting Default Azure CLI Output Format
DESCRIPTION: This command configures the default output format for all subsequent Azure CLI commands to `jsonc` (JSON with comments). This global setting persists across sessions and eliminates the need to specify the `--output` parameter for every command, streamlining interactive use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/what-is-azure-cli.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az config set core.output=jsonc
```

----------------------------------------

TITLE: Deleting Multiple Azure Storage Containers in a Loop (Bash)
DESCRIPTION: This Bash script iterates through a list of container names stored in `containerList` (obtained from a previous `az storage container list` command). For each container name, it removes carriage returns using `sed` and then deletes the container using `az storage container delete`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_29

LANGUAGE: bash
CODE:
```
for row in $containerList
do
    tmpName=$(echo $row | sed -e 's/\r//g')
    az storage container delete \
    --name $tmpName 
done
```

----------------------------------------

TITLE: Handling Quoting for Variables in PowerShell
DESCRIPTION: This snippet illustrates how to correctly assign string values containing single or double quotes to variables in PowerShell. It shows the proper use of single and double quotes for wrapping strings and demonstrates incorrect ways of escaping quotes. The `echo` command is used to display the variable's content.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
# Correct
$myVariable = ""my string ' ' wrapped in single quotes""
$myVariable = 'my string "" "" wrapped in double quotes'

# Wrong
$myVariable = ""my value with escaped `"" `"" double quotes""
$myVariable = 'my value with escaped `' `' single quotes'

# after each example ...
echo $myVariable
```

----------------------------------------

TITLE: Creating Service Principal for RBAC using Azure CLI
DESCRIPTION: This snippet demonstrates how to create an Azure Service Principal (SP) for Role-Based Access Control (RBAC) using the `az ad sp create-for-rbac` command. It assigns a specified role (`$roleName`) within a defined resource group scope (`/subscriptions/$subscriptionID/resourceGroups/$resourceGroup`). The command requires pre-defined variables for `servicePrincipalName`, `roleName`, `subscriptionID`, and `resourceGroup`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
echo ""Using subscription ID $subscriptionID""
resourceGroup=""myResourceGroupName""

echo ""Creating SP for RBAC with name $servicePrincipalName, with role $roleName and in scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup""
az ad sp create-for-rbac --name $servicePrincipalName \
                         --role $roleName \
                         --scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup
```

----------------------------------------

TITLE: Creating and Connecting to Azure MySQL Flexible Server in VNet (Azure CLI)
DESCRIPTION: This script creates an Azure MySQL Flexible Server within a virtual network, configures private DNS, and sets up a VM to connect to the server, demonstrating private access setup.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_73

LANGUAGE: Bash
CODE:
```
az mysql flexible-server create
az mysql flexible-server list-skus
az network private-dns zone create
az network vnet create
az network vnet list-endpoint-services
az network vnet subnet create
az network vnet subnet show
az vm create
az vm open-port
```

----------------------------------------

TITLE: Filtering Azure VMs by SSD Storage Type (JMESPath)
DESCRIPTION: This snippet demonstrates how to list Azure Virtual Machines and filter them based on their OS disk's storage account type using a JMESPath query. It specifically selects VMs where the storage account type contains 'SSD' and projects their name and storage type. This helps identify VMs using SSD-backed storage.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_12

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[?contains(storageProfile.osDisk.managedDisk.storageAccountType,'SSD')].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType}""
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[?contains(storageProfile.osDisk.managedDisk.storageAccountType,'SSD')].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType}""
```

----------------------------------------

TITLE: Create Azure Resources at Scale (Azure CLI)
DESCRIPTION: This script demonstrates how to create multiple Azure resources, including virtual networks and virtual machines, at scale. It sets the active Azure account and provisions infrastructure components efficiently.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_4

LANGUAGE: Bash
CODE:
```
az account set
az network vnet create
az vm create
```

----------------------------------------

TITLE: Azure CLI Resource Group Creation Debug Output
DESCRIPTION: This snippet displays a sample of the verbose output generated when an Azure CLI command is executed with the `--debug` flag. It includes command arguments, the log file path, detailed HTTP request information (URL, method, headers, body), the HTTP response status, and the total execution time. This output is invaluable for diagnosing network issues, API call failures, or unexpected command behavior.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-troubleshooting.md#_snippet_3

LANGUAGE: Output
CODE:
```
cli.knack.cli: Command arguments: ['group', 'create', '-l', 'eastus2', '-n', 'msdocs-rg-test', '--debug']
...
cli.azure.cli.core.azlogging: metadata file logging enabled - writing logs to '/home/myName/.azure/commands/YYYY-MM-DD.HH-MM-SS.group_create.8912.log'.
...
cli.azure.cli.core.sdk.policies: Request URL: 'https://management.azure.com/subscriptions/00000000-0000-0000-0000-000000000000/resourcegroups/msdocs-rg-test?api-version=YYYY-MM-DD'
cli.azure.cli.core.sdk.policies: Request method: 'PUT'
cli.azure.cli.core.sdk.policies: Request headers:
cli.azure.cli.core.sdk.policies:     'Content-Type': 'application/json'
cli.azure.cli.core.sdk.policies:     'Content-Length': '23'
cli.azure.cli.core.sdk.policies:     'Accept': 'application/json'
cli.azure.cli.core.sdk.policies:     'x-ms-client-request-id': 'ba7ee6f4-2dcc-11ef-81ce-00155dadc5c8'
cli.azure.cli.core.sdk.policies:     'CommandName': 'group create'
cli.azure.cli.core.sdk.policies:     'ParameterSetName': '-l -n --debug'
cli.azure.cli.core.sdk.policies:     'User-Agent': 'AZURECLI/2.61.0 (RPM) azsdk-python-core/1.28.0 Python/3.9.19 (Linux-5.10.102.2-microsoft-standard-x86_64-with-glibc2.35) cloud-shell/1.0'
cli.azure.cli.core.sdk.policies:     'Authorization': '*****'
cli.azure.cli.core.sdk.policies: Request body:
cli.azure.cli.core.sdk.policies: {""location"": ""eastus2""}
urllib3.connectionpool: Starting new HTTPS connection (1): management.azure.com:443
urllib3.connectionpool: https://management.azure.com:443 ""PUT /subscriptions/3618afcd-ea52-4ceb-bb46-53bb962d4e0b/resourcegroups/msdocs-rg-test?api-version=2022-09-01 HTTP/1.1"" 201 226
cli.azure.cli.core.sdk.policies: Response status: 201
...
cli.azure.cli.core.sdk.policies:     'Date': 'Tue, 18 Jun 2024 23:44:41 GMT'
cli.azure.cli.core.sdk.policies: Response content:
cli.azure.cli.core.sdk.policies: {""id"":""/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/msdocs-rg-test"",""name"":""msdocs-rg-test"",""type"":""Microsoft.Resources/resourceGroups"",""location"":""eastus2"",""properties"":{""provisioningState"":""Succeeded""}}
...
cli.__main__: Command ran in 1.829 seconds (init: 0.111, invoke: 1.718)
```

----------------------------------------

TITLE: Listing All Azure Resource Groups - Azure CLI
DESCRIPTION: This command lists all resource groups associated with the current Azure subscription. The `--output table` parameter formats the output as a readable table, making it easier to review existing resource groups.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az group list --output table
```

----------------------------------------

TITLE: Signing In with Service Principal Using Certificate (Azure CLI)
DESCRIPTION: This Azure CLI command allows signing in to Azure using a service principal authenticated by a local PEM or DER certificate file. It requires the application ID, the path to the certificate file, and the tenant ID for successful authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
az login --service-principal --username APP_ID --certificate /path/to/cert.pem --tenant TENANT_ID
```

----------------------------------------

TITLE: Configuring Cosmos DB Service Endpoints with Azure CLI
DESCRIPTION: This snippet illustrates creating a Cosmos DB account, a virtual network, and a subnet, then configuring service endpoints to secure network access to Cosmos DB from the VNet.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_40

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az network vnet create
az network vnet subnet create
az network vnet subnet show
```

----------------------------------------

TITLE: Basic Azure CLI Error Handling with $? in PowerShell
DESCRIPTION: This example demonstrates a basic method for error handling Azure CLI commands in PowerShell using the `$?` automatic variable. After an Azure CLI command executes, `$?` can be checked to determine if the command succeeded (`$True`) or failed (`$False`), allowing for conditional error messages.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_24

LANGUAGE: powershell
CODE:
```
az group create --name MyResourceGroup
if ($? -eq $false) {
    Write-Error ""Error creating resource group.""
}
```

----------------------------------------

TITLE: Using --query Parameter in Bash (Correct)
DESCRIPTION: Demonstrates the correct ways to use the `--query` parameter with Azure CLI commands in Bash, specifically when querying for a string that contains a hyphen. It shows that the JMESPath string must be enclosed in single quotes, escaped double quotes, or double quotes with inner escaped double quotes to be parsed correctly by Bash and JMESPath.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_10

LANGUAGE: Bash
CODE:
```
az version --query '""azure-cli""'
az version --query \""azure-cli\""
az version --query ""\""azure-cli\""""
```

----------------------------------------

TITLE: Create VM with Network Load Balancer (Azure CLI)
DESCRIPTION: This script provisions virtual machines and configures a network load balancer to distribute traffic among them. It includes commands for creating virtual networks, public IPs, network security groups, NICs, availability sets, VMs, and various load balancer components like probes, rules, and NAT rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_47

LANGUAGE: Azure CLI
CODE:
```
az network lb create
az network lb inbound-nat-rule create
az network lb probe create
az network lb rule create
az network nic create
az network nsg create
az network nsg rule create
az network public-ip create
az network vnet create
az vm availability-set create
az vm create
az vm list
```

----------------------------------------

TITLE: Setting Active Azure Subscription
DESCRIPTION: This command allows you to change the active Azure subscription for subsequent CLI operations. You must replace `<subscription-id>` with the actual ID of the desired subscription. This is crucial for managing resources within a specific subscription context.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-with-azure-cli.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""<subscription-id>""
```

----------------------------------------

TITLE: Changing the active Azure subscription (Azure CLI)
DESCRIPTION: This command allows users to change their active Azure subscription to a specified subscription name. It's essential for managing resources across multiple subscriptions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""mySubscriptionName""
```

----------------------------------------

TITLE: Restoring Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This script creates an Azure MySQL Flexible Server and then performs a restore operation, demonstrating disaster recovery capabilities for flexible server instances.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_70

LANGUAGE: Bash
CODE:
```
az mysql flexible-server create
az mysql flexible-server restore
```

----------------------------------------

TITLE: Checking Azure CLI and PowerShell Versions
DESCRIPTION: This snippet demonstrates how to check the installed versions of Azure CLI and PowerShell. It uses the 'az version' command for Azure CLI and the '$PSVersionTable' variable for PowerShell to display detailed version information of the respective tools.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_0

LANGUAGE: powershell
CODE:
```
az version

$PSVersionTable
```

----------------------------------------

TITLE: Creating Azure Key Vault Secret with No Output (Azure CLI)
DESCRIPTION: This command creates a new secret in Azure Key Vault. It uses the `--output none` option to prevent the secret value from being displayed in the console, enhancing security. The secret can be retrieved later using `az keyvault secret show`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_10

LANGUAGE: azurecli-interactive
CODE:
```
az keyvault secret set --name MySecretName \
                       --vault-name MyKeyVaultName \
                       --value MySecretValue\
                       --output none
```

----------------------------------------

TITLE: Deleting Multiple Azure Storage Containers in a Loop (Azure CLI)
DESCRIPTION: This snippet iterates through a list of container names (presumably obtained from a previous command like 'az storage container list') and deletes each container individually. It includes a 'sed' command to remove carriage returns, ensuring proper processing of each container name.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_30

LANGUAGE: azurecli
CODE:
```
for row in $containerList
do
    tmpName=$(echo $row | sed -e 's/\r//g')
    az storage container delete \
    --name $tmpName 
done
```

----------------------------------------

TITLE: Creating a CannotDelete Azure Subscription Lock (Azure CLI)
DESCRIPTION: This command creates a `CanNotDelete` lock on the current Azure subscription, preventing any user from deleting it. The lock is named 'Cannot delete subscription'. This requires `contributor` permissions on the subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_14

LANGUAGE: azurecli-interactive
CODE:
```
az account lock create --name ""Cannot delete subscription"" --lock-type CanNotDelete
```

----------------------------------------

TITLE: Creating User Subscription Batch Account with Key Vault (Azure CLI)
DESCRIPTION: This script creates an Azure Batch account under a user subscription, logs into it, and sets up an Azure Key Vault with appropriate policies and role assignments. This configuration is suitable for secure credential management.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_19

LANGUAGE: Azure CLI
CODE:
```
az batch account create
az batch account login
az keyvault create
az keyvault set-policy
az role assignment create
```

----------------------------------------

TITLE: Installing or Updating Azure CLI via Script (Bash)
DESCRIPTION: This `bash` command downloads and executes the official Azure CLI installation script using `curl`. It's used for both initial setup and updating to the latest version, ensuring component stability. A shell restart may be required for changes to take effect.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-linux-script.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -L https://aka.ms/InstallAzureCli | bash
```

----------------------------------------

TITLE: Backup and Restore Azure MariaDB Server (Azure CLI)
DESCRIPTION: This script demonstrates how to create an Azure MariaDB server and then perform a point-in-time restore operation. It uses 'az mariadb server create' to provision the server and 'az mariadb server restore' to recover data from a specified backup point.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_52

LANGUAGE: Azure CLI
CODE:
```
az mariadb server create
az mariadb server restore
```

----------------------------------------

TITLE: Bulk Removing IP Firewall Rules from Cosmos DB with Azure CLI
DESCRIPTION: This snippet sets the active Azure subscription, lists Cosmos DB accounts, retrieves their current configuration, and then updates them to bulk remove specified IP firewall rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_36

LANGUAGE: Azure CLI
CODE:
```
az account set
az cosmosdb list
az cosmosdb show
az cosmosdb update
```

----------------------------------------

TITLE: Creating a Service Principal with Full Certificate String (Azure CLI)
DESCRIPTION: This command demonstrates creating a service principal by providing the complete certificate string, including the `-----BEGIN CERTIFICATE-----` and `-----END CERTIFICATE-----` headers. This format ensures the entire certificate block is passed correctly to the `--cert` parameter for authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert ""-----BEGIN CERTIFICATE-----\nMIICoT...\n-----END CERTIFICATE-----""
```

----------------------------------------

TITLE: Looping Through VM IDs and Stopping VMs Individually (PowerShell)
DESCRIPTION: This PowerShell script retrieves the IDs of all running VMs in a specified resource group. It then iterates through each ID, printing a message and stopping each VM sequentially using the Azure CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_15

LANGUAGE: PowerShell
CODE:
```
$vm_ids=(az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv)
foreach ($vm_id in $vm_ids) {
    Write-Output ""Stopping $vm_id""
    az vm stop --ids $vm_id
}
```

----------------------------------------

TITLE: Looping Through Running VM IDs and Stopping Individually in PowerShell
DESCRIPTION: This PowerShell script first retrieves the IDs of all running VMs in the `VMResources` resource group. It then iterates through each ID, printing a message indicating which VM is being stopped, and subsequently stops each VM individually using `az vm stop`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_15

LANGUAGE: azurecli
CODE:
```
$vm_ids=(az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv)
foreach ($vm_id in $vm_ids) {
    Write-Output ""Stopping $vm_id""
    az vm stop --ids $vm_id
}
```

----------------------------------------

TITLE: Querying and Formatting Array Properties with Azure CLI
DESCRIPTION: This snippet demonstrates how to extract specific properties from a JSON array returned by `az account list` and format them into a table. It uses a JMESPath query to select `id`, `name`, and `isDefault` properties, renaming them to `subscription_id`, `name`, and `isDefault` respectively, and outputs the result as a table.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_5

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[].{subscription_id:id, name:name, isDefault:isDefault}"" -o table
```

----------------------------------------

TITLE: Creating Azure Resource Group with Random ID (Bash)
DESCRIPTION: This Bash script creates an Azure resource group with a unique name by appending a random identifier. This approach is ideal for testing scenarios, allowing repeated execution without conflicts from previously created resources of the same name.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_4

LANGUAGE: Bash
CODE:
```
let ""randomIdentifier=$RANDOM*$RANDOM""
location=""eastus""
resourceGroup=""msdocs-tutorial-rg-$randomIdentifier""
az group create --name $resourceGroup --location $location --output json
```

----------------------------------------

TITLE: Creating VM with Network Load Balancer - Azure CLI
DESCRIPTION: This snippet demonstrates the Azure CLI commands required to create a virtual machine and configure a network load balancer. It includes commands for creating a VNet, public IP, NSG, NIC, availability set, VM, and various load balancer components like rules, probes, and NAT rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_34

LANGUAGE: Azure CLI
CODE:
```
az network lb create
az network lb inbound-nat-rule create
az network lb probe create
az network lb rule create
az network nic create
az network nsg create
az network nsg rule create
az network public-ip create
az network vnet create
az vm availability-set create
az vm create
az vm list
```

----------------------------------------

TITLE: Deleting Azure Storage Accounts by Creation Date using Azure CLI
DESCRIPTION: This script identifies and deletes Azure storage accounts within a specified resource group that were created within the last 30 days. It logs the deletion process to `myLogName.txt` and uses `--yes` for no confirmation and `--no-wait` for asynchronous deletion. The script then displays the contents of the log file.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/delete-azure-resources-at-scale.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
# Set your log file location
logFileLocation=""myLogName.txt""

# Set your resource group variable
rgName=<msdocs-rg-0000000>

# Get a list of Azure storage accounts that were created in the last 30 days. Return the results as a table.
saDate=$(date +%F -d ""-30days"")
az storage account list --resource-group $rgName \
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" \
                        --output table

# Delete storage accounts without a confirmation prompt (--yes).
# Do not wait for the operation to finish (--no-wait)
echo ""Deleting storage accounts"">$logFileLocation
for saList in $(az storage account list --resource-group $rgName \
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" \
                        --output tsv);
do
    echo ""deleting storage account $saList"">>$logFileLocation
    az storage account delete --ids $saList --yes --no-wait
done

# read your log file with Linux ""cat"" command
clear
cat $logFileLocation
```

----------------------------------------

TITLE: Creating Disk with OS Type from Existing VM using Shell Variables
DESCRIPTION: This example demonstrates how to create a new storage disk with the same OS type as an existing virtual machine by leveraging shell variables. It shows how to assign static values to variables like resource group and VM name, and dynamically retrieve the OS type using `az vm get-instance-view` with a JMESPath query (`storageProfile.osDisk.osType`) and `tsv` output format. The retrieved OS type is then used as a parameter for `az disk create`. Note that subscription names with spaces require quotation marks.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-variables.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# Bash script
# Assign values to variables
MyResourceGroup=ContosoRGforVM
MySubscription=""Contoso subscription""
vmName=VM01

# Get a value for a variable based on an existing virtual machine
osType=$(az vm get-instance-view --resource-group $MyResourceGroup \
   --name $vmName --subscription ""$MySubscription"" \
   --query 'storageProfile.osDisk.osType' --output tsv)

# Create a disk of the same type by using the variable value
az disk create --resource-group $MyResourceGroup --name DestinationDisk --size-gb 20 --os-type $osType
```

LANGUAGE: PowerShell
CODE:
```
# PowerShell script
# Assign values to variables
$MyResourceGroup = ""ContosoRGforVM""
$MySubscription = ""Contoso subscription""
$vmName = ""VM01""

# Get a value for a variable based on an existing virtual machine
$osType=$(az vm get-instance-view --resource-group $MyResourceGroup `
   --name $vmName --subscription $MySubscription `
   --query 'storageProfile.osDisk.osType' --output tsv)

# Create a disk of the same type by using the variable value
az disk create --resource-group $MyResourceGroup --name DestinationDisk --size-gb 20 --os-type $osType
```

----------------------------------------

TITLE: Renaming Properties in Azure CLI Queries
DESCRIPTION: These snippets show how to rename properties in the query results using the multiselect hash `{}` operator. This allows for custom output field names like `SubscriptionName`, `SubscriptionId`, and `UserName` instead of the original `name`, `id`, and `user.name`, with the second command outputting the result as a table.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_7

LANGUAGE: azurecli-interactive
CODE:
```
az account show --query ""{SubscriptionName: name, SubscriptionId: id, UserName: user.name}""
```

LANGUAGE: azurecli-interactive
CODE:
```
az account show --query ""{SubscriptionName: name, SubscriptionId: id, UserName: user.name}"" -o table
```

----------------------------------------

TITLE: Resetting Service Principal Credential to Variable (Bash)
DESCRIPTION: This Bash script resets the credentials for an Azure Active Directory service principal and securely captures the new password directly into a variable using `--query password --output tsv`. This prevents the sensitive password from being displayed in the console. The `echo` line is for demonstration and should be removed in production.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
# Bash Script
# reset service principal credentials returning results to a variable
myNewPassword=$(az ad sp credential reset --id myServicePrincipalID --query password --output tsv)

# Display the new password (remove this line in production for security)
echo ""New password: $myNewPassword""
```

----------------------------------------

TITLE: Resetting Service Principal Credential with Default JSON Output (Azure CLI)
DESCRIPTION: This command resets the credentials for an Azure Active Directory service principal. It explicitly sets the output format to `json`, which will display the new password directly in the console, posing a security risk for sensitive information.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_11

LANGUAGE: azurecli-interactive
CODE:
```
# reset service principal credentials using default output format (json).
az ad sp credential reset --id myServicePrincipalID --output json
```

----------------------------------------

TITLE: Managing Azure Resource Locks for Cosmos DB with Azure CLI
DESCRIPTION: This snippet demonstrates how to manage Azure resource locks, including creating, deleting, listing, and showing details of locks, which can prevent accidental deletion or modification of Cosmos DB resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_29

LANGUAGE: Azure CLI
CODE:
```
az lock create
az lock delete
az lock list
az lock show
```

----------------------------------------

TITLE: Creating Multiple Azure Storage Containers with Loops (Azure CLI)
DESCRIPTION: This snippet demonstrates creating multiple Azure Storage containers using different 'for' loop syntaxes in Bash. The first loop creates containers named 'learnbash-1' through 'learnbash-4' using 'seq'. The second block shows two commented-out loop syntaxes ('{5..8}' and '(( i=5; i<10; i++))') followed by an active loop that creates containers 'learnbash-5' through 'learnbash-9'. Finally, it lists all containers to verify creation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_25

LANGUAGE: azurecli
CODE:
```
for i in `seq 1 4`; do 
az storage container create --account-name $storageAccount --account-key $accountKey --name learnbash-$i
done

for value in {5..8}
for (( i=5; i<10; i++));
do
az storage container create --account-name $storageAccount --account-key $accountKey --name learnbash-$i
done

az storage container list --account-name $storageAccount --account-key $accountKey --query [].name
```

----------------------------------------

TITLE: Querying specific properties from command output (Azure CLI)
DESCRIPTION: This command demonstrates how to use a JMESPath query to extract specific properties (tenantId and subscriptionid) from the output of the `az account show` command, allowing for precise data retrieval.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_14

LANGUAGE: Azure CLI
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

----------------------------------------

TITLE: Creating an Azure SQL Server using Azure CLI
DESCRIPTION: This snippet demonstrates how to create a new Azure SQL server using the `az sql server create` command. It defines variables for the server name, resource group, location, administrator username, and password, which are then used as parameters for the command. This is a prerequisite step for creating an Azure SQL database.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-copilot.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Variable block
serverName=""myServerName""
resourceGroup=""myResourceGroup""
locationName=""eastus2""
adminUser=""myAdminUser""
adminPassword=""myPassword""

az sql server create --name $serverName --resource-group $resourceGroup --location $location --admin-user $adminUser --admin-password $adminPassword
```

----------------------------------------

TITLE: Resetting Application Credentials - Azure AD App - Azure CLI
DESCRIPTION: This snippet outlines the changes for `az ad app credential reset`. The `--credential-description` argument is replaced by `--display-name`, and the `--password` argument is removed, with the Graph service now creating a password if certificate arguments are not specified.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/microsoft-graph-migration.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
--credential-description replaced with --display-name
--password removed (Graph service creates a password if no certificate arguments)
```

----------------------------------------

TITLE: Retrieving Azure CLI Access Tokens using az account get-access-token
DESCRIPTION: This snippet demonstrates how to use the `az account get-access-token` command to retrieve access tokens for Azure Resource Manager. It shows how to get the active subscription's token and how to specify a token for a particular subscription ID or name. This command serves as an alternative to the deprecated `accessTokens.json` file.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/msal-based-azure-cli.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
# get the active subscription
az account show --output table

# get access token for the active subscription
az account get-access-token

# get access token for a specific subscription
az account get-access-token --subscription ""<subscription ID or name>""
```

----------------------------------------

TITLE: Manage Server Logs for Azure Database for PostgreSQL (Azure CLI)
DESCRIPTION: This script demonstrates how to manage server logs for an Azure Database for PostgreSQL server. It includes commands to list and set server configurations, create a PostgreSQL server, and then download and list available server logs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_88

LANGUAGE: Azure CLI
CODE:
```
az postgres server configuration list
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server configuration set
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server create
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server-logs download
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server-logs list
```

----------------------------------------

TITLE: Retrieving Azure CLI Access Token
DESCRIPTION: This snippet demonstrates how to retrieve an access token using the `az account get-access-token` command. It provides examples for obtaining the token for the currently active subscription and for a specified subscription by its ID or name. The command returns an access token along with expiration details, including `expires_on` (a POSIX timestamp in UTC, recommended for use) and `expiresOn` (a local datetime). An example output shows properties like `accessToken`, `expiresOn`, `expires_on`, `subscription`, `tenant`, and `tokenType`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/refresh-token.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# get access token for the active subscription
az account get-access-token

# get access token for a specific subscription
az account get-access-token --subscription ""<subscription ID or name>""
```

----------------------------------------

TITLE: Renaming Azure VM Properties to a Dictionary (Azure CLI)
DESCRIPTION: This snippet shows how to use the JMESPath multiselect hash operator (`{}`) to query Azure VM properties and return them as a dictionary with custom display names. It retrieves the VM name, admin username, and SSH key, mapping them to 'VMName', 'admin', and 'sshKey' respectively. The output will be a JSON object (dictionary) with the specified keys.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_1

LANGUAGE: bash
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKey:osProfile.linuxConfiguration.ssh.publicKeys[0].keyData}""
```

LANGUAGE: powershell
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKey:osProfile.linuxConfiguration.ssh.publicKeys[0].keyData }""
```

LANGUAGE: cmd
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKey:osProfile.linuxConfiguration.ssh.publicKeys[0].keyData }""
```

----------------------------------------

TITLE: Troubleshooting 'az command not found' by Reloading Shell Cache (Bash)
DESCRIPTION: This command is used to troubleshoot the 'az command not found' error by clearing and reloading the shell's command hash cache. This ensures the shell re-scans the '$PATH' for the 'az' executable, often resolving issues after installation or path modifications.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-linux-script.md#_snippet_5

LANGUAGE: bash
CODE:
```
hash -r
```

----------------------------------------

TITLE: Creating Service Principal with New Self-Signed Certificate (Azure CLI)
DESCRIPTION: This command creates an Azure Active Directory service principal and generates a new self-signed certificate for authentication. The `--create-cert` parameter instructs Azure CLI to automatically generate the certificate and store it locally. The output includes the path to the generated PEM file containing both the public certificate and the private key, which should be secured.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --create-cert
```

----------------------------------------

TITLE: Create PostgreSQL Server with VNet Integration (Azure CLI)
DESCRIPTION: This script demonstrates how to create an Azure Database for PostgreSQL server with virtual network (VNet) integration. It includes commands to create a VNet, list endpoint services, create and show a subnet, create the PostgreSQL server, and establish a VNet rule.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_86

LANGUAGE: Azure CLI
CODE:
```
az network vnet create
```

LANGUAGE: Azure CLI
CODE:
```
az network vnet list-endpoint-services
```

LANGUAGE: Azure CLI
CODE:
```
az network vnet subnet create
```

LANGUAGE: Azure CLI
CODE:
```
az network vnet subnet show
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server create
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server vnet-rule create
```

----------------------------------------

TITLE: Creating Azure Storage Account (PowerShell)
DESCRIPTION: This Azure CLI snippet, designed for PowerShell, creates a new Azure resource group and a storage account. It uses a random identifier for unique naming and specifies the location, SKU, and kind for the storage account. This is a prerequisite for running test scripts that require an Azure storage account.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
# PowerShell syntax example

# Variable block
$randomIdentifier = $(Get-Random)
$location=""eastus""
$resourceGroup=""msdocs-test-rg-$randomIdentifier""
$storageAccount=""msdocssa$randomIdentifier""

# Create a resource group.
az group create --name $resourceGroup --location $location

# Create a storage account.
echo ""Creating storage account $storageAccount in resource group $resourceGroup""
az storage account create --name $storageAccount `
    --resource-group $resourceGroup `
    --location $location `
    --sku Standard_RAGRS `
    --kind StorageV2 `
    --output json
```

----------------------------------------

TITLE: Stopping Multiple VMs with a Bash For Loop (Azure CLI)
DESCRIPTION: This Bash script demonstrates how to iterate through a list of running Azure VM IDs obtained from 'az vm list' and stop each VM individually using a 'for' loop. It includes basic error handling to report failures for specific VMs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_2

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
for vmList in $(az vm list --resource-group MyResourceGroup --show-details --query ""[?powerState=='VM running'].id""   -output tsv); do
    echo stopping $vmList
    az vm stop --ids $vmList
    if [ $? -ne 0 ]; then
        echo ""Failed to stop $vmList""
        exit 1
    fi
    echo $vmList stopped
done
```

----------------------------------------

TITLE: Load Balance VMs Across Availability Zones (Azure CLI)
DESCRIPTION: This script sets up an Azure Load Balancer to distribute traffic across virtual machines deployed in different availability zones. It configures network components such as VNet, public IP, NSG, NICs, and the load balancer with its probes, rules, and inbound NAT rules to ensure high availability.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_48

LANGUAGE: Azure CLI
CODE:
```
az network lb create
az network lb inbound-nat-rule create
az network lb probe create
az network lb rule create
az network nic create
az network nsg create
az network nsg rule create
az network public-ip create
az network vnet create
az vm create
az vm list
```

----------------------------------------

TITLE: Handling JSON Parameters in PowerShell (Correct)
DESCRIPTION: Illustrates the correct methods for passing JSON string parameters to Azure CLI commands in PowerShell. It highlights the use of single quotes, backtick-escaped double quotes, or doubled double quotes to ensure the JSON string is passed correctly to the command, accounting for PowerShell's parsing rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_5

LANGUAGE: PowerShell
CODE:
```
az '{""key"": ""value""}' --debug

az ""{\`""key\`"": \`""value\`""}"" --debug

az ""{\""\""key\""\"": \""\""value\""\""}"" --debug
```

----------------------------------------

TITLE: Retrieving Azure Storage Account Keys (Azure CLI)
DESCRIPTION: This set of commands retrieves the access keys for an Azure Storage account. The first command lists all keys, while the second specifically retrieves the first key. The third command stores the first key's value into the 'accountKey' variable for subsequent operations. The final command echoes the stored key.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_19

LANGUAGE: azurecli
CODE:
```
az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query ""[].value"" -o tsv # returns both storage account key values

az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query ""[0].value"" -o tsv # returns a single storage account key value

accountKey=$(az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query ""[0].value"" -o tsv)

echo $accountKey
```

----------------------------------------

TITLE: Storing Azure CLI Query Results in Variables
DESCRIPTION: These commands illustrate how to capture the output of an Azure CLI query into a shell variable. It demonstrates retrieving the default subscription ID in TSV format, storing it, displaying the variable's content, and then using a similar technique to find a subscription by name and set it as the active subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_10

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault].id"" -o tsv
```

LANGUAGE: azurecli-interactive
CODE:
```
subscriptionId=""$(az account list --query \""[?isDefault].id\"" -o tsv)""
```

LANGUAGE: azurecli-interactive
CODE:
```
echo $subscriptionId
```

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[? contains(name, 'Test')].id"" -o tsv
```

LANGUAGE: azurecli-interactive
CODE:
```
subscriptionId=""$(az account list --query \""[? contains(name, 'Test')].id\"" -o tsv)""
```

LANGUAGE: azurecli-interactive
CODE:
```
az account set -s $subscriptionId
```

----------------------------------------

TITLE: Updating Azure CLI and Extensions using `az upgrade` (Azure CLI)
DESCRIPTION: This command updates the Azure CLI to its latest version. By default, it also updates all installed Azure CLI extensions. This functionality is available for Azure CLI versions 2.11.0 and later.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/az-upgrade.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az upgrade
```

----------------------------------------

TITLE: Signing Out from Azure CLI
DESCRIPTION: Logs the current user out of Azure CLI, terminating the active session and removing cached credentials. This command ensures that subsequent Azure CLI operations require re-authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-interactively.md#_snippet_8

LANGUAGE: azurecli-interactive
CODE:
```
az logout
```

----------------------------------------

TITLE: Formatting Azure CLI command output as a table (Azure CLI)
DESCRIPTION: This command lists all Azure accounts and formats the output as a readable table. The `--output table` parameter is commonly used to present command results in a structured, human-friendly format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_15

LANGUAGE: Azure CLI
CODE:
```
az account list --output table
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Creation Time (PowerShell)
DESCRIPTION: This command filters Azure Storage Accounts created after '2024-02-01' using a JMESPath query. It highlights the syntax for filtering by date, where the date value is enclosed in escaped single quotes within the main query string, specifically for PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_11

LANGUAGE: azurecli
CODE:
```
az storage account list --query '[?creationTime >=''2024-02-01''].{""""SA Name"""":name,""""Primary endpoint"""":primaryEndpoints.blob}' --output table
```

----------------------------------------

TITLE: Listing Blobs in Azure Storage Container using Azure CLI
DESCRIPTION: This command lists all blobs within a specified Azure storage container. It uses the az storage blob list command, providing the container name, account key, and account name. The output is queried to display only the names of the blobs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_22

LANGUAGE: azurecli
CODE:
```
az storage blob list \
    --container-name $container \
    --account-key $accountKey \
    --account-name $storageAccount \
    --query ""[].name""
```

----------------------------------------

TITLE: Storing Default Azure Subscription ID in a Bash Variable
DESCRIPTION: This Bash snippet demonstrates how to capture the ID of the default Azure subscription and store it in a shell variable. It uses `az account list` to query for the default subscription's ID and `tsv` output format for easy assignment to a variable, which is then echoed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_3

LANGUAGE: Bash
CODE:
```
# store the default subscription in a variable
subscriptionId=""$(az account list --query ""[?isDefault].id"" --output tsv)""
echo $subscriptionId
```

----------------------------------------

TITLE: Calculating Total Blob Size in Azure Storage Container (Azure CLI)
DESCRIPTION: This script calculates the total size of all blobs in a specified Azure Storage container. It retrieves the 'contentLength' property for each blob, sums them using 'paste' and 'bc', and then echoes the total bytes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_24

LANGUAGE: azurecli
CODE:
```
bytes=`az storage blob list \
    --container-name $container \
    --account-key $accountKey \
    --account-name $storageAccount \
    --query ""[*].[properties.contentLength]"" \
    --output tsv | paste -s -d+ | bc`

echo ""Total bytes in container: $bytes""
echo $bytes
```

----------------------------------------

TITLE: Securely Logging in with Azure CLI using PowerShell and Client Secret
DESCRIPTION: This PowerShell snippet demonstrates how to securely prompt for and use a service principal's client secret using the `Get-Credential` cmdlet. This method prevents the password from being directly exposed in the script or console output.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-service-principal.md#_snippet_3

LANGUAGE: powershell
CODE:
```
$AzCred = Get-Credential -UserName <app-id>
az login --service-principal --username $AzCred.UserName --password $AzCred.GetNetworkCredential().Password --tenant <tenant>
```

----------------------------------------

TITLE: Setting Active Azure CLI Subscription
DESCRIPTION: This command allows you to change the active Azure subscription for your current Azure CLI session. By setting a specific subscription, subsequent Azure CLI commands will operate within that subscription without needing to explicitly specify the `--subscription` parameter. If the subscription name contains spaces, it must be enclosed in double quotation marks.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-variables.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""My Demos""
```

----------------------------------------

TITLE: Peering Two Virtual Networks (Azure CLI)
DESCRIPTION: This script demonstrates how to establish peering between two Azure Virtual Networks, enabling seamless communication between resources in different VNets. It uses `az network vnet create` to provision both virtual networks, `az network vnet peering create` to establish the peering connection, and `az network vnet show` to verify network details.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_93

LANGUAGE: null
CODE:
```
undefined
```

----------------------------------------

TITLE: Executing End-to-End Scenarios with Azure CLI
DESCRIPTION: The az scenario command offers guided, end-to-end examples for common Azure tasks. Users can provide keywords to find relevant scenarios and execute them with step-by-step prompts, facilitating practical learning.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_13

LANGUAGE: Azure CLI
CODE:
```
az scenario guide ""keywords of interest""
```

----------------------------------------

TITLE: Getting Next Steps in Azure CLI - Azure CLI
DESCRIPTION: The `az next` command offers suggestions for subsequent commands based on the current context. This feature assists users in completing multi-step operations efficiently by guiding them through the workflow.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_10

LANGUAGE: Azure CLI
CODE:
```
az next
```

----------------------------------------

TITLE: Starting Azure CLI Interactive Mode
DESCRIPTION: This command launches the Azure CLI in interactive mode, providing an enhanced shell environment with features like autocompletion, command descriptions, and examples for easier command execution and learning.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/interactive-azure-cli.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az interactive
```

----------------------------------------

TITLE: Working in Interactive Mode with Azure CLI
DESCRIPTION: This command launches an interactive shell for Azure CLI, providing auto-completion, command descriptions, and examples as you type. It's ideal for learning and exploring Azure CLI commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
az interactive
```

----------------------------------------

TITLE: Saving VM IDs to Variable and Stopping VMs (PowerShell)
DESCRIPTION: This PowerShell script fetches the IDs of all running VMs in a specified resource group using Azure CLI, assigns them to a variable, and then uses this variable to stop all identified VMs concurrently.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_13

LANGUAGE: PowerShell
CODE:
```
$vm_ids=(az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv)
az vm stop --ids $vm_ids # CLI stops all VMs in parallel
```

----------------------------------------

TITLE: Creating Azure Storage Account in PowerShell
DESCRIPTION: This snippet illustrates creating an Azure Storage Account using the Azure CLI within a PowerShell environment. It defines variables for resource group, location, and a unique storage account name, then calls `az storage account create` with the necessary parameters, using PowerShell's backtick for line continuation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_4

LANGUAGE: PowerShell
CODE:
```
# Variable block
$randomIdentifier = (New-Guid).ToString().Substring(0,8)
$location=""eastus""
$resourceGroup=""<msdocs-tutorial-rg-00000000>""
$storageAccount=""msdocssa$randomIdentifier""

# Create a storage account.
echo ""Creating storage account $storageAccount in resource group $resourceGroup""
az storage account create --name $storageAccount `
                          --resource-group $resourceGroup `
                          --location $location `
                          --sku Standard_RAGRS `
                          --kind StorageV2 `
                          --output json
```

----------------------------------------

TITLE: Installing Azure CLI with One Command - Bash
DESCRIPTION: This command downloads an installation script for the Azure CLI via `curl` and pipes it directly to `bash` for execution. This provides a quick and automated way to install the Azure CLI on Debian/Ubuntu systems.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-linux-apt.md#_snippet_1

LANGUAGE: Bash
CODE:
```
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
```

----------------------------------------

TITLE: Deprecating Stop Replication for Azure PostgreSQL Flexible Server Replica Azure CLI
DESCRIPTION: The `az postgres flexible-server replica stop-replication` command is deprecated and will be removed in Azure CLI 2.73.0. To promote a replica to a standalone server, users should now use the `az postgres flexible-server replica promote` command instead.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/upcoming-breaking-changes.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server replica stop-replication
```

LANGUAGE: Azure CLI
CODE:
```
az postgres flexible-server replica promote
```

----------------------------------------

TITLE: Incorrect JMESPath Query Quoting in Bash
DESCRIPTION: Demonstrates an incorrect way to quote a JMESPath query containing a dash in Bash, leading to an 'invalid jmespath_type' error because Bash interprets the quotes prematurely.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_11

LANGUAGE: azurecli
CODE:
```
az version --query ""azure-cli""
```

----------------------------------------

TITLE: Performing Interactive Login with Azure CLI
DESCRIPTION: This command initiates an interactive login process for Azure CLI. By default, it utilizes Web Account Manager (WAM) on Windows and a browser-based login on Linux and macOS, making it suitable for ad-hoc management tasks and scenarios requiring multifactor authentication (MFA).
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-interactively.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az login
```

----------------------------------------

TITLE: Creating DNS Zone and A Record - Azure CLI
DESCRIPTION: This snippet illustrates the process of creating an Azure DNS zone and adding an A record to it using Azure CLI. It utilizes `az network dns zone create` to establish the zone, `az network dns record-set a add-record` to add an A record, and `az network dns record-set list` to verify existing record sets.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_32

LANGUAGE: Azure CLI
CODE:
```
az network dns record-set a add-record
az network dns record-set list
az network dns zone create
```

----------------------------------------

TITLE: Retrieving Certificate from Azure Key Vault and Converting to PEM
DESCRIPTION: This snippet first downloads a certificate with its private key from Azure Key Vault as a PKCS#12 (.pfx) file using Azure CLI. It then uses OpenSSL to convert the downloaded .pfx file into a PEM (.pem) format, which is required for certain operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az keyvault secret download --file /path/to/cert.pfx \
                            --vault-name VaultName \
                            --name CertName \
                            --encoding base64
```

LANGUAGE: OpenSSL
CODE:
```
openssl pkcs12 -in cert.pfx -passin pass: -passout pass: -out cert.pem -nodes
```

----------------------------------------

TITLE: Retrieving Azure Subscription Information with Azure CLI
DESCRIPTION: These commands are used to obtain details about Azure subscriptions. `az account show` displays the current default subscription, `az account list --query ""[?isDefault]""` filters for the default subscription from a list, and the last command queries for subscriptions containing specific phrases, outputting selected details in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
# get the current default subscription using show
az account show --output table

# get the current default subscription using list
az account list --query ""[?isDefault]""

# get a subscription that contains search words or phrases
az account list --query ""[?contains(name,'search phrase')].{SubscriptionName:name, SubscriptionID:id, TenantID:tenantId}"" --output table
```

----------------------------------------

TITLE: Starting Azure CLI Interactive Mode - Azure CLI
DESCRIPTION: The `az interactive` command launches an interactive mode within the Azure CLI. This mode provides syntax suggestions and next steps, guiding users through command usage and discovery.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az interactive
```

----------------------------------------

TITLE: Getting In-Line Help for Azure CLI Command Subgroups
DESCRIPTION: Using --help with a command subgroup like az account subscription provides specific documentation for that subgroup. This includes details on commands and parameters relevant to managing Azure subscriptions within the account context.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az account subscription --help
```

----------------------------------------

TITLE: Filter Azure Storage Accounts by Creation Time (Bash/Linux)
DESCRIPTION: This Azure CLI command filters storage accounts created on or after '2024-02-01' and renames output columns. It demonstrates using double quotes for the `--query` parameter with backslash-escaped double quotes for column names and the filter condition, specifically for Bash in a Linux environment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az storage account list --query ""[?creationTime >='2024-02-01'].{\""SA Name\"":name,\""Primary endpoint\"":primaryEndpoints.blob}"" --output table
```

----------------------------------------

TITLE: Displaying Top-Level Azure CLI Command Groups
DESCRIPTION: Executing az without any parameters displays a list of all top-level Azure CLI command groups. This is a fundamental command for discovering the main categories of operations available in the CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az
```

----------------------------------------

TITLE: Using @<file> Convention for JSON Parameters in Azure CLI
DESCRIPTION: This snippet shows how to use the @<file> convention in Azure CLI to pass JSON parameter values from a file, which helps bypass shell interpretation mechanisms and simplifies handling complex JSON strings.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az ad app create --display-name myName --native-app --required-resource-accesses @manifest.json
```

----------------------------------------

TITLE: Viewing Verbose Output for Azure CLI Commands
DESCRIPTION: This snippet demonstrates the `--verbose` global parameter, which provides more in-depth logging details for an Azure CLI command. It's particularly useful for analyzing command execution times and understanding the underlying operations, aiding in performance troubleshooting.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az group create --name myResourceGroup --location eastus --verbose
```

----------------------------------------

TITLE: Create and Manage Azure Cache for Redis (Azure CLI)
DESCRIPTION: This script illustrates how to create and manage an Azure Cache for Redis instance. It includes commands to create a Redis cache, delete it, list its access keys, and show its properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_89

LANGUAGE: Azure CLI
CODE:
```
az redis create
```

LANGUAGE: Azure CLI
CODE:
```
az redis delete
```

LANGUAGE: Azure CLI
CODE:
```
az redis list-keys
```

LANGUAGE: Azure CLI
CODE:
```
az redis show
```

----------------------------------------

TITLE: Restart, Start, and Stop MySQL Flexible Server (Azure CLI)
DESCRIPTION: This script demonstrates how to control the lifecycle of an Azure Database for MySQL Flexible Server. It includes commands to create a server, set up firewall rules, and then perform restart, start, and stop operations on the server.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_78

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server firewall-rule create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server restart
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server start
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server stop
```

----------------------------------------

TITLE: Installing Azure CLI with Homebrew on macOS
DESCRIPTION: This command updates the Homebrew package list and then installs the Azure CLI package. It's the primary and recommended method for installing the Azure CLI on macOS using Homebrew.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/install-azure-cli-macos.md#_snippet_0

LANGUAGE: bash
CODE:
```
brew update && brew install azure-cli
```

----------------------------------------

TITLE: Creating VM with Existing Managed OS Disk (Azure CLI)
DESCRIPTION: This script illustrates the process of creating an Azure Virtual Machine and attaching an existing managed OS disk to it. It uses `az account set` to specify the subscription, `az disk show` to retrieve details of the existing disk, and `az vm create` to provision the new VM.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_80

LANGUAGE: Azure CLI
CODE:
```
az account set
az disk show
az vm create
```

----------------------------------------

TITLE: Displaying current Azure subscription details (Azure CLI)
DESCRIPTION: This command displays details of the currently active Azure subscription in a table format, providing a quick overview of the subscription in use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
az account show --output table
```

----------------------------------------

TITLE: Checking Azure CLI Version and Extensions (Azure CLI)
DESCRIPTION: This command is used to check the currently installed version of Azure CLI and list any installed extensions. It's a crucial first step before migrating to a new version or troubleshooting.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli-windows.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az --version
```

----------------------------------------

TITLE: Querying Azure Account Details (Bash/Azure CLI)
DESCRIPTION: This snippet demonstrates how to retrieve the current Azure account details using the `az account show` command. It shows the default JSON output and explicitly setting the output format to JSON. This command returns a single JSON dictionary object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az account show
az account show --output json # JSON is the default format
```

----------------------------------------

TITLE: Retrieving Azure CLI Version Information - Shell
DESCRIPTION: This snippet shows the typical JSON output when running the `az version` command in a terminal. It displays the installed versions of `azure-cli`, `azure-cli-core`, `azure-cli-telemetry`, and any installed extensions, providing a quick way to verify the CLI installation details.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""azure-cli"": ""x.xx.0x"",
  ""azure-cli-core"": ""x.xx.x"",
  ""azure-cli-telemetry"": ""x.x.x"",
  ""extensions"": {}
}
```

----------------------------------------

TITLE: Querying Service Principal Properties in PowerShell
DESCRIPTION: This PowerShell script illustrates how to retrieve service principal properties using `az ad sp list` and the `--query` parameter. It extracts `appId`, `appOwnerOrganizationId`, and `userConsentDescription` into PowerShell variables, leveraging the `tsv` output format for easy assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-4.md#_snippet_6

LANGUAGE: azurecli
CODE:
```
# PowerShell script
$spID = (az ad sp list --display-name myServicePrincipalName --query ""[].{spID:appId}"" --output tsv)
$tenantID = (az ad sp list --display-name myServicePrincipalName --query ""[].{tenant:appOwnerOrganizationId}"" --output tsv)
$userConsentDescr = (az ad sp list --display-name myServicePrincipalName --query ""[].{ucs:oauth2PermissionScopes.userConsentDescription[0]}"" --output tsv)
Write-Host ""Using appId $spID in tenant $tenantID for $userConsentDescr""
```

----------------------------------------

TITLE: Creating ACR and Assigning Service Principal Role (Azure CLI)
DESCRIPTION: This script demonstrates how to create an Azure Container Registry (ACR) and then provision an Azure Active Directory service principal. It assigns a role to the service principal, enabling programmatic access to the container registry.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_26

LANGUAGE: Azure CLI
CODE:
```
az acr create
az acr show
az ad sp create-for-rbac
az ad sp list
az role assignment create
```

----------------------------------------

TITLE: Flattening SSH Public Keys with Azure CLI
DESCRIPTION: This command retrieves details for a specific VM, 'TestVM', within the 'QueryDemo' resource group. It uses a JMESPath query to project the VM name, admin username, and flattens the 'publicKeys' array to extract all 'keyData' for SSH keys across different shells. This demonstrates flattening a nested array.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_5

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKeys:osProfile.linuxConfiguration.ssh.publicKeys[].keyData }""
```

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKeys:osProfile.linuxConfiguration.ssh.publicKeys[].keyData }""
```

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKeys:osProfile.linuxConfiguration.ssh.publicKeys[].keyData }""
```

----------------------------------------

TITLE: Appending Proxy Certificate to CA Bundle for Azure CLI
DESCRIPTION: This snippet illustrates how to append a proxy server's self-signed certificate to an existing CA bundle file (e.g., `cacert.pem`) to resolve SSL verification errors when using Azure CLI behind a proxy. The modified file should then be referenced by the `REQUESTS_CA_BUNDLE` environment variable. This ensures the Python `requests` library, used by Azure CLI, trusts the proxy's certificate.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-troubleshooting.md#_snippet_7

LANGUAGE: Console
CODE:
```
<Original cacert.pem>

-----BEGIN CERTIFICATE-----
<Your proxy's certificate here>
-----END CERTIFICATE-----
```

----------------------------------------

TITLE: Querying Service Principal Properties in Bash
DESCRIPTION: This Bash script demonstrates how to use the `--query` parameter with `az ad sp list` to extract specific service principal properties (`appId`, `appOwnerOrganizationId`, `userConsentDescription`) and store them in shell variables. It uses `tsv` output format for easy parsing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-4.md#_snippet_5

LANGUAGE: Bash
CODE:
```
# Bash script
spID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{spID:appId}"" --output tsv)
tenantID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{tenant:appOwnerOrganizationId}"" --output tsv)
userConsentDescr=$(az ad sp list --display-name myServicePrincipalName --query ""[].{ucs:oauth2PermissionScopes.userConsentDescription[0]}"" --output tsv)
echo ""Using appId $spID in tenant $tenantID for $userConsentDescr""
```

----------------------------------------

TITLE: Listing Azure VMs with Basic TSV Output
DESCRIPTION: This command lists all virtual machines in the Azure subscription and outputs the data in tab-separated values (TSV) format. The TSV format is suitable for programmatic consumption as it lacks extra formatting, keys, or symbols, but does not guarantee output ordering.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az vm list --output tsv
```

----------------------------------------

TITLE: Checking Azure CLI Version
DESCRIPTION: This command is used to display the currently installed version of the Azure CLI. It's a quick way to verify your installation and ensure you're running the desired version.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-with-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az version
```

----------------------------------------

TITLE: Assigning Azure VM Admin Username to Environment Variable
DESCRIPTION: This snippet demonstrates how to retrieve the admin username of a specific Azure VM and assign it to an environment variable. It highlights a common issue where default JSON output might include quotes that interfere with shell variable assignment, suggesting tsv output for cleaner results (though tsv is not explicitly used in the provided code, the context implies its relevance for this use case).
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_26

LANGUAGE: Bash
CODE:
```
USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"")
echo $USER
```

LANGUAGE: PowerShell
CODE:
```
$USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"")
echo $USER
```

----------------------------------------

TITLE: Setting Variables Separately (TSV Output) - Azure CLI
DESCRIPTION: This approach demonstrates an alternative method for storing extracted values into shell variables. Instead of using `read` or `-split` for multiple values, each value (public IP ID and subnet ID) is queried and assigned to a separate variable individually, still using TSV output. This example uses PowerShell-like variable assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-5.md#_snippet_3

LANGUAGE: azurecli-interactive
CODE:
```
$ipId = az network nic show --ids $nicId --query '[ipConfigurations[].publicIPAddress.id]' -o tsv
$subnetId = az network nic show --ids $nicId --query '[ipConfigurations[].subnet.id]' -o tsv
```

----------------------------------------

TITLE: Assigning Subscription ID to Bash Variable (Azure CLI)
DESCRIPTION: This Bash script snippet demonstrates how to capture the active Azure subscription ID into a shell variable. The `az account show` command with `--query id --output tsv` retrieves the ID in a clean format, which is then assigned to `subscriptionID` for subsequent use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_8

LANGUAGE: azurecli
CODE:
```
# Bash Script
subscriptionID=$(az account show --query id --output tsv)
echo ""Using subscription ID $subscriptionID""
```

----------------------------------------

TITLE: Create Azure Function App Connected to Cosmos DB (Azure CLI)
DESCRIPTION: This script creates an Azure Function App and configures it to connect to an Azure Cosmos DB instance. It provisions both resources and sets application settings for database integration.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_7

LANGUAGE: Bash
CODE:
```
az cosmosdb create
az cosmosdb keys list
az cosmosdb show
az functionapp config appsettings set
az functionapp create
az storage account create
```

----------------------------------------

TITLE: Troubleshooting Invalid CIDR Notation in Azure CLI Bash Script
DESCRIPTION: This Bash script snippet is used for debugging 'InvalidCIDRNotation' errors when creating Azure VNets. It reads CSV data, echoes the 'resourceNo', and conditionally prints a test string concatenated with 'vnetAddressPrefix' to expose hidden characters or extra spaces in the CSV input that might cause parsing issues. It expects CSV input with specific column headers.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/create-azure-resources-at-scale.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
while IFS=, read -r resourceNo location createRG existingRgName createVnet vnetAddressPrefix subnetAddressPrefixes vmImage publicIpSku adminUser
do
    echo ""resourceNo = $resourceNo""

    if [ ""$createVnet"" == ""TRUE"" ]; then
      startTest=""abc""
      endTest=""xyz""
      echo $startTest$vnetAddressPrefix$endTest
    fi
done < <(tail -n +2 $setupFileLocation)
```

----------------------------------------

TITLE: Creating Service Principal with Single Scope (Bash)
DESCRIPTION: This snippet demonstrates how to create an Azure service principal named 'myServicePrincipalName1' with 'reader' permissions limited to a single resource group 'myRG1'. It uses the `az ad sp create-for-rbac` command, specifying the `--name`, `--role`, and `--scopes` parameters. The `--scopes` parameter takes the full resource ID of the target resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
# Bash script
az ad sp create-for-rbac --name myServicePrincipalName1 \
                            --role reader \
                            --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1
```

----------------------------------------

TITLE: Finding reference examples with az find (Azure CLI)
DESCRIPTION: The `az find` command acts as an AI robot, returning reference examples for specified keywords. It helps users quickly locate relevant Azure CLI commands and their usage.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_10

LANGUAGE: Azure CLI
CODE:
```
az find ""active subscription""
```

----------------------------------------

TITLE: Creating a Service Principal with Certificate File (Azure CLI)
DESCRIPTION: This command creates an Azure Active Directory service principal by referencing an existing public certificate from a file path. The `--cert @/path/to/cert.pem` syntax allows Azure CLI to read the certificate content directly from the specified file, simplifying certificate management for existing files.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert @/path/to/cert.pem
```

----------------------------------------

TITLE: Resetting Service Principal Credential with Self-Signed Certificate (Console Output) - Azure CLI
DESCRIPTION: This Azure CLI command resets a service principal's credentials by generating a new self-signed certificate. The command outputs the file path where the certificate and private key are stored to the console and log, replacing any existing password credentials.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-7.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az ad sp credential reset --id myServicePrincipalID --create-cert
```

----------------------------------------

TITLE: Querying Azure VM Properties as an Array (Azure CLI)
DESCRIPTION: This snippet demonstrates how to query specific properties of an Azure Virtual Machine using Azure CLI and JMESPath, returning the results as an ordered array. It retrieves the VM name, admin username, and the first SSH public key data. The output will be an array of values in the order specified in the query.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_0

LANGUAGE: powershell
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]""
```

LANGUAGE: cmd
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]""
```

----------------------------------------

TITLE: Querying SSH Public Keys (Bash)
DESCRIPTION: Demonstrates how to use an Azure CLI query to extract specific nested data, such as SSH public keys, from the `az vm show` command's JSON output. The query `osProfile.linuxConfiguration.ssh.publicKeys` navigates through dictionary properties. This example is for Bash.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_32

LANGUAGE: Azure CLI
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

----------------------------------------

TITLE: Creating a 'CannotDelete' Lock on Azure Subscription (Azure CLI)
DESCRIPTION: This command creates a 'CanNotDelete' lock on your Azure subscription, preventing users from accidentally deleting it. You must have 'contributor' permissions on the subscription to create or modify locks.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_17

LANGUAGE: azurecli
CODE:
```
az account lock create --name ""Cannot delete subscription"" --lock-type CanNotDelete
```

----------------------------------------

TITLE: Adding Azure Subscription to Management Group
DESCRIPTION: This snippet adds an Azure subscription to an existing management group. The `az account management-group subscription add` command requires the management group's name and the subscription's name or ID. This associates the subscription with the group for policy inheritance.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_14

LANGUAGE: Azure CLI
CODE:
```
az account management-group subscription add --name Contoso01 --subscription ""My Demos""
```

LANGUAGE: Azure CLI
CODE:
```
az account management-group subscription add --name Contoso01 --subscription ""My Second Demos""
```

----------------------------------------

TITLE: Filtering and Renaming Azure Storage Account Columns - PowerShell (Linux)
DESCRIPTION: This example demonstrates how to apply a `creationTime` filter and rename output columns with spaces in Azure CLI for PowerShell on Linux. Unlike the Bash script, adding a filter does not require a complete rework of the `--query` string, maintaining the double quotes and backtick escaping for column names.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_6

LANGUAGE: azurecli
CODE:
```
az storage account list --query ""[?creationTime >='2024-02-01'].{\`""SA Name\`"":name, \`""Primary endpoint\`"":primaryEndpoints.blob}"" --output table
```

----------------------------------------

TITLE: Create Azure Function App with App Service Plan (Azure CLI)
DESCRIPTION: This script creates an Azure Function App hosted on an App Service plan. It provisions a storage account and the necessary infrastructure for serverless function deployment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_6

LANGUAGE: Bash
CODE:
```
az functionapp create
az functionapp plan create
az storage account create
```

----------------------------------------

TITLE: Retrieving Specific Storage Account Properties (Azure CLI)
DESCRIPTION: This command fetches a comma-delimited list of specific properties from an Azure storage account, returning them as a JSON array. It demonstrates how to select multiple individual properties, including nested ones, using a JMESPath query with the `az storage account show` command. Replace placeholders with your actual resource group and storage account names.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az storage account show --resource-group <msdocs-tutorial-rg-00000000> \
                        --name <msdocssa000000000> \
                        --query ""[id, primaryLocation, primaryEndpoints.blob, encryption.services.blob.lastEnabledTime]""
```

----------------------------------------

TITLE: Listing Azure CLI Command Groups - Azure CLI
DESCRIPTION: Executing 'az' in the console and pressing Enter displays a list of all top-level Azure CLI command groups. This provides an initial overview of the available command categories.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az
```

----------------------------------------

TITLE: Creating an Azure Storage Account (CLI vs PowerShell)
DESCRIPTION: This example demonstrates how to create an Azure Storage Account using both Azure CLI and Azure PowerShell. It specifies the account name, resource group, location, SKU (e.g., Standard_LRS), and kind (e.g., StorageV2). Storage accounts are used to store various types of Azure data.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/what-is-azure-cli.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az storage account create --name <StorageAccountName> --resource-group <ResourceGroupName> --location eastus --sku Standard_LRS --kind StorageV2
```

LANGUAGE: powershell
CODE:
```
New-AzStorageAccount -Name <StorageAccountName> -ResourceGroupName <ResourceGroupName> -Location eastus -SkuName Standard_LRS -Kind StorageV2
```

----------------------------------------

TITLE: Retrieving and Storing Public IP Address in Shell Variable
DESCRIPTION: This command uses the previously obtained public IP object ID to query the actual public IP address and store it in a shell variable. This variable can then be used for further operations or verification.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-5.md#_snippet_4

LANGUAGE: bash
CODE:
```
vmIpAddress=$(az network public-ip show --ids $ipId \
  --query ipAddress \
  -o tsv)
```

LANGUAGE: powershell
CODE:
```
$vmIpAddress = $(az network public-ip show `
    --ids $ipId `
    --query ipAddress `
    -o tsv)
```

----------------------------------------

TITLE: Checking Azure CLI Version and Output
DESCRIPTION: This snippet demonstrates how to execute the `az version` command to determine the installed Azure CLI version and its components. It also provides an example of the structured JSON output returned by the command, detailing the core components and their versions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/install-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az version
```

LANGUAGE: JSON
CODE:
```
{
  ""azure-cli"": ""x.xx.0x"",
  ""azure-cli-core"": ""x.xx.x"",
  ""azure-cli-telemetry"": ""x.x.x"",
  ""extensions"": {}
}
```

----------------------------------------

TITLE: Renaming Azure Storage Account Columns with Spaces - PowerShell (Linux)
DESCRIPTION: This snippet illustrates how to rename output columns using the `--query` parameter in Azure CLI within a PowerShell environment on Linux. It uses double quotes to wrap the query string and backticks (`) to escape embedded double quotes for column names with spaces. This syntax is specific to PowerShell on Linux and will cause errors in Windows PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az storage account list --query ""[].{\`""SA Name\`"":name, \`""Primary endpoint\`"":primaryEndpoints.blob}"" --output table
```

----------------------------------------

TITLE: Renaming and Formatting Storage Account Properties (Azure CLI)
DESCRIPTION: This command renames selected storage account properties and outputs them in a table format. It uses curly brackets `{}` in the `--query` parameter to define new, space-free property names for the output, making the data more readable. The `--output table` parameter ensures the results are presented as a structured table. Replace placeholders with your actual resource group and storage account names.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az storage account show --resource-group <msdocs-tutorial-rg-00000000> \
                        --name <msdocssa000000000> \
                        --query ""{saName:name, saKind:kind, saMinTLSVersion:minimumTlsVersion}"" \
                        --output table
```

----------------------------------------

TITLE: Running Specific Azure CLI Version in Docker
DESCRIPTION: This command starts a Docker container with a specific version of the Azure CLI, identified by the tag `2.62.0-cbl-mariner2.0`. Users can replace `2.62.0` with their desired CLI version to ensure compatibility or specific feature sets. This is useful for maintaining consistent environments or testing against older versions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/run-azure-cli-docker.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker run -it mcr.microsoft.com/azure-cli:2.62.0-cbl-mariner2.0
```

----------------------------------------

TITLE: Listing Virtual Network Public IP IDs by Substring - Azure CLI
DESCRIPTION: This snippet lists the IDs of public IP addresses within virtual networks that contain a specified substring. It filters for non-null IP addresses and then uses the `contains` function to match the variable `IP`, outputting the IDs in TSV format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-examples.md#_snippet_1

LANGUAGE: bash
CODE:
```
IP=""20.127""
az network public-ip list --query ""[?ipAddress!=null]|[?contains(ipAddress, '$IP')].[id]"" --output tsv
```

LANGUAGE: powershell
CODE:
```
$IP=""20.127""
az network public-ip list --query ""[?ipAddress!=null]|[?contains(ipAddress, '$IP')].[id]"" --output tsv
```

LANGUAGE: cmd
CODE:
```
Set IP=""20.127""
az network public-ip list --query ""[?ipAddress!=null]|[?contains(ipAddress, '%IP%')].[id]"" --output tsv
```

----------------------------------------

TITLE: Setting AZURE_CONFIG_DIR for Concurrent Execution (Bash)
DESCRIPTION: This Bash command sets the 'AZURE_CONFIG_DIR' environment variable to a custom directory. This isolates the Azure CLI configuration and token cache for the current script, preventing write conflicts when multiple Azure CLI commands run concurrently on the same machine.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_7

LANGUAGE: bash
CODE:
```
export AZURE_CONFIG_DIR=/my/config/dir
```

----------------------------------------

TITLE: Backup and Restore Azure PostgreSQL Server (Azure CLI)
DESCRIPTION: This snippet outlines Azure CLI commands for performing backup and restore operations on an Azure Database for PostgreSQL server. It includes commands to create the PostgreSQL server and then initiate a restore operation from a backup.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_70

LANGUAGE: Bash
CODE:
```
az postgres server create
az postgres server restore
```

----------------------------------------

TITLE: Scale Azure MySQL Single Server (Azure CLI)
DESCRIPTION: This snippet demonstrates Azure CLI commands for monitoring and scaling an Azure Database for MySQL single server. It includes commands to show account details, list monitoring metrics, create the server, and update its scaling properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_68

LANGUAGE: Bash
CODE:
```
az account show
az monitor metrics list
az mysql server create
az mysql server update
```

----------------------------------------

TITLE: Changing Active Azure Subscription by Name or ID
DESCRIPTION: This snippet shows how to change the currently active Azure subscription using the `az account set` command. It provides two examples: one using the subscription's display name and another using its unique subscription ID. This command updates the context for subsequent Azure CLI operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
# change the active subscription using the subscription name
az account set --subscription ""My Demos""

# change the active subscription using the subscription ID
az account set --subscription ""xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx""
```

----------------------------------------

TITLE: Changing Active Azure Subscription
DESCRIPTION: This command allows users to change their active Azure subscription to a specified one. Replace ""mySubscriptionName"" with the actual name or ID of the target subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_17

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""mySubscriptionName""
```

----------------------------------------

TITLE: Setting Azure CLI Active Subscription
DESCRIPTION: This command sets the active Azure subscription for subsequent Azure CLI operations. The `--subscription` global parameter accepts either a subscription ID or a subscription name to specify which subscription to use, allowing users to switch contexts without logging in again.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx""
```

----------------------------------------

TITLE: Reading and Querying JSON with Bash and JQ
DESCRIPTION: This Bash script demonstrates how to read a JSON file, display its content, and extract specific values using `jq`. It shows how to retrieve a nested property from a JSON object and how to filter an array to find an element based on a condition, then extract a property from the filtered element. Requires `jq` to be installed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_13

LANGUAGE: bash
CODE:
```
# Show the contents of a file in the console
fileName=""msdocs-tutorial.json""
cat $fileName | jq

# Get a JSON dictionary object
stgKV=$(jq -r '.environments.stg.""kv-secretName""' $fileName)
echo $stgKV

# Filter a JSON array
devKV=$(jq -r '.environments.dev[] | select(.status==""active"") | .""kv-secretName""' $fileName)
echo $devKV
```

----------------------------------------

TITLE: Creating Resource Group Using Grep and Conditional Execution
DESCRIPTION: This command demonstrates a concise way to conditionally create an Azure resource group using `grep` and the `||` (OR) operator. It pipes the output of `az group list` to `grep` to check for the resource group's existence, and if not found, the `az group create` command is executed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_15

LANGUAGE: azurecli
CODE:
```
az group list --output tsv | grep $resourceGroup -q || az group create --name $resourceGroup --location ""$location""
```

----------------------------------------

TITLE: Creating Virtual Network and Subnet with Azure CLI
DESCRIPTION: This section demonstrates how to create an Azure Virtual Network (VNet) and a subnet using the Azure CLI. It provides examples for both Bash and PowerShell environments, defining necessary variables and executing the `az network vnet create` command. An existing resource group is a prerequisite for running these commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-2.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# create Bash shell variables
vnetName=TutorialVNet1
subnetName=TutorialSubnet1
vnetAddressPrefix=10.0.0.0/16
subnetAddressPrefix=10.0.0.0/24

# Use the existing resource group
resourceGroup=VMTutorialResources

az network vnet create \
  --name $vnetName \
  --resource-group $resourceGroup \
  --address-prefixes $vnetAddressPrefix \
  --subnet-name $subnetName \
  --subnet-prefixes $subnetAddressPrefix
```

LANGUAGE: PowerShell
CODE:
```
# create PowerShell variables
$vnetName = ""TutorialVNet1""
$subnetName = ""TutorialSubnet1""
$vnetAddressPrefix = ""10.0.0.0/16""
$subnetAddressPrefix = ""10.0.0.0/24""

# Use the existing resource group
$resourceGroup = ""VMTutorialResources""

# Create a virtual network and subnet
az network vnet create `
  --name $vnetName `
  --resource-group $resourceGroup `
  --address-prefixes $vnetAddressPrefix `
  --subnet-name $subnetName `
  --subnet-prefixes $subnetAddressPrefix
```

----------------------------------------

TITLE: Securely Prompting for Service Principal Password in PowerShell
DESCRIPTION: This PowerShell snippet demonstrates how to securely obtain service principal credentials using the `Get-Credential` cmdlet. It prompts for the username and password, then uses the obtained credentials to authenticate with Azure via `az login --service-principal`, preventing the password from being displayed in plain text.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-2.md#_snippet_4

LANGUAGE: powershell
CODE:
```
$AzCred = Get-Credential -UserName <app-id>
az login --service-principal -u $AzCred.UserName -p $AzCred.GetNetworkCredential().Password --tenant <tenant>
```

----------------------------------------

TITLE: Getting Next Command Recommendations with Azure CLI
DESCRIPTION: The az next command provides recommendations for subsequent Azure CLI commands based on common customer execution patterns. It helps users discover relevant commands for their workflow by selecting from preset command paths.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_14

LANGUAGE: Azure CLI
CODE:
```
az next
```

----------------------------------------

TITLE: Filtering Azure VMs by OS Type (Linux)
DESCRIPTION: This set of snippets demonstrates how to filter a list of Azure Virtual Machines to include only those with a Linux OS type. It uses a JMESPath query to select VMs where storageProfile.osDisk.osType is 'Linux' and projects their name and admin username into a table format. This query is applicable across Bash, PowerShell, and Cmd environments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_9

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.osType=='Linux'].{Name:name,  admin:osProfile.adminUsername}"" --output table
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.osType=='Linux'].{Name:name,  admin:osProfile.adminUsername}"" --output table
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.osType=='Linux'].{Name:name,  admin:osProfile.adminUsername}"" --output table
```

----------------------------------------

TITLE: Displaying Current Azure Subscription Details (Table Output)
DESCRIPTION: This command displays details of the currently active Azure subscription, formatted as a table for easy readability. It's used to quickly verify which subscription is in use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_16

LANGUAGE: Azure CLI
CODE:
```
az account show --output table
```

----------------------------------------

TITLE: Ordering Azure VM TSV Output with Query (Azure CLI)
DESCRIPTION: This command shows how to enforce a consistent column order in `tsv` output using the `--query` parameter with a multiselect list. By specifying the desired keys (id, location, resourceGroup, name), the output columns are guaranteed to appear in that exact sequence.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --output tsv --query '[].[id, location, resourceGroup, name]'
```

----------------------------------------

TITLE: Handling Quoting for Variables in Bash
DESCRIPTION: This snippet demonstrates correct and incorrect ways to handle single and double quotes when assigning string values to variables in Bash. It shows how to embed quotes and escape double quotes within a double-quoted string. It also highlights that escaped single quotes are not treated as part of the string in Bash. The `echo` command is used to display the variable's content.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_0

LANGUAGE: Bash
CODE:
```
# Correct
myVariable=""my string ' ' wrapped in double quotes""
myVariable='my string "" "" wrapped in single quotes'
myVariable=""my string with escaped \"" \"" double quotes wrapped in double quotes""

# Wrong, escaped single quotes in Bash are not treated as part of the string
myVariable='my value with escaped \' \' single quotes wrapped in single quotes'

# after each example ...
echo $myVariable
```

----------------------------------------

TITLE: Getting Help for Azure CLI VM Creation - Azure CLI
DESCRIPTION: This command uses the `--help` parameter to display detailed information, descriptions, and tips for the `az vm create` command. It's crucial for understanding the parameters and requirements for creating a virtual machine.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az vm create --help
```

----------------------------------------

TITLE: Querying Service Principal Properties in Bash
DESCRIPTION: This Bash script demonstrates how to use the `--query` parameter with `az ad sp list` to extract specific service principal properties like `appId`, `appOwnerOrganizationId`, and `userConsentDescription`. The `tsv` output format is used to get plain values, which are then stored in shell variables.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-4.md#_snippet_5

LANGUAGE: azurecli-interactive
CODE:
```
# Bash script
spID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{spID:appId}"" --output tsv)
tenantID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{tenant:appOwnerOrganizationId}"" --output tsv)
userConsentDescr=$(az ad sp list --display-name myServicePrincipalName --query ""[].{ucs:oauth2PermissionScopes.userConsentDescription[0]}"" --output tsv)
echo ""Using appId $spID in tenant $tenantID for $userConsentDescr""
```

----------------------------------------

TITLE: Creating Azure Key Vault and Secret, Storing Output (Bash)
DESCRIPTION: This script demonstrates how to create an Azure Key Vault and a secret within it, capturing their IDs into variables. It sets a random identifier for the Key Vault name to ensure global uniqueness and temporarily suppresses Azure CLI output. It then echoes the captured IDs for verification. Users should replace placeholder values for `rgName`, `kvSecretName`, and `kvSecretValue`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_10

LANGUAGE: Bash
CODE:
```
# Set your variables.
let ""randomIdentifier=$RANDOM*$RANDOM""
rgName=""<msdocs-tutorial-rg-00000000>""
kvName=""msdocs-kv-$randomIdentifier""
location=""eastus""

# Set your default output to none
az config set core.output=none

# Create a new Azure Key Vault returning the Key Vault ID
myNewKeyVaultID=$(az keyvault create --name $kvName --resource-group $rgName --location $location --query id --output tsv)
echo ""My new Azure Kev Vault ID is $myNewKeyVaultID""

# Wait about 1 minute for your Key Vault creation to complete.

# Create a new secret returning the secret ID
kvSecretName=""<myKVSecretName>""
kvSecretValue=""<myKVSecretValue>""
myNewSecretID=$(az keyvault secret set --vault-name $kvName --name $kvSecretName --value $kvSecretValue --query id --output tsv)
echo ""My new secret ID is $myNewSecretID""

# Reset your default output to json
az config set core.output=json
```

----------------------------------------

TITLE: Resetting Service Principal Password (Console Output) - Azure CLI
DESCRIPTION: This Azure CLI command resets the password for a specified service principal. The new password is directly displayed in the console and written to log files, which is suitable for testing but not recommended for production environments due to security implications.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-7.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az ad sp credential reset --id myServicePrincipalID
```

----------------------------------------

TITLE: Querying Microsoft Entra Service Principal Read Permissions (Azure CLI)
DESCRIPTION: This query returns the ID of the first Microsoft Graph application service principal that has 'User.Read.All' permissions and is allowed for 'Application' member types. It uses JMESPath filtering and projection.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-examples.md#_snippet_5

LANGUAGE: Bash
CODE:
```
az ad sp list --display-name ""Microsoft Graph"" --query ""[0].appRoles[?value=='User.Read.All' && contains(allowedMemberTypes, 'Application')].id"" --output tsv
```

LANGUAGE: PowerShell
CODE:
```
az ad sp list --display-name ""Microsoft Graph"" --query ""[0].appRoles[?value=='User.Read.All' && contains(allowedMemberTypes, 'Application')].id"" --output tsv
```

LANGUAGE: Cmd
CODE:
```
az ad sp list --display-name ""Microsoft Graph"" --query ""[0].appRoles[?value=='User.Read.All' && contains(allowedMemberTypes, 'Application')].id"" --output tsv
```

----------------------------------------

TITLE: Querying Azure VMs by Disk Size (Azure CLI)
DESCRIPTION: This snippet demonstrates how to list Azure Virtual Machines, filter them by their OS disk size (greater than or equal to 50 GB), and project specific properties like name, admin username, and disk size into a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_30

LANGUAGE: azurecli
CODE:
```
az vm list --resource-group DevEx-Data-Analysis2 ^
           --query ""[?storageProfile.osDisk.diskSizeGb >=`50`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" ^
           --output table
```

----------------------------------------

TITLE: Azure CLI Debug Output for Unrecognized Argument Error
DESCRIPTION: This snippet displays a portion of the debug output generated by the Azure CLI when an `az group create` command fails due to an unrecognized argument. It highlights the command arguments, log file location, and the specific error message indicating the unrecognized argument.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-troubleshooting.md#_snippet_1

LANGUAGE: output
CODE:
```
cli.knack.cli: Command arguments: ['group', 'create', '-l', 'eastus2', '-name', 'msdocs-rg-test', '--debug']
...
cli.azure.cli.core.azlogging: metadata file logging enabled - writing logs to '/home/myName/.azure/commands/YYYY-MM-DD.HH-MM-SS.group_create.8912.log'.
...
cli.azure.cli.core.azclierror: unrecognized arguments: msdocs-rg-test
...
```

----------------------------------------

TITLE: Creating Multiple Azure Storage Containers using Azure CLI Loops
DESCRIPTION: This snippet demonstrates creating multiple Azure storage containers using different Bash loop constructs. It includes a seq based for loop, an incomplete brace expansion loop, and a C-style for loop, all creating containers with names like learnbash-X. Finally, it lists all containers to verify their creation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_24

LANGUAGE: azurecli
CODE:
```
for i in `seq 1 4`; do 
az storage container create --account-name $storageAccount --account-key $accountKey --name learnbash-$i
done

for value in {5..8}
for (( i=5; i<10; i++));
do
az storage container create --account-name $storageAccount --account-key $accountKey --name learnbash-$i
done

az storage container list --account-name $storageAccount --account-key $accountKey --query [].name
```

----------------------------------------

TITLE: Retrieving All SSH Public Keys for a VM
DESCRIPTION: This snippet shows how to retrieve detailed information for a specific virtual machine, including all associated SSH public keys. It uses the JMESPath `[]` operator to flatten the `publicKeys` array, ensuring all keys are extracted from the `osProfile.linuxConfiguration.ssh` path.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_13

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKeys:osProfile.linuxConfiguration.ssh.publicKeys[].keyData }""
```

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKeys:osProfile.linuxConfiguration.ssh.publicKeys[].keyData }""
```

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{VMName:name, admin:osProfile.adminUsername, sshKeys:osProfile.linuxConfiguration.ssh.publicKeys[].keyData }""
```

LANGUAGE: json
CODE:
```
{
  ""VMName"": ""TestVM"",
  ""admin"": ""azureuser"",
  ""sshKeys"": [
    ""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMobZNJTqgjWn/IB5xlilvE4Y+BMYpqkDnGRUcA0g9BYPgrGSQquCES37v2e3JmpfDPHFsaR+CPKlVr2GoVJMMHeRcMJhj50ZWq0hAnkJBhlZVWy8S7dwdGAqPyPmWM2iJDCVMVrLITAJCno47O4Ees7RCH6ku7kU86b1NOanvrNwqTHr14wtnLhgZ0gQ5GV1oLWvMEVg1YFMIgPRkTsSQKWCG5lLqQ45aU/4NMJoUxGyJTL9i8YxMavaB1Z2npfTQDQo9+womZ7SXzHaIWC858gWNl9e5UFyHDnTEDc14hKkf1CqnGJVcCJkmSfmrrHk/CkmF0ZT3whTHO1DhJTtV stramer@contoso\n""
  ]
}
```

----------------------------------------

TITLE: Enabling Verbose Output with Azure CLI --verbose
DESCRIPTION: This example shows how to apply the `--verbose` global parameter to an Azure CLI command like `az group create`. It provides more in-depth logging details, including execution times, which is helpful for diagnosing performance issues or understanding command flow.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-global-parameters.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az group create --name myResourceGroup --location eastus --verbose
```

----------------------------------------

TITLE: Passing JSON from a File (Bash)
DESCRIPTION: Shows the recommended method for handling complex JSON values by passing them from a local file. The path to the JSON file is provided as the parameter value, making it easier to manage large or intricate JSON structures.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_8

LANGUAGE: Bash
CODE:
```
az some-command --contact address.details=./address_details.JSON
```

----------------------------------------

TITLE: Creating Azure MySQL Server and Firewall Rule (Azure CLI)
DESCRIPTION: This script creates a new Azure MySQL server and configures a firewall rule to control network access to the server.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_68

LANGUAGE: Bash
CODE:
```
az mysql server create
az mysql server firewall-rule create
```

----------------------------------------

TITLE: Querying Azure VM SSH Public Keys with JMESPath
DESCRIPTION: This command retrieves detailed information for a specific virtual machine and then filters the output using a JMESPath query. The `--query ""osProfile.linuxConfiguration.ssh.publicKeys""` parameter extracts only the SSH public keys from the VM's configuration, demonstrating how to selectively retrieve data from complex JSON outputs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az vm show --resource-group myResourceGroup --name myVm --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

----------------------------------------

TITLE: Handling Empty String Parameters
DESCRIPTION: Provides examples for correctly passing empty string values as parameters in Bash and PowerShell. It specifies that for an empty quotes string (`''`), Bash uses `""''""` and PowerShell uses `""''""` or `'""""'` to ensure the empty string is properly interpreted.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_7

LANGUAGE: Bash
CODE:
```
myVariable=""''""
```

LANGUAGE: PowerShell
CODE:
```
$myVariable = ""''""
$myVariable = '""""'
```

----------------------------------------

TITLE: Creating a Resource Group Deletion Lock
DESCRIPTION: This command creates a `CanNotDelete` lock on a resource group, preventing accidental or unauthorized deletion. It's an administrative action to protect critical resources, requiring `contributor` permissions on the resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_10

LANGUAGE: azurecli
CODE:
```
az group lock create --name ""Cannot delete resource group"" --lock-type CanNotDelete
```

----------------------------------------

TITLE: Retrieving and Converting Certificate from Azure Key Vault to PEM
DESCRIPTION: This snippet demonstrates how to download a certificate, including its private key, from Azure Key Vault as a PKCS#12 (.pfx) file and then convert it to a PEM format using OpenSSL. The certificate's secret name in Key Vault is identical to the certificate name, facilitating retrieval for local use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_10

LANGUAGE: azurecli
CODE:
```
az keyvault secret download --file /path/to/cert.pfx \
                            --vault-name VaultName \
                            --name CertName \
                            --encoding base64
openssl pkcs12 -in cert.pfx -passin pass: -passout pass: -out cert.pem -nodes
```

----------------------------------------

TITLE: List VMs by Disk Size (Azure CLI)
DESCRIPTION: This example demonstrates how to list Azure Virtual Machines (VMs) whose OS disk size is greater than or equal to 50 GB. It uses `az vm list` with a JMESPath query to filter VMs and project their name, admin username, and disk size into a table format. Special attention is given to escaping the numeric value in PowerShell due to its parsing rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_3

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=`50`].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=``50``].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=`50`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

----------------------------------------

TITLE: Switching the Active Azure Cloud - Azure CLI
DESCRIPTION: This command changes the currently active Azure cloud environment to the specified one, for example, AzureChinaCloud. After execution, subsequent Azure CLI commands will operate within this newly set cloud. Users may need to re-authenticate and set an active subscription if it's their first time switching or if authentication has expired.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-clouds-azure-cli.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
az cloud set --name AzureChinaCloud
```

----------------------------------------

TITLE: Filtering Azure VMs with JMESPath Pipe Expressions
DESCRIPTION: This example illustrates the use of JMESPath pipe expressions (`|`) to refine query results. It first projects the name and storage type of all VMs, then applies a filter to the intermediate result to select only those with 'SSD' in their storage type. This approach can simplify complex queries by breaking them into sub-expressions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_13

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

----------------------------------------

TITLE: Basic Error Handling with $? in Azure CLI (PowerShell)
DESCRIPTION: Demonstrates a basic error handling mechanism in PowerShell for Azure CLI commands. It utilizes the '$?' automatic variable to check the success status of the most recent command and writes an error message if the command failed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_21

LANGUAGE: powershell
CODE:
```
# Script for a PowerShell scripting language

az group create --name MyResourceGroup
if ($? -eq $false) {
    Write-Error ""Error creating resource group.""
}
```

----------------------------------------

TITLE: Correct JMESPath Query Quoting in PowerShell
DESCRIPTION: Provides five different methods to correctly quote a JMESPath query for the Azure CLI in PowerShell. These examples demonstrate various escaping techniques, including using single quotes, backticks, and the --% stop-parsing operator, to ensure the JMESPath engine receives the 'azure-cli' string properly quoted.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
az version --query '\""azure-cli\""'
```

LANGUAGE: azurecli
CODE:
```
az version --query ""\`""azure-cli\`""""
```

LANGUAGE: azurecli
CODE:
```
az version --query ""\""azure-cli\""""
```

LANGUAGE: azurecli
CODE:
```
az --% version --query ""\""azure-cli\""""
```

LANGUAGE: azurecli
CODE:
```
az --% version --query \""azure-cli\""
```

----------------------------------------

TITLE: Backup and Restore Azure Database for PostgreSQL Server (Azure CLI)
DESCRIPTION: This script illustrates how to perform backup and restore operations for an Azure Database for PostgreSQL server. It includes commands to create a PostgreSQL server and then initiate a server restore operation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_83

LANGUAGE: Azure CLI
CODE:
```
az postgres server create
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server restore
```

----------------------------------------

TITLE: Querying Service Principal Properties in PowerShell
DESCRIPTION: This PowerShell script illustrates how to retrieve specific service principal properties (`appId`, `appOwnerOrganizationId`, `userConsentDescription`) using `az ad sp list` and the `--query` parameter, storing them in PowerShell variables. It leverages `tsv` output for direct assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-4.md#_snippet_6

LANGUAGE: PowerShell
CODE:
```
# PowerShell script
$spID = (az ad sp list --display-name myServicePrincipalName --query ""[].{spID:appId}"" --output tsv)
$tenantID = (az ad sp list --display-name myServicePrincipalName --query ""[].{tenant:appOwnerOrganizationId}"" --output tsv)
$userConsentDescr = (az ad sp list --display-name myServicePrincipalName --query ""[].{ucs:oauth2PermissionScopes.userConsentDescription[0]}"" --output tsv)
Write-Host ""Using appId $spID in tenant $tenantID for $userConsentDescr""
```

----------------------------------------

TITLE: Attaching Data Disk to VM using --add (Azure CLI)
DESCRIPTION: This snippet demonstrates how to attach a new data disk to an existing virtual machine using the 'az vm update' command with the '--add' parameter. The disk configuration is provided as a JSON string, allowing for complex property updates.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_6

LANGUAGE: azurecli
CODE:
```
az vm update --resource-group VMResources --name virtual-machine-01 \
--add storageProfile.dataDisks ""{\""createOption\"": \""Attach\"", \""managedDisk\"":
   {\""id\"":
   \""/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/yg/providers/Microsoft.Compute/disks/yg-disk\""},\
   \""lun\"": 1}""
```

----------------------------------------

TITLE: Checking for Null Variables with If-Then-Else in Bash
DESCRIPTION: This snippet demonstrates an If-Then-Else statement in Bash to check if a string variable (`$resourceGroup`) is set. It uses the `!=` operator for string comparison and sets the variable to a default value if it's found to be empty.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
if [ $resourceGroup != '' ]; then
   echo $resourceGroup
else
   resourceGroup=""msdocs-learn-bash-$randomIdentifier""
fi
```

----------------------------------------

TITLE: Listing VMs with Custom Properties (JSON Output)
DESCRIPTION: This snippet lists all VMs in a resource group, extracting their name, OS type, and administrator username into a custom JSON object for each VM. This provides a structured overview of key VM properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_22

LANGUAGE: bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: powershell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

----------------------------------------

TITLE: Querying Network Interface ID using JMESPath in Azure CLI
DESCRIPTION: This snippet demonstrates how to extract the Network Interface Controller (NIC) object ID from a VM's properties using a JMESPath query. It uses the `networkProfile.networkInterfaces[].id` query to navigate the JSON output and specifies `tsv` (tab-separated values) as the output format for a clean, assignable string.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-4.md#_snippet_1

LANGUAGE: bash
CODE:
```
az vm show --name $vmName \
  --resource-group $resourceGroup \
  --query 'networkProfile.networkInterfaces[].id' \
  --output tsv
```

LANGUAGE: powershell
CODE:
```
az vm show --name $vmName `
    --resource-group $resourceGroup `
    --query 'networkProfile.networkInterfaces[].id' `
    --output tsv
```

----------------------------------------

TITLE: Creating Azure CLI Alias for Complex Command
DESCRIPTION: This command creates an alias 'ls-groups' that encapsulates a more complex Azure CLI operation. It lists resource groups, queries for their name and location, and outputs the result in a user-friendly table format, simplifying repetitive tasks.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extension-alias.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
az alias create --name ls-groups --command ""group list --query '[].{Name:name, Location:location}' --output table""
```

----------------------------------------

TITLE: Filtering Azure Subscriptions by Default Status
DESCRIPTION: These commands demonstrate filtering Azure subscriptions based on their 'isDefault' property using JMESPath. The first query returns the name of the default subscription. The subsequent queries show ways to list names of non-default subscriptions, using the logical NOT operator '!' or explicit comparison '== `false`'. Note the special escaping required for boolean values in PowerShell due to double parsing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_7

LANGUAGE: azurecli-interactive
CODE:
```
# Boolean values are assumed to be true, so you can directly evaluate the isDefault property to return the default subscription.
az account list --query ""[?isDefault].name""

# To check if a Boolean property is false, you can use the comparison operator == or the logical operator !.
az account list --query '[?!isDefault].name'
az account list --query ""[?isDefault == \`false\`].name""
```

LANGUAGE: azurecli-interactive
CODE:
```
# Boolean values are assumed to be true, so you can directly evaluate the isDefault property to return the default subscription.
az account list --query ""[?isDefault].name""

# To check if a Boolean property is false, you can use the comparison operator == or the logical operator !.
az account list --query ""[?!isDefault].name""
az account list --query ""[?isDefault == ``false``].name""
```

----------------------------------------

TITLE: Signing In to Azure CLI with Service Principal and Certificate
DESCRIPTION: This command facilitates signing into Azure CLI using a service principal and a locally available certificate. The certificate must be in PEM or DER ASCII format, with PKCS#12 files being unsupported, and the PEM file must contain both the private key and the certificate for successful authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_13

LANGUAGE: azurecli
CODE:
```
az login --service-principal --username APP_ID --certificate /path/to/cert.pem --tenant TENANT_ID
```

----------------------------------------

TITLE: Enabling Immediate Exit on Error in Azure CLI Script (Bash)
DESCRIPTION: This snippet uses 'set -e' to configure the shell to exit immediately if any command fails (returns a non-zero exit status). This is a common practice for robust shell scripting to prevent unexpected behavior after an error.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_31

LANGUAGE: azurecli-interactive
CODE:
```
set -e
```

----------------------------------------

TITLE: Customizing Azure VM Table Output with JMESPath Query in Azure CLI
DESCRIPTION: This command demonstrates how to use the --query parameter with a JMESPath expression to select and rename specific properties for display in the table output. It projects the resourceGroup as resource and name as name, providing a tailored view of the VM list. This allows users to focus on relevant data points and customize column names for clarity. The example output shows a table with Resource and Name columns.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az vm list --query ""[].{resource:resourceGroup, name:name}"" --output table
```

----------------------------------------

TITLE: Initiating Azure CLI Login
DESCRIPTION: The `az login` command is used to authenticate your Azure CLI session. It attempts to open a browser for the authorization code flow by default. If a browser is unavailable or fails, it falls back to the device code flow, requiring manual entry of a code in a browser. The `--use-device-code` flag can force the device code flow.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/interactive-login.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az login
```

----------------------------------------

TITLE: Securely Prompting for Password in PowerShell - Azure CLI
DESCRIPTION: Shows how to securely obtain credentials in PowerShell using `Get-Credential` to avoid displaying the password. The obtained username and password are then used for `az login`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-interactively.md#_snippet_5

LANGUAGE: powershell
CODE:
```
$AzCred = Get-Credential -UserName <username>
az login -u $AzCred.UserName -p $AzCred.GetNetworkCredential().Password
```

----------------------------------------

TITLE: Resetting Azure AD Service Principal with Self-Signed Certificate (Console Output)
DESCRIPTION: This command resets a service principal's credentials by generating a new self-signed certificate instead of a password. The `--create-cert` parameter triggers certificate creation, and the path to the generated PEM file is displayed in the console and logs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-7.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
az ad sp credential reset --id myServicePrincipalID --create-cert
```

----------------------------------------

TITLE: Creating and Waiting for Multiple VMs with Azure CLI
DESCRIPTION: This snippet demonstrates creating two Azure virtual machines asynchronously using `--no-wait` and then waiting for both VMs to be fully created using `az vm wait`. It first retrieves the subscription ID to construct the full resource IDs for the VMs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_11

LANGUAGE: azurecli
CODE:
```
az vm create --resource-group VMResources --name virtual-machine-01 --image centos --no-wait
az vm create --resource-group VMResources --name virtual-machine-02 --image centos --no-wait

subscription=$(az account show --query ""id"" -o tsv)
vm1_id=""/subscriptions/$subscription/resourceGroups/VMResources/providers/Microsoft.Compute/virtualMachines/virtual-machine-01""
vm2_id=""/subscriptions/$subscription/resourceGroups/VMResources/providers/Microsoft.Compute/virtualMachines/virtual-machine-02""
az vm wait --created --ids $vm1_id $vm2_id
```

----------------------------------------

TITLE: Conditionally Deleting an Azure Resource Group (Azure CLI)
DESCRIPTION: This script conditionally deletes an Azure resource group. It first checks if the resource group exists using `az group exists`. If it does, the `az group delete` command is executed with the `--no-wait` argument to perform the deletion asynchronously, otherwise, a message is echoed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_32

LANGUAGE: azurecli
CODE:
```
if [ $(az group exists --name $resourceGroup) = true ]; then 
   az group delete --name $resourceGroup -y  --no-wait
else
   echo The $resourceGroup resource group does not exist
fi
```

----------------------------------------

TITLE: Changing Active Azure Subscription by ID
DESCRIPTION: This snippet illustrates how to switch the active Azure subscription using its unique ID. The `az account set` command is invoked with the `--subscription` parameter, supplying the full GUID of the desired subscription.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az account set --subscription ""xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx""
```

----------------------------------------

TITLE: Querying SSH Public Keys (Cmd)
DESCRIPTION: Demonstrates how to use an Azure CLI query to extract specific nested data, such as SSH public keys, from the `az vm show` command's JSON output. The query `osProfile.linuxConfiguration.ssh.publicKeys` navigates through dictionary properties. This example is for Cmd.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_34

LANGUAGE: Azure CLI
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

----------------------------------------

TITLE: Creating an Azure Service Principal with Azure CLI
DESCRIPTION: This snippet demonstrates how to create an Azure service principal using the `az ad sp create-for-rbac` command without specifying a name. A timestamp-based name is automatically generated, and the command outputs the `appId`, `displayName`, `password`, and `tenant` of the newly created service principal. This method is suitable when resource naming conventions are not strictly adhered to initially, but requires subsequent role and scope assignments for resource access.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Creation Date (Bash)
DESCRIPTION: Shows how to filter Azure Storage Accounts by their `creationTime` property, comparing only the date component. It fetches the storage account name, ID, and SKU for accounts created on or after a specific date.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_20

LANGUAGE: azurecli-interactive
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> \
    --query ""[?creationTime >='2021-11-15'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Setting Default Output Format for Azure CLI
DESCRIPTION: This command configures the default output format for all subsequent Azure CLI commands to 'jsonc' (JSON with comments). This global setting persists across sessions, eliminating the need to specify the '--output' parameter for every command. It's useful for consistent scripting or interactive use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/what-is-azure-cli.md#_snippet_7

LANGUAGE: azurecli-interactive
CODE:
```
az config set core.output=jsonc
```

----------------------------------------

TITLE: Retrieving Sign-in Information for User-Created Service Principals (Azure CLI)
DESCRIPTION: This command retrieves the display name, application ID, and tenant ID for all service principals created by the currently logged-in user. It uses the `--show-mine` parameter to filter by creator and `--query` to select specific fields, outputting the results in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-4.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az ad sp list --show-mine --query ""[].{SPname:displayName, SPid:appId, tenant:appOwnerOrganizationId}"" --output table
```

----------------------------------------

TITLE: Querying Storage Accounts by Creation Date (Bash)
DESCRIPTION: This snippet retrieves a list of Azure storage accounts created within the last 30 days. It calculates the date 30 days prior using `date` and then queries storage accounts in a specified resource group, filtering by `creationTime` and outputting the name and creation timestamp in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_4

LANGUAGE: bash
CODE:
```
saDate=$(date +%F -d ""-30days"")
az storage account list --resource-group $rgName \
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" \
                        --output table
```

----------------------------------------

TITLE: Initializing Azure CLI Configuration with `az init`
DESCRIPTION: This command launches an interactive wizard to configure Azure CLI settings. It guides users through common configurations like 'interaction' or 'automation' and provides explanations for each option, simplifying the initial setup process for the CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-configuration.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az init
```

----------------------------------------

TITLE: Managing Azure MariaDB Server Logs - Azure CLI
DESCRIPTION: This snippet details Azure CLI commands for managing server logs of an Azure MariaDB server. It covers listing, setting, and showing server configurations, creating a MariaDB server, and then listing and downloading server logs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_44

LANGUAGE: Azure CLI
CODE:
```
az mariadb server configuration list
az mariadb server configuration set
az mariadb server configuration show
az mariadb server create
az mariadb server-logs download
az mariadb server-logs list
```

----------------------------------------

TITLE: Listing Azure Storage Containers by Prefix (Azure CLI)
DESCRIPTION: This snippet retrieves a list of Azure Storage container names that match a specified prefix ('learnbash'). It uses 'az storage container list' with '--query' to extract only the names and '--output tsv' for a tab-separated value format, storing the result in the 'containerList' variable.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_29

LANGUAGE: azurecli
CODE:
```
containerPrefix=""learnbash""
containerList=$(az storage container list \
    --query ""[].name"" \
    --prefix $containerPrefix \
    --output tsv)
```

----------------------------------------

TITLE: Logging In to a Specific Azure Tenant
DESCRIPTION: Configures Azure CLI to disable the subscription selector (for versions 2.61.0+) and then logs into a specific Azure tenant using its ID or `.onmicrosoft.com` domain. This is useful when an identity belongs to multiple tenants.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-interactively.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
# disable the subscription selector (v. 2.61.0 and up)
az config set core.login_experience_v2=off

# login with a tenant ID
az login --tenant 00000000-0000-0000-0000-000000000000
```

----------------------------------------

TITLE: Querying Web App Publishing Profiles Ending with FTP - Azure CLI
DESCRIPTION: This snippet lists the profile name and publish URL for web app deployment profiles where the `profileName` ends with 'FTP'. It uses the `az webapp deployment list-publishing-profiles` command and filters the output using the `ends_with` function, projecting specific fields.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-examples.md#_snippet_3

LANGUAGE: bash
CODE:
```
az webapp deployment list-publishing-profiles --resource-group DemoGroup --name DemoApp --query ""[?ends_with(profileName, 'FTP')].{profileName: profileName, publishUrl: publishUrl}""
```

LANGUAGE: powershell
CODE:
```
az webapp deployment list-publishing-profiles --resource-group DemoGroup --name DemoApp --query ""[?ends_with(profileName, 'FTP')].{profileName: profileName, publishUrl: publishUrl}""
```

LANGUAGE: cmd
CODE:
```
az webapp deployment list-publishing-profiles --resource-group DemoGroup --name DemoApp --query ""[?ends_with(profileName, 'FTP')].{profileName: profileName, publishUrl: publishUrl}""
```

----------------------------------------

TITLE: Creating an Azure SQL Server using Azure CLI
DESCRIPTION: This snippet demonstrates how to create an Azure SQL server using the `az sql server create` command. It defines variables for server name, resource group, location, administrator user, and password, which should be replaced with actual values before execution to provision a new SQL server instance.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-copilot.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Variable block
serverName=""myServerName""
resourceGroup=""myResourceGroup""
locationName=""eastus2""
adminUser=""myAdminUser""
adminPassword=""myPassword""

az sql server create --name $serverName --resource-group $resourceGroup --location $location --admin-user $adminUser --admin-password $adminPassword
```

----------------------------------------

TITLE: Listing Azure CLI Subgroups with Help
DESCRIPTION: This command displays a comprehensive list of all available subgroups and commands under the `az vm` command group. It's an essential tool for exploring the capabilities of a specific Azure service within the CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-with-azure-cli.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az vm --help
```

----------------------------------------

TITLE: Logging into Azure CLI with Specific Tenant ID for MFA
DESCRIPTION: This command demonstrates how to explicitly specify a tenant ID when logging into Azure CLI using the `--tenant` parameter. This is a workaround for the 'Authentication failed against tenant' warning, allowing users to bypass the default tenant selection and authenticate directly against the desired tenant, especially when MFA is involved.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-mfa.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az login --tenant 00000000-0000-0000-0000-000000000000
```

----------------------------------------

TITLE: Creating Azure CLI Alias to Get VM Public IP
DESCRIPTION: This command creates an alias 'get-vm-ip' that takes a resource group name and VM name as positional arguments. It then uses these arguments to query and return the public IP address of the specified virtual machine, streamlining IP retrieval.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extension-alias.md#_snippet_9

LANGUAGE: azurecli-interactive
CODE:
```
az alias create \
    --name ""get-vm-ip {{ resourceGroup }} {{ vmName }}"" \
    --command ""vm list-ip-addresses --resource-group {{ resourceGroup }} --name {{ vmName }}
        --query [0].virtualMachine.network.publicIpAddresses[0].ipAddress""
```

----------------------------------------

TITLE: Monitor Azure Web App with Logs (Azure CLI)
DESCRIPTION: This script sets up an Azure App Service web app and configures logging. It demonstrates how to enable and download diagnostic logs for monitoring web app performance and issues.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_1

LANGUAGE: Bash
CODE:
```
az appservice plan create
az webapp create
az webapp log config
az webapp log download
```

----------------------------------------

TITLE: Integrating Azure SignalR with App Service and GitHub OAuth (Azure CLI)
DESCRIPTION: This snippet details the setup of an Azure App Service with SignalR, including GitHub OAuth for deployment. It covers creating resources, configuring app settings, and setting up local Git deployment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_3

LANGUAGE: Bash
CODE:
```
az appservice plan create
az signalr create
az signalr key list
az webapp config appsettings set
az webapp create
az webapp deployment source config-local-git
az webapp deployment user set
```

----------------------------------------

TITLE: Creating an Azure CLI Alias with Arguments via INI Configuration
DESCRIPTION: This specific example shows an alias `get-vm-ip` defined in the INI configuration file. It takes `resourceGroup` and `vmName` as arguments, which are then used to query and return the public IP address of the specified virtual machine.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_15

LANGUAGE: ini
CODE:
```
[get-vm-ip {{ resourceGroup }} {{ vmName }}]
command = vm list-ip-addresses --resource-group {{ resourceGroup }} --name {{ vmName }} --query [0].virtualMachine.network.publicIpAddresses[0].ipAddress
```

----------------------------------------

TITLE: Updating Array Element with Partial Shorthand Syntax (Bash)
DESCRIPTION: Demonstrates how to modify a specific element within a JSON array using partial value shorthand syntax. The array index is specified in square brackets, followed by the new value enclosed in double quotes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_4

LANGUAGE: Bash
CODE:
```
az some-command --contact emails[1]=""Bill@outlook.com""
```

----------------------------------------

TITLE: Regenerating Azure Container Registry Credentials (Bash)
DESCRIPTION: This `az rest` command uses the POST method to regenerate a specified login credential for an Azure Container Registry. It requires a JSON body specifying the name of the credential to regenerate, using a variable `passwordValue`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_10

LANGUAGE: Bash
CODE:
```
# Variable block
$passwordValue=""password""

az rest --method post \
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName/regenerateCredential?api-version=2023-01-01-preview \
    --body ""{'name': '$passwordValue'}""
```

----------------------------------------

TITLE: Appending Certificate to Existing Service Principal (Azure CLI)
DESCRIPTION: This Azure CLI command appends a new certificate to an existing Azure Active Directory service principal. The --append parameter ensures that existing credentials are not cleared, allowing multiple certificates or passwords to be associated with the principal.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
az ad sp credential reset --id myServicePrincipalID \
                          --append \
                          --cert @/path/to/cert.pem
```

----------------------------------------

TITLE: Flattening Azure VM List Array - Azure CLI
DESCRIPTION: This command demonstrates how to flatten an array of Azure VMs returned by `az vm list` using the `[]` JMESPath operator at the beginning of the query. It extracts specific properties (Name, OS Type, Admin Username) for each VM in the resource group, effectively creating a list of objects.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_11

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

----------------------------------------

TITLE: Querying Azure Account Tenant and Subscription ID (Azure CLI)
DESCRIPTION: This example returns the tenant ID and subscription ID of the currently used Azure account and subscription. It uses a JMESPath projection to select specific fields.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-examples.md#_snippet_4

LANGUAGE: Bash
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

LANGUAGE: PowerShell
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

LANGUAGE: Cmd
CODE:
```
az account show --query ""{tenantId:tenantId,subscriptionid:id}""
```

----------------------------------------

TITLE: Creating Service Principal with Multiple Scopes (PowerShell)
DESCRIPTION: This PowerShell snippet creates an Azure service principal 'myServicePrincipalName2' with 'reader' permissions across multiple, space-delimited scopes. It grants access to all resources within 'myRG1' and specifically to 'myVM' within 'myRG2', showcasing how to assign broad and specific permissions using a single command in a PowerShell environment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
# PowerShell script
az ad sp create-for-rbac --name myServicePrincipalName2 --role reader --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG2/providers/Microsoft.Compute/virtualMachines/myVM
```

----------------------------------------

TITLE: Querying Cognitive Services Account Endpoint - Azure CLI
DESCRIPTION: This snippet retrieves the endpoint URL for a specific Azure Cognitive Services account. It uses the `az cognitiveservices account show` command with the `--query` parameter to extract only the `properties.endpoint` field from the output.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-examples.md#_snippet_0

LANGUAGE: powershell
CODE:
```
az cognitiveservices account show --resource-group QueryDemo --name DemoAccount --query ""properties.endpoint""
```

LANGUAGE: cmd
CODE:
```
az cognitiveservices account show --resource-group QueryDemo --name DemoAccount --query ""properties.endpoint""
```

----------------------------------------

TITLE: Creating User Subscription Azure Batch Account with Key Vault (Azure CLI)
DESCRIPTION: This snippet illustrates how to create an Azure Batch account in a user subscription, integrate it with Azure Key Vault for secrets management, and assign necessary roles.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_6

LANGUAGE: Bash
CODE:
```
az batch account create
az batch account login
az keyvault create
az keyvault set-policy
az role assignment create
```

----------------------------------------

TITLE: Displaying Parameters and Examples for an Azure CLI Command
DESCRIPTION: Applying `--help` to a specific command (e.g., `az vm create`) provides a comprehensive list of its arguments, authentication options, and usage examples. This is essential for understanding how to correctly use a command and its various parameters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-with-azure-cli.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az vm create --help
```

----------------------------------------

TITLE: Creating Service Principal with PowerShell and Azure CLI
DESCRIPTION: This PowerShell script creates an Azure Service Principal (SP) for RBAC. It generates a unique identifier for the SP name, defines the role and resource group, retrieves the current subscription ID using Azure CLI, and then uses `az ad sp create-for-rbac` within PowerShell to create the service principal with the specified role and scope.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
# PowerShell script
$randomIdentifier = (New-Guid).ToString().Substring(0,8)
$servicePrincipalName=""msdocs-sp-$randomIdentifier""
$roleName=""azureRoleName""
$subscriptionID=$(az account show --query id --output tsv)
$resourceGroup=""myResourceGroupName""
echo ""Creating SP for RBAC with name $servicePrincipalName, with role $roleName and in scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup""

az ad sp create-for-rbac --name $servicePrincipalName --role $roleName --scopes /subscriptions/$subscriptionID/resourceGroups/$resourceGroup
```

----------------------------------------

TITLE: Checking for Null Variable in Bash with If-Then-Else
DESCRIPTION: This Bash snippet demonstrates how to use an `if-then-else` statement to check if a variable (`$resourceGroup`) is empty or null. If it's not empty, its value is echoed; otherwise, it's assigned a new value using a random identifier.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_13

LANGUAGE: azurecli
CODE:
```
if [ $resourceGroup != '' ]; then
   echo $resourceGroup
else
   resourceGroup=""msdocs-learn-bash-$randomIdentifier""
fi
```

----------------------------------------

TITLE: Creating Azure Storage Account Tags (PowerShell)
DESCRIPTION: This snippet demonstrates various ways to create and update tags on an Azure storage account using PowerShell. It covers creating simple tags, tags with spaces, tags with empty values, tags with special characters (like `$` and `\`), and tags from PowerShell variables, highlighting PowerShell's specific quoting and escaping rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_13

LANGUAGE: PowerShell
CODE:
```
# Create new tags. This syntax works with or without quotes around each key-value pair.
az storage account update --name <msdocssa00000000> `
                          --resource-group <msdocs-tutorial-rg-00000000> `
                          --tags Team=t1 Environment=e1


# Create new tags containing spaces. You must use quotes.
az storage account update --name <msdocssa00000000> `
                          --resource-group <msdocs-tutorial-rg-00000000> `
                          --tags ""Floor number=f1"" ""Cost center=cc1""

# Create a new tag with an empty value.
az storage account update --name <msdocssa00000000> `
                          --resource-group <msdocs-tutorial-rg-00000000> `
                          --tags ""Floor number=""''""""

# Create a new tag containing special characters resulting in ""Path"": ""$G:\myPath"".
# Nate the backtick as both the line continuation and the PowerShell escape character.
az storage account update --name <msdocssa00000000> `
                          --resource-group <msdocs-tutorial-rg-00000000> `
                          --tags ""Path=`$G:\myPath""

# Create a tag from a variable.
# In PowerShell, prefix your variable name with a dollar sign.
$newTag=""tag1=tag value with spaces""
az storage account update --name <msdocssa00000000> `
                          --resource-group <msdocs-tutorial-rg-00000000> `
                          --tags ""$newTag""
```

----------------------------------------

TITLE: Managing Cosmos DB Account Keys (Azure CLI)
DESCRIPTION: This snippet illustrates how to create a Cosmos DB account and then manage its access keys, including listing existing keys and regenerating them for enhanced security.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_24

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az cosmosdb keys list
az cosmosdb keys regenerate
```

----------------------------------------

TITLE: Piping Running VM Names to Grep (Azure CLI)
DESCRIPTION: This example illustrates the use of piping to pass the output of one Azure CLI command as input to another. Specifically, it filters the names of running VMs using 'grep', which is efficient when the output value is consumed only once.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az vm list --query ""[?powerState=='VM running'].name"" --output tsv | grep my_vm
```

----------------------------------------

TITLE: Regenerating Azure Container Registry Credentials (PowerShell)
DESCRIPTION: This `az rest` command uses the POST method to regenerate one of the login credentials for an Azure Container Registry. It sends a JSON body specifying the name of the credential to be regenerated, here set to 'password'. Note the use of backticks for line continuation in PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
# Variable block
$passwordValue=""password""

az rest --method post `
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName/regenerateCredential?api-version=2023-01-01-preview `
    --body ""{'name': '$passwordValue'}""
```

----------------------------------------

TITLE: Creating Azure Resource Group Conditionally with Grep
DESCRIPTION: This command demonstrates a concise way to conditionally create an Azure resource group using `az group list` piped to `grep`. If `grep` does not find the specified resource group (indicated by `||`), the `az group create` command is executed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_16

LANGUAGE: azurecli
CODE:
```
az group list --output tsv | grep $resourceGroup -q || az group create --name $resourceGroup --location ""$location""
```

----------------------------------------

TITLE: Securely Prompting for Password in Bash - Azure CLI
DESCRIPTION: Demonstrates how to securely prompt for an Azure password in Bash using `read -s` to prevent it from being displayed in the terminal. The password is then passed to `az login`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-interactively.md#_snippet_4

LANGUAGE: bash
CODE:
```
read -sp ""Azure password: "" AZ_PASS && echo && az login -u <username> -p $AZ_PASS
```

----------------------------------------

TITLE: Changing Active Azure Subscription with Bash Variable
DESCRIPTION: This Bash snippet first retrieves the ID of a specific Azure subscription by name and stores it in a variable. It then uses this variable with `az account set` to change the active subscription, providing a dynamic way to switch contexts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_9

LANGUAGE: Bash
CODE:
```
subscriptionId=""$(az account list --query ""[?name=='my case sensitive subscription full name'].id"" --output tsv)""
az account set --subscription $subscriptionId
```

----------------------------------------

TITLE: Running Azure CLI Scenarios - Azure CLI
DESCRIPTION: The `az scenario` command provides guided scenarios within the Azure CLI. It helps users learn to complete specific jobs by demonstrating how to chain multiple commands together effectively.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az scenario
```

----------------------------------------

TITLE: Showing Parameter Help with `??` (Bash)
DESCRIPTION: Demonstrates how to use `??` (wrapped in double quotes for Bash compatibility) to display the help message for a specific parameter in an Azure CLI command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_28

LANGUAGE: bash
CODE:
```
az some-command --contact ""??""
```

----------------------------------------

TITLE: Displaying Hidden Keys in Table Output with JMESPath
DESCRIPTION: This snippet demonstrates how to use JMESPath's re-keying feature to display properties like `id`, `type`, and `etag` that are typically omitted from the default table view. By changing the key name (e.g., `objectID:id`), these values can be included in the table output.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az vm list --query ""[].{objectID:id}"" --output table
```

----------------------------------------

TITLE: Querying Azure Storage Accounts by Creation Timestamp (Azure CLI)
DESCRIPTION: This command lists Azure Storage Accounts within a specified resource group and filters them to include only those created after a specific date and time, projecting their name, ID, and SKU.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_31

LANGUAGE: azurecli
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> ^
    --query ""[?creationTime >='2021-11-15T19:14:27.103127+00:00'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Listing Helm Charts in Azure Container Registry - Azure CLI
DESCRIPTION: This command is used to find all Helm charts stored in a legacy Helm repository within Azure Container Registry. It helps identify charts at risk of deletion due to the retirement of Helm 2 support and legacy Helm repository capabilities. This command is crucial for migrating charts to OCI artifacts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/upcoming-breaking-changes.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az acr helm list
```

----------------------------------------

TITLE: Using Stop-Parsing Symbol for Azure CLI VM Creation (PowerShell)
DESCRIPTION: Shows how to use the '--%' stop-parsing symbol in PowerShell to ensure that subsequent arguments for an Azure CLI command, such as 'az vm create', are treated literally and not interpreted by PowerShell as commands or expressions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_20

LANGUAGE: azurecli
CODE:
```
az --% vm create --name xxx
```

----------------------------------------

TITLE: Installing Azure CLI with Homebrew on macOS
DESCRIPTION: This command updates the Homebrew repository information and then installs the Azure CLI package. It is the recommended and easiest method for managing the CLI on macOS, ensuring convenient updates and uninstallation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli-macos.md#_snippet_0

LANGUAGE: bash
CODE:
```
brew update && brew install azure-cli
```

----------------------------------------

TITLE: Rename Azure Storage Account Columns (Bash/Linux)
DESCRIPTION: This Azure CLI command lists storage accounts and renames the 'name' and 'primaryEndpoints.blob' columns to 'SA Name' and 'Primary endpoint' respectively, using single quotes for the `--query` parameter and embedded double quotes for the new column names. This syntax is suitable for Bash in Linux and PowerShell in Linux.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az storage account list --query '[].{""SA Name"":name, ""Primary endpoint"":primaryEndpoints.blob}' --output table
```

----------------------------------------

TITLE: Querying Storage Account Primary Endpoints (Azure CLI)
DESCRIPTION: This command retrieves the `primaryEndpoints` dictionary for a specified Azure storage account. It uses the `az storage account show` command with the `--query` parameter to apply a JMESPath query, returning a JSON object containing various endpoint URLs. Replace placeholders with your actual resource group and storage account names.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az storage account show --resource-group <msdocs-tutorial-rg-00000000> \
                        --name <msdocssa000000000> \
                        --query primaryEndpoints
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Public Access (Bash)
DESCRIPTION: Shows how to filter Azure Storage Accounts based on a boolean property, specifically `allowBlobPublicAccess`. The query returns the `id` of storage accounts where public blob access is enabled. This uses a storage account created in the tutorial.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_18

LANGUAGE: azurecli-interactive
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> \
    --query ""[?allowBlobPublicAccess == \`true\`].id""
```

----------------------------------------

TITLE: Stopping PowerShell Parsing with --% for Azure CLI
DESCRIPTION: This snippet shows how to use the `--%` stop-parsing symbol in PowerShell to prevent it from interpreting the subsequent arguments. This ensures that the Azure CLI command receives the argument exactly as written, bypassing PowerShell's parsing rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_21

LANGUAGE: azurecli
CODE:
```
az --% ""a&b"" --debug
```

----------------------------------------

TITLE: Creating Azure MySQL Server with VNet Integration (Azure CLI)
DESCRIPTION: This script creates an Azure MySQL server and integrates it with a virtual network (VNet) by creating VNet rules, subnets, and listing endpoint services for secure private access.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_69

LANGUAGE: Bash
CODE:
```
az mysql server create
az mysql server vnet-rule create
az network vnet create
az network vnet list-endpoint-services
az network vnet subnet create
az network vnet subnet show
```

----------------------------------------

TITLE: Create Azure PostgreSQL Server and Firewall Rule (Azure CLI)
DESCRIPTION: This snippet provides Azure CLI commands for creating an Azure Database for PostgreSQL server and configuring its firewall rules. It includes commands to create the server, create new firewall rules, and list existing firewall rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_72

LANGUAGE: Bash
CODE:
```
az postgres server create
az postgres server firewall-rule create
az postgres server firewall-rule list
```

----------------------------------------

TITLE: Managing Cosmos DB Account Keys with Azure CLI
DESCRIPTION: This snippet demonstrates creating a Cosmos DB account, listing its access keys, and then regenerating them for enhanced security.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_37

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az cosmosdb keys list
az cosmosdb keys regenerate
```

----------------------------------------

TITLE: Creating a Simple VM Scale Set (Azure CLI)
DESCRIPTION: This script provides a straightforward example of creating a basic Azure Virtual Machine Scale Set. Its core functionality is encapsulated in the `az vmss create` command, which provisions a new scale set with minimal configuration.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_88

LANGUAGE: Azure CLI
CODE:
```
az vmss create
```

----------------------------------------

TITLE: Getting Help for Azure CLI Account Subscription Commands - Azure CLI
DESCRIPTION: This command provides in-line help for the `az account subscription` subgroup. It lists specific commands and usage details relevant to managing Azure subscriptions within the account context.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az account subscription --help
```

----------------------------------------

TITLE: Configuring Default Proxy Credentials in PowerShell
DESCRIPTION: This PowerShell command sets the default network credentials for the WebClient proxy. This configuration is crucial for the Azure CLI to successfully connect to Azure services when operating within an environment that requires proxy authentication, ensuring seamless access.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli-windows.md#_snippet_2

LANGUAGE: powershell
CODE:
```
(New-Object System.Net.WebClient).Proxy.Credentials = `
  [System.Net.CredentialCache]::DefaultNetworkCredentials
```

----------------------------------------

TITLE: Creating VMSS in a Single Availability Zone (Azure CLI)
DESCRIPTION: This script shows how to deploy an Azure Virtual Machine Scale Set within a specific Azure Availability Zone for high availability. It uses `az network public-ip show` to retrieve public IP details, `az vmss create` to provision the scale set in the zone, and `az vmss extension set` to configure extensions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_85

LANGUAGE: Azure CLI
CODE:
```
az network public-ip show
az vmss create
az vmss extension set
```

----------------------------------------

TITLE: Chaining Azure CLI Commands with JMESPath Queries
DESCRIPTION: This advanced example demonstrates how to use JMESPath queries (`??`) to extract data from previous command outputs and use it as an argument for subsequent commands, enabling complex data flow within the interactive shell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/interactive-azure-cli.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
az>> vm create --name <myVirtualMachine> --resource-group <myResourceGroup> --image Ubuntu2204 --no-wait -o json
az>> group list -o json

# List all the resources of type `virtualMachine`on the first group whose location is westeurope. 
az>> resource list -g ""?? [?location=='westeurope'].name | [0]"" --query ""[?type=='Microsoft.Compute/virtualMachines'].name""
```

----------------------------------------

TITLE: Creating Service Principal with Multiple Scopes (Bash)
DESCRIPTION: This snippet illustrates creating an Azure service principal 'myServicePrincipalName2' with 'reader' permissions across multiple, space-delimited scopes. It grants access to all resources within 'myRG1' and specifically to 'myVM' within 'myRG2'. This demonstrates the flexibility of the `--scopes` parameter for fine-grained access control across different Azure resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
# Bash script
az ad sp create-for-rbac --name myServicePrincipalName2 \
                            --role reader \
                            --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG2/providers/Microsoft.Compute/virtualMachines/myVM
```

----------------------------------------

TITLE: Handling JSON Parameters in Bash (Correct)
DESCRIPTION: Demonstrates the correct way to pass JSON string parameters to Azure CLI commands in Bash. It shows using single quotes or escaped double quotes to ensure the JSON string is interpreted as a single argument by the shell, preventing misinterpretation of spaces or special characters within the JSON.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_4

LANGUAGE: Bash
CODE:
```
az '{""key"":""value""}' --debug
az ""{\""key\"":\""value\""}"" --debug
```

----------------------------------------

TITLE: Filtering Azure VMs by OS Type (Linux) in Bash
DESCRIPTION: This example filters Azure Virtual Machines within the 'QueryDemo' resource group to display only those with 'Linux' as their OS type. It uses a JMESPath query to select the VM's name and admin username, presenting the output in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_16

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.osType=='Linux'].{Name:name,  admin:osProfile.adminUsername}"" --output table
```

----------------------------------------

TITLE: Starting Azure CLI Interactive Mode with Error Filtering
DESCRIPTION: This command initiates the Azure CLI interactive mode, which provides an auto-completion and command history environment. The `--only-show-errors` parameter ensures that only error messages are displayed, suppressing warnings and other informational output, as demonstrated by the absence of the 'This command is in preview...' warning.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az interactive --only-show-errors
```

----------------------------------------

TITLE: Executing end-to-end scenarios with az scenario (Azure CLI)
DESCRIPTION: The `az scenario` command guides users through end-to-end Azure CLI examples with interactive prompts. Users can specify keywords to find relevant scenarios, making it an effective tool for learning practical applications.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az scenario guide ""keywords of interest""
```

LANGUAGE: Azure CLI
CODE:
```
az scenario guide ""virtual machines""
```

----------------------------------------

TITLE: Listing Current User's Service Principals with Specific Fields (Azure CLI)
DESCRIPTION: This command retrieves service principals created by the currently signed-in user. It uses the `--show-mine` parameter and a `--query` string to select and rename specific fields (`displayName` as `SPname`, `appId` as `SPid`, `appOwnerOrganizationId` as `tenant`) for a more concise output, presented in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-4.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az ad sp list --show-mine --query ""[].{SPname:displayName, SPid:appId, tenant:appOwnerOrganizationId}"" --output table
```

----------------------------------------

TITLE: Reading and Filtering JSON in PowerShell
DESCRIPTION: This PowerShell script illustrates how to read a JSON file, convert its content into a PowerShell object, extract specific property values from dictionary objects, and filter arrays using `Where-Object` and `Select-Object` cmdlets. It provides a native PowerShell approach to JSON manipulation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_13

LANGUAGE: powershell
CODE:
```
# Show the contents of a file in the console
$fileName=""c:\myPath\msdocs-tutorial.json""
$fileContents = Get-Content -Path $fileName | ConvertFrom-Json

# Get a JSON dictionary object
$stgKV=$($fileContents.environments.stg.""kv-secretName"")
echo $stgKV

# Filter a JSON array
$devKV=$($fileContents.environments.dev |
    Where-Object status -eq 'active' |
    Select-Object -ExpandProperty 'kv-secretName')
echo $devKV
```

----------------------------------------

TITLE: Setting Default Azure CLI Output Format to None (Azure CLI)
DESCRIPTION: This command globally configures the default output format for all Azure CLI commands to `none`. This is useful when console output is generally not needed, helping to prevent accidental display of sensitive information.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_14

LANGUAGE: azurecli-interactive
CODE:
```
az config set core.output=none
```

----------------------------------------

TITLE: Getting Active Tenant ID with Azure CLI
DESCRIPTION: This snippet demonstrates how to retrieve the active tenant ID using two Azure CLI commands: `az account tenant list` to list all tenants and `az account show` to display details of the current account, which includes the tenant ID.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az account tenant list

az account show
```

----------------------------------------

TITLE: Create Python Azure Function App on Consumption Plan (Azure CLI)
DESCRIPTION: This script creates a Python-based Azure Function App on the Consumption plan, enabling serverless execution. It includes the provisioning of a storage account for the function app's operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_10

LANGUAGE: Bash
CODE:
```
az functionapp create
az storage account create
```

----------------------------------------

TITLE: Querying Web App Publishing Profiles by Name Suffix - Azure CLI
DESCRIPTION: This query lists the profile name and publish URL for web app deployment profiles where the profile name ends with 'FTP'. It demonstrates using the `ends_with` JmesPath function for string matching.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_9

LANGUAGE: bash
CODE:
```
az webapp deployment list-publishing-profiles --resource-group DemoGroup --name DemoApp --query ""[?ends_with(profileName, 'FTP')].{profileName: profileName, publishUrl: publishUrl}""
```

LANGUAGE: powershell
CODE:
```
az webapp deployment list-publishing-profiles --resource-group DemoGroup --name DemoApp --query ""[?ends_with(profileName, 'FTP')].{profileName: profileName, publishUrl: publishUrl}""
```

LANGUAGE: cmd
CODE:
```
az webapp deployment list-publishing-profiles --resource-group DemoGroup --name DemoApp --query ""[?ends_with(profileName, 'FTP')].{profileName: profileName, publishUrl: publishUrl}""
```

----------------------------------------

TITLE: Updating Repositories and Installing Azure CLI (Debian/Ubuntu)
DESCRIPTION: These commands update the local package index with the newly added Azure CLI repository information and then proceed to install the `azure-cli` package. This completes the standard installation process, making the Azure CLI available for use on the system.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-linux-apt.md#_snippet_5

LANGUAGE: bash
CODE:
```
sudo apt-get update
sudo apt-get install azure-cli
```

----------------------------------------

TITLE: Getting Help for a Specific Azure CLI Subgroup
DESCRIPTION: This command uses the `--help` argument on a specific subgroup (`az vm availability-set`) to display detailed information, including its commands, parameters, and examples. It's useful for drilling down into specific functionalities within a service.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-with-azure-cli.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az vm availability-set --help
```

----------------------------------------

TITLE: Signing In with Specific Tenant ID - Azure CLI
DESCRIPTION: Configures Azure CLI to disable the subscription selector (for versions 2.61.0+) and then signs in to a specific Azure tenant using its object ID or `.onmicrosoft.com` domain. This is useful when an identity belongs to multiple tenants.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-interactively.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
# disable the subscription selector (v. 2.61.0 and up)
az config set core.login_experience_v2=off

# login with a tenant ID
az login --tenant 00000000-0000-0000-0000-000000000000
```

----------------------------------------

TITLE: Listing Running Web Apps by State - Azure CLI
DESCRIPTION: This query retrieves a list of all web applications within a specified resource group that are currently in a 'Running' state. It filters web apps based on their operational status.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_8

LANGUAGE: bash
CODE:
```
az webapp list --resource-group DemoGroup --query ""[?state=='Running']""
```

LANGUAGE: powershell
CODE:
```
az webapp list --resource-group DemoGroup --query ""[?state=='Running']""
```

LANGUAGE: cmd
CODE:
```
az webapp list --resource-group DemoGroup --query ""[?state=='Running']""
```

----------------------------------------

TITLE: Deleting Multiple Azure Resource Groups
DESCRIPTION: These commands demonstrate how to delete multiple Azure resource groups and all their contained resources. This is a cleanup operation, useful for removing resources created during testing or development.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
az group delete --name MyResourceGroup
az group delete --name OtherResourceGroup
az group delete --name StorageGroups
```

----------------------------------------

TITLE: Querying VM ID for Table Output
DESCRIPTION: This snippet demonstrates how to explicitly query and display the `id` property of an Azure VM in a table format, even though `id` is typically filtered out from default table views. This is achieved by aliasing the `id` key in the JMESPath query to make it visible.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_29

LANGUAGE: azurecli
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""{objectID:id}"" --output table
```

----------------------------------------

TITLE: Showing Nested Property Help in Full Value Format (Bash)
DESCRIPTION: Shows how to use `??` to get help for a nested property (`address`) within the full value format, providing context-specific assistance.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_31

LANGUAGE: bash
CODE:
```
az some-command --contact ""{name:Bill,address:??""
```

----------------------------------------

TITLE: Retrieving VM Details (Bash)
DESCRIPTION: Executes the `az vm show` command to retrieve detailed information about a specific Azure Virtual Machine. This command typically returns a JSON dictionary containing various VM properties. This example is for Bash.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_28

LANGUAGE: Azure CLI
CODE:
```
az vm show --resource-group QueryDemo --name TestVM
```

----------------------------------------

TITLE: Updating Azure Container Registry SKU with PATCH (Bash)
DESCRIPTION: This Bash snippet uses `az rest` with the PATCH method to update an existing Azure Container Registry. It specifically changes the SKU name to 'Premium'. Prerequisites include defining `$skuName`, `$subscriptionId`, `$resourceGroup`, `$containerRegistryName`, `$locationName`, and `$propertyValue`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_5

LANGUAGE: Bash
CODE:
```
#Variable Block
$skuName=""Premium""

az rest --method patch \
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview \
    --body ""{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}""
```

----------------------------------------

TITLE: Installing Azure CLI with One-Command Script (Debian/Ubuntu)
DESCRIPTION: This command downloads and executes an installation script maintained by the Azure CLI team. It provides the easiest way to install the Azure CLI on Debian and Ubuntu systems by automating all necessary steps, including adding the repository and installing the package.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-linux-apt.md#_snippet_1

LANGUAGE: bash
CODE:
```
curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
```

----------------------------------------

TITLE: Filtering for Non-Default Azure Subscriptions
DESCRIPTION: These commands show how to filter for non-default Azure subscriptions by explicitly querying for `isDefault == \`false\``. This requires escaping the boolean value. The examples demonstrate returning the full non-default list and then selecting only the `name` property formatted as a table.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_9

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault == \`false\`]`""
```

LANGUAGE: azurecli-interactive
CODE:
```
az account list --query ""[?isDefault == \`false\`].name"" -o table
```

----------------------------------------

TITLE: Resetting Service Principal Credentials - Azure AD SP - Azure CLI
DESCRIPTION: This snippet describes the changes for `az ad sp credential reset`. The `--name` argument is replaced by `--id`, and the `--password` argument is removed, with the Graph service now creating a password if certificate arguments are not specified.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/microsoft-graph-migration.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
--name replaced with --id
--password removed (Graph service creates a password if no certificate arguments)
```

----------------------------------------

TITLE: Finding Azure CLI Commands by Keyword
DESCRIPTION: This command helps discover Azure CLI commands by searching for keywords within command names. It's useful for finding relevant commands when you know a general term but not the exact command group or name.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-with-azure-cli.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az find vm
```

----------------------------------------

TITLE: Exploring `az group create` Parameters in Interactive Mode
DESCRIPTION: This snippet demonstrates how to leverage the command recommendation feature within Azure CLI's interactive mode. By typing `az group create` after `az>>`, the interactive shell provides a list and definitions of all required parameters, aiding in understanding and constructing the command correctly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-1.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
# get options for az group create
az>> az group create
```

----------------------------------------

TITLE: Querying Azure VM Properties (Array Output) - Azure CLI
DESCRIPTION: This command demonstrates how to retrieve specific properties of a single Azure Virtual Machine using `az vm show` and a JMESPath array projection. The output will be an ordered array containing the VM's name, administrator username, and the first SSH public key data.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]""
```

LANGUAGE: Cmd
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]""
```

----------------------------------------

TITLE: Disabling Azure CLI Secret Warning
DESCRIPTION: This command disables the sensitive information warning feature in Azure CLI. By default, Azure CLI 2.61 and later versions display a warning when command output contains potential secrets. Setting `clients.show_secrets_warning` to `no` prevents these warnings from appearing, which can be useful in automated scripts or CI/CD pipelines where STDERR output might cause failures.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-manage-secrets.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az config set clients.show_secrets_warning=no
```

----------------------------------------

TITLE: Monitor and Scale Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This snippet illustrates Azure CLI commands for monitoring and scaling an Azure Database for MySQL Flexible Server. It includes commands to show account details, list monitoring metrics, create the server, configure firewall rules, and update the server's scaling properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_66

LANGUAGE: Bash
CODE:
```
az account show
az monitor metrics list
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server update
```

----------------------------------------

TITLE: Escaping Ampersand in Azure CLI Parameters (Backticks)
DESCRIPTION: This command shows an alternative method to pass a parameter with an ampersand in PowerShell by escaping the inner double quotes with backticks. This ensures the ampersand is treated as a literal character by Azure CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_17

LANGUAGE: azurecli
CODE:
```
az ""`""a&b`"""" --debug
```

----------------------------------------

TITLE: Example JSON with Special Characters for Single Quotes
DESCRIPTION: Presents a JSON object containing special characters and spaces, which require single quotes when passed as a string value in Azure CLI parameters to ensure correct parsing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_9

LANGUAGE: JSON
CODE:
```
{
  ""name"": ""Bill RP"",
  ""age"": 20,
  ""paid"": true,
  ""data"": ""{a: [1, 2]}""
}
```

----------------------------------------

TITLE: Troubleshooting Invalid CIDR Notation in Azure CLI Bash Script
DESCRIPTION: This Bash script snippet helps diagnose `InvalidCIDRNotation` errors by echoing the actual `vnetAddressPrefix` value read from a CSV file. It's used to identify hidden characters or extra spaces that might be causing parsing issues, especially when the visual output of `echo` seems correct but the `az network vnet create` command fails.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/create-azure-resources-at-scale.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
while IFS=, read -r resourceNo location createRG existingRgName createVnet vnetAddressPrefix subnetAddressPrefixes vmImage publicIpSku adminUser
do
    echo ""resourceNo = $resourceNo""

    if [ ""$createVnet"" == ""TRUE"" ]; then
      startTest=""abc""
      endTest=""xyz""
      echo $startTest$vnetAddressPrefix$endTest
    fi
done < <(tail -n +2 $setupFileLocation)
```

----------------------------------------

TITLE: Interactively Configuring Azure CLI with az init
DESCRIPTION: This command launches an interactive wizard (`az init`) that guides the user through configuring their Azure CLI environment. It displays current settings and offers options to optimize for interaction, automation, or custom settings, simplifying the setup process for new and experienced users alike.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az init
```

----------------------------------------

TITLE: Listing Virtual Network Public IP IDs by Substring - Azure CLI
DESCRIPTION: This query lists the IDs of public IP addresses within virtual networks that contain a specified substring in their IP address. It demonstrates variable usage in different shell environments for filtering.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_7

LANGUAGE: bash
CODE:
```
IP=""20.127""
az network public-ip list --query ""[?ipAddress!=null]|[?contains(ipAddress, '$IP')].[id]"" --output tsv
```

LANGUAGE: powershell
CODE:
```
$IP=""20.127""
az network public-ip list --query ""[?ipAddress!=null]|[?contains(ipAddress, '$IP')].[id]"" --output tsv
```

LANGUAGE: cmd
CODE:
```
Set IP=""20.127""
az network public-ip list --query ""[?ipAddress!=null]|[?contains(ipAddress, '%IP%')].[id]"" --output tsv
```

----------------------------------------

TITLE: Creating Azure Container Registry using az rest PUT (Concrete Example)
DESCRIPTION: These snippets provide concrete examples of creating an Azure Container Registry using the `az rest` command with the PUT method. They define variables and then create a resource group before invoking the `az rest` command with specific parameters. These examples demonstrate a complete, runnable setup for creating an Azure Container Registry.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_1

LANGUAGE: Bash
CODE:
```
# Variable block
let ""randomIdentifier=$RANDOM*$RANDOM""
subscriptionId=""00000000-0000-0000-0000-000000000000""
resourceGroup=""msdocs-app-rg$randomIdentifier""
containerRegistryName=""msdocscr$randomIdentifier""
locationName=""westus""
skuName=""Standard""
propertyValue=""true""

# Create resource group
az group create --name $resourceGroup --location $locationName --output json

# Invoke request
az rest --method put \
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview \
    --body ""{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}""
```

LANGUAGE: PowerShell
CODE:
```
# Variable block
$randomIdentifier = (New-Guid).ToString().Substring(0,8)
$subscriptionId=""00000000-0000-0000-0000-000000000000""
$resourceGroup=""msdocs-app-rg$randomIdentifier""
$containerRegistryName=""msdocscr$randomIdentifier""
$locationName=""westus""
$skuName=""Standard""
$propertyValue=""true""

# Create resource group
az group create --name $resourceGroup --location $locationName --output json
```

----------------------------------------

TITLE: Listing Resource Group Locks
DESCRIPTION: This command retrieves and displays a list of all locks currently applied to a resource group, formatted as a table. It allows administrators to quickly review the protection status of their resource groups.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
az group lock list --output table
```

----------------------------------------

TITLE: Changing the Active Tenant or User with Azure CLI
DESCRIPTION: This snippet demonstrates how to change the active tenant or sign in as a different user using `az login`. The `--user` parameter allows signing in with specific credentials, while `--tenant` switches the context to a different tenant ID, updating the list of accessible subscriptions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
# sign in as a different user
az login --user <myAlias@myCompany.com> --password <myPassword>

# sign in with a different tenant
az login --tenant <myTenantID>
```

----------------------------------------

TITLE: Securely Signing In with Service Principal using PowerShell in Azure CLI
DESCRIPTION: This PowerShell snippet demonstrates a secure sign-in method for service principals. It utilizes the `Get-Credential` cmdlet to securely prompt for the service principal's username and password, then passes these credentials to the `az login` command, preventing the password from being displayed in plain text.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-2.md#_snippet_4

LANGUAGE: PowerShell
CODE:
```
$AzCred = Get-Credential -UserName <app-id>
az login --service-principal -u $AzCred.UserName -p $AzCred.GetNetworkCredential().Password --tenant <tenant>
```

----------------------------------------

TITLE: Registering Azure CLI Tab Completer in PowerShell
DESCRIPTION: This PowerShell script block registers an argument completer for the 'az' command. It leverages 'argcomplete' environment variables to capture completion suggestions from the Azure CLI, processes them, and returns CompletionResult objects. It also cleans up temporary files and environment variables after execution. This enables tab completion for Azure CLI commands within PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/tab-completion.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
Register-ArgumentCompleter -Native -CommandName az -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    $completion_file = New-TemporaryFile
    $env:ARGCOMPLETE_USE_TEMPFILES = 1
    $env:_ARGCOMPLETE_STDOUT_FILENAME = $completion_file
    $env:COMP_LINE = $wordToComplete
    $env:COMP_POINT = $cursorPosition
    $env:_ARGCOMPLETE = 1
    $env:_ARGCOMPLETE_SUPPRESS_SPACE = 0
    $env:_ARGCOMPLETE_IFS = ""\n""
    $env:_ARGCOMPLETE_SHELL = 'powershell'
    az 2>&1 | Out-Null
    Get-Content $completion_file | Sort-Object | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($_, $_, ""ParameterValue"", $_)
    }
    Remove-Item $completion_file, Env:\_ARGCOMPLETE_STDOUT_FILENAME, Env:\ARGCOMPLETE_USE_TEMPFILES, Env:\COMP_LINE, Env:\COMP_POINT, Env:\_ARGCOMPLETE, Env:\_ARGCOMPLETE_SUPPRESS_SPACE, Env:\_ARGCOMPLETE_IFS, Env:\_ARGCOMPLETE_SHELL
}
```

----------------------------------------

TITLE: Retrieving VM Details (Unfiltered)
DESCRIPTION: This command retrieves the full details of an Azure Virtual Machine named 'TestVM' within the 'QueryDemo' resource group. The output is a comprehensive JSON dictionary, which serves as the basis for subsequent queries.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_2

LANGUAGE: bash
CODE:
```
az vm show --resource-group QueryDemo --name TestVM
```

LANGUAGE: powershell
CODE:
```
az vm show --resource-group QueryDemo --name TestVM
```

LANGUAGE: cmd
CODE:
```
az vm show --resource-group QueryDemo --name TestVM
```

----------------------------------------

TITLE: Load Balancing Across Availability Zones - Azure CLI
DESCRIPTION: This snippet provides Azure CLI commands for setting up a load balancer to distribute traffic across virtual machines deployed in different availability zones. It involves creating a VNet, public IP, NSG, NIC, and configuring load balancer rules, probes, and inbound NAT rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_35

LANGUAGE: Azure CLI
CODE:
```
az network lb create
az network lb inbound-nat-rule create
az network lb probe create
az network lb rule create
az network nic create
az network nsg create
az network nsg rule create
az network public-ip create
az network vnet create
az vm create
az vm list
```

----------------------------------------

TITLE: Managing Cosmos DB Regions and Failover with Azure CLI
DESCRIPTION: This snippet demonstrates creating a Cosmos DB account, changing its failover priority, and updating region configurations, enabling multi-region deployments and disaster recovery.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_39

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az cosmosdb failover-priority-change
az cosmosdb update
```

----------------------------------------

TITLE: Setting Default Azure Resource Group (Azure CLI)
DESCRIPTION: This command configures the default resource group for subsequent Azure CLI commands. By setting `defaults.group`, users can omit the `--resource-group` parameter in future commands, streamlining their workflow. The placeholder `<msdocs-tutorial-rg-0000000>` should be replaced with an actual resource group name.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az config set defaults.group=<msdocs-tutorial-rg-0000000>
```

----------------------------------------

TITLE: Setting Default Resource Group in Azure CLI
DESCRIPTION: This command configures a default resource group for subsequent Azure CLI commands. By setting `defaults.group` to `ContosoRGforVM`, all future commands that require a resource group will automatically use this value unless explicitly overridden. This streamlines command execution by reducing the need to repeatedly specify the resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-variables.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az config set defaults.group=ContosoRGforVM
```

----------------------------------------

TITLE: Advanced Azure CLI Error Handling with Try-Catch in PowerShell
DESCRIPTION: This snippet shows a more robust error handling approach for Azure CLI commands in PowerShell using `try` and `catch` blocks. By setting `$ErrorActionPreference` to `Stop` and using `throw` when `$?` indicates a failure, PowerShell can catch non-terminating Azure CLI errors, enabling structured error management.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_25

LANGUAGE: powershell
CODE:
```
$ErrorActionPreference = ""Stop""
try {
    az group create --name MyResourceGroup
    if ($? -eq $false) {
        throw 'Group create failed.'
    }
}
catch {
    Write-Error ""Error creating the resource group.""
}
$ErrorActionPreference = ""Continue""
```

----------------------------------------

TITLE: Creating Azure Storage Account using Azure CLI
DESCRIPTION: This command creates a new Azure Storage account. It uses a randomly generated identifier to ensure a unique name for the storage account. The command specifies the account name, location, resource group, SKU (Standard_LRS for locally redundant storage), and enables blob encryption services.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_17

LANGUAGE: azurecli
CODE:
```
storageAccount=""learnbash$randomIdentifier""
az storage account create --name $storageAccount --location ""$location"" --resource-group $resourceGroup --sku Standard_LRS --encryption-services blob
```

----------------------------------------

TITLE: Running Specific Azure CLI Version in Docker
DESCRIPTION: This command allows running a Docker container with a specific version of the Azure CLI. Users can replace '2.62.0' with their desired version to ensure compatibility or test against a particular CLI release.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/run-azure-cli-docker.md#_snippet_2

LANGUAGE: bash
CODE:
```
docker run -it mcr.microsoft.com/azure-cli:2.62.0-cbl-mariner2.0
```

----------------------------------------

TITLE: Listing Azure Resource Groups - Azure CLI
DESCRIPTION: This command retrieves and displays a list of all resource groups associated with the current Azure subscription. The `--output table` parameter formats the output as a readable table.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az group list --output table
```

----------------------------------------

TITLE: Passing JSON Parameters Correctly in Cmd
DESCRIPTION: Shows the correct way to pass a JSON string as a parameter to an Azure CLI command in Windows Command Prompt (Cmd). It uses double quotes around the entire JSON string, with internal double quotes properly escaped by doubling them.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_6

LANGUAGE: cmd
CODE:
```
az ""{""key"":""value""}"" --debug
```

----------------------------------------

TITLE: Filtering Azure VMs by Disk Size (Bash)
DESCRIPTION: Illustrates how to filter Azure Virtual Machines using a JMESPath query to find VMs with an OS disk size greater than or equal to 50 GB. It extracts the VM name, admin username, and disk size, presenting the output as a table. This example is for future reference.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_17

LANGUAGE: azurecli
CODE:
```
az vm list --resource-group <myResourceGroup> \
           --query ""[?storageProfile.osDisk.diskSizeGb >=\`50\`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb}"" \
           --output table
```

----------------------------------------

TITLE: Sorting Azure VMs by OS Disk Size (JMESPath Function)
DESCRIPTION: This snippet demonstrates using the sort_by JMESPath function to order Azure VM results. It projects the VM name and OS disk size, then sorts the list in ascending order based on the Size property, outputting the result in a table format. The & operator is used to defer evaluation of the sort expression.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_25

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""sort_by([].{Name:name, Size:storageProfile.osDisk.diskSizeGb}, &Size)"" --output table
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""sort_by([].{Name:name, Size:storageProfile.osDisk.diskSizeGb}, &Size)"" --output table
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""sort_by([].{Name:name, Size:storageProfile.osDisk.diskSizeGb}, &Size)"" --output table
```

----------------------------------------

TITLE: Installing Latest Azure CLI with WinGet (PowerShell)
DESCRIPTION: This command installs the latest stable version of the Azure CLI using WinGet. The `--exact` option ensures that the official Microsoft.AzureCLI package is installed, preventing potential conflicts with similarly named packages.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-windows-winget.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
winget install --exact --id Microsoft.AzureCLI
```

----------------------------------------

TITLE: Creating Azure Container Registry with PUT using Azure CLI
DESCRIPTION: This snippet demonstrates how to create or replace an Azure Container Registry using the `az rest` command with a PUT method. It specifies the registry's location, SKU, and administrative user enablement. Dependencies include `$subscriptionId`, `$resourceGroup`, `$containerRegistryName`, `$locationName`, `$skuName`, and `$propertyValue`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az rest --method put `
     --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview `
     --body ""{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}""
```

----------------------------------------

TITLE: Change Server Configurations for Azure PostgreSQL Server (Azure CLI)
DESCRIPTION: This snippet demonstrates Azure CLI commands for managing server configurations of an Azure Database for PostgreSQL server. It covers creating the server, and then listing, setting, and showing specific server configuration parameters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_71

LANGUAGE: Bash
CODE:
```
az postgres server configuration list
az postgres server configuration set
az postgres server configuration show
az postgres server create
```

----------------------------------------

TITLE: Managing Throughput for Cosmos DB Cassandra with Azure CLI
DESCRIPTION: This snippet covers comprehensive throughput management for Azure Cosmos DB Cassandra API, including creating resources, migrating, showing, and updating throughput settings at both keyspace and table levels.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_31

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb cassandra keyspace create
az cosmosdb cassandra keyspace throughput migrate
az cosmosdb cassandra keyspace throughput show
az cosmosdb cassandra keyspace throughput update
az cosmosdb cassandra table create
az cosmosdb cassandra table throughput migrate
az cosmosdb cassandra table throughput show
az cosmosdb cassandra table throughput update
az cosmosdb create
```

----------------------------------------

TITLE: Escaping Special Characters in PowerShell
DESCRIPTION: Shows three correct ways to escape special characters, specifically the `@` symbol, when passing parameters to Azure CLI commands in PowerShell. This can be done by using a backtick (`) before the character or by enclosing the entire value in single or double quotes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_9

LANGUAGE: powershell
CODE:
```
--parameterName `@parameters.json
--parameterName '@parameters.json'
--parameterName ""@parameters.json""
```

----------------------------------------

TITLE: Deleting Azure Container Registry (PowerShell)
DESCRIPTION: This `az rest` command uses the DELETE method to remove an existing Azure Container Registry. In PowerShell, the `containerRegistryName` variable must be enclosed in curly braces due to the question mark in the URL.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_14

LANGUAGE: PowerShell
CODE:
```
az rest --method delete `
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview
```

----------------------------------------

TITLE: Filter Azure Storage Accounts by Creation Time (PowerShell/Linux)
DESCRIPTION: This Azure CLI command filters storage accounts by creation time and renames columns. It uses double quotes for the `--query` parameter with backtick-escaped double quotes for column names, demonstrating how to add a date filter in PowerShell on Linux without changing the overall quoting strategy.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_7

LANGUAGE: azurecli
CODE:
```
az storage account list --query ""[?creationTime >='2024-02-01'].{`""SA Name`"":name, `""Primary endpoint`"":primaryEndpoints.blob}"" --output table
```

----------------------------------------

TITLE: Installing Latest 32-bit Azure CLI with PowerShell
DESCRIPTION: This PowerShell command downloads and silently installs the latest 32-bit version of the Azure CLI on Windows. It first downloads the MSI installer, then executes it silently using msiexec, and finally removes the downloaded MSI file. This command requires PowerShell to be run with administrator privileges.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-windows-msi-powershell.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
$ProgressPreference = 'SilentlyContinue'; Invoke-WebRequest -Uri https://aka.ms/installazurecliwindows -OutFile .\AzureCLI.msi; Start-Process msiexec.exe -Wait -ArgumentList '/I AzureCLI.msi /quiet'; Remove-Item .\AzureCLI.msi
```

----------------------------------------

TITLE: Setting Azure Storage Environment Variables (Azure CLI)
DESCRIPTION: This snippet defines environment variables `AZURE_STORAGE_ACCOUNT` and `AZURE_STORAGE_KEY` using `export` to store authentication credentials. Subsequent `az storage` commands can then implicitly use these variables, as demonstrated by `az storage container list`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_25

LANGUAGE: azurecli
CODE:
```
export AZURE_STORAGE_ACCOUNT=$storageAccount
export AZURE_STORAGE_KEY=$accountKey
az storage container list # Uses the environment variables to display the list of containers.
```

----------------------------------------

TITLE: Configuring Silent Automatic Updates for Azure CLI
DESCRIPTION: This command configures the Azure CLI's automatic update feature to proceed without requiring user confirmation. It prevents interruption of command results in automated flows by suppressing prompts and only displaying warnings and errors during the upgrade process.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/update-azure-cli.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az config set auto-upgrade.prompt=no
```

----------------------------------------

TITLE: Uploading Multiple Blobs to Azure Storage Container (Azure CLI)
DESCRIPTION: This command uploads multiple files matching the pattern ""container_size_sample_file_*.txt"" from the current directory ('.') to the specified Azure Storage container ('$container'). It uses 'az storage blob upload-batch' and requires the storage account name and key for authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_22

LANGUAGE: azurecli
CODE:
```
az storage blob upload-batch \
    --pattern ""container_size_sample_file_*.txt"" \
    --source . \
    --destination $container \
    --account-key $accountKey \
    --account-name $storageAccount
```

----------------------------------------

TITLE: Updating Application Arguments - Azure AD App - Azure CLI
DESCRIPTION: This snippet details the breaking changes for `az ad app create` and `az ad app update` commands. It outlines argument renames, replacements, and removals, reflecting the shift to Microsoft Graph API properties. Key changes include splitting `--reply-urls`, replacing `--homepage` and `--available-to-tenants`, and removing password-related arguments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/microsoft-graph-migration.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
--reply-urls split into --web-redirect-uris and --public-client-redirect-uris
--homepage replaced with --web-home-page-url
--available-to-other-tenants replaced with --sign-in-audience
--native-app replaced with --is-fallback-public-client
--oauth2-allow-implicit-flow replaced with --enable-access-token-issuance
--enable-id-token-issuance added to set web/implicitGrantSettings/enableIdTokenIssuance
--password and --credential-description removed (use az ad app credential reset)
--key-display-name added to set keyCredential's displayName
```

----------------------------------------

TITLE: Managing and Overriding Default Azure CLI Output (Azure CLI)
DESCRIPTION: This script demonstrates how to set a default output format for Azure CLI commands using `az config set` and how to temporarily override it for a specific command using the `--output` parameter. It shows setting to `table`, then overriding to `jsonc`, and finally resetting to `json`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_15

LANGUAGE: Azure CLI
CODE:
```
# set your default output to table
az config set core.output=table

# show your active subscription in table format
# notice how only a subset of properties are returned in the table
az account show

# override your table default and show your active subscription in jsonc format
az account show --output jsonc

# reset your default output to json
```

----------------------------------------

TITLE: Integrating Azure SignalR with App Service (Azure CLI)
DESCRIPTION: This snippet outlines the process of creating an Azure App Service plan and web app, provisioning an Azure SignalR service, and then configuring the web app's settings to connect to SignalR.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_2

LANGUAGE: Bash
CODE:
```
az appservice plan create
az signalr create
az signalr key list
az webapp config appsettings set
az webapp create
```

----------------------------------------

TITLE: Querying Storage Accounts by Name Pattern (Bash)
DESCRIPTION: This command lists Azure storage accounts within a specified resource group whose names contain 'msdocs'. It retrieves the account name, kind, primary location, and creation timestamp, presenting the results in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_5

LANGUAGE: bash
CODE:
```
az storage account list --resource-group $rgName \
                        --query ""[?contains(name, 'msdocs')].{saName:name, saKind:kind, saPrimaryLocation:primaryLocation, createdTimeStamp:creationTime}"" \
                        --output table
```

----------------------------------------

TITLE: Create and Manage Read Replicas for MySQL Flexible Server (Azure CLI)
DESCRIPTION: This script demonstrates how to create and manage read replicas for an Azure Database for MySQL Flexible Server. It includes commands to show account details, create a primary server, configure firewall rules, and then create, list, and stop replication for read replicas.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_80

LANGUAGE: Azure CLI
CODE:
```
az account show
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server firewall-rule create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server replica create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server replica list
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server replica stop-replication
```

----------------------------------------

TITLE: Creating Azure CLI Alias for VM IP with Arguments
DESCRIPTION: This command creates an alias 'get-vm-ip' that takes 'resourceGroup' and 'vmName' as positional arguments. It then uses these arguments to query and return the public IP address of a specified virtual machine.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az alias create \
    --name ""get-vm-ip {{ resourceGroup }} {{ vmName }}"" \
    --command ""vm list-ip-addresses --resource-group {{ resourceGroup }} --name {{ vmName }}
        --query [0].virtualMachine.network.publicIpAddresses[0].ipAddress""
```

----------------------------------------

TITLE: Retrieving Service Principal Credentials and Signing In in Azure CLI
DESCRIPTION: This snippet demonstrates how to dynamically retrieve the `appId` and `tenantID` of an existing service principal by its display name using `az ad sp list`. After retrieving these values, it proceeds to sign in using the service principal, prompting the user to paste the password.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-2.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
spID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{spID:appId}"" --output tsv)
tenantID=$(az ad sp list --display-name myServicePrincipalName --query ""[].{tenant:appOwnerOrganizationId}"" --output tsv)
echo ""Using appId $spID in tenant $tenantID""

az login --service-principal \
         --username $spID \
         --password {paste your password here} \
         --tenant $tenantID
```

----------------------------------------

TITLE: Scale Azure Database for PostgreSQL Server (Azure CLI)
DESCRIPTION: This script provides an example of how to scale an Azure Database for PostgreSQL server. It uses commands to show account details, list monitoring metrics, create a PostgreSQL server, and update its properties to adjust its scale.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_87

LANGUAGE: Azure CLI
CODE:
```
az account show
```

LANGUAGE: Azure CLI
CODE:
```
az monitor metrics list
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server create
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server update
```

----------------------------------------

TITLE: Listing Azure Storage Containers by Prefix and Storing Names (Azure CLI)
DESCRIPTION: This snippet lists Azure storage containers that match a specified prefix (`learnbash`) using `az storage container list`. It queries for only the container names (`--query ""[].name""`) and outputs them as tab-separated values (`--output tsv`), storing the result in the `containerList` variable.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_28

LANGUAGE: azurecli
CODE:
```
containerPrefix=""learnbash""
containerList=$(az storage container list \
    --query ""[].name"" \
    --prefix $containerPrefix \
    --output tsv)
```

----------------------------------------

TITLE: Setting HTTP/HTTPS Proxy Environment Variables in Bash
DESCRIPTION: This snippet demonstrates how to set the HTTP_PROXY and HTTPS_PROXY environment variables in a Bash shell. It provides examples for both no authentication and basic authentication, which are essential for connecting to external resources, including Azure services via Azure CLI, when behind a proxy.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/configure-proxy.md#_snippet_0

LANGUAGE: bash
CODE:
```
# No auth
export HTTP_PROXY=http://[proxy]:[port]
export HTTPS_PROXY=https://[proxy]:[port]

# Basic auth
export HTTP_PROXY=http://[username]:[password]@[proxy]:[port]
export HTTPS_PROXY=https://[username]:[password]@[proxy]:[port]
```

----------------------------------------

TITLE: Configuring Custom NAT Gateway for Azure Container Instances (Azure CLI)
DESCRIPTION: This snippet demonstrates how to deploy Azure Container Instances with a custom NAT Gateway for outbound traffic. It involves creating network resources like NAT gateway, public IP, and updating VNet subnets.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_10

LANGUAGE: Bash
CODE:
```
az container create
az container logs
az network nat gateway create
az network public-ip create
az network public-ip show
az network vnet subnet update
```

----------------------------------------

TITLE: Removing Array Element with Null in Update (Bash)
DESCRIPTION: Shows how to remove the first element of an array (e.g., 'emails') by setting its index to `null` in an update command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_27

LANGUAGE: bash
CODE:
```
az some-update-command --emails [0]=null
```

----------------------------------------

TITLE: Storing Default Azure Subscription ID in Bash Variable
DESCRIPTION: This Bash snippet demonstrates how to capture the ID of the default Azure subscription and store it in a shell variable named `subscriptionId`. It uses `az account list` with a JMESPath query to filter for the default subscription and `tsv` output to extract just the ID, which is then echoed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_3

LANGUAGE: bash
CODE:
```
# store the default subscription in a variable
subscriptionId=""$(az account list --query \""[?isDefault].id\"" --output tsv)""
echo $subscriptionId
```

----------------------------------------

TITLE: Troubleshooting ROPC Login with Azure CLI
DESCRIPTION: This snippet demonstrates the 'az login' command using username and password (ROPC flow). It highlights that this method fails with an 'AADSTS50076' error when Multi-Factor Authentication (MFA) is enabled for the user, as ROPC is not compatible with MFA. The solution is to switch to an MFA-compatible authentication method.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-mfa.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az login --username $username â€“password $password
```

----------------------------------------

TITLE: Querying VMs by Disk Size (Azure CLI)
DESCRIPTION: This example returns the names, admin usernames, and disk sizes of Virtual Machines whose OS disk size is larger than 50 GB. It uses JMESPath filtering and projection, noting special escaping for PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-examples.md#_snippet_7

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=\`50\`].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=``50``].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=\`50\`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

----------------------------------------

TITLE: Creating Azure Container Registry using PUT with az rest (Command Format)
DESCRIPTION: This snippet provides the general command format for creating an Azure Container Registry using the `az rest` command with the PUT HTTP method. It shows placeholders for subscription ID, resource group, container registry name, location, SKU, and admin user enabled property.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Command format example
az rest --method put \
    --url https://management.azure.com/subscriptions/<subscriptionId>/resourceGroups/<resourceGroup>/providers/Microsoft.ContainerRegistry/registries/<containerRegistryName>?api-version=2023-01-01-preview \
    --body ""{'location': '<locationName>', 'sku': {'name': '<skuName>'}, 'properties': {'adminUserEnabled': '<propertyValue>'}}""
```

----------------------------------------

TITLE: Creating and Listing Azure Storage Containers using Azure CLI
DESCRIPTION: This snippet first creates a single Azure Blob Storage container named ""learningbash"" within the previously created storage account, using the retrieved account key for authentication. It then lists all containers in that storage account, querying only their names to verify the creation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_19

LANGUAGE: azurecli
CODE:
```
container=""learningbash""
az storage container create --account-name $storageAccount --account-key $accountKey --name $container

az storage container list --account-name $storageAccount --account-key $accountKey --query [].name
```

----------------------------------------

TITLE: Displaying Active Azure Subscription with Azure CLI
DESCRIPTION: This Azure CLI command retrieves and displays details about the currently active Azure subscription. It is commonly used after logging in to verify the subscription context under which subsequent Azure CLI commands will be executed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli-windows.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az account show
```

----------------------------------------

TITLE: Creating Service Principal Using Variables (Bash)
DESCRIPTION: This Bash snippet demonstrates how to define and use variables to construct the parameters for creating an Azure service principal. It generates a random identifier for the service principal name, sets a placeholder role name, and dynamically retrieves the current subscription ID. This approach promotes reusability and makes scripts more robust and easier to manage.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_5

LANGUAGE: azurecli-interactive
CODE:
```
# Bash script
let ""randomIdentifier=$RANDOM*$RANDOM""
servicePrincipalName=""msdocs-sp-$randomIdentifier""
roleName=""azureRoleName""
subscriptionID=$(az account show --query id --output tsv)
```

----------------------------------------

TITLE: Creating Service Principal with Single Scope (PowerShell)
DESCRIPTION: This PowerShell snippet creates an Azure service principal 'myServicePrincipalName1' with 'reader' permissions for all resources within 'myRG1'. It uses the `az ad sp create-for-rbac` command, demonstrating the syntax without Bash line continuations, which are not needed in PowerShell for this command structure.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-1.md#_snippet_3

LANGUAGE: powershell
CODE:
```
# PowerShell script
az ad sp create-for-rbac --name myServicePrincipalName1 --role reader --scopes /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/myRG1
```

----------------------------------------

TITLE: Setting Individual Shell Variables from Azure CLI Output
DESCRIPTION: This approach allows setting each shell variable separately by running individual Azure CLI queries. It's an alternative to parsing multiple values from a single command, providing more explicit control over variable assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-5.md#_snippet_3

LANGUAGE: azurecli-interactive
CODE:
```
$ipId = az network nic show --ids $nicId --query '[ipConfigurations[].publicIPAddress.id]' -o tsv
$subnetId = az network nic show --ids $nicId --query '[ipConfigurations[].subnet.id]' -o tsv
```

----------------------------------------

TITLE: Passing True Null in Full Value Format (Bash)
DESCRIPTION: Demonstrates how to pass a true `null` value for a property in full value format using the `null` keyword directly without quotes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_23

LANGUAGE: bash
CODE:
```
az some-command --contact ""{name:Bill,age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com],address:null}""
```

----------------------------------------

TITLE: Disabling Azure CLI Telemetry Data Collection
DESCRIPTION: This command disables the collection of telemetry data by the Azure CLI. By default, Azure CLI collects anonymous usage data to help improve the tool. Users can opt out of this data collection using this configuration command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/what-is-azure-cli.md#_snippet_6

LANGUAGE: azurecli
CODE:
```
az config set core.collect_telemetry=false
```

----------------------------------------

TITLE: Generating Random Identifier in Bash
DESCRIPTION: This snippet demonstrates how to generate a sufficiently unique random identifier using Bash's `$RANDOM` function and the `let` command. This helps prevent naming conflicts when creating resources in Azure, especially when running scripts multiple times.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_11

LANGUAGE: azurecli-interactive
CODE:
```
let ""randomIdentifier=$RANDOM*$RANDOM""
```

----------------------------------------

TITLE: Configuring PowerShell Proxy Credentials for Azure CLI
DESCRIPTION: This PowerShell command sets the default network credentials for the proxy, enabling the Azure CLI to connect to Azure services when operating behind a corporate proxy. It ensures proper authentication for outbound connections.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/install-azure-cli-windows.md#_snippet_2

LANGUAGE: powershell
CODE:
```
(New-Object System.Net.WebClient).Proxy.Credentials = `
  [System.Net.CredentialCache]::DefaultNetworkCredentials
```

----------------------------------------

TITLE: Querying SSH Public Keys for a VM
DESCRIPTION: This command queries the `az vm show` output to extract the SSH public keys configured for a Linux VM. It uses dot notation (`.`) to navigate through nested dictionary properties to `osProfile.linuxConfiguration.ssh.publicKeys`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_4

LANGUAGE: bash
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

LANGUAGE: powershell
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

LANGUAGE: cmd
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

----------------------------------------

TITLE: Querying Last Command Result for ID in Azure CLI
DESCRIPTION: This example shows how to use `?? id` to execute a JMESPath query on the output of the immediately preceding Azure CLI command, specifically to extract the 'id' property of the created resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/interactive-azure-cli.md#_snippet_5

LANGUAGE: azurecli-interactive
CODE:
```
az>> group create -n <myResourceGroup> -l westEurope
az>> ""?? id""
```

----------------------------------------

TITLE: Integrating Azure SignalR with App Service (Azure CLI)
DESCRIPTION: This script demonstrates how to create an Azure App Service plan and a web app, then integrate it with an Azure SignalR Service instance. It includes setting application settings to connect the web app to SignalR.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_15

LANGUAGE: Azure CLI
CODE:
```
az appservice plan create
az signalr create
az signalr key list
az webapp config appsettings set
az webapp create
```

----------------------------------------

TITLE: Listing Azure Storage Accounts with Public Blob Access (PowerShell)
DESCRIPTION: This command retrieves the names of Azure storage accounts within the specified resource group that have public blob access enabled. It uses an Azure CLI query to filter accounts where `allowBlobPublicAccess` is true. Requires `rgName` variable to be set.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_7

LANGUAGE: PowerShell
CODE:
```
az storage account list --resource-group $rgName `
                        --query ""[?allowBlobPublicAccess == ``true``].name""
```

----------------------------------------

TITLE: Displaying Azure CLI Command Parameters and Examples
DESCRIPTION: This command shows the full list of parameters, authentication arguments, managed service identity arguments, and usage examples for the `az vm create` command. It's vital for understanding how to construct a command with all its required and optional arguments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-with-azure-cli.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az vm create --help
```

----------------------------------------

TITLE: Assigning Subscription ID to PowerShell Variable (Azure CLI)
DESCRIPTION: This PowerShell script snippet shows how to retrieve the active Azure subscription ID and store it in a PowerShell variable. The `az account show` command, combined with `--query id --output tsv`, provides the ID in a format suitable for direct assignment to `$subscriptionID`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_9

LANGUAGE: azurecli
CODE:
```
# PowerShell script
$subscriptionID = az account show --query id --output tsv
echo ""Using subscription ID $subscriptionID""
```

----------------------------------------

TITLE: Assigning Azure Subscription ID to PowerShell Variable
DESCRIPTION: This PowerShell script snippet retrieves the active Azure subscription ID using `az account show --query id --output tsv` and assigns it to the `$subscriptionID` variable. It then prints the stored ID, demonstrating how to capture and use CLI output in PowerShell scripts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_9

LANGUAGE: PowerShell
CODE:
```
$subscriptionID = az account show --query id --output tsv
echo ""Using subscription ID $subscriptionID""
```

----------------------------------------

TITLE: List Service Principal Role Assignments using Azure CLI
DESCRIPTION: This snippet provides examples of how to verify role assignment changes by listing existing assignments using the `az role assignment list` command. It shows how to list all assignments for the current subscription, for a specific user (service principal), and for a particular subscription, demonstrating different ways to filter the output.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-5.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
# list all role assignments for the current subscription
az role assignment list --output table

# list role assignments for a user
az role assignment list --assignee myUserName@contoso.com

# list role assignments for a subscription
az role assignment list --subscription mySubscriptionID
```

----------------------------------------

TITLE: Updating Azure Container Registry SKU with PATCH (Bash)
DESCRIPTION: This Bash snippet uses `az rest` with the `PATCH` method to update specific properties of an existing Azure Container Registry. It demonstrates how to change the SKU name to 'Premium' by modifying the `--body` parameter. This operation allows for partial updates without replacing the entire resource.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_4

LANGUAGE: Bash
CODE:
```
#Variable Block
$skuName=""Premium""

az rest --method patch \
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview \
    --body ""{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue
```

----------------------------------------

TITLE: Retrieving Azure Storage Account Keys using Azure CLI
DESCRIPTION: This snippet demonstrates how to retrieve storage account keys. The first command lists all key values, while the second specifically retrieves the first key. The third command captures the first key into the accountKey variable, which is then echoed for verification. These keys are essential for authenticating subsequent storage operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_18

LANGUAGE: azurecli
CODE:
```
az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query ""[].value"" -o tsv # returns both storage account key values

az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query ""[0].value"" -o tsv # returns a single storage account key value

accountKey=$(az storage account keys list --resource-group $resourceGroup --account-name $storageAccount --query ""[0].value"" -o tsv)

echo $accountKey
```

----------------------------------------

TITLE: Updating Azure Container Registry SKU with PATCH (PowerShell)
DESCRIPTION: This PowerShell snippet updates an Azure Container Registry's SKU to 'Premium' using `az rest` and the PATCH method. It highlights the need for curly braces around `containerRegistryName` in PowerShell due to variable naming conventions. Prerequisites include defining `$skuName`, `$subscriptionId`, `$resourceGroup`, `$containerRegistryName`, `$locationName`, and `$propertyValue`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_6

LANGUAGE: PowerShell
CODE:
```
#Variable Block
$skuName=""Premium""

az rest --method patch `
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview `
    --body ""{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}""
```

----------------------------------------

TITLE: Sign in with User-Assigned Managed Identity (Object ID) using Azure CLI
DESCRIPTION: This command authenticates to Azure using a user-assigned managed identity by specifying its object ID with the `--object-id` flag. This provides an alternative method to identify a specific user-assigned managed identity for login.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-managed-identity.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az login --identity --object-id <object_id>
```

----------------------------------------

TITLE: Executing Complex Azure CLI Alias
DESCRIPTION: This command executes the 'ls-groups' alias, which was previously defined to list Azure resource groups with specific details in a table format. It demonstrates how a single alias can efficiently trigger a multi-part, complex command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extension-alias.md#_snippet_7

LANGUAGE: azurecli-interactive
CODE:
```
az ls-groups
```

----------------------------------------

TITLE: Creating Azure CLI Alias with Environment Variable
DESCRIPTION: This command creates an alias 'create-rg' that takes a 'groupName' argument and creates a resource group in 'eastus'. It also assigns an 'owner' tag whose value is dynamically set by the 'USER' environment variable at runtime. The dollar sign for the environment variable must be escaped.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
az alias create \
    --name ""create-rg {{ groupName }}"" \
    --command ""group create --name {{ groupName }} --location eastus --tags owner=\$USER""
```

----------------------------------------

TITLE: Preparing Variables for Service Principal Creation (Bash)
DESCRIPTION: This snippet demonstrates how to define and initialize variables in a Bash environment for creating an Azure service principal. It generates a random identifier, constructs a service principal name, sets a placeholder role name, and retrieves the current Azure subscription ID, preparing the necessary inputs for the `az ad sp create-for-rbac` command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-1.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
let ""randomIdentifier=$RANDOM*$RANDOM""
servicePrincipalName=""msdocs-sp-$randomIdentifier""
roleName=""azureRoleName""
subscriptionID=$(az account show --query id --output tsv)
```

----------------------------------------

TITLE: Using Stop-Parsing Symbol (--%) with Azure CLI in PowerShell
DESCRIPTION: This snippet illustrates the use of the `--%` stop-parsing symbol, introduced in PowerShell 3.0, to prevent PowerShell from interpreting subsequent arguments as commands or expressions. This ensures that the Azure CLI command receives the arguments literally, which is useful for complex or sensitive inputs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_23

LANGUAGE: azurecli
CODE:
```
az --% vm create --name xxx
```

----------------------------------------

TITLE: Signing Out of Azure CLI
DESCRIPTION: Logs the current user out of Azure CLI, terminating the active session and removing cached credentials. This command is used to end an Azure CLI session.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-interactively.md#_snippet_8

LANGUAGE: azurecli-interactive
CODE:
```
az logout
```

----------------------------------------

TITLE: Using Single Quotes for Partial Value Shorthand with Special Characters in Azure CLI
DESCRIPTION: Demonstrates how to apply single quotes to individual string values within partial value shorthand syntax in Azure CLI. This ensures that strings with spaces or special characters are treated literally.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_11

LANGUAGE: Bash
CODE:
```
az some-command --contact name=""'Bill RP'"" data=""'{a: [1, 2]}'""
```

----------------------------------------

TITLE: Deleting Resource Group Asynchronously with Azure CLI
DESCRIPTION: This command deletes an Azure resource group and all its contained resources without waiting for the operation to complete. The --no-wait parameter allows the console to accept new commands immediately.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_10

LANGUAGE: Azure CLI
CODE:
```
az group delete --name MyResourceGroup --no-wait
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Relative Date (PowerShell)
DESCRIPTION: Illustrates filtering Azure Storage Accounts based on a relative date by calculating a date 30 days prior using a PowerShell variable. The query then retrieves storage accounts created after this calculated date, demonstrating dynamic date filtering in PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_27

LANGUAGE: azurecli-interactive
CODE:
```
$saDate=$saDate.AddDays(-30).tostring(""yyyy-mm-dd"")
az storage account list --resource-group <msdocs-tutorial-rg-00000000> `
    --query ""[?creationTime >='$saDate'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Querying Storage Accounts by Creation Date (PowerShell)
DESCRIPTION: This PowerShell snippet retrieves Azure storage accounts created in the last 30 days. It calculates the past date using `Get-Date` and `AddDays`, then queries accounts in a resource group, filtering by `creationTime` and displaying name and creation timestamp in a table.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_7

LANGUAGE: powershell
CODE:
```
$saDate=Get-Date
$saDate=$saDate.AddDays(-30).tostring(""yyyy-mm-dd"")
az storage account list --resource-group $rgName `
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" `
                        --output table
```

----------------------------------------

TITLE: Retrieving VM Admin Username with Azure CLI (TSV Output)
DESCRIPTION: This snippet shows how to retrieve the administrator username of an Azure VM using 'az vm show' with a JMESPath query and the '--output tsv' flag. The 'tsv' format prevents enclosing return values with type information, making it suitable for scripting.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_19

LANGUAGE: bash
CODE:
```
USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"" --output tsv)
echo $USER
```

LANGUAGE: powershell
CODE:
```
$USER=$(az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"" --output tsv)
echo $USER
```

LANGUAGE: cmd
CODE:
```
FOR /f %i IN ('az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername"" --output tsv') DO SET USER=%i
echo %USER%
```

----------------------------------------

TITLE: Unsetting Object Property with Null in Update (Bash)
DESCRIPTION: Demonstrates using `address=null` in an update command to reset or unset the 'address' property of the 'contact' object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_26

LANGUAGE: bash
CODE:
```
az some-update-command --contact address=null
```

----------------------------------------

TITLE: Querying Last Command Result for ID in Azure CLI
DESCRIPTION: Shows how to execute a JMESPath query using `??` to extract specific data, such as the 'id', from the JSON output of the immediately preceding Azure CLI command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/interactive-azure-cli.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az>> group create -n <myResourceGroup> -l westEurope
az>> ""?? id""
```

----------------------------------------

TITLE: Backup and Restore Azure MariaDB Server - Azure CLI
DESCRIPTION: This snippet outlines the Azure CLI commands for performing backup and point-in-time restore operations for an Azure MariaDB server. It includes creating a MariaDB server and then restoring it from a backup.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_39

LANGUAGE: Azure CLI
CODE:
```
az mariadb server create
az mariadb server restore
```

----------------------------------------

TITLE: Backing Up and Restoring Azure MySQL Server (Azure CLI)
DESCRIPTION: This script demonstrates how to create an Azure MySQL server and then perform a point-in-time restore operation, essential for disaster recovery.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_66

LANGUAGE: Bash
CODE:
```
az mysql server create
az mysql server restore
```

----------------------------------------

TITLE: Checking Azure CLI Version and Extensions (Azure CLI)
DESCRIPTION: This command is used to check the currently installed version of Azure CLI and list any installed extensions. It's a crucial first step before migrating to a new version or troubleshooting.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/install-azure-cli-windows.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az --version
```

----------------------------------------

TITLE: Handling Empty String Parameters
DESCRIPTION: Illustrates how to correctly define empty string parameters in Bash and PowerShell for Azure CLI commands. In Bash and PowerShell, `""''""` is used. Additionally, PowerShell allows `'''` for an empty quoted string.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_7

LANGUAGE: bash
CODE:
```
myVariable=""''""
```

LANGUAGE: powershell
CODE:
```
$myVariable = ""''""
$myVariable = '""""'
```

----------------------------------------

TITLE: Checking Azure CLI and PowerShell Versions
DESCRIPTION: This snippet demonstrates how to check the installed versions of Azure CLI and PowerShell. `az version` provides details about the Azure CLI installation, while `$PSVersionTable` outputs detailed information about the PowerShell environment, including its version, edition, and build.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_0

LANGUAGE: powershell
CODE:
```
az version

$PSVersionTable
```

----------------------------------------

TITLE: Getting the Active Tenant ID with Azure CLI
DESCRIPTION: These commands retrieve the active tenant ID. `az account tenant list` lists all tenants accessible to the current user, while `az account show` displays details of the current active subscription, including its associated tenant ID.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az account tenant list

az account show
```

----------------------------------------

TITLE: Disabling Telemetry Data Collection in Azure CLI
DESCRIPTION: This command disables the collection of telemetry data by the Azure CLI. By default, the CLI collects anonymous usage data to help Microsoft improve the tool. Users can opt out of this data collection for privacy reasons or compliance requirements.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/what-is-azure-cli.md#_snippet_8

LANGUAGE: azurecli
CODE:
```
az config set core.collect_telemetry=false
```

----------------------------------------

TITLE: Incorrect JMESPath Query Quoting in Bash
DESCRIPTION: Demonstrates an incorrect way to quote a JMESPath query in Bash, leading to an 'invalid jmespath_type' error. Bash interprets the double quotes, preventing the JMESPath engine from receiving the necessary quoted string for 'azure-cli'.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_11

LANGUAGE: azurecli
CODE:
```
az version --query ""azure-cli""
```

----------------------------------------

TITLE: Example Azure CLI Configuration File Settings
DESCRIPTION: This INI-formatted configuration file snippet demonstrates how to customize Azure CLI behavior. It shows how to disable confirmation prompts under the `[core]` section and configure logging, including enabling log files and specifying the `log_dir`, under the `[logging]` section.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-configuration.md#_snippet_3

LANGUAGE: ini
CODE:
```
[core]
disable_confirm_prompt=Yes

[logging]
enable_log_file=yes
log_dir=/var/log/azure
```

----------------------------------------

TITLE: Saving Running VM IDs to Variable and Stopping in PowerShell
DESCRIPTION: This PowerShell script fetches the IDs of all running VMs within the `VMResources` resource group and assigns them to the `$vm_ids` variable. It then uses this variable to stop all the collected VMs simultaneously with a single `az vm stop` command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_13

LANGUAGE: azurecli
CODE:
```
$vm_ids=(az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv)
az vm stop --ids $vm_ids # CLI stops all VMs in parallel
```

----------------------------------------

TITLE: Listing Azure Subscription Locks (Azure CLI)
DESCRIPTION: This command lists all active locks applied to the current Azure subscription. The output is formatted as a table for readability, showing details like lock name, type, and scope.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_15

LANGUAGE: azurecli-interactive
CODE:
```
az account lock list --output table
```

----------------------------------------

TITLE: Listing Azure Storage Accounts by Creation Date (PowerShell)
DESCRIPTION: This snippet lists Azure storage accounts created in the last 30 days. It calculates the date using PowerShell's `Get-Date` and `AddDays` methods, then queries storage accounts, displaying their names and creation timestamps in a table format. Requires `rgName` variable to be set.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_8

LANGUAGE: PowerShell
CODE:
```
$saDate=Get-Date
$saDate=$saDate.AddDays(-30).tostring(""yyyy-mm-dd"")
az storage account list --resource-group $rgName `
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" `
                        --output table
```

----------------------------------------

TITLE: Creating Azure MySQL Server and Firewall Rule using Azure CLI
DESCRIPTION: This script creates a new Azure Database for MySQL server and configures a firewall rule to control network access. It uses `az mysql server create` and `az mysql server firewall-rule create` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_55

LANGUAGE: Azure CLI
CODE:
```
az mysql server create
az mysql server firewall-rule create
```

----------------------------------------

TITLE: Listing VMs with Custom Properties (Table Output)
DESCRIPTION: This snippet lists all VMs in a resource group, extracting their name, OS type, and administrator username, and presents the output in an ASCII table format. This format is optimized for human readability and quick scanning of data.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_24

LANGUAGE: bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, Admin:osProfile.adminUsername}"" --output table
```

LANGUAGE: powershell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, Admin:osProfile.adminUsername}"" --output table
```

LANGUAGE: cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, Admin:osProfile.adminUsername}"" --output table
```

----------------------------------------

TITLE: Creating an Azure SQL Database using Azure CLI
DESCRIPTION: This snippet illustrates how to create an Azure SQL database within an existing Azure SQL server using the `az sql db create` command. It sets variables for the resource group, server name, database name, and service objective, which are then passed as arguments to the command. This operation depends on a previously created Azure SQL server.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-copilot.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
# Variable block
resourceroup= ""myResourceGroup""
serverName=""myServerName""
databaseName=""myDatabaseName""
serviceObjective=""basic""

az sql db create --resource-group $resourceGroup --server $serverName --name $databaseName --service-objective $serviceObjective
```

----------------------------------------

TITLE: Upgrading Azure CLI Interactive Extension for AI Features
DESCRIPTION: This command upgrades the Azure CLI interactive extension to its latest version, enabling access to new AI functionalities such as intelligent completion, command recommendation, scenario identification, and usable knowledge search. It is a prerequisite for utilizing the advanced AI features.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/interactive-azure-cli.md#_snippet_10

LANGUAGE: azurecli-interactive
CODE:
```
az extension add --name interactive --upgrade
```

----------------------------------------

TITLE: Launching Azure CLI Interactive Mode
DESCRIPTION: This command initiates the Azure CLI interactive shell, providing features like autocompletion, command descriptions, and examples for an enhanced learning and usage experience.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/interactive-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az interactive
```

----------------------------------------

TITLE: Deploy Azure Function App with GitHub Continuous Deployment (Azure CLI)
DESCRIPTION: This script creates an Azure Function App and configures continuous deployment from a GitHub repository. It provisions a storage account and updates the deployment source token for automated deployments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_12

LANGUAGE: Bash
CODE:
```
az functionapp create
az functionapp deployment source update-token
az storage account create
```

----------------------------------------

TITLE: Managing and Overriding Default Azure CLI Output Formats (Azure CLI)
DESCRIPTION: This script demonstrates how to set a default output format for Azure CLI commands using `az config set` and how to override it for specific commands using the `--output` parameter. It shows setting `table`, displaying account info, overriding to `jsonc`, and finally resetting to `json`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_15

LANGUAGE: azurecli-interactive
CODE:
```
# set your default output to table
az config set core.output=table

# show your active subscription in table format
# notice how only a subset of properties are returned in the table
az account show

# override your table default and show your active subscription in jsonc format
az account show --output jsonc

# reset your default output to json
az config set core.output=json
```

----------------------------------------

TITLE: Enabling Dynamic Install Without Prompt for Azure CLI
DESCRIPTION: This command enables the dynamic install feature for Azure CLI extensions without requiring a user prompt, allowing extensions to be installed silently when their commands are executed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extensions-overview.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az config set extension.use_dynamic_install=yes_without_prompt
```

----------------------------------------

TITLE: Filtering Azure VMs by Storage Account Type using `contains` (Bash)
DESCRIPTION: This example uses the JMESPath `contains` function to find Azure VMs whose OS disk's managed disk storage account type includes 'SSD'. It demonstrates how JMESPath expressions are evaluated as arguments before the function call, retrieving the VM name and storage type.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_22

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[?contains(storageProfile.osDisk.managedDisk.storageAccountType,'SSD')].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType}""
```

----------------------------------------

TITLE: Create Azure Function App on Premium Plan (Azure CLI)
DESCRIPTION: This script creates an Azure Function App hosted on a Premium plan, offering enhanced performance and VNet connectivity. It also provisions a storage account as a prerequisite for the function app.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_11

LANGUAGE: Bash
CODE:
```
az functionapp create
az functionapp plan create
az storage account create
```

----------------------------------------

TITLE: Sample Output of az vm show Command
DESCRIPTION: Partial JSON output from the `az vm show` command, demonstrating the dictionary structure with nested properties like `diagnosticsProfile` and `osProfile`. This output serves as the basis for subsequent queries.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_31

LANGUAGE: JSON
CODE:
```
{
  ""additionalCapabilities"": null,
  ""availabilitySet"": null,
  ""diagnosticsProfile"": {
    ""bootDiagnostics"": {
      ""enabled"": true,
      ""storageUri"": ""https://xxxxxx.blob.core.windows.net/""
    }
  },
  ...
  ""osProfile"": {
    ""adminPassword"": null,
    ""adminUsername"": ""azureuser"",
    ""allowExtensionOperations"": true,
    ""computerName"": ""TestVM"",
    ""customData"": null,
    ""linuxConfiguration"": {
      ""disablePasswordAuthentication"": true,
      ""provisionVmAgent"": true,
      ""ssh"": {
        ""publicKeys"": [
          {
            ""keyData"": ""ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMobZNJTqgjWn/IB5xlilvE4Y+BMYpqkDnGRUcA0g9BYPgrGSQquCES37v2e3JmpfDPHFsaR+CPKlVr2GoVJMMHeRcMJhj50ZWq0hAnkJBhlZVWy8S7dwdGAqPyPmWM2iJDCVMVrLITAJCno47O4Ees7RCH6ku7kU86b1NOanvrNwqTHr14wtnLhgZ0gQ5GV1oLWvMEVg1YFMIgPRkTsSQKWCG5lLqQ45aU/4NMJoUxGyJTL9i8YxMavaB1Z2npfTQDQo9+womZ7SXzHaIWC858gWNl9e5UFyHDnTEDc14hKkf1CqnGJVcCJkmSfmrrHk/CkmF0ZT3whTHO1DhJTtV stramer@contoso"",
            ""path"": ""/home/azureuser/.ssh/authorized_keys""
          }
        ]
      }
    },
    ""secrets"": [],
    ""windowsConfiguration"": null
  },
  ....
}
```

----------------------------------------

TITLE: Managing Azure Subscriptions with Azure CLI
DESCRIPTION: This snippet demonstrates how to view your current Azure subscription, list all available subscriptions, and change your active subscription using its name or ID. This is crucial for ensuring that subsequent Azure CLI commands operate within the correct subscription context.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
# see your current/default subscription
az account show

# find the list of subscriptions available to you
az account list --output table

# change your current/default subscription
az account set --subscription <mySubscriptionName>

# you can also set your subscription using a subscription ID
az account set --subscription <00000000-0000-0000-0000-000000000000>
```

----------------------------------------

TITLE: Create and Manage Azure Redis Premium Cache Cluster (Azure CLI)
DESCRIPTION: This snippet demonstrates Azure CLI commands for creating and managing an Azure Cache for Redis Premium tier instance with clustering. It includes commands to create the premium Redis cache, delete it, list its access keys, and show its properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_77

LANGUAGE: Bash
CODE:
```
az redis create
az redis delete
az redis list-keys
az redis show
```

----------------------------------------

TITLE: Passing JSON Parameters Correctly in Bash
DESCRIPTION: Demonstrates two correct ways to pass a JSON string as a parameter to an Azure CLI command in Bash. The first uses single quotes around the entire JSON string, while the second uses double quotes and escapes internal double quotes with backslashes. Both methods ensure the JSON is interpreted as a single argument.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_4

LANGUAGE: bash
CODE:
```
az '{""key"":""value""}' --debug
az ""{\""key\"":\""value\""}"" --debug
```

----------------------------------------

TITLE: Verify Azure Role Assignments with Azure CLI
DESCRIPTION: This snippet provides examples of how to verify role assignments using the `az role assignment list` command in Azure CLI. It shows how to list all assignments for the current subscription, for a specific user, and for a particular subscription, allowing users to confirm changes made to service principal roles.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-5.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
# list all role assignments for the current subscription
az role assignment list --output table

# list role assignments for a user
az role assignment list --assignee myUserName@contoso.com

# list role assignments for a subscription
az role assignment list --subscription mySubscriptionID
```

----------------------------------------

TITLE: Correct JMESPath Query Quoting in Cmd
DESCRIPTION: Illustrates two correct ways to quote JMESPath queries for the Azure CLI when executing commands in the Windows Command Prompt (Cmd), accommodating its unique escaping requirements.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_13

LANGUAGE: azurecli
CODE:
```
az version --query ""\""azure-cli\""""
```

LANGUAGE: azurecli
CODE:
```
az version --query \""azure-cli\""
```

----------------------------------------

TITLE: Configuring Autoscale for Cassandra Cosmos DB Keyspace and Table (Azure CLI)
DESCRIPTION: This snippet demonstrates how to create a Cassandra keyspace and table with autoscale settings enabled using Azure CLI. It involves creating the Cosmos DB account, then defining the keyspace and table.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_14

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb cassandra keyspace create
az cosmosdb cassandra table create
az cosmosdb create
```

----------------------------------------

TITLE: Overriding Default Resource Group for Specific Commands
DESCRIPTION: These commands illustrate how to explicitly specify a different resource group for a command, even when a default is set. The first command creates a new resource group, and the second creates a storage account within a different, explicitly named resource group, `StorageGroups`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-groups-azure-cli.md#_snippet_9

LANGUAGE: azurecli
CODE:
```
az group create --name OtherResourceGroup --location eastus
az storage account create --resource-group StorageGroups --name storage03  --location westus --sku Standard_LRS
```

----------------------------------------

TITLE: Filtering Azure VMs by Disk Size (>=50GB) in Bash
DESCRIPTION: This snippet filters Azure VMs to display those with an OS disk size of 50 GB or more. It uses a JMESPath query to select the VM name, admin username, and disk size, noting the required backtick escaping for numerical values in Bash.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_19

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=`50`].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

----------------------------------------

TITLE: Installing Specific Azure CLI Version with WinGet (PowerShell)
DESCRIPTION: This command installs a specific version of the Azure CLI using WinGet. The `--version` flag allows users to specify a desired version, such as '2.67.0', which is useful for maintaining compatibility or testing specific releases.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-windows-winget.md#_snippet_1

LANGUAGE: PowerShell
CODE:
```
winget install --exact --id Microsoft.AzureCLI --version 2.67.0
```

----------------------------------------

TITLE: Installing Specific Azure CLI Version (Bash)
DESCRIPTION: This command installs a particular version of the Azure CLI package. Users must replace `<version>` with the exact version string obtained from `dnf list --showduplicates azure-cli`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-linux-dnf.md#_snippet_6

LANGUAGE: Bash
CODE:
```
sudo dnf install azure-cli-<version>-1.el7
```

----------------------------------------

TITLE: Query Microsoft Entra Service Principal Read Permissions (Azure CLI)
DESCRIPTION: This example shows how to find the ID of the first Microsoft Graph application service principal that possesses the 'User.Read.All' permission and is applicable to applications. It uses `az ad sp list` with a complex JMESPath query to filter `appRoles` and output the ID in TSV format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_1

LANGUAGE: Bash
CODE:
```
az ad sp list --display-name ""Microsoft Graph"" --query ""[0].appRoles[?value=='User.Read.All' && contains(allowedMemberTypes, 'Application')].id"" --output tsv
```

LANGUAGE: PowerShell
CODE:
```
az ad sp list --display-name ""Microsoft Graph"" --query ""[0].appRoles[?value=='User.Read.All' && contains(allowedMemberTypes, 'Application')].id"" --output tsv
```

LANGUAGE: Cmd
CODE:
```
az ad sp list --display-name ""Microsoft Graph"" --query ""[0].appRoles[?value=='User.Read.All' && contains(allowedMemberTypes, 'Application')].id"" --output tsv
```

----------------------------------------

TITLE: Creating Azure Storage Account in Cmd
DESCRIPTION: This snippet shows how to create an Azure Storage Account using the Azure CLI in a Windows Command Prompt (Cmd) environment. It sets environment variables for location, resource group, and a unique storage account name, then executes the `az storage account create` command, using the caret `^` for line continuation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_5

LANGUAGE: Cmd
CODE:
```
:: Variable block
set randomIdentifier=%RANDOM%
set location=""eastus""
set resourceGroup=""<msdocs-tutorial-rg-00000000>""
set storageAccount=""msdocssa%randomIdentifier%""

:: Create a storage account.
echo ""Creating storage account %storageAccount% in resource group %resourceGroup%""
az storage account create --name %storageAccount% ^
                          --resource-group %resourceGroup% ^
                          --location %location% ^
                          --sku Standard_RAGRS ^
                          --kind StorageV2 ^
                          --output json
```

----------------------------------------

TITLE: Sample CSV Input File for Azure Resource Creation
DESCRIPTION: This CSV file serves as input for the Azure CLI script, defining parameters for resource creation such as location, resource group creation flags, virtual network details, VM image, public IP SKU, and admin user. Users must replace 'myExistingResourceGroupName' with an actual resource group name and ensure a newline character at the end for Bash compatibility.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/create-azure-resources-at-scale.md#_snippet_0

LANGUAGE: CSV
CODE:
```
resourceNo,location,createRG,exstingRgName,createVnet,vnetAddressPrefix,subnetAddressPrefixes,vmImage,publicIpSku,Adminuser
1,eastus,TRUE,,TRUE,10.0.0.0/16,10.0.0.0/24,Ubuntu2204,standard,
2,eastus2,TRUE,,FALSE,,,Debian11,standard,alex-smith
3,southcentralus,FALSE,myExistingResourceGroupName,FALSE,,,Ubuntu2204,standard,jan-smith
[empty line for Bash]
```

----------------------------------------

TITLE: Syntax for Creating Azure CLI Aliases with Positional Arguments
DESCRIPTION: This snippet illustrates the general syntax for defining an Azure CLI alias that accepts positional arguments. Arguments are enclosed in double curly braces with whitespace, allowing them to be dynamically passed to the underlying command during execution.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extension-alias.md#_snippet_8

LANGUAGE: azurecli-interactive
CODE:
```
az alias create --name ""alias_name {{ arg1 }} {{ arg2 }} ..."" --command ""invoke_including_args""
```

----------------------------------------

TITLE: Looping Through Running VM IDs and Stopping Individually in Cmd
DESCRIPTION: This Cmd script iterates through each running VM ID in the `VMResources` resource group. For each VM, it prints a ""Stopping"" message and then issues an `az vm stop` command to stop that specific VM individually.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_14

LANGUAGE: azurecli
CODE:
```
ECHO OFF
SETLOCAL
FOR /F ""tokens=* USEBACKQ"" %%F IN (
    `az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv`
) DO (
    ECHO Stopping %%F
    az vm stop --ids %%F
)
```

----------------------------------------

TITLE: Listing Azure VMs in YAML Format with Azure CLI
DESCRIPTION: This command retrieves a list of Azure virtual machines and formats the output as YAML. YAML is a human-readable data serialization format that is often easier to parse than JSON and is frequently used for configuration inputs. The example output demonstrates the hierarchical structure of VM properties in YAML, similar to JSON but with different syntax.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az vm list --output yaml
```

----------------------------------------

TITLE: Securely Prompting for Azure Password in Bash
DESCRIPTION: Demonstrates how to securely prompt for an Azure password in a Bash terminal using `read -s` to prevent the password from being displayed. The password is then passed to `az login`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-interactively.md#_snippet_4

LANGUAGE: bash
CODE:
```
read -sp ""Azure password: "" AZ_PASS && echo && az login -u <username> -p $AZ_PASS
```

----------------------------------------

TITLE: Creating and Listing Azure Storage Container (Azure CLI)
DESCRIPTION: This snippet first creates a single Azure Storage container named ""learningbash"" within the specified storage account, using the previously retrieved 'accountKey'. It then lists all containers in that storage account, querying only their names to verify the creation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_20

LANGUAGE: azurecli
CODE:
```
container=""learningbash""
az storage container create --account-name $storageAccount --account-key $accountKey --name $container

az storage container list --account-name $storageAccount --account-key $accountKey --query [].name
```

----------------------------------------

TITLE: Passing Space-Separated Key-Value Pairs
DESCRIPTION: Illustrates how to pass space-separated key-value pairs to Azure CLI commands, especially when keys or values contain spaces. It demonstrates wrapping each `key=value` pair in double quotes to ensure it's treated as a single argument.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-quoting.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az web app config app settings set --resource-group myResourceGroup --name myWebAppName --settings ""client id=id1"" ""my name=john""
```

----------------------------------------

TITLE: Querying SSH Public Keys (PowerShell)
DESCRIPTION: Demonstrates how to use an Azure CLI query to extract specific nested data, such as SSH public keys, from the `az vm show` command's JSON output. The query `osProfile.linuxConfiguration.ssh.publicKeys` navigates through dictionary properties. This example is for PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_33

LANGUAGE: Azure CLI
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

----------------------------------------

TITLE: Displaying Current Azure CLI Subscription
DESCRIPTION: This command is used to display the details of the currently active Azure subscription in your Azure CLI session. The `--output table` parameter formats the output as a human-readable table, making it easy to view key subscription information such as name, ID, and state.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-variables.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az account show --output table
```

----------------------------------------

TITLE: Converting PKCS12 File to PEM Format (OpenSSL)
DESCRIPTION: This OpenSSL command converts an existing PKCS#12 (.p12) certificate file into a PEM (.pem) format. It extracts the client certificates and private key without encryption, making it suitable for direct use in applications requiring PEM format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-3.md#_snippet_10

LANGUAGE: OpenSSL
CODE:
```
openssl pkcs12 -in fileName.p12 -clcerts -nodes -out fileName.pem -passin pass: -passout pass:
```

----------------------------------------

TITLE: Converting Existing PKCS#12 File to PEM Format (OpenSSL)
DESCRIPTION: This OpenSSL command converts an existing PKCS#12 (.p12) file into a PEM format file, which is often required for various authentication and encryption purposes. Users should adjust the `passin` argument if their PKCS#12 file is password-protected.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_11

LANGUAGE: console
CODE:
```
openssl pkcs12 -in fileName.p12 -clcerts -nodes -out fileName.pem -passin pass: -passout pass:
```

----------------------------------------

TITLE: Querying Azure VM SSH Public Keys with JMESPath
DESCRIPTION: This command retrieves specific information about an Azure virtual machine, specifically the SSH public keys configured for Linux. It utilizes the `--query` global parameter with a JMESPath expression to filter and extract only the `osProfile.linuxConfiguration.ssh.publicKeys` data from the command's JSON output. This is useful for extracting targeted data from verbose command results, providing only the relevant security configuration.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-global-parameters.md#_snippet_7

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --resource-group myResourceGroup --name myVm --query ""osProfile.linuxConfiguration.ssh.publicKeys""
```

----------------------------------------

TITLE: Listing Blobs in Azure Storage Container (Azure CLI)
DESCRIPTION: This command lists all blobs within a specified Azure Storage container. It uses 'az storage blob list' and queries only the names of the blobs. It requires the container name, storage account key, and storage account name for authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_23

LANGUAGE: azurecli
CODE:
```
az storage blob list \
    --container-name $container \
    --account-key $accountKey \
    --account-name $storageAccount \
    --query ""[].name""
```

----------------------------------------

TITLE: Listing Azure Storage Account Keys using Azure CLI
DESCRIPTION: This snippet demonstrates how to retrieve the access keys for an Azure Storage account using the Azure CLI. These keys are essential for authenticating applications or services to the storage account. The command requires the `--resource-group` where the storage account resides and the `--account-name` of the storage account.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-6.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az storage account keys list --resource-group myResourceGroupName \
                                 --account-name myStorageAccountName
```

----------------------------------------

TITLE: Updating Azure CLI with Homebrew on macOS
DESCRIPTION: This command updates the Homebrew repository information and then upgrades the `azure-cli` package to its latest version. It is the standard and recommended way to keep your Azure CLI installation up to date on macOS, ensuring you have the latest features and bug fixes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli-macos.md#_snippet_3

LANGUAGE: bash
CODE:
```
brew update && brew upgrade azure-cli
```

----------------------------------------

TITLE: Scale Azure Database for MySQL Server (Azure CLI)
DESCRIPTION: This script provides an example of how to scale an Azure Database for MySQL server. It uses commands to show account details, list monitoring metrics, create a MySQL server, and update its properties to adjust its scale.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_81

LANGUAGE: Azure CLI
CODE:
```
az account show
```

LANGUAGE: Azure CLI
CODE:
```
az monitor metrics list
```

LANGUAGE: Azure CLI
CODE:
```
az mysql server create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql server update
```

----------------------------------------

TITLE: Creating Azure Container Registry with PUT (Azure CLI)
DESCRIPTION: This command uses `az rest` with the `PUT` method to create or replace an Azure Container Registry. It specifies the resource URL, API version, and a JSON body containing the location, SKU name, and admin user enabled status. This operation is idempotent, creating the resource if it doesn't exist or replacing it if it does.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az rest --method put `
     --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview `
     --body ""{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}""
```

----------------------------------------

TITLE: Filtering Azure VMs by OS Type (Linux) in Cmd
DESCRIPTION: This example illustrates how to filter Azure Virtual Machines in the 'QueryDemo' resource group to retrieve only Linux VMs. It uses a JMESPath query to project the VM's name and admin username into a table, suitable for Command Prompt execution.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_18

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.osType=='Linux'].{Name:name,  admin:osProfile.adminUsername}"" --output table
```

----------------------------------------

TITLE: Enabling Azure CLI Tab Completion in PowerShell
DESCRIPTION: This PowerShell script block registers an argument completer for the `az` command, enabling tab completion for Azure CLI. It sets various environment variables to interact with `argcomplete` and then processes the completion results, cleaning up temporary files and environment variables afterward. This allows for automatic insertion of command names, groups, parameters, and values.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/tab-completion.md#_snippet_0

LANGUAGE: PowerShell
CODE:
```
Register-ArgumentCompleter -Native -CommandName az -ScriptBlock {
    param($commandName, $wordToComplete, $cursorPosition)
    $completion_file = New-TemporaryFile
    $env:ARGCOMPLETE_USE_TEMPFILES = 1
    $env:_ARGCOMPLETE_STDOUT_FILENAME = $completion_file
    $env:COMP_LINE = $wordToComplete
    $env:COMP_POINT = $cursorPosition
    $env:_ARGCOMPLETE = 1
    $env:_ARGCOMPLETE_SUPPRESS_SPACE = 0
    $env:_ARGCOMPLETE_IFS = ""`n""
    $env:_ARGCOMPLETE_SHELL = 'powershell'
    az 2>&1 | Out-Null
    Get-Content $completion_file | Sort-Object | ForEach-Object {
        [System.Management.Automation.CompletionResult]::new($_, $_, ""ParameterValue"", $_)
    }
    Remove-Item $completion_file, Env:\_ARGCOMPLETE_STDOUT_FILENAME, Env:\ARGCOMPLETE_USE_TEMPFILES, Env:\COMP_LINE, Env:\COMP_POINT, Env:\_ARGCOMPLETE, Env:\_ARGCOMPLETE_SUPPRESS_SPACE, Env:\_ARGCOMPLETE_IFS, Env:\_ARGCOMPLETE_SHELL
}
```

----------------------------------------

TITLE: Displaying VM Details (Azure CLI)
DESCRIPTION: This command displays the detailed properties of a specific virtual machine. It is useful for understanding the current configuration and identifying properties that can be updated using `--set` or `--add` parameters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az vm show --resource-group VMResources --name virtual-machine-01
```

----------------------------------------

TITLE: Listing Azure VMs with Table Output Format
DESCRIPTION: This command lists all virtual machines within a specified resource group. The `--output table` global parameter formats the command's output as a human-readable table, which is useful for quick overviews. Other accepted output formats include json, jsonc, none, tsv, yaml, and yamlc.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az vm list --resource-group myResourceGroup --output table
```

----------------------------------------

TITLE: Attaching Data Disk to VM with JSON String (Azure CLI)
DESCRIPTION: This snippet demonstrates how to attach a new data disk to an existing virtual machine using `az vm update` and a JSON string. The JSON string specifies the disk's creation option, managed disk ID, and LUN, allowing complex updates.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_6

LANGUAGE: azurecli
CODE:
```
az vm update --resource-group VMResources --name virtual-machine-01 \
--add storageProfile.dataDisks ""{\""createOption\"": \""Attach\"", \""managedDisk\"":\
   {\""id\"":\
   \""/subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/yg/providers/Microsoft.Compute/disks/yg-disk\""},\n   \""lun\"": 1}""
```

----------------------------------------

TITLE: Create and Manage Azure Redis Cache (Azure CLI)
DESCRIPTION: This snippet outlines Azure CLI commands for creating and managing an Azure Cache for Redis instance. It includes commands to create the Redis cache, delete it, list its access keys, and show its properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_76

LANGUAGE: Bash
CODE:
```
az redis create
az redis delete
az redis list-keys
az redis show
```

----------------------------------------

TITLE: Filtering Service Principals with OData Expression (Azure CLI)
DESCRIPTION: This command retrieves service principals using an OData filter expression to match an exact display name. It's recommended for server-side filtering in large organizations and outputs the results in JSON format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-4.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
az ad sp list --filter ""displayname eq 'myExactServicePrincipalName'"" --output json
```

----------------------------------------

TITLE: Initializing Azure CLI Configuration with `az init`
DESCRIPTION: This snippet demonstrates the interactive `az init` command, which simplifies Azure CLI configuration. It allows users to choose common settings or walk through individual options, providing explanations for each choice to guide configuration decisions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-configuration.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az init
```

----------------------------------------

TITLE: Scaling Azure MariaDB Server - Azure CLI
DESCRIPTION: This snippet demonstrates Azure CLI commands for scaling an Azure MariaDB server and monitoring its metrics. It includes showing account details, creating a MariaDB server, updating its scale parameters, and listing monitoring metrics.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_43

LANGUAGE: Azure CLI
CODE:
```
az account show
az mariadb server create
az mariadb server update
az monitor metrics list
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Public Access (PowerShell)
DESCRIPTION: Shows how to filter Azure Storage Accounts based on a boolean property, specifically `allowBlobPublicAccess`. The query returns the `id` of storage accounts where public blob access is enabled, using PowerShell's line continuation character.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_24

LANGUAGE: azurecli-interactive
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> `
                       --query ""[?allowBlobPublicAccess == \`true\`].id""
```

----------------------------------------

TITLE: Change Azure MariaDB Server Configurations (Azure CLI)
DESCRIPTION: This script shows how to manage server configurations for an Azure MariaDB instance. It includes commands to create a MariaDB server, list its current configurations, set specific configuration values, and display the details of a particular configuration to ensure optimal performance.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_53

LANGUAGE: Azure CLI
CODE:
```
az mariadb server configuration list
az mariadb server configuration set
az mariadb server configuration show
az mariadb server create
```

----------------------------------------

TITLE: Change Server Parameters for Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This snippet outlines Azure CLI commands for managing server parameters of an Azure Database for MySQL Flexible Server. It includes operations to create the server, configure firewall rules, and then list, set, and show specific server parameters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_64

LANGUAGE: Bash
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server parameter list
az mysql flexible-server parameter set
az mysql flexible-server parameter show
```

----------------------------------------

TITLE: Enabling Azure CLI Completion for Zsh on macOS
DESCRIPTION: These lines enable Azure CLI command completion specifically for the Zsh shell. They should be appended to your `.zshrc` file to initialize `bashcompinit` and source the `az` completion file provided by Homebrew, enhancing command-line productivity.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/install-azure-cli-macos.md#_snippet_1

LANGUAGE: bash
CODE:
```
autoload bashcompinit && bashcompinit
source $(brew --prefix)/etc/bash_completion.d/az
```

----------------------------------------

TITLE: Deploying SignalR App Service with GitHub OAuth (Azure CLI)
DESCRIPTION: This script sets up an Azure App Service and SignalR Service, configuring the web app for deployment via local Git and user credentials, potentially for a GitHub OAuth integrated application. It covers creating resources and deployment setup.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_16

LANGUAGE: Azure CLI
CODE:
```
az appservice plan create
az signalr create
az signalr key list
az webapp config appsettings set
az webapp create
az webapp deployment source config-local-git
az webapp deployment user set
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Public Blob Access in Bash using Azure CLI
DESCRIPTION: This Bash script defines a resource group name and then lists all Azure storage accounts within that group that allow public blob access. It uses a JMESPath query with a filter `[?allowBlobPublicAccess == \`true\`]` to select only relevant accounts, demonstrating proper escaping for boolean values in Bash.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_3

LANGUAGE: bash
CODE:
```
rgName=""<msdocs-tutorial-rg-00000000>""

# Get a list of all Azure storage accounts that allow blob public access.
# Notice the backticks and escape characters needed for boolean values.
az storage account list --resource-group $rgName \
                        --query ""[?allowBlobPublicAccess == \`true\`].name""
```

----------------------------------------

TITLE: Escaping JMESPath Queries in Bash
DESCRIPTION: Provides three equivalent and correct methods for escaping JMESPath query strings when using the `--query` parameter with Azure CLI commands in Bash. This is crucial when the query string contains special characters or needs to be treated as a literal string.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_10

LANGUAGE: bash
CODE:
```
az version --query '""azure-cli""'
az version --query \""azure-cli\""
az version --query ""\""azure-cli\""""
```

----------------------------------------

TITLE: Setting Default Resource Group in Azure CLI
DESCRIPTION: This command configures a default resource group for the Azure CLI, setting 'ContosoRGforVM' as the default. This allows subsequent commands to create resources within this group without explicitly specifying the `--resource-group` parameter. It utilizes the `az config set` command to persist this setting.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-variables.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az config set defaults.group=ContosoRGforVM
```

----------------------------------------

TITLE: Creating Azure CLI Alias for Complete Command
DESCRIPTION: This command creates an alias named 'ls-groups' that executes a full Azure CLI command to list resource groups, query their names and locations, and output the result in a table format. This allows for complex operations to be run with a single, simple alias.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az alias create --name ls-groups --command ""group list --query '[].{Name:name, Location:location}' --output table""
```

----------------------------------------

TITLE: Creating Azure Storage Account Tag from Variable (Bash)
DESCRIPTION: This snippet demonstrates how to create a new tag for an Azure storage account using a variable to hold the tag key-value pair. It uses the `az storage account update` command, passing the variable's value to the `--tags` parameter. This method is useful for dynamic tag creation in Bash.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
newTag=""tag1=tag value with spaces""
az storage account update --name <msdocssa00000000> \
                          --resource-group <msdocs-tutorial-rg-00000000> \
                          --tags ""$newTag""
```

----------------------------------------

TITLE: Starting Azure CLI Docker Container (CBL-Mariner)
DESCRIPTION: This command starts a Docker container with the Azure CLI preinstalled, using the recommended 'cbl-mariner2.0' tag for a deterministic and supported environment. It provides an isolated environment for running CLI commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/run-azure-cli-docker.md#_snippet_0

LANGUAGE: bash
CODE:
```
docker run -it mcr.microsoft.com/azure-cli:cbl-mariner2.0
```

----------------------------------------

TITLE: Configuring Autoscale for Gremlin Cosmos DB Database and Graph (Azure CLI)
DESCRIPTION: This snippet illustrates the Azure CLI commands to create a Cosmos DB account, a Gremlin database, and a graph, all configured with autoscale settings.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_29

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az cosmosdb gremlin database create
az cosmosdb gremlin graph create
```

----------------------------------------

TITLE: Re-keying Azure VM IDs for Table Output with JMESPath in Azure CLI
DESCRIPTION: This command illustrates how to display properties like id that are typically omitted from the default table view by using JMESPath's re-keying feature. By renaming id to objectID, the property becomes visible in the table output, providing access to otherwise hidden default columns. This is useful for debugging or when specific identifiers are required in a tabular format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/format-output-azure-cli.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az vm list --query ""[].{objectID:id}"" --output table
```

----------------------------------------

TITLE: Deleting Azure Service Principal by ID using Azure CLI
DESCRIPTION: This command allows for the deletion of an individual service principal by its unique ID. It provides an alternative to deleting an entire resource group for targeted cleanup of specific service principal resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-8.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az ad sp delete --id myServicePrincipalID
```

----------------------------------------

TITLE: Passing JSON with Apostrophes in Full Value Format (Bash)
DESCRIPTION: Demonstrates how to pass a complex JSON object containing strings with apostrophes in the full value format. Apostrophes within single-quoted strings are escaped with '/.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_17

LANGUAGE: bash
CODE:
```
az some-command --contact ""{name:Bill,motto:'One man'/s bug is another man'/s lesson.',age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com]}""
```

----------------------------------------

TITLE: Listing VM Properties with Azure CLI (Cmd)
DESCRIPTION: This command lists virtual machines within the 'QueryDemo' resource group. It uses a JMESPath query to project and rename specific properties: 'name' as 'Name', 'osType' as 'OS', and 'adminUsername' as 'admin'. The '[]' flattens the top-level array.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_3

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

----------------------------------------

TITLE: Passing Apostrophes in Partial Value with Double Quotes (Bash)
DESCRIPTION: Demonstrates passing a value containing an apostrophe in partial value format by enclosing the entire string in double quotes, eliminating the need for internal escaping.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_18

LANGUAGE: bash
CODE:
```
az some-command --contact motto=""One man's bug is another man's lesson.""
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Relative Date (Bash)
DESCRIPTION: Illustrates filtering Azure Storage Accounts based on a relative date by calculating a date 30 days prior using a Bash variable. The query then retrieves storage accounts created after this calculated date, showing dynamic date filtering.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_21

LANGUAGE: azurecli-interactive
CODE:
```
saDate=$(date +%F -d ""-30days"")
az storage account list --resource-group <msdocs-tutorial-rg-00000000> \
    --query ""[?creationTime >='$saDate'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Disabling Automatic Updates for Azure CLI
DESCRIPTION: This command disables the automatic update feature for the Azure CLI. This is useful for scenarios where stable command script execution is prioritized over always having the latest version, preventing unexpected changes from updates.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/update-azure-cli.md#_snippet_3

LANGUAGE: azurecli
CODE:
```
az config set auto-upgrade.enable=no
```

----------------------------------------

TITLE: Service Principal Creation Output (JSON)
DESCRIPTION: This JSON output displays the details of a newly created service principal, including its application ID (`appId`), display name, and the file path where the generated certificate and private key are stored (`fileWithCertAndPrivateKey`). The `password` field is null for certificate-based authentication, and `tenant` indicates the organization's tenant ID.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""appId"": ""myServicePrincipalID"",
  ""displayName"": ""myServicePrincipalName"",
  ""fileWithCertAndPrivateKey"": ""certFilePath\\certFileName.pem"",
  ""password"": null,
  ""tenant"": ""myOrganizationTenantID""
}
```

----------------------------------------

TITLE: Looping Through VM IDs and Stopping VMs Individually (Cmd)
DESCRIPTION: This Cmd script iterates through the IDs of all running VMs in a specified resource group. For each VM ID, it prints a message and then stops the VM individually using the Azure CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_14

LANGUAGE: Cmd
CODE:
```
ECHO OFF
SETLOCAL
FOR /F ""tokens=* USEBACKQ"" %%F IN (
    `az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv`
) DO (
    ECHO Stopping %%F
    az vm stop --ids %%F
)
```

----------------------------------------

TITLE: Bulk Adding IP Firewall Rules to Cosmos DB with Azure CLI
DESCRIPTION: This snippet sets the active Azure subscription, lists Cosmos DB accounts, and then updates them to bulk add multiple IP firewall rules, enhancing network security.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_35

LANGUAGE: Azure CLI
CODE:
```
az account set
az cosmosdb list
az cosmosdb update
```

----------------------------------------

TITLE: Filtering Azure VMs by SSD Storage Type (Direct Query)
DESCRIPTION: This snippet demonstrates how to filter Azure Virtual Machines (VMs) based on their OS disk's storage account type using a direct JMESPath query. It selects VMs where the storage account type contains 'SSD' and projects their name and storage type. This query directly filters and selects data in one step.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_23

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[?contains(storageProfile.osDisk.managedDisk.storageAccountType,'SSD')].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType}""
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[?contains(storageProfile.osDisk.managedDisk.storageAccountType,'SSD')].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType}""
```

----------------------------------------

TITLE: Listing All Azure Management Groups
DESCRIPTION: This snippet shows how to list all Azure management groups associated with your account using the `az account management-group list` command. This command provides an overview of your existing management group hierarchy, which is useful for auditing and management.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_10

LANGUAGE: Azure CLI
CODE:
```
az account management-group list
```

----------------------------------------

TITLE: Enabling Dynamic Extension Install with Prompt
DESCRIPTION: This command enables the dynamic install feature for Azure CLI extensions, prompting the user before automatically installing a missing extension. This feature is available from version 2.10.0 and enabled by default from 2.12.0.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extensions-overview.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az config set extension.use_dynamic_install=yes_prompt
```

----------------------------------------

TITLE: Installing Azure CLI Extension by Name
DESCRIPTION: This command installs an Azure CLI extension by its name. It's used when the extension is listed in the available extensions provided by Microsoft. Replace `<extension-name>` with the actual name of the extension.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extensions-overview.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az extension add --name <extension-name>
```

----------------------------------------

TITLE: Checking Azure CLI Version
DESCRIPTION: This command is used to display the currently installed version of the Azure CLI. It helps verify the installation and ensures you are running the expected version.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-with-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az version
```

----------------------------------------

TITLE: Finding Azure CLI Commands by Keyword
DESCRIPTION: The `az find` command helps discover Azure CLI commands by searching for keywords within command names. This example searches for commands related to 'vm' (virtual machines), useful for exploring available functionalities.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-with-azure-cli.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az find vm
```

----------------------------------------

TITLE: Extracting VM Admin Username (Default JSON Output)
DESCRIPTION: This snippet demonstrates how to retrieve the administrator username of a specific Azure VM using `az vm show` and a JMESPath query. The output is captured in a shell variable, and the default JSON output format includes quotes around string values, requiring parsing for direct use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_27

LANGUAGE: cmd
CODE:
```
FOR /f %i IN ('az vm show --resource-group QueryDemo --name TestVM --query ""osProfile.adminUsername""') DO SET USER=%i
echo %USER%
```

LANGUAGE: json
CODE:
```
""azureuser""
```

----------------------------------------

TITLE: Configuring Service Endpoints for Cosmos DB Ignoring Missing VNet (Azure CLI)
DESCRIPTION: This snippet demonstrates configuring service endpoints for Cosmos DB, specifically showing how to add network rules while ignoring cases where the VNet might be missing. It involves creating VNet, subnet, and updating subnet network rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_28

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az cosmosdb network-rule add
az network vnet create
az network vnet subnet create
az network vnet subnet show
az network vnet subnet update
```

----------------------------------------

TITLE: Disabling Dynamic Extension Install
DESCRIPTION: This command disables the dynamic install feature for Azure CLI extensions, reverting to the default behavior where a command-not-found error is returned if an extension is not installed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extensions-overview.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az config set extension.use_dynamic_install=no
```

----------------------------------------

TITLE: Listing Azure Storage Account Keys (Azure CLI)
DESCRIPTION: This snippet retrieves the access keys for an Azure Storage account. These keys are essential for authenticating applications or services that need to interact with the storage account programmatically.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-6.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az storage account keys list --resource-group myResourceGroupName \
                                 --account-name myStorageAccountName
```

----------------------------------------

TITLE: Combining Full and Partial Value Shorthand Syntax in Azure CLI
DESCRIPTION: Shows how to combine full value shorthand syntax with subsequent partial value shorthand syntax in Azure CLI. This allows for initial definition of a complex object followed by adding or modifying individual properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_6

LANGUAGE: Bash
CODE:
```
az some-command --contact ""{name:Bill,age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com]}"" motto=""One man's bug is another man's lesson.""
```

----------------------------------------

TITLE: List VMs Using SSD Storage (Azure CLI)
DESCRIPTION: This snippet shows how to list Azure Virtual Machines (VMs) that utilize SSD storage for their OS disk. It queries `az vm list` and uses a JMESPath expression to project VM names and storage account types, then filters the results to include only those containing 'SSD' in the storage type.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_4

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType} | [? contains(Storage,'SSD')]""
```

----------------------------------------

TITLE: Listing Azure CLI Command Groups and Extensions
DESCRIPTION: This snippet demonstrates how to retrieve a list of all available Azure CLI command groups by running 'az' and how to list all available extensions in a table format using 'az extension list-available --output table'. These commands are essential for exploring the capabilities and installed components of the Azure CLI.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/reference-types-and-status.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Get list of all command groups
az

# Get list of extensions
az extension list-available --output table
```

----------------------------------------

TITLE: Connecting to Azure VM via SSH
DESCRIPTION: This command demonstrates how to establish an SSH connection to the newly created Azure Virtual Machine. It requires the public IP address of the VM, which is provided in the output of the `az vm create` command, allowing secure remote access to the VM.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-3.md#_snippet_2

LANGUAGE: Bash
CODE:
```
ssh <PUBLIC_IP_ADDRESS>
```

----------------------------------------

TITLE: Retrieving Cognitive Services Account Endpoint - Azure CLI
DESCRIPTION: This query retrieves the endpoint property of a specific Azure Cognitive Services account within a given resource group. It requires the resource group name and account name as parameters, and outputs the endpoint URL.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_6

LANGUAGE: powershell
CODE:
```
az cognitiveservices account show --resource-group QueryDemo --name DemoAccount --query ""properties.endpoint""
```

LANGUAGE: cmd
CODE:
```
az cognitiveservices account show --resource-group QueryDemo --name DemoAccount --query ""properties.endpoint""
```

----------------------------------------

TITLE: Running Jobs in Azure Batch (Azure CLI)
DESCRIPTION: This snippet illustrates the end-to-end process of running a job in Azure Batch, from creating the Batch account and pool to creating the job and its tasks, along with an associated storage account.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_9

LANGUAGE: Bash
CODE:
```
az batch account create
az batch account login
az batch job create
az batch pool create
az batch task create
az storage account create
```

----------------------------------------

TITLE: Appending Certificate to Existing Service Principal (Azure CLI)
DESCRIPTION: This command appends a new certificate to an existing Azure Active Directory service principal, allowing multiple credentials for authentication. It's crucial to use the `--append` parameter, as omitting it would reset and clear all existing passwords and keys associated with the service principal.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
az ad sp credential reset --id myServicePrincipalID \
                          --append \
                          --cert @/path/to/cert.pem
```

----------------------------------------

TITLE: Signing In with a Service Principal using Password Authentication in Azure CLI
DESCRIPTION: This snippet illustrates how to sign in to Azure using a service principal's credentials. It requires the `appId` (username), `password`, and `tenant` ID of the service principal to authenticate successfully via the `az login --service-principal` command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-2.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az login --service-principal \
         --username myServicePrincipalId \
         --password myServicePrincipalPassword \
         --tenant myOrganizationTenantID
```

----------------------------------------

TITLE: Signing In with a Service Principal using Explicit Password in Azure CLI
DESCRIPTION: This command shows how to sign in to Azure using a service principal's credentials. It requires the `appId` (username), `password`, and `tenant` ID of the service principal. This method is used to test the service principal's access and permissions after creation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-2.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az login --service-principal \
         --username myServicePrincipalId \
         --password myServicePrincipalPassword \
         --tenant myOrganizationTenantID
```

----------------------------------------

TITLE: Creating Azure MariaDB Server and Firewall Rule - Azure CLI
DESCRIPTION: This snippet demonstrates the Azure CLI commands for provisioning an Azure MariaDB server and simultaneously configuring a firewall rule. It includes creating the MariaDB server and then adding a firewall rule to control access.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_41

LANGUAGE: Azure CLI
CODE:
```
az mariadb server create
az mariadb server firewall-rule create
```

----------------------------------------

TITLE: Adding Microsoft Prod Repository for RHEL 9 / CentOS Stream (Bash)
DESCRIPTION: This command adds the Microsoft product repository configuration for RHEL 9 or CentOS Stream, enabling the system's package manager to find and install Azure CLI packages.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-linux-dnf.md#_snippet_1

LANGUAGE: Bash
CODE:
```
sudo dnf install -y https://packages.microsoft.com/config/rhel/9.0/packages-microsoft-prod.rpm
```

----------------------------------------

TITLE: Listing Available Azure CLI Extensions (Azure CLI)
DESCRIPTION: This command lists all available Azure CLI extensions supported by Microsoft. It uses the `--output table` flag to display the results in a human-readable table format, making it easy to review extension names, descriptions, and other details. Users will be prompted to install an extension upon its first use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extensions-list.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az extension list-available --output table
```

----------------------------------------

TITLE: Listing Azure Storage Accounts by Creation Date (Bash)
DESCRIPTION: This snippet retrieves a list of Azure storage accounts created within the last 30 days. It calculates the date using the `date` command and then queries storage accounts, displaying their names and creation timestamps in a table format. Requires `rgName` variable to be set.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_4

LANGUAGE: Bash
CODE:
```
saDate=$(date +%F -d ""-30days"")
az storage account list --resource-group $rgName \
                        --query ""[?creationTime >='$saDate'].{saName:name, createdTimeStamp:creationTime}"" \
                        --output table
```

----------------------------------------

TITLE: Querying and Formatting Single/Nested Values (Bash/Azure CLI)
DESCRIPTION: This snippet illustrates how to query specific single and nested values from the `az account show` command's JSON output using the `--query` argument. It also demonstrates using the `-o tsv` (tab-separated values) argument to remove quotation marks from the output, making it suitable for consumption by other commands and tools.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_4

LANGUAGE: azurecli-interactive
CODE:
```
az account show --query name # Querying a single value
az account show --query name -o tsv # Removes quotation marks from the output

az account show --query user.name # Querying a nested value
az account show --query user.name -o tsv # Removes quotation marks from the output
```

----------------------------------------

TITLE: Setting Azure CLI Default Output to JSON
DESCRIPTION: This command sets the default output format for Azure CLI commands back to `json`. This allows users to view structured JSON output for command results, which is beneficial for scripting and understanding the detailed properties of created or managed resources.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-1-prepare-environment.md#_snippet_4

LANGUAGE: Azure CLI
CODE:
```
az config set core.output=json
```

----------------------------------------

TITLE: Conditionally Deleting an Azure Resource Group
DESCRIPTION: This script demonstrates how to conditionally delete an Azure resource group. It checks for the existence of the resource group using `az group exists` and proceeds with deletion using `az group delete -y` only if the group is found.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_14

LANGUAGE: azurecli
CODE:
```
if [ $(az group exists --name $resourceGroup) = true ]; then 
   az group delete --name $resourceGroup -y # --no-wait
else
   echo The $resourceGroup resource group does not exist
fi
```

----------------------------------------

TITLE: Scale Azure PostgreSQL Server (Azure CLI)
DESCRIPTION: This snippet demonstrates Azure CLI commands for monitoring and scaling an Azure Database for PostgreSQL server. It includes commands to show account details, list monitoring metrics, create the server, and update its scaling properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_74

LANGUAGE: Bash
CODE:
```
az account show
az monitor metrics list
az postgres server create
az postgres server update
```

----------------------------------------

TITLE: Renaming and Formatting Azure Storage Account Properties as a Table using Azure CLI
DESCRIPTION: This command renames selected storage account properties (`name`, `kind`, `minimumTlsVersion`) using curly brackets in the `--query` parameter and outputs them in a table format. The new property names cannot contain spaces, and the output table capitalizes the first letter of each column.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az storage account show --resource-group <msdocs-tutorial-rg-00000000> \
                        --name <msdocssa000000000> \
                        --query ""{saName:name, saKind:kind, saMinTLSVersion:minimumTlsVersion}"" \
                        --output table
```

----------------------------------------

TITLE: Querying and Formatting Single/Nested Values with TSV
DESCRIPTION: This snippet demonstrates querying specific values from the `az account show` command's JSON output. It shows how to query a single top-level value (`name`) and a nested value (`user.name`). The `-o tsv` argument is used to return tab- and newline-separated values, effectively removing quotation marks, which is useful for piping output to other commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_4

LANGUAGE: Bash
CODE:
```
az account show --query name # Querying a single value
az account show --query name -o tsv # Removes quotation marks from the output

az account show --query user.name # Querying a nested value
az account show --query user.name -o tsv # Removes quotation marks from the output
```

----------------------------------------

TITLE: Create Azure Function App Connected to Storage Account (Azure CLI)
DESCRIPTION: This script creates an Azure Function App and configures its connection to an Azure Storage Account. It provisions the storage and sets the necessary application settings for function data operations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_8

LANGUAGE: Bash
CODE:
```
az functionapp config appsettings set
az functionapp create
az storage account create
az storage account show-connection-string
```

----------------------------------------

TITLE: Restoring Azure MySQL Flexible Server using Azure CLI
DESCRIPTION: This script creates an Azure Database for MySQL Flexible Server and then performs a restore operation, useful for disaster recovery or point-in-time recovery. It uses `az mysql flexible-server create` and `az mysql flexible-server restore` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_57

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
az mysql flexible-server restore
```

----------------------------------------

TITLE: Creating Cosmos DB Cassandra Resources for Autoscale with Azure CLI
DESCRIPTION: This snippet demonstrates the initial setup of an Azure Cosmos DB account, a Cassandra keyspace, and a Cassandra table, typically as a prerequisite for configuring autoscale settings.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_27

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb cassandra keyspace create
az cosmosdb cassandra table create
az cosmosdb create
```

----------------------------------------

TITLE: Passing Full JSON Value with Shorthand Syntax in Azure CLI
DESCRIPTION: Demonstrates how to pass a flattened JSON object as a single string parameter in Azure CLI using full value shorthand syntax. The entire JSON is enclosed in double quotes and its properties are represented concisely.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_1

LANGUAGE: Bash
CODE:
```
az some-command --contact ""{name:Bill,age:20,paid:true,emails:[Bill@microsoft.com,Bill@outlook.com],address:{country:USA,company:Microsoft,details:{line1:'15590 NE 31st St',line2:'Redmond, WA'}}}}""
```

----------------------------------------

TITLE: Sign in with User-Assigned Managed Identity (Resource ID) using Azure CLI
DESCRIPTION: This command authenticates to Azure using a user-assigned managed identity by specifying its resource ID with the `--resource-id` flag. This offers another flexible way to identify a specific user-assigned managed identity for login.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-managed-identity.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az login --identity --resource-id <resource_id>
```

----------------------------------------

TITLE: Filtering Azure VMs by Disk Size (>=50GB) in PowerShell
DESCRIPTION: This example filters Azure VMs based on their OS disk size, showing only those with 50 GB or more. It highlights the specific double backtick escaping (` `` `) needed for numerical values within JMESPath queries when executed in PowerShell due to its parsing rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_20

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=``50``].{Name:name,  admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

----------------------------------------

TITLE: Create PostgreSQL Server and Firewall Rule (Azure CLI)
DESCRIPTION: This script illustrates how to create an Azure Database for PostgreSQL server and configure its firewall rules. It includes commands to create the server, create a new firewall rule, and list existing firewall rules.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_85

LANGUAGE: Azure CLI
CODE:
```
az postgres server create
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server firewall-rule create
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server firewall-rule list
```

----------------------------------------

TITLE: Querying Azure Storage Accounts with Dynamic Date (Bash)
DESCRIPTION: This example shows how to dynamically set a date variable (e.g., 30 days ago) in Bash and then use it to filter Azure Storage Accounts by their creation time, demonstrating variable integration in Azure CLI queries.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_33

LANGUAGE: bash
CODE:
```
saDate=$(date +%F -d ""-30days"")
az storage account list --resource-group <msdocs-tutorial-rg-00000000> ^
    --query ""[?creationTime >='$saDate'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Manage Server Logs for Azure Database for MySQL (Azure CLI)
DESCRIPTION: This script demonstrates how to manage server logs for an Azure Database for MySQL server. It includes commands to list, set, and show server configurations, create a MySQL server, and then download and list available server logs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_82

LANGUAGE: Azure CLI
CODE:
```
az mysql server configuration list
```

LANGUAGE: Azure CLI
CODE:
```
az mysql server configuration set
```

LANGUAGE: Azure CLI
CODE:
```
az mysql server configuration show
```

LANGUAGE: Azure CLI
CODE:
```
az mysql server create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql server-logs download
```

LANGUAGE: Azure CLI
CODE:
```
az mysql server-logs list
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Creation Time (Bash)
DESCRIPTION: Demonstrates filtering Azure Storage Accounts by their `creationTime` property, including the time component in the comparison. It retrieves the storage account name, ID, and SKU for accounts created after a specific timestamp.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_19

LANGUAGE: azurecli-interactive
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> \
    --query ""[?creationTime >='2021-11-15T19:14:27.103127+00:00'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Configuring Slow Query Logs for Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This script creates an Azure MySQL Flexible Server, sets up a firewall rule, and configures server parameters to enable and manage slow query logging for performance analysis.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_72

LANGUAGE: Bash
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server parameter set
```

----------------------------------------

TITLE: Retrieving Service Principal by Service Principal Name (Azure CLI)
DESCRIPTION: This command retrieves a service principal by its exact service principal name (SPN), which typically starts with `https://`. This method provides precise filtering for specific service principals.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-4.md#_snippet_3

LANGUAGE: azurecli-interactive
CODE:
```
az ad sp list --spn https://spURL.com
```

----------------------------------------

TITLE: Deleting an Azure Subscription Lock (Azure CLI)
DESCRIPTION: Execute this command to remove an existing lock from your Azure subscription. You must specify the name of the lock you wish to delete.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_20

LANGUAGE: azurecli
CODE:
```
az account lock delete --name ""Cannot delete subscription""
```

----------------------------------------

TITLE: Installing Azure CLI Interactive Mode
DESCRIPTION: This snippet shows how to install and launch the Azure CLI interactive mode, which provides AI-powered functionalities for more efficient command execution and parameter understanding.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-1.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
# install interactive mode
az interactive
```

----------------------------------------

TITLE: Using Single Quotes for Full Value Shorthand with Special Characters in Azure CLI
DESCRIPTION: Shows how to use single quotes within the full value shorthand syntax in Azure CLI to correctly pass string values that contain spaces or other special characters, preventing misinterpretation by the parser.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_10

LANGUAGE: Bash
CODE:
```
az some-command --contact ""{name:'Bill RP',age:20,paid:true,data:'{a: [1, 2]}'}""
```

----------------------------------------

TITLE: Displaying Azure VM Details (Azure CLI)
DESCRIPTION: This command uses 'az vm show' to retrieve and display the detailed configuration and properties of a specific Azure Virtual Machine. This is useful for inspecting the current state of a VM and identifying properties that can be modified using update commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az vm show --resource-group VMResources --name virtual-machine-01
```

----------------------------------------

TITLE: Get Azure Storage Account Primary Table Endpoint (Azure CLI)
DESCRIPTION: This snippet illustrates how to retrieve the primary table endpoint for a specific Azure storage account. It uses the `az storage account show` command and a JMESPath query to directly access the `primaryEndpoints.table` property of the storage account object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_2

LANGUAGE: Bash
CODE:
```
az storage account show --resource-group QueryDemo --name mystorageaccount --query ""primaryEndpoints.table""
```

LANGUAGE: PowerShell
CODE:
```
az storage account show --resource-group QueryDemo --name mystorageaccount --query ""primaryEndpoints.table""
```

LANGUAGE: Cmd
CODE:
```
az storage account show --resource-group QueryDemo --name mystorageaccount --query ""primaryEndpoints.table""
```

----------------------------------------

TITLE: Passing @ Symbol Parameters to Azure CLI (PowerShell)
DESCRIPTION: This example demonstrates how to correctly pass parameters containing an '@' symbol, such as a file path for a JSON manifest, to Azure CLI commands within a PowerShell script. Enclosing the value in double quotes ensures PowerShell handles the special character correctly.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_22

LANGUAGE: azurecli
CODE:
```
az ad app create --display-name myTestAppName `
    --is-fallback-public-client `
    --required-resource-accesses ""@manifest.json""
```

----------------------------------------

TITLE: Adding Subscriptions to an Azure Management Group
DESCRIPTION: This snippet demonstrates how to add one or more Azure subscriptions to an existing management group using the `az account management-group subscription add` command. The `--name` parameter specifies the management group, and `--subscription` specifies the subscription to add. This helps in applying policies and access controls at the management group level.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_11

LANGUAGE: Azure CLI
CODE:
```
az account management-group subscription add --name Contoso01 --subscription ""My Demos""
az account management-group subscription add --name Contoso01 --subscription ""My Second Demos""
```

----------------------------------------

TITLE: Deleting Azure Resource Groups
DESCRIPTION: These commands delete specified Azure resource groups and all contained resources. The first command removes `ContosoRGforVM`, and the second removes `ContosoStorageRG`. This operation is irreversible and permanently removes all associated resources within the group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-variables.md#_snippet_6

LANGUAGE: azurecli
CODE:
```
az group delete --name ContosoRGforVM
az group delete --name ContosoStorageRG
```

----------------------------------------

TITLE: Escaping Double Quotes in Azure CLI (PowerShell)
DESCRIPTION: This snippet demonstrates how to escape double quotes within Azure CLI arguments when running commands in PowerShell. By repeating the double quote, PowerShell correctly interprets the argument as a single string containing the special characters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_19

LANGUAGE: azurecli
CODE:
```
az """"""a&b"""""" --debug
```

----------------------------------------

TITLE: Reverting to Browser Authentication for Azure CLI on Windows
DESCRIPTION: This sequence of commands clears the current Azure account, then disables Web Account Manager (WAM) as the default authentication method on Windows by setting `core.enable_broker_on_windows` to `false`. Finally, `az login` is executed to revert to the previous browser-based authentication method, useful for troubleshooting WAM-related issues.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-interactively.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
az account clear
az config set core.enable_broker_on_windows=false
az login
```

----------------------------------------

TITLE: Example of InvalidTemplateDeployment Error (SkuNotAvailable)
DESCRIPTION: This snippet provides a full JSON error message for an `InvalidTemplateDeployment` error, specifically `SkuNotAvailable`. This error occurs when attempting to create an Azure resource, such as a VM, in a location where the requested SKU (size) is not available due to capacity restrictions. The message suggests trying a different size, location, or zone.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-troubleshooting.md#_snippet_6

LANGUAGE: json
CODE:
```
{""error"":{""code"":""InvalidTemplateDeployment"",""message"":""The template deployment 'vm_deploy_<32 character ID>'
is not valid according to the validation procedure. The tracking id is '<36 character ID>'.
See inner errors for details."",""details"":[{""code"":""SkuNotAvailable"",""message"":""The requested VM size for resource
'Following SKUs have failed for Capacity Restrictions: Standard_DS1_v2' is currently not available
in location 'westus'. Please try another size or deploy to a different location
or different zone. See https://aka.ms/azureskunotavailable for details.""}]}}
```

----------------------------------------

TITLE: Storing Specific Azure Subscription ID in PowerShell
DESCRIPTION: This PowerShell snippet retrieves the ID of an Azure subscription by its full name and stores it in a variable. It leverages `az account list` with a JMESPath query to filter by name and `tsv` output. The retrieved ID is then printed to the console.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_6

LANGUAGE: PowerShell
CODE:
```
$subscriptionId = az account list --query ""[?name=='my case sensitive subscription full name'].id"" --output tsv
Write-Host $subscriptionId
```

----------------------------------------

TITLE: Setting AZURE_CONFIG_DIR for Concurrent Execution (PowerShell)
DESCRIPTION: This PowerShell command sets the 'AZURE_CONFIG_DIR' environment variable to a custom directory. This isolates the Azure CLI configuration and token cache for the current script, preventing write conflicts when multiple Azure CLI commands run concurrently on the same machine.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-tips.md#_snippet_8

LANGUAGE: powershell
CODE:
```
$env:AZURE_CONFIG_DIR='D:\my\config\dir'
```

----------------------------------------

TITLE: Running Jobs and Tasks in Azure Batch (Azure CLI)
DESCRIPTION: This script demonstrates the end-to-end process of running a job in Azure Batch, including creating a Batch account, a storage account, a pool, a job, and individual tasks within that job. It covers the core workflow for compute tasks.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_22

LANGUAGE: Azure CLI
CODE:
```
az batch account create
az batch account login
az batch job create
az batch pool create
az batch task create
az storage account create
```

----------------------------------------

TITLE: Saving Running VM IDs to Variable and Stopping in Cmd
DESCRIPTION: This Cmd script retrieves the IDs of all running VMs in the `VMResources` resource group and stores them in a single `vm_ids` variable. It then uses this variable to stop all identified VMs in parallel via a single `az vm stop` command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
ECHO OFF
SETLOCAL
FOR /F ""tokens=* USEBACKQ"" %%F IN (
   `az vm list --resource-group VMResources --show-details --query ""[?powerState=='VM running'].id"" --output tsv`
) DO (
    SET ""vm_ids=%%F %vm_ids%""  :: construct the id list
)
az vm stop --ids %vm_ids% :: CLI stops all VMs in parallel
```

----------------------------------------

TITLE: Deleting Resource Group Asynchronously with Azure CLI
DESCRIPTION: This command initiates the deletion of an Azure resource group named `MyResourceGroup` without waiting for the operation to complete. The `--no-wait` parameter allows the console to accept new commands immediately, while the deletion proceeds in the background.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_10

LANGUAGE: azurecli
CODE:
```
az group delete --name MyResourceGroup --no-wait
```

----------------------------------------

TITLE: Configuring Serverless Cosmos DB for Cassandra (Azure CLI)
DESCRIPTION: This snippet illustrates the Azure CLI commands to create a Cosmos DB account configured for serverless capacity, along with a Cassandra keyspace and table.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_17

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb cassandra keyspace create
az cosmosdb cassandra table create
az cosmosdb create
```

----------------------------------------

TITLE: Configuring Slow Query Logs for Azure MySQL Flexible Server using Azure CLI
DESCRIPTION: This script creates an Azure Database for MySQL Flexible Server, establishes a firewall rule, and configures server parameters to enable and manage slow query logs. It uses `az mysql flexible-server create`, `az mysql flexible-server firewall-rule create`, and `az mysql flexible-server parameter set` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_59

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server parameter set
```

----------------------------------------

TITLE: Using Newly Defined Azure CLI Aliases
DESCRIPTION: These commands demonstrate the usage of the previously defined aliases 'rg' and 'ls'. 'az rg list' and 'az rg ls' list resource groups, while 'az vm ls' lists virtual machines, showcasing how aliases integrate into regular CLI usage.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az rg list
az rg ls
az vm ls
```

----------------------------------------

TITLE: Creating Azure Storage Account (Bash)
DESCRIPTION: This Azure CLI snippet, designed for Bash, creates a new Azure resource group and a storage account. It uses random identifiers for unique naming and specifies the location, SKU, and kind for the storage account. This is a prerequisite for running test scripts that require an Azure storage account.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
# Bash syntax example

# Variable block
let ""randomIdentifier=$RANDOM*$RANDOM""
location=eastus
resourceGroup=""msdocs-test-rg-$randomIdentifier""
storageAccount=""msdocssa$randomIdentifier""

# Create a resource group.
az group create --name $resourceGroup --location $location

# Create a storage account.
echo ""Creating storage account $storageAccount in resource group $resourceGroup""
az storage account create --name $storageAccount \
    --resource-group $resourceGroup \
    --location $location \
    --sku Standard_RAGRS \
    --kind StorageV2 \
    --output json
```

----------------------------------------

TITLE: Filtering Service Principals with OData Expression (Azure CLI)
DESCRIPTION: This command retrieves service principals using a server-side OData filter. It specifically looks for service principals where the `displayname` property exactly matches `myExactServicePrincipalName` and outputs the results in JSON format. This method is recommended for large organizations.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-4.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
# get service principals using an OData filter
az ad sp list --filter ""displayname eq 'myExactServicePrincipalName'"" --output json
```

----------------------------------------

TITLE: Updating Azure CLI Extension by Name
DESCRIPTION: This command updates an Azure CLI extension that was originally installed by name. It ensures the extension is running the latest available version.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extensions-overview.md#_snippet_8

LANGUAGE: azurecli
CODE:
```
az extension update --name <extension-name>
```

----------------------------------------

TITLE: Template for Azure CLI Alias with Positional Arguments
DESCRIPTION: This snippet provides a general template for creating Azure CLI aliases that accept positional arguments. Arguments are defined within double curly braces {{ arg_name }} in the alias name and then referenced in the --command string.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az alias create --name ""alias_name {{ arg1 }} {{ arg2 }} ..."" --command ""invoke_including_args""
```

----------------------------------------

TITLE: Disabling Automatic Extension Updates in Azure CLI
DESCRIPTION: This command disables the automatic update of installed Azure CLI extensions during the autoupgrade process. By default, all extensions are updated along with the CLI, but this setting allows users to prevent extension updates.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/update-azure-cli.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az config set auto-upgrade.all=no
```

----------------------------------------

TITLE: Verifying Azure CLI Alias Extension Installation
DESCRIPTION: This command lists all installed Azure CLI extensions and queries for their names, displaying them in a table format. It is used to confirm that the 'alias' extension has been successfully installed and is available for use.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extension-alias.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az extension list --output table --query '[].{Name:name}'
```

----------------------------------------

TITLE: Getting Azure CLI Configuration
DESCRIPTION: This command retrieves the current configuration settings for Azure CLI, including any default values set for resource groups or other parameters. It helps users verify their local CLI setup.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az config get
```

----------------------------------------

TITLE: Creating Azure Media Services Account with Service Principal using Azure CLI
DESCRIPTION: This script creates an Azure Media Services account, sets up a service principal for it, and creates an associated Azure Storage account. It uses `az ams account create`, `az ams account sp create`, and `az storage account create` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_49

LANGUAGE: Azure CLI
CODE:
```
az ams account create
az ams account sp create
az storage account create
```

----------------------------------------

TITLE: Creating an Azure Management Group
DESCRIPTION: This snippet demonstrates how to create a new Azure management group using the `az account management-group create` command. Management groups help organize subscriptions for centralized policy and access management. The `--name` parameter specifies the unique name for the new management group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az account management-group create --name Contoso01
```

----------------------------------------

TITLE: Setting HTTP/HTTPS Proxy Environment Variables in Bash
DESCRIPTION: This snippet demonstrates how to set the `HTTP_PROXY` and `HTTPS_PROXY` environment variables in a Bash shell. It provides examples for both no authentication and basic authentication scenarios, which are crucial for connecting to external resources and Azure services when behind a proxy. These variables are widely used by Linux programs and during installation processes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/configure-proxy.md#_snippet_0

LANGUAGE: bash
CODE:
```
# No auth
export HTTP_PROXY=http://[proxy]:[port]
export HTTPS_PROXY=https://[proxy]:[port]

# Basic auth
export HTTP_PROXY=http://[username]:[password]@[proxy]:[port]
export HTTPS_PROXY=https://[username]:[password]@[proxy]:[port]
```

----------------------------------------

TITLE: Managing Event Grid Resources - Azure CLI
DESCRIPTION: This snippet outlines the Azure CLI commands for managing Event Grid resources, including creating topics and event subscriptions. It covers registering providers, deploying resource groups, creating topics, listing topic keys, and creating event subscriptions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_33

LANGUAGE: Azure CLI
CODE:
```
az account show
az deployment group create
az eventgrid event-subscription create
az eventgrid topic create
az eventgrid topic key list
az eventgrid topic show
az provider register
az provider show
```

----------------------------------------

TITLE: Filtering Azure VMs by Disk Size (>=50GB) in Cmd
DESCRIPTION: This snippet filters Azure VMs to display those with an OS disk size of 50 GB or greater. It uses a JMESPath query to project the VM name, admin username, and disk size, demonstrating the correct backtick escaping for numerical values in Command Prompt.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_21

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --resource-group QueryDemo --query ""[?storageProfile.osDisk.diskSizeGb >=`50`].{Name:name, admin:osProfile.adminUsername, DiskSize:storageProfile.osDisk.diskSizeGb }"" --output table
```

----------------------------------------

TITLE: Renaming Query Properties in Azure CLI Output
DESCRIPTION: These snippets illustrate using the JMESPath multiselect hash operator `{}` to create a dictionary output and rename properties. This allows for more user-friendly column headers or key names in the query results, shown in both default and table formats.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_8

LANGUAGE: Azure CLI
CODE:
```
az account show --query ""{SubscriptionName: name, SubscriptionId: id, UserName: user.name}""
```

LANGUAGE: Azure CLI
CODE:
```
az account show --query ""{SubscriptionName: name, SubscriptionId: id, UserName: user.name}"" -o table
```

----------------------------------------

TITLE: Listing Supported Azure Locations - Azure CLI
DESCRIPTION: This command retrieves a list of all Azure regions supported by the current subscription. It helps in identifying available locations for deploying resources and creating resource groups.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-groups-azure-cli.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az account list-locations
```

----------------------------------------

TITLE: Adding Application to Azure Batch Account (Azure CLI)
DESCRIPTION: This script demonstrates the creation of an Azure Batch account and a storage account, followed by logging into the Batch account and adding a new application. This is essential for managing and running applications within Azure Batch.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_17

LANGUAGE: Azure CLI
CODE:
```
az batch account create
az batch account login
az batch application create
az storage account create
```

----------------------------------------

TITLE: Running Azure CLI in a Docker Container (Bash)
DESCRIPTION: This command runs the Azure CLI within a Docker container. The `-it` flags provide an interactive pseudo-TTY, allowing users to interact with the CLI inside the container. This is useful for environments where direct installation is not preferred or for consistent CLI environments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/cheat-sheet-onboarding.md#_snippet_0

LANGUAGE: Bash
CODE:
```
docker run -it mcr.microsoft.com/azure-cli
```

----------------------------------------

TITLE: Create DNS Zone and A Record in Azure (Azure CLI)
DESCRIPTION: This script illustrates the creation of an Azure DNS zone and an A record within it. It uses 'az network dns zone create' to establish the zone, 'az network dns record-set a add-record' to add the A record, and 'az network dns record-set list' to verify the newly created record set.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_45

LANGUAGE: Azure CLI
CODE:
```
az network dns record-set a add-record
az network dns record-set list
az network dns zone create
```

----------------------------------------

TITLE: Checking Azure CLI Version
DESCRIPTION: This command displays the installed version of the Azure CLI, along with other related component versions, helping users determine if an update is needed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/current-version.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az version
```

----------------------------------------

TITLE: Retrieving All VM Information with Azure CLI
DESCRIPTION: This command retrieves all detailed configuration and status information for a specific Azure Virtual Machine. It requires the VM's name and resource group. The output is a comprehensive JSON object containing various properties of the VM, including authentication, network interface, and storage details.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-4.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az vm show --name $vmName --resource-group $resourceGroup
```

----------------------------------------

TITLE: Piping Running VM Names to Grep (Azure CLI)
DESCRIPTION: This example illustrates piping the output of `az vm list` to `grep`. It retrieves the names of running VMs and filters them using `grep` to find specific VM names. This is suitable when the value is used only once.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_1

LANGUAGE: azurecli
CODE:
```
az vm list --query ""[?powerState=='VM running'].name"" --output tsv | grep my_vm
```

----------------------------------------

TITLE: Passing Apostrophes in Partial Value Format (Bash)
DESCRIPTION: Illustrates escaping an apostrophe within a single-quoted string when using the partial value format for Azure CLI commands. The apostrophe is escaped with a forward slash (/) to distinguish it from the string's end.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_14

LANGUAGE: bash
CODE:
```
az some-command --contact name=""'bill'/s'""
```

----------------------------------------

TITLE: Passing Apostrophes in Full Value Format (Bash)
DESCRIPTION: Demonstrates how to escape an apostrophe within a single-quoted string in the full value format for Azure CLI commands. The apostrophe `'` is escaped with a forward slash `/'`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_13

LANGUAGE: bash
CODE:
```
az some-command --contact ""{name:'bill'/s',age:20,paid:true}""
```

----------------------------------------

TITLE: Running Azure CLI in a Docker Container (Shell)
DESCRIPTION: This command pulls and runs the official Azure CLI Docker image in interactive mode, allowing users to execute Azure CLI commands directly from within the container. It provides a portable and isolated environment for Azure CLI operations without requiring a local installation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker run -it mcr.microsoft.com/azure-cli
```

----------------------------------------

TITLE: Setting Space-Separated Key-Value Pairs
DESCRIPTION: Demonstrates how to pass space-separated key-value pairs to an Azure CLI command when keys or values contain spaces. Each key-value pair must be enclosed in double quotes to be treated as a single argument.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-quoting.md#_snippet_8

LANGUAGE: azurecli
CODE:
```
az web app config app settings set --resource-group myResourceGroup --name myWebAppName --settings ""client id=id1"" ""my name=john""
```

----------------------------------------

TITLE: Creating Asset in Azure Media Services using Azure CLI
DESCRIPTION: This script creates an Azure Media Services asset, retrieves its Shared Access Signature (SAS) URLs, and uploads a blob to the associated storage account. It utilizes `az ams asset create`, `az ams asset get-sas-urls`, and `az storage blob upload` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_45

LANGUAGE: Azure CLI
CODE:
```
az ams asset create
az ams asset get-sas-urls
az storage blob upload
```

----------------------------------------

TITLE: Filtering and Renaming Azure Storage Account Columns - PowerShell (Windows)
DESCRIPTION: This snippet illustrates how to apply a `creationTime` filter and rename output columns with spaces in Azure CLI for PowerShell on Windows. It maintains the single quote wrapper for the query string and uses embedded single quote pairs (`''...''`) to surround the date value, alongside double double quotes for column names. This script is compatible with Windows PowerShell 5.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_9

LANGUAGE: azurecli
CODE:
```
az storage account list --query '[?creationTime >=\'\'2024-02-01\'\'].{\""\""SA Name\""\"":name,\""\""Primary endpoint\""\"":primaryEndpoints.blob}' --output table
```

----------------------------------------

TITLE: Example Output: VM Admin Username (Default JSON)
DESCRIPTION: This is an example of the default JSON output when querying a single string value from Azure CLI, showing the string enclosed in double quotes.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_18

LANGUAGE: json
CODE:
```
""azureuser""
```

----------------------------------------

TITLE: Managing Cosmos DB Account Regions and Failover (Azure CLI)
DESCRIPTION: This snippet demonstrates how to create a Cosmos DB account and then manage its regional replication settings, including changing failover priority and updating regions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_26

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
az cosmosdb failover-priority-change
az cosmosdb update
```

----------------------------------------

TITLE: Filtering Service Principals by Display Name Keyword (Azure CLI)
DESCRIPTION: This command lists service principals whose display names contain a specified keyword. It's useful for filtering a large number of service principals and outputs the results in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-4.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az ad sp list --display-name mySearchWord --output table
```

----------------------------------------

TITLE: Manage Server Logs for Azure PostgreSQL Server (Azure CLI)
DESCRIPTION: This snippet provides Azure CLI commands for managing and downloading server logs for Azure Database for PostgreSQL server. It covers listing, setting, and showing server configurations related to logging, creating the server, and then downloading and listing available server logs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_75

LANGUAGE: Bash
CODE:
```
az postgres server configuration list
az postgres server configuration set
az postgres server create
az postgres server-logs download
az postgres server-logs list
```

----------------------------------------

TITLE: Listing Azure CLI Command Groups and Extensions
DESCRIPTION: This snippet demonstrates how to list all available command groups and extensions in Azure CLI. It uses the 'az' command to display core command groups and 'az extension list-available --output table' to show a formatted list of installable extensions, aiding in discovery of CLI capabilities.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/reference-types-and-status.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
# Get list of all command groups
az

# Get list of extensions
az extension list-available --output table
```

----------------------------------------

TITLE: Listing Available Azure CLI Extensions
DESCRIPTION: This command lists all Azure CLI extensions that are provided and maintained by Microsoft, displaying them in a table format for easy readability.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extensions-overview.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az extension list-available --output table
```

----------------------------------------

TITLE: Setting Azure CLI Config Directory (Bash)
DESCRIPTION: This Bash command sets the `AZURE_CONFIG_DIR` environment variable. This isolates the Azure CLI configuration and MSAL token cache to a specified directory, preventing write conflicts when running multiple Azure CLI commands concurrently.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-tips.md#_snippet_7

LANGUAGE: bash
CODE:
```
export AZURE_CONFIG_DIR=/my/config/dir
```

----------------------------------------

TITLE: Listing Azure Management Groups
DESCRIPTION: This snippet demonstrates how to list all existing Azure management groups associated with your account. The `az account management-group list` command provides an overview of your management group hierarchy, useful for auditing and management.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_13

LANGUAGE: Azure CLI
CODE:
```
az account management-group list
```

----------------------------------------

TITLE: Creating Serverless Cosmos DB Cassandra Resources with Azure CLI
DESCRIPTION: This snippet illustrates the creation of an Azure Cosmos DB account, a Cassandra keyspace, and a Cassandra table, specifically for a serverless deployment model.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_30

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb cassandra keyspace create
az cosmosdb cassandra table create
az cosmosdb create
```

----------------------------------------

TITLE: Filtering Service Principals by Exact Service Principal Name (Azure CLI)
DESCRIPTION: This command filters service principals based on an exact match of their `servicePrincipalNames` property. The `--spn` parameter is used for this purpose, and the value typically starts with `https://`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-sp-tutorial-4.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
# get a service principal having a certain servicePrincipalNames property value
az ad sp list --spn https://spURL.com
```

----------------------------------------

TITLE: Listing Running Web Apps - Azure CLI
DESCRIPTION: This snippet retrieves a list of all web applications within a specified resource group that are currently in a 'Running' state. It uses the `az webapp list` command and filters the results based on the `state` property.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-examples.md#_snippet_2

LANGUAGE: bash
CODE:
```
az webapp list --resource-group DemoGroup --query ""[?state=='Running']""
```

LANGUAGE: powershell
CODE:
```
az webapp list --resource-group DemoGroup --query ""[?state=='Running']""
```

LANGUAGE: cmd
CODE:
```
az webapp list --resource-group DemoGroup --query ""[?state=='Running']""
```

----------------------------------------

TITLE: Creating a Service Principal with Certificate String (Azure CLI)
DESCRIPTION: This command creates an Azure Active Directory service principal using an existing public certificate provided directly as a string. The `--cert` parameter accepts the certificate content, allowing for programmatic or inline certificate usage without requiring a file. Only the public certificate is needed for this operation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-sp-tutorial-3.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az ad sp create-for-rbac --name myServicePrincipalName \
                         --role roleName \
                         --scopes /subscriptions/mySubscriptionID/resourceGroups/myResourceGroupName \
                         --cert ""MIICoT...""
```

----------------------------------------

TITLE: Adding Azure CLI Software Repository - Bash
DESCRIPTION: This command block dynamically determines the Linux distribution codename and then creates a new `.sources` file for `apt`. This file configures the system to use the official Microsoft Azure CLI repository, specifying the package type, URI, suite, components, architecture, and the signing key for verification.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-linux-apt.md#_snippet_4

LANGUAGE: Bash
CODE:
```
AZ_DIST=$(lsb_release -cs)
echo ""Types: deb\nURIs: https://packages.microsoft.com/repos/azure-cli/\nSuites: ${AZ_DIST}\nComponents: main\nArchitectures: $(dpkg --print-architecture)\nSigned-by: /etc/apt/keyrings/microsoft.gpg"" | sudo tee /etc/apt/sources.list.d/azure-cli.sources
```

----------------------------------------

TITLE: Showing VM Information with Azure CLI
DESCRIPTION: This command retrieves all detailed information about a specified Azure Virtual Machine. It outputs a comprehensive JSON object containing various properties like authentication, network interface storage, and connected resource IDs, which can be difficult to parse visually without further querying.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-4.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az vm show --name $vmName --resource-group $resourceGroup
```

----------------------------------------

TITLE: Sorting Azure VMs by OS Disk Size (JMESPath)
DESCRIPTION: This snippet demonstrates how to sort Azure Virtual Machines based on their OS disk size using the JMESPath `sort_by` function. It projects the VM name and disk size, then sorts the results in ascending order by size. The `--output table` flag formats the output for better readability.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_14

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""sort_by([].{Name:name, Size:storageProfile.osDisk.diskSizeGb}, &Size)"" --output table
```

LANGUAGE: PowerShell
CODE:
```
az vm list --resource-group QueryDemo --query ""sort_by([].{Name:name, Size:storageProfile.osDisk.diskSizeGb}, &Size)"" --output table
```

LANGUAGE: Cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""sort_by([].{Name:name, Size:storageProfile.osDisk.diskSizeGb}, &Size)"" --output table
```

----------------------------------------

TITLE: Filtering Azure VMs by Storage Account Type using JMESPath contains (Bash)
DESCRIPTION: This snippet demonstrates using the JMESPath 'contains' function to filter Azure Virtual Machines. It identifies VMs whose managed disk storage account type contains 'SSD', effectively finding VMs using SSD storage for their OS disk. The query projects the VM's name and storage account type. This example is for the Bash environment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_11

LANGUAGE: Bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[?contains(storageProfile.osDisk.managedDisk.storageAccountType,'SSD')].{Name:name, Storage:storageProfile.osDisk.managedDisk.storageAccountType}""
```

----------------------------------------

TITLE: Securely Prompting for Azure Credentials in PowerShell
DESCRIPTION: Shows how to securely obtain Azure credentials in PowerShell using the `Get-Credential` cmdlet, which prompts for username and password. The credentials are then used for `az login`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-interactively.md#_snippet_5

LANGUAGE: powershell
CODE:
```
$AzCred = Get-Credential -UserName <username>
az login -u $AzCred.UserName -p $AzCred.GetNetworkCredential().Password
```

----------------------------------------

TITLE: Retrieve Azure Cognitive Service Endpoint (Azure CLI)
DESCRIPTION: This example demonstrates how to retrieve the endpoint URL for a specific Azure Cognitive Service account. It uses the `az cognitiveservices account show` command and a JMESPath query to extract the `properties.endpoint` field from the service account details.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-examples.md#_snippet_5

LANGUAGE: Bash
CODE:
```
az cognitiveservices account show --resource-group QueryDemo --name DemoAccount --query ""properties.endpoint""
```

----------------------------------------

TITLE: Installing the Azure CLI Alias Extension
DESCRIPTION: This command installs the Azure CLI alias extension, which enables users to define custom commands. It's a prerequisite for using alias functionalities.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az extension add --name alias
```

----------------------------------------

TITLE: Listing Azure Storage Accounts with JMESPath Query (PowerShell)
DESCRIPTION: This command lists Azure Storage Accounts and projects their names and primary blob endpoints using a JMESPath query. It demonstrates the use of single quotes for the outer query string and escaped double quotes for object keys within the query, suitable for PowerShell environments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_10

LANGUAGE: azurecli
CODE:
```
az storage account list --query '[].{""""SA Name"""":name,""""Primary endpoint"""":primaryEndpoints.blob}' --output table
```

----------------------------------------

TITLE: Upgrading All System Packages Including Azure CLI - Bash
DESCRIPTION: This command sequence first updates the local package index and then upgrades all installed packages on the system to their latest available versions from configured repositories. This includes the Azure CLI if a newer version is available.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-linux-apt.md#_snippet_9

LANGUAGE: Bash
CODE:
```
sudo apt-get update && sudo apt-get upgrade
```

----------------------------------------

TITLE: Change PostgreSQL Server Configurations (Azure CLI)
DESCRIPTION: This script demonstrates how to manage server configurations for an Azure Database for PostgreSQL server. It covers creating a server and then listing, setting, and showing specific server configuration parameters.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_84

LANGUAGE: Azure CLI
CODE:
```
az postgres server configuration list
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server configuration set
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server configuration show
```

LANGUAGE: Azure CLI
CODE:
```
az postgres server create
```

----------------------------------------

TITLE: Querying Multiple and Nested Properties with Azure CLI
DESCRIPTION: These commands illustrate how to retrieve multiple properties, including nested ones like `user.name`, from the `az account show` command's JSON output. The first command returns the values in default JSON format, while the second formats them as a table for better readability.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_6

LANGUAGE: azurecli-interactive
CODE:
```
az account show --query [name,id,user.name]
```

LANGUAGE: azurecli-interactive
CODE:
```
az account show --query [name,id,user.name] -o table
```

----------------------------------------

TITLE: Listing Multiple VM Details (Table Output)
DESCRIPTION: This snippet shows how to combine JMESPath projection with the `--output table` format to display a human-readable ASCII table of selected Azure VM properties (Name, OS Type, Admin Username). This format is optimized for quick scanning and provides a concise overview.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/query-azure-cli-concepts.md#_snippet_31

LANGUAGE: bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, Admin:osProfile.adminUsername}"" --output table
```

LANGUAGE: powershell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, Admin:osProfile.adminUsername}"" --output table
```

LANGUAGE: cmd
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, Admin:osProfile.adminUsername}"" --output table
```

LANGUAGE: json
CODE:
```
Name     OS       Admin
-------  -------  ---------
Test-2   Linux    sttramer
TestVM   Linux    azureuser
WinTest  Windows  winadmin
```

----------------------------------------

TITLE: Manage Zone-Redundant HA for Azure MySQL Flexible Server (Azure CLI)
DESCRIPTION: This snippet demonstrates Azure CLI commands for setting up and managing a zone-redundant high availability configuration for Azure Database for MySQL Flexible Server. It covers the creation of the server, configuration of necessary firewall rules, and general server updates to maintain the HA setup.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_63

LANGUAGE: Bash
CODE:
```
az mysql flexible-server create
az mysql flexible-server firewall-rule create
az mysql flexible-server update
```

----------------------------------------

TITLE: Listing Virtual Machines in JSON Format
DESCRIPTION: This snippet demonstrates how to list virtual machines in your Azure subscription using the default JSON output format. It shows the command to execute and an example of the resulting JSON output, which includes detailed information about each VM.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_0

LANGUAGE: Azure CLI
CODE:
```
az vm list --output json
```

LANGUAGE: JSON
CODE:
```
[
  {
    ""availabilitySet"": null,
    ""diagnosticsProfile"": null,
    ""hardwareProfile"": {
      ""vmSize"": ""Standard_DS1""
    },
    ""id"": ""/subscriptions/.../resourceGroups/DEMORG1/providers/Microsoft.Compute/virtualMachines/DemoVM010"",
    ""instanceView"": null,
    ""licenseType"": null,
    ""location"": ""westus"",
    ""name"": ""DemoVM010"",
    ""networkProfile"": {
      ""networkInterfaces"": [
        {
          ""id"": ""/subscriptions/.../resourceGroups/demorg1/providers/Microsoft.Network/networkInterfaces/DemoVM010VMNic"",
          ""primary"": null,
          ""resourceGroup"": ""demorg1""
        }
      ]
    },
          ...
          ...
          ...
]
```

----------------------------------------

TITLE: Creating Azure Container Registry using PUT with az rest (Bash Example)
DESCRIPTION: This Bash example demonstrates how to create an Azure Container Registry using the `az rest` command with the PUT HTTP method. It includes variable definitions for subscription ID, resource group, registry name, location, SKU, and admin user property, followed by commands to create a resource group and invoke the REST request.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_1

LANGUAGE: Bash
CODE:
```
# Variable block
let ""randomIdentifier=$RANDOM*$RANDOM""
subscriptionId=""00000000-0000-0000-0000-000000000000""
resourceGroup=""msdocs-app-rg$randomIdentifier""
containerRegistryName=""msdocscr$randomIdentifier""
locationName=""westus""
skuName=""Standard""
propertyValue=""true""

# Create resource group
az group create --name $resourceGroup --location $locationName --output json

# Invoke request
az rest --method put \
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/$containerRegistryName?api-version=2023-01-01-preview \
    --body ""{'location': '$locationName', 'sku': {'name': '$skuName'}, 'properties': {'adminUserEnabled': '$propertyValue'}}""
```

----------------------------------------

TITLE: Listing Azure VMs in TSV Format (Azure CLI)
DESCRIPTION: This command demonstrates the basic usage of the `tsv` output format for listing Azure Virtual Machines. The output is tab- and newline-separated, without extra formatting, keys, or symbols, making it suitable for direct consumption by other tools.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_5

LANGUAGE: azurecli-interactive
CODE:
```
az vm list --output tsv
```

----------------------------------------

TITLE: Running Azure CLI in Interactive Mode with Error Filtering
DESCRIPTION: This command initiates the Azure CLI in interactive mode, configured to display only error messages and suppress warnings. It's useful for focusing on critical issues during interactive sessions. The surrounding text indicates that preview warnings are omitted, and it also includes general interactive mode messages about new features like Recommender and preloading.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-global-parameters.md#_snippet_4

LANGUAGE: azurecli-interactive
CODE:
```
az interactive --only-show-errors
```

----------------------------------------

TITLE: Creating an Azure VM from a Custom Image
DESCRIPTION: This example demonstrates how to create a new Azure Virtual Machine using a custom managed image. It specifies the resource group (`-g`), the VM name (`-n`), and the custom image to use (`--image`). This command is used for deploying VMs based on pre-configured images.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-with-azure-cli.md#_snippet_6

LANGUAGE: Azure CLI
CODE:
```
az vm create -g MyResourceGroup -n MyVm --image MyImage
```

----------------------------------------

TITLE: Calculating Total Blob Size in Azure Storage Container using Azure CLI
DESCRIPTION: This script calculates and displays the total content length (in bytes) of all blobs within a specified Azure storage container. It queries the contentLength property of each blob, pipes the values to paste to sum them, and then uses bc for arithmetic calculation. The total bytes are then echoed.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_23

LANGUAGE: azurecli
CODE:
```
bytes=`az storage blob list \
    --container-name $container \
    --account-key $accountKey \
    --account-name $storageAccount \
    --query ""[*].[properties.contentLength]"" \
    --output tsv | paste -s -d+ | bc`

echo ""Total bytes in container: $bytes""
echo $bytes
```

----------------------------------------

TITLE: Change MySQL Flexible Server Parameters (Azure CLI)
DESCRIPTION: This script illustrates how to manage server parameters for an Azure Database for MySQL Flexible Server. It covers creating a server, configuring firewall rules, and then listing, setting, and showing specific server parameters to fine-tune its behavior.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_77

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server firewall-rule create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server parameter list
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server parameter set
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server parameter show
```

----------------------------------------

TITLE: Creating Azure Storage Account with Default Resource Group
DESCRIPTION: This command creates an Azure storage account named `storage135` in the `eastus` location with a `Standard_LRS` SKU. It implicitly uses the previously configured default resource group (`ContosoRGforVM`), demonstrating how default settings simplify command syntax by omitting the `--resource-group` parameter.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-variables.md#_snippet_5

LANGUAGE: azurecli
CODE:
```
az storage account create --name storage135 --location eastus --sku Standard_LRS
```

----------------------------------------

TITLE: Querying NIC ID for VM with Azure CLI
DESCRIPTION: This command queries the network interface controller (NIC) object ID from a VM's detailed information using JMESPath. It uses the `--query` argument to extract the `id` from the `networkProfile.networkInterfaces` array and outputs it in tab-separated values (TSV) format for easy parsing.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-4.md#_snippet_1

LANGUAGE: Bash
CODE:
```
az vm show --name $vmName \
  --resource-group $resourceGroup \
  --query 'networkProfile.networkInterfaces[].id' \
  --output tsv
```

LANGUAGE: PowerShell
CODE:
```
az vm show --name $vmName `
    --resource-group $resourceGroup `
    --query 'networkProfile.networkInterfaces[].id' `
    --output tsv
```

----------------------------------------

TITLE: Formatting Azure Account Output as YAML
DESCRIPTION: This command demonstrates how to format the output of the `az account show` command into YAML format using the `--output yaml` argument. YAML is a plain-text data serialization format often preferred for readability and configuration input.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_2

LANGUAGE: Bash
CODE:
```
az account show --output yaml
```

----------------------------------------

TITLE: Suppressing Warnings with Azure CLI --only-show-errors
DESCRIPTION: This snippet illustrates the effect of the `--only-show-errors` global parameter by showing the `az interactive` command's output *without* it. This parameter is used to filter out warnings, displaying only error messages, which is beneficial during debugging to focus on critical issues.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-global-parameters.md#_snippet_3

LANGUAGE: Azure CLI
CODE:
```
az interactive
```

----------------------------------------

TITLE: Manage and Download Azure MariaDB Server Logs (Azure CLI)
DESCRIPTION: This script provides functionality to manage and download server logs for an Azure MariaDB instance. It includes commands to create a server, list, set, and show server configurations related to logging, and then list and download the actual server logs for troubleshooting and analysis.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_57

LANGUAGE: Azure CLI
CODE:
```
az mariadb server configuration list
az mariadb server configuration set
az mariadb server configuration show
az mariadb server create
az mariadb server-logs download
az mariadb server-logs list
```

----------------------------------------

TITLE: Enabling Automatic Updates for Azure CLI
DESCRIPTION: This command enables the automatic update feature for the Azure CLI. Once enabled, the CLI will regularly check for new versions and prompt the user to upgrade after a command finishes running when an update is available.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/update-azure-cli.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az config set auto-upgrade.enable=yes
```

----------------------------------------

TITLE: Viewing Specific Command Examples in Azure CLI Interactive Mode
DESCRIPTION: This snippet demonstrates how to view a specific example of a command in Azure CLI interactive mode by appending `::[num]` to the command. It allows users to quickly access a particular usage example without scrolling through all available options.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/interactive-azure-cli.md#_snippet_9

LANGUAGE: azurecli
CODE:
```
az>> webapp create ::2
```

----------------------------------------

TITLE: Viewing Specific Command Example in Azure CLI Interactive Mode
DESCRIPTION: This snippet demonstrates how to view a specific example of a command in Azure CLI interactive mode by appending `::` followed by the example number to the command. This allows users to quickly access relevant usage patterns for a given command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/interactive-azure-cli.md#_snippet_9

LANGUAGE: azurecli
CODE:
```
az>> webapp create ::2
```

----------------------------------------

TITLE: Formatting Azure Account Output as YAML (Bash/Azure CLI)
DESCRIPTION: This snippet shows how to format the output of the `az account show` command into YAML format using the `--output yaml` argument. YAML is a plain-text data serialization format that is often more human-readable than JSON and can be used as configuration input for some applications.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_2

LANGUAGE: azurecli-interactive
CODE:
```
az account show --output yaml
```

----------------------------------------

TITLE: Creating Azure Container Registry using PUT with az rest (PowerShell Example)
DESCRIPTION: This PowerShell example demonstrates how to create an Azure Container Registry using the `az rest` command with the PUT HTTP method. It includes variable definitions for subscription ID, resource group, registry name, location, SKU, and admin user property, followed by a command to create a resource group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_2

LANGUAGE: PowerShell
CODE:
```
# Variable block
$randomIdentifier = (New-Guid).ToString().Substring(0,8)
$subscriptionId=""00000000-0000-0000-0000-000000000000""
$resourceGroup=""msdocs-app-rg$randomIdentifier""
$containerRegistryName=""msdocscr$randomIdentifier""
$locationName=""westus""
$skuName=""Standard""
$propertyValue=""true""

# Create resource group
az group create --name $resourceGroup --location $locationName --output json
```

----------------------------------------

TITLE: Retrieving Network Interface Information - Azure CLI
DESCRIPTION: This command retrieves all information for a specific network interface (NIC) using its ID. It doesn't require a separate resource group name as the ID already contains this context. The output includes DNS, IP, security, and MAC address details.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-5.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az network nic show --ids $nicId
```

----------------------------------------

TITLE: Enabling Dynamic Install with Prompt for Azure CLI
DESCRIPTION: This command enables the dynamic install feature for Azure CLI extensions, which automatically installs an uninstalled extension when its command is run, prompting the user for confirmation.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extensions-overview.md#_snippet_4

LANGUAGE: azurecli
CODE:
```
az config set extension.use_dynamic_install=yes_prompt
```

----------------------------------------

TITLE: Reading and Querying JSON with PowerShell
DESCRIPTION: This PowerShell script illustrates how to read a JSON file, convert its content to a PowerShell object, and then query specific values. It demonstrates accessing nested properties from a JSON object and filtering an array of objects based on a property value, then expanding a property from the filtered object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_14

LANGUAGE: powershell
CODE:
```
# Show the contents of a file in the console
$fileName=""c:\myPath\msdocs-tutorial.json""
$fileContents = Get-Content -Path $fileName | ConvertFrom-Json

# Get a JSON dictionary object
$stgKV=$($fileContents.environments.stg.""kv-secretName"")
echo $stgKV

# Filter a JSON array
$devKV=$($fileContents.environments.dev |
    Where-Object status -eq 'active' |
    Select-Object -ExpandProperty 'kv-secretName')
echo $devKV
```

----------------------------------------

TITLE: Displaying Network Interface Information with Azure CLI
DESCRIPTION: This command retrieves and displays all detailed information for a virtual machine's network interface (NIC) using its ID. The output includes DNS settings, IP configuration, security settings, and the MAC address, providing a comprehensive view of the NIC's properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-5.md#_snippet_0

LANGUAGE: azurecli-interactive
CODE:
```
az network nic show --ids $nicId
```

----------------------------------------

TITLE: Uninstalling Azure CLI Extension by Name
DESCRIPTION: This command removes an installed Azure CLI extension by its name. It's used when an extension is no longer needed. Replace `<extension-name>` with the name of the extension to remove.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extensions-overview.md#_snippet_9

LANGUAGE: Azure CLI
CODE:
```
az extension remove --name <extension-name>
```

----------------------------------------

TITLE: Getting Help for Azure CLI Account Commands - Azure CLI
DESCRIPTION: This command uses the `--help` parameter to display detailed information, descriptions, and tips for the `az account` command group. It's essential for understanding command usage and available options.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/cheat-sheet-onboarding.md#_snippet_5

LANGUAGE: Azure CLI
CODE:
```
az account --help
```

----------------------------------------

TITLE: Bulk Adding IP Firewall Rules to Cosmos DB (Azure CLI)
DESCRIPTION: This snippet provides Azure CLI commands to bulk add IP firewall rules to an existing Cosmos DB account. It involves setting the account, listing existing accounts, and updating the firewall settings.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_22

LANGUAGE: Azure CLI
CODE:
```
az account set
az cosmosdb list
az cosmosdb update
```

----------------------------------------

TITLE: Merging and Listing Azure Resource Tags (Bash)
DESCRIPTION: This snippet shows how to retrieve a storage account's resource ID in Bash, then append new tags to it without overwriting existing ones using `az tag update` with `--operation merge`. Finally, it demonstrates how to list all tags associated with the resource using `az tag list`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
# Get the resource ID of your storage account.
saID=$(az resource show --resource-group <msdocs-tutorial-rg-00000000> \
                        --name <msdocssa00000000> \
                        --resource-type Microsoft.Storage/storageAccounts \
                        --query ""id"" \
                        --output tsv)

echo My storage account ID is $saID

# Append new tags.
az tag update --resource-id $saID \
              --operation merge \
              --tags <tagName>=<tagValue>

# Get a list of all tags.
az tag list --resource-id $saID
```

----------------------------------------

TITLE: Example JSON Output for Azure Account Show
DESCRIPTION: This snippet provides an example of the JSON dictionary output returned by the `az account show` command. It illustrates the structure of the account object, including fields like `environmentName`, `name`, `state`, and nested `user` information. Some fields are omitted for brevity.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_1

LANGUAGE: JSON
CODE:
```
bash-5.1# az account show
{
  ""environmentName"": ""AzureCloud"",
  ""isDefault"": true,
  ""managedByTenants"": [],
  ""name"": ""My test subscription"",
  ""state"": ""Enabled"",
  ""user"": {
    ""name"": ""user@contoso.com"",
    ""type"": ""user""
  }
}
```

----------------------------------------

TITLE: Starting Azure CLI Docker Container with SSH Key Mounting
DESCRIPTION: This command starts a Docker container with the Azure CLI, similar to the basic run command, but additionally mounts the user's SSH keys from the host environment (`$HOME/.ssh`) into the container's `/root/.ssh` directory. This allows the CLI within the container to access SSH keys for operations requiring them.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/run-azure-cli-docker.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker run -it --mount type=bind,src=""$HOME""/.ssh,dst=/root/.ssh mcr.microsoft.com/azure-cli:cbl-mariner2.0
```

----------------------------------------

TITLE: Installing or Updating Azure CLI via Script (Bash)
DESCRIPTION: This snippet uses 'curl' to download and execute the Azure CLI installation script. It's used for both initial installation and updating an existing CLI instance, ensuring the latest version is obtained. A shell restart might be required for changes to take effect.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-linux-script.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -L https://aka.ms/InstallAzureCli | bash
```

----------------------------------------

TITLE: Manage Zone-Redundant High Availability for MySQL Flexible Server (Azure CLI)
DESCRIPTION: This script demonstrates how to create and manage a zone-redundant highly available Azure Database for MySQL Flexible Server. It includes commands for server creation, firewall rule configuration, and updating server properties to ensure high availability across availability zones.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_76

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server firewall-rule create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server update
```

----------------------------------------

TITLE: Storing Default Azure Subscription ID in PowerShell
DESCRIPTION: This PowerShell snippet retrieves the ID of the default Azure subscription and stores it in a variable. It uses `az account list` with a JMESPath query to identify the default subscription and `tsv` output. The ID is then displayed using `Write-Host`.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_5

LANGUAGE: PowerShell
CODE:
```
$subscriptionId = az account list --query ""[?isDefault].id"" --output tsv
Write-Host $subscriptionId
```

----------------------------------------

TITLE: INI Format for Azure CLI Alias with Positional Arguments
DESCRIPTION: This snippet illustrates the INI file format for defining an Azure CLI alias that accepts positional arguments. The alias name in the section header `[alias_name {{ arg1 }} {{ arg2 }} ...]` includes placeholders for arguments, which are then used within the `command` definition. This allows for creating aliases that dynamically incorporate user-provided values.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extension-alias.md#_snippet_14

LANGUAGE: ini
CODE:
```
[alias_name {{ arg1 }} {{ arg2 }} ...]
command = invoked_commands_including_args
```

----------------------------------------

TITLE: Monitor and Scale MySQL Flexible Server (Azure CLI)
DESCRIPTION: This script provides an example of monitoring and scaling an Azure Database for MySQL Flexible Server. It uses commands to show account details, list monitoring metrics, create a server, configure firewall rules, and update server properties for scaling.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_79

LANGUAGE: Azure CLI
CODE:
```
az account show
```

LANGUAGE: Azure CLI
CODE:
```
az monitor metrics list
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server firewall-rule create
```

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server update
```

----------------------------------------

TITLE: Listing Azure Storage Accounts with JMESPath Query (PowerShell)
DESCRIPTION: This command lists Azure storage accounts and projects their names and primary blob endpoints into a table format. It uses a JMESPath query with embedded double quotes, which is compatible with PowerShell 5.1 and 7 in Windows environments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_11

LANGUAGE: azurecli
CODE:
```
az storage account list --query '[].{""SA Name"":name,""Primary endpoint"":primaryEndpoints.blob}' --output table
```

----------------------------------------

TITLE: Waiting for Azure Resource Group Deletion with Azure CLI
DESCRIPTION: This command allows you to wait until the specified resource group has been completely deleted. The --deleted parameter ensures the command only completes once the resource group no longer exists, providing a way to monitor the progress of the deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-vm-tutorial-6.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az group wait --name $resourceGroup --deleted
```

----------------------------------------

TITLE: Querying Storage Accounts by Name Pattern (PowerShell)
DESCRIPTION: This PowerShell command lists Azure storage accounts within a specified resource group whose names contain 'msdocs'. It retrieves the account name, kind, primary location, and creation timestamp, presenting the results in a table format.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-3-use-variables.md#_snippet_8

LANGUAGE: powershell
CODE:
```
az storage account list --resource-group $rgName `
                        --query ""[?contains(name, 'msdocs')].{saName:name, saKind:kind, saPrimaryLocation:primaryLocation, createdTimeStamp:creationTime}"" `
                        --output table
```

----------------------------------------

TITLE: Configuring NAT Gateway for Azure Container Instances (Azure CLI)
DESCRIPTION: This snippet shows how to deploy Azure Container Instances and configure a NAT Gateway for managing outbound network traffic, including creating public IP addresses and updating virtual network subnets.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_12

LANGUAGE: Bash
CODE:
```
az container create
az container logs
az network nat gateway create
az network public-ip create
az network public-ip show
az network vnet subnet update
```

----------------------------------------

TITLE: Creating Cassandra Cosmos DB Keyspace and Table (Azure CLI)
DESCRIPTION: This snippet outlines the Azure CLI commands to create a new Cosmos DB account, followed by the creation of a Cassandra keyspace and a table within it.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_15

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb cassandra keyspace create
az cosmosdb cassandra table create
az cosmosdb create
```

----------------------------------------

TITLE: Updating and Displaying Azure Storage Container Metadata (Azure CLI)
DESCRIPTION: This script defines a metadata string and then updates an Azure storage container's metadata using `az storage container metadata update`. It subsequently displays the updated metadata using `az storage container metadata show`, leveraging previously set environment variables for authentication.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_26

LANGUAGE: azurecli
CODE:
```
metadata=""key=value pie=delicious"" # Define metadata
az storage container metadata update \
    --name $container \
    --metadata $metadata # Update the metadata
az storage container metadata show \
    --name $containerName # Show the metadata
```

----------------------------------------

TITLE: Configuring apt to Use HTTP/HTTPS Proxy (apt.conf)
DESCRIPTION: This configuration block, placed in an `apt` configuration file (e.g., `40proxies` or `99local`), explicitly sets HTTP and HTTPS proxy settings for `apt` operations. It allows `apt` to connect through a specified proxy server, optionally including username and password for basic authentication, which is crucial in restricted network environments.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-linux-apt.md#_snippet_20

LANGUAGE: apt.conf
CODE:
```
Acquire {
    http::proxy ""http://[username]:[password]@[proxy]:[port]"";
    https::proxy ""https://[username]:[password]@[proxy]:[port]"";
}
```

----------------------------------------

TITLE: Creating Azure CLI Alias with Environment Variable
DESCRIPTION: This command creates an alias 'create-rg' that takes a group name as an argument. It creates a resource group in 'eastus' and assigns an 'owner' tag whose value is dynamically set from the `$USER` environment variable at runtime, demonstrating dynamic tag assignment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-extension-alias.md#_snippet_11

LANGUAGE: azurecli-interactive
CODE:
```
az alias create \
    --name ""create-rg {{ groupName }}"" \
    --command ""group create --name {{ groupName }} --location eastus --tags owner=\$USER""
```

----------------------------------------

TITLE: Querying Multiple VM Properties (Bash)
DESCRIPTION: Illustrates how to retrieve multiple properties from a VM's details using a multiselect list in an Azure CLI query. The query `[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]` fetches the VM name, admin username, and the first SSH public key data. This example is for Bash.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_36

LANGUAGE: Azure CLI
CODE:
```
az vm show --resource-group QueryDemo --name TestVM --query ""[name, osProfile.adminUsername, osProfile.linuxConfiguration.ssh.publicKeys[0].keyData]""
```

----------------------------------------

TITLE: Deploying Container Instances with NAT Gateway (Azure CLI)
DESCRIPTION: This script shows how to deploy Azure Container Instances and configure a NAT Gateway for outbound internet access. It involves creating a public IP, a NAT gateway, and associating it with a VNet subnet.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_25

LANGUAGE: Azure CLI
CODE:
```
az container create
az container logs
az network nat gateway create
az network public-ip create
az network public-ip show
az network vnet subnet update
```

----------------------------------------

TITLE: Manually Scale Azure Web App (Azure CLI)
DESCRIPTION: This script creates an Azure App Service web app and demonstrates how to manually scale the underlying App Service plan. It allows for adjusting the instance count to meet varying demand.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_3

LANGUAGE: Bash
CODE:
```
az appservice plan create
az appservice plan update
az webapp create
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Creation Time (PowerShell)
DESCRIPTION: This command filters Azure storage accounts to show only those created after '2024-02-01'. It demonstrates using a JMESPath query with a creationTime filter, where the date value is enclosed in embedded single quotes, suitable for PowerShell in Windows.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_12

LANGUAGE: azurecli
CODE:
```
az storage account list --query '[?creationTime >=''2024-02-01''].{""SA Name"":name,""Primary endpoint"":primaryEndpoints.blob}' --output table
```

----------------------------------------

TITLE: Uploading File to Azure Media Services Asset using Azure CLI
DESCRIPTION: This script uploads a file to a blob storage container associated with an Azure Media Services asset. It uses the `az storage blob upload` command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_52

LANGUAGE: Azure CLI
CODE:
```
az storage blob upload
```

----------------------------------------

TITLE: Displaying Variable Value in Bash
DESCRIPTION: This snippet demonstrates how to display the value of a variable in a Bash shell using the `echo` command. It's a common way to verify variable assignments or debug scripts.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_0

LANGUAGE: Bash
CODE:
```
echo $varResourceGroup
```

----------------------------------------

TITLE: Adding Azure CLI Software Repository (Debian/Ubuntu)
DESCRIPTION: This command dynamically determines the Linux distribution codename using `lsb_release -cs` and then adds the official Azure CLI software repository to the system's `apt` sources. This allows `apt` to find and install the Azure CLI package from Microsoft's servers, ensuring access to the latest versions.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/cli-install-linux-apt.md#_snippet_4

LANGUAGE: bash
CODE:
```
AZ_DIST=$(lsb_release -cs)
echo ""Types: deb
URIs: https://packages.microsoft.com/repos/azure-cli/
Suites: ${AZ_DIST}
Components: main
Architectures: $(dpkg --print-architecture)
Signed-by: /etc/apt/keyrings/microsoft.gpg"" | sudo tee /etc/apt/sources.list.d/azure-cli.sources
```

----------------------------------------

TITLE: Logging into Azure CLI with Specific Tenant using --tenant
DESCRIPTION: This command demonstrates how to explicitly specify the desired tenant when logging into Azure CLI using the `--tenant` parameter. This serves as a workaround for scenarios where Azure CLI attempts to sign in with the first tenant found, which might be one requiring MFA, leading to authentication failures.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/authenticate-azure-cli-mfa.md#_snippet_2

LANGUAGE: azurecli
CODE:
```
az login --tenant 00000000-0000-0000-0000-000000000000
```

----------------------------------------

TITLE: Bulk Removing IP Firewall Rules from Cosmos DB (Azure CLI)
DESCRIPTION: This snippet demonstrates how to bulk remove IP firewall rules from an existing Cosmos DB account using Azure CLI. It involves setting the account, listing, showing details, and updating the firewall settings.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_23

LANGUAGE: Azure CLI
CODE:
```
az account set
az cosmosdb list
az cosmosdb show
az cosmosdb update
```

----------------------------------------

TITLE: Updating and Displaying Azure Storage Container Metadata (Azure CLI)
DESCRIPTION: This snippet defines a metadata string and then uses the 'az storage container metadata update' command to apply it to a specified container. It then uses 'az storage container metadata show' to verify the updated metadata. This demonstrates how to manage custom metadata for Azure Storage containers.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_27

LANGUAGE: azurecli
CODE:
```
metadata=""key=value pie=delicious"" # Define metadata
az storage container metadata update \
    --name $container \
    --metadata $metadata # Update the metadata
az storage container metadata show \
    --name $containerName # Show the metadata
```

----------------------------------------

TITLE: Create Azure Function App on Consumption Plan (Azure CLI)
DESCRIPTION: This script creates an Azure Function App utilizing the Consumption plan, which automatically scales resources. It also provisions a storage account required for the function app.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_9

LANGUAGE: Bash
CODE:
```
az functionapp create
az storage account create
```

----------------------------------------

TITLE: Managing Egress IP Address for Azure Container Instances (Azure CLI)
DESCRIPTION: This snippet details how to control outbound traffic from Azure Container Instances using Azure Firewall. It involves creating a firewall, public IP, route tables, and configuring firewall rules for egress.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_11

LANGUAGE: Bash
CODE:
```
az container create
az container logs
az container show
az extension add
az network firewall application-rule create
az network firewall create
az network firewall ip-config create
az network firewall ip-config list
az network firewall nat-rule create
az network firewall update
az network public-ip create
az network public-ip show
az network route-table create
az network route-table route create
az network vnet subnet create
az network vnet subnet update
```

----------------------------------------

TITLE: Configuring Egress IP for Container Instances with Firewall (Azure CLI)
DESCRIPTION: This script demonstrates how to control outbound traffic for Azure Container Instances using an Azure Firewall and custom routing. It involves creating a firewall, public IPs, route tables, and configuring firewall rules for egress.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_24

LANGUAGE: Azure CLI
CODE:
```
az container create
az container logs
az container show
az extension add
az network firewall application-rule create
az network firewall create
az network firewall ip-config create
az network firewall ip-config list
az network firewall nat-rule create
az network firewall update
az network public-ip create
az network public-ip show
az network route-table create
az network route-table route create
az network vnet subnet create
az network vnet subnet update
```

----------------------------------------

TITLE: Listing Installed Azure CLI Extensions
DESCRIPTION: This snippet demonstrates the `az extension list` command, which is used to view all currently installed Azure CLI extensions. This command provides more detailed information about extensions, including their installation path and status, compared to the `az version` command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/install-azure-cli.md#_snippet_1

LANGUAGE: Azure CLI
CODE:
```
az extension list
```

----------------------------------------

TITLE: Creating Azure SignalR Service and Listing Keys (Azure CLI)
DESCRIPTION: This snippet shows how to provision an Azure SignalR service instance and then retrieve its access keys, which are necessary for client and server connections.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_1

LANGUAGE: Bash
CODE:
```
az signalr create
az signalr key list
```

----------------------------------------

TITLE: Disabling the Azure CLI Subscription Selector
DESCRIPTION: This snippet demonstrates how to disable the new subscription selector feature, introduced in Azure CLI version 2.61.0, by setting the `core.login_experience_v2` configuration property to 'off'. After disabling, subsequent `az login` commands will not prompt for subscription selection.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/authenticate-azure-cli-interactively.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az config set core.login_experience_v2=off
az login
```

----------------------------------------

TITLE: Deleting a Single Azure Storage Container (Azure CLI)
DESCRIPTION: This command uses `az storage container delete` to remove a single specified Azure storage container. It requires the `--name` parameter to identify the container to be deleted.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_27

LANGUAGE: azurecli
CODE:
```
az storage container delete \
    --name $container
```

----------------------------------------

TITLE: Waiting for Azure Resource Group Deletion Completion with Azure CLI
DESCRIPTION: This command blocks the CLI execution until the specified Azure resource group, identified by '$resourceGroup', has been successfully deleted. It allows users to monitor the progress and confirm the completion of the cleanup operation after initiating a deletion.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-6.md#_snippet_1

LANGUAGE: azurecli-interactive
CODE:
```
az group wait --name $resourceGroup --deleted
```

----------------------------------------

TITLE: Updating Nested Property with Partial Shorthand Syntax (Bash)
DESCRIPTION: Shows how to update a property within a nested JSON object using partial value shorthand syntax. Dot notation (`parent.child`) is used to access the nested property, with the value provided as a flattened JSON string.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_5

LANGUAGE: Bash
CODE:
```
az some-command --contact address.details=""{line1:'15590 NE 31st St',line2:'Redmond, WA'}""
```

----------------------------------------

TITLE: Creating Cosmos DB Cassandra Resources with Azure CLI
DESCRIPTION: This snippet outlines the fundamental steps to create an Azure Cosmos DB account, a Cassandra keyspace, and a Cassandra table, establishing a new Cassandra API database.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_28

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb cassandra keyspace create
az cosmosdb cassandra table create
az cosmosdb create
```

----------------------------------------

TITLE: Deleting an Azure Subscription Lock (Azure CLI)
DESCRIPTION: This command removes a specific lock from the Azure subscription, identified by its name 'Cannot delete subscription'. This action allows the previously restricted operations on the subscription to resume.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_17

LANGUAGE: azurecli-interactive
CODE:
```
az account lock delete --name ""Cannot delete subscription""
```

----------------------------------------

TITLE: Getting JSON Dictionary Properties of an Azure Storage Account using Azure CLI
DESCRIPTION: This command retrieves the `primaryEndpoints` dictionary for a specified Azure storage account. It uses the `az storage account show` command with the `--query` parameter to apply a JMESPath query, returning a JSON object of endpoints.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_0

LANGUAGE: azurecli
CODE:
```
az storage account show --resource-group <msdocs-tutorial-rg-00000000> \
                        --name <msdocssa000000000> \
                        --query primaryEndpoints
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Creation Time (PowerShell)
DESCRIPTION: Demonstrates filtering Azure Storage Accounts by their `creationTime` property, including the time component in the comparison. It retrieves the storage account name, ID, and SKU for accounts created after a specific timestamp, using PowerShell syntax.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_25

LANGUAGE: azurecli-interactive
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> `
    --query ""[?creationTime >='2021-11-15T19:14:27.103127+00:00'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Listing Azure Storage Accounts by Name Pattern (PowerShell)
DESCRIPTION: This command lists Azure storage accounts whose names contain 'msdocs' within a specified resource group. It returns the account name, kind, primary location, and creation timestamp in a table format. Requires `rgName` variable to be set.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_9

LANGUAGE: PowerShell
CODE:
```
az storage account list --resource-group $rgName `
                        --query ""[?contains(name, 'msdocs')].{saName:name, saKind:kind, saPrimaryLocation:primaryLocation, createdTimeStamp:creationTime}"" `
                        --output table
```

----------------------------------------

TITLE: Executing Azure CLI Complete Command Alias
DESCRIPTION: This command executes the 'ls-groups' alias, which was previously defined to list resource groups with specific details in a table format. It demonstrates how a complex command can be simplified into a single alias call.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/azure-cli-extension-alias.md#_snippet_7

LANGUAGE: Azure CLI
CODE:
```
az ls-groups
```

----------------------------------------

TITLE: Listing Azure Storage Accounts by Name Pattern (Bash)
DESCRIPTION: This command lists Azure storage accounts whose names contain 'msdocs' within a specified resource group. It returns the account name, kind, primary location, and creation timestamp in a table format. Requires `rgName` variable to be set.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-3-use-variables.md#_snippet_5

LANGUAGE: Bash
CODE:
```
az storage account list --resource-group $rgName \
                        --query ""[?contains(name, 'msdocs')].{saName:name, saKind:kind, saPrimaryLocation:primaryLocation, createdTimeStamp:creationTime}"" \
                        --output table
```

----------------------------------------

TITLE: Creating an Azure Management Group
DESCRIPTION: This snippet shows how to create a new Azure management group using the `az account management-group create` command. Management groups help organize subscriptions for centralized policy and access management. The `--name` parameter specifies the desired name for the new group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/manage-azure-subscriptions-azure-cli.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
az account management-group create --name Contoso01
```

----------------------------------------

TITLE: Listing Virtual Machines in Table Format
DESCRIPTION: This snippet demonstrates how to display virtual machine information in an ASCII table format, which is optimized for quick human readability and scanning. Note that nested objects are not included in this format, making it suitable for a high-level overview.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/format-output-azure-cli.md#_snippet_2

LANGUAGE: Azure CLI
CODE:
```
az vm list --output table
```

LANGUAGE: Output
CODE:
```
Name         ResourceGroup    Location
-----------  ---------------  ----------
DemoVM010    DEMORG1          westus
demovm212    DEMORG1          westus
demovm213    DEMORG1          westus
KBDemo001VM  RGDEMO001        westus
KBDemo020    RGDEMO001        westus
```

----------------------------------------

TITLE: Managing Azure MySQL Server Configurations using Azure CLI
DESCRIPTION: This script allows listing, setting, and showing configurations for an Azure Database for MySQL server, including server creation. It uses `az mysql server configuration list`, `az mysql server configuration set`, `az mysql server configuration show`, and `az mysql server create` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_54

LANGUAGE: Azure CLI
CODE:
```
az mysql server configuration list
az mysql server configuration set
az mysql server configuration show
az mysql server create
```

----------------------------------------

TITLE: Managing Azure MySQL Server Configurations (Azure CLI)
DESCRIPTION: This script allows listing, setting, and showing server configurations for an Azure MySQL server, including creating a new server for configuration management.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_67

LANGUAGE: Bash
CODE:
```
az mysql server configuration list
az mysql server configuration set
az mysql server configuration show
az mysql server create
```

----------------------------------------

TITLE: Getting Azure Container Registry Details (PowerShell)
DESCRIPTION: This snippet uses `az rest` with the GET method to retrieve details of an Azure Container Registry. In a PowerShell environment, the `containerRegistryName` variable must be enclosed in `{}` brackets when used in the URL due to the `?` character being allowed in variable names.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-rest-command.md#_snippet_5

LANGUAGE: PowerShell
CODE:
```
az rest --method get `
    --url https://management.azure.com/subscriptions/$subscriptionId/resourceGroups/$resourceGroup/providers/Microsoft.ContainerRegistry/registries/${containerRegistryName}?api-version=2023-01-01-preview
```

----------------------------------------

TITLE: JSON Example for Update Command Context
DESCRIPTION: Presents a sample JSON object representing an existing resource, used to illustrate how `null` values can be applied in update commands to modify or unset properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_25

LANGUAGE: json
CODE:
```
{
  ""contact"": {
    ""name"": ""Bill"",
    ""age"": 20,
    ""paid"": true,
    ""emails"": [
      ""Bill@microsoft.com"",
      ""Bill@outlook.com""
    ],
    ""address"": {
      ""country"": ""USA"",
      ""company"": ""Microsoft"",
      ""details"": {
        ""line1"": ""15590 NE 31st St"",
        ""line2"": ""Redmond, WA""
      }
    }
  },

  ""other_properties"": {}
}
```

----------------------------------------

TITLE: Example JSON Output for Azure Container Registry Resource
DESCRIPTION: This JSON object represents the typical response structure when querying an Azure Container Registry resource. It includes details such as ID, location, name, properties (e.g., admin user enabled, policies), SKU, and system data. This output is common for both Bash and PowerShell `az rest` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-rest-command.md#_snippet_4

LANGUAGE: JSON
CODE:
```
{
  ""id"": ""/subscriptions/<subscriptionId>/resourceGroups/<resourceGroup>/providers/Microsoft.ContainerRegistry/registries/<containerRegistryName>"",
  ""location"": ""<location>"",
  ""name"": ""<containerRegistryName>"",
  ""properties"": {
    ""adminUserEnabled"": true,
    ""anonymousPullEnabled"": false,
    ""creationDate"": ""2024-01-03T18:38:36.7089583Z"",
    ""dataEndpointEnabled"": false,
    ""dataEndpointHostNames"": [],
    ""encryption"": {
      ""status"": ""disabled""
    },
    ""loginServer"": ""<containerRegistryName>.azurecr.io"",
    ""networkRuleBypassOptions"": ""AzureServices"",
    ""policies"": {
      ""azureADAuthenticationAsArmPolicy"": {
        ""status"": ""enabled""
      },
      ""exportPolicy"": {
        ""status"": ""enabled""
      },
      ""quarantinePolicy"": {
        ""status"": ""disabled""
      },
      ""retentionPolicy"": {
        ""days"": 7,
        ""lastUpdatedTime"": ""2024-01-03T19:44:53.9770581+00:00"",
        ""status"": ""disabled""
      },
      ""softDeletePolicy"": {
        ""lastUpdatedTime"": ""2024-01-03T19:44:53.9771117+00:00"",
        ""retentionDays"": 7,
        ""status"": ""disabled""
      },
      ""trustPolicy"": {
        ""status"": ""disabled"",
        ""type"": ""Notary""
      }
    },
    ""privateEndpointConnections"": [],
    ""provisioningState"": ""Succeeded"",
    ""publicNetworkAccess"": ""Enabled"",
    ""zoneRedundancy"": ""Disabled""
  },
  ""sku"": {
    ""name"": ""Standard"",
    ""tier"": ""Standard""
  },
  ""systemData"": {
    ""createdAt"": ""2024-01-03T18:38:36.7089583+00:00"",
    ""createdBy"": ""<username>@microsoft.com"",
    ""createdByType"": ""User"",
    ""lastModifiedAt"": ""2024-01-03T19:44:53.684342+00:00"",
    ""lastModifiedBy"": ""<username>@microsoft.com"",
    ""lastModifiedByType"": ""User""
  },
  ""tags"":{},
  ""type"": ""Microsoft.ContainerRegistry/registries""
}
```

----------------------------------------

TITLE: Create and Manage Azure Premium Cache for Redis Cluster (Azure CLI)
DESCRIPTION: This script demonstrates how to create and manage an Azure Premium Cache for Redis instance with clustering. It includes commands to create a Redis cache, delete it, list its access keys, and show its properties, specifically for premium tier with clustering.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_90

LANGUAGE: Azure CLI
CODE:
```
az redis create
```

LANGUAGE: Azure CLI
CODE:
```
az redis delete
```

LANGUAGE: Azure CLI
CODE:
```
az redis list-keys
```

LANGUAGE: Azure CLI
CODE:
```
az redis show
```

----------------------------------------

TITLE: Preserving Whitespace in Azure CLI Arguments (PowerShell)
DESCRIPTION: This example illustrates how PowerShell preserves double quotes and any enclosed whitespace within Azure CLI arguments. The argument, including the trailing space, is passed as a single string to the Azure CLI command.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-powershell.md#_snippet_20

LANGUAGE: azurecli
CODE:
```
az ""a&b "" --debug
```

----------------------------------------

TITLE: Appending Proxy Certificate to CA Bundle for Azure CLI
DESCRIPTION: This snippet illustrates how to append a proxy server's certificate to an existing CA bundle file (like `cacert.pem`) to resolve SSL verification errors when using Azure CLI behind a proxy. This ensures the CLI trusts the proxy's self-signed certificate.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-troubleshooting.md#_snippet_6

LANGUAGE: text
CODE:
```
<Original cacert.pem>

-----BEGIN CERTIFICATE-----
<Your proxy's certificate here>
-----END CERTIFICATE-----
```

----------------------------------------

TITLE: Displaying Stored VM IP Address - Bash
DESCRIPTION: This simple Bash command displays the value of the `vmIpAddress` shell variable, allowing verification of the stored IP address against the one used for initial VM connection.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/azure-cli-vm-tutorial-5.md#_snippet_5

LANGUAGE: Bash
CODE:
```
echo $vmIpAddress
```

----------------------------------------

TITLE: Removing a Subscription from an Azure Management Group
DESCRIPTION: This snippet shows how to remove a specific Azure subscription from a management group using the `az account management-group subscription remove` command. The `--name` parameter identifies the management group, and `--subscription` specifies the subscription to be removed. Removing a subscription from a management group does not delete or deactivate the subscription itself.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_12

LANGUAGE: Azure CLI
CODE:
```
az account management-group subscription remove --name Contoso01 --subscription ""My Demos""
```

----------------------------------------

TITLE: Filtering Azure Storage Accounts by Creation Date (PowerShell)
DESCRIPTION: Shows how to filter Azure Storage Accounts by their `creationTime` property, comparing only the date component. It fetches the storage account name, ID, and SKU for accounts created on or after a specific date, adapted for PowerShell.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_26

LANGUAGE: azurecli-interactive
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> `
    --query ""[?creationTime >='2021-11-15'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Updating Nested Property with Partial Value Shorthand in Azure CLI
DESCRIPTION: Illustrates how to update a property within a nested object using partial value shorthand syntax in Azure CLI. Dot notation is used to access the nested property, allowing for precise modifications.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-shorthand.md#_snippet_5

LANGUAGE: Bash
CODE:
```
az some-command --contact address.details=""{line1:'15590 NE 31st St',line2:'Redmond, WA'}""
```

----------------------------------------

TITLE: Stop and Delete Virtual Machine in Azure DevTest Lab (Azure CLI)
DESCRIPTION: This script demonstrates how to stop and then delete a virtual machine within an Azure DevTest Lab using Azure CLI commands. It utilizes 'az lab vm stop' to halt the VM and 'az lab vm delete' to remove it, providing a complete cleanup operation for lab VMs.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_44

LANGUAGE: Azure CLI
CODE:
```
az lab vm delete
az lab vm stop
```

----------------------------------------

TITLE: Deleting an Azure Management Group
DESCRIPTION: This snippet demonstrates how to delete an Azure management group using the `az account management-group delete` command. The `--name` parameter specifies the management group to be deleted. Deleting a management group does not delete or deactivate the subscriptions it contained; they simply become unassociated from that management group.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_13

LANGUAGE: Azure CLI
CODE:
```
az account management-group delete --name Contoso01
```

----------------------------------------

TITLE: Upgrading Azure CLI Interactive Mode Extension
DESCRIPTION: This command upgrades the Azure CLI interactive mode extension to its latest version. It is a prerequisite for accessing and utilizing the new AI functionalities and other enhanced features within the interactive environment.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/interactive-azure-cli.md#_snippet_10

LANGUAGE: azurecli-interactive
CODE:
```
az extension add --name interactive --upgrade
```

----------------------------------------

TITLE: Mounting Files Storage to Linux Function App (Azure CLI)
DESCRIPTION: This script demonstrates how to create and configure an Azure Function App on Linux, mount Azure Files storage to it, and manage storage account keys and directories. It involves creating a function app, a storage account, and then linking them.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_13

LANGUAGE: Azure CLI
CODE:
```
az functionapp create
az storage account create
az storage account keys list
az storage directory create
az storage share create
az webapp config storage-account add
az webapp config storage-account list
```

----------------------------------------

TITLE: Creating Cosmos DB with IP Firewall Configuration using Azure CLI
DESCRIPTION: This snippet demonstrates how to create an Azure Cosmos DB account, implicitly allowing for the configuration of IP firewall rules during or after creation to restrict network access.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_34

LANGUAGE: Azure CLI
CODE:
```
az cosmosdb create
```

----------------------------------------

TITLE: Storing Azure Subscription IDs in PowerShell
DESCRIPTION: These PowerShell commands illustrate how to store Azure subscription IDs into variables. The first example retrieves the ID of the default subscription, while the second retrieves the ID of a subscription by its exact name. Both use `az account list` with JMESPath queries and `--output tsv` to get the ID, then `Write-Host` to display it.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/manage-azure-subscriptions-azure-cli.md#_snippet_5

LANGUAGE: PowerShell
CODE:
```
$subscriptionId = az account list --query ""[?isDefault].id"" --output tsv
Write-Host $subscriptionId

# store a subscription of certain name in a variable
$subscriptionId = az account list --query ""[?name=='my case sensitive subscription full name'].id"" --output tsv
Write-Host $subscriptionId
```

----------------------------------------

TITLE: Flattening Azure VM List Properties (Azure CLI)
DESCRIPTION: This snippet demonstrates how to flatten an array of Azure VMs using the JMESPath `[]` operator to extract specific properties for each VM. It lists the name, OS type, and admin username for all VMs in a resource group, presenting them as a flattened list of objects. This is useful for processing multiple VM records.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/query-azure-cli-concepts.md#_snippet_2

LANGUAGE: bash
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

LANGUAGE: powershell
CODE:
```
az vm list --resource-group QueryDemo --query ""[].{Name:name, OS:storageProfile.osDisk.osType, admin:osProfile.adminUsername}""
```

----------------------------------------

TITLE: Querying Azure Storage Accounts by Creation Date (Azure CLI)
DESCRIPTION: This snippet demonstrates how to list Azure Storage Accounts and filter them based on their creation date, ignoring the time component, and then outputting selected properties.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/get-started-tutorial-2-environment-syntax.md#_snippet_32

LANGUAGE: azurecli
CODE:
```
az storage account list --resource-group <msdocs-tutorial-rg-00000000> ^
    --query ""[?creationTime >='2021-11-15'].{saName:name, saID: id, sku: sku.name}""
```

----------------------------------------

TITLE: Formatting Azure Account Output as Table (Bash/Azure CLI)
DESCRIPTION: This snippet demonstrates how to format the output of the `az account show` command as an ASCII table using the `--output table` argument. While nested objects are not displayed in table format, their values can still be used for filtering in queries.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-bash.md#_snippet_3

LANGUAGE: azurecli-interactive
CODE:
```
az account show --output table
```

----------------------------------------

TITLE: Creating and Connecting to Burstable Azure MySQL Flexible Server with Public Access using Azure CLI
DESCRIPTION: This script creates a burstable Azure Database for MySQL Flexible Server with public access, configures a firewall rule, and establishes a connection. It uses `az mysql flexible-server connect`, `az mysql flexible-server create`, and `az mysql flexible-server firewall-rule create` commands.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/samples-azure-cli-samples-repo.md#_snippet_61

LANGUAGE: Azure CLI
CODE:
```
az mysql flexible-server connect
az mysql flexible-server create
az mysql flexible-server firewall-rule create
```

----------------------------------------

TITLE: Creating and Connecting to Azure MySQL Flexible Server with Public Access (Azure CLI)
DESCRIPTION: This script creates an Azure MySQL Flexible Server with public access, configures a firewall rule, and demonstrates how to connect to it, suitable for burstable workloads.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_74

LANGUAGE: Bash
CODE:
```
az mysql flexible-server connect
az mysql flexible-server create
az mysql flexible-server firewall-rule create
```

----------------------------------------

TITLE: Unsetting Object Property with Null in Update Command (Bash)
DESCRIPTION: Demonstrates using `null` in an update command to unset or remove the value of a specific property, effectively resetting it to an empty or undefined state.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_26

LANGUAGE: bash
CODE:
```
az some-update-command --contact address=null
```

----------------------------------------

TITLE: Escaping Ampersand in Azure CLI Parameters (Single Quotes)
DESCRIPTION: This command demonstrates how to correctly pass a parameter containing an ampersand to Azure CLI in PowerShell by enclosing the entire parameter value in single quotes, which preserves the inner double quotes and treats the ampersand as a literal character.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_16

LANGUAGE: azurecli
CODE:
```
az '""a&b""' --debug
```

----------------------------------------

TITLE: Renaming Azure Storage Account Columns with Spaces - PowerShell (Windows, Double Double Quotes)
DESCRIPTION: This example demonstrates an alternative method for renaming output columns with spaces in Azure CLI for PowerShell on Windows. It uses single quotes to wrap the query string and double double quotes (`""""...""""`) to represent embedded double quotes for column names. This syntax also works successfully in Windows PowerShell 5.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-powershell.md#_snippet_8

LANGUAGE: azurecli
CODE:
```
az storage account list --query '[].{\""\""SA Name\""\"":name,\""\""Primary endpoint\""\"":primaryEndpoints.blob}' --output table
```

----------------------------------------

TITLE: Passing String with Special Characters using Full Value Shorthand (Bash)
DESCRIPTION: Demonstrates how to pass a JSON string containing special characters or spaces using full value shorthand syntax. Single quotes are used around the string values within the JSON to prevent misinterpretation by the parser.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/use-azure-cli-successfully-shorthand.md#_snippet_10

LANGUAGE: Bash
CODE:
```
az some-command --contact ""{name:'Bill RP',age:20,paid:true,data:'{a: [1, 2]}'}""
```

----------------------------------------

TITLE: Querying Azure Account Details (Default JSON Output)
DESCRIPTION: This snippet demonstrates how to query the current Azure account details using the `az account show` command. The first command shows the default JSON output, while the second explicitly specifies JSON output, which is the default behavior. It returns a JSON dictionary representing the account object.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/use-azure-cli-successfully-bash.md#_snippet_0

LANGUAGE: Bash
CODE:
```
az account show
az account show --output json # JSON is the default format
```

----------------------------------------

TITLE: Setting Default Azure CLI Output Format to JSON (Azure CLI)
DESCRIPTION: This command reverts the default output format for Azure CLI commands back to `json`. This setting is common for tutorials and general use, allowing users to view structured JSON output for command results directly in the console.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/get-started-tutorial-1-prepare-environment.md#_snippet_10

LANGUAGE: Azure CLI
CODE:
```
az config set core.output=json
```

----------------------------------------

TITLE: Starting Azure CLI Docker Container with SSH Keys Mounted
DESCRIPTION: This command starts the Azure CLI Docker container and mounts the user's SSH keys from the host environment into the container. This is useful for scenarios where the CLI needs to access resources secured by SSH keys, such as Git repositories.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/run-azure-cli-docker.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker run -it --mount type=bind,src=""$HOME""/.ssh,dst=/root/.ssh mcr.microsoft.com/azure-cli:cbl-mariner2.0
```

----------------------------------------

TITLE: Managing Azure Batch Account (Azure CLI)
DESCRIPTION: This script covers the lifecycle of an Azure Batch account, including creation, listing keys, logging in, setting properties, and showing details. It also includes the creation of a supporting storage account.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/LTS-version/includes/samples-azure-cli-samples-repo.md#_snippet_18

LANGUAGE: Azure CLI
CODE:
```
az batch account create
az batch account keys list
az batch account login
az batch account set
az batch account show
az storage account create
```

----------------------------------------

TITLE: Installing Azure CLI on RHEL 7.6 with Python 3.6+ Script
DESCRIPTION: This command downloads and executes a specific installation script tailored for RHEL 7.6. This script addresses Python dependency issues by building a Python 3.6+ environment from source, enabling Azure CLI installation on older systems.
SOURCE: https://github.com/microsoftdocs/azure-docs-cli/blob/main/docs-ref-conceptual/Latest-version/includes/cli-install-linux-dnf.md#_snippet_11

LANGUAGE: Bash
CODE:
```
curl -sL https://azurecliprod.blob.core.windows.net/rhel7_6_install.sh | sudo bash
```","azure cli",""