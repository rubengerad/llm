"html5","TITLE: Traversing RcDom Tree and Printing Nodes in Rust
DESCRIPTION: This recursive function `walk` traverses the `RcDom` tree, printing the names of Element nodes and the content of Text nodes with indentation. It filters out other node types and recursively calls itself for child nodes.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_9

LANGUAGE: Rust
CODE:
```
    fn walk(prefix: &str, handle: Handle) {
        let node = handle.borrow();

        // We print out the prefix before we start
        print!(""{}"", prefix);
        // We are only interested in following nodes:
        // Document, Text and Element, so our match
        // reflects that.
        match node.node {
            Document
                => println!(""#document""),

            Text(ref text)  => {
                println!(""#text {}"", text.escape_default())
            },

            Element(ref name, _) => {
                println!(""{}"", name.local);
            },

            _ => {},

        }

        // We increase indent in child nodes
        let new_indent = {
            let mut temp = String::new();
            temp.push_str(prefix);
            temp.push_str(""    "");
            temp
        };

        for child in node.children.iter()
            // In order to avoid weird indentation, we filter
            // only Text/Element nodes.
            // We don't need to filter Document since its guaranteed
            // child elements don't contain documents
            .filter(|child| match child.borrow().node {
                Text(_) | Element (_, _) => true,
                _ => false,
            }
        ) {
            // Recursion - Yay!
            walk(&new_indent, child.clone());
        }
    }
```

----------------------------------------

TITLE: Parsing XML with xml5ever (Rust)
DESCRIPTION: Demonstrates a basic example of parsing an XML string using the `xml5ever::parse` function and storing the result in an `RcDom` tree structure. Requires a `TreeSink` implementation.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/README.md#_snippet_1

LANGUAGE: rust
CODE:
```

    let input = ""<xml></xml>"".to_tendril();

    // To parse XML into a tree form, we need a TreeSink
    // luckily xml5ever comes with a static RC backed tree represetation.
    let dom: RcDom = parse(std::iter::once(input), Default::default());

    // Do something with dom

```

----------------------------------------

TITLE: Main Function for XML Tokenization (Rust)
DESCRIPTION: The main function initializes the token sink, reads XML input from stdin into a Tendril, creates and configures the XmlTokenizer, feeds the input, and finalizes token processing.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_4

LANGUAGE: Rust
CODE:
```
fn main() {
    let sink = SimpleTokenPrinter;

    // We need a ByteTendril to read a file
    let mut input = ByteTendril::new();
    // Using SliceExt.read_to_tendril we read stdin
    io::stdin().read_to_tendril(&mut input).unwrap();
    // For xml5ever we need StrTendril, so we reinterpret it
    // into StrTendril.
    //
    // You might wonder, how does `try_reinterpret` know we
    // need StrTendril and the answer is type inference based
    // on `tokenize_xml_to` signature.
    let input = input.try_reinterpret().unwrap();
    // Here we create and run tokenizer
    let mut tok = XmlTokenizer::new(sink, Default::default());
    // We pass input to parsed.
    tok.feed(input);

    // tok.end must be invoked for final bytes to be processed.
    tok.end();
}
```

----------------------------------------

TITLE: Implementing TokenSink for SimpleTokenPrinter (Rust)
DESCRIPTION: Implements the `TokenSink` trait for `SimpleTokenPrinter`, providing the `process_token` method to handle and print different types of tokens generated by the xml5ever tokenizer.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_3

LANGUAGE: Rust
CODE:
```
impl TokenSink for SimpleTokenPrinter {
    fn process_token(&mut self, token: Token) {
        match token {
            CharacterTokens(b) => {
                println!(""TEXT: {}"", &*b);
            },
            NullCharacterToken => print!(""NULL""),
            TagToken(tag) => {
                println!(""{:?} {} "", tag.kind, &*tag.name.local);
            },
            ParseError(err) => {
                println!(""ERROR: {}"", err);
            },
            PIToken(Pi{ref target, ref data}) => {
                println!(""PI : <?{} {}?>"", &*target, &*data);
            },
            CommentToken(ref comment) => {
                println!(""<!--{:?}-->"", &*comment);
            },
            EOFToken => {
                println!(""EOF"");
            },
            DoctypeToken(Doctype{ref name, ref public_id, ..}) => {
                println!(""<!DOCTYPE {:?} {:?}>"", &*name, &*public_id);
            }
        }
    }
}
```

----------------------------------------

TITLE: Adding xml5ever Dependency (TOML)
DESCRIPTION: Add the xml5ever crate as a dependency in your project's `Cargo.toml` file to include it in your Rust project.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/README.md#_snippet_0

LANGUAGE: toml
CODE:
```
[dependencies]
xml5ever = ""0.22""
```

----------------------------------------

TITLE: Adding html5ever Dependency in Cargo.toml (TOML)
DESCRIPTION: This snippet shows how to add the html5ever crate as a dependency to your Rust project's Cargo.toml file. This is the standard method for including external libraries in Rust projects using the Cargo package manager.
SOURCE: https://github.com/servo/html5ever/blob/main/README.md#_snippet_0

LANGUAGE: toml
CODE:
```
[dependencies]
html5ever = ""0.31""
```

----------------------------------------

TITLE: Declaring xml5ever and tendril Dependencies (TOML)
DESCRIPTION: Specifies the required dependencies (`xml5ever` and `tendril`) and their versions in a `Cargo.toml` file for a Rust project using these crates.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_1

LANGUAGE: TOML
CODE:
```
[dependencies]
xml5ever = ""0.2.0""
tendril = ""0.1.3""
```

----------------------------------------

TITLE: Reading Input for XML Parsing in Rust
DESCRIPTION: This snippet demonstrates how to read standard input into a `ByteTendril` and then reinterpret it as a `StrTendril`, which is a suitable input format for the `xml5ever` parser.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_7

LANGUAGE: Rust
CODE:
```
    // We need to allocate an input tendril for xml5ever
    let mut input = ByteTendril::new();
    // Using SliceExt.read_to_tendril functions we can read stdin
    io::stdin().read_to_tendril(&mut input).unwrap();
    let input = input.try_reinterpret().unwrap();
```

----------------------------------------

TITLE: Defining SimpleTokenPrinter Struct (Rust)
DESCRIPTION: Defines a unit struct `SimpleTokenPrinter` which serves as a placeholder to implement the `TokenSink` trait, receiving tokens from the tokenizer.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_2

LANGUAGE: Rust
CODE:
```
struct SimpleTokenPrinter;
```

----------------------------------------

TITLE: Building Local Documentation with Cargo (Shell)
DESCRIPTION: This command uses Cargo, the Rust package manager and build tool, to generate local API documentation for the html5ever project. The documentation will be built and placed in the target/doc/ directory.
SOURCE: https://github.com/servo/html5ever/blob/main/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
cargo doc
```

----------------------------------------

TITLE: Parsing XML into RcDom Tree in Rust
DESCRIPTION: This snippet shows how to use the `xml5ever::parse` function with the `RcDom` `TreeSink` implementation to parse the prepared input string into an in-memory DOM tree structure.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_8

LANGUAGE: Rust
CODE:
```
    let dom: RcDom = parse(one_input(input), Default::default());
```

----------------------------------------

TITLE: Building and Testing xml5ever (Shell)
DESCRIPTION: Commands to fetch necessary submodules, build the xml5ever crate, and run its tests locally. Useful for contributing or verifying the build.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/README.md#_snippet_2

LANGUAGE: shell
CODE:
```

    git submodule update --init # to fetch xml5lib-tests
    cargo build
    cargo test

```

----------------------------------------

TITLE: Running Tokenizer Example with File Input (Bash)
DESCRIPTION: Executes the `simple_xml_tokenizer.rs` script using `cargo-script`, redirecting the content of the `example.xml` file as standard input.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_6

LANGUAGE: Bash
CODE:
```
cargo script simple_xml_tokenizer.rs < example.xml
```

----------------------------------------

TITLE: Running Tokenizer Example with Inline XML (Bash)
DESCRIPTION: Executes the `simple_xml_tokenizer.rs` script using `cargo-script`, providing an inline XML string as standard input via a here-string.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
cargo script simple_xml_tokenizer.rs <<< ""<xml>Text with <b>bold words</b>!</xml>""
```

----------------------------------------

TITLE: Initializing Git Submodules for html5ever Tests (Shell)
DESCRIPTION: This command is used to initialize and update the Git submodules included in the html5ever repository. This is necessary to fetch the external test suite used for development and testing.
SOURCE: https://github.com/servo/html5ever/blob/main/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
git submodule update --init
```

----------------------------------------

TITLE: Installing cargo-script via Cargo
DESCRIPTION: Installs the `cargo-script` tool using the Cargo package manager. This tool allows running Rust files as scripts without explicit project setup.
SOURCE: https://github.com/servo/html5ever/blob/main/xml5ever/examples/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
cargo install cargo-script
```","html5",""