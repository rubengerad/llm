"facebook react","TITLE: React Native Vibration API Examples
DESCRIPTION: Demonstrates how to use the React Native Vibration API to trigger vibrations on mobile devices. Includes examples for basic vibration, timed vibrations, and pattern-based vibrations. Requires React Native environment.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  SafeAreaView,
  StyleSheet,
} from 'react-native';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

const App = () => {
  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS,
  ];

  const PATTERN_DESC =
    Platform.OS === 'android'
      ? 'wait 1s, vibrate 2s, wait 3s'
      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

  return (
    <SafeAreaView style={styles.container}>
      <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
      <View>
        <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
      </View>
      <Separator />
      {Platform.OS === 'android'
        ? [
            <View>
              <Button
                title=""Vibrate for 10 seconds""
                onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
              />
            </View>,
            <Separator />,
          ]
        : null}
      <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
      <Button
        title=""Vibrate with pattern""
        onPress={() => Vibration.vibrate(PATTERN)}
      />
      <Separator />
      <Button
        title=""Vibrate with pattern until cancelled""
        onPress={() => Vibration.vibrate(PATTERN, true)}
      />
      <Separator />
      <Button
        title=""Stop vibration pattern""
        onPress={() => Vibration.cancel()}
        color=""#FF0000""
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  SafeAreaView,
  StyleSheet,
} from 'react-native';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

class App extends Component {
  render() {
    const ONE_SECOND_IN_MS = 1000;

    const PATTERN = [
      1 * ONE_SECOND_IN_MS,
      2 * ONE_SECOND_IN_MS,
      3 * ONE_SECOND_IN_MS,
    ];

    const PATTERN_DESC =
      Platform.OS === 'android'
        ? 'wait 1s, vibrate 2s, wait 3s'
        : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

    return (
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS === 'android'
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />,
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native FlatList API Reference
DESCRIPTION: API documentation for React Native's FlatList component, detailing its props, including inherited properties from ScrollView and VirtualizedList, and specific configurations for rendering items and managing list behavior.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/flatlist.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
FlatList:
  Description: A performant way to render a lengthy list of data. It uses virtual rendering to keep memory usage low.
  Inherits Props: [VirtualizedList Props](virtualizedlist.md#props), [ScrollView Props](scrollview.md#props)

  Props:
    data (Array<ItemT>): The data array to render.
    renderItem (Function): Required. Takes an item from `data` and renders it into the list.
      Signature: renderItem({ item: ItemT, index: number, separators: { highlight: () => void; unhighlight: () => void; updateProps: (select: 'leading' | 'trailing', newProps: any) => void; } }): JSX.Element;
      Parameters:
        - item (Object): The item from `data` being rendered.
        - index (number): The index corresponding to this item in the `data` array.
        - separators (Object): Object containing methods to control item separators.
          - highlight (Function): Highlights the item separator.
          - unhighlight (Function): Removes highlight from the item separator.
          - updateProps (Function): Allows setting custom props on separators.
            - select (enum('leading', 'trailing')): Specifies which separator to update.
            - newProps (Object): The new properties to apply.
    keyExtractor (Function): Determines the key for the item. Defaults to using the `key` prop on each item.
      Signature: keyExtractor(item: ItemT, index: number): string;
    extraData (any): Any extra data that should cause the list to re-render.
    ItemSeparatorComponent (Component): Optional component to render between items.
      Example Usage:
        <FlatList
          ItemSeparatorComponent={Platform.OS !== 'android' && (({highlighted}) => (
            <View style={[style.separator, highlighted && {marginLeft: 0}]}
            />
          ))}
          data={[{title: 'Title Text', key: 'item1'}]}
          renderItem={({item, index, separators}) => (
            <TouchableHighlight
              key={item.key}
              onPress={() => this._onPress(item)}
              onShowUnderlay={separators.highlight}
              onHideUnderlay={separators.unhighlight}>
              <View style={{backgroundColor: 'white'}}>
                <Text>{item.title}</Text>
              </View>
            </TouchableHighlight>
          )}
        />

  Caveats:
    - Internal state is not preserved when content scrolls out of the render window. Ensure all data is captured in item data or external stores.
    - FlatList is a `PureComponent`. It will not re-render if props remain shallow-equal. Ensure `renderItem` dependencies are passed via props like `extraData`.
    - Content is rendered asynchronously offscreen for memory and performance. This may lead to momentarily blank content if scrolling is faster than the fill rate.
    - By default, FlatList looks for a `key` prop. Use `keyExtractor` for custom key generation.

```

----------------------------------------

TITLE: React Native FlatList API Reference
DESCRIPTION: API documentation for React Native's FlatList component, detailing its props, including inherited properties from ScrollView and VirtualizedList, and specific configurations for rendering items and managing list behavior.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/flatlist.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
FlatList:
  Description: A performant way to render a lengthy list of data. It uses virtual rendering to keep memory usage low.
  Inherits Props: [VirtualizedList Props](virtualizedlist.md#props), [ScrollView Props](scrollview.md#props)

  Props:
    data (Array<ItemT>): The data array to render.
    renderItem (Function): Required. Takes an item from `data` and renders it into the list.
      Signature: renderItem({ item: ItemT, index: number, separators: { highlight: () => void; unhighlight: () => void; updateProps: (select: 'leading' | 'trailing', newProps: any) => void; } }): JSX.Element;
      Parameters:
        - item (Object): The item from `data` being rendered.
        - index (number): The index corresponding to this item in the `data` array.
        - separators (Object): Object containing methods to control item separators.
          - highlight (Function): Highlights the item separator.
          - unhighlight (Function): Removes highlight from the item separator.
          - updateProps (Function): Allows setting custom props on separators.
            - select (enum('leading', 'trailing')): Specifies which separator to update.
            - newProps (Object): The new properties to apply.
    keyExtractor (Function): Determines the key for the item. Defaults to using the `key` prop on each item.
      Signature: keyExtractor(item: ItemT, index: number): string;
    extraData (any): Any extra data that should cause the list to re-render.
    ItemSeparatorComponent (Component): Optional component to render between items.
      Example Usage:
        <FlatList
          ItemSeparatorComponent={Platform.OS !== 'android' && (({highlighted}) => (
            <View style={[style.separator, highlighted && {marginLeft: 0}]}
            />
          ))}
          data={[{title: 'Title Text', key: 'item1'}]}
          renderItem={({item, index, separators}) => (
            <TouchableHighlight
              key={item.key}
              onPress={() => this._onPress(item)}
              onShowUnderlay={separators.highlight}
              onHideUnderlay={separators.unhighlight}>
              <View style={{backgroundColor: 'white'}}>
                <Text>{item.title}</Text>
              </View>
            </TouchableHighlight>
          )}
        />

  Caveats:
    - Internal state is not preserved when content scrolls out of the render window. Ensure all data is captured in item data or external stores.
    - FlatList is a `PureComponent`. It will not re-render if props remain shallow-equal. Ensure `renderItem` dependencies are passed via props like `extraData`.
    - Content is rendered asynchronously offscreen for memory and performance. This may lead to momentarily blank content if scrolling is faster than the fill rate.
    - By default, FlatList looks for a `key` prop. Use `keyExtractor` for custom key generation.

```

----------------------------------------

TITLE: React Native List Scrolling API
DESCRIPTION: Comprehensive API documentation for scrolling methods in React Native list components. Includes method signatures, parameter details, and usage notes for controlling scroll behavior.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/flatlist.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
List Scrolling Methods:

scrollToEnd(params?: {animated?: boolean})
  - Scrolls to the end of the content.
  - May be janky without `getItemLayout` prop.
  - Parameters:
    - params (object, optional): Configuration for scrolling.
      - animated (boolean, optional): Whether to animate the scroll. Defaults to true.

scrollToIndex(params: { index: number; animated?: boolean; viewOffset?: number; viewPosition?: number; })
  - Scrolls to the item at the specified index.
  - Positions the item based on `viewPosition` (0=top, 1=bottom, 0.5=center).
  - Note: Cannot scroll outside the render window without `getItemLayout`.
  - Parameters:
    - params (object, required): Configuration for scrolling to an index.
      - index (number, required): The index of the item to scroll to.
      - animated (boolean, optional): Whether to animate the scroll. Defaults to true.
      - viewOffset (number, optional): Fixed pixel offset for the target position.
      - viewPosition (number, optional): Position of the item in the view (0, 0.5, 1).

scrollToItem(params: { animated?: ?boolean, item: Item, viewPosition?: number, })
  - Scrolls to a specific item in the list.
  - Requires linear scan; prefer `scrollToIndex` if possible.
  - Note: Cannot scroll outside the render window without `getItemLayout`.
  - Parameters:
    - params (object, required): Configuration for scrolling to an item.
      - animated (boolean, optional): Whether to animate the scroll. Defaults to true.
      - item (object, required): The item to scroll to.
      - viewPosition (number, optional): Position of the item in the view.

scrollToOffset(params: { offset: number; animated?: boolean; })
  - Scrolls to a specific content pixel offset.
  - Parameters:
    - params (object, required): Configuration for scrolling to an offset.
      - offset (number, required): The pixel offset to scroll to (x or y depending on orientation).
      - animated (boolean, optional): Whether to animate the scroll. Defaults to true.
```

----------------------------------------

TITLE: React Native FlatList API Reference
DESCRIPTION: API documentation for React Native's FlatList component, detailing its props, including inherited properties from ScrollView and VirtualizedList, and specific configurations for rendering items and managing list behavior.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/flatlist.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
FlatList:
  Description: A performant way to render a lengthy list of data. It uses virtual rendering to keep memory usage low.
  Inherits Props: [VirtualizedList Props](virtualizedlist.md#props), [ScrollView Props](scrollview.md#props)

  Props:
    data (Array<ItemT>): The data array to render.
    renderItem (Function): Required. Takes an item from `data` and renders it into the list.
      Signature: renderItem({ item: ItemT, index: number, separators: { highlight: () => void; unhighlight: () => void; updateProps: (select: 'leading' | 'trailing', newProps: any) => void; } }): JSX.Element;
      Parameters:
        - item (Object): The item from `data` being rendered.
        - index (number): The index corresponding to this item in the `data` array.
        - separators (Object): Object containing methods to control item separators.
          - highlight (Function): Highlights the item separator.
          - unhighlight (Function): Removes highlight from the item separator.
          - updateProps (Function): Allows setting custom props on separators.
            - select (enum('leading', 'trailing')): Specifies which separator to update.
            - newProps (Object): The new properties to apply.
    keyExtractor (Function): Determines the key for the item. Defaults to using the `key` prop on each item.
      Signature: keyExtractor(item: ItemT, index: number): string;
    extraData (any): Any extra data that should cause the list to re-render.
    ItemSeparatorComponent (Component): Optional component to render between items.
      Example Usage:
        <FlatList
          ItemSeparatorComponent={Platform.OS !== 'android' && (({highlighted}) => (
            <View style={[style.separator, highlighted && {marginLeft: 0}]}
            />
          ))}
          data={[{title: 'Title Text', key: 'item1'}]}
          renderItem={({item, index, separators}) => (
            <TouchableHighlight
              key={item.key}
              onPress={() => this._onPress(item)}
              onShowUnderlay={separators.highlight}
              onHideUnderlay={separators.unhighlight}>
              <View style={{backgroundColor: 'white'}}>
                <Text>{item.title}</Text>
              </View>
            </TouchableHighlight>
          )}
        />

  Caveats:
    - Internal state is not preserved when content scrolls out of the render window. Ensure all data is captured in item data or external stores.
    - FlatList is a `PureComponent`. It will not re-render if props remain shallow-equal. Ensure `renderItem` dependencies are passed via props like `extraData`.
    - Content is rendered asynchronously offscreen for memory and performance. This may lead to momentarily blank content if scrolling is faster than the fill rate.
    - By default, FlatList looks for a `key` prop. Use `keyExtractor` for custom key generation.

```

----------------------------------------

TITLE: React Native FlatList API Reference
DESCRIPTION: API documentation for React Native's FlatList component, detailing its props, including inherited properties from ScrollView and VirtualizedList, and specific configurations for rendering items and managing list behavior.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/flatlist.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
FlatList:
  Description: A performant way to render a lengthy list of data. It uses virtual rendering to keep memory usage low.
  Inherits Props: [VirtualizedList Props](virtualizedlist.md#props), [ScrollView Props](scrollview.md#props)

  Props:
    data (Array<ItemT>): The data array to render.
    renderItem (Function): Required. Takes an item from `data` and renders it into the list.
      Signature: renderItem({ item: ItemT, index: number, separators: { highlight: () => void; unhighlight: () => void; updateProps: (select: 'leading' | 'trailing', newProps: any) => void; } }): JSX.Element;
      Parameters:
        - item (Object): The item from `data` being rendered.
        - index (number): The index corresponding to this item in the `data` array.
        - separators (Object): Object containing methods to control item separators.
          - highlight (Function): Highlights the item separator.
          - unhighlight (Function): Removes highlight from the item separator.
          - updateProps (Function): Allows setting custom props on separators.
            - select (enum('leading', 'trailing')): Specifies which separator to update.
            - newProps (Object): The new properties to apply.
    keyExtractor (Function): Determines the key for the item. Defaults to using the `key` prop on each item.
      Signature: keyExtractor(item: ItemT, index: number): string;
    extraData (any): Any extra data that should cause the list to re-render.
    ItemSeparatorComponent (Component): Optional component to render between items.
      Example Usage:
        <FlatList
          ItemSeparatorComponent={Platform.OS !== 'android' && (({highlighted}) => (
            <View style={[style.separator, highlighted && {marginLeft: 0}]}
            />
          ))}
          data={[{title: 'Title Text', key: 'item1'}]}
          renderItem={({item, index, separators}) => (
            <TouchableHighlight
              key={item.key}
              onPress={() => this._onPress(item)}
              onShowUnderlay={separators.highlight}
              onHideUnderlay={separators.unhighlight}>
              <View style={{backgroundColor: 'white'}}>
                <Text>{item.title}</Text>
              </View>
            </TouchableHighlight>
          )}
        />

  Caveats:
    - Internal state is not preserved when content scrolls out of the render window. Ensure all data is captured in item data or external stores.
    - FlatList is a `PureComponent`. It will not re-render if props remain shallow-equal. Ensure `renderItem` dependencies are passed via props like `extraData`.
    - Content is rendered asynchronously offscreen for memory and performance. This may lead to momentarily blank content if scrolling is faster than the fill rate.
    - By default, FlatList looks for a `key` prop. Use `keyExtractor` for custom key generation.

```

----------------------------------------

TITLE: React Native FlatList API Reference
DESCRIPTION: API documentation for React Native's FlatList component, detailing its props, including inherited properties from ScrollView and VirtualizedList, and specific configurations for rendering items and managing list behavior.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/flatlist.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
FlatList:
  Description: A performant way to render a lengthy list of data. It uses virtual rendering to keep memory usage low.
  Inherits Props: [VirtualizedList Props](virtualizedlist.md#props), [ScrollView Props](scrollview.md#props)

  Props:
    data (Array<ItemT>): The data array to render.
    renderItem (Function): Required. Takes an item from `data` and renders it into the list.
      Signature: renderItem({ item: ItemT, index: number, separators: { highlight: () => void; unhighlight: () => void; updateProps: (select: 'leading' | 'trailing', newProps: any) => void; } }): JSX.Element;
      Parameters:
        - item (Object): The item from `data` being rendered.
        - index (number): The index corresponding to this item in the `data` array.
        - separators (Object): Object containing methods to control item separators.
          - highlight (Function): Highlights the item separator.
          - unhighlight (Function): Removes highlight from the item separator.
          - updateProps (Function): Allows setting custom props on separators.
            - select (enum('leading', 'trailing')): Specifies which separator to update.
            - newProps (Object): The new properties to apply.
    keyExtractor (Function): Determines the key for the item. Defaults to using the `key` prop on each item.
      Signature: keyExtractor(item: ItemT, index: number): string;
    extraData (any): Any extra data that should cause the list to re-render.
    ItemSeparatorComponent (Component): Optional component to render between items.
      Example Usage:
        <FlatList
          ItemSeparatorComponent={Platform.OS !== 'android' && (({highlighted}) => (
            <View style={[style.separator, highlighted && {marginLeft: 0}]}
            />
          ))}
          data={[{title: 'Title Text', key: 'item1'}]}
          renderItem={({item, index, separators}) => (
            <TouchableHighlight
              key={item.key}
              onPress={() => this._onPress(item)}
              onShowUnderlay={separators.highlight}
              onHideUnderlay={separators.unhighlight}>
              <View style={{backgroundColor: 'white'}}>
                <Text>{item.title}</Text>
              </View>
            </TouchableHighlight>
          )}
        />

  Caveats:
    - Internal state is not preserved when content scrolls out of the render window. Ensure all data is captured in item data or external stores.
    - FlatList is a `PureComponent`. It will not re-render if props remain shallow-equal. Ensure `renderItem` dependencies are passed via props like `extraData`.
    - Content is rendered asynchronously offscreen for memory and performance. This may lead to momentarily blank content if scrolling is faster than the fill rate.
    - By default, FlatList looks for a `key` prop. Use `keyExtractor` for custom key generation.

```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Example demonstrating how to copy text to and fetch text from the clipboard using React Native's Clipboard API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/clipboard.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, { useState } from 'react'
import { SafeAreaView, View, Text, TouchableOpacity, Clipboard, StyleSheet } from 'react-native'

const App = () => {
  const [copiedText, setCopiedText] = useState('')

  const copyToClipboard = () => {
    Clipboard.setString('hello world')
  }

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString()
    setCopiedText(text)
  }

  return (
    <SafeAreaView style={{ flex: 1 }}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>

    </SafeAreaView>
  )
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center'
  },
  copiedText: {
    marginTop: 10,
    color: 'red'
  }
})

export default App
```

----------------------------------------

TITLE: StyleSheet API Reference
DESCRIPTION: Comprehensive documentation for StyleSheet methods including signatures, parameter descriptions, return values, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/stylesheet.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
StyleSheet.compose(style1: object, style2: object): object | array<object>
  Combines two styles such that style2 will override any styles in style1. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.

  Example:
  import React from 'react';
  import { StyleSheet, Text, View } from 'react-native';

  const App = () => (
    <View style={container}>
      <Text style={text}>React Native</Text>
    </View>
  );

  const page = StyleSheet.create({
    container: {
      flex: 1,
      padding: 24,
      backgroundColor: '#fff',
    },
    text: {
      fontSize: 30,
      color: '#000'
    },
  });

  const lists = StyleSheet.create({
    listContainer: {
      flex: 1,
      backgroundColor: '#61dafb',
    },
    listItem: {
      fontStyle: 'italic',
      fontWeight: 'bold'
    },
  });

  const container = StyleSheet.compose(page.container, lists.listContainer);
  const text = StyleSheet.compose(page.text, lists.listItem);

  export default App;
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.create(obj: object): object
  Creates a StyleSheet style reference from the given object.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.flatten(style: array<object>): object
  Flattens an array of style objects, into one aggregated style object. Alternatively, this method can be used to lookup IDs, returned by StyleSheet.register.

  NOTE: Exercise caution as abusing this can tax you in terms of optimizations. IDs enable optimizations through the bridge and memory in general. Referring to style objects directly will deprive you of these optimizations.

  Example:
  import React from ""react"";
  import { StyleSheet, Text, View } from ""react-native"";

  const App = () => (
    <View style={page.container}>
      <Text style={flattenStyle}>React Native</Text>
      <Text>Flatten Style</Text>
      <Text style={page.code}>
        {JSON.stringify(flattenStyle, null, 2)}
      </Text>
    </View>
  );

  const page = StyleSheet.create({
    container: {
      flex: 1,
      padding: 24,
      alignItems: ""center""
    },
    text: {
      color: ""#000"",
      fontSize: 14,
      fontWeight: ""bold""
    },
    code: {
      marginTop: 12,
      padding: 12,
      borderRadius: 8,
      color: ""#666"",
      backgroundColor: ""#eaeaea""
    }
  });

  const typography = StyleSheet.create({
    header: {
      color: ""#61dafb"",
      fontSize: 30,
      marginBottom: 36
    }
  });

  const flattenStyle = StyleSheet.flatten([
    page.text,
    typography.header
  ]);

  export default App;

  This method internally uses StyleSheetRegistry.getStyleByID(style) to resolve style objects represented by IDs. Thus, an array of style objects (instances of StyleSheet.create()), are individually resolved to, their respective objects, merged as one and then returned. This also explains the alternative use.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.setStyleAttributePreprocessor(property: string, process: (propValue: any) => any)
  Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.

  WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.
```

----------------------------------------

TITLE: React Native Systrace API Usage Example
DESCRIPTION: Demonstrates how to use the Systrace API within a React Native application to enable/disable profiling, start and end timed events, and log counter values. This example requires React Native components and the Systrace module.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Text,
  View,
  SafeAreaView,
  StyleSheet,
  Systrace,
} from 'react-native';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={[styles.header, styles.paragraph]}>
        React Native Systrace API
      </Text>
      <View style={styles.buttonRow}>
        <Button
          title=""Capture the non-Timed JS events in EasyProfiler""
          onPress={() => enableProfiling()}
        />
        <Button
          title=""Stop capturing""
          onPress={() => stopProfiling()}
          color=""#FF0000""
        />
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignAlignItems: 'center',
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    fontSize: 25,
    textAlign: 'center',
  },
  buttonRow: {
    flexBasis: 150,
    marginVertical: 16,
    justifyContent: 'space-evenly',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Systrace API Usage Example
DESCRIPTION: Demonstrates how to use the Systrace API within a React Native application to enable/disable profiling, start and end timed events, and log counter values. This example requires React Native components and the Systrace module.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Text,
  View,
  SafeAreaView,
  StyleSheet,
  Systrace,
} from 'react-native';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={[styles.header, styles.paragraph]}>
        React Native Systrace API
      </Text>
      <View style={styles.buttonRow}>
        <Button
          title=""Capture the non-Timed JS events in EasyProfiler""
          onPress={() => enableProfiling()}
        />
        <Button
          title=""Stop capturing""
          onPress={() => stopProfiling()}
          color=""#FF0000""
        />
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignAlignItems: 'center',
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    fontSize: 25,
    textAlign: 'center',
  },
  buttonRow: {
    flexBasis: 150,
    marginVertical: 16,
    justifyContent: 'space-evenly',
  },
});

export default App;
```

----------------------------------------

TITLE: API: Scroll Component Methods
DESCRIPTION: Provides access to methods for controlling and inspecting the scrollable component's state and behavior. These include displaying scroll indicators, getting native scroll references, and accessing the scroll responder or node.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/flatlist.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
flashScrollIndicators()
  - Displays the scroll indicators momentarily.

getNativeScrollRef(): React.ElementRef<typeof ScrollViewComponent>
  - Provides a reference to the underlying scroll component.

getScrollResponder(): ScrollResponderMixin
  - Provides a handle to the underlying scroll responder.

getScrollableNode(): any
  - Provides a handle to the underlying scroll node.
```

----------------------------------------

TITLE: React Native Systrace API Usage Example
DESCRIPTION: Demonstrates how to use the Systrace API within a React Native application to enable/disable profiling, start and end timed events, and log counter values. This example requires React Native components and the Systrace module.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Text,
  View,
  SafeAreaView,
  StyleSheet,
  Systrace,
} from 'react-native';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={[styles.header, styles.paragraph]}>
        React Native Systrace API
      </Text>
      <View style={styles.buttonRow}>
        <Button
          title=""Capture the non-Timed JS events in EasyProfiler""
          onPress={() => enableProfiling()}
        />
        <Button
          title=""Stop capturing""
          onPress={() => stopProfiling()}
          color=""#FF0000""
        />
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignAlignItems: 'center',
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    fontSize: 25,
    textAlign: 'center',
  },
  buttonRow: {
    flexBasis: 150,
    marginVertical: 16,
    justifyContent: 'space-evenly',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Systrace API Usage Example
DESCRIPTION: Demonstrates how to use the Systrace API within a React Native application to enable/disable profiling, start and end timed events, and log counter values. This example requires React Native components and the Systrace module.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Text,
  View,
  SafeAreaView,
  StyleSheet,
  Systrace,
} from 'react-native';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaView style={styles.container}>
      <Text style={[styles.header, styles.paragraph]}>
        React Native Systrace API
      </Text>
      <View style={styles.buttonRow}>
        <Button
          title=""Capture the non-Timed JS events in EasyProfiler""
          onPress={() => enableProfiling()}
        />
        <Button
          title=""Stop capturing""
          onPress={() => stopProfiling()}
          color=""#FF0000""
        />
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignAlignItems: 'center',
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    fontSize: 25,
    textAlign: 'center',
  },
  buttonRow: {
    flexBasis: 150,
    marginVertical: 16,
    justifyContent: 'space-evenly',
  },
});

export default App;
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: PixelRatio API Reference
DESCRIPTION: Provides details on the static methods available in the PixelRatio API, including their return types and common usage scenarios.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/pixelratio.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PixelRatio:
  get(): number
    - Returns the device pixel density.
    - Examples:
      - PixelRatio.get() === 1 (mdpi Android devices)
      - PixelRatio.get() === 1.5 (hdpi Android devices)
      - PixelRatio.get() === 2 (iPhone SE, 6S, 7, 8, XR, 11; xhdpi Android devices)
      - PixelRatio.get() === 3 (iPhone 6S Plus, 7 Plus, 8 Plus, X, XS, XS Max, 11 Pro, 11 Pro Max; Pixel, Pixel 2; xxhdpi Android devices)
      - PixelRatio.get() === 3.5 (Nexus 6, Pixel XL, Pixel 2 XL; xxxhdpi Android devices)

  getPixelSizeForLayoutSize(layoutSize: number): number
    - Converts a layout size (dp) to a pixel size (px) based on the device's pixel ratio.
    - Parameters:
      - layoutSize: The size in density-independent pixels (dp).
    - Returns: The corresponding size in physical pixels (px).

  getFontScale(): number
    - Returns the font scale factor for the device.
    - This value is independent of the pixel ratio and reflects the user's text size preference.
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Provides documentation for the static methods of the React Native Clipboard API, including how to get and set string content.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard.getString()
  - Retrieves the current string content from the device's clipboard.
  - Returns: Promise<string>
  - Example:
    async _getContent() {
      const content = await Clipboard.getString();
    }

---

Clipboard.setString(content)
  - Sets the string content of the device's clipboard.
  - Parameters:
    - content (string, required): The content to be stored in the clipboard.
  - Notice: Be careful when copying data other than strings and numbers. Arrays require additional stringification.
  - Example:
    _setContent() {
      Clipboard.setString('hello world');
    }
```

----------------------------------------

TITLE: PixelRatio API Reference
DESCRIPTION: Provides details on the static methods available in the PixelRatio API, including their return types and common usage scenarios.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/pixelratio.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PixelRatio:
  get(): number
    - Returns the device pixel density.
    - Examples:
      - PixelRatio.get() === 1 (mdpi Android devices)
      - PixelRatio.get() === 1.5 (hdpi Android devices)
      - PixelRatio.get() === 2 (iPhone SE, 6S, 7, 8, XR, 11; xhdpi Android devices)
      - PixelRatio.get() === 3 (iPhone 6S Plus, 7 Plus, 8 Plus, X, XS, XS Max, 11 Pro, 11 Pro Max; Pixel, Pixel 2; xxhdpi Android devices)
      - PixelRatio.get() === 3.5 (Nexus 6, Pixel XL, Pixel 2 XL; xxxhdpi Android devices)

  getPixelSizeForLayoutSize(layoutSize: number): number
    - Converts a layout size (dp) to a pixel size (px) based on the device's pixel ratio.
    - Parameters:
      - layoutSize: The size in density-independent pixels (dp).
    - Returns: The corresponding size in physical pixels (px).

  getFontScale(): number
    - Returns the font scale factor for the device.
    - This value is independent of the pixel ratio and reflects the user's text size preference.
```

----------------------------------------

TITLE: FlatList Simple Example (React Native)
DESCRIPTION: Demonstrates a basic implementation of React Native's FlatList component to render a static list of items. It showcases the use of `data`, `renderItem`, and `keyExtractor` props for efficient list rendering.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/flatlist.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { SafeAreaView, View, FlatList, StyleSheet, Text, StatusBar } from 'react-native';

const DATA = [
  {
    id: 'bd7acbea-c1b1-46c2-aed5-3ad53abb28ba',
    title: 'First Item',
  },
  {
    id: '3ac68afc-c605-48d3-a4f8-fbd91aa97f63',
    title: 'Second Item',
  },
  {
    id: '58694a0f-3da1-471f-bd96-145571e29d72',
    title: 'Third Item',
  },
];

const Item = ({ title }) => (
  <View style={styles.item}>
    <Text style={styles.title}>{title}</Text>
  </View>
);

const App = () => {
  const renderItem = ({ item }) => (
    <Item title={item.title} />
  );

  return (
    <SafeAreaView style={styles.container}>
      <FlatList
        data={DATA}
        renderItem={renderItem}
        keyExtractor={item => item.id}
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: StatusBar.currentHeight || 0,
  },
  item: {
    backgroundColor: '#f9c2ff',
    padding: 20,
    marginVertical: 8,
    marginHorizontal: 16,
  },
  title: {
    fontSize: 32,
  },
});

export default App;
```

----------------------------------------

TITLE: PixelRatio API Reference
DESCRIPTION: Provides details on the static methods available in the PixelRatio API, including their return types and common usage scenarios.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/pixelratio.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PixelRatio:
  get(): number
    - Returns the device pixel density.
    - Examples:
      - PixelRatio.get() === 1 (mdpi Android devices)
      - PixelRatio.get() === 1.5 (hdpi Android devices)
      - PixelRatio.get() === 2 (iPhone SE, 6S, 7, 8, XR, 11; xhdpi Android devices)
      - PixelRatio.get() === 3 (iPhone 6S Plus, 7 Plus, 8 Plus, X, XS, XS Max, 11 Pro, 11 Pro Max; Pixel, Pixel 2; xxhdpi Android devices)
      - PixelRatio.get() === 3.5 (Nexus 6, Pixel XL, Pixel 2 XL; xxxhdpi Android devices)

  getPixelSizeForLayoutSize(layoutSize: number): number
    - Converts a layout size (dp) to a pixel size (px) based on the device's pixel ratio.
    - Parameters:
      - layoutSize: The size in density-independent pixels (dp).
    - Returns: The corresponding size in physical pixels (px).

  getFontScale(): number
    - Returns the font scale factor for the device.
    - This value is independent of the pixel ratio and reflects the user's text size preference.
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Provides documentation for the static methods of the React Native Clipboard API, including how to get and set string content.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard.getString()
  - Retrieves the current string content from the device's clipboard.
  - Returns: Promise<string>
  - Example:
    async _getContent() {
      const content = await Clipboard.getString();
    }

---

Clipboard.setString(content)
  - Sets the string content of the device's clipboard.
  - Parameters:
    - content (string, required): The content to be stored in the clipboard.
  - Notice: Be careful when copying data other than strings and numbers. Arrays require additional stringification.
  - Example:
    _setContent() {
      Clipboard.setString('hello world');
    }
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to use the React Native Clipboard API to copy text to the clipboard and retrieve it.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/clipboard.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <View style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Provides documentation for the static methods of the React Native Clipboard API, including how to get and set string content.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard.getString()
  - Retrieves the current string content from the device's clipboard.
  - Returns: Promise<string>
  - Example:
    async _getContent() {
      const content = await Clipboard.getString();
    }

---

Clipboard.setString(content)
  - Sets the string content of the device's clipboard.
  - Parameters:
    - content (string, required): The content to be stored in the clipboard.
  - Notice: Be careful when copying data other than strings and numbers. Arrays require additional stringification.
  - Example:
    _setContent() {
      Clipboard.setString('hello world');
    }
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Provides documentation for the static methods of the React Native Clipboard API, including how to get and set string content.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard.getString()
  - Retrieves the current string content from the device's clipboard.
  - Returns: Promise<string>
  - Example:
    async _getContent() {
      const content = await Clipboard.getString();
    }

---

Clipboard.setString(content)
  - Sets the string content of the device's clipboard.
  - Parameters:
    - content (string, required): The content to be stored in the clipboard.
  - Notice: Be careful when copying data other than strings and numbers. Arrays require additional stringification.
  - Example:
    _setContent() {
      Clipboard.setString('hello world');
    }
```

----------------------------------------

TITLE: PixelRatio API Reference
DESCRIPTION: Provides details on the static methods available in the PixelRatio API, including their return types and common usage scenarios.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/pixelratio.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PixelRatio:
  get(): number
    - Returns the device pixel density.
    - Examples:
      - PixelRatio.get() === 1 (mdpi Android devices)
      - PixelRatio.get() === 1.5 (hdpi Android devices)
      - PixelRatio.get() === 2 (iPhone SE, 6S, 7, 8, XR, 11; xhdpi Android devices)
      - PixelRatio.get() === 3 (iPhone 6S Plus, 7 Plus, 8 Plus, X, XS, XS Max, 11 Pro, 11 Pro Max; Pixel, Pixel 2; xxhdpi Android devices)
      - PixelRatio.get() === 3.5 (Nexus 6, Pixel XL, Pixel 2 XL; xxxhdpi Android devices)

  getPixelSizeForLayoutSize(layoutSize: number): number
    - Converts a layout size (dp) to a pixel size (px) based on the device's pixel ratio.
    - Parameters:
      - layoutSize: The size in density-independent pixels (dp).
    - Returns: The corresponding size in physical pixels (px).

  getFontScale(): number
    - Returns the font scale factor for the device.
    - This value is independent of the pixel ratio and reflects the user's text size preference.
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Provides documentation for the static methods of the React Native Clipboard API, including how to get and set string content.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard.getString()
  - Retrieves the current string content from the device's clipboard.
  - Returns: Promise<string>
  - Example:
    async _getContent() {
      const content = await Clipboard.getString();
    }

---

Clipboard.setString(content)
  - Sets the string content of the device's clipboard.
  - Parameters:
    - content (string, required): The content to be stored in the clipboard.
  - Notice: Be careful when copying data other than strings and numbers. Arrays require additional stringification.
  - Example:
    _setContent() {
      Clipboard.setString('hello world');
    }
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Provides documentation for the static methods of the React Native Clipboard API, including how to get and set string content.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard.getString()
  - Retrieves the current string content from the device's clipboard.
  - Returns: Promise<string>
  - Example:
    async _getContent() {
      const content = await Clipboard.getString();
    }

---

Clipboard.setString(content)
  - Sets the string content of the device's clipboard.
  - Parameters:
    - content (string, required): The content to be stored in the clipboard.
  - Notice: Be careful when copying data other than strings and numbers. Arrays require additional stringification.
  - Example:
    _setContent() {
      Clipboard.setString('hello world');
    }
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: React Native ScrollView API Reference
DESCRIPTION: Comprehensive documentation for ScrollView methods in React Native, detailing signatures, parameters, return values, and usage notes. This includes methods for scrolling, accessing native components, and managing scroll indicators.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/flatlist.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
ScrollView Methods:

viewabilityConfigCallbackPairs: List of `ViewabilityConfig`/`onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` will be called when its corresponding `ViewabilityConfig`'s conditions are met. Type: array of ViewabilityConfigCallbackPair.

flashScrollIndicators(): Displays the scroll indicators momentarily.
  - Signature: flashScrollIndicators()
  - Parameters: None
  - Returns: void

getNativeScrollRef(): Provides a reference to the underlying scroll component.
  - Signature: getNativeScrollRef(): React.ElementRef<typeof ScrollViewComponent>
  - Parameters: None
  - Returns: React.ElementRef<typeof ScrollViewComponent>

getScrollResponder(): Provides a handle to the underlying scroll responder.
  - Signature: getScrollResponder(): ScrollResponderMixin
  - Parameters: None
  - Returns: ScrollResponderMixin

getScrollableNode(): Provides a handle to the underlying scroll node.
  - Signature: getScrollableNode(): any
  - Parameters: None
  - Returns: any

scrollToEnd(params?: {animated?: boolean}): Scrolls to the end of the content. May be janky without `getItemLayout` prop.
  - Signature: scrollToEnd(params?: {animated?: boolean})
  - Parameters:
    - params (object, optional): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void

scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number}): Scrolls to the item at the specified index such that it is positioned in the viewable area. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - index (number, required): The index to scroll to.
      - viewOffset (number, optional): A fixed number of pixels to offset the final target position.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}): Requires linear scan through data; use `scrollToIndex` instead if possible. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - item (object, required): The item to scroll to.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToOffset(params: {offset: number; animated?: boolean}): Scroll to a specific content pixel offset in the list.
  - Signature: scrollToOffset(params: {offset: number; animated?: boolean})
  - Parameters:
    - params (object, required): Configuration object.
      - offset (number, required): The offset to scroll to. For horizontal lists, this is the x-value; otherwise, it's the y-value.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void
```

----------------------------------------

TITLE: PixelRatio API Reference
DESCRIPTION: Provides details on the static methods available in the PixelRatio API, including their return types and common usage scenarios.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/pixelratio.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PixelRatio:
  get(): number
    - Returns the device pixel density.
    - Examples:
      - PixelRatio.get() === 1 (mdpi Android devices)
      - PixelRatio.get() === 1.5 (hdpi Android devices)
      - PixelRatio.get() === 2 (iPhone SE, 6S, 7, 8, XR, 11; xhdpi Android devices)
      - PixelRatio.get() === 3 (iPhone 6S Plus, 7 Plus, 8 Plus, X, XS, XS Max, 11 Pro, 11 Pro Max; Pixel, Pixel 2; xxhdpi Android devices)
      - PixelRatio.get() === 3.5 (Nexus 6, Pixel XL, Pixel 2 XL; xxxhdpi Android devices)

  getPixelSizeForLayoutSize(layoutSize: number): number
    - Converts a layout size (dp) to a pixel size (px) based on the device's pixel ratio.
    - Parameters:
      - layoutSize: The size in density-independent pixels (dp).
    - Returns: The corresponding size in physical pixels (px).

  getFontScale(): number
    - Returns the font scale factor for the device.
    - This value is independent of the pixel ratio and reflects the user's text size preference.
```

----------------------------------------

TITLE: Start Animation with Completion Callback
DESCRIPTION: Initiates an animation using Animated.timing and provides a callback function that executes upon completion. This callback is used to update the component's state, signaling that the animation has finished. Requires Animated API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2018-01-18-implementing-twitters-app-loading-animation-in-react-native.md#_snippet_7

LANGUAGE: javascript
CODE:
```
Animated.timing(this.state.loadingProgress, {
  toValue: 100,
  duration: 1000,
  useNativeDriver: true,
}).start(() => {
  this.setState({
    animationDone: true,
  });
});

```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to use the React Native Clipboard API to copy text to the clipboard and retrieve it.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/clipboard.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <View style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: Initialize Animated.Value in State
DESCRIPTION: Shows how to initialize an Animated.Value within a React Native component's state. This value acts as a central controller for animation progress, typically starting at 0.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2018-01-18-implementing-twitters-app-loading-animation-in-react-native.md#_snippet_3

LANGUAGE: jsx
CODE:
```
state = {
  loadingProgress: new Animated.Value(0)
}
```

----------------------------------------

TITLE: React Native ScrollView API Reference
DESCRIPTION: Comprehensive documentation for ScrollView methods in React Native, detailing signatures, parameters, return values, and usage notes. This includes methods for scrolling, accessing native components, and managing scroll indicators.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/flatlist.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
ScrollView Methods:

viewabilityConfigCallbackPairs: List of `ViewabilityConfig`/`onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` will be called when its corresponding `ViewabilityConfig`'s conditions are met. Type: array of ViewabilityConfigCallbackPair.

flashScrollIndicators(): Displays the scroll indicators momentarily.
  - Signature: flashScrollIndicators()
  - Parameters: None
  - Returns: void

getNativeScrollRef(): Provides a reference to the underlying scroll component.
  - Signature: getNativeScrollRef(): React.ElementRef<typeof ScrollViewComponent>
  - Parameters: None
  - Returns: React.ElementRef<typeof ScrollViewComponent>

getScrollResponder(): Provides a handle to the underlying scroll responder.
  - Signature: getScrollResponder(): ScrollResponderMixin
  - Parameters: None
  - Returns: ScrollResponderMixin

getScrollableNode(): Provides a handle to the underlying scroll node.
  - Signature: getScrollableNode(): any
  - Parameters: None
  - Returns: any

scrollToEnd(params?: {animated?: boolean}): Scrolls to the end of the content. May be janky without `getItemLayout` prop.
  - Signature: scrollToEnd(params?: {animated?: boolean})
  - Parameters:
    - params (object, optional): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void

scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number}): Scrolls to the item at the specified index such that it is positioned in the viewable area. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - index (number, required): The index to scroll to.
      - viewOffset (number, optional): A fixed number of pixels to offset the final target position.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}): Requires linear scan through data; use `scrollToIndex` instead if possible. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - item (object, required): The item to scroll to.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToOffset(params: {offset: number; animated?: boolean}): Scroll to a specific content pixel offset in the list.
  - Signature: scrollToOffset(params: {offset: number; animated?: boolean})
  - Parameters:
    - params (object, required): Configuration object.
      - offset (number, required): The offset to scroll to. For horizontal lists, this is the x-value; otherwise, it's the y-value.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void
```

----------------------------------------

TITLE: React Native Linking API: Get Initial URL
DESCRIPTION: Shows how to retrieve the initial URL that launched the app. This is useful when the app is opened directly via a deep link, providing the URL as a Promise that resolves when the app starts.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/linking.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Linking } from 'react-native';

async function getUrlAsync() {
  const initialUrl = await Linking.getInitialURL();
  if (initialUrl) {
    console.log(`App was launched with URL: ${initialUrl}`);
    // Handle the initial deep link URL here
  }
}

getUrlAsync();

```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to use the React Native Clipboard API to copy text to the clipboard and retrieve it.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/clipboard.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <View style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native ScrollView API Reference
DESCRIPTION: Comprehensive documentation for ScrollView methods in React Native, detailing signatures, parameters, return values, and usage notes. This includes methods for scrolling, accessing native components, and managing scroll indicators.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/flatlist.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
ScrollView Methods:

viewabilityConfigCallbackPairs: List of `ViewabilityConfig`/`onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` will be called when its corresponding `ViewabilityConfig`'s conditions are met. Type: array of ViewabilityConfigCallbackPair.

flashScrollIndicators(): Displays the scroll indicators momentarily.
  - Signature: flashScrollIndicators()
  - Parameters: None
  - Returns: void

getNativeScrollRef(): Provides a reference to the underlying scroll component.
  - Signature: getNativeScrollRef(): React.ElementRef<typeof ScrollViewComponent>
  - Parameters: None
  - Returns: React.ElementRef<typeof ScrollViewComponent>

getScrollResponder(): Provides a handle to the underlying scroll responder.
  - Signature: getScrollResponder(): ScrollResponderMixin
  - Parameters: None
  - Returns: ScrollResponderMixin

getScrollableNode(): Provides a handle to the underlying scroll node.
  - Signature: getScrollableNode(): any
  - Parameters: None
  - Returns: any

scrollToEnd(params?: {animated?: boolean}): Scrolls to the end of the content. May be janky without `getItemLayout` prop.
  - Signature: scrollToEnd(params?: {animated?: boolean})
  - Parameters:
    - params (object, optional): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void

scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number}): Scrolls to the item at the specified index such that it is positioned in the viewable area. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - index (number, required): The index to scroll to.
      - viewOffset (number, optional): A fixed number of pixels to offset the final target position.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}): Requires linear scan through data; use `scrollToIndex` instead if possible. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - item (object, required): The item to scroll to.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToOffset(params: {offset: number; animated?: boolean}): Scroll to a specific content pixel offset in the list.
  - Signature: scrollToOffset(params: {offset: number; animated?: boolean})
  - Parameters:
    - params (object, required): Configuration object.
      - offset (number, required): The offset to scroll to. For horizontal lists, this is the x-value; otherwise, it's the y-value.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to use the React Native Clipboard API to copy text to the clipboard and retrieve it.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/clipboard.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <View style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Linking API: Get Initial URL
DESCRIPTION: Shows how to retrieve the initial URL that launched the app. This is useful when the app is opened directly via a deep link, providing the URL as a Promise that resolves when the app starts.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/linking.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Linking } from 'react-native';

async function getUrlAsync() {
  const initialUrl = await Linking.getInitialURL();
  if (initialUrl) {
    console.log(`App was launched with URL: ${initialUrl}`);
    // Handle the initial deep link URL here
  }
}

getUrlAsync();

```

----------------------------------------

TITLE: React Native ScrollView API Reference
DESCRIPTION: Comprehensive documentation for ScrollView methods in React Native, detailing signatures, parameters, return values, and usage notes. This includes methods for scrolling, accessing native components, and managing scroll indicators.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/flatlist.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
ScrollView Methods:

viewabilityConfigCallbackPairs: List of `ViewabilityConfig`/`onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` will be called when its corresponding `ViewabilityConfig`'s conditions are met. Type: array of ViewabilityConfigCallbackPair.

flashScrollIndicators(): Displays the scroll indicators momentarily.
  - Signature: flashScrollIndicators()
  - Parameters: None
  - Returns: void

getNativeScrollRef(): Provides a reference to the underlying scroll component.
  - Signature: getNativeScrollRef(): React.ElementRef<typeof ScrollViewComponent>
  - Parameters: None
  - Returns: React.ElementRef<typeof ScrollViewComponent>

getScrollResponder(): Provides a handle to the underlying scroll responder.
  - Signature: getScrollResponder(): ScrollResponderMixin
  - Parameters: None
  - Returns: ScrollResponderMixin

getScrollableNode(): Provides a handle to the underlying scroll node.
  - Signature: getScrollableNode(): any
  - Parameters: None
  - Returns: any

scrollToEnd(params?: {animated?: boolean}): Scrolls to the end of the content. May be janky without `getItemLayout` prop.
  - Signature: scrollToEnd(params?: {animated?: boolean})
  - Parameters:
    - params (object, optional): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void

scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number}): Scrolls to the item at the specified index such that it is positioned in the viewable area. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - index (number, required): The index to scroll to.
      - viewOffset (number, optional): A fixed number of pixels to offset the final target position.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}): Requires linear scan through data; use `scrollToIndex` instead if possible. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - item (object, required): The item to scroll to.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToOffset(params: {offset: number; animated?: boolean}): Scroll to a specific content pixel offset in the list.
  - Signature: scrollToOffset(params: {offset: number; animated?: boolean})
  - Parameters:
    - params (object, required): Configuration object.
      - offset (number, required): The offset to scroll to. For horizontal lists, this is the x-value; otherwise, it's the y-value.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to use the React Native Clipboard API to copy text to the clipboard and retrieve it.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/clipboard.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <View style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to use the React Native Clipboard API to copy text to the clipboard and retrieve it.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/clipboard.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, {useState} from 'react';
import {
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <View style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Linking API: Get Initial URL
DESCRIPTION: Shows how to retrieve the initial URL that launched the app. This is useful when the app is opened directly via a deep link, providing the URL as a Promise that resolves when the app starts.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/linking.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Linking } from 'react-native';

async function getUrlAsync() {
  const initialUrl = await Linking.getInitialURL();
  if (initialUrl) {
    console.log(`App was launched with URL: ${initialUrl}`);
    // Handle the initial deep link URL here
  }
}

getUrlAsync();

```

----------------------------------------

TITLE: React Native ScrollView API Reference
DESCRIPTION: Comprehensive documentation for ScrollView methods in React Native, detailing signatures, parameters, return values, and usage notes. This includes methods for scrolling, accessing native components, and managing scroll indicators.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/flatlist.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
ScrollView Methods:

viewabilityConfigCallbackPairs: List of `ViewabilityConfig`/`onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` will be called when its corresponding `ViewabilityConfig`'s conditions are met. Type: array of ViewabilityConfigCallbackPair.

flashScrollIndicators(): Displays the scroll indicators momentarily.
  - Signature: flashScrollIndicators()
  - Parameters: None
  - Returns: void

getNativeScrollRef(): Provides a reference to the underlying scroll component.
  - Signature: getNativeScrollRef(): React.ElementRef<typeof ScrollViewComponent>
  - Parameters: None
  - Returns: React.ElementRef<typeof ScrollViewComponent>

getScrollResponder(): Provides a handle to the underlying scroll responder.
  - Signature: getScrollResponder(): ScrollResponderMixin
  - Parameters: None
  - Returns: ScrollResponderMixin

getScrollableNode(): Provides a handle to the underlying scroll node.
  - Signature: getScrollableNode(): any
  - Parameters: None
  - Returns: any

scrollToEnd(params?: {animated?: boolean}): Scrolls to the end of the content. May be janky without `getItemLayout` prop.
  - Signature: scrollToEnd(params?: {animated?: boolean})
  - Parameters:
    - params (object, optional): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void

scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number}): Scrolls to the item at the specified index such that it is positioned in the viewable area. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - index (number, required): The index to scroll to.
      - viewOffset (number, optional): A fixed number of pixels to offset the final target position.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}): Requires linear scan through data; use `scrollToIndex` instead if possible. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - item (object, required): The item to scroll to.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToOffset(params: {offset: number; animated?: boolean}): Scroll to a specific content pixel offset in the list.
  - Signature: scrollToOffset(params: {offset: number; animated?: boolean})
  - Parameters:
    - params (object, required): Configuration object.
      - offset (number, required): The offset to scroll to. For horizontal lists, this is the x-value; otherwise, it's the y-value.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void
```

----------------------------------------

TITLE: React Native Linking API: Get Initial URL
DESCRIPTION: Shows how to retrieve the initial URL that launched the app. This is useful when the app is opened directly via a deep link, providing the URL as a Promise that resolves when the app starts.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/linking.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Linking } from 'react-native';

async function getUrlAsync() {
  const initialUrl = await Linking.getInitialURL();
  if (initialUrl) {
    console.log(`App was launched with URL: ${initialUrl}`);
    // Handle the initial deep link URL here
  }
}

getUrlAsync();

```

----------------------------------------

TITLE: React Native ScrollView API Reference
DESCRIPTION: Comprehensive documentation for ScrollView methods in React Native, detailing signatures, parameters, return values, and usage notes. This includes methods for scrolling, accessing native components, and managing scroll indicators.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/flatlist.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
ScrollView Methods:

viewabilityConfigCallbackPairs: List of `ViewabilityConfig`/`onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` will be called when its corresponding `ViewabilityConfig`'s conditions are met. Type: array of ViewabilityConfigCallbackPair.

flashScrollIndicators(): Displays the scroll indicators momentarily.
  - Signature: flashScrollIndicators()
  - Parameters: None
  - Returns: void

getNativeScrollRef(): Provides a reference to the underlying scroll component.
  - Signature: getNativeScrollRef(): React.ElementRef<typeof ScrollViewComponent>
  - Parameters: None
  - Returns: React.ElementRef<typeof ScrollViewComponent>

getScrollResponder(): Provides a handle to the underlying scroll responder.
  - Signature: getScrollResponder(): ScrollResponderMixin
  - Parameters: None
  - Returns: ScrollResponderMixin

getScrollableNode(): Provides a handle to the underlying scroll node.
  - Signature: getScrollableNode(): any
  - Parameters: None
  - Returns: any

scrollToEnd(params?: {animated?: boolean}): Scrolls to the end of the content. May be janky without `getItemLayout` prop.
  - Signature: scrollToEnd(params?: {animated?: boolean})
  - Parameters:
    - params (object, optional): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void

scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number}): Scrolls to the item at the specified index such that it is positioned in the viewable area. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToIndex(params: {index: number; animated?: boolean; viewOffset?: number; viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - index (number, required): The index to scroll to.
      - viewOffset (number, optional): A fixed number of pixels to offset the final target position.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number}): Requires linear scan through data; use `scrollToIndex` instead if possible. Cannot scroll to locations outside the render window without specifying the `getItemLayout` prop.
  - Signature: scrollToItem(params: {animated?: ?boolean, item: Item, viewPosition?: number})
  - Parameters:
    - params (object, required): Configuration object.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
      - item (object, required): The item to scroll to.
      - viewPosition (number, optional): A value of `0` places the item at the top, `1` at the bottom, and `0.5` centered.
  - Returns: void

scrollToOffset(params: {offset: number; animated?: boolean}): Scroll to a specific content pixel offset in the list.
  - Signature: scrollToOffset(params: {offset: number; animated?: boolean})
  - Parameters:
    - params (object, required): Configuration object.
      - offset (number, required): The offset to scroll to. For horizontal lists, this is the x-value; otherwise, it's the y-value.
      - animated (boolean, optional): Whether the list should do an animation while scrolling. Defaults to `true`.
  - Returns: void
```

----------------------------------------

TITLE: PixelRatio Example App
DESCRIPTION: A comprehensive example demonstrating various `PixelRatio` methods like `get()`, `getFontScale()`, and `getPixelSizeForLayoutSize()` within a React Native application.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/pixelratio.md#_snippet_1

LANGUAGE: jsx
CODE:
```
import React from ""react"";
import { Image, PixelRatio, ScrollView, StyleSheet, Text, View } from ""react-native"";

const size = 50;
const cat = {
  uri: ""https://reactnative.dev/docs/assets/p_cat1.png"",
  width: size,
  height: size
};

const App = () => (
  <ScrollView style={styles.scrollContainer}>
    <View style={styles.container}>
      <Text>Current Pixel Ratio is:</Text>
      <Text style={styles.value}>{PixelRatio.get()}</Text>
    </View>
    <View style={styles.container}>
      <Text>Current Font Scale is:</Text>
      <Text style={styles.value}>{PixelRatio.getFontScale()}</Text>
    </View>
    <View style={styles.container}>
      <Text>On this device images with a layout width of</Text>
      <Text style={styles.value}>
        {size} px
      </Text>
      <Image source={cat} />
    </View>
    <View style={styles.container}>
      <Text>require images with a pixel width of</Text>
      <Text style={styles.value}>
        {PixelRatio.getPixelSizeForLayoutSize(size)} px
      </Text>
      <Image
        source={cat}
        style={{
          width: PixelRatio.getPixelSizeForLayoutSize(size),
          height: PixelRatio.getPixelSizeForLayoutSize(size)
        }}
      />
    </View>
  </ScrollView>
);

const styles = StyleSheet.create({
  scrollContainer: {
    flex: 1,
  },
  container: {
    justifyContent: ""center"",
    alignItems: ""center""
  },
  value: {
    fontSize: 24,
    marginBottom: 12,
    marginTop: 4
  }
});

export default App;
```

----------------------------------------

TITLE: React Native Linking API: Get Initial URL
DESCRIPTION: Shows how to retrieve the initial URL that launched the app. This is useful when the app is opened directly via a deep link, providing the URL as a Promise that resolves when the app starts.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/linking.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Linking } from 'react-native';

async function getUrlAsync() {
  const initialUrl = await Linking.getInitialURL();
  if (initialUrl) {
    console.log(`App was launched with URL: ${initialUrl}`);
    // Handle the initial deep link URL here
  }
}

getUrlAsync();

```

----------------------------------------

TITLE: React Native Linking API: Get Initial URL
DESCRIPTION: Shows how to retrieve the initial URL that launched the app. This is useful when the app is opened directly via a deep link, providing the URL as a Promise that resolves when the app starts.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/linking.md#_snippet_6

LANGUAGE: javascript
CODE:
```
import { Linking } from 'react-native';

async function getUrlAsync() {
  const initialUrl = await Linking.getInitialURL();
  if (initialUrl) {
    console.log(`App was launched with URL: ${initialUrl}`);
    // Handle the initial deep link URL here
  }
}

getUrlAsync();

```

----------------------------------------

TITLE: React Native StyleSheet API Reference
DESCRIPTION: Provides documentation for core methods of the React Native StyleSheet API, including static methods for creating, composing, flattening, and pre-processing styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/stylesheet.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
StyleSheet.compose(style1: Object, style2: Object): Object | Object[];
  Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;
  An identity function for creating styles. The main practical benefit of creating styles inside `StyleSheet.create()` is static type checking against native style properties.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;
  Flattens an array of style objects, into one aggregated style object.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.setStyleAttributePreprocessor(property: string, process: (propValue: any) => any);
  Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.
  WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.
```

----------------------------------------

TITLE: AlertIOS API: alert()
DESCRIPTION: Provides detailed documentation for the static alert() method of AlertIOS, including its signature, parameters, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/alertios.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AlertIOS.alert(title: string, [message]: string, [callbackOrButtons]: ?(() => void),[ButtonsArray], [type]: AlertType): [object Object]
  - Create and display a popup alert.
  - Parameters:
    - title (string, Yes): The dialog's title. Passing null or '' will hide the title.
    - message (string, No): An optional message that appears below the dialog's title.
    - callbackOrButtons (?(() => void),[ButtonsArray], No): This optional argument should be either a single-argument function or an array of buttons. If passed a function, it will be called when the user taps 'OK'. If passed an array of button configurations, each button should include a `text` key, as well as optional `onPress` and `style` keys. `style` should be one of 'default', 'cancel' or 'destructive'.
    - type ([AlertType], No): Deprecated, do not use.
  - Returns: [object Object]
  - Example with custom buttons:
    AlertIOS.alert(
      'Update available',
      'Keep your app up to date to enjoy the latest features',
      [
        {
          text: 'Cancel',
          onPress: () => console.log('Cancel Pressed'),
          style: 'cancel',
        },
        {
          text: 'Install',
          onPress: () => console.log('Install Pressed'),
        },
      ],
    );
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Reference for the Clipboard API methods used to interact with the device's clipboard. Includes details on getting and setting string content.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard.getString()
  - Gets content of string type from the clipboard.
  - Returns a Promise that resolves with the clipboard content.
  - Example:
    async _getContent() {
      var content = await Clipboard.getString();
    }
```

LANGUAGE: APIDOC
CODE:
```
Clipboard.setString(content)
  - Sets content of string type to the clipboard.
  - Parameters:
    - content (string, Yes): The content to be stored in the clipboard.
  - Notice: Be careful when copying data other than string and number. Some data need additional stringification. For example, if you will try to copy an array, Android will raise an exception, but iOS will not.
```

----------------------------------------

TITLE: APIDOC: keyExtractor for Item Identification
DESCRIPTION: A function used to extract a unique key for each item in the list. This key is vital for React's reconciliation process, caching, and tracking item re-ordering.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/flatlist.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
keyExtractor: (item: ItemT, index: number) => string;

Description:
  Used to extract a unique key for a given item at the specified index. The key is used for caching and as the React key to track item re-ordering.

Parameters:
  - item: The data item for the current row.
  - index: The index of the current row.

Returns:
  A unique string key for the item.

Default Behavior:
  The default extractor checks `item.key`, then `item.id`, and falls back to using the index.
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to copy text to the clipboard and retrieve it using React Native's Clipboard API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/clipboard.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState} from 'react';
import {
  SafeAreaView,
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <SafeAreaView style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native MaskedViewIOS with Image Mask
DESCRIPTION: Illustrates using `MaskedViewIOS` with a more complex `maskElement` containing an Image, layered with other views. This example shows how to create a visual effect by masking a full-screen blue layer with a Twitter logo.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2018-01-18-implementing-twitters-app-loading-animation-in-react-native.md#_snippet_1

LANGUAGE: jsx
CODE:
```
<MaskedViewIOS
  style={{flex: 1}}
  maskElement={
    <View style={styles.centeredFullScreen}>
      <Image source={twitterLogo} />
    </View>
  }>
  {fullScreenWhiteLayer}
  <View style={{flex: 1}}>
    <MyApp />
  </View>
</MaskedViewIOS>;
```

----------------------------------------

TITLE: PixelRatio API Reference
DESCRIPTION: Provides details on the static methods available in the PixelRatio API, including their return types and common usage scenarios.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/pixelratio.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
PixelRatio:
  get(): number
    - Returns the device pixel density.
    - Examples:
      - PixelRatio.get() === 1 (mdpi Android devices)
      - PixelRatio.get() === 1.5 (hdpi Android devices)
      - PixelRatio.get() === 2 (iPhone SE, 6S, 7, 8, XR, 11; xhdpi Android devices)
      - PixelRatio.get() === 3 (iPhone 6S Plus, 7 Plus, 8 Plus, X, XS, XS Max, 11 Pro, 11 Pro Max; Pixel, Pixel 2; xxhdpi Android devices)
      - PixelRatio.get() === 3.5 (Nexus 6, Pixel XL, Pixel 2 XL; xxxhdpi Android devices)

  getPixelSizeForLayoutSize(layoutSize: number): number
    - Converts a layout size (dp) to a pixel size (px) based on the device's pixel ratio.
    - Parameters:
      - layoutSize: The size in density-independent pixels (dp).
    - Returns: The corresponding size in physical pixels (px).

  getFontScale(): number
    - Returns the font scale factor for the device.
    - This value is independent of the pixel ratio and reflects the user's text size preference.
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to copy text to the clipboard and retrieve it using React Native's Clipboard API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/clipboard.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState} from 'react';
import {
  SafeAreaView,
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <SafeAreaView style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: Start Animated.timing Animation
DESCRIPTION: Demonstrates initiating an animation using Animated.timing. This method animates an Animated.Value to a specified 'toValue' over a given 'duration'. Setting 'useNativeDriver: true' is crucial for offloading animation to the native thread for better performance.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2018-01-18-implementing-twitters-app-loading-animation-in-react-native.md#_snippet_4

LANGUAGE: javascript
CODE:
```
Animated.timing(this.state.loadingProgress, {
  toValue: 100,
  duration: 1000,
  useNativeDriver: true
}).start()
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to copy text to the clipboard and retrieve it using React Native's Clipboard API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/clipboard.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState} from 'react';
import {
  SafeAreaView,
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <SafeAreaView style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to copy text to the clipboard and retrieve it using React Native's Clipboard API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/clipboard.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState} from 'react';
import {
  SafeAreaView,
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <SafeAreaView style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: Toast Android API Example
DESCRIPTION: A React Native example demonstrating the usage of ToastAndroid methods like show, showWithGravity, and showWithGravityAndOffset.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Button title=""Toggle Toast"" onPress={() => showToast()} />
        <Button
          title=""Toggle Toast With Gravity""
          onPress={() => showToastWithGravity()}
        />
        <Button
          title=""Toggle Toast With Gravity & Offset""
          onPress={() => showToastWithGravityAndOffset()}
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native ToastAndroid Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API in React Native to show simple toasts, toasts with gravity, and toasts with gravity and offset. This example requires an Android device or emulator.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {View, StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <View style={styles.container}>
      <Button title=""Toggle Toast"" onPress={() => showToast()} />
      <Button
        title=""Toggle Toast With Gravity""
        onPress={() => showToastWithGravity()}
      />
      <Button
        title=""Toggle Toast With Gravity & Offset""
        onPress={() => showToastWithGravityAndOffset()}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: Clipboard API Example
DESCRIPTION: Demonstrates how to use the Clipboard API in React Native to copy text to the clipboard and fetch the currently copied text.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/clipboard.md#_snippet_0

LANGUAGE: jsx
CODE:
```
import React, {useState} from 'react';
import {
  SafeAreaView,
  View,
  Text,
  TouchableOpacity,
  Clipboard,
  StyleSheet,
} from 'react-native';

const App = () => {
  const [copiedText, setCopiedText] = useState('');

  const copyToClipboard = () => {
    Clipboard.setString('hello world');
  };

  const fetchCopiedText = async () => {
    const text = await Clipboard.getString();
    setCopiedText(text);
  };

  return (
    <SafeAreaView style={{flex: 1}}>
      <View style={styles.container}>
        <TouchableOpacity onPress={() => copyToClipboard()}>
          <Text>Click here to copy to Clipboard</Text>
        </TouchableOpacity>
        <TouchableOpacity onPress={() => fetchCopiedText()}>
          <Text>View copied text</Text>
        </TouchableOpacity>

        <Text style={styles.copiedText}>{copiedText}</Text>
      </View>
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  copiedText: {
    marginTop: 10,
    color: 'red',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native ToastAndroid Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API in React Native to show simple toasts, toasts with gravity, and toasts with gravity and offset. This example requires an Android device or emulator.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {View, StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <View style={styles.container}>
      <Button title=""Toggle Toast"" onPress={() => showToast()} />
      <Button
        title=""Toggle Toast With Gravity""
        onPress={() => showToastWithGravity()}
      />
      <Button
        title=""Toggle Toast With Gravity & Offset""
        onPress={() => showToastWithGravityAndOffset()}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native ToastAndroid Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API in React Native to show simple toasts, toasts with gravity, and toasts with gravity and offset. This example requires an Android device or emulator.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {View, StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <View style={styles.container}>
      <Button title=""Toggle Toast"" onPress={() => showToast()} />
      <Button
        title=""Toggle Toast With Gravity""
        onPress={() => showToastWithGravity()}
      />
      <Button
        title=""Toggle Toast With Gravity & Offset""
        onPress={() => showToastWithGravityAndOffset()}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native ToastAndroid Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API in React Native to show simple toasts, toasts with gravity, and toasts with gravity and offset. This example requires an Android device or emulator.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {View, StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <View style={styles.container}>
      <Button title=""Toggle Toast"" onPress={() => showToast()} />
      <Button
        title=""Toggle Toast With Gravity""
        onPress={() => showToastWithGravity()}
      />
      <Button
        title=""Toggle Toast With Gravity & Offset""
        onPress={() => showToastWithGravityAndOffset()}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: APIDOC: getItemLayout for List Performance
DESCRIPTION: Defines the layout of items for performance optimization. It allows the list to skip measuring dynamic content if item sizes are known ahead of time, significantly boosting performance for large lists.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/flatlist.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
getItemLayout: (data, index) => {length: number, offset: number, index: number}

Description:
  An optional optimization that allows skipping the measurement of dynamic content if you know the size (height or width) of items ahead of time. This is efficient for fixed-size items.

Parameters:
  - data: The data array for the list.
  - index: The index of the item.

Returns:
  An object containing:
    - length: The length (height or width) of the item.
    - offset: The offset of the item from the start of the list.
    - index: The index of the item.

Example:
  getItemLayout={(data, index) => (
    {length: ITEM_HEIGHT, offset: ITEM_HEIGHT * index, index}
  )}

Notes:
  - Include separator length in offset calculation if ItemSeparatorComponent is specified.
  - Crucial for `initialScrollIndex` to work correctly.
```

----------------------------------------

TITLE: React Native ToastAndroid Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API in React Native to show simple toasts, toasts with gravity, and toasts with gravity and offset. This example requires an Android device or emulator.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {View, StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <View style={styles.container}>
      <Button title=""Toggle Toast"" onPress={() => showToast()} />
      <Button
        title=""Toggle Toast With Gravity""
        onPress={() => showToastWithGravity()}
      />
      <Button
        title=""Toggle Toast With Gravity & Offset""
        onPress={() => showToastWithGravityAndOffset()}
      />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: React Native Transform Prop API Reference
DESCRIPTION: Provides a comprehensive reference for the `transform` style prop in React Native. It details the accepted formats (array of objects or string) and lists all supported transformation types with their parameters and usage.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/transforms.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Transform Prop:
  Applies visual transformations to a component.

  Accepts:
    - An array of transformation objects.
    - A space-separated string of transformation functions.

  Format:
    style={{ transform: [{ transformation: value }, ...] }}
    style={{ transform: 'transformation1(value1) transformation2(value2)' }}

  Transformation Types:
    - matrix: {matrix: number[]}
      Applies a 3x3 matrix transformation. Requires an array of 9 numbers.
      Example: {matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1]}

    - perspective: {perspective: number}
      Applies perspective transformation. Requires a single number representing the distance of the z=0 plane from the viewer.
      Example: {perspective: 1000}

    - rotate: {rotate: string}
      Rotates the element around the Z axis. Requires a string value with unit (deg or rad).
      Example: {rotate: '45deg'}

    - rotateX: {rotateX: string}
      Rotates the element around the X axis. Requires a string value with unit (deg or rad).
      Example: {rotateX: '45deg'}

    - rotateY: {rotateY: string}
      Rotates the element around the Y axis. Requires a string value with unit (deg or rad).
      Example: {rotateY: '45deg'}

    - rotateZ: {rotateZ: string}
      Rotates the element around the Z axis. Requires a string value with unit (deg or rad).
      Example: {rotateZ: '0.785398rad'}

    - scale: {scale: number}
      Scales the element uniformly. Requires a single number.
      Example: {scale: 2}

    - scaleX: {scaleX: number}
      Scales the element along the X axis. Requires a single number.
      Example: {scaleX: 1.5}

    - scaleY: {scaleY: number}
      Scales the element along the Y axis. Requires a single number.
      Example: {scaleY: 0.5}

    - translateX: {translateX: number}
      Translates the element along the X axis. Requires a number representing the distance.
      Example: {translateX: 50}

    - translateY: {translateY: number}
      Translates the element along the Y axis. Requires a number representing the distance.
      Example: {translateY: -50}

    - skewX: {skewX: string}
      Skews the element along the X axis. Requires a string value with unit (deg).
      Example: {skewX: '45deg'}

    - skewY: {skewY: string}
      Skews the element along the Y axis. Requires a string value with unit (deg).
      Example: {skewY: '30deg'}

  String Format Examples:
    transform: 'rotateX(45deg) rotateZ(0.785398rad)'
    transform: 'skewX(45deg) skewY(30deg)'

  Deprecated Properties:
    The following properties are deprecated and should be replaced with the `transform` prop:
    - decomposedMatrix
    - rotation
    - scaleX
    - scaleY
    - transformMatrix
    - translateX
    - translateY

```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. This process transforms JSX and other syntax into executable JavaScript.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/get-started-without-a-framework.md#_snippet_2

LANGUAGE: npm
CODE:
```
npm start
```

LANGUAGE: yarn
CODE:
```
yarn start
```

----------------------------------------

TITLE: Share Content Example
DESCRIPTION: Demonstrates how to share text content using the React Native Share API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native StyleSheet API Reference
DESCRIPTION: Provides documentation for core methods of the React Native StyleSheet API, including static methods for creating, composing, flattening, and pre-processing styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/stylesheet.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
StyleSheet.compose(style1: Object, style2: Object): Object | Object[];
  Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;
  An identity function for creating styles. The main practical benefit of creating styles inside `StyleSheet.create()` is static type checking against native style properties.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;
  Flattens an array of style objects, into one aggregated style object.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.setStyleAttributePreprocessor(property: string, process: (propValue: any) => any);
  Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.
  WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.
```

----------------------------------------

TITLE: Share Content Example
DESCRIPTION: Demonstrates how to share text content using the React Native Share API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: Share Content Example
DESCRIPTION: Demonstrates how to share text content using the React Native Share API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: Share Content Example
DESCRIPTION: Demonstrates how to share text content using the React Native Share API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, View, Button} from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <View style={{marginTop: 50}}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native StyleSheet API Reference
DESCRIPTION: Provides documentation for core methods of the React Native StyleSheet API, including static methods for creating, composing, flattening, and pre-processing styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/stylesheet.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
StyleSheet.compose(style1: Object, style2: Object): Object | Object[];
  Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;
  An identity function for creating styles. The main practical benefit of creating styles inside `StyleSheet.create()` is static type checking against native style properties.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;
  Flattens an array of style objects, into one aggregated style object.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.setStyleAttributePreprocessor(property: string, process: (propValue: any) => any);
  Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.
  WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. It transforms JSX and other syntax into executable JavaScript and watches for file changes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/get-started-without-a-framework.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. It transforms JSX and other syntax into executable JavaScript and watches for file changes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/get-started-without-a-framework.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. It transforms JSX and other syntax into executable JavaScript and watches for file changes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/get-started-without-a-framework.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: Animated PanResponder Example
DESCRIPTION: A complete React Native example demonstrating how to use PanResponder with the Animated API to create a draggable box component.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/panresponder.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React, {useRef} from 'react';
import {Animated, View, StyleSheet, PanResponder, Text} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}]),
      onPanResponderRelease: () => {
        pan.extractOffset();
      },
    }),
  ).current;

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.titleText}>Drag this box!</Text>
        <Animated.View
          style={{
            transform: [{translateX: pan.x}, {translateY: pan.y}],
          }}
          {...panResponder.panHandlers}>
          <View style={styles.box} />
        </Animated.View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: 'bold',
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native StyleSheet API Reference
DESCRIPTION: Provides documentation for core methods of the React Native StyleSheet API, including static methods for creating, composing, flattening, and pre-processing styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/stylesheet.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
StyleSheet.compose(style1: Object, style2: Object): Object | Object[];
  Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;
  An identity function for creating styles. The main practical benefit of creating styles inside `StyleSheet.create()` is static type checking against native style properties.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;
  Flattens an array of style objects, into one aggregated style object.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.setStyleAttributePreprocessor(property: string, process: (propValue: any) => any);
  Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.
  WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. It transforms JSX and other syntax into executable JavaScript and watches for file changes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/get-started-without-a-framework.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: React Native StyleSheet API Reference
DESCRIPTION: Provides documentation for core methods of the React Native StyleSheet API, including static methods for creating, composing, flattening, and pre-processing styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/stylesheet.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
StyleSheet.compose(style1: Object, style2: Object): Object | Object[];
  Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;
  An identity function for creating styles. The main practical benefit of creating styles inside `StyleSheet.create()` is static type checking against native style properties.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;
  Flattens an array of style objects, into one aggregated style object.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.setStyleAttributePreprocessor(property: string, process: (propValue: any) => any);
  Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.
  WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. It transforms JSX and other syntax into executable JavaScript and watches for file changes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/get-started-without-a-framework.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: React Native StyleSheet API Reference
DESCRIPTION: Provides documentation for core methods of the React Native StyleSheet API, including static methods for creating, composing, flattening, and pre-processing styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/stylesheet.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
StyleSheet.compose(style1: Object, style2: Object): Object | Object[];
  Combines two styles such that `style2` will override any styles in `style1`. If either style is falsy, the other one is returned without allocating an array, saving allocations and maintaining reference equality for PureComponent checks.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.create(styles: Object extends Record<string, ViewStyle | ImageStyle | TextStyle>): Object;
  An identity function for creating styles. The main practical benefit of creating styles inside `StyleSheet.create()` is static type checking against native style properties.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.flatten(style: Array<Object extends Record<string, ViewStyle | ImageStyle | TextStyle>>): Object;
  Flattens an array of style objects, into one aggregated style object.
```

LANGUAGE: APIDOC
CODE:
```
StyleSheet.setStyleAttributePreprocessor(property: string, process: (propValue: any) => any);
  Sets a function to use to pre-process a style property value. This is used internally to process color and transform values. You should not use this unless you really know what you are doing and have exhausted other options.
  WARNING: EXPERIMENTAL. Breaking changes will probably happen a lot and will not be reliably announced. The whole thing might be deleted, who knows? Use at your own risk.
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. It transforms JSX and other syntax into executable JavaScript and watches for file changes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/get-started-without-a-framework.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro development server, which is the JavaScript bundler for React Native. It transforms JSX and other syntax into executable JavaScript and watches for file changes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/get-started-without-a-framework.md#_snippet_2

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: ToastAndroid API Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API to show different types of toasts: a basic toast, a toast with gravity, and a toast with gravity and pixel offsets.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Button title=""Toggle Toast"" onPress={() => showToast()} />
        <Button
          title=""Toggle Toast With Gravity""
          onPress={() => showToastWithGravity()}
        />
        <Button
          title=""Toggle Toast With Gravity & Offset""
          onPress={() => showToastWithGravityAndOffset()}
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: Share Example (Class Component)
DESCRIPTION: Demonstrates how to use the React Native Share API within a class component to share text content. Handles success and dismissal states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/share.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import React, { Component } from 'react';
import { Share, View, Button } from 'react-native';

class ShareExample extends Component {
  onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });

      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      alert(error.message);
    }
  };

  render() {
    return (
      <View style={{ marginTop: 50 }}>
        <Button onPress={this.onShare} title=""Share"" />
      </View>
    );
  }
}

export default ShareExample;
```

----------------------------------------

TITLE: APIDOC: onEndReached for Infinite Scrolling
DESCRIPTION: Callback function invoked when the user scrolls near the end of the list content. It's commonly used to trigger fetching more data for infinite scrolling experiences.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/flatlist.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
onEndReached: (info: {distanceFromEnd: number}) => void;

Description:
  Called once when the scroll position gets within `onEndReachedThreshold` of the rendered content.

Parameters:
  - info: An object containing:
    - distanceFromEnd: The distance in pixels from the end of the content.

Notes:
  - Requires `onEndReachedThreshold` to be set.
```

----------------------------------------

TITLE: ToastAndroid API Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API to show different types of toasts: a basic toast, a toast with gravity, and a toast with gravity and pixel offsets.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Button title=""Toggle Toast"" onPress={() => showToast()} />
        <Button
          title=""Toggle Toast With Gravity""
          onPress={() => showToastWithGravity()}
        />
        <Button
          title=""Toggle Toast With Gravity & Offset""
          onPress={() => showToastWithGravityAndOffset()}
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: ToastAndroid API Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API to show different types of toasts: a basic toast, a toast with gravity, and a toast with gravity and pixel offsets.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Button title=""Toggle Toast"" onPress={() => showToast()} />
        <Button
          title=""Toggle Toast With Gravity""
          onPress={() => showToastWithGravity()}
        />
        <Button
          title=""Toggle Toast With Gravity & Offset""
          onPress={() => showToastWithGravityAndOffset()}
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: ToastAndroid API Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API to show different types of toasts: a basic toast, a toast with gravity, and a toast with gravity and pixel offsets.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Button title=""Toggle Toast"" onPress={() => showToast()} />
        <Button
          title=""Toggle Toast With Gravity""
          onPress={() => showToastWithGravity()}
        />
        <Button
          title=""Toggle Toast With Gravity & Offset""
          onPress={() => showToastWithGravityAndOffset()}
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: AsyncStorage API Reference
DESCRIPTION: Provides detailed documentation for AsyncStorage methods, including parameters, return values, and usage.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/asyncstorage.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AsyncStorage:
  getItem(key: string, [callback]: ?(error: ?Error, result: ?string) => void)
    Fetches an item for a `key` and invokes a callback upon completion. Returns a `Promise` object.
    Parameters:
      - key: string (Required) - Key of the item to fetch.
      - callback: function (Optional) - Function that will be called with a result if found or any error.

  setItem(key: string, value: string, [callback]: ?(error: ?Error) => void)
    Sets the value for a `key` and invokes a callback upon completion. Returns a `Promise` object.
    Parameters:
      - key: string (Required) - Key of the item to set.
      - value: string (Required) - Value to set for the `key`.
      - callback: function (Optional) - Function that will be called with any error.

  removeItem(key: string, [callback]: ?(error: ?Error) => void)
    Removes an item for a `key` and invokes a callback upon completion. Returns a `Promise` object.
    Parameters:
      - key: string (Required) - Key of the item to remove.
      - callback: function (Optional) - Function that will be called with any error.
```

----------------------------------------

TITLE: React Native Animated API Fade-In Example
DESCRIPTION: Demonstrates creating a fade-in effect for a React Native View component using the `Animated` API. It initializes an `Animated.Value` and uses `Animated.timing` to animate the opacity from 0 to 1, providing a performant way to handle animations declaratively.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/animations.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';

const FadeInView = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

LANGUAGE: typescript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';
import type {PropsWithChildren} from 'react';
import type {ViewStyle} from 'react-native';

type FadeInViewProps = PropsWithChildren<{style: ViewStyle}>;

const FadeInView: React.FC<FadeInViewProps> = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: React Native Animated API Fade-In Example
DESCRIPTION: Demonstrates creating a fade-in effect for a React Native View component using the `Animated` API. It initializes an `Animated.Value` and uses `Animated.timing` to animate the opacity from 0 to 1, providing a performant way to handle animations declaratively.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/animations.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';

const FadeInView = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

LANGUAGE: typescript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';
import type {PropsWithChildren} from 'react';
import type {ViewStyle} from 'react-native';

type FadeInViewProps = PropsWithChildren<{style: ViewStyle}>;

const FadeInView: React.FC<FadeInViewProps> = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: FlatList Selectable Example (React Native)
DESCRIPTION: Illustrates a selectable FlatList where users can tap items to select them, changing their appearance. This example uses React's `useState` hook and the `extraData` prop to manage and reflect the selected item's state.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/flatlist.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import React, { useState } from ""react"";
import { FlatList, SafeAreaView, StatusBar, StyleSheet, Text, TouchableOpacity } from ""react-native"";

const DATA = [
  {
    id: ""bd7acbea-c1b1-46c2-aed5-3ad53abb28ba"",
    title: ""First Item"",
  },
  {
    id: ""3ac68afc-c605-48d3-a4f8-fbd91aa97f63"",
    title: ""Second Item"",
  },
  {
    id: ""58694a0f-3da1-471f-bd96-145571e29d72"",
    title: ""Third Item"",
  },
];

const Item = ({ item, onPress, backgroundColor, textColor }) => (
  <TouchableOpacity onPress={onPress} style={[styles.item, backgroundColor]}>
    <Text style={[styles.title, textColor]}>{item.title}</Text>
  </TouchableOpacity>
);

const App = () => {
  const [selectedId, setSelectedId] = useState(null);

  const renderItem = ({ item }) => {
    const backgroundColor = item.id === selectedId ? ""#6e3b6e"" : ""#f9c2ff"";
    const color = item.id === selectedId ? 'white' : 'black';

    return (
      <Item
        item={item}
        onPress={() => setSelectedId(item.id)}
        backgroundColor={{ backgroundColor }}
        textColor={{ color }}
      />
    );
  };

  return (
    <SafeAreaView style={styles.container}>
      <FlatList
        data={DATA}
        renderItem={renderItem}
        keyExtractor={(item) => item.id}
        extraData={selectedId}
      />
    </SafeAreaView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: StatusBar.currentHeight || 0,
  },
  item: {
    padding: 20,
    marginVertical: 8,
    marginHorizontal: 16,
  },
  title: {
    fontSize: 32,
  },
});

export default App;
```

----------------------------------------

TITLE: Codegen Types Migration (Before)
DESCRIPTION: Example of importing codegen types using deep imports from `react-native/Libraries/` before enabling the Strict API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/strict-typescript-api.md#_snippet_1

LANGUAGE: ts
CODE:
```
import codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';
import type {
  Int32,
  WithDefault,
} from 'react-native/Libraries/Types/CodegenTypes';

interface NativeProps extends ViewProps {
  enabled?: WithDefault<boolean, true>;
  size?: Int32;
}

export default codegenNativeComponent<NativeProps>(
  'RNCustomComponent',
);
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: React Native Animated API Fade-In Example
DESCRIPTION: Demonstrates creating a fade-in effect for a React Native View component using the `Animated` API. It initializes an `Animated.Value` and uses `Animated.timing` to animate the opacity from 0 to 1, providing a performant way to handle animations declaratively.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/animations.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';

const FadeInView = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

LANGUAGE: typescript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';
import type {PropsWithChildren} from 'react';
import type {ViewStyle} from 'react-native';

type FadeInViewProps = PropsWithChildren<{style: ViewStyle}>;

const FadeInView: React.FC<FadeInViewProps> = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

----------------------------------------

TITLE: Codegen Types Migration (Before)
DESCRIPTION: Example of importing codegen types using deep imports from `react-native/Libraries/` before enabling the Strict API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/strict-typescript-api.md#_snippet_1

LANGUAGE: ts
CODE:
```
import codegenNativeComponent from 'react-native/Libraries/Utilities/codegenNativeComponent';
import type {
  Int32,
  WithDefault,
} from 'react-native/Libraries/Types/CodegenTypes';

interface NativeProps extends ViewProps {
  enabled?: WithDefault<boolean, true>;
  size?: Int32;
}

export default codegenNativeComponent<NativeProps>(
  'RNCustomComponent',
);
```

----------------------------------------

TITLE: AsyncStorage API Reference
DESCRIPTION: Provides detailed documentation for AsyncStorage methods, including parameters, return values, and usage.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/asyncstorage.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AsyncStorage:
  getItem(key: string, [callback]: ?(error: ?Error, result: ?string) => void)
    Fetches an item for a `key` and invokes a callback upon completion. Returns a `Promise` object.
    Parameters:
      - key: string (Required) - Key of the item to fetch.
      - callback: function (Optional) - Function that will be called with a result if found or any error.

  setItem(key: string, value: string, [callback]: ?(error: ?Error) => void)
    Sets the value for a `key` and invokes a callback upon completion. Returns a `Promise` object.
    Parameters:
      - key: string (Required) - Key of the item to set.
      - value: string (Required) - Value to set for the `key`.
      - callback: function (Optional) - Function that will be called with any error.

  removeItem(key: string, [callback]: ?(error: ?Error) => void)
    Removes an item for a `key` and invokes a callback upon completion. Returns a `Promise` object.
    Parameters:
      - key: string (Required) - Key of the item to remove.
      - callback: function (Optional) - Function that will be called with any error.
```

----------------------------------------

TITLE: React Native Share API Reference
DESCRIPTION: Reference for the Share API methods and properties in React Native. Covers the `share` method signature, parameters, return values, and action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.
  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.
  Parameters:
    content: object (Required) - Defines the content to be shared.
      message: string - A message to share.
      url: string (iOS only) - A URL to share.
      title: string (Android only) - Title of the message.
      Note: At least one of `url` and `message` is required.
    options: object (Optional) - Additional options for the share dialog.
      dialogTitle: string (Android only) - The title displayed in the Android share sheet.
      excludedActivityTypes: Array<string> (iOS only) - An array of activity types to exclude from the share sheet.
      subject: string (iOS only) - The subject line for email shares.
      tintColor: string (iOS only) - The tint color for the share sheet.
      anchor: object (iOS only) - The node to which the action sheet should be anchored (used for iPad).
  Returns: Promise<ShareResult>
    action: 'sharedAction' | 'dismissedAction' - Indicates the outcome of the share action.
    activityType: string (iOS only) - The type of activity the content was shared with.

sharedAction: string
  A static property representing the action when content is successfully shared.

dismissedAction: string (iOS only)
  A static property representing the action when the share dialog is dismissed by the user on iOS.
```

----------------------------------------

TITLE: React Native PanResponder Gesture Example
DESCRIPTION: This example demonstrates how to implement drag gestures using React Native's PanResponder API in conjunction with the Animated API. It shows how to create an animated View that can be freely dragged across the screen, covering both functional and class component implementations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/panresponder.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import React, { useRef } from ""react"";
import { Animated, View, StyleSheet, PanResponder, Text } from ""react-native"";

const App = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderGrant: () => {
        pan.setOffset({
          x: pan.x._value,
          y: pan.y._value
        });
      },
      onPanResponderMove: Animated.event(
        [
          null,
          { dx: pan.x, dy: pan.y }
        ]
      ),
      onPanResponderRelease: () => {
        pan.flattenOffset();
      }
    })
  ).current;

  return (
    <View style={styles.container}>
      <Text style={styles.titleText}>Drag this box!</Text>
      <Animated.View
        style={{
          transform: [{ translateX: pan.x }, { translateY: pan.y }]
        }}
        {...panResponder.panHandlers}
      >
        <View style={styles.box} />
      </Animated.View>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: ""center"",
    justifyContent: ""center""
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: ""bold""
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: ""blue"",
    borderRadius: 5
  }
});

export default App;
```

LANGUAGE: javascript
CODE:
```
import React, { Component } from ""react"";
import { Animated, View, StyleSheet, PanResponder, Text } from ""react-native"";

class App extends Component {
  pan = new Animated.ValueXY();
  panResponder = PanResponder.create({
    onMoveShouldSetPanResponder: () => true,
    onPanResponderGrant: () => {
      this.pan.setOffset({
        x: this.pan.x._value,
        y: this.pan.y._value
      });
    },
    onPanResponderMove: Animated.event([
      null,
      { dx: this.pan.x, dy: this.pan.y }
    ]),
    onPanResponderRelease: () => {
      this.pan.flattenOffset();
    }
  });

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.titleText}>Drag this box!</Text>
        <Animated.View
          style={{
            transform: [{ translateX: this.pan.x }, { translateY: this.pan.y }]
          }}
          {...this.panResponder.panHandlers}
        >
          <View style={styles.box} />
        </Animated.View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: ""center"",
    justifyContent: ""center""
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: ""bold""
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: ""blue"",
    borderRadius: 5
  }
});

export default App;
```

----------------------------------------

TITLE: React Native Animated API Fade-In Example
DESCRIPTION: Demonstrates creating a fade-in effect for a React Native View component using the `Animated` API. It initializes an `Animated.Value` and uses `Animated.timing` to animate the opacity from 0 to 1, providing a performant way to handle animations declaratively.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/animations.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';

const FadeInView = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

LANGUAGE: typescript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';
import type {PropsWithChildren} from 'react';
import type {ViewStyle} from 'react-native';

type FadeInViewProps = PropsWithChildren<{style: ViewStyle}>;

const FadeInView: React.FC<FadeInViewProps> = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

----------------------------------------

TITLE: React Native Animated API Fade-In Example
DESCRIPTION: Demonstrates creating a fade-in effect for a React Native View component using the `Animated` API. It initializes an `Animated.Value` and uses `Animated.timing` to animate the opacity from 0 to 1, providing a performant way to handle animations declaratively.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/animations.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';

const FadeInView = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

LANGUAGE: typescript
CODE:
```
import React, {useEffect} from 'react';
import {Animated, Text, View, useAnimatedValue} from 'react-native';
import type {PropsWithChildren} from 'react';
import type {ViewStyle} from 'react-native';

type FadeInViewProps = PropsWithChildren<{style: ViewStyle}>;

const FadeInView: React.FC<FadeInViewProps> = props => {
  const fadeAnim = useAnimatedValue(0); // Initial value for opacity: 0

  useEffect(() => {
    Animated.timing(fadeAnim, {
      toValue: 1,
      duration: 10000,
      useNativeDriver: true,
    }).start();
  }, [fadeAnim]);

  return (
    <Animated.View // Special animatable View
      style={{
        ...props.style,
        opacity: fadeAnim, // Bind opacity to animated value
      }}>
      {props.children}
    </Animated.View>
  );
};

// You can then use your `FadeInView` in place of a `View` in your components:
export default () => {
  return (
    <View
      style={{
        flex: 1,
        alignItems: 'center',
        justifyContent: 'center',
      }}>
      <FadeInView
        style={{
          width: 250,
          height: 50,
          backgroundColor: 'powderblue',
        }}>
        <Text style={{fontSize: 28, textAlign: 'center', margin: 10}}>
          Fading in
        </Text>
      </FadeInView>
    </View>
  );
};

```

----------------------------------------

TITLE: Codegen Types Migration (After)
DESCRIPTION: Example of importing codegen types from the `react-native` package after enabling the Strict API, using the `CodegenTypes` namespace.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/strict-typescript-api.md#_snippet_2

LANGUAGE: ts
CODE:
```
import {CodegenTypes, codegenNativeComponent} from 'react-native';

interface NativeProps extends ViewProps {
  enabled?: CodegenTypes.WithDefault<boolean, true>;
  size?: CodegenTypes.Int32;
}

export default codegenNativeComponent<NativeProps>(
  'RNCustomComponent',
);
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Provides detailed documentation for the `ActionSheetIOS` module, including methods for displaying native iOS action sheets and share sheets, along with their parameters, callbacks, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options: ActionSheetIOSOptions, callback: (buttonIndex: number) => void)
    Displays an iOS action sheet. The `options` object must contain one or more of:
    - `options` (array of strings): A list of button titles (required).
    - `cancelButtonIndex` (int): Index of the cancel button in `options`.
    - `cancelButtonTintColor` (string): The color used for the cancel button text.
    - `destructiveButtonIndex` (int or array of ints): Indices of destructive buttons in `options`.
    - `title` (string): A title to show above the action sheet.
    - `message` (string): A message to show below the title.
    - `anchor` (number): The node to which the action sheet should be anchored (used for iPad).
    - `tintColor` (string): The color used for non-destructive button titles.
    - `disabledButtonIndices` (array of numbers): A list of button indices which should be disabled.
    - `userInterfaceStyle` (string): The interface style for the action sheet (`light` or `dark`), otherwise the default system style is used.
    The 'callback' function takes one parameter, the zero-based index of the selected item.

    Minimal example:
    ActionSheetIOS.showActionSheetWithOptions(
      {
        options: ['Cancel', 'Remove'],
        destructiveButtonIndex: 1,
        cancelButtonIndex: 0,
      },
      buttonIndex => {
        if (buttonIndex === 1) {
          /* destructive action */
        }
      },
    );

  dismissActionSheet()
    Dismisses the most upper iOS action sheet presented. If no action sheet is present, a warning is displayed.

  showShareActionSheetWithOptions(options: ShareActionSheetIOSOptions, failureCallback: (error: Error) => void, successCallback: (success: boolean, method: string) => void)
    Displays the iOS share sheet. The `options` object should contain one or both of `message` and `url`, and can additionally have a `subject` or `excludedActivityTypes`:
    - `url` (string): A URL to share.
    - `message` (string): A message to share.
    - `subject` (string): A subject for the message.
    - `excludedActivityTypes` (array): The activities to exclude from the ActionSheet.
    > Note: If `url` points to a local file or is a base64-encoded URI, the file will be loaded and shared directly. If `url` points to a remote file or address, it must conform to URL format as described in RFC 2396. For example, a web URL without a proper protocol (HTTP/HTTPS) will not be shared.
    The 'failureCallback' function takes one parameter, an error object. The only property defined on this object is an optional `stack` property of type `string`.
    The 'successCallback' function takes two parameters: a boolean value signifying success or failure, and a string that, in the case of success, indicates the method of sharing.
```

----------------------------------------

TITLE: Animated PanResponder Example
DESCRIPTION: A complete React Native example demonstrating how to use PanResponder with the Animated API to create a draggable box component.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/panresponder.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React, {useRef} from 'react';
import {Animated, View, StyleSheet, PanResponder, Text} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}]),
      onPanResponderRelease: () => {
        pan.extractOffset();
      },
    }),
  ).current;

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.titleText}>Drag this box!</Text>
        <Animated.View
          style={{
            transform: [{translateX: pan.x}, {translateY: pan.y}],
          }}
          {...panResponder.panHandlers}>
          <View style={styles.box} />
        </Animated.View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: 'bold',
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
});

export default App;
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Provides detailed documentation for the `ActionSheetIOS` module, including methods for displaying native iOS action sheets and share sheets, along with their parameters, callbacks, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options: ActionSheetIOSOptions, callback: (buttonIndex: number) => void)
    Displays an iOS action sheet. The `options` object must contain one or more of:
    - `options` (array of strings): A list of button titles (required).
    - `cancelButtonIndex` (int): Index of the cancel button in `options`.
    - `cancelButtonTintColor` (string): The color used for the cancel button text.
    - `destructiveButtonIndex` (int or array of ints): Indices of destructive buttons in `options`.
    - `title` (string): A title to show above the action sheet.
    - `message` (string): A message to show below the title.
    - `anchor` (number): The node to which the action sheet should be anchored (used for iPad).
    - `tintColor` (string): The color used for non-destructive button titles.
    - `disabledButtonIndices` (array of numbers): A list of button indices which should be disabled.
    - `userInterfaceStyle` (string): The interface style for the action sheet (`light` or `dark`), otherwise the default system style is used.
    The 'callback' function takes one parameter, the zero-based index of the selected item.

    Minimal example:
    ActionSheetIOS.showActionSheetWithOptions(
      {
        options: ['Cancel', 'Remove'],
        destructiveButtonIndex: 1,
        cancelButtonIndex: 0,
      },
      buttonIndex => {
        if (buttonIndex === 1) {
          /* destructive action */
        }
      },
    );

  dismissActionSheet()
    Dismisses the most upper iOS action sheet presented. If no action sheet is present, a warning is displayed.

  showShareActionSheetWithOptions(options: ShareActionSheetIOSOptions, failureCallback: (error: Error) => void, successCallback: (success: boolean, method: string) => void)
    Displays the iOS share sheet. The `options` object should contain one or both of `message` and `url`, and can additionally have a `subject` or `excludedActivityTypes`:
    - `url` (string): A URL to share.
    - `message` (string): A message to share.
    - `subject` (string): A subject for the message.
    - `excludedActivityTypes` (array): The activities to exclude from the ActionSheet.
    > Note: If `url` points to a local file or is a base64-encoded URI, the file will be loaded and shared directly. If `url` points to a remote file or address, it must conform to URL format as described in RFC 2396. For example, a web URL without a proper protocol (HTTP/HTTPS) will not be shared.
    The 'failureCallback' function takes one parameter, an error object. The only property defined on this object is an optional `stack` property of type `string`.
    The 'successCallback' function takes two parameters: a boolean value signifying success or failure, and a string that, in the case of success, indicates the method of sharing.
```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Provides detailed documentation for the `ActionSheetIOS` module, including methods for displaying native iOS action sheets and share sheets, along with their parameters, callbacks, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options: ActionSheetIOSOptions, callback: (buttonIndex: number) => void)
    Displays an iOS action sheet. The `options` object must contain one or more of:
    - `options` (array of strings): A list of button titles (required).
    - `cancelButtonIndex` (int): Index of the cancel button in `options`.
    - `cancelButtonTintColor` (string): The color used for the cancel button text.
    - `destructiveButtonIndex` (int or array of ints): Indices of destructive buttons in `options`.
    - `title` (string): A title to show above the action sheet.
    - `message` (string): A message to show below the title.
    - `anchor` (number): The node to which the action sheet should be anchored (used for iPad).
    - `tintColor` (string): The color used for non-destructive button titles.
    - `disabledButtonIndices` (array of numbers): A list of button indices which should be disabled.
    - `userInterfaceStyle` (string): The interface style for the action sheet (`light` or `dark`), otherwise the default system style is used.
    The 'callback' function takes one parameter, the zero-based index of the selected item.

    Minimal example:
    ActionSheetIOS.showActionSheetWithOptions(
      {
        options: ['Cancel', 'Remove'],
        destructiveButtonIndex: 1,
        cancelButtonIndex: 0,
      },
      buttonIndex => {
        if (buttonIndex === 1) {
          /* destructive action */
        }
      },
    );

  dismissActionSheet()
    Dismisses the most upper iOS action sheet presented. If no action sheet is present, a warning is displayed.

  showShareActionSheetWithOptions(options: ShareActionSheetIOSOptions, failureCallback: (error: Error) => void, successCallback: (success: boolean, method: string) => void)
    Displays the iOS share sheet. The `options` object should contain one or both of `message` and `url`, and can additionally have a `subject` or `excludedActivityTypes`:
    - `url` (string): A URL to share.
    - `message` (string): A message to share.
    - `subject` (string): A subject for the message.
    - `excludedActivityTypes` (array): The activities to exclude from the ActionSheet.
    > Note: If `url` points to a local file or is a base64-encoded URI, the file will be loaded and shared directly. If `url` points to a remote file or address, it must conform to URL format as described in RFC 2396. For example, a web URL without a proper protocol (HTTP/HTTPS) will not be shared.
    The 'failureCallback' function takes one parameter, an error object. The only property defined on this object is an optional `stack` property of type `string`.
    The 'successCallback' function takes two parameters: a boolean value signifying success or failure, and a string that, in the case of success, indicates the method of sharing.
```

----------------------------------------

TITLE: Animated PanResponder Example
DESCRIPTION: A complete React Native example demonstrating how to use PanResponder with the Animated API to create a draggable box component.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/panresponder.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React, {useRef} from 'react';
import {Animated, View, StyleSheet, PanResponder, Text} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}]),
      onPanResponderRelease: () => {
        pan.extractOffset();
      },
    }),
  ).current;

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.titleText}>Drag this box!</Text>
        <Animated.View
          style={{
            transform: [{translateX: pan.x}, {translateY: pan.y}],
          }}
          {...panResponder.panHandlers}>
          <View style={styles.box} />
        </Animated.View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: 'bold',
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
});

export default App;
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides the API documentation for the DatePickerAndroid module, detailing its methods and their functionalities. Note that this component is deprecated and community packages are recommended.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Deprecated. Use one of the community packages instead.

  // Methods:
  static open(options)
    // Opens the standard Android date picker dialog.
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     - date (Date object or timestamp in milliseconds): The date to show by default.
    //     - minDate (Date or timestamp in milliseconds): The minimum date that can be selected.
    //     - maxDate (Date object or timestamp in milliseconds): The maximum date that can be selected.
    //     - mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       - 'calendar': Show a date picker in calendar mode.
    //       - 'spinner': Show a date picker in spinner mode.
    //       - 'default': Show a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   - Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   - If the dialog is dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   - Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: Native date picker dialog has UI glitches on Android 4 and lower with minDate/maxDate.

  static dateSetAction()
    // A static property indicating that a date has been selected.

  static dismissedAction()
    // A static property indicating that the dialog has been dismissed.
```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Provides detailed documentation for the `ActionSheetIOS` module, including methods for displaying native iOS action sheets and share sheets, along with their parameters, callbacks, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options: ActionSheetIOSOptions, callback: (buttonIndex: number) => void)
    Displays an iOS action sheet. The `options` object must contain one or more of:
    - `options` (array of strings): A list of button titles (required).
    - `cancelButtonIndex` (int): Index of the cancel button in `options`.
    - `cancelButtonTintColor` (string): The color used for the cancel button text.
    - `destructiveButtonIndex` (int or array of ints): Indices of destructive buttons in `options`.
    - `title` (string): A title to show above the action sheet.
    - `message` (string): A message to show below the title.
    - `anchor` (number): The node to which the action sheet should be anchored (used for iPad).
    - `tintColor` (string): The color used for non-destructive button titles.
    - `disabledButtonIndices` (array of numbers): A list of button indices which should be disabled.
    - `userInterfaceStyle` (string): The interface style for the action sheet (`light` or `dark`), otherwise the default system style is used.
    The 'callback' function takes one parameter, the zero-based index of the selected item.

    Minimal example:
    ActionSheetIOS.showActionSheetWithOptions(
      {
        options: ['Cancel', 'Remove'],
        destructiveButtonIndex: 1,
        cancelButtonIndex: 0,
      },
      buttonIndex => {
        if (buttonIndex === 1) {
          /* destructive action */
        }
      },
    );

  dismissActionSheet()
    Dismisses the most upper iOS action sheet presented. If no action sheet is present, a warning is displayed.

  showShareActionSheetWithOptions(options: ShareActionSheetIOSOptions, failureCallback: (error: Error) => void, successCallback: (success: boolean, method: string) => void)
    Displays the iOS share sheet. The `options` object should contain one or both of `message` and `url`, and can additionally have a `subject` or `excludedActivityTypes`:
    - `url` (string): A URL to share.
    - `message` (string): A message to share.
    - `subject` (string): A subject for the message.
    - `excludedActivityTypes` (array): The activities to exclude from the ActionSheet.
    > Note: If `url` points to a local file or is a base64-encoded URI, the file will be loaded and shared directly. If `url` points to a remote file or address, it must conform to URL format as described in RFC 2396. For example, a web URL without a proper protocol (HTTP/HTTPS) will not be shared.
    The 'failureCallback' function takes one parameter, an error object. The only property defined on this object is an optional `stack` property of type `string`.
    The 'successCallback' function takes two parameters: a boolean value signifying success or failure, and a string that, in the case of success, indicates the method of sharing.
```

----------------------------------------

TITLE: Animated PanResponder Example
DESCRIPTION: A complete React Native example demonstrating how to use PanResponder with the Animated API to create a draggable box component.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/panresponder.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React, {useRef} from 'react';
import {Animated, View, StyleSheet, PanResponder, Text} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}]),
      onPanResponderRelease: () => {
        pan.extractOffset();
      },
    }),
  ).current;

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.titleText}>Drag this box!</Text>
        <Animated.View
          style={{
            transform: [{translateX: pan.x}, {translateY: pan.y}],
          }}
          {...panResponder.panHandlers}>
          <View style={styles.box} />
        </Animated.View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: 'bold',
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Share API Reference
DESCRIPTION: Reference for the Share API methods and properties in React Native. Covers the `share` method signature, parameters, return values, and action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.
  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.
  Parameters:
    content: object (Required) - Defines the content to be shared.
      message: string - A message to share.
      url: string (iOS only) - A URL to share.
      title: string (Android only) - Title of the message.
      Note: At least one of `url` and `message` is required.
    options: object (Optional) - Additional options for the share dialog.
      dialogTitle: string (Android only) - The title displayed in the Android share sheet.
      excludedActivityTypes: Array<string> (iOS only) - An array of activity types to exclude from the share sheet.
      subject: string (iOS only) - The subject line for email shares.
      tintColor: string (iOS only) - The tint color for the share sheet.
      anchor: object (iOS only) - The node to which the action sheet should be anchored (used for iPad).
  Returns: Promise<ShareResult>
    action: 'sharedAction' | 'dismissedAction' - Indicates the outcome of the share action.
    activityType: string (iOS only) - The type of activity the content was shared with.

sharedAction: string
  A static property representing the action when content is successfully shared.

dismissedAction: string (iOS only)
  A static property representing the action when the share dialog is dismissed by the user on iOS.
```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Provides detailed documentation for the `ActionSheetIOS` module, including methods for displaying native iOS action sheets and share sheets, along with their parameters, callbacks, and usage examples.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options: ActionSheetIOSOptions, callback: (buttonIndex: number) => void)
    Displays an iOS action sheet. The `options` object must contain one or more of:
    - `options` (array of strings): A list of button titles (required).
    - `cancelButtonIndex` (int): Index of the cancel button in `options`.
    - `cancelButtonTintColor` (string): The color used for the cancel button text.
    - `destructiveButtonIndex` (int or array of ints): Indices of destructive buttons in `options`.
    - `title` (string): A title to show above the action sheet.
    - `message` (string): A message to show below the title.
    - `anchor` (number): The node to which the action sheet should be anchored (used for iPad).
    - `tintColor` (string): The color used for non-destructive button titles.
    - `disabledButtonIndices` (array of numbers): A list of button indices which should be disabled.
    - `userInterfaceStyle` (string): The interface style for the action sheet (`light` or `dark`), otherwise the default system style is used.
    The 'callback' function takes one parameter, the zero-based index of the selected item.

    Minimal example:
    ActionSheetIOS.showActionSheetWithOptions(
      {
        options: ['Cancel', 'Remove'],
        destructiveButtonIndex: 1,
        cancelButtonIndex: 0,
      },
      buttonIndex => {
        if (buttonIndex === 1) {
          /* destructive action */
        }
      },
    );

  dismissActionSheet()
    Dismisses the most upper iOS action sheet presented. If no action sheet is present, a warning is displayed.

  showShareActionSheetWithOptions(options: ShareActionSheetIOSOptions, failureCallback: (error: Error) => void, successCallback: (success: boolean, method: string) => void)
    Displays the iOS share sheet. The `options` object should contain one or both of `message` and `url`, and can additionally have a `subject` or `excludedActivityTypes`:
    - `url` (string): A URL to share.
    - `message` (string): A message to share.
    - `subject` (string): A subject for the message.
    - `excludedActivityTypes` (array): The activities to exclude from the ActionSheet.
    > Note: If `url` points to a local file or is a base64-encoded URI, the file will be loaded and shared directly. If `url` points to a remote file or address, it must conform to URL format as described in RFC 2396. For example, a web URL without a proper protocol (HTTP/HTTPS) will not be shared.
    The 'failureCallback' function takes one parameter, an error object. The only property defined on this object is an optional `stack` property of type `string`.
    The 'successCallback' function takes two parameters: a boolean value signifying success or failure, and a string that, in the case of success, indicates the method of sharing.
```

----------------------------------------

TITLE: DatePickerAndroid API Reference
DESCRIPTION: Provides comprehensive details on the DatePickerAndroid API, including the open method with its options, and constants for action types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/datepickerandroid.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DatePickerAndroid:
  // Opens the standard Android date picker dialog.
  static open(options)
    // Parameters:
    //   options (object): Configuration for the date picker.
    //     date (Date | number): The date to show by default (Date object or timestamp in milliseconds).
    //     minDate (Date | number): The minimum date that can be selected (Date object or timestamp in milliseconds).
    //     maxDate (Date | number): The maximum date that can be selected (Date object or timestamp in milliseconds).
    //     mode (enum('calendar', 'spinner', 'default')): Sets the date-picker mode.
    //       'calendar': Shows a date picker in calendar mode.
    //       'spinner': Shows a date picker in spinner mode.
    //       'default': Shows a default native date picker (spinner/calendar) based on Android versions.
    // Returns: Promise<object>
    //   Resolves with an object containing 'action', 'year', 'month' (0-11), 'day' if a date is picked.
    //   If dismissed, resolves with action being DatePickerAndroid.dismissedAction and other keys undefined.
    //   Always check action against DatePickerAndroid.dateSetAction before reading values.
    // Note: UI glitches may occur on Android 4 and lower with minDate/maxDate.

  // A date has been selected.
  static dateSetAction(): string

  // The dialog has been dismissed.
  static dismissedAction(): string
```

----------------------------------------

TITLE: Animated PanResponder Example
DESCRIPTION: A complete React Native example demonstrating how to use PanResponder with the Animated API to create a draggable box component.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/panresponder.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React, {useRef} from 'react';
import {Animated, View, StyleSheet, PanResponder, Text} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}]),
      onPanResponderRelease: () => {
        pan.extractOffset();
      },
    }),
  ).current;

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.titleText}>Drag this box!</Text>
        <Animated.View
          style={{
            transform: [{translateX: pan.x}, {translateY: pan.y}],
          }}
          {...panResponder.panHandlers}>
          <View style={styles.box} />
        </Animated.View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: 'bold',
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Share API Reference
DESCRIPTION: Reference for the Share API methods and properties in React Native. Covers the `share` method signature, parameters, return values, and action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.
  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.
  Parameters:
    content: object (Required) - Defines the content to be shared.
      message: string - A message to share.
      url: string (iOS only) - A URL to share.
      title: string (Android only) - Title of the message.
      Note: At least one of `url` and `message` is required.
    options: object (Optional) - Additional options for the share dialog.
      dialogTitle: string (Android only) - The title displayed in the Android share sheet.
      excludedActivityTypes: Array<string> (iOS only) - An array of activity types to exclude from the share sheet.
      subject: string (iOS only) - The subject line for email shares.
      tintColor: string (iOS only) - The tint color for the share sheet.
      anchor: object (iOS only) - The node to which the action sheet should be anchored (used for iPad).
  Returns: Promise<ShareResult>
    action: 'sharedAction' | 'dismissedAction' - Indicates the outcome of the share action.
    activityType: string (iOS only) - The type of activity the content was shared with.

sharedAction: string
  A static property representing the action when content is successfully shared.

dismissedAction: string (iOS only)
  A static property representing the action when the share dialog is dismissed by the user on iOS.
```

----------------------------------------

TITLE: Share Example (Functional Component)
DESCRIPTION: Demonstrates how to use the React Native Share API within a functional component to share text content. Handles success and dismissal states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Share, View, Button } from 'react-native';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      alert(error.message);
    }
  };
  return (
    <View style={{ marginTop: 50 }}>
      <Button onPress={onShare} title=""Share"" />
    </View>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: Codegen Types Migration (After)
DESCRIPTION: Example of importing codegen types from the `react-native` package after enabling the Strict API, using the `CodegenTypes` namespace.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/strict-typescript-api.md#_snippet_2

LANGUAGE: ts
CODE:
```
import {CodegenTypes, codegenNativeComponent} from 'react-native';

interface NativeProps extends ViewProps {
  enabled?: CodegenTypes.WithDefault<boolean, true>;
  size?: CodegenTypes.Int32;
}

export default codegenNativeComponent<NativeProps>(
  'RNCustomComponent',
);
```

----------------------------------------

TITLE: React Native Share API Reference
DESCRIPTION: Reference for the Share API methods and properties in React Native. Covers the `share` method signature, parameters, return values, and action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.
  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.
  Parameters:
    content: object (Required) - Defines the content to be shared.
      message: string - A message to share.
      url: string (iOS only) - A URL to share.
      title: string (Android only) - Title of the message.
      Note: At least one of `url` and `message` is required.
    options: object (Optional) - Additional options for the share dialog.
      dialogTitle: string (Android only) - The title displayed in the Android share sheet.
      excludedActivityTypes: Array<string> (iOS only) - An array of activity types to exclude from the share sheet.
      subject: string (iOS only) - The subject line for email shares.
      tintColor: string (iOS only) - The tint color for the share sheet.
      anchor: object (iOS only) - The node to which the action sheet should be anchored (used for iPad).
  Returns: Promise<ShareResult>
    action: 'sharedAction' | 'dismissedAction' - Indicates the outcome of the share action.
    activityType: string (iOS only) - The type of activity the content was shared with.

sharedAction: string
  A static property representing the action when content is successfully shared.

dismissedAction: string (iOS only)
  A static property representing the action when the share dialog is dismissed by the user on iOS.
```

----------------------------------------

TITLE: React Native Share API Reference
DESCRIPTION: Reference for the Share API methods and properties in React Native. Covers the `share` method signature, parameters, return values, and action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.
  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.
  Parameters:
    content: object (Required) - Defines the content to be shared.
      message: string - A message to share.
      url: string (iOS only) - A URL to share.
      title: string (Android only) - Title of the message.
      Note: At least one of `url` and `message` is required.
    options: object (Optional) - Additional options for the share dialog.
      dialogTitle: string (Android only) - The title displayed in the Android share sheet.
      excludedActivityTypes: Array<string> (iOS only) - An array of activity types to exclude from the share sheet.
      subject: string (iOS only) - The subject line for email shares.
      tintColor: string (iOS only) - The tint color for the share sheet.
      anchor: object (iOS only) - The node to which the action sheet should be anchored (used for iPad).
  Returns: Promise<ShareResult>
    action: 'sharedAction' | 'dismissedAction' - Indicates the outcome of the share action.
    activityType: string (iOS only) - The type of activity the content was shared with.

sharedAction: string
  A static property representing the action when content is successfully shared.

dismissedAction: string (iOS only)
  A static property representing the action when the share dialog is dismissed by the user on iOS.
```

----------------------------------------

TITLE: Animated PanResponder Example
DESCRIPTION: A complete React Native example demonstrating how to use PanResponder with the Animated API to create a draggable box component.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/panresponder.md#_snippet_1

LANGUAGE: tsx
CODE:
```
import React, {useRef} from 'react';
import {Animated, View, StyleSheet, PanResponder, Text} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const pan = useRef(new Animated.ValueXY()).current;

  const panResponder = useRef(
    PanResponder.create({
      onMoveShouldSetPanResponder: () => true,
      onPanResponderMove: Animated.event([null, {dx: pan.x, dy: pan.y}]),
      onPanResponderRelease: () => {
        pan.extractOffset();
      },
    }),
  ).current;

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.titleText}>Drag this box!</Text>
        <Animated.View
          style={{
            transform: [{translateX: pan.x}, {translateY: pan.y}],
          }}
          {...panResponder.panHandlers}>
          <View style={styles.box} />
        </Animated.View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  titleText: {
    fontSize: 14,
    lineHeight: 24,
    fontWeight: 'bold',
  },
  box: {
    height: 150,
    width: 150,
    backgroundColor: 'blue',
    borderRadius: 5,
  },
});

export default App;
```

----------------------------------------

TITLE: Share API Reference
DESCRIPTION: Provides detailed documentation for the React Native Share API, including the `share()` method signature, parameters, return values, and properties like `sharedAction` and `dismissedAction`.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/share.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
share(content, options)
  Open a dialog to share text content.

  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.

  Parameters:
    content (object): Required. Contains properties for sharing.
      message (string): A message to share.
      url (string): A URL to share (iOS only).
      title (string): Title of the message (Android only).
      At least one of `url` and `message` is required.
    options (object): Optional. Configuration for the share dialog.
      dialogTitle (string): Title for the share dialog (Android only).
      excludedActivityTypes (array): Array of activity types to exclude (iOS only).
      subject (string): Subject for email sharing (iOS only).
      tintColor (string): Tint color for the share dialog (iOS only).

sharedAction
  The content was successfully shared.

dismissedAction (iOS only)
  The dialog has been dismissed.
```

----------------------------------------

TITLE: Community CLI: Project Initialization Commands
DESCRIPTION: Details on how to create new React Native projects following the deprecation of the `react-native init` command. It outlines the recommended alternatives using Expo CLI or the Community CLI directly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2025-01-21-version-0.77.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Community CLI Commands:

react-native init deprecation:
  The `react-native init` command is deprecated and no longer supported.

Recommended alternatives:

1. Using Expo CLI:
   Command: npx create-expo-app <your-project-name>
   Description: Creates a new React Native project using the Expo framework.

2. Using Community CLI directly:
   Command: npx @react-native-community/cli init <your-project-name>
   Description: Initializes a new React Native project using the community CLI.

Note: Projects using Expo are not affected by the `react-native init` deprecation.
```

----------------------------------------

TITLE: React Native Share API Reference
DESCRIPTION: Reference for the Share API methods and properties in React Native. Covers the `share` method signature, parameters, return values, and action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.
  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.
  Parameters:
    content: object (Required) - Defines the content to be shared.
      message: string - A message to share.
      url: string (iOS only) - A URL to share.
      title: string (Android only) - Title of the message.
      Note: At least one of `url` and `message` is required.
    options: object (Optional) - Additional options for the share dialog.
      dialogTitle: string (Android only) - The title displayed in the Android share sheet.
      excludedActivityTypes: Array<string> (iOS only) - An array of activity types to exclude from the share sheet.
      subject: string (iOS only) - The subject line for email shares.
      tintColor: string (iOS only) - The tint color for the share sheet.
      anchor: object (iOS only) - The node to which the action sheet should be anchored (used for iPad).
  Returns: Promise<ShareResult>
    action: 'sharedAction' | 'dismissedAction' - Indicates the outcome of the share action.
    activityType: string (iOS only) - The type of activity the content was shared with.

sharedAction: string
  A static property representing the action when content is successfully shared.

dismissedAction: string (iOS only)
  A static property representing the action when the share dialog is dismissed by the user on iOS.
```

----------------------------------------

TITLE: Pressable Props Documentation (APIDOC)
DESCRIPTION: Detailed documentation for the props available on the Pressable component, covering configuration for press behavior, styling, and platform-specific features.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/pressable.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Pressable Props:

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.
```

----------------------------------------

TITLE: React Native Native Module Guides
DESCRIPTION: Guides for creating native components and modules for React Native. Covers both Android and iOS platforms, detailing the process of extending React Native with native code for custom functionalities and performance optimizations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/more-resources.md#_snippet_3

LANGUAGE: markdown
CODE:
```
Read the guides to making your own Native Modules ([Android](native-modules-android.md), [iOS](native-modules-ios.md)) and Native Components ([Android](native-components-android.md), [iOS](native-components-ios.md)).
```

----------------------------------------

TITLE: ToastAndroid API Example
DESCRIPTION: Demonstrates how to use the ToastAndroid API to show different types of toasts: a basic toast, a toast with gravity, and a toast with gravity and pixel offsets.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/toastandroid.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {StyleSheet, ToastAndroid, Button, StatusBar} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const showToast = () => {
    ToastAndroid.show('A pikachu appeared nearby !', ToastAndroid.SHORT);
  };

  const showToastWithGravity = () => {
    ToastAndroid.showWithGravity(
      'All Your Base Are Belong To Us',
      ToastAndroid.SHORT,
      ToastAndroid.CENTER,
    );
  };

  const showToastWithGravityAndOffset = () => {
    ToastAndroid.showWithGravityAndOffset(
      'A wild toast appeared!',
      ToastAndroid.LONG,
      ToastAndroid.BOTTOM,
      25,
      50,
    );
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Button title=""Toggle Toast"" onPress={() => showToast()} />
        <Button
          title=""Toggle Toast With Gravity""
          onPress={() => showToastWithGravity()}
        />
        <Button
          title=""Toggle Toast With Gravity & Offset""
          onPress={() => showToastWithGravityAndOffset()}
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: StatusBar.currentHeight,
    backgroundColor: '#888888',
    padding: 8,
  },
});

export default App;
```

----------------------------------------

TITLE: sequence() - React Native Animated API
DESCRIPTION: Starts an array of animations in sequential order, waiting for each to complete before proceeding. If an animation is stopped, subsequent animations in the sequence are not started.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/animated.md#_snippet_18

LANGUAGE: jsx
CODE:
```
static sequence(animations)
```

----------------------------------------

TITLE: Pressable Props Documentation (APIDOC)
DESCRIPTION: Detailed documentation for the props available on the Pressable component, covering configuration for press behavior, styling, and platform-specific features.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/pressable.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Pressable Props:

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.
```

----------------------------------------

TITLE: Start Android Headless JS Service
DESCRIPTION: Provides examples of how to start the configured Headless JS service from your Android application. This typically involves creating an Intent, adding any necessary data via a Bundle, and then starting the service.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/headless-js-android.md#_snippet_3

LANGUAGE: java
CODE:
```
Intent service = new Intent(getApplicationContext(), MyTaskService.class);
Bundle bundle = new Bundle();

bundle.putString(""foo"", ""bar"");
service.putExtras(bundle);

getApplicationContext().startForegroundService(service);
```

LANGUAGE: kotlin
CODE:
```
val service = Intent(applicationContext, MyTaskService::class.java)
val bundle = Bundle()

bundle.putString(""foo"", ""bar"")

service.putExtras(bundle)

applicationContext.startForegroundService(service)
```

----------------------------------------

TITLE: Pressable Props Documentation (APIDOC)
DESCRIPTION: Detailed documentation for the props available on the Pressable component, covering configuration for press behavior, styling, and platform-specific features.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/pressable.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Pressable Props:

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.
```

----------------------------------------

TITLE: Pressable Props Documentation (APIDOC)
DESCRIPTION: Detailed documentation for the props available on the Pressable component, covering configuration for press behavior, styling, and platform-specific features.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/pressable.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Pressable Props:

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.

style: StyleProp<ViewStyle> | ({pressed}) => StyleProp<ViewStyle>
  Description: Styles to be applied to the Pressable component. Can be a static style object or a function that receives the pressed state.

children: ReactNode | ({pressed: boolean}) => ReactNode
  Description: Either children or a function that receives a boolean reflecting whether the component is currently pressed.
  Type: [React Node](react-node)

android_disableSound: boolean
  Description: If true, doesn't play Android system sound on press.
  Default: false

android_ripple: object
  Description: Enables the Android ripple effect and configures its properties.
  Type: [RippleConfig](pressable#rippleconfig)

unstable_pressDelay: number
  Description: Duration (in milliseconds) to wait after press down before calling onPressIn.
  Type: number

delayLongPress: number
  Description: Duration (in milliseconds) from onPressIn before onLongPress is called.
  Default: 500

disabled: boolean
  Description: Whether the press behavior is disabled.
  Default: false

hitSlop: Rect | number
  Description: Sets additional distance outside of element in which a press can be detected.
  Type: [Rect](rect) or number

pressRetentionOffset: Rect | number
  Description: Allows presses to move beyond the element and its HitRect while maintaining activation and being eligible for a ""press"".
  Type: [Rect](rect) or number

onBlur: () => void
  Description: Called when the component loses focus.

onFocus: () => void
  Description: Called when the component gains focus.

onHoverIn: () => void
  Description: Called when the pointer enters the hover area of the component.

onHoverOut: () => void
  Description: Called when the pointer leaves the hover area of the component.

onLongPress: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called after a specified duration of time when the press is still active.

onPress: () => void
  Description: Called when a press is activated and then released.

onPressIn: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is activated.

onPressOut: ({changedTouches, nativeEvent, pageX, pageY, timestamp, touches}) => void
  Description: Called when a press is deactivated.

accessibilityRole: AccessibilityRole
  Description: Accessibility role for the component.

accessibilityState: AccessibilityState
  Description: Accessibility state for the component.

accessibilityLabel: string
  Description: Accessibility label for the component.

accessibilityHint: string
  Description: Accessibility hint for the component.

accessibilityValue: AccessibilityValue
  Description: Accessibility value for the component.

accessibilityActions: AccessibilityAction[]
  Description: Accessibility actions for the component.

onAccessibilityAction: (event: AccessibilityActionEvent) => void
  Description: Handler for accessibility actions.

focusable: boolean
  Description: Whether the component is focusable.

nextFocusDown: number | string
  Description: Identifier for the next focusable component down.

nextFocusForward: number | string
  Description: Identifier for the next focusable component forward.

nextFocusLeft: number | string
  Description: Identifier for the next focusable component to the left.

nextFocusRight: number | string
  Description: Identifier for the next focusable component to the right.

nextFocusUp: number | string
  Description: Identifier for the next focusable component up.
```

----------------------------------------

TITLE: Start Android Headless JS Service
DESCRIPTION: Provides examples of how to start the configured Headless JS service from your Android application. This typically involves creating an Intent, adding any necessary data via a Bundle, and then starting the service.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/headless-js-android.md#_snippet_3

LANGUAGE: java
CODE:
```
Intent service = new Intent(getApplicationContext(), MyTaskService.class);
Bundle bundle = new Bundle();

bundle.putString(""foo"", ""bar"");
service.putExtras(bundle);

getApplicationContext().startForegroundService(service);
```

LANGUAGE: kotlin
CODE:
```
val service = Intent(applicationContext, MyTaskService::class.java)
val bundle = Bundle()

bundle.putString(""foo"", ""bar"")

service.putExtras(bundle)

applicationContext.startForegroundService(service)
```

----------------------------------------

TITLE: DatePickerIOS Props Reference
DESCRIPTION: API documentation detailing the properties available for the DatePickerIOS component. This includes data types, whether they are required, and descriptions of their functionality, along with usage examples for specific props.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/datepickerios.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
DatePickerIOS Component Props:

Inherits [View Props](view.md#props).

- `date`
  - Type: Date
  - Required: Yes
  - Description: The currently selected date.

- `onChange`
  - Type: function
  - Required: No
  - Description: Date change handler. This is called when the user changes the date or time in the UI. The first and only argument is an Event. For getting the date the picker was changed to, use onDateChange instead.

- `onDateChange`
  - Type: function
  - Required: Yes
  - Description: Date change handler. This is called when the user changes the date or time in the UI. The first and only argument is a Date object representing the new date and time.

- `maximumDate`
  - Type: Date
  - Required: No
  - Description: Maximum date. Restricts the range of possible date/time values.
  - Example: Set to December 31, 2017.

- `minimumDate`
  - Type: Date
  - Required: No
  - Description: Minimum date. Restricts the range of possible date/time values.

- `minuteInterval`
  - Type: enum(1, 2, 3, 4, 5, 6, 10, 12, 15, 20, 30)
  - Required: No
  - Description: The interval at which minutes can be selected.
  - Example: Set to 10.

- `mode`
  - Type: enum('date', 'time', 'datetime', 'countdown')
  - Required: No
  - Description: The date picker mode.
  - Example: 'date', 'time', and 'datetime'.

- `locale`
  - Type: String
  - Required: No
  - Description: The locale for the date picker. Value needs to be a [Locale ID](https://developer.apple.com/library/content/documentation/MacOSX/Conceptual/BPInternational/LanguageandLocaleIDs/LanguageandLocaleIDs.html).

- `timeZoneOffsetInMinutes`
  - Type: number
  - Required: No
  - Description: Timezone offset in minutes. By default, the date picker will use the device's timezone. With this parameter, it is possible to force a certain timezone offset. For instance, to show times in Pacific Standard Time, pass -7 * 60.

- `initialDate`
  - Type: Date
  - Required: No
  - Description: Provides an initial value that will change when the user starts selecting a date. It is useful for use-cases where you do not want to deal with listening to events and updating the date prop to keep the controlled state in sync. The controlled state has known bugs which causes it to go out of sync with native. The initialDate prop is intended to allow you to have native be source of truth.
```

----------------------------------------

TITLE: React Native Native Module Guides
DESCRIPTION: Guides for creating native components and modules for React Native. Covers both Android and iOS platforms, detailing the process of extending React Native with native code for custom functionalities and performance optimizations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/more-resources.md#_snippet_3

LANGUAGE: markdown
CODE:
```
Read the guides to making your own Native Modules ([Android](native-modules-android.md), [iOS](native-modules-ios.md)) and Native Components ([Android](native-components-android.md), [iOS](native-components-ios.md)).
```

----------------------------------------

TITLE: Strict TypeScript API: Dimensions API Type Fix
DESCRIPTION: Shows an example of a type correction in the Dimensions API. Previously, accessing 'densityDpi' might have resulted in a type error or undefined value; with generated types, it's correctly typed as a number.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2025-06-12-moving-towards-a-stable-javascript-api.md#_snippet_10

LANGUAGE: tsx
CODE:
```
import {Dimensions} from 'react-native';

// Before - Type error
// After - number | undefined
const {densityDpi} = Dimensions.get();
```

----------------------------------------

TITLE: FlatList renderItem Prop
DESCRIPTION: Defines how each item in the list should be rendered. It receives item data, index, and separator manipulation functions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/flatlist.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
renderItem: (info: {item: ItemT, index: number, separators: {highlight: () => void, unhighlight: () => void, updateProps: (select: 'leading' | 'trailing', newProps: any) => void}}) => JSX.Element;

Description:
Takes an item from `data` and renders it into the list. Provides additional metadata like `index` and a `separators` object for advanced UI manipulation.

Parameters:
- item (Object): The item from `data` being rendered.
- index (number): The index corresponding to this item in the `data` array.
- separators (Object):
  - highlight (Function): Highlights the item separator.
  - unhighlight (Function): Removes highlight from the item separator.
  - updateProps (Function):
    - select (enum('leading', 'trailing')): Specifies which separator to update.
    - newProps (Object): Props to apply to the selected separator.

Returns:
A React Element (JSX.Element) representing the rendered item.

Example Usage:
<FlatList
  data={[{title: 'Title Text', key: 'item1'}]}
  renderItem={({item, index, separators}) => (
    <TouchableHighlight
      key={item.key}
      onPress={() => this._onPress(item)}
      onShowUnderlay={separators.highlight}
      onHideUnderlay={separators.unhighlight}>
      <View style={{backgroundColor: 'white'}}>
        <Text>{item.title}</Text>
      </View>
    </TouchableHighlight>
  )}
/>
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro Bundler, which is essential for building and running React Native applications. It bundles JavaScript code and its dependencies.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/_getting-started-macos-ios.md#_snippet_9

LANGUAGE: shell
CODE:
```
npx react-native start
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: This example demonstrates how to use the `AccessibilityInfo` API in React Native to check the current state of screen reader and reduce motion features, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, View, Text, StyleSheet} from 'react-native';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.status}>
        The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
      </Text>
      <Text style={styles.status}>
        The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;
```

----------------------------------------

TITLE: FlatList renderItem Prop
DESCRIPTION: Defines how each item in the list should be rendered. It receives item data, index, and separator manipulation functions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/flatlist.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
renderItem: (info: {item: ItemT, index: number, separators: {highlight: () => void, unhighlight: () => void, updateProps: (select: 'leading' | 'trailing', newProps: any) => void}}) => JSX.Element;

Description:
Takes an item from `data` and renders it into the list. Provides additional metadata like `index` and a `separators` object for advanced UI manipulation.

Parameters:
- item (Object): The item from `data` being rendered.
- index (number): The index corresponding to this item in the `data` array.
- separators (Object):
  - highlight (Function): Highlights the item separator.
  - unhighlight (Function): Removes highlight from the item separator.
  - updateProps (Function):
    - select (enum('leading', 'trailing')): Specifies which separator to update.
    - newProps (Object): Props to apply to the selected separator.

Returns:
A React Element (JSX.Element) representing the rendered item.

Example Usage:
<FlatList
  data={[{title: 'Title Text', key: 'item1'}]}
  renderItem={({item, index, separators}) => (
    <TouchableHighlight
      key={item.key}
      onPress={() => this._onPress(item)}
      onShowUnderlay={separators.highlight}
      onHideUnderlay={separators.unhighlight}>
      <View style={{backgroundColor: 'white'}}>
        <Text>{item.title}</Text>
      </View>
    </TouchableHighlight>
  )}
/>
```

----------------------------------------

TITLE: FlatList renderItem Prop
DESCRIPTION: Defines how each item in the list should be rendered. It receives item data, index, and separator manipulation functions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/flatlist.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
renderItem: (info: {item: ItemT, index: number, separators: {highlight: () => void, unhighlight: () => void, updateProps: (select: 'leading' | 'trailing', newProps: any) => void}}) => JSX.Element;

Description:
Takes an item from `data` and renders it into the list. Provides additional metadata like `index` and a `separators` object for advanced UI manipulation.

Parameters:
- item (Object): The item from `data` being rendered.
- index (number): The index corresponding to this item in the `data` array.
- separators (Object):
  - highlight (Function): Highlights the item separator.
  - unhighlight (Function): Removes highlight from the item separator.
  - updateProps (Function):
    - select (enum('leading', 'trailing')): Specifies which separator to update.
    - newProps (Object): Props to apply to the selected separator.

Returns:
A React Element (JSX.Element) representing the rendered item.

Example Usage:
<FlatList
  data={[{title: 'Title Text', key: 'item1'}]}
  renderItem={({item, index, separators}) => (
    <TouchableHighlight
      key={item.key}
      onPress={() => this._onPress(item)}
      onShowUnderlay={separators.highlight}
      onHideUnderlay={separators.unhighlight}>
      <View style={{backgroundColor: 'white'}}>
        <Text>{item.title}</Text>
      </View>
    </TouchableHighlight>
  )}
/>
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: This example demonstrates how to use the `AccessibilityInfo` API in React Native to check the current state of screen reader and reduce motion features, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, View, Text, StyleSheet} from 'react-native';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.status}>
        The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
      </Text>
      <Text style={styles.status}>
        The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: This example demonstrates how to use the `AccessibilityInfo` API in React Native to check the current state of screen reader and reduce motion features, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, View, Text, StyleSheet} from 'react-native';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.status}>
        The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
      </Text>
      <Text style={styles.status}>
        The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Systrace API Methods
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace API, used for profiling JavaScript events and performance.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.
  - Returns: true if enabled, false otherwise.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a profiling event. Use with endEvent for events within the same call stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.

endEvent(args?: EventArgs)
  - Ends the most recently started profiling event.
  - Parameters:
    - args?: Optional arguments for the event.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event. The returned cookie should be used with endAsyncEvent to end the profile, allowing for events that span different threads or occur out of the current stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.
  - Returns: A cookie (number) to identify the asynchronous event.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using its cookie.
  - Parameters:
    - eventName: The name of the event to profile.
    - cookie: The cookie returned by beginAsyncEvent.
    - args?: Optional arguments for the event.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a value to a profile name on the Systrace timeline.
  - Parameters:
    - eventName: The name of the counter event. Can be a string or a function returning a string.
    - value: The numeric value to record for the counter.
```

----------------------------------------

TITLE: APIDOC: React Native Linking API
DESCRIPTION: Comprehensive documentation for the React Native Linking API, including methods for managing external URLs and app interactions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/linking.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
canOpenURL(url: string): Promise<boolean>
  Determines whether or not an installed app can handle a given URL.
  The method returns a Promise object. When it is determined whether or not the given URL can be handled, the promise is resolved and the first parameter is whether or not it can be opened.
  The Promise will reject on Android if it was impossible to check if the URL can be opened or when targeting Android 11 (SDK 30) if you didn't specify the relevant intent queries in AndroidManifest.xml. Similarly on iOS, the promise will reject if you didn't add the specific scheme in the LSApplicationQueriesSchemes key inside Info.plist.
  Parameters:
    - url (string, Required): The URL to open. For web URLs, the protocol (""http://"", ""https://"") must be set accordingly!
  Limitations:
    - iOS 9+: Limit of 50 calls. Subsequent calls resolve to false. Limit resets on app reinstall/upgrade.
    - iOS 9+: Requires LSApplicationQueriesSchemes in Info.plist, otherwise always resolves to false.
    - Android 11 (SDK 30)+: Requires intent queries for handled schemes in AndroidManifest.xml.

getInitialURL(): Promise<string | null>
  If the app launch was triggered by an app link, it will give the link url, otherwise it will give null.
  Notes:
    - To support deep linking on Android, refer to https://developer.android.com/training/app-indexing/deep-linking.html#handling-intents
    - getInitialURL may return null while debugging is enabled. Disable the debugger to ensure it gets passed.

openSettings(): Promise<void>
  Open the Settings app and displays the app’s custom settings, if it has any.

openURL(url: string): Promise<any>
  Try to open the given url with any of the installed apps.
  You can use other URLs, like a location (e.g. ""geo:37.484847,-122.148386"" on Android or ""https://maps.apple.com/?ll=37.484847,-122.148386"" on iOS), a contact, or any other URL that can be opened with the installed apps.
  The method returns a Promise object. If the user confirms the open dialog or the url automatically opens, the promise is resolved. If the user cancels the open dialog or there are no registered applications for the url, the promise is rejected.
  Parameters:
    - url (string, Required): The URL to open. For web URLs, the protocol (""http://"", ""https://"") must be set accordingly!
  Notes:
    - This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check canOpenURL() first.
    - This method may behave differently in a simulator e.g. ""tel:"" links are not able to be handled in the iOS simulator as there's no access to the dialer app.

sendIntent(action: string, extras?: Array<{key: string; value: string | number | boolean}>): Promise<void>
  Launch an Android intent with extras.
  Parameters:
    - action (string, Required): The action to perform.
    - extras (Array<{key: string, value: string | number | boolean}>, Optional): An array of key-value pairs for intent extras.
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: This example demonstrates how to use the `AccessibilityInfo` API in React Native to check the current state of screen reader and reduce motion features, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, View, Text, StyleSheet} from 'react-native';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <View style={styles.container}>
      <Text style={styles.status}>
        The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
      </Text>
      <Text style={styles.status}>
        The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
      </Text>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;
```

----------------------------------------

TITLE: FlatList renderItem Prop
DESCRIPTION: Defines how each item in the list should be rendered. It receives item data, index, and separator manipulation functions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/flatlist.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
renderItem: (info: {item: ItemT, index: number, separators: {highlight: () => void, unhighlight: () => void, updateProps: (select: 'leading' | 'trailing', newProps: any) => void}}) => JSX.Element;

Description:
Takes an item from `data` and renders it into the list. Provides additional metadata like `index` and a `separators` object for advanced UI manipulation.

Parameters:
- item (Object): The item from `data` being rendered.
- index (number): The index corresponding to this item in the `data` array.
- separators (Object):
  - highlight (Function): Highlights the item separator.
  - unhighlight (Function): Removes highlight from the item separator.
  - updateProps (Function):
    - select (enum('leading', 'trailing')): Specifies which separator to update.
    - newProps (Object): Props to apply to the selected separator.

Returns:
A React Element (JSX.Element) representing the rendered item.

Example Usage:
<FlatList
  data={[{title: 'Title Text', key: 'item1'}]}
  renderItem={({item, index, separators}) => (
    <TouchableHighlight
      key={item.key}
      onPress={() => this._onPress(item)}
      onShowUnderlay={separators.highlight}
      onHideUnderlay={separators.unhighlight}>
      <View style={{backgroundColor: 'white'}}>
        <Text>{item.title}</Text>
      </View>
    </TouchableHighlight>
  )}
/>
```

----------------------------------------

TITLE: Start React Native Metro Bundler
DESCRIPTION: Starts the Metro bundler, which packages JavaScript code for React Native apps. This is a prerequisite for running the app.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/_getting-started-linux-android.md#_snippet_4

LANGUAGE: shell
CODE:
```
npx react-native start
```

----------------------------------------

TITLE: Start Metro Bundler (yarn)
DESCRIPTION: Starts the Metro bundler, which is essential for building and running React Native applications. This command is executed using yarn.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/_getting-started-linux-android.md#_snippet_5

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: APIDOC: React Native Linking API
DESCRIPTION: Comprehensive documentation for the React Native Linking API, including methods for managing external URLs and app interactions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/linking.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
canOpenURL(url: string): Promise<boolean>
  Determines whether or not an installed app can handle a given URL.
  The method returns a Promise object. When it is determined whether or not the given URL can be handled, the promise is resolved and the first parameter is whether or not it can be opened.
  The Promise will reject on Android if it was impossible to check if the URL can be opened or when targeting Android 11 (SDK 30) if you didn't specify the relevant intent queries in AndroidManifest.xml. Similarly on iOS, the promise will reject if you didn't add the specific scheme in the LSApplicationQueriesSchemes key inside Info.plist.
  Parameters:
    - url (string, Required): The URL to open. For web URLs, the protocol (""http://"", ""https://"") must be set accordingly!
  Limitations:
    - iOS 9+: Limit of 50 calls. Subsequent calls resolve to false. Limit resets on app reinstall/upgrade.
    - iOS 9+: Requires LSApplicationQueriesSchemes in Info.plist, otherwise always resolves to false.
    - Android 11 (SDK 30)+: Requires intent queries for handled schemes in AndroidManifest.xml.

getInitialURL(): Promise<string | null>
  If the app launch was triggered by an app link, it will give the link url, otherwise it will give null.
  Notes:
    - To support deep linking on Android, refer to https://developer.android.com/training/app-indexing/deep-linking.html#handling-intents
    - getInitialURL may return null while debugging is enabled. Disable the debugger to ensure it gets passed.

openSettings(): Promise<void>
  Open the Settings app and displays the app’s custom settings, if it has any.

openURL(url: string): Promise<any>
  Try to open the given url with any of the installed apps.
  You can use other URLs, like a location (e.g. ""geo:37.484847,-122.148386"" on Android or ""https://maps.apple.com/?ll=37.484847,-122.148386"" on iOS), a contact, or any other URL that can be opened with the installed apps.
  The method returns a Promise object. If the user confirms the open dialog or the url automatically opens, the promise is resolved. If the user cancels the open dialog or there are no registered applications for the url, the promise is rejected.
  Parameters:
    - url (string, Required): The URL to open. For web URLs, the protocol (""http://"", ""https://"") must be set accordingly!
  Notes:
    - This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check canOpenURL() first.
    - This method may behave differently in a simulator e.g. ""tel:"" links are not able to be handled in the iOS simulator as there's no access to the dialer app.

sendIntent(action: string, extras?: Array<{key: string; value: string | number | boolean}>): Promise<void>
  Launch an Android intent with extras.
  Parameters:
    - action (string, Required): The action to perform.
    - extras (Array<{key: string, value: string | number | boolean}>, Optional): An array of key-value pairs for intent extras.
```

----------------------------------------

TITLE: APIDOC: start Property
DESCRIPTION: Positions an element relative to the start edge, which is 'left' in LTR and 'right' in RTL. It takes precedence over 'left', 'right', and 'end'.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/layout-props.md#_snippet_57

LANGUAGE: APIDOC
CODE:
```
start:
  Type: number, string
  Required: No
  Description: Offsets the element from the start edge of its container.
  Notes: Equivalent to 'left' in LTR and 'right' in RTL. This property overrides 'left', 'right', and 'end'.
```

----------------------------------------

TITLE: FlatList renderItem Prop
DESCRIPTION: Defines how each item in the list should be rendered. It receives item data, index, and separator manipulation functions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/flatlist.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
renderItem: (info: {item: ItemT, index: number, separators: {highlight: () => void, unhighlight: () => void, updateProps: (select: 'leading' | 'trailing', newProps: any) => void}}) => JSX.Element;

Description:
Takes an item from `data` and renders it into the list. Provides additional metadata like `index` and a `separators` object for advanced UI manipulation.

Parameters:
- item (Object): The item from `data` being rendered.
- index (number): The index corresponding to this item in the `data` array.
- separators (Object):
  - highlight (Function): Highlights the item separator.
  - unhighlight (Function): Removes highlight from the item separator.
  - updateProps (Function):
    - select (enum('leading', 'trailing')): Specifies which separator to update.
    - newProps (Object): Props to apply to the selected separator.

Returns:
A React Element (JSX.Element) representing the rendered item.

Example Usage:
<FlatList
  data={[{title: 'Title Text', key: 'item1'}]}
  renderItem={({item, index, separators}) => (
    <TouchableHighlight
      key={item.key}
      onPress={() => this._onPress(item)}
      onShowUnderlay={separators.highlight}
      onHideUnderlay={separators.unhighlight}>
      <View style={{backgroundColor: 'white'}}>
        <Text>{item.title}</Text>
      </View>
    </TouchableHighlight>
  )}
/>
```

----------------------------------------

TITLE: APIDOC: React Native Linking API
DESCRIPTION: Comprehensive documentation for the React Native Linking API, including methods for managing external URLs and app interactions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/linking.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
canOpenURL(url: string): Promise<boolean>
  Determines whether or not an installed app can handle a given URL.
  The method returns a Promise object. When it is determined whether or not the given URL can be handled, the promise is resolved and the first parameter is whether or not it can be opened.
  The Promise will reject on Android if it was impossible to check if the URL can be opened or when targeting Android 11 (SDK 30) if you didn't specify the relevant intent queries in AndroidManifest.xml. Similarly on iOS, the promise will reject if you didn't add the specific scheme in the LSApplicationQueriesSchemes key inside Info.plist.
  Parameters:
    - url (string, Required): The URL to open. For web URLs, the protocol (""http://"", ""https://"") must be set accordingly!
  Limitations:
    - iOS 9+: Limit of 50 calls. Subsequent calls resolve to false. Limit resets on app reinstall/upgrade.
    - iOS 9+: Requires LSApplicationQueriesSchemes in Info.plist, otherwise always resolves to false.
    - Android 11 (SDK 30)+: Requires intent queries for handled schemes in AndroidManifest.xml.

getInitialURL(): Promise<string | null>
  If the app launch was triggered by an app link, it will give the link url, otherwise it will give null.
  Notes:
    - To support deep linking on Android, refer to https://developer.android.com/training/app-indexing/deep-linking.html#handling-intents
    - getInitialURL may return null while debugging is enabled. Disable the debugger to ensure it gets passed.

openSettings(): Promise<void>
  Open the Settings app and displays the app’s custom settings, if it has any.

openURL(url: string): Promise<any>
  Try to open the given url with any of the installed apps.
  You can use other URLs, like a location (e.g. ""geo:37.484847,-122.148386"" on Android or ""https://maps.apple.com/?ll=37.484847,-122.148386"" on iOS), a contact, or any other URL that can be opened with the installed apps.
  The method returns a Promise object. If the user confirms the open dialog or the url automatically opens, the promise is resolved. If the user cancels the open dialog or there are no registered applications for the url, the promise is rejected.
  Parameters:
    - url (string, Required): The URL to open. For web URLs, the protocol (""http://"", ""https://"") must be set accordingly!
  Notes:
    - This method will fail if the system doesn't know how to open the specified URL. If you're passing in a non-http(s) URL, it's best to check canOpenURL() first.
    - This method may behave differently in a simulator e.g. ""tel:"" links are not able to be handled in the iOS simulator as there's no access to the dialer app.

sendIntent(action: string, extras?: Array<{key: string; value: string | number | boolean}>): Promise<void>
  Launch an Android intent with extras.
  Parameters:
    - action (string, Required): The action to perform.
    - extras (Array<{key: string, value: string | number | boolean}>, Optional): An array of key-value pairs for intent extras.
```

----------------------------------------

TITLE: Start Metro Bundler (npm)
DESCRIPTION: Starts the Metro bundler, which is essential for building and running React Native applications. This command is executed using npm.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/_getting-started-linux-android.md#_snippet_4

LANGUAGE: shell
CODE:
```
npm start
```

----------------------------------------

TITLE: React Native Animated API useNativeDriver
DESCRIPTION: Explains the `useNativeDriver` flag in React Native's Animated API for performance. It allows animations to run on the native thread, preventing jank, but is limited to specific properties like `transform` and `opacity`.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2018-01-18-implementing-twitters-app-loading-animation-in-react-native.md#_snippet_2

LANGUAGE: javascript
CODE:
```
// Example of Animated API usage with useNativeDriver
// const animatedValue = new Animated.Value(0);
// Animated.timing(animatedValue, {
//   toValue: 1,
//   duration: 500,
//   useNativeDriver: true // Offloads animation to native thread
// }).start();

// Note: useNativeDriver: true supports properties like transform and opacity.
// Properties like backgroundColor are not supported by useNativeDriver.
```

----------------------------------------

TITLE: React Native Development Workflow Commands
DESCRIPTION: A collection of essential commands for managing the React Native development environment, running tests, checking code quality, and building the project. These commands facilitate a smooth contribution workflow.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/contributing/how-to-contribute-code.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Development Workflow Commands:

- `yarn start`
  - Starts the Metro packager server.

- `yarn lint`
  - Checks the code style using a linter.

- `yarn format`
  - Automatically formats your code using Prettier.

- `yarn test`
  - Runs the Jest-based JavaScript test suite.
  - `yarn test --watch`: Runs an interactive JavaScript test watcher.
  - `yarn test <pattern>`: Runs JavaScript tests with matching filenames.

- `yarn flow`
  - Runs the Flow typechecker.
  - `yarn flow-check-android`: Performs a full Flow check over `*.android.js` files.
  - `yarn flow-check-ios`: Performs a full Flow check over `*.ios.js` files.

- `yarn test-typescript`
  - Runs the TypeScript typechecks.

- `yarn test-ios`
  - Runs the iOS test suite (macOS required).

- `yarn build`
  - Builds all configured packages. Typically only run by CI before publishing.
  - Package build configurations are located in `scripts/build/config.js`.

- `yarn build-types`
  - Generates TypeScript types for the public API and updates the snapshot.

- `yarn run prettier`
  - Manually formats code using Prettier.

- `yarn run lint`
  - Manually checks code styling with the linter.
```

----------------------------------------

TITLE: AppState Class Component Example
DESCRIPTION: Illustrates how to use the AppState API within a React class component, managing state and subscriptions using componentDidMount and componentWillUnmount.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/appstate.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {AppState, StyleSheet, Text, View} from 'react-native';

class AppStateExample extends Component {
  state = {
    appState: AppState.currentState,
  };

  componentDidMount() {
    this.appStateSubscription = AppState.addEventListener(
      'change',
      nextAppState => {
        if (
          this.state.appState.match(/inactive|background/) &&
          nextAppState === 'active'
        ) {
          console.log('App has come to the foreground!');
        }
        this.setState({appState: nextAppState});
      },
    );
  }

  componentWillUnmount() {
    this.appStateSubscription.remove();
  }

  render() {
    return (
      <View style={styles.container}>
        <Text>Current state is: {this.state.appState}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default AppStateExample;
```

LANGUAGE: typescript
CODE:
```
import React, {Component} from 'react';
import {AppState, StyleSheet, Text, View} from 'react-native';
import type {NativeEventSubscription} from 'react-native';

class AppStateExample extends Component {
  appStateSubscription?: NativeEventSubscription;
  state = {
    appState: AppState.currentState,
  };

  componentDidMount() {
    this.appStateSubscription = AppState.addEventListener(
      'change',
      nextAppState => {
        if (
          this.state.appState.match(/inactive|background/) &&
          nextAppState === 'active'
        ) {
          console.log('App has come to the foreground!');
        }
        this.setState({appState: nextAppState});
      },
    );
  }

  componentWillUnmount() {
    this.appStateSubscription?.remove();
  }

  render() {
    return (
      <View style={styles.container}>
        <Text>Current state is: {this.state.appState}</Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default AppStateExample;
```

----------------------------------------

TITLE: React Native Linking API Reference
DESCRIPTION: Comprehensive documentation for the React Native Linking API, covering methods for URL handling, app interaction, and event subscriptions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/linking.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
React Native Linking API:

This module provides functionality to interact with the system's default handler for external URLs.

Methods:

- **`canOpenURL(url)`**
  - Description: Determine whether or not an installed app can handle a given URL.
  - Returns: A `Promise` object that resolves with a boolean value indicating whether the URL can be handled.
  - Parameters:
    - `url` (string, Required): The URL to check. For web URLs, the protocol (`""http://""`, `""https://""`) must be set accordingly.
  - Notes:
    - On iOS 9+, this method is limited to 50 calls. Subsequent calls resolve to `false` after the limit is reached.
    - On iOS, requires the `LSApplicationQueriesSchemes` key in `Info.plist` to be configured for the schemes you intend to query.
    - On Android 11 (SDK 30+), requires specifying relevant intent queries in `AndroidManifest.xml`.
  - Example:
    ```jsx
    canOpenURL('https://www.google.com').then(supported => {
      if (supported) {
        // App can handle the URL
      } else {
        // App cannot handle the URL
      }
    });
    ```

- **`getInitialURL()`**
  - Description: If the app launch was triggered by an app link, it will return the link URL; otherwise, it will return `null`.
  - Returns: A `Promise` that resolves with the initial URL string or `null`.
  - Notes:
    - May return `null` while debugging is enabled; disable the debugger to ensure it is passed.
    - For deep linking on Android, refer to Android developer documentation on handling intents.
  - Example:
    ```jsx
    getInitialURL().then(url => {
      if (url) {
        // Handle deep link
      } else {
        // No initial deep link
      }
    });
    ```

- **`openSettings()`**
  - Description: Open the device's Settings app and display the app's custom settings, if available.
  - Returns: A `Promise` that resolves when the settings screen is opened.
  - Example:
    ```jsx
    openSettings();
    ```

- **`openURL(url)`**
  - Description: Try to open the given `url` with any of the installed apps.
  - Returns: A `Promise` object. Resolves if the user confirms the open dialog or the URL automatically opens. Rejects if the user cancels or no registered applications can handle the URL.
  - Parameters:
    - `url` (string, Required): The URL to open. Can be web URLs, location URLs (e.g., `""geo:""`), contacts, or any other URL scheme handled by installed apps.
  - Notes:
    - For non-http(s) URLs, it's recommended to check `canOpenURL()` first.
    - Behavior may differ in simulators (e.g., `""tel:""` links may not work).
  - Example:
    ```jsx
    openURL('https://www.example.com');
    openURL('geo:37.484847,-122.148386');
    ```

- **`removeEventListener(type, handler)`**
  - Description: **Deprecated.** Use the `remove()` method on the event subscription returned by `addEventListener()` instead.

- **`sendIntent(action, extras)`** (Android Only)
  - Description: Launch an Android intent with specified extras.
  - Parameters:
    - `action` (string, Required): The action to perform (e.g., `android.intent.action.VIEW`).
    - `extras` (Array<{key: string, value: string | number | boolean}>): An array of key-value pairs to include as intent extras.
  - Example:
    ```jsx
    sendIntent('android.intent.action.VIEW', [
      { key: 'url', value: 'https://www.google.com' },
      { key: 'from', value: 'MyApp' }
    ]);
    ```
```

----------------------------------------

TITLE: Start Metro Bundler
DESCRIPTION: Starts the Metro JavaScript bundler, which is essential for building and running React Native applications. This command can be executed using either npm or yarn.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/_getting-started-windows-android.md#_snippet_8

LANGUAGE: shell
CODE:
```
npm start
```

LANGUAGE: shell
CODE:
```
yarn start
```

----------------------------------------

TITLE: React Native Systrace API Methods
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace API, used for profiling JavaScript events and performance.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.
  - Returns: true if enabled, false otherwise.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a profiling event. Use with endEvent for events within the same call stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.

endEvent(args?: EventArgs)
  - Ends the most recently started profiling event.
  - Parameters:
    - args?: Optional arguments for the event.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event. The returned cookie should be used with endAsyncEvent to end the profile, allowing for events that span different threads or occur out of the current stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.
  - Returns: A cookie (number) to identify the asynchronous event.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using its cookie.
  - Parameters:
    - eventName: The name of the event to profile.
    - cookie: The cookie returned by beginAsyncEvent.
    - args?: Optional arguments for the event.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a value to a profile name on the Systrace timeline.
  - Parameters:
    - eventName: The name of the counter event. Can be a string or a function returning a string.
    - value: The numeric value to record for the counter.
```

----------------------------------------

TITLE: React Native Vibration Example
DESCRIPTION: Demonstrates how to use the Vibration API in React Native to trigger vibrations. Includes examples for vibrating once, with a specific duration, using custom patterns, repeating patterns, and stopping vibrations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  StyleSheet,
} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

const App = () => {
  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS,
  ];

  const PATTERN_DESC =
    Platform.OS === 'android'
      ? 'wait 1s, vibrate 2s, wait 3s'
      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS === 'android'
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />,
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Systrace API Methods
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace API, used for profiling JavaScript events and performance.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.
  - Returns: true if enabled, false otherwise.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a profiling event. Use with endEvent for events within the same call stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.

endEvent(args?: EventArgs)
  - Ends the most recently started profiling event.
  - Parameters:
    - args?: Optional arguments for the event.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event. The returned cookie should be used with endAsyncEvent to end the profile, allowing for events that span different threads or occur out of the current stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.
  - Returns: A cookie (number) to identify the asynchronous event.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using its cookie.
  - Parameters:
    - eventName: The name of the event to profile.
    - cookie: The cookie returned by beginAsyncEvent.
    - args?: Optional arguments for the event.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a value to a profile name on the Systrace timeline.
  - Parameters:
    - eventName: The name of the counter event. Can be a string or a function returning a string.
    - value: The numeric value to record for the counter.
```

----------------------------------------

TITLE: React Native Vibration Example
DESCRIPTION: Demonstrates how to use the Vibration API in React Native to trigger vibrations. Includes examples for vibrating once, with a specific duration, using custom patterns, repeating patterns, and stopping vibrations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  StyleSheet,
} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

const App = () => {
  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS,
  ];

  const PATTERN_DESC =
    Platform.OS === 'android'
      ? 'wait 1s, vibrate 2s, wait 3s'
      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS === 'android'
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />,
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Systrace API Methods
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace API, used for profiling JavaScript events and performance.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.
  - Returns: true if enabled, false otherwise.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a profiling event. Use with endEvent for events within the same call stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.

endEvent(args?: EventArgs)
  - Ends the most recently started profiling event.
  - Parameters:
    - args?: Optional arguments for the event.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event. The returned cookie should be used with endAsyncEvent to end the profile, allowing for events that span different threads or occur out of the current stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.
  - Returns: A cookie (number) to identify the asynchronous event.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using its cookie.
  - Parameters:
    - eventName: The name of the event to profile.
    - cookie: The cookie returned by beginAsyncEvent.
    - args?: Optional arguments for the event.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a value to a profile name on the Systrace timeline.
  - Parameters:
    - eventName: The name of the counter event. Can be a string or a function returning a string.
    - value: The numeric value to record for the counter.
```

----------------------------------------

TITLE: React Native Vibration Example
DESCRIPTION: Demonstrates how to use the Vibration API in React Native to trigger vibrations. Includes examples for vibrating once, with a specific duration, using custom patterns, repeating patterns, and stopping vibrations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  StyleSheet,
} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

const App = () => {
  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS,
  ];

  const PATTERN_DESC =
    Platform.OS === 'android'
      ? 'wait 1s, vibrate 2s, wait 3s'
      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS === 'android'
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />,
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

----------------------------------------

TITLE: FlatList renderItem Prop
DESCRIPTION: Defines how each item in the list should be rendered. It receives item data, index, and separator manipulation functions.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/flatlist.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
renderItem: (info: {item: ItemT, index: number, separators: {highlight: () => void, unhighlight: () => void, updateProps: (select: 'leading' | 'trailing', newProps: any) => void}}) => JSX.Element;

Description:
Takes an item from `data` and renders it into the list. Provides additional metadata like `index` and a `separators` object for advanced UI manipulation.

Parameters:
- item (Object): The item from `data` being rendered.
- index (number): The index corresponding to this item in the `data` array.
- separators (Object):
  - highlight (Function): Highlights the item separator.
  - unhighlight (Function): Removes highlight from the item separator.
  - updateProps (Function):
    - select (enum('leading', 'trailing')): Specifies which separator to update.
    - newProps (Object): Props to apply to the selected separator.

Returns:
A React Element (JSX.Element) representing the rendered item.

Example Usage:
<FlatList
  data={[{title: 'Title Text', key: 'item1'}]}
  renderItem={({item, index, separators}) => (
    <TouchableHighlight
      key={item.key}
      onPress={() => this._onPress(item)}
      onShowUnderlay={separators.highlight}
      onHideUnderlay={separators.unhighlight}>
      <View style={{backgroundColor: 'white'}}>
        <Text>{item.title}</Text>
      </View>
    </TouchableHighlight>
  )}
/>
```

----------------------------------------

TITLE: React Native Systrace API Methods
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace API, used for profiling JavaScript events and performance.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.
  - Returns: true if enabled, false otherwise.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a profiling event. Use with endEvent for events within the same call stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.

endEvent(args?: EventArgs)
  - Ends the most recently started profiling event.
  - Parameters:
    - args?: Optional arguments for the event.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event. The returned cookie should be used with endAsyncEvent to end the profile, allowing for events that span different threads or occur out of the current stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.
  - Returns: A cookie (number) to identify the asynchronous event.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using its cookie.
  - Parameters:
    - eventName: The name of the event to profile.
    - cookie: The cookie returned by beginAsyncEvent.
    - args?: Optional arguments for the event.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a value to a profile name on the Systrace timeline.
  - Parameters:
    - eventName: The name of the counter event. Can be a string or a function returning a string.
    - value: The numeric value to record for the counter.
```

----------------------------------------

TITLE: React Native Vibration Example
DESCRIPTION: Demonstrates how to use the Vibration API in React Native to trigger vibrations. Includes examples for vibrating once, with a specific duration, using custom patterns, repeating patterns, and stopping vibrations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  StyleSheet,
} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

const App = () => {
  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS,
  ];

  const PATTERN_DESC =
    Platform.OS === 'android'
      ? 'wait 1s, vibrate 2s, wait 3s'
      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS === 'android'
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />,
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Systrace API Methods
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace API, used for profiling JavaScript events and performance.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.
  - Returns: true if enabled, false otherwise.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a profiling event. Use with endEvent for events within the same call stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.

endEvent(args?: EventArgs)
  - Ends the most recently started profiling event.
  - Parameters:
    - args?: Optional arguments for the event.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event. The returned cookie should be used with endAsyncEvent to end the profile, allowing for events that span different threads or occur out of the current stack frame.
  - Parameters:
    - eventName: The name of the event to profile. Can be a string or a function returning a string.
    - args?: Optional arguments for the event.
  - Returns: A cookie (number) to identify the asynchronous event.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using its cookie.
  - Parameters:
    - eventName: The name of the event to profile.
    - cookie: The cookie returned by beginAsyncEvent.
    - args?: Optional arguments for the event.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a value to a profile name on the Systrace timeline.
  - Parameters:
    - eventName: The name of the counter event. Can be a string or a function returning a string.
    - value: The numeric value to record for the counter.
```

----------------------------------------

TITLE: React Native Vibration Example
DESCRIPTION: Demonstrates how to use the Vibration API in React Native to trigger vibrations. Includes examples for vibrating once, with a specific duration, using custom patterns, repeating patterns, and stopping vibrations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  StyleSheet,
} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

const App = () => {
  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS,
  ];

  const PATTERN_DESC =
    Platform.OS === 'android'
      ? 'wait 1s, vibrate 2s, wait 3s'
      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS === 'android'
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />,
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

----------------------------------------

TITLE: Share API Reference
DESCRIPTION: Reference for the React Native Share API, including the share method and its action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.

  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.

  Parameters:
    content (object, Required): Defines the content to be shared.
      - message (string): A message to share.
      - url (string, iOS only): A URL to share.
      - title (string, Android only): Title of the message.
      At least one of `url` and `message` is required.
    options (object, Optional): Additional options for the share dialog.
      - dialogTitle (string, Android only): The title displayed in the Android share sheet.
      - excludedActivityTypes (Array<string>, iOS only): An array of activity types to exclude from the share sheet.
      - subject (string, iOS only): The subject line for email shares.
      - tintColor (string, iOS only): The tint color for the share sheet.
      - anchor (HTMLElement, iOS only): The node to which the action sheet should be anchored (used for iPad).

sharedAction: 'sharedAction'
  Static property indicating that the content was successfully shared.

dismissedAction: 'dismissedAction'
  Static property indicating that the share dialog was dismissed (iOS only).
```

----------------------------------------

TITLE: React Native Vibration Example
DESCRIPTION: Demonstrates how to use the Vibration API in React Native to trigger vibrations. Includes examples for vibrating once, with a specific duration, using custom patterns, repeating patterns, and stopping vibrations.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {
  Button,
  Platform,
  Text,
  Vibration,
  View,
  StyleSheet,
} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const Separator = () => {
  return <View style={Platform.OS === 'android' ? styles.separator : null} />;
};

const App = () => {
  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS,
  ];

  const PATTERN_DESC =
    Platform.OS === 'android'
      ? 'wait 1s, vibrate 2s, wait 3s'
      : 'wait 1s, vibrate, wait 2s, vibrate, wait 3s';

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS === 'android'
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />,
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    margin: 24,
    textAlign: 'center',
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: '#737373',
    borderBottomWidth: StyleSheet.hairlineWidth,
  },
});

export default App;
```

----------------------------------------

TITLE: Share API Reference
DESCRIPTION: Reference for the React Native Share API, including the share method and its action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.

  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.

  Parameters:
    content (object, Required): Defines the content to be shared.
      - message (string): A message to share.
      - url (string, iOS only): A URL to share.
      - title (string, Android only): Title of the message.
      At least one of `url` and `message` is required.
    options (object, Optional): Additional options for the share dialog.
      - dialogTitle (string, Android only): The title displayed in the Android share sheet.
      - excludedActivityTypes (Array<string>, iOS only): An array of activity types to exclude from the share sheet.
      - subject (string, iOS only): The subject line for email shares.
      - tintColor (string, iOS only): The tint color for the share sheet.
      - anchor (HTMLElement, iOS only): The node to which the action sheet should be anchored (used for iPad).

sharedAction: 'sharedAction'
  Static property indicating that the content was successfully shared.

dismissedAction: 'dismissedAction'
  Static property indicating that the share dialog was dismissed (iOS only).
```

----------------------------------------

TITLE: Start React Native App with Yarn
DESCRIPTION: Executes the script to start the React Native application using Yarn. This command initiates the Metro Bundler and builds/runs the app on an Android emulator.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/_getting-started-windows-android.md#_snippet_10

LANGUAGE: shell
CODE:
```
yarn android
```

----------------------------------------

TITLE: Share API Reference
DESCRIPTION: Reference for the React Native Share API, including the share method and its action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.

  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.

  Parameters:
    content (object, Required): Defines the content to be shared.
      - message (string): A message to share.
      - url (string, iOS only): A URL to share.
      - title (string, Android only): Title of the message.
      At least one of `url` and `message` is required.
    options (object, Optional): Additional options for the share dialog.
      - dialogTitle (string, Android only): The title displayed in the Android share sheet.
      - excludedActivityTypes (Array<string>, iOS only): An array of activity types to exclude from the share sheet.
      - subject (string, iOS only): The subject line for email shares.
      - tintColor (string, iOS only): The tint color for the share sheet.
      - anchor (HTMLElement, iOS only): The node to which the action sheet should be anchored (used for iPad).

sharedAction: 'sharedAction'
  Static property indicating that the content was successfully shared.

dismissedAction: 'dismissedAction'
  Static property indicating that the share dialog was dismissed (iOS only).
```

----------------------------------------

TITLE: Start React Native App with npm
DESCRIPTION: Executes the script to start the React Native application using npm. This command initiates the Metro Bundler and builds/runs the app on an Android emulator.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/_getting-started-windows-android.md#_snippet_9

LANGUAGE: shell
CODE:
```
npm run android
```

----------------------------------------

TITLE: Share API Reference
DESCRIPTION: Reference for the React Native Share API, including the share method and its action constants.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/share.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
share(content: ShareContent, options?: ShareOptions)
  Opens a dialog to share text content.

  In iOS, returns a Promise which will be invoked with an object containing `action` and `activityType`. If the user dismissed the dialog, the Promise will still be resolved with action being `Share.dismissedAction` and all the other keys being undefined. Note that some share options will not appear or work on the iOS simulator.
  In Android, returns a Promise which will always be resolved with action being `Share.sharedAction`.

  Parameters:
    content (object, Required): Defines the content to be shared.
      - message (string): A message to share.
      - url (string, iOS only): A URL to share.
      - title (string, Android only): Title of the message.
      At least one of `url` and `message` is required.
    options (object, Optional): Additional options for the share dialog.
      - dialogTitle (string, Android only): The title displayed in the Android share sheet.
      - excludedActivityTypes (Array<string>, iOS only): An array of activity types to exclude from the share sheet.
      - subject (string, iOS only): The subject line for email shares.
      - tintColor (string, iOS only): The tint color for the share sheet.
      - anchor (HTMLElement, iOS only): The node to which the action sheet should be anchored (used for iPad).

sharedAction: 'sharedAction'
  Static property indicating that the content was successfully shared.

dismissedAction: 'dismissedAction'
  Static property indicating that the share dialog was dismissed (iOS only).
```

----------------------------------------

TITLE: React Native CLI Commands for Project Initialization
DESCRIPTION: Details on recommended commands for creating new React Native projects, including the deprecation of `react-native init` and alternatives using frameworks or the community CLI.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2024-08-12-release-0.75.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
CLI Commands for Project Initialization:

react-native init <ProjectName>
  - Deprecated command for creating new React Native projects. Will stop creating projects after December 31st, 2024.
  - Usage: `npx react-native init MyNewApp`

Expo CLI:
  - Recommended framework for new projects.
  - Command to create a new project: `npx create-expo-app <ProjectName>`

Community CLI:
  - Alternative for direct CLI invocation.
  - Command to create a new project: `npx @react-native-community/cli init <ProjectName>`

Note: Commands other than `init`, such as `react-native config`, will continue to work as usual.
```

----------------------------------------

TITLE: React Native Alert Example
DESCRIPTION: Demonstrates launching alert dialogs with two or three buttons using React Native's Alert API. Includes examples for both functional and class components, showcasing button configurations and onPress callbacks.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/alert.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {View, StyleSheet, Button, Alert} from 'react-native';

const App = () => {
  const createTwoButtonAlert = () =>
    Alert.alert('Alert Title', 'My Alert Msg', [
      {
        text: 'Cancel',
        onPress: () => console.log('Cancel Pressed'),
        style: 'cancel',
      },
      {text: 'OK', onPress: () => console.log('OK Pressed')},
    ]);

  const createThreeButtonAlert = () =>
    Alert.alert('Alert Title', 'My Alert Msg', [
      {
        text: 'Ask me later',
        onPress: () => console.log('Ask me later pressed'),
      },
      {
        text: 'Cancel',
        onPress: () => console.log('Cancel Pressed'),
        style: 'cancel',
      },
      {text: 'OK', onPress: () => console.log('OK Pressed')},
    ]);

  return (
    <View style={styles.container}>
      <Button title={'2-Button Alert'} onPress={createTwoButtonAlert} />
      <Button title={'3-Button Alert'} onPress={createThreeButtonAlert} />
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'space-around',
    alignItems: 'center',
  },
});

export default App;
```

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {View, StyleSheet, Button, Alert} from 'react-native';

class App extends Component {
  createTwoButtonAlert = () =>
    Alert.alert('Alert Title', 'My Alert Msg', [
      {
        text: 'Cancel',
        onPress: () => console.log('Cancel Pressed'),
        style: 'cancel',
      },
      {text: 'OK', onPress: () => console.log('OK Pressed')},
    ]);

  createThreeButtonAlert = () =>
    Alert.alert('Alert Title', 'My Alert Msg', [
      {
        text: 'Ask me later',
        onPress: () => console.log('Ask me later pressed'),
      },
      {
        text: 'Cancel',
        onPress: () => console.log('Cancel Pressed'),
        style: 'cancel',
      },
      {text: 'OK', onPress: () => console.log('OK Pressed')},
    ]);

  render() {
    return (
      <View style={styles.container}>
        <Button title={'2-Button Alert'} onPress={this.createTwoButtonAlert} />

        <Button
          title={'3-Button Alert'}
          onPress={this.createThreeButtonAlert}
        />
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'space-around',
    alignItems: 'center',
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Systrace Component Examples
DESCRIPTION: Demonstrates how to use the Systrace API in React Native functional and class components to capture JavaScript events for profiling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from ""react"";
import { Button, Text, View, SafeAreaView, StyleSheet, Systrace } from ""react-native"";

const App = () =>  {

  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label')
    Systrace.counterEvent('event_label', 10);
  }

  const stopProfiling = () => {
    Systrace.endEvent()
  }

  return (
    <SafeAreaView style={styles.container}>
      <Text style={[styles.header, styles.paragraph]}>React Native Systrace API</Text>
    <View style={styles.buttonRow}>
      <Button title=""Capture the non-Timed JS events in EasyProfiler"" onPress={()=> enableProfiling()}/>
      <Button title=""Stop capturing"" onPress={()=> stopProfiling()} color=""#FF0000""/>
    </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8
  },
   header: {
    fontSize: 18,
    fontWeight: ""bold"",
    textAlign: ""center""
  },
  paragraph: {
    margin: 24,
    fontSize: 25,
    textAlign: ""center""
  },
  buttonRow: {
    flexBasis: 150,
    marginVertical: 16,
    justifyContent: 'space-evenly'
  }
});

export default App;
```

LANGUAGE: javascript
CODE:
```
import React, { Component } from ""react"";
import { Button, Text, View, SafeAreaView, StyleSheet, Systrace } from ""react-native"";

class App extends Component {

  enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label')
    Systrace.counterEvent('event_label', 10);
  }

  stopProfiling = () => {
    Systrace.endEvent()
  }

  render() {
    return (
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>React Native Systrace API</Text>
      <View style={styles.buttonRow}>
        <Button title=""Capture the non-Timed JS events in EasyProfiler"" onPress={()=> this.enableProfiling()}/>
        <Button title=""Stop capturing"" onPress={()=> this.stopProfiling()} color=""#FF0000""/>
      </View>
      </SafeAreaView>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    paddingTop: 44,
    padding: 8
  },
   header: {
    fontSize: 18,
    fontWeight: ""bold"",
    textAlign: ""center""
  },
  paragraph: {
    margin: 24,
    fontSize: 25,
    textAlign: ""center""
  },
  buttonRow: {
    flexBasis: 150,
    marginVertical: 16,
    justifyContent: 'space-evenly'
  }
});

export default App;
```

----------------------------------------

TITLE: AccessibilityInfo Class Component Examples
DESCRIPTION: These examples demonstrate how to use the AccessibilityInfo API within React class components to track accessibility feature states. They utilize componentDidMount and componentWillUnmount for setting up and cleaning up event listeners, and setState to update the component's state based on accessibility changes. Examples are provided for both JavaScript and TypeScript.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/accessibilityinfo.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {AccessibilityInfo, View, Text, StyleSheet} from 'react-native';

class AccessibilityStatusExample extends Component {
  state = {
    reduceMotionEnabled: false,
    screenReaderEnabled: false,
  };

  componentDidMount() {
    this.reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      reduceMotionEnabled => {
        this.setState({reduceMotionEnabled});
      },
    );
    this.screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      screenReaderEnabled => {
        this.setState({screenReaderEnabled});
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(reduceMotionEnabled => {
      this.setState({reduceMotionEnabled});
    });
    AccessibilityInfo.isScreenReaderEnabled().then(screenReaderEnabled => {
      this.setState({screenReaderEnabled});
    });
  }

  componentWillUnmount() {
    this.reduceMotionChangedSubscription.remove();
    this.screenReaderChangedSubscription.remove();
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is{' '}
          {this.state.reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is{' '}
          {this.state.screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default AccessibilityStatusExample;
```

LANGUAGE: typescript
CODE:
```
import React, {Component} from 'react';
import {AccessibilityInfo, View, Text, StyleSheet} from 'react-native';
import type {EmitterSubscription} from 'react-native';

class AccessibilityStatusExample extends Component {
  reduceMotionChangedSubscription?: EmitterSubscription;
  screenReaderChangedSubscription?: EmitterSubscription;

  state = {
    reduceMotionEnabled: false,
    screenReaderEnabled: false,
  };

  componentDidMount() {
    this.reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      reduceMotionEnabled => {
        this.setState({reduceMotionEnabled});
      },
    );
    this.screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      screenReaderEnabled => {
        this.setState({screenReaderEnabled});
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(reduceMotionEnabled => {
      this.setState({reduceMotionEnabled});
    });
    AccessibilityInfo.isScreenReaderEnabled().then(screenReaderEnabled => {
      this.setState({screenReaderEnabled});
    });
  }

  componentWillUnmount() {
    if (this.reduceMotionChangedSubscription) {
      this.reduceMotionChangedSubscription.remove();
    }
    if (this.screenReaderChangedSubscription) {
      this.screenReaderChangedSubscription.remove();
    }
  }

  render() {
    return (
      <View style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is{' '}
          {this.state.reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is{' '}
          {this.state.screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default AccessibilityStatusExample;
```

----------------------------------------

TITLE: Start Headless JS Service in Java
DESCRIPTION: Initiate the custom `HeadlessJsTaskService` from Java code. This example shows how to create an Intent, attach data via a Bundle, and start the service, which in turn triggers the headless JS task.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/headless-js-android.md#_snippet_4

LANGUAGE: java
CODE:
```
Intent service = new Intent(getApplicationContext(), MyTaskService.class);
Bundle bundle = new Bundle();

bundle.putString(""foo"", ""bar"");
service.putExtras(bundle);

getApplicationContext().startService(service);
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: Style Property: start (React Native)
DESCRIPTION: Defines the offset for the starting edge of a component, adapting to text directionality. Equivalent to 'left' in LTR and 'right' in RTL. Takes precedence over 'left', 'right', and 'end' styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/layout-props.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
start: number | string
Description: When the direction is 'ltr', 'start' is equivalent to 'left'. When the direction is 'rtl', 'start' is equivalent to 'right'.
Precedence: This style takes precedence over the 'left', 'right', and 'end' styles.
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: Style Property: start (React Native)
DESCRIPTION: Defines the offset for the starting edge of a component, adapting to text directionality. Equivalent to 'left' in LTR and 'right' in RTL. Takes precedence over 'left', 'right', and 'end' styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/layout-props.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
start: number | string
Description: When the direction is 'ltr', 'start' is equivalent to 'left'. When the direction is 'rtl', 'start' is equivalent to 'right'.
Precedence: This style takes precedence over the 'left', 'right', and 'end' styles.
```

----------------------------------------

TITLE: Style Property: start (React Native)
DESCRIPTION: Defines the offset for the starting edge of a component, adapting to text directionality. Equivalent to 'left' in LTR and 'right' in RTL. Takes precedence over 'left', 'right', and 'end' styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/layout-props.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
start: number | string
Description: When the direction is 'ltr', 'start' is equivalent to 'left'. When the direction is 'rtl', 'start' is equivalent to 'right'.
Precedence: This style takes precedence over the 'left', 'right', and 'end' styles.
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: React Native Vibration API Usage
DESCRIPTION: Demonstrates how to use the Vibration API in React Native for both functional and class components. Includes examples for single vibrations, timed vibrations, custom patterns, and stopping vibrations. Requires the VIBRATE permission on Android.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/vibration.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from ""react"";
import { Button, Platform, Text, Vibration, View, SafeAreaView, StyleSheet } from ""react-native"";

const Separator = () => {
  return <View style={Platform.OS === ""android"" ? styles.separator : null} />;
}

const App = () => {

  const ONE_SECOND_IN_MS = 1000;

  const PATTERN = [
    1 * ONE_SECOND_IN_MS,
    2 * ONE_SECOND_IN_MS,
    3 * ONE_SECOND_IN_MS
  ];

  const PATTERN_DESC =
    Platform.OS === ""android""
      ? ""wait 1s, vibrate 2s, wait 3s""
      : ""wait 1s, vibrate, wait 2s, vibrate, wait 3s"";

  return (
    <SafeAreaView style={styles.container}>
      <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
      <View>
        <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
      </View>
      <Separator />
      {Platform.OS == ""android""
        ? [
            <View>
              <Button
                title=""Vibrate for 10 seconds""
                onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
              />
            </View>,
            <Separator />
          ]
        : null}
      <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
      <Button
        title=""Vibrate with pattern""
        onPress={() => Vibration.vibrate(PATTERN)}
      />
      <Separator />
      <Button
        title=""Vibrate with pattern until cancelled""
        onPress={() => Vibration.vibrate(PATTERN, true)}
      />
      <Separator />
      <Button
        title=""Stop vibration pattern""
        onPress={() => Vibration.cancel()}
        color=""#FF0000""
      />
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: ""center"",
    paddingTop: 44,
    padding: 8
  },
  header: {
    fontSize: 18,
    fontWeight: ""bold"",
    textAlign: ""center""
  },
  paragraph: {
    margin: 24,
    textAlign: ""center""
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: ""#737373"",
    borderBottomWidth: StyleSheet.hairlineWidth
  }
});

export default App;
```

LANGUAGE: javascript
CODE:
```
import React, { Component } from ""react"";
import { Button, Platform, Text, Vibration, View, SafeAreaView, StyleSheet } from ""react-native"";

const Separator = () => {
  return <View style={Platform.OS === ""android"" ? styles.separator : null} />;
}

class App extends Component {
  render() {
    const ONE_SECOND_IN_MS = 1000;

    const PATTERN = [
      1 * ONE_SECOND_IN_MS,
      2 * ONE_SECOND_IN_MS,
      3 * ONE_SECOND_IN_MS
    ];

    const PATTERN_DESC =
      Platform.OS === ""android""
        ? ""wait 1s, vibrate 2s, wait 3s""
        : ""wait 1s, vibrate, wait 2s, vibrate, wait 3s"";

    return (
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>Vibration API</Text>
        <View>
          <Button title=""Vibrate once"" onPress={() => Vibration.vibrate()} />
        </View>
        <Separator />
        {Platform.OS == ""android""
          ? [
              <View>
                <Button
                  title=""Vibrate for 10 seconds""
                  onPress={() => Vibration.vibrate(10 * ONE_SECOND_IN_MS)}
                />
              </View>,
              <Separator />
            ]
          : null}
        <Text style={styles.paragraph}>Pattern: {PATTERN_DESC}</Text>
        <Button
          title=""Vibrate with pattern""
          onPress={() => Vibration.vibrate(PATTERN)}
        />
        <Separator />
        <Button
          title=""Vibrate with pattern until cancelled""
          onPress={() => Vibration.vibrate(PATTERN, true)}
        />
        <Separator />
        <Button
          title=""Stop vibration pattern""
          onPress={() => Vibration.cancel()}
          color=""#FF0000""
        />
      </SafeAreaView>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: ""center"",
    paddingTop: 44,
    padding: 8
  },
  header: {
    fontSize: 18,
    fontWeight: ""bold"",
    textAlign: ""center""
  },
  paragraph: {
    margin: 24,
    textAlign: ""center""
  },
  separator: {
    marginVertical: 8,
    borderBottomColor: ""#737373"",
    borderBottomWidth: StyleSheet.hairlineWidth
  }
});

export default App;
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: Style Property: start (React Native)
DESCRIPTION: Defines the offset for the starting edge of a component, adapting to text directionality. Equivalent to 'left' in LTR and 'right' in RTL. Takes precedence over 'left', 'right', and 'end' styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/layout-props.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
start: number | string
Description: When the direction is 'ltr', 'start' is equivalent to 'left'. When the direction is 'rtl', 'start' is equivalent to 'right'.
Precedence: This style takes precedence over the 'left', 'right', and 'end' styles.
```

----------------------------------------

TITLE: Style Property: start (React Native)
DESCRIPTION: Defines the offset for the starting edge of a component, adapting to text directionality. Equivalent to 'left' in LTR and 'right' in RTL. Takes precedence over 'left', 'right', and 'end' styles.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/layout-props.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
start: number | string
Description: When the direction is 'ltr', 'start' is equivalent to 'left'. When the direction is 'rtl', 'start' is equivalent to 'right'.
Precedence: This style takes precedence over the 'left', 'right', and 'end' styles.
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: delay() - React Native Animated API
DESCRIPTION: Starts an animation after a specified delay. This is useful for sequencing animations or introducing pauses.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/animated.md#_snippet_17

LANGUAGE: jsx
CODE:
```
static delay(time)
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: React Native FlatList API and Props Reference
DESCRIPTION: Provides details on key props and behaviors of React Native's FlatList component, which is a performant way to render long lists. It inherits props from ScrollView and VirtualizedList, with specific considerations for state management and rendering.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/flatlist.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
FlatList Props:

- `data`: Array<Item>
  - The data source for the list. Each item should be unique.

- `renderItem`: ({ item, index, separators }) => React.ReactNode
  - Function that renders each item in the list. Receives item data and other useful properties.

- `keyExtractor`: (item, index) => string
  - Used to extract a unique key for each item. Defaults to using the `key` prop if available.

- `numColumns`: number
  - Renders the list in multiple columns. This is a convenience wrapper around flexbox and can prevent conflicts with item height logic compared to using `flexWrap`.

- `extraData`: any
  - A prop that affects the list's rendering. If the value changes, the list will re-render. Crucial for updating items when parent state changes, as FlatList is a PureComponent.

Inherited Props:
- `FlatList` inherits props from `VirtualizedList` and `ScrollView` that are not explicitly listed here.

Caveats:
- **State Preservation**: Internal state is not preserved when content scrolls out of the render window. Ensure all data is managed externally (e.g., Redux, Flux).
- **PureComponent**: `FlatList` is a `PureComponent`. Changes to props (like `data` or parent state) must be shallow-equal different to trigger a re-render. Use `extraData` to force re-renders when necessary.
- **Asynchronous Rendering**: Content is rendered offscreen for performance. This can lead to momentarily blank content if scrolling is faster than the fill rate.
```

----------------------------------------

TITLE: Accessibility Hint Example
DESCRIPTION: Demonstrates adding an `accessibilityHint` to a TouchableOpacity to guide users on the action's outcome.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/accessibility.md#_snippet_4

LANGUAGE: tsx
CODE:
```
<TouchableOpacity
  accessible={true}
  accessibilityLabel=""Go back""
  accessibilityHint=""Navigates to the previous screen""
  onPress={onPress}>
  <View style={styles.button}>
    <Text style={styles.buttonText}>Back</Text>
  </View>
</TouchableOpacity>
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: React Native Fetch Example (JS Functional)
DESCRIPTION: A complete React Native component example using JavaScript and functional components to fetch data from an API. It utilizes useState and useEffect hooks to manage loading state and fetched data, displaying it in a FlatList.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/network.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import React, {useEffect, useState} from 'react';
import {ActivityIndicator, FlatList, Text, View} from 'react-native';

const App = () => {
  const [isLoading, setLoading] = useState(true);
  const [data, setData] = useState([]);

  const getMovies = async () => {
    try {
      const response = await fetch('https://reactnative.dev/movies.json');
      const json = await response.json();
      setData(json.movies);
    } catch (error) {
      console.error(error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    getMovies();
  }, []);

  return (
    <View style={{flex: 1, padding: 24}}>
      {isLoading ? (
        <ActivityIndicator />
      ) : (
        <FlatList
          data={data}
          keyExtractor={({id}) => id}
          renderItem={({item}) => (
            <Text>
              {item.title}, {item.releaseYear}
            </Text>
          )} />
      )}
    </View>
  );
};

export default App;
```

----------------------------------------

TITLE: React Native Hello World Example
DESCRIPTION: An interactive React Native example embedded using Snack Player, allowing direct browser editing and testing of a basic 'Hello, world!' component.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/introduction.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Text, View } from 'react-native';

const YourApp = () => {
  return (
    <View style={{ flex: 1, justifyContent: ""center"", alignItems: ""center"" }}>
      <Text>
        Try editing me! 🎉
      </Text>
    </View>
  );
}

export default YourApp;
```

----------------------------------------

TITLE: Platform API Example - React Native
DESCRIPTION: Demonstrates how to use the React Native Platform module to detect the operating system, version, and other platform-specific constants. This example shows how to conditionally render UI elements based on the platform and access general platform information.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/platform.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import { Platform, StyleSheet, Text, ScrollView } from 'react-native';

const App = () => {
  return (
    <ScrollView contentContainerStyle={styles.container}>
      <Text>OS</Text>
      <Text style={styles.value}>{Platform.OS}</Text>
      <Text>OS Version</Text>
      <Text style={styles.value}>{Platform.Version}</Text>
      <Text>isTV</Text>
      <Text style={styles.value}>{Platform.isTV.toString()}</Text>
      {Platform.OS === 'ios' && <>
        <Text>isPad</Text>
        <Text style={styles.value}>{Platform.isPad.toString()}</Text>
      </>}
      <Text>Constants</Text>
      <Text style={styles.value}>
        {JSON.stringify(Platform.constants, null, 2)}
      </Text>
    </ScrollView>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  value: {
    fontWeight: '600',
    padding: 4,
    marginBottom: 8
  }
});

export default App;
```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: React Native Share Example (JavaScript)
DESCRIPTION: Demonstrates how to use the Share API in React Native to share text content. It includes a button that triggers the sharing dialog and handles success or dismissal.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native Share Example (JavaScript)
DESCRIPTION: Demonstrates how to use the Share API in React Native to share text content. It includes a button that triggers the sharing dialog and handles success or dismissal.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native Share Example (JavaScript)
DESCRIPTION: Demonstrates how to use the Share API in React Native to share text content. It includes a button that triggers the sharing dialog and handles success or dismissal.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native Systrace API Reference
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace module, including methods for enabling/disabling profiling, managing timed and asynchronous events, and logging counter values.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

Methods:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a timed profiling event. The event can be identified by a string name or a function that returns a string. Optional arguments can be passed.

endEvent(args?: EventArgs)
  - Ends the most recently started timed profiling event. Optional arguments can be passed.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event, returning a unique cookie. This is useful for events that span across different call stacks or threads. Optional arguments can be passed.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using the provided cookie. The eventName can be a string or a function returning a string. Optional arguments can be passed.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a numerical value associated with a profile name on the Systrace timeline. The eventName can be a string or a function returning a string.
```

----------------------------------------

TITLE: React Native Share Example (JavaScript)
DESCRIPTION: Demonstrates how to use the Share API in React Native to share text content. It includes a button that triggers the sharing dialog and handles success or dismissal.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native Share Example (JavaScript)
DESCRIPTION: Demonstrates how to use the Share API in React Native to share text content. It includes a button that triggers the sharing dialog and handles success or dismissal.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native Share Example (JavaScript)
DESCRIPTION: Demonstrates how to use the Share API in React Native to share text content. It includes a button that triggers the sharing dialog and handles success or dismissal.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/share.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

LANGUAGE: typescript
CODE:
```
import React from 'react';
import {Alert, Share, Button} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const ShareExample = () => {
  const onShare = async () => {
    try {
      const result = await Share.share({
        message:
          'React Native | A framework for building native apps using React',
      });
      if (result.action === Share.sharedAction) {
        if (result.activityType) {
          // shared with activity type of result.activityType
        } else {
          // shared
        }
      } else if (result.action === Share.dismissedAction) {
        // dismissed
      }
    } catch (error: any) {
      Alert.alert(error.message);
    }
  };
  return (
    <SafeAreaProvider>
      <SafeAreaView>
        <Button onPress={onShare} title=""Share"" />
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

export default ShareExample;
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Systrace Example in React Native
DESCRIPTION: Demonstrates how to use the Systrace API in a React Native application to capture non-timed JavaScript events and counter events for profiling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Button, Text, View, StyleSheet, Systrace} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>
          React Native Systrace API
        </Text>
        <View style={styles.buttonsColumn}>
          <Button
            title=""Capture the non-Timed JS events in EasyProfiler""
            onPress={() => enableProfiling()}
          />
          <Button
            title=""Stop capturing""
            onPress={() => stopProfiling()}
            color=""#FF0000""
          />
        </View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 8,
    gap: 16,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    fontSize: 25,
    textAlign: 'center',
  },
  buttonsColumn: {
    gap: 16,
  },
});

export default App;
```

----------------------------------------

TITLE: start() - React Native Animated API
DESCRIPTION: Initiates an animation. It accepts an optional callback that is executed upon completion or interruption of the animation.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/animated.md#_snippet_25

LANGUAGE: jsx
CODE:
```
static start([callback]: ?(result?: {finished: boolean}) => void)
```

----------------------------------------

TITLE: React Native Systrace API Reference
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace module, including methods for enabling/disabling profiling, managing timed and asynchronous events, and logging counter values.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

Methods:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a timed profiling event. The event can be identified by a string name or a function that returns a string. Optional arguments can be passed.

endEvent(args?: EventArgs)
  - Ends the most recently started timed profiling event. Optional arguments can be passed.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event, returning a unique cookie. This is useful for events that span across different call stacks or threads. Optional arguments can be passed.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using the provided cookie. The eventName can be a string or a function returning a string. Optional arguments can be passed.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a numerical value associated with a profile name on the Systrace timeline. The eventName can be a string or a function returning a string.
```

----------------------------------------

TITLE: Systrace Example in React Native
DESCRIPTION: Demonstrates how to use the Systrace API in a React Native application to capture non-timed JavaScript events and counter events for profiling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Button, Text, View, StyleSheet, Systrace} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>
          React Native Systrace API
        </Text>
        <View style={styles.buttonsColumn}>
          <Button
            title=""Capture the non-Timed JS events in EasyProfiler""
            onPress={() => enableProfiling()}
          />
          <Button
            title=""Stop capturing""
            onPress={() => stopProfiling()}
            color=""#FF0000""
          />
        </View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 8,
    gap: 16,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    fontSize: 25,
    textAlign: 'center',
  },
  buttonsColumn: {
    gap: 16,
  },
});

export default App;
```

----------------------------------------

TITLE: Configure Viewability (React Native API)
DESCRIPTION: Defines the criteria for determining when an item is considered 'viewable'. This configuration impacts the `onViewableItemsChanged` callback. At least one coverage or percentage threshold must be set. Changing this prop dynamically is not supported.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/flatlist.md#_snippet_8

LANGUAGE: apidoc
CODE:
```
viewabilityConfig: ViewabilityConfig

  A configuration object for determining item viewability.

  Properties:
    - minimumViewTime: number
      The minimum time (in milliseconds) an item must be visible to trigger a callback.
    - viewAreaCoveragePercentThreshold: number
      A percentage threshold for the visible area of an item within the viewport.
    - itemVisiblePercentThreshold: number
      A percentage threshold for how much of an item must be visible.
    - waitForInteraction: boolean
      If true, waits for user interaction to fire viewability callbacks.

  Note: At least one of `viewAreaCoveragePercentThreshold` or `itemVisiblePercentThreshold` is required.

  Example Usage:
  constructor (props) {
    super(props)
    this.viewabilityConfig = {
        waitForInteraction: true,
        viewAreaCoveragePercentThreshold: 95
    }
  }

  <FlatList
      viewabilityConfig={this.viewabilityConfig}
    ...
  />
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: React Native Systrace API Reference
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace module, including methods for enabling/disabling profiling, managing timed and asynchronous events, and logging counter values.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

Methods:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a timed profiling event. The event can be identified by a string name or a function that returns a string. Optional arguments can be passed.

endEvent(args?: EventArgs)
  - Ends the most recently started timed profiling event. Optional arguments can be passed.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event, returning a unique cookie. This is useful for events that span across different call stacks or threads. Optional arguments can be passed.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using the provided cookie. The eventName can be a string or a function returning a string. Optional arguments can be passed.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a numerical value associated with a profile name on the Systrace timeline. The eventName can be a string or a function returning a string.
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Systrace Example in React Native
DESCRIPTION: Demonstrates how to use the Systrace API in a React Native application to capture non-timed JavaScript events and counter events for profiling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Button, Text, View, StyleSheet, Systrace} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>
          React Native Systrace API
        </Text>
        <View style={styles.buttonsColumn}>
          <Button
            title=""Capture the non-Timed JS events in EasyProfiler""
            onPress={() => enableProfiling()}
          />
          <Button
            title=""Stop capturing""
            onPress={() => stopProfiling()}
            color=""#FF0000""
          />
        </View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 8,
    gap: 16,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    fontSize: 25,
    textAlign: 'center',
  },
  buttonsColumn: {
    gap: 16,
  },
});

export default App;
```

----------------------------------------

TITLE: Systrace Example in React Native
DESCRIPTION: Demonstrates how to use the Systrace API in a React Native application to capture non-timed JavaScript events and counter events for profiling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Button, Text, View, StyleSheet, Systrace} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>
          React Native Systrace API
        </Text>
        <View style={styles.buttonsColumn}>
          <Button
            title=""Capture the non-Timed JS events in EasyProfiler""
            onPress={() => enableProfiling()}
          />
          <Button
            title=""Stop capturing""
            onPress={() => stopProfiling()}
            color=""#FF0000""
          />
        </View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 8,
    gap: 16,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    fontSize: 25,
    textAlign: 'center',
  },
  buttonsColumn: {
    gap: 16,
  },
});

export default App;
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: Systrace Example in React Native
DESCRIPTION: Demonstrates how to use the Systrace API in a React Native application to capture non-timed JavaScript events and counter events for profiling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/systrace.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React from 'react';
import {Button, Text, View, StyleSheet, Systrace} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const enableProfiling = () => {
    Systrace.setEnabled(true); // Call setEnabled to turn on the profiling.
    Systrace.beginEvent('event_label');
    Systrace.counterEvent('event_label', 10);
  };

  const stopProfiling = () => {
    Systrace.endEvent();
  };

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={[styles.header, styles.paragraph]}>
          React Native Systrace API
        </Text>
        <View style={styles.buttonsColumn}>
          <Button
            title=""Capture the non-Timed JS events in EasyProfiler""
            onPress={() => enableProfiling()}
          />
          <Button
            title=""Stop capturing""
            onPress={() => stopProfiling()}
            color=""#FF0000""
          />
        </View>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#fff',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 8,
    gap: 16,
  },
  header: {
    fontSize: 18,
    fontWeight: 'bold',
    textAlign: 'center',
  },
  paragraph: {
    fontSize: 25,
    textAlign: 'center',
  },
  buttonsColumn: {
    gap: 16,
  },
});

export default App;
```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: React Native Systrace API Reference
DESCRIPTION: Provides documentation for the static methods available in the React Native Systrace module, including methods for enabling/disabling profiling, managing timed and asynchronous events, and logging counter values.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/systrace.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Systrace API Reference:

Methods:

isEnabled(): boolean
  - Checks if Systrace profiling is currently enabled.

beginEvent(eventName: string | (() => string), args?: EventArgs)
  - Starts a timed profiling event. The event can be identified by a string name or a function that returns a string. Optional arguments can be passed.

endEvent(args?: EventArgs)
  - Ends the most recently started timed profiling event. Optional arguments can be passed.

beginAsyncEvent(eventName: string | (() => string), args?: EventArgs): number
  - Starts an asynchronous profiling event, returning a unique cookie. This is useful for events that span across different call stacks or threads. Optional arguments can be passed.

endAsyncEvent(eventName: EventName, cookie: number, args?: EventArgs)
  - Ends an asynchronous profiling event using the provided cookie. The eventName can be a string or a function returning a string. Optional arguments can be passed.

counterEvent(eventName: string | (() => string), value: number)
  - Registers a numerical value associated with a profile name on the Systrace timeline. The eventName can be a string or a function returning a string.
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Define Interpolated Animation Styles
DESCRIPTION: Creates style objects for animation using Animated.interpolate. It maps the loading progress state to opacity and scale transformations for different UI elements. Requires React Native's Animated API.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2018-01-18-implementing-twitters-app-loading-animation-in-react-native.md#_snippet_5

LANGUAGE: jsx
CODE:
```
const loadingProgress = this.state.loadingProgress;

const opacityClearToVisible = {
  opacity: loadingProgress.interpolate({
    inputRange: [0, 15, 30],
    outputRange: [0, 0, 1],
    extrapolate: 'clamp',
    // clamp means when the input is 30-100, output should stay at 1
  }),
};

const imageScale = {
  transform: [
    {
      scale: loadingProgress.interpolate({
        inputRange: [0, 10, 100],
        outputRange: [1, 0.8, 70],
      }),
    },
  ],
};

const appScale = {
  transform: [
    {
      scale: loadingProgress.interpolate({
        inputRange: [0, 100],
        outputRange: [1.1, 1],
      }),
    },
  ],
};

```

----------------------------------------

TITLE: React Native Easing Function API Reference
DESCRIPTION: Detailed API documentation for React Native's easing functions, including their signatures, parameters, return values, and usage descriptions. Covers standard, custom, and combination easing types.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/easing.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Easing Functions:

static step0(n: number)
  - A stepping function, returns 1 for any positive value of `n`.

static step1(n: number)
  - A stepping function, returns 1 if `n` is greater than or equal to 1.

static linear(t: number)
  - A linear function, `f(t) = t`. Position correlates to elapsed time one to one.
  - Example: http://cubic-bezier.com/#0,0,1,1

static ease(t: number)
  - A basic inertial interaction, similar to an object slowly accelerating to speed.
  - Example: http://cubic-bezier.com/#.42,0,1,1

static quad(t: number)
  - A quadratic function, `f(t) = t * t`. Position equals the square of elapsed time.
  - Example: http://easings.net/#easeInQuad

static cubic(t: number)
  - A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed time.
  - Example: http://easings.net/#easeInCubic

static poly(n: number)
  - A power function. Position is equal to the Nth power of elapsed time.
  - n = 4: http://easings.net/#easeInQuart
  - n = 5: http://easings.net/#easeInQuint

static sin(t: number)
  - A sinusoidal function.
  - Example: http://easings.net/#easeInSine

static circle(t: number)
  - A circular function.
  - Example: http://easings.net/#easeInCirc

static exp(t: number)
  - An exponential function.
  - Example: http://easings.net/#easeInExpo

static elastic(bounciness: number)
  - A basic elastic interaction, similar to a spring oscillating back and forth.
  - Default bounciness is 1, which overshoots a little bit once. 0 bounciness doesn't overshoot at all, and bounciness of N > 1 will overshoot about N times.
  - Example: http://easings.net/#easeInElastic

static back(s)
  - Use with `Animated.parallel()` to create a basic effect where the object animates back slightly as the animation starts.

static bounce(t: number)
  - Provides a basic bouncing effect.
  - Example: http://easings.net/#easeInBounce

static bezier(x1: number, y1: number, x2: number, y2: number)
  - Provides a cubic bezier curve, equivalent to CSS Transitions' `transition-timing-function`.
  - A useful tool to visualize cubic bezier curves can be found at http://cubic-bezier.com/

static in(easing: number)
  - Runs an easing function forwards.

static out(easing: number)
  - Runs an easing function backwards.

static inOut(easing: number)
  - Makes any easing function symmetrical. The easing function will run forwards for half of the duration, then backwards for the rest of the duration.
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: React Native Inline Example
DESCRIPTION: Demonstrates an interactive inline code example using the ReactNativeWebPlayer, allowing users to see React Native components like Text and View rendered directly within the documentation. This feature aims to provide a visceral learning experience by enabling immediate code experimentation.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/blog/2016-07-06-toward-better-documentation.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import React, { Component } from 'react';
import { AppRegistry, Text, View } from 'react-native';

class ScratchPad extends Component {
  render() {
    return (
      <View style={{flex: 1}}>
        <Text style={{fontSize: 30, flex: 1, textAlign: 'center'}}>
          Isn't this cool?
        </Text>
        <Text style={{fontSize: 100, flex: 1, textAlign: 'center'}}>
          👍
        </Text>
      </View>
    );
  }
}

AppRegistry.registerComponent('ScratchPad', () => ScratchPad);
```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: React Native Counter Example (Classes)
DESCRIPTION: Illustrates state management in React Native using class components. This example shows how to initialize state and update it using the setState method.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/tutorial.md#_snippet_3

LANGUAGE: javascript
CODE:
```
import React, {Component} from 'react';
import {StyleSheet, TouchableOpacity, Text, View} from 'react-native';

class App extends Component {
  state = {
    count: 0,
  };

  onPress = () => {
    this.setState({
      count: this.state.count + 1,
    });
  };

  render() {
    return (
      <View style={styles.container}>
        <TouchableOpacity style={styles.button} onPress={this.onPress}>
          <Text>Click me</Text>
        </TouchableOpacity>
        <View>
          <Text>You clicked {this.state.count} times</Text>
        </View>
      </View>
    );
  }
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  button: {
    alignItems: 'center',
    backgroundColor: '#DDDDDD',
    padding: 10,
    marginBottom: 10,
  },
});

export default App;

```

----------------------------------------

TITLE: Create New Expo App
DESCRIPTION: This command initializes a new React Native project using the latest version of create-expo-app. It sets up a project structure with Expo's recommended configurations and dependencies, allowing you to start building native applications quickly.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/getting-started.md#_snippet_0

LANGUAGE: shell
CODE:
```
npx create-expo-app@latest
```

----------------------------------------

TITLE: Appearance API Reference (APIDOC)
DESCRIPTION: Provides detailed documentation for the React Native Appearance API, including methods for retrieving and listening to changes in user appearance preferences.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
APIDOC:
  Appearance Module

  The Appearance module provides access to user preferences related to appearance, such as color schemes.

  Methods:

  getColorScheme(): 'light' | 'dark' | null
    Description: Indicates the current user preferred color scheme. The value may be updated later, either through direct user action (e.g. theme selection in device settings) or on a schedule (e.g. light and dark themes that follow the day/night cycle).
    Supported color schemes:
      - light: The user prefers a light color theme.
      - dark: The user prefers a dark color theme.
      - null: The user has not indicated a preferred color theme.
    Notes:
      - `getColorScheme()` will always return `light` when debugging with Chrome.
      - See also: `useColorScheme` hook.

  addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
    Description: Add an event handler that is fired when appearance preferences change.
    Parameters:
      - listener: A callback function that receives an object with the updated `colorScheme`.
```

----------------------------------------

TITLE: React Native Layout Direction Example
DESCRIPTION: Demonstrates how to control layout direction (LTR/RTL) in React Native using the `direction` prop. This example showcases switching between left-to-right and right-to-left layouts for child elements and text, affecting alignment and the interpretation of 'start' and 'end' edges.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/flexbox.md#_snippet_2

LANGUAGE: javascript
CODE:
```
import React, { useState } from ""react"";
import { View, TouchableOpacity, Text, StyleSheet } from ""react-native"";

const DirectionLayout = () => {
  const [direction, setDirection] = useState(""ltr"");

  return (
    <PreviewLayout
      label=""direction""
      selectedValue={direction}
      values={[""ltr"", ""rtl""]}
      setSelectedValue={setDirection}>
      <View
        style={[styles.box, { backgroundColor: ""powderblue"" }]}
      />
      <View
        style={[styles.box, { backgroundColor: ""skyblue"" }]}
      />
      <View
        style={[styles.box, { backgroundColor: ""steelblue"" }]}
      />
    </PreviewLayout>
  );
};

const PreviewLayout = ({
  label,
  children,
  values,
  selectedValue,
  setSelectedValue,
}) => (
  <View style={{ padding: 10, flex: 1 }}>
    <Text style={styles.label}>{label}</Text>
    <View style={styles.row}>
      {values.map((value) => (
        <TouchableOpacity
          key={value}
          onPress={() => setSelectedValue(value)}
          style={[
            styles.button,
            selectedValue === value && styles.selected,
          ]}
        >
          <Text
            style={[
              styles.buttonLabel,
              selectedValue === value && styles.selectedLabel,
            ]}
          >
            {value}
          </Text>
        </TouchableOpacity>
      ))}
    </View>
    <View style={[styles.container, { [label]: selectedValue }]}>
      {children}
    </View>
  </View>
);

const styles = StyleSheet.create({
  container: {
    flex: 1,
    marginTop: 8,
    backgroundColor: ""aliceblue"",
  },
  box: {
    width: 50,
    height: 50,
  },
  row: {
    flexDirection: ""row"",
    flexWrap: ""wrap"",
  },
  button: {
    paddingHorizontal: 8,
    paddingVertical: 6,
    borderRadius: 4,
    backgroundColor: ""oldlace"",
    alignSelf: ""flex-start"",
    marginHorizontal: ""1%"",
    marginBottom: 6,
    minWidth: ""48%"",
    textAlign: ""center"",
  },
  selected: {
    backgroundColor: ""coral"",
    borderWidth: 0,
  },
  buttonLabel: {
    fontSize: 12,
    fontWeight: ""500"",
    color: ""coral"",
  },
  selectedLabel: {
    color: ""white"",
  },
  label: {
    textAlign: ""center"",
    marginBottom: 10,
    fontSize: 24,
  },
});

export default DirectionLayout;

```

----------------------------------------

TITLE: Appearance API Reference
DESCRIPTION: Provides detailed documentation for the React Native Appearance module's methods, including getColorScheme, setColorScheme, and addChangeListener. It covers method signatures, parameter descriptions, return values, and usage notes.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/appearance.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Appearance Module:

Provides access to user interface preferences like color scheme.

Methods:

getColorScheme(): 'light' | 'dark' | null
  - Returns the current user preferred color scheme.
  - Supported values: 'light', 'dark', or null if no preference is indicated.
  - Note: Returns 'light' when debugging with Chrome.
  - See also: useColorScheme hook.

setColorScheme(scheme: 'light' | 'dark' | null): void
  - Forces the application to adopt a specific interface style.
  - If null, the application inherits the system's style.
  - Affects the application and all native elements.
  - Does not change the system's selected style or other applications.

addChangeListener(listener: (preferences: {colorScheme: 'light' | 'dark' | null}) => void): NativeEventSubscription
  - Adds an event listener that is triggered when appearance preferences change.
  - The listener receives an object containing the updated colorScheme.
```

----------------------------------------

TITLE: Get Color Scheme Example
DESCRIPTION: Demonstrates how to retrieve the user's preferred color scheme and conditionally apply styles or logic based on it.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/appearance.md#_snippet_1

LANGUAGE: jsx
CODE:
```
const colorScheme = Appearance.getColorScheme();
if (colorScheme === 'dark') {
  // Use dark color scheme
}
```

----------------------------------------

TITLE: columnGap API
DESCRIPTION: Works like 'column-gap' in CSS. Only pixel units are supported in React Native for this property.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/layout-props.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
columnGap: number
  - Sets the gap between columns.
  - Only pixel units are supported.
  - Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
```

----------------------------------------

TITLE: columnGap API
DESCRIPTION: Works like 'column-gap' in CSS. Only pixel units are supported in React Native for this property.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/layout-props.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
columnGap: number
  - Sets the gap between columns.
  - Only pixel units are supported.
  - Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
```

----------------------------------------

TITLE: Animated.ValueXY API Reference
DESCRIPTION: Comprehensive API documentation for Animated.ValueXY, detailing methods for value manipulation, animation control, and listener management.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/animatedvaluexy.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Animated.ValueXY:
  __init__()
    Creates a 2D animated value.

  setValue(value)
    Directly set the value. This will stop any animations running on the value and update all the bound properties.
    Parameters:
      value: number (Yes) - The new value.

  setOffset(offset)
    Sets an offset that is applied on top of whatever value is set, whether via setValue, an animation, or Animated.event. Useful for compensating things like the start of a pan gesture.
    Parameters:
      offset: number (Yes) - The offset value.

  flattenOffset()
    Merges the offset value into the base value and resets the offset to zero. The final output of the value is unchanged.

  extractOffset()
    Sets the offset value to the base value, and resets the base value to zero. The final output of the value is unchanged.

  addListener(callback)
    Adds an asynchronous listener to the value so you can observe updates from animations. This is useful because there is no way to synchronously read the value because it might be driven natively.
    Returns: string - An identifier for the listener.
    Parameters:
      callback: function (Yes) - The callback function which will receive an object with a `value` key set to the new value.

  removeListener(id)
    Unregister a listener. The `id` param shall match the identifier previously returned by `addListener()`.
    Parameters:
      id: string (Yes) - Id for the listener being removed.

  removeAllListeners()
    Remove all registered listeners.

  stopAnimation([callback])
    Stops any running animation or tracking. `callback` is invoked with the final value after stopping the animation, which is useful for updating state to match the animation position with layout.
    Parameters:
      callback: function (No) - A function that will receive the final value.

  resetAnimation([callback])
    Stops any animation and resets the value to its original. Useful for resetting animations.
    Parameters:
      callback: function (No) - A function that will receive the original value.

  getLayout()
    Converts `{x, y}` into `{left, top}` for use in style, e.g. `style={this.state.anim.getLayout()}`.

  getTranslateTransform()
    Converts `{x, y}` into a useable translation transform, e.g. `style={{ transform: this.state.anim.getTranslateTransform() }}`.
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: Demonstrates how to use the `AccessibilityInfo` API to check if the screen reader is enabled and if reduce motion is enabled, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, Text, StyleSheet} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;

```

----------------------------------------

TITLE: Start Development Server
DESCRIPTION: Starts the Docusaurus development server to preview the website locally. Changes are reflected live.
SOURCE: https://github.com/facebook/react-native-website/blob/main/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
yarn start
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: Demonstrates how to use the `AccessibilityInfo` API to check if the screen reader is enabled and if reduce motion is enabled, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.78/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, Text, StyleSheet} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;

```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: Demonstrates how to use the `AccessibilityInfo` API to check if the screen reader is enabled and if reduce motion is enabled, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, Text, StyleSheet} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;

```

----------------------------------------

TITLE: Animated.ValueXY API Reference
DESCRIPTION: Comprehensive API documentation for Animated.ValueXY, detailing methods for value manipulation, animation control, and listener management.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/animatedvaluexy.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Animated.ValueXY:
  __init__(): Creates a new 2D animated value.

  setValue(value: {x: number; y: number}):
    Directly sets the value of the Animated.ValueXY.
    This stops any running animations and updates all bound properties.
    Parameters:
      value: An object with 'x' and 'y' numeric properties.

  setOffset(offset: {x: number; y: number}):
    Sets an offset that is applied on top of the current value.
    Useful for compensating for initial positions in gestures.
    Parameters:
      offset: An object with 'x' and 'y' numeric properties representing the offset.

  flattenOffset():
    Merges the current offset value into the base value and resets the offset to zero.
    The final output value remains unchanged.

  extractOffset():
    Sets the offset value to the current base value and resets the base value to zero.
    The final output value remains unchanged.

  addListener(callback: (value: {x: number; y: number}) => void): string:
    Adds an asynchronous listener to observe updates to the Animated.ValueXY.
    Returns a string identifier for the listener.
    Parameters:
      callback: A function that receives an object with a 'value' key, where 'value' is an object containing the new 'x' and 'y' coordinates.

  removeListener(id: string): void:
    Removes a previously registered listener using its identifier.
    Parameters:
      id: The string identifier of the listener to remove.

  removeAllListeners(): void:
    Removes all registered listeners for this Animated.ValueXY instance.

  stopAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any currently running animation or tracking for this value.
    Optionally invokes a callback with the final value after stopping.
    Parameters:
      callback: An optional function that will be invoked with the final value.

  resetAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any running animation and resets the Animated.ValueXY to its original state.
    Optionally invokes a callback with the original value after resetting.
    Parameters:
      callback: An optional function that will be invoked with the original value.
```

----------------------------------------

TITLE: Animated.ValueXY API Reference
DESCRIPTION: Comprehensive API documentation for Animated.ValueXY, detailing methods for value manipulation, animation control, and listener management.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.72/animatedvaluexy.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Animated.ValueXY:
  __init__(): Creates a new 2D animated value.

  setValue(value: {x: number; y: number}):
    Directly sets the value of the Animated.ValueXY.
    This stops any running animations and updates all bound properties.
    Parameters:
      value: An object with 'x' and 'y' numeric properties.

  setOffset(offset: {x: number; y: number}):
    Sets an offset that is applied on top of the current value.
    Useful for compensating for initial positions in gestures.
    Parameters:
      offset: An object with 'x' and 'y' numeric properties representing the offset.

  flattenOffset():
    Merges the current offset value into the base value and resets the offset to zero.
    The final output value remains unchanged.

  extractOffset():
    Sets the offset value to the current base value and resets the base value to zero.
    The final output value remains unchanged.

  addListener(callback: (value: {x: number; y: number}) => void): string:
    Adds an asynchronous listener to observe updates to the Animated.ValueXY.
    Returns a string identifier for the listener.
    Parameters:
      callback: A function that receives an object with a 'value' key, where 'value' is an object containing the new 'x' and 'y' coordinates.

  removeListener(id: string): void:
    Removes a previously registered listener using its identifier.
    Parameters:
      id: The string identifier of the listener to remove.

  removeAllListeners(): void:
    Removes all registered listeners for this Animated.ValueXY instance.

  stopAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any currently running animation or tracking for this value.
    Optionally invokes a callback with the final value after stopping.
    Parameters:
      callback: An optional function that will be invoked with the final value.

  resetAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any running animation and resets the Animated.ValueXY to its original state.
    Optionally invokes a callback with the original value after resetting.
    Parameters:
      callback: An optional function that will be invoked with the original value.
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: Demonstrates how to use the `AccessibilityInfo` API to check if the screen reader is enabled and if reduce motion is enabled, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, Text, StyleSheet} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;

```

----------------------------------------

TITLE: columnGap API
DESCRIPTION: Works like 'column-gap' in CSS. Only pixel units are supported in React Native for this property.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/layout-props.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
columnGap: number
  - Sets the gap between columns.
  - Only pixel units are supported.
  - Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
```

----------------------------------------

TITLE: Animated.ValueXY API Reference
DESCRIPTION: Comprehensive API documentation for Animated.ValueXY, detailing methods for value manipulation, animation control, and listener management.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/animatedvaluexy.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Animated.ValueXY:
  __init__(): Creates a new 2D animated value.

  setValue(value: {x: number; y: number}):
    Directly sets the value of the Animated.ValueXY.
    This stops any running animations and updates all bound properties.
    Parameters:
      value: An object with 'x' and 'y' numeric properties.

  setOffset(offset: {x: number; y: number}):
    Sets an offset that is applied on top of the current value.
    Useful for compensating for initial positions in gestures.
    Parameters:
      offset: An object with 'x' and 'y' numeric properties representing the offset.

  flattenOffset():
    Merges the current offset value into the base value and resets the offset to zero.
    The final output value remains unchanged.

  extractOffset():
    Sets the offset value to the current base value and resets the base value to zero.
    The final output value remains unchanged.

  addListener(callback: (value: {x: number; y: number}) => void): string:
    Adds an asynchronous listener to observe updates to the Animated.ValueXY.
    Returns a string identifier for the listener.
    Parameters:
      callback: A function that receives an object with a 'value' key, where 'value' is an object containing the new 'x' and 'y' coordinates.

  removeListener(id: string): void:
    Removes a previously registered listener using its identifier.
    Parameters:
      id: The string identifier of the listener to remove.

  removeAllListeners(): void:
    Removes all registered listeners for this Animated.ValueXY instance.

  stopAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any currently running animation or tracking for this value.
    Optionally invokes a callback with the final value after stopping.
    Parameters:
      callback: An optional function that will be invoked with the final value.

  resetAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any running animation and resets the Animated.ValueXY to its original state.
    Optionally invokes a callback with the original value after resetting.
    Parameters:
      callback: An optional function that will be invoked with the original value.
```

----------------------------------------

TITLE: Viewability Configuration Callback Pairs
DESCRIPTION: A list of `ViewabilityConfig` and `onViewableItemsChanged` pairs. A specific `onViewableItemsChanged` callback will be invoked when its corresponding `ViewabilityConfig`'s conditions are met. Refer to `ViewabilityHelper.js` for flow type and further documentation.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/flatlist.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
viewabilityConfigCallbackPairs:
  Type: array of ViewabilityConfigCallbackPair
```

----------------------------------------

TITLE: Animated.ValueXY API Reference
DESCRIPTION: Comprehensive API documentation for Animated.ValueXY, detailing methods for value manipulation, animation control, and listener management.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.73/animatedvaluexy.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Animated.ValueXY:
  __init__(): Creates a new 2D animated value.

  setValue(value: {x: number; y: number}):
    Directly sets the value of the Animated.ValueXY.
    This stops any running animations and updates all bound properties.
    Parameters:
      value: An object with 'x' and 'y' numeric properties.

  setOffset(offset: {x: number; y: number}):
    Sets an offset that is applied on top of the current value.
    Useful for compensating for initial positions in gestures.
    Parameters:
      offset: An object with 'x' and 'y' numeric properties representing the offset.

  flattenOffset():
    Merges the current offset value into the base value and resets the offset to zero.
    The final output value remains unchanged.

  extractOffset():
    Sets the offset value to the current base value and resets the base value to zero.
    The final output value remains unchanged.

  addListener(callback: (value: {x: number; y: number}) => void): string:
    Adds an asynchronous listener to observe updates to the Animated.ValueXY.
    Returns a string identifier for the listener.
    Parameters:
      callback: A function that receives an object with a 'value' key, where 'value' is an object containing the new 'x' and 'y' coordinates.

  removeListener(id: string): void:
    Removes a previously registered listener using its identifier.
    Parameters:
      id: The string identifier of the listener to remove.

  removeAllListeners(): void:
    Removes all registered listeners for this Animated.ValueXY instance.

  stopAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any currently running animation or tracking for this value.
    Optionally invokes a callback with the final value after stopping.
    Parameters:
      callback: An optional function that will be invoked with the final value.

  resetAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any running animation and resets the Animated.ValueXY to its original state.
    Optionally invokes a callback with the original value after resetting.
    Parameters:
      callback: An optional function that will be invoked with the original value.
```

----------------------------------------

TITLE: columnGap API
DESCRIPTION: Works like 'column-gap' in CSS. Only pixel units are supported in React Native for this property.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.79/layout-props.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
columnGap: number
  - Sets the gap between columns.
  - Only pixel units are supported.
  - Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
```

----------------------------------------

TITLE: React Native StyleSheet Example
DESCRIPTION: Demonstrates how to create and apply styles to React Native components using the `StyleSheet.create` API. It includes styles for containers, titles, boxes, and list items.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/easing.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#20232a',
  },
  title: {
    marginTop: 10,
    textAlign: 'center',
    color: '#61dafb',
  },
  boxContainer: {
    height: 160,
    alignItems: 'center',
  },
  box: {
    marginTop: 32,
    borderRadius: 4,
    backgroundColor: '#61dafb',
  },
  list: {
    backgroundColor: '#fff',
  },
  listHeader: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    backgroundColor: '#f4f4f4',
    color: '#999',
    fontSize: 12,
    textTransform: 'uppercase',
  },
  listRow: {
    padding: 8,
  },
});
```

----------------------------------------

TITLE: Clipboard API Methods
DESCRIPTION: Provides methods to interact with the device's clipboard, allowing to get and set string content. Note that non-string/number data may require additional stringification.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/clipboard.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Clipboard API:

getString(): Promise<string>
  Description: Retrieves the current string content from the clipboard.
  Returns: A Promise that resolves with the clipboard content.
  Example:
    async _getContent() {
      var content = await Clipboard.getString();
    }

setString(content: string): void
  Description: Sets the clipboard content to the provided string.
  Parameters:
    content (string): The content to be stored in the clipboard.
  Notice: Be careful when copying data other than string and number. Arrays may cause exceptions on Android.
  Example:
    _setContent() {
      Clipboard.setString('hello world');
    }
```

----------------------------------------

TITLE: columnGap API
DESCRIPTION: Works like 'column-gap' in CSS. Only pixel units are supported in React Native for this property.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/layout-props.md#_snippet_17

LANGUAGE: APIDOC
CODE:
```
columnGap: number
  - Sets the gap between columns.
  - Only pixel units are supported.
  - Reference: https://developer.mozilla.org/en-US/docs/Web/CSS/column-gap
```

----------------------------------------

TITLE: Animated.ValueXY API Reference
DESCRIPTION: Comprehensive API documentation for Animated.ValueXY, detailing methods for value manipulation, animation control, and listener management.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.71/animatedvaluexy.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Animated.ValueXY:
  __init__(): Creates a new 2D animated value.

  setValue(value: {x: number; y: number}):
    Directly sets the value of the Animated.ValueXY.
    This stops any running animations and updates all bound properties.
    Parameters:
      value: An object with 'x' and 'y' numeric properties.

  setOffset(offset: {x: number; y: number}):
    Sets an offset that is applied on top of the current value.
    Useful for compensating for initial positions in gestures.
    Parameters:
      offset: An object with 'x' and 'y' numeric properties representing the offset.

  flattenOffset():
    Merges the current offset value into the base value and resets the offset to zero.
    The final output value remains unchanged.

  extractOffset():
    Sets the offset value to the current base value and resets the base value to zero.
    The final output value remains unchanged.

  addListener(callback: (value: {x: number; y: number}) => void): string:
    Adds an asynchronous listener to observe updates to the Animated.ValueXY.
    Returns a string identifier for the listener.
    Parameters:
      callback: A function that receives an object with a 'value' key, where 'value' is an object containing the new 'x' and 'y' coordinates.

  removeListener(id: string): void:
    Removes a previously registered listener using its identifier.
    Parameters:
      id: The string identifier of the listener to remove.

  removeAllListeners(): void:
    Removes all registered listeners for this Animated.ValueXY instance.

  stopAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any currently running animation or tracking for this value.
    Optionally invokes a callback with the final value after stopping.
    Parameters:
      callback: An optional function that will be invoked with the final value.

  resetAnimation(callback?: (value: {x: number; y: number}) => void): void:
    Stops any running animation and resets the Animated.ValueXY to its original state.
    Optionally invokes a callback with the original value after resetting.
    Parameters:
      callback: An optional function that will be invoked with the original value.
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: Demonstrates how to use the `AccessibilityInfo` API to check if the screen reader is enabled and if reduce motion is enabled, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, Text, StyleSheet} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;

```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Comprehensive reference for ActionSheetIOS methods, detailing signatures, parameters, return values, and usage for native iOS action sheets and share sheets.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.70/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options, callback)
    - Displays a native iOS action sheet.
    - Parameters:
      - options (object): Configuration for the action sheet.
        - options (array of strings): Button titles (required).
        - cancelButtonIndex (int): Index of the cancel button in `options`.
        - cancelButtonTintColor (string): Color for the cancel button text.
        - destructiveButtonIndex (int or array of ints): Indices of destructive buttons.
        - title (string): Title displayed above the action sheet.
        - message (string): Message displayed below the title.
        - anchor (number): Node to anchor the action sheet to (for iPad).
        - tintColor (string): Color for non-destructive button titles.
        - disabledButtonIndices (array of numbers): Indices of buttons to disable.
        - userInterfaceStyle (string): 'light' or 'dark' for interface style, otherwise system default.
    - callback (function): Function called with the zero-based index of the selected item.
    - Example:
      ActionSheetIOS.showActionSheetWithOptions(
        {
          options: ['Cancel', 'Remove'],
          destructiveButtonIndex: 1,
          cancelButtonIndex: 0,
        },
        buttonIndex => {
          if (buttonIndex === 1) { /* destructive action */ }
        },
      );

  dismissActionSheet()
    - Dismisses the most upper iOS action sheet presented.
    - If no action sheet is present, a warning is displayed.

  showShareActionSheetWithOptions(options, failureCallback, successCallback)
    - Displays the iOS share sheet.
    - Parameters:
      - options (object): Configuration for the share sheet.
        - url (string): URL to share.
        - message (string): Message to share.
        - subject (string): Subject for the message.
        - excludedActivityTypes (array): Activities to exclude from the ActionSheet.
    - Note: Sharing local files or base64 URIs loads and shares the content directly. Remote URLs must conform to RFC 2396.
    - failureCallback (function): Called with an error object (optional `stack` property) on failure.
    - successCallback (function): Called with a boolean (success/failure) and a string indicating the sharing method on success.
```

----------------------------------------

TITLE: AccessibilityInfo Example
DESCRIPTION: Demonstrates how to use the `AccessibilityInfo` API to check if the screen reader is enabled and if reduce motion is enabled, and how to subscribe to changes in these states.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/accessibilityinfo.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import React, {useState, useEffect} from 'react';
import {AccessibilityInfo, Text, StyleSheet} from 'react-native';
import {SafeAreaView, SafeAreaProvider} from 'react-native-safe-area-context';

const App = () => {
  const [reduceMotionEnabled, setReduceMotionEnabled] = useState(false);
  const [screenReaderEnabled, setScreenReaderEnabled] = useState(false);

  useEffect(() => {
    const reduceMotionChangedSubscription = AccessibilityInfo.addEventListener(
      'reduceMotionChanged',
      isReduceMotionEnabled => {
        setReduceMotionEnabled(isReduceMotionEnabled);
      },
    );
    const screenReaderChangedSubscription = AccessibilityInfo.addEventListener(
      'screenReaderChanged',
      isScreenReaderEnabled => {
        setScreenReaderEnabled(isScreenReaderEnabled);
      },
    );

    AccessibilityInfo.isReduceMotionEnabled().then(isReduceMotionEnabled => {
      setReduceMotionEnabled(isReduceMotionEnabled);
    });
    AccessibilityInfo.isScreenReaderEnabled().then(isScreenReaderEnabled => {
      setScreenReaderEnabled(isScreenReaderEnabled);
    });

    return () => {
      reduceMotionChangedSubscription.remove();
      screenReaderChangedSubscription.remove();
    };
  }, []);

  return (
    <SafeAreaProvider>
      <SafeAreaView style={styles.container}>
        <Text style={styles.status}>
          The reduce motion is {reduceMotionEnabled ? 'enabled' : 'disabled'}.
        </Text>
        <Text style={styles.status}>
          The screen reader is {screenReaderEnabled ? 'enabled' : 'disabled'}.
        </Text>
      </SafeAreaView>
    </SafeAreaProvider>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center',
  },
  status: {
    margin: 30,
  },
});

export default App;

```

----------------------------------------

TITLE: React Native StyleSheet Example
DESCRIPTION: Demonstrates how to create and apply styles to React Native components using the `StyleSheet.create` API. It includes styles for containers, titles, boxes, and list items.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/easing.md#_snippet_6

LANGUAGE: javascript
CODE:
```
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#20232a',
  },
  title: {
    marginTop: 10,
    textAlign: 'center',
    color: '#61dafb',
  },
  boxContainer: {
    height: 160,
    alignItems: 'center',
  },
  box: {
    marginTop: 32,
    borderRadius: 4,
    backgroundColor: '#61dafb',
  },
  list: {
    backgroundColor: '#fff',
  },
  listHeader: {
    paddingHorizontal: 8,
    paddingVertical: 4,
    backgroundColor: '#f4f4f4',
    color: '#999',
    fontSize: 12,
    textTransform: 'uppercase',
  },
  listRow: {
    padding: 8,
  },
});
```

----------------------------------------

TITLE: Example of Installing a Specific Version
DESCRIPTION: An example demonstrating how to install a specific version of the '@react-native-community/netinfo' library, using version 2.0.0.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/libraries.md#_snippet_6

LANGUAGE: Shell
CODE:
```
npm install @react-native-community/netinfo@^2.0.0
```

----------------------------------------

TITLE: Java Coding Style Guidelines
DESCRIPTION: Specific formatting and style conventions for Java code within the React Native project. These rules help maintain code quality and consistency across the codebase.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/contributing/how-to-contribute-code.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Java Coding Style:

- For method calls spanning multiple lines, the closing bracket `)` should be on the same line as the last argument.
- If a method header exceeds a single line, each argument should be placed on a separate line.
- Maintain a line length of 100 characters.
```

----------------------------------------

TITLE: React Native scrollToOffset API
DESCRIPTION: Scrolls to a specific content pixel offset in the list. Supports horizontal and vertical scrolling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/flatlist.md#_snippet_34

LANGUAGE: APIDOC
CODE:
```
scrollToOffset(params: {
  offset: number;
  animated?: boolean;
});

Description: Scroll to a specific content pixel offset in the list.

Parameters:
- params (object, Required):
  - offset (number): The offset to scroll to. In case of horizontal being true, the offset is the x-value, in any other case the offset is the y-value. Required.
  - animated (boolean): Whether the list should do an animation while scrolling. Defaults to true.
```

----------------------------------------

TITLE: Example of Installing a Specific Version
DESCRIPTION: An example demonstrating how to install a specific version of the '@react-native-community/netinfo' library, using version 2.0.0.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/libraries.md#_snippet_6

LANGUAGE: Shell
CODE:
```
npm install @react-native-community/netinfo@^2.0.0
```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Provides detailed documentation for the ActionSheetIOS module, covering methods for displaying native iOS action sheets and share sheets, including their parameters, callbacks, and usage.
SOURCE: https://github.com/facebook/react-native-website/blob/main/docs/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options: ActionSheetIOSOptions, callback: (buttonIndex: number) => void)
    Displays a native iOS action sheet.
    Parameters:
      - options (object): Configuration for the action sheet.
        - options (array of strings): List of button titles (required).
        - cancelButtonIndex (int): Index of the cancel button in `options`.
        - cancelButtonTintColor (string): Color for the cancel button text.
        - destructiveButtonIndex (int or array of ints): Indices of destructive buttons.
        - title (string): Title to display above the action sheet.
        - message (string): Message to display below the title.
        - anchor (number): Node to anchor the action sheet to (for iPad).
        - tintColor (string): Color for non-destructive button titles.
        - disabledButtonIndices (array of numbers): Indices of buttons to disable.
        - userInterfaceStyle (string): Interface style ('light' or 'dark').
    Callback:
      - buttonIndex (number): The zero-based index of the selected item.
    Example:
      ActionSheetIOS.showActionSheetWithOptions(
        {
          options: ['Cancel', 'Remove'],
          destructiveButtonIndex: 1,
          cancelButtonIndex: 0,
        },
        buttonIndex => {
          if (buttonIndex === 1) { /* destructive action */ }
        },
      );

  dismissActionSheet()
    Dismisses the most upper iOS action sheet presented. Displays a warning if no action sheet is present.

  showShareActionSheetWithOptions(options: ShareActionSheetIOSOptions, failureCallback: (error: Error) => void, successCallback: (success: boolean, method: string) => void)
    Displays the iOS share sheet.
    Parameters:
      - options (object): Configuration for the share sheet.
        - url (string): URL to share (local file or remote).
        - message (string): Message to share.
        - subject (string): Subject for the message.
        - excludedActivityTypes (array): Activities to exclude from the ActionSheet.
    Callbacks:
      - failureCallback (function): Called with an error object if sharing fails.
      - successCallback (function): Called with success status and sharing method.
    Note:
      If `url` points to a local file or base64 uri, it will be loaded and shared directly. Remote URLs must conform to RFC 2396.
```

----------------------------------------

TITLE: ActionSheetIOS API Reference
DESCRIPTION: Provides detailed documentation for the ActionSheetIOS module, covering methods for displaying native iOS action sheets and share sheets, including their parameters, callbacks, and usage.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.77/actionsheetios.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
ActionSheetIOS:
  showActionSheetWithOptions(options: ActionSheetIOSOptions, callback: (buttonIndex: number) => void)
    Displays a native iOS action sheet.
    Parameters:
      - options (object): Configuration for the action sheet.
        - options (array of strings): List of button titles (required).
        - cancelButtonIndex (int): Index of the cancel button in `options`.
        - cancelButtonTintColor (string): Color for the cancel button text.
        - destructiveButtonIndex (int or array of ints): Indices of destructive buttons.
        - title (string): Title to display above the action sheet.
        - message (string): Message to display below the title.
        - anchor (number): Node to anchor the action sheet to (for iPad).
        - tintColor (string): Color for non-destructive button titles.
        - disabledButtonIndices (array of numbers): Indices of buttons to disable.
        - userInterfaceStyle (string): Interface style ('light' or 'dark').
    Callback:
      - buttonIndex (number): The zero-based index of the selected item.
    Example:
      ActionSheetIOS.showActionSheetWithOptions(
        {
          options: ['Cancel', 'Remove'],
          destructiveButtonIndex: 1,
          cancelButtonIndex: 0,
        },
        buttonIndex => {
          if (buttonIndex === 1) { /* destructive action */ }
        },
      );

  dismissActionSheet()
    Dismisses the most upper iOS action sheet presented. Displays a warning if no action sheet is present.

  showShareActionSheetWithOptions(options: ShareActionSheetIOSOptions, failureCallback: (error: Error) => void, successCallback: (success: boolean, method: string) => void)
    Displays the iOS share sheet.
    Parameters:
      - options (object): Configuration for the share sheet.
        - url (string): URL to share (local file or remote).
        - message (string): Message to share.
        - subject (string): Subject for the message.
        - excludedActivityTypes (array): Activities to exclude from the ActionSheet.
    Callbacks:
      - failureCallback (function): Called with an error object if sharing fails.
      - successCallback (function): Called with success status and sharing method.
    Note:
      If `url` points to a local file or base64 uri, it will be loaded and shared directly. Remote URLs must conform to RFC 2396.
```

----------------------------------------

TITLE: React Native scrollToOffset API
DESCRIPTION: Scrolls to a specific content pixel offset in the list. Supports horizontal and vertical scrolling.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.74/flatlist.md#_snippet_34

LANGUAGE: APIDOC
CODE:
```
scrollToOffset(params: {
  offset: number;
  animated?: boolean;
});

Description: Scroll to a specific content pixel offset in the list.

Parameters:
- params (object, Required):
  - offset (number): The offset to scroll to. In case of horizontal being true, the offset is the x-value, in any other case the offset is the y-value. Required.
  - animated (boolean): Whether the list should do an animation while scrolling. Defaults to true.
```

----------------------------------------

TITLE: Get Delivered Notifications API
DESCRIPTION: Retrieves a list of notifications currently displayed in the Notification Center. It requires a callback function to receive the notification data.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.80/pushnotificationios.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
getDeliveredNotifications(callback: (notifications: Object[]) => void)

Provides a list of the app’s notifications that are currently displayed in Notification Center.

Parameters:
  callback (function, required): Function which receives an array of delivered notifications.

A delivered notification is an object containing:
  identifier (string): The identifier of this notification.
  title (string): The title of this notification.
  body (string): The body of this notification.
  category (string, optional): The category of this notification.
  userInfo (object, optional): An object containing additional notification data.
  thread-id (string): The thread identifier of this notification, if it has one.
```

----------------------------------------

TITLE: Example of Installing a Specific Version
DESCRIPTION: An example demonstrating how to install a specific version of the '@react-native-community/netinfo' library, using version 2.0.0.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/libraries.md#_snippet_6

LANGUAGE: Shell
CODE:
```
npm install @react-native-community/netinfo@^2.0.0
```

----------------------------------------

TITLE: Get Delivered Notifications API
DESCRIPTION: Retrieves a list of notifications currently displayed in the Notification Center. It requires a callback function to receive the notification data.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.76/pushnotificationios.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
getDeliveredNotifications(callback: (notifications: Object[]) => void)

Provides a list of the app’s notifications that are currently displayed in Notification Center.

Parameters:
  callback (function, required): Function which receives an array of delivered notifications.

A delivered notification is an object containing:
  identifier (string): The identifier of this notification.
  title (string): The title of this notification.
  body (string): The body of this notification.
  category (string, optional): The category of this notification.
  userInfo (object, optional): An object containing additional notification data.
  thread-id (string): The thread identifier of this notification, if it has one.
```

----------------------------------------

TITLE: Example of Installing a Specific Version
DESCRIPTION: An example demonstrating how to install a specific version of the '@react-native-community/netinfo' library, using version 2.0.0.
SOURCE: https://github.com/facebook/react-native-website/blob/main/website/versioned_docs/version-0.75/libraries.md#_snippet_6

LANGUAGE: Shell
CODE:
```
npm install @react-native-community/netinfo@^2.0.0
```","facebook react",""