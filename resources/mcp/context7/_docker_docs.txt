"docker","TITLE: Clone Docker Docs Repository
DESCRIPTION: Clone your forked Docker documentation repository from GitHub and navigate into the newly created directory.
SOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#_snippet_0

LANGUAGE: console
CODE:
```
$ git clone https://github.com/<your-username>/docs
$ cd docs
```

----------------------------------------

TITLE: Configure Git Remotes for Docker Docs Fork
DESCRIPTION: Configure Git to synchronize your forked Docker documentation repository with the upstream `docker/docs` repository and prevent accidental pushes to the upstream source.
SOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#_snippet_1

LANGUAGE: console
CODE:
```
$ git remote add upstream https://github.com/docker/docs.git
$ git remote set-url --push upstream no_pushing
```

----------------------------------------

TITLE: Checkout a New Git Branch
DESCRIPTION: Create and switch to a new Git branch where you will make your documentation changes.
SOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#_snippet_2

LANGUAGE: console
CODE:
```
$ git checkout -b <branch>
```

----------------------------------------

TITLE: Start Local Docker Docs Development Server
DESCRIPTION: Start the local development server using Docker Compose. This command watches for file changes in your documentation and automatically rebuilds the site for live preview.
SOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker compose watch
```

----------------------------------------

TITLE: Stop Docker Compose Development Server
DESCRIPTION: After exiting the file watch mode (Ctrl+C), use this command to stop the Docker Compose service and shut down the local development server.
SOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker compose down
```

----------------------------------------

TITLE: Run Local Docker Docs Validation Tests
DESCRIPTION: Execute local tests to check for broken links, incorrectly formatted markup, and other issues before pushing your changes and opening a pull request.
SOURCE: https://github.com/docker/docs/blob/main/CONTRIBUTING.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker buildx bake validate
```

----------------------------------------

TITLE: Specify Docker Bake File Location Explicitly
DESCRIPTION: Demonstrates how to explicitly specify the path to a Docker Bake file using the `--file` flag with the `docker buildx bake` command, overriding the default lookup behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_0

LANGUAGE: console
CODE:
```
docker buildx bake --file ../docker/bake.hcl --print
```

----------------------------------------

TITLE: Docker Bake File Attribute Overriding Example
DESCRIPTION: Illustrates how specific attributes, such as `tags`, are overridden when multiple Bake files are merged. The value from the file processed last in the lookup order (e.g., `docker-bake.hcl` over `compose.yaml`) takes precedence.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    build:
      context: .
      tags:
        - bar
```

LANGUAGE: hcl
CODE:
```
target ""webapp"" {
  tags = [""foo""]
}
```

LANGUAGE: console
CODE:
```
docker buildx bake --print webapp
{
  ""group"": {
    ""default"": {
      ""targets"": [
        ""webapp""
      ]
    }
  },
  ""target"": {
    ""webapp"": {
      ""context"": ""."",
      ""dockerfile"": ""Dockerfile"",
      ""tags"": [
        ""foo""
      ]
    }
  }
}
```

----------------------------------------

TITLE: Docker Bake File Attribute Merging Example
DESCRIPTION: Demonstrates how attributes like `labels` are merged when multiple Bake files are combined. Unique entries from all files are included, while duplicate entries for the same key are overridden by the last occurrence.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_2

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    build:
      context: .
      labels: 
        com.example.foo: ""foo""
        com.example.name: ""Alice""
```

LANGUAGE: hcl
CODE:
```
target ""webapp"" {
  labels = {
    ""com.example.bar"" = ""bar""
    ""com.example.name"" = ""Bob""
  }
}
```

LANGUAGE: console
CODE:
```
docker buildx bake --print webapp
{
  ""group"": {
    ""default"": {
      ""targets"": [
        ""webapp""
      ]
    }
  },
  ""target"": {
    ""webapp"": {
      ""context"": ""."",
      ""dockerfile"": ""Dockerfile"",
      ""labels"": {
        ""com.example.foo"": ""foo"",
        ""com.example.bar"": ""bar"",
        ""com.example.name"": ""Bob""
      }
    }
  }
}
```

----------------------------------------

TITLE: Define Docker Bake File with Variable, Group, and Target in JSON
DESCRIPTION: Shows a basic Docker Bake file structure in JSON format, defining a variable, a default group, and a build target with a Dockerfile and tags. This illustrates the hierarchical block structure.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""variable"": {
    ""TAG"": {
      ""default"": ""latest""
    }
  },
  ""group"": {
    ""default"": {
      ""targets"": [""webapp""]
    }
  },
  ""target"": {
    ""webapp"": {
      ""dockerfile"": ""Dockerfile"",
      ""tags"": [""docker.io/username/webapp:${TAG}""]
    }
  }
}
```

----------------------------------------

TITLE: Define Docker Bake File with Variable, Group, and Target in HCL
DESCRIPTION: Presents the same basic Docker Bake file structure as the JSON example, but in the HashiCorp Configuration Language (HCL) format, which is the preferred and more feature-rich format for Bake files.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_4

LANGUAGE: hcl
CODE:
```
variable ""TAG"" {
  default = ""latest""
}

group ""default"" {
  targets = [""webapp""]
}

target ""webapp"" {
  dockerfile = ""Dockerfile""
  tags = [""docker.io/username/webapp:${TAG}""]
}
```

----------------------------------------

TITLE: Example Docker Build Command
DESCRIPTION: Illustrates a typical `docker build` command executed from the console, specifying a Dockerfile, an image tag, and a remote Git repository as the build context.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker build \
  --file=Dockerfile.webapp \
  --tag=docker.io/username/webapp:latest \
  https://github.com/username/webapp
```

----------------------------------------

TITLE: Define a Docker Bake Target for a Web Application
DESCRIPTION: Shows how to express a `docker build` command as a target block in a Bake HCL file. This example defines a 'webapp' target with its associated Dockerfile, image tags, and build context.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_6

LANGUAGE: hcl
CODE:
```
target ""webapp"" {
  dockerfile = ""Dockerfile.webapp""
  tags = [""docker.io/username/webapp:latest""]
  context = ""https://github.com/username/webapp""
}
```

----------------------------------------

TITLE: Docker Bake Target Attributes Reference
DESCRIPTION: A comprehensive reference for all configurable attributes within a `target` block in Docker Bake HCL files. Each attribute includes its data type and a brief description of its purpose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
target:
  attributes:
    args:
      type: Map
      description: Build arguments
    annotations:
      type: List
      description: Exporter annotations
    attest:
      type: List
      description: Build attestations
    cache-from:
      type: List
      description: External cache sources
    cache-to:
      type: List
      description: External cache destinations
    call:
      type: String
      description: Specify the frontend method to call for the target.
    context:
      type: String
      description: Set of files located in the specified path or URL
    contexts:
      type: Map
      description: Additional build contexts
    description:
      type: String
      description: Description of a target
    dockerfile-inline:
      type: String
      description: Inline Dockerfile string
    dockerfile:
      type: String
      description: Dockerfile location
    inherits:
      type: List
      description: Inherit attributes from other targets
    labels:
      type: Map
      description: Metadata for images
    matrix:
      type: Map
      description: Define a set of variables that forks a target into multiple targets.
    name:
      type: String
      description: Override the target name when using a matrix.
    no-cache-filter:
      type: List
      description: Disable build cache for specific stages
    no-cache:
      type: Boolean
      description: Disable build cache completely
    output:
      type: List
      description: Output destinations
    platforms:
      type: List
      description: Target platforms
    pull:
      type: Boolean
      description: Always pull images
    secret:
      type: List
      description: Secrets to expose to the build
    shm-size:
      type: List
      description: Size of `/dev/shm`
    ssh:
      type: List
      description: SSH agent sockets or keys to expose to the build
    tags:
      type: List
      description: Image names and tags
    target:
      type: String
      description: Target build stage
    ulimits:
      type: List
      description: Ulimit options
```

----------------------------------------

TITLE: Set Build Arguments in Docker Bake Target
DESCRIPTION: Demonstrates how to use the `args` attribute within a Bake target to define build arguments. This is equivalent to passing `--build-arg` to the `docker build` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_8

LANGUAGE: hcl
CODE:
```
target ""default"" {
  args = {
    VERSION = ""0.0.0+unknown""
  }
}
```

----------------------------------------

TITLE: Override Dockerfile ARG with Null in Bake Target
DESCRIPTION: Illustrates how to set `args` attributes to `null` in a Bake target. This configuration forces the build to use the `ARG` value specified directly within the Dockerfile, rather than overriding it.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_9

LANGUAGE: hcl
CODE:
```
variable ""GO_VERSION"" {
  default = ""1.20.3""
}

target ""webapp"" {
  dockerfile = ""webapp.Dockerfile""
  tags = [""docker.io/username/webapp""]
}

target ""db"" {
  args = {
    GO_VERSION = null
  }
  dockerfile = ""db.Dockerfile""
  tags = [""docker.io/username/db""]
}
```

----------------------------------------

TITLE: Add Annotations to Docker Bake Targets
DESCRIPTION: The `annotations` attribute allows adding OCI annotations to images built with bake. Annotations can be applied to image manifests or specified levels like the image index.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_10

LANGUAGE: hcl
CODE:
```
target ""default"" {
  output = [{ type = ""image"", name = ""foo"" }]
  annotations = [""org.opencontainers.image.authors=dvdksn""]
}
```

LANGUAGE: hcl
CODE:
```
target ""default"" {
  output = [
    {
      type = ""image""
      name = ""foo""
    }
  ]
  annotations = [""index,manifest:org.opencontainers.image.authors=dvdksn""]
}
```

----------------------------------------

TITLE: Apply Build Attestations to Docker Bake Targets
DESCRIPTION: The `attest` attribute enables applying build attestations, such as provenance and SBOM (Software Bill of Materials), to a target. It accepts a list of attestation types and modes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_11

LANGUAGE: hcl
CODE:
```
target ""default"" {
  attest = [
    {
      type = ""provenance""
      mode = ""max""
    },
    {
      type = ""sbom""
    }
  ]
}
```

----------------------------------------

TITLE: Specify Build Cache Sources for Docker Bake Targets
DESCRIPTION: The `cache-from` attribute defines sources from which the builder can import cache. It supports various Buildx cache storage backends like S3 and registry, and can take multiple cache sources.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_12

LANGUAGE: hcl
CODE:
```
target ""app"" {
  cache-from = [
    {
      type = ""s3""
      region = ""eu-west-1""
      bucket = ""mybucket""
    },
    {
      type = ""registry""
      ref = ""user/repo:cache""
    }
  ]
}
```

----------------------------------------

TITLE: Define Build Cache Export Destinations for Docker Bake Targets
DESCRIPTION: The `cache-to` attribute specifies destinations where the builder exports its build cache. It supports various Buildx cache storage backends, including S3 and inline, allowing multiple export targets.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_13

LANGUAGE: hcl
CODE:
```
target ""app"" {
  cache-to = [
    {
      type = ""s3""
      region = ""eu-west-1""
      bucket = ""mybucket""
    },
    {
      type = ""inline""
    }
  ]
}
```

----------------------------------------

TITLE: Execute Frontend Methods for Docker Bake Targets
DESCRIPTION: The `call` attribute specifies a frontend method to execute for a target, such as `check` for build checks or `outline` for displaying build arguments, instead of a full build. It defaults to `build`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_14

LANGUAGE: hcl
CODE:
```
target ""app"" {
  call = ""check""
}
```

----------------------------------------

TITLE: Supported Frontend Methods for `target.call`
DESCRIPTION: A list of supported values for the `target.call` attribute, detailing their purpose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
Supported values:
- `build`: builds the target (default)
- `check`: evaluates build checks for the target
- `outline`: displays the target's build arguments and their default values if available
- `targets`: lists all Bake targets in the loaded definition, along with its description
```

----------------------------------------

TITLE: Set Build Context Location for Docker Bake Targets
DESCRIPTION: The `context` attribute specifies the location of the build context for a target. It accepts a URL or a directory path and defaults to the current working directory (`.`).
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_16

LANGUAGE: hcl
CODE:
```
target ""app"" {
  context = ""./src/www""
}
```

LANGUAGE: console
CODE:
```
$ docker buildx bake --print -f - <<< 'target ""default"" {}'
[+] Building 0.0s (0/0)
{
  ""target"": {
    ""default"": {
      ""context"": ""."",
      ""dockerfile"": ""Dockerfile""
    }
  }
}
```

----------------------------------------

TITLE: Define Additional Build Contexts for Docker Bake Targets
DESCRIPTION: The `contexts` attribute allows specifying additional build contexts as a map, where keys become named contexts referenceable in builds. Bake automatically determines the context type (e.g., container image, Git URL, local directory).
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_17

LANGUAGE: hcl
CODE:
```
# docker-bake.hcl
target ""app"" {
  contexts = {
    alpine = ""docker-image://alpine:3.13""
  }
}
```

LANGUAGE: dockerfile
CODE:
```
# Dockerfile
FROM alpine
RUN echo ""Hello world""
```

LANGUAGE: hcl
CODE:
```
# docker-bake.hcl
target ""app"" {
  contexts = {
    src = ""../path/to/source""
  }
}
```

LANGUAGE: dockerfile
CODE:
```
# Dockerfile
FROM scratch AS src
FROM golang
COPY --from=src . .
```

----------------------------------------

TITLE: Supported Context Types for `target.contexts`
DESCRIPTION: A table outlining the various types of contexts supported by the `target.contexts` attribute and examples for each.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_18

LANGUAGE: APIDOC
CODE:
```
Context type    | Example
--------------- | -----------------------------------------
Container image | `docker-image://alpine@sha256:0123456789`
Git URL         | `https://github.com/user/proj.git`
HTTP URL        | `https://example.com/files`
Local directory | `../path/to/src`
Bake target     | `target:base`
```

----------------------------------------

TITLE: Docker Bake Multi-Stage Build with External Target Context
DESCRIPTION: Demonstrates how to configure Docker Bake to use one defined target as a build context for another, enabling multi-stage builds across separate Dockerfiles. This approach is an alternative to merging Dockerfiles when complex build dependencies exist or when modularity is preferred.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_19

LANGUAGE: hcl
CODE:
```
# docker-bake.hcl
target ""base"" {
  dockerfile = ""baseapp.Dockerfile""
}

target ""app"" {
  contexts = {
    baseapp = ""target:base""
  }
}
```

LANGUAGE: dockerfile
CODE:
```
# Dockerfile
FROM baseapp
RUN echo ""Hello world""
```

----------------------------------------

TITLE: Docker Bake Target Attribute: description
DESCRIPTION: Explains the `description` attribute for Docker Bake targets, allowing users to add a human-readable string to clarify its purpose or functionality. This description is displayed when listing targets with `docker buildx bake --list=targets`, improving clarity and discoverability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
target.description:
  Type: string
  Purpose: Defines a human-readable description for the target, clarifying its purpose or functionality.
  Usage: Useful when combined with `docker buildx bake --list=targets` for informative output.
```

LANGUAGE: hcl
CODE:
```
target ""lint"" {
  description = ""Runs golangci-lint to detect style errors""
  args = {
    GOLANGCI_LINT_VERSION = null
  }
  dockerfile = ""lint.Dockerfile""
}
```

----------------------------------------

TITLE: Docker Bake Target Attribute: dockerfile-inline
DESCRIPTION: Specifies the `dockerfile-inline` attribute, which allows embedding the Dockerfile content directly within the Bake file as a string. This attribute takes precedence over the `dockerfile` attribute if both are defined for the same target.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_21

LANGUAGE: APIDOC
CODE:
```
target.dockerfile-inline:
  Type: string
  Purpose: Uses the string value as an inline Dockerfile for the build target.
  Precedence: Takes precedence over the `dockerfile` attribute.
```

LANGUAGE: hcl
CODE:
```
target ""default"" {
  dockerfile-inline = ""FROM alpine\nENTRYPOINT [\""echo\"", \""hello\""]""
}
```

----------------------------------------

TITLE: Docker Bake Target Attribute: dockerfile
DESCRIPTION: Defines the `dockerfile` attribute, specifying the path to the Dockerfile to be used for the build target. This attribute is analogous to the `--file` flag in the `docker build` command and defaults to 'Dockerfile' if not explicitly specified.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_22

LANGUAGE: APIDOC
CODE:
```
target.dockerfile:
  Type: string
  Purpose: Name of the Dockerfile to use for the build.
  Default: ""Dockerfile""
  Note: Same as the `--file` flag for `docker build`.
```

LANGUAGE: hcl
CODE:
```
target ""default"" {
  dockerfile = ""./src/www/Dockerfile""
}
```

LANGUAGE: console
CODE:
```
$ docker buildx bake --print -f - <<< 'target ""default"" {}'
[+] Building 0.0s (0/0)
{
  ""target"": {
    ""default"": {
      ""context"": ""."",
      ""dockerfile"": ""Dockerfile""
    }
  }
}
```

----------------------------------------

TITLE: Docker Bake Target Attribute: entitlements
DESCRIPTION: Specifies the `entitlements` attribute, which declares special permissions required by the build process. Supported entitlements include `network.host` for host network access and `security.insecure` for running commands in privileged containers. Entitlements require explicit user confirmation during `bake` command invocation for security reasons.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
target.entitlements:
  Type: array of strings
  Purpose: Permissions that the build process requires to run.
  Supported Entitlements:
    - network.host: Allows the build to use commands that access the host network (e.g., `RUN --network=host`).
    - security.insecure: Allows the build to run commands in privileged containers not limited by the default security sandbox (e.g., `RUN --security=insecure`).
  Activation: Requires two steps: declaration in target and user grant via `--allow` flag or interactive prompt.
```

LANGUAGE: hcl
CODE:
```
target ""integration-tests"" {
  # this target requires privileged containers to run nested containers
  entitlements = [""security.insecure""]
}
```

----------------------------------------

TITLE: Define Basic Docker Bake Target Inheritance with `inherits`
DESCRIPTION: Demonstrates how to use the `inherits` attribute to reuse configuration from one Docker Bake target in another. The `app-release` target inherits the image name and tag defined in `app-dev`, promoting configuration reuse.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_24

LANGUAGE: hcl
CODE:
```
variable ""TAG"" {
  default = ""latest""
}

target ""app-dev"" {
  tags = [""docker.io/username/myapp:${TAG}""]
}

target ""app-release"" {
  inherits = [""app-dev""]
  platforms = [""linux/amd64"", ""linux/arm64""]
}
```

----------------------------------------

TITLE: Inherit Attributes from Multiple Docker Bake Targets
DESCRIPTION: Illustrates how a Docker Bake target can inherit attributes from multiple other targets by listing them in the `inherits` array. It also shows how conflicts are resolved: attributes from targets appearing later in the `inherits` list take precedence.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_25

LANGUAGE: hcl
CODE:
```
target ""app-dev"" {
  args = {
    GO_VERSION = ""1.20""
    BUILDX_EXPERIMENTAL = 1
  }
  tags = [""docker.io/username/myapp""]
  dockerfile = ""app.Dockerfile""
  labels = {
    ""org.opencontainers.image.source"" = ""https://github.com/username/myapp""
  }
}

target ""_release"" {
  args = {
    BUILDKIT_CONTEXT_KEEP_GIT_DIR = 1
    BUILDX_EXPERIMENTAL = 0
  }
}

target ""app-release"" {
  inherits = [""app-dev"", ""_release""]
  platforms = [""linux/amd64"", ""linux/arm64""]
}
```

----------------------------------------

TITLE: Verify Docker Bake Target Inheritance Conflict Resolution
DESCRIPTION: Shows the console output of `docker buildx bake --print` for a target inheriting from multiple sources. This output confirms that when attributes conflict, the value from the target listed last in the `inherits` array (e.g., `_release` for `BUILDX_EXPERIMENTAL`) is applied.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_26

LANGUAGE: console
CODE:
```
$ docker buildx bake --print app-release
[+] Building 0.0s (0/0)
{
  ""group"": {
    ""default"": {
      ""targets"": [
        ""app-release""
      ]
    }
  },
  ""target"": {
    ""app-release"": {
      ""context"": ""."",
      ""dockerfile"": ""app.Dockerfile"",
      ""args"": {
        ""BUILDKIT_CONTEXT_KEEP_GIT_DIR"": ""1"",
        ""BUILDX_EXPERIMENTAL"": ""0"",
        ""GO_VERSION"": ""1.20""
      },
      ""labels"": {
        ""org.opencontainers.image.source"": ""https://github.com/username/myapp""
      },
      ""tags"": [
        ""docker.io/username/myapp""
      ],
      ""platforms"": [
        ""linux/amd64"",
        ""linux/arm64""
      ]
    }
  }
}
```

----------------------------------------

TITLE: Assign Image Labels to Docker Bake Target
DESCRIPTION: Illustrates how to use the `labels` attribute within a Docker Bake target to assign metadata to the built image. This functions similarly to the `--label` flag in `docker build` and supports using `null` values to defer to labels defined in the Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_27

LANGUAGE: hcl
CODE:
```
target ""default"" {
  labels = {
    ""org.opencontainers.image.source"" = ""https://github.com/username/myapp""
    ""com.docker.image.source.entrypoint"" = ""Dockerfile""
  }
}
```

----------------------------------------

TITLE: Implement Basic Matrix Strategy in Docker Bake
DESCRIPTION: Explains the `matrix` attribute for creating multiple build variants from a single target, similar to GitHub Actions. This example defines a matrix for `tgt` values and uses the `name` attribute to generate unique target names like `app-foo` and `app-bar`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_28

LANGUAGE: hcl
CODE:
```
target ""app"" {
  name = ""app-${tgt}""
  matrix = {
    tgt = [""foo"", ""bar""]
  }
  target = tgt
}
```

----------------------------------------

TITLE: Verify Docker Bake Matrix Strategy Output
DESCRIPTION: Shows the `docker buildx bake --print` output for a target configured with a basic matrix strategy. The output confirms that the single `app` target is expanded into multiple distinct targets (`app-foo`, `app-bar`) as defined by the matrix.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_29

LANGUAGE: console
CODE:
```
$ docker buildx bake --print app
[+] Building 0.0s (0/0)
{
  ""group"": {
    ""app"": {
      ""targets"": [
        ""app-foo"",
        ""app-bar""
      ]
    },
    ""default"": {
      ""targets"": [
        ""app""
      ]
    }
  },
  ""target"": {
    ""app-bar"": {
      ""context"": ""."",
      ""dockerfile"": ""Dockerfile"",
      ""target"": ""bar""
    },
    ""app-foo"": {
      ""context"": ""."",
      ""dockerfile"": ""Dockerfile"",
      ""target"": ""foo""
    }
  }
}
```

----------------------------------------

TITLE: Define Docker Bake Matrix with Multiple Axes
DESCRIPTION: Demonstrates how to use multiple keys within the `matrix` attribute to create build variants across several dimensions. Bake generates a target for every possible combination of the specified matrix values, reducing definition duplication.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_30

LANGUAGE: hcl
CODE:
```
target ""app"" {
  name = ""app-${tgt}-${replace(version, ""."", ""-"")}""
  matrix = {
    tgt = [""foo"", ""bar""]
    version = [""1.0"", ""2.0""]
  }
  target = tgt
  args = {
    VERSION = version
  }
}
```

----------------------------------------

TITLE: Use Maps for Multiple Values per Docker Bake Matrix Target
DESCRIPTION: Explains how to use maps as values within a matrix to group multiple related parameters for each generated target. This allows for more complex matrix definitions where each variant is defined by a set of values, accessible via dot notation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_31

LANGUAGE: hcl
CODE:
```
target ""app"" {
  name = ""app-${item.tgt}-${replace(item.version, ""."", ""-"")}""
  matrix = {
    item = [
      {
        tgt = ""foo""
        version = ""1.0""
      },
      {
        tgt = ""bar""
        version = ""2.0""
      }
    ]
  }
  target = item.tgt
  args = {
    VERSION = item.version
  }
}
```

----------------------------------------

TITLE: Configure Target Name Resolution with Matrix Strategy (HCL)
DESCRIPTION: Demonstrates how to use `target.name` in conjunction with a matrix strategy to dynamically resolve and generate multiple target names from a single definition, useful for creating variations of an application.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_32

LANGUAGE: hcl
CODE:
```
target ""app"" {
  name = ""app-${tgt}""
  matrix = {
    tgt = [""foo"", ""bar""]
  }
  target = tgt
}
```

----------------------------------------

TITLE: Set Global Network Mode for Docker Build (HCL)
DESCRIPTION: Explains how to set the network mode for the entire build request using `target.network`. It covers accepted values (`default`, `host`, `none`) and highlights security considerations for `host` mode, recommending per-step network configuration within Dockerfiles for better control.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_33

LANGUAGE: hcl
CODE:
```
target ""app"" {
  # make sure this build does not access internet
  network = ""none""
}
```

----------------------------------------

TITLE: Exclude Specific Build Stages from Cache (HCL)
DESCRIPTION: Shows how to prevent the build cache from being used for specified build stages using `target.no-cache-filter`. This attribute functions similarly to the `--no-cache-filter` flag available in the `docker build` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_34

LANGUAGE: hcl
CODE:
```
target ""default"" {
  no-cache-filter = [""foo""]
}
```

----------------------------------------

TITLE: Disable Build Cache for Docker Image (HCL)
DESCRIPTION: Illustrates how to completely disable the build cache when building an image using `target.no-cache`. This setting mirrors the functionality of the `--no-cache` flag used with the `docker build` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_35

LANGUAGE: hcl
CODE:
```
target ""default"" {
  no-cache = 1
}
```

----------------------------------------

TITLE: Configure Build Output Export (HCL)
DESCRIPTION: Details how to configure the export behavior of the build output using `target.output`. This attribute is analogous to the `--output` flag in `docker build`, with an example demonstrating a cache-only output configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_36

LANGUAGE: hcl
CODE:
```
target ""default"" {
  output = [{ type = ""cacheonly"" }]
}
```

----------------------------------------

TITLE: Set Target Platforms for Multi-Architecture Builds (HCL)
DESCRIPTION: Explains how to specify the target platforms for a build using `target.platforms`. This attribute is equivalent to the `--platform` flag and provides an example for creating a multi-platform build targeting three different architectures.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_37

LANGUAGE: hcl
CODE:
```
target ""default"" {
  platforms = [""linux/amd64"", ""linux/arm64"", ""linux/arm/v7""]
}
```

----------------------------------------

TITLE: Force Image Pull for Build Target (HCL)
DESCRIPTION: Describes how to configure the builder to always attempt to pull all images referenced in the build target using `target.pull`. This functionality is the same as the `--pull` flag used with `docker build`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_38

LANGUAGE: hcl
CODE:
```
target ""default"" {
  pull = true
}
```

----------------------------------------

TITLE: Define and Mount Secrets in Docker Builds (HCL & Dockerfile)
DESCRIPTION: Shows how to define secrets using `target.secret` in HCL, which is analogous to the `--secret` flag. It then demonstrates how to securely mount these defined secrets within a Dockerfile for sensitive operations, such as accessing credentials or environment variables.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_39

LANGUAGE: hcl
CODE:
```
variable ""HOME"" {
  default = null
}

target ""default"" {
  secret = [
    {
      type = ""env""
      id = ""KUBECONFIG""
    },
    {
      type = ""file""
      id = ""aws""
      src = ""${HOME}/.aws/credentials""
    }
  ]
}
```

LANGUAGE: dockerfile
CODE:
```
RUN --mount=type=secret,id=aws,target=/root/.aws/credentials \
    aws cloudfront create-invalidation ...
RUN --mount=type=secret,id=KUBECONFIG,env=KUBECONFIG \
    helm upgrade --install
```

----------------------------------------

TITLE: Set Shared Memory Size for Build Containers (HCL)
DESCRIPTION: Explains how to set the size of shared memory allocated for build containers when executing `RUN` instructions using `target.shm-size`. It specifies the accepted format for units and notes that this is equivalent to the `--shm-size` flag in `docker build`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_40

LANGUAGE: hcl
CODE:
```
target ""default"" {
  shm-size = ""128m""
}
```

----------------------------------------

TITLE: Expose SSH Agent Sockets/Keys to Docker Build (HCL & Dockerfile)
DESCRIPTION: Illustrates how to expose SSH agent sockets or keys to the build process using `target.ssh` in HCL, which is similar to the `--ssh` flag. It also provides a Dockerfile example demonstrating how to utilize this exposed SSH access for operations like cloning private repositories during a build.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_41

LANGUAGE: hcl
CODE:
```
target ""default"" {
  ssh = [{ id = ""default"" }]
}
```

LANGUAGE: dockerfile
CODE:
```
FROM alpine
RUN --mount=type=ssh \
    apk add git openssh-client \
    && install -m 0700 -d ~/.ssh \
    && ssh-keyscan github.com >> ~/.ssh/known_hosts \
    && git clone git@github.com:user/my-private-repo.git
```

----------------------------------------

TITLE: Specify Image Names and Tags for Build Target (HCL)
DESCRIPTION: Shows how to define the image names and tags to be applied to the build target using `target.tags`. This attribute provides the same functionality as the `--tag` flag in the `docker build` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_42

LANGUAGE: hcl
CODE:
```
target ""default"" {
  tags = [
    ""org/repo:latest"",
    ""myregistry.azurecr.io/team/image:v1""
  ]
}
```

----------------------------------------

TITLE: Set Target Build Stage (HCL)
DESCRIPTION: Explains how to set a specific build stage within a Dockerfile to be the target for the build process using `target.target`. This attribute functions identically to the `--target` flag in `docker build`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_43

LANGUAGE: hcl
CODE:
```
target ""default"" {
  target = ""binaries""
}
```

----------------------------------------

TITLE: Define Ulimits for Docker Build Targets in HCL
DESCRIPTION: This HCL snippet demonstrates how to set resource limits (ulimits) for a build target within a Docker Bake file. It specifies a 'nofile' ulimit with both soft and hard limits. If a hard limit is not provided, the soft limit is used for both values.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_44

LANGUAGE: hcl
CODE:
```
target ""app"" {
  ulimits = [
    ""nofile=1024:1024""
  ]
}
```

----------------------------------------

TITLE: Group Multiple Docker Build Targets in HCL
DESCRIPTION: This HCL example shows how to define a 'group' in a Docker Bake file to invoke multiple build targets ('db', 'webapp-dev') simultaneously. It also includes the definitions for the individual targets, illustrating a common pattern for orchestrating related builds.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_45

LANGUAGE: hcl
CODE:
```
group ""default"" {
  targets = [""db"", ""webapp-dev""]
}

target ""webapp-dev"" {
  dockerfile = ""Dockerfile.webapp""
  tags = [""docker.io/username/webapp:latest""]
}

target ""db"" {
  dockerfile = ""Dockerfile.db""
  tags = [""docker.io/username/db""]
}
```

----------------------------------------

TITLE: Illustrate Group Precedence Over Targets in HCL
DESCRIPTION: This HCL snippet demonstrates how a 'group' definition takes precedence over a 'target' with the same name. When the 'default' group is invoked, its specified targets ('alpine', 'debian') are built, effectively ignoring the 'default' target defined separately.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_46

LANGUAGE: hcl
CODE:
```
target ""default"" {
  dockerfile-inline = ""FROM ubuntu""
}

group ""default"" {
  targets = [""alpine"", ""debian""]
}
target ""alpine"" {
  dockerfile-inline = ""FROM alpine""
}
target ""debian"" {
  dockerfile-inline = ""FROM debian""
}
```

----------------------------------------

TITLE: Define String Variable with Default in HCL
DESCRIPTION: This HCL example shows how to define a string variable 'TAG' with a default value of 'latest' in a Bake file. It also demonstrates how this variable can be interpolated into a target's 'tags' attribute, allowing for dynamic image tagging.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_47

LANGUAGE: hcl
CODE:
```
variable ""TAG"" {
  type = string
  default = ""latest""
}

target ""webapp-dev"" {
  dockerfile = ""Dockerfile.webapp""
  tags = [""docker.io/username/webapp:${TAG}""]
}
```

----------------------------------------

TITLE: Override HCL Variable via Environment Variable
DESCRIPTION: This console command demonstrates how to override a variable's default value defined in a Bake file using an environment variable. The 'TAG' variable is set to 'dev' before executing 'docker buildx bake', allowing for runtime configuration changes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_48

LANGUAGE: console
CODE:
```
$ TAG=dev docker buildx bake webapp-dev
```

----------------------------------------

TITLE: Define List Variable and Iterate in HCL
DESCRIPTION: This HCL example shows how to define a variable 'TAGS' of type `list(string)` with a default value. It also demonstrates how to iterate over this list using a `for` loop to generate multiple Docker image tags for a target, providing flexibility in tagging strategies.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_49

LANGUAGE: hcl
CODE:
```
variable ""TAGS"" {
  default = [""latest""]
  type = list(string)
}

target ""webapp-dev"" {
  dockerfile = ""Dockerfile.webapp""
  tags = [for tag in TAGS: ""docker.io/username/webapp:${tag}""]
}
```

----------------------------------------

TITLE: Override HCL List Variable via Environment Variable
DESCRIPTION: This console command demonstrates how to override a list variable's default value defined in a Bake file using a comma-separated string in an environment variable. This allows generating multiple tags dynamically without modifying the HCL file.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_50

LANGUAGE: console
CODE:
```
$ TAGS=dev,latest,2 docker buildx bake webapp-dev
```

----------------------------------------

TITLE: Define Variables with Primitive Types in HCL
DESCRIPTION: This HCL snippet demonstrates the correct way to define a variable with a primitive type (e.g., `string`). It also shows incorrect attempts where the type is specified as a string literal or an expression, highlighting that type keywords must be used as literals.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_51

LANGUAGE: hcl
CODE:
```
variable ""OK"" {
  type = string
}

# cannot be an actual string
variable ""BAD"" {
  type = ""string""
}

# cannot be the result of an expression
variable ""ALSO_BAD"" {
  type = lower(""string"")
}
```

----------------------------------------

TITLE: Define Variables with Complex Types and Defaults in HCL
DESCRIPTION: This HCL snippet provides examples of defining variables with various complex types: `tuple`, `list`, `set`, `map`, and `object`. Each example includes an optional default value, demonstrating the correct structure for initializing variables of these types.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_52

LANGUAGE: hcl
CODE:
```
variable ""MY_VERSION"" {
  type = tuple([number, number, number, string])
  default = [1, 2, 3, ""alpha""]
}

# JDK versions used in a matrix build
variable ""JDK_VERSIONS"" {
  type = list(number)
  default = [11, 17, 21]
}

# better way to express the previous example; this will also
# enforce set semantics and allow use of set-based functions
variable ""JDK_VERSIONS"" {
  type = set(number)
  default = [11, 17, 21]
}

# with the help of lookup(), translate a 'feature' to a tag
variable ""FEATURE_TO_NAME"" {
  type = map(string)
  default = {featureA = ""slim"", featureB = ""tiny""}
}

# map a branch name to a registry location
variable ""PUSH_DESTINATION"" {
  type = object({branch = string, registry = string})
  default = {branch = ""main"", registry = ""prod-registry.invalid.com""}
}
```

----------------------------------------

TITLE: Define HCL Variable with Complex List of Objects Type
DESCRIPTION: This HCL snippet defines a variable named `PUSH_DESTINATIONS` with an explicit type of a list of objects. Each object in the list is structured with `branch` and `registry` string properties. It also provides a default value demonstrating the expected structure for this complex type, enabling type-specific functions and overrides.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_53

LANGUAGE: hcl
CODE:
```
variable ""PUSH_DESTINATIONS"" {
  type = list(object({branch = string, registry = string}))
  default = [
    {branch = ""develop"", registry = ""test-registry.invalid.com""},
    {branch = ""main"", registry = ""prod-registry.invalid.com""},
  ]
}
```

----------------------------------------

TITLE: Define HCL Variable with List of Strings Type
DESCRIPTION: This HCL snippet defines a variable named `VALS` with an explicit type of a list of strings. It includes a default value, illustrating a simple list structure. This variable is later used to demonstrate JSON and CSV override mechanisms, showcasing how explicit typing facilitates advanced override capabilities.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_54

LANGUAGE: hcl
CODE:
```
variable ""VALS"" {
  type = list(string)
  default = [""some"", ""list""]
}
```

----------------------------------------

TITLE: Override HCL List Variable with JSON and CSV
DESCRIPTION: These console commands demonstrate two methods for overriding an HCL list variable (`VALS`). The first uses a JSON file (`data.json`) and the `_JSON` suffix for the environment variable, suitable for values with special characters or complex structures. The second shows a CSV override, highlighting its limitations with certain characters like commas or quotes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_55

LANGUAGE: console
CODE:
```
$ cat data.json
[""hello"",""with,comma"",""with\""quote""]
$ VALS_JSON=$(< data.json) docker buildx bake
```

LANGUAGE: console
CODE:
```
$ VALS='hello,""with""""quote""' docker buildx bake
```

----------------------------------------

TITLE: Define HCL String Variables for Override Precedence Demo
DESCRIPTION: This HCL snippet defines two string variables, `FOO` and `FOO_JSON`, both with default values. These variables are specifically designed to illustrate the precedence rules and naming conventions for environment variable overrides, particularly when a variable name conflicts with the `_JSON` suffix convention used for JSON overrides.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_56

LANGUAGE: hcl
CODE:
```
variable ""FOO"" {
  type = string
  default = ""foo""
}

variable ""FOO_JSON"" {
  type = string
  default = ""foo""
}
```

----------------------------------------

TITLE: Demonstrate HCL Variable Override Precedence and JSON/CSV Usage
DESCRIPTION: This extensive set of console commands illustrates various scenarios for overriding HCL variables using environment variables. It covers simple CSV overrides, the effect of the `_JSON` suffix on variable names, JSON overrides using `_JSON_JSON` for variables that already end in `_JSON`, and complex precedence rules when multiple override methods are attempted for the same variable.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_57

LANGUAGE: console
CODE:
```
# These three are all equivalent, setting variable FOO=bar
$ FOO=bar docker buildx bake <...>
$ FOO='bar' docker buildx bake <...>
$ FOO=""bar"" docker buildx bake <...>

# Sets *only* variable FOO_JSON; FOO is untouched
$ FOO_JSON=bar docker buildx bake <...>

# This also sets FOO_JSON, but will fail due to not being valid JSON
$ FOO_JSON_JSON=bar docker buildx bake <...>

# These are all equivalent
$ cat data.json
""bar""
$ FOO_JSON_JSON=$(< data.json) docker buildx bake <...>
$ FOO_JSON_JSON='""bar""' docker buildx bake <...>
$ FOO_JSON=bar docker buildx bake <...>

# This results in setting two different variables, both specified as CSV (FOO=bar and FOO_JSON=""baz"")
$ FOO=bar FOO_JSON='""baz""' docker buildx bake <...>

# These refer to the same variable with FOO_JSON_JSON having precedence and read as JSON (FOO_JSON=baz)
$ FOO_JSON=bar FOO_JSON_JSON='""baz""' docker buildx bake <...>
```

----------------------------------------

TITLE: Built-in Docker Bake Variables Reference
DESCRIPTION: Reference for built-in variables available in Docker Bake HCL files, which can be used without explicit definition. These variables provide access to contextual information during the build process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_58

LANGUAGE: APIDOC
CODE:
```
BAKE_CMD_CONTEXT:
  description: Holds the main context when building using a remote Bake file.
BAKE_LOCAL_PLATFORM:
  description: Returns the current platform’s default platform specification (e.g. linux/amd64).
```

----------------------------------------

TITLE: Declare HCL Variable with Environment Default
DESCRIPTION: Demonstrates how to declare a variable in HCL that uses an environment variable's value as its default. This allows Bake configurations to dynamically adapt based on the shell environment where the build is executed.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_59

LANGUAGE: HCL
CODE:
```
variable ""HOME"" {
  default = ""$HOME""
}
```

----------------------------------------

TITLE: Incorrect HCL Variable Interpolation Example
DESCRIPTION: Illustrates an incorrect attempt to interpolate a variable into an attribute string in HCL. Direct string concatenation using '$VAR' syntax does not work for HCL variables within attribute values, leading to literal interpretation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_60

LANGUAGE: HCL
CODE:
```
variable ""HOME"" {
  default = ""$HOME""
}

target ""default"" {
  ssh = [""default=$HOME/.ssh/id_rsa""]
}
```

----------------------------------------

TITLE: Correct HCL Variable Interpolation using Curly Brackets
DESCRIPTION: Shows the correct method for interpolating a variable into an attribute string value in HCL by wrapping the variable name in curly brackets. This ensures the variable's value is properly substituted at runtime.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_61

LANGUAGE: diff
CODE:
```
  variable ""HOME"" {
    default = ""$HOME""
  }

  target ""default"" {
-   ssh = [""default=$HOME/.ssh/id_rsa""]
+   ssh = [""default=${HOME}/.ssh/id_rsa""]
  }
```

----------------------------------------

TITLE: Demonstrate HCL Variable Declaration and Build with Docker Bake
DESCRIPTION: A console example demonstrating the necessity of declaring variables in a Bake file before they can be interpolated. It shows an initial build failure due to an undeclared variable, followed by the successful build after the variable is defined in the HCL file.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_62

LANGUAGE: console
CODE:
```
$ cat docker-bake.hcl
target ""default"" {
  dockerfile-inline = ""FROM ${BASE_IMAGE}""
}
$ docker buildx bake
[+] Building 0.0s (0/0)
docker-bake.hcl:2
--------------------
   1 |     target ""default"" {
   2 | >>>   dockerfile-inline = ""FROM ${BASE_IMAGE}""
   3 |     }
   4 |
--------------------
ERROR: docker-bake.hcl:2,31-41: Unknown variable; There is no variable named ""BASE_IMAGE""., and 1 other diagnostic(s)
$ cat >> docker-bake.hcl

variable ""BASE_IMAGE"" {
  default = ""alpine""
}

$ docker buildx bake
[+] Building 0.6s (5/5) FINISHED
```

----------------------------------------

TITLE: Use Standard Library Functions in Docker Bake HCL
DESCRIPTION: Example demonstrating how to use a general-purpose standard library function, such as 'add', within a Docker Bake HCL file. These functions are interpolated into attribute values using curly brackets, similar to variables.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_63

LANGUAGE: HCL
CODE:
```
# docker-bake.hcl
target ""webapp-dev"" {
  dockerfile = ""Dockerfile.webapp""
  tags = [""docker.io/username/webapp:latest""]
  args = {
    buildno = ""${add(123, 1)}""
  }
}
```

----------------------------------------

TITLE: Define and Use User-Defined Functions in Docker Bake HCL
DESCRIPTION: Illustrates how to define a custom function in a Docker Bake HCL file using the 'function' block, specifying parameters and the return logic. The defined function can then be called and interpolated into attribute values, enabling reusable logic.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/buildx/docs/bake-reference.md#_snippet_64

LANGUAGE: HCL
CODE:
```
# docker-bake.hcl
function ""increment"" {
  params = [number]
  result = number + 1
}

target ""webapp-dev"" {
  dockerfile = ""Dockerfile.webapp""
  tags = [""docker.io/username/webapp:latest""]
  args = {
    buildno = ""${increment(123)}""
  }
}
```

----------------------------------------

TITLE: API Change: Omission of Empty/Nil Fields in Docker Image Inspect Config
DESCRIPTION: This section details a breaking change in the Docker API where the `Config` field returned by `GET /images/{name}/json` (and `docker image inspect`) will omit specific fields if they are empty or nil, starting from Docker v29.0. Consumers of the API should update their applications to handle the absence of these fields gracefully.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
GET /images/{name}/json API Response Change:

Deprecated in Release: v28.3
Target For Removal In Release: v29.0

Description:
The 'Config' field within the response for 'GET /images/{name}/json' (and 'docker image inspect') will no longer include certain fields when they are empty or nil, starting from Docker v29.0.

Affected Fields (omitted when empty/nil):
- Cmd (string array)
- Entrypoint (string array)
- Env (string array)
- Labels (object)
- OnBuild (string array)
- User (string)
- Volumes (object)
- WorkingDir (string)

Behavior:
- For API version corresponding to Docker v29.0 and later, these fields will be omitted when empty.
- For clients requesting older API versions, these fields will continue to be included for backward compatibility.

Consumer Action:
Applications consuming this API should be updated to handle the absence of these fields gracefully, treating missing fields as having their default/empty values.
```

----------------------------------------

TITLE: Deprecation of Docker Non-Distributable Artifacts Configuration and API Fields
DESCRIPTION: The `--allow-nondistributable-artifacts` daemon flag and its `daemon.json` equivalent, along with `AllowNondistributableArtifactsCIDRs` and `AllowNondistributableArtifactsHostnames` fields in the `GET /info` API response, are deprecated. This functionality is obsolete due to updated EULAs and OCI specifications. Users should remove these configurations to avoid issues in future Docker versions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Daemon Configuration:
  - Flag: --allow-nondistributable-artifacts (deprecated in v28.0, target for removal in v29.0)
  - daemon.json field: allow-nondistributable-artifacts (deprecated in v28.0, target for removal in v29.0)

GET /info API Response (RegistryConfig):
  - Field: AllowNondistributableArtifactsCIDRs (deprecated in v28.0, null in v1.48-, omitted in v1.49+)
  - Field: AllowNondistributableArtifactsHostnames (deprecated in v28.0, null in v1.48-, omitted in v1.49+)
```

----------------------------------------

TITLE: Migrate Docker Stop/Restart from `--time` to `--timeout` Option
DESCRIPTION: The `--time` option for `docker stop`, `docker container stop`, `docker restart`, and `docker container restart` commands has been deprecated. It is replaced by `--timeout` for improved consistency. While `--time` remains functional for backward compatibility, users are strongly encouraged to update their scripts to use `--timeout`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_2

LANGUAGE: Shell
CODE:
```
# Deprecated usage example
docker stop --time 10 my_container
docker container restart --time 5 another_container

# Recommended usage example
docker stop --timeout 10 my_container
docker container restart --timeout 5 another_container
```

----------------------------------------

TITLE: Removal of Non-Standard Fields from Docker Image Inspect API Response
DESCRIPTION: Docker has removed several non-standard fields from the `Config` section of the `docker image inspect` output and the `GET /images/{name}/json` API endpoint for API version v1.50 and newer. These fields, including `Hostname`, `Domainname`, and `AttachStdin`, were not part of the official Docker or OCI image specifications and were never intended to be part of the image configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
GET /images/{name}/json API Response (Config field):
  Removed fields (for API v1.50 and newer, corresponding with Docker v28.2+):
    - Hostname
    - Domainname
    - AttachStdin
    - AttachStdout
    - AttachStderr
    - Tty
    - OpenStdin
    - StdinOnce
    - Image
    - NetworkDisabled (omitted unless set on older API versions)
    - MacAddress (omitted unless set on older API versions)
    - StopTimeout (omitted unless set on older API versions)
```

----------------------------------------

TITLE: Docker Daemon API CORS Header Deprecation
DESCRIPTION: Details the deprecation and removal of the `api-cors-header` configuration option for the Docker daemon, highlighting security concerns and its behavior across Docker Engine versions. It also provides recommendations for alternative approaches.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Configuration Option: `api-cors-header`
  Status: Deprecated (v27.0), Disabled by default (v27.0), Removed (v28.0)
  Description: This option is insecure and deprecated. Incorrectly setting it could allow unauthenticated cross-origin requests to the daemon.
  Behavior in v27.0: Can be set, but has no effect unless the environment variable `DOCKERD_DEPRECATED_CORS_HEADER` is also set to a non-empty value.
  Behavior in v28.0: Completely removed.
  Impact: Breaking change for authorization plugins and other programs that depend on this option for accessing the Docker API from a browser.
  Recommendation: Use a reverse proxy if browser access to the API is required.
```

----------------------------------------

TITLE: Docker Daemon Mandatory TLS for TCP Connections
DESCRIPTION: Explains the requirement for mandatory TLS verification for Docker daemon TCP connections, aiming to enhance security by preventing unauthorized access. It covers the implications of CLI flags and `daemon.json` options, and suggests secure alternatives.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Configuration: Docker Daemon TCP Connections
  Status: Mandatory TLS verification (v26.0), Target for Removal (v28.0)
  Description: Configuring the Docker daemon to listen on a TCP address will require mandatory TLS verification to ensure secure communication, except for `tcp://localhost`.
  Behavior in v27.0+: Specifying `--tls=false` or `--tlsverify=false` CLI flags (or equivalent `daemon.json` options) will cause the daemon to fail to start if it's configured for remote TCP connections.
  Recommendation for Remote Access: Implement TLS verification for secure connections (encryption, mutual authentication).
  Recommendation for No Remote Access: Bind the Docker daemon to a Unix socket.
  Alternative (if TLS not feasible): Consider using SSH for remote access.
  Reference: Protect the Docker daemon socket (https://docs.docker.com/engine/security/protect-access/)
```

----------------------------------------

TITLE: Docker Image Inspect Fields Deprecation: Container and ContainerConfig
DESCRIPTION: Documents the deprecation and removal of `Container` and `ContainerConfig` fields from `docker inspect` output. It explains their irrelevance with the BuildKit-based builder and suggests using the `Config` field as an alternative for image configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
API Fields: `Container`, `ContainerConfig` in `docker inspect`
  Status: Deprecated (v25.0), Removed (v26.0, API v1.45 and up)
  Description: These fields are mostly implementation details of the classic (non-BuildKit) image builder. They are not portable and are empty when using the BuildKit-based builder (enabled by default since v23.0).
  Replacement: Obtain image configuration from the `Config` field.
```

----------------------------------------

TITLE: Demonstrating Docker CLI Error with Deprecated API Version
DESCRIPTION: This example illustrates the Docker CLI's behavior when attempting to connect to a Docker daemon using an API version older than the minimum supported version (1.24). It shows the specific error message returned by the daemon, indicating that the client version is too old and requires an upgrade to proceed.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_7

LANGUAGE: console
CODE:
```
DOCKER_API_VERSION=1.23 docker version
Error response from daemon: client version 1.23 is too old. Minimum supported API version is 1.24,
upgrade your client to a newer version
```

----------------------------------------

TITLE: Legacy Builder Deprecation Warning Output
DESCRIPTION: This code snippet shows the deprecation warning message displayed when the Docker CLI automatically falls back to the classic builder. This occurs if BuildKit is not explicitly opted-in and the Buildx component is unavailable. It advises users to install Buildx for future compatibility.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_8

LANGUAGE: text
CODE:
```
DEPRECATED: The legacy builder is deprecated and will be removed in a future release.
            Install the buildx component to build images with BuildKit:
            https://docs.docker.com/go/buildx/
```

----------------------------------------

TITLE: BuildKit Missing Component Error Output
DESCRIPTION: This code snippet illustrates the error message received when BuildKit is explicitly enabled (e.g., via `DOCKER_BUILDKIT=1`) but the necessary Buildx component is missing or corrupted. This error causes the `docker build` command to fail and directs the user to install Buildx.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_9

LANGUAGE: text
CODE:
```
ERROR: BuildKit is enabled but the buildx component is missing or broken.
       Install the buildx component to build images with BuildKit:
       https://docs.docker.com/go/buildx/
```

----------------------------------------

TITLE: Docker Pull Non-Compliant Registry Warning Message
DESCRIPTION: This console output warning indicates that 'docker pull' is using a deprecated fallback mechanism for image registries that do not conform to the Open Container Initiative Distribution Specification. This fallback was introduced in v20.10 and removed in v28.2.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_10

LANGUAGE: console
CODE:
```
WARNING Failed to pull manifest by the resolved digest. This registry does not
        appear to conform to the distribution registry specification; falling back to
        pull by tag. This fallback is DEPRECATED, and will be removed in a future
        release.
```

----------------------------------------

TITLE: Dockerfile ENV Legacy Syntax Deprecation
DESCRIPTION: Illustrates the deprecated Dockerfile `ENV name value` syntax and the recommended `ENV name=value` syntax. The legacy format can be ambiguous, potentially misinterpreting values as part of a single variable, and does not support setting multiple environment variables on a single line.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_11

LANGUAGE: dockerfile
CODE:
```
ENV ONE TWO= THREE=world
```

LANGUAGE: dockerfile
CODE:
```
ENV ONE="""" TWO="""" THREE=""world""
```

----------------------------------------

TITLE: Fluentd Async Connect Deprecation Log Message
DESCRIPTION: This console output shows the deprecation message logged in the daemon logs when the `--log-opt fluentd-async-connect` option is used. It indicates that users should transition to `--log-opt fluentd-async` as the old option is no longer supported.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_12

LANGUAGE: console
CODE:
```
fluent#New: AsyncConnect is now deprecated, use Async instead
```

----------------------------------------

TITLE: Docker Pull Error for Deprecated Image Manifest v2 Schema 1
DESCRIPTION: This console output demonstrates the error message received when attempting to pull an image that uses the deprecated Docker Image Format v1 or Docker Image manifest version 2, schema 1. It advises the image author to upgrade to the OCI Format or Docker Image manifest v2, schema 2.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker pull ubuntu:10.04
Error response from daemon:
Docker Image Format v1 and Docker Image manifest version 2, schema 1 support has been removed.
Suggest the author of docker.io/library/ubuntu:10.04 to upgrade the image to the OCI Format or Docker Image manifest v2, schema 2.
More information at https://docs.docker.com/go/deprecated-image-specs/
```

----------------------------------------

TITLE: Enforce API Versioning in Docker Engine Calls
DESCRIPTION: Docker Engine API calls now require an explicit version prefix in the URL path to ensure forward compatibility. Unversioned calls are deprecated.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Deprecated API Call:
  GET /containers/json

Required API Call:
  GET /v1.25/containers/json
```

----------------------------------------

TITLE: Update docker search Flag Usage
DESCRIPTION: The `--automated` and `--stars` flags for the `docker search` command are deprecated. Users should now use the `--filter` option with `is-automated` and `stars` keys for equivalent functionality.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_15

LANGUAGE: Shell
CODE:
```
Deprecated:
  docker search --automated
  docker search --stars

Recommended:
  docker search --filter=is-automated=<true|false>
  docker search --filter=stars=...
```

----------------------------------------

TITLE: Prefer --help over -h for Docker Commands
DESCRIPTION: The `-h` shorthand for `--help` is deprecated due to potential conflicts with other command-line flags and inconsistent behavior across subcommands. The full `--help` flag should be used instead.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_16

LANGUAGE: Shell
CODE:
```
Deprecated:
  docker <command> -h

Recommended:
  docker <command> --help
```

----------------------------------------

TITLE: Use Equal Sign for --security-opt Key-Value Pairs
DESCRIPTION: The `--security-opt` flag on `docker run` now uses an equal sign (`=`) as a separator for key-value pairs, replacing the deprecated colon (`:`) for consistency with other Docker flags.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_17

LANGUAGE: Shell
CODE:
```
Deprecated:
  docker run --security-opt key:value

Recommended:
  docker run --security-opt key=value
```

----------------------------------------

TITLE: Migrate Dockerfile MAINTAINER to LABEL
DESCRIPTION: The `MAINTAINER` instruction in Dockerfiles is deprecated. It should be replaced by the more flexible `LABEL` instruction for specifying image metadata, including maintainer information.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
Deprecated:
  MAINTAINER Your Name <your.email@example.com>

Recommended:
  LABEL maintainer=""Your Name <your.email@example.com>""
```

----------------------------------------

TITLE: Update filter option for /images/json Endpoint
DESCRIPTION: The `filter` option for the `/images/json` API endpoint now requires the `reference` key to filter images by name or tag, replacing the previous generic filter string.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_19

LANGUAGE: APIDOC
CODE:
```
Deprecated Filter Usage:
  GET /images/json?filter=<image_name_or_tag>

Recommended Filter Usage:
  GET /images/json?filter=reference=<image_name_or_tag>
```

----------------------------------------

TITLE: Deprecated HostConfig in Docker Container Start API
DESCRIPTION: The practice of passing `HostConfig` directly to the `POST /containers/{name}/start` API endpoint is deprecated. Users should now define `HostConfig` during container creation via `POST /containers/create` instead.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
API Endpoint: POST /containers/{name}/start
  Deprecated Parameter: HostConfig
  Replacement: Define HostConfig at POST /containers/create
```

----------------------------------------

TITLE: Deprecated --before and --since flags for Docker ps
DESCRIPTION: The `--before` and `--since` flags for the `docker ps` command are deprecated. Users should now use the `docker ps --filter` option with `before=` and `since=` filters for equivalent functionality.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_21

LANGUAGE: console
CODE:
```
Deprecated: docker ps --before <id>
Deprecated: docker ps --since <id>
Replacement: docker ps --filter=before=<id>
Replacement: docker ps --filter=since=<id>
```

----------------------------------------

TITLE: Deprecated Driver-Specific Log Tags in Docker
DESCRIPTION: Driver-specific log tag options like `syslog-tag`, `gelf-tag`, and `fluentd-tag` are deprecated. A generic `tag` option is now used for standard log tag generation across different logging drivers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_22

LANGUAGE: console
CODE:
```
$ docker --log-driver=syslog --log-opt tag=""{{.ImageName}}/{{.Name}}/{{.ID}}""
```

----------------------------------------

TITLE: Deprecated Docker API Endpoint: /containers/copy
DESCRIPTION: The `/containers/(id or name)/copy` API endpoint is deprecated. Its functionality has been replaced by the `/containers/(id or name)/archive` endpoint for copying container contents.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_23

LANGUAGE: APIDOC
CODE:
```
API Endpoint: /containers/(id or name)/copy
  Deprecated
  Replacement: /containers/(id or name)/archive
```

----------------------------------------

TITLE: Deprecated Docker Command Line Options and Flags
DESCRIPTION: Various single-dash command-line options have been deprecated in favor of their double-dash counterparts. Additionally, some double-dash options have been deprecated without direct replacements. The `-d` and `--daemon` flags are replaced by the `dockerd` binary, and `-help` is replaced by `--help`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/deprecated.md#_snippet_24

LANGUAGE: console
CODE:
```
Deprecated: -d, --daemon (Use dockerd binary)
Deprecated: -help (Use --help)

Deprecated Single-Dash to Double-Dash:
  docker attach -nostdin (Use --nostdin)
  docker attach -sig-proxy (Use --sig-proxy)
  docker build -no-cache (Use --no-cache)
  docker build -rm (Use --rm)
  docker commit -author (Use --author)
  docker commit -run (Use --run)
  docker events -since (Use --since)
  docker history -notrunc (Use --notrunc)
  docker images -notrunc (Use --notrunc)
  docker inspect -format (Use --format)
  docker ps -beforeId (Use --before-id)
  docker ps -notrunc (Use --notrunc)
  docker ps -sinceId (Use --since-id)
  docker rm -link (Use --link)
  docker run -cidfile (Use --cidfile)
  docker run -dns (Use --dns)
  docker run -entrypoint (Use --entrypoint)
  docker run -expose (Use --expose)
  docker run -link (Use --link)
  docker run -lxc-conf (Use --lxc-conf)
  docker run -n (Use --n)
  docker run -privileged (Use --privileged)
  docker run -volumes-from (Use --volumes-from)
  docker search -notrunc (Use --notrunc)
  docker search -stars (Use --stars)
  docker search -t (Use --t)
  docker search -trusted (Use --trusted)
  docker tag -force (Use --force)

Deprecated Double-Dash (No Replacement):
  docker run --cpuset
  docker run --networking
  docker ps --since-id
  docker ps --before-id
  docker search --trusted
```

----------------------------------------

TITLE: Create Docker Image for Rexray Plugin
DESCRIPTION: This Dockerfile containerizes the Rexray application, installing necessary dependencies and the Rexray binary. It sets the entrypoint to 'rexray' and default command to '--help'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#_snippet_0

LANGUAGE: dockerfile
CODE:
```
FROM debian:jessie
RUN apt-get update && apt-get install -y --no-install-recommends wget ca-certificates
RUN wget https://dl.bintray.com/emccode/rexray/stable/0.6.4/rexray-Linux-x86_64-0.6.4.tar.gz -O rexray.tar.gz && tar -xvzf rexray.tar.gz -C /usr/bin && rm rexray.tar.gz
RUN mkdir -p /run/docker/plugins /var/lib/libstorage/volumes
ENTRYPOINT [""rexray""]
CMD [""--help""]
```

----------------------------------------

TITLE: Extract Root Filesystem from Docker Image
DESCRIPTION: This shell script demonstrates how to extract the root filesystem of a Docker image. It creates a container without running it, exports its filesystem to a tar archive, and then extracts the contents into a 'rootfs' directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#_snippet_1

LANGUAGE: sh
CODE:
```
TMPDIR=/tmp/rexray
docker create --name rexray ""$image""
docker export -o $TMPDIR/rexray.tar rexray
( mkdir -p $TMPDIR/rootfs; cd $TMPDIR/rootfs; tar xf ../rexray.tar )
```

----------------------------------------

TITLE: Define Docker Plugin Configuration for Rexray EBS
DESCRIPTION: This JSON configuration file defines the properties for a Docker volume plugin using Rexray for EBS. It specifies the plugin's entrypoint, environment variables for AWS access keys, interface details, Linux capabilities, and mount points required for dynamic device access and volume propagation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#_snippet_2

LANGUAGE: json
CODE:
```
{
      ""Args"": {
        ""Description"": """",
        ""Name"": """",
        ""Settable"": null,
        ""Value"": null
      },
      ""Description"": ""A proof-of-concept EBS plugin (using rexray) for Docker"",
      ""Documentation"": ""https://github.com/tiborvass/rexray-plugin"",
      ""Entrypoint"": [
        ""/usr/bin/rexray"", ""service"", ""start"", ""-f""
      ],
      ""Env"": [
        {
          ""Description"": """",
          ""Name"": ""REXRAY_SERVICE"",
          ""Settable"": [
            ""value""
          ],
          ""Value"": ""ebs""
        },
        {
          ""Description"": """",
          ""Name"": ""EBS_ACCESSKEY"",
          ""Settable"": [
            ""value""
          ],
          ""Value"": """"
        },
        {
          ""Description"": """",
          ""Name"": ""EBS_SECRETKEY"",
          ""Settable"": [
            ""value""
          ],
          ""Value"": """"
        }
      ],
      ""Interface"": {
        ""Socket"": ""rexray.sock"",
        ""Types"": [
          ""docker.volumedriver/1.0""
        ]
      },
      ""Linux"": {
        ""AllowAllDevices"": true,
        ""Capabilities"": [""CAP_SYS_ADMIN""],
        ""Devices"": null
      },
      ""Mounts"": [
        {
          ""Source"": ""/dev"",
          ""Destination"": ""/dev"",
          ""Type"": ""bind"",
          ""Options"": [""rbind""]
        }
      ],
      ""Network"": {
        ""Type"": ""host""
      },
      ""PropagatedMount"": ""/var/lib/libstorage/volumes"",
      ""User"": {},
      ""WorkDir"": """"
}
```

----------------------------------------

TITLE: Create and List Docker Plugin
DESCRIPTION: This shell command creates the Docker plugin using the prepared rootfs and configuration. It then lists the available Docker plugins to verify the creation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#_snippet_3

LANGUAGE: sh
CODE:
```
docker plugin create tiborvass/rexray-plugin ""$TMPDIR""
docker plugin ls
```

----------------------------------------

TITLE: Test Docker Plugin Functionality
DESCRIPTION: This snippet demonstrates how to test a Docker plugin. It covers setting environment variables for the plugin, enabling it, creating a volume using the plugin, listing volumes, and then using the created volume to write and read data, verifying the plugin's operation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#_snippet_4

LANGUAGE: sh
CODE:
```
$ docker plugin set tiborvass/rexray-plugin EBS_ACCESSKEY=$AWS_ACCESSKEY EBS_SECRETKEY=$AWS_SECRETKEY
$ docker plugin enable tiborvass/rexray-plugin
$ docker volume create -d tiborvass/rexray-plugin my-ebs-volume
$ docker volume ls
DRIVER                              VOLUME NAME
tiborvass/rexray-plugin:latest      my-ebs-volume
$ docker run --rm -v my-ebs-volume:/volume busybox sh -c 'echo bye > /volume/hi'
$ docker run --rm -v my-ebs-volume:/volume busybox cat /volume/hi
bye
```

----------------------------------------

TITLE: Push Docker Plugin to Registry
DESCRIPTION: This snippet shows how to push a Docker plugin to a registry, making it available for others to install. It emphasizes the need to be logged in to Docker before pushing, similar to regular Docker images.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/EBS_volume.md#_snippet_5

LANGUAGE: sh
CODE:
```
docker plugin push tiborvass/rexray-plugin
```

----------------------------------------

TITLE: Install Docker rclone volume plugin
DESCRIPTION: Installs the 'rclone/docker-volume-rclone' plugin from Docker Hub, prompting the user to grant necessary privileges such as network access, mount points for configuration and cache, device access to FUSE, and CAP_SYS_ADMIN capability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker plugin install rclone/docker-volume-rclone --alias rclone

Plugin ""rclone/docker-volume-rclone"" is requesting the following privileges:
 - network: [host]
 - mount: [/var/lib/docker-plugins/rclone/config]
 - mount: [/var/lib/docker-plugins/rclone/cache]
 - device: [/dev/fuse]
 - capabilities: [CAP_SYS_ADMIN]
Do you grant the above permissions? [y/N]
```

----------------------------------------

TITLE: List installed Docker plugins
DESCRIPTION: Checks the status of all installed Docker plugins, displaying their ID, name, description, and whether they are currently enabled.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker plugin ls

ID                    NAME                      DESCRIPTION                                ENABLED
aede66158353          rclone:latest             Rclone volume plugin for Docker            true
```

----------------------------------------

TITLE: Create Docker volume using rclone plugin
DESCRIPTION: Creates a new Docker volume named 'rclonevolume' using the 'rclone' driver. This example configures the volume to connect to a remote SFTP host (1.2.3.4) and mount its '/remote' directory, using a password read from a file.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker volume create \
  -d rclone \
  --name rclonevolume \
  -o type=sftp \
  -o path=remote \
  -o sftp-host=1.2.3.4 \
  -o sftp-user=user \
  -o ""sftp-password=$(cat file_containing_password_for_remote_host)""
```

----------------------------------------

TITLE: Verify Docker volume creation
DESCRIPTION: Lists all Docker volumes to confirm that the 'rclonevolume' was successfully created and is managed by the 'rclone' driver.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker volume ls

DRIVER              NAME
rclone         rclonevolume
```

----------------------------------------

TITLE: Run container with rclone volume mounted
DESCRIPTION: Starts a temporary 'busybox' container, mounting the 'rclonevolume' to the '/data' directory inside the container. It then lists the contents of '/data', demonstrating access to the remote SFTP directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run --rm -v rclonevolume:/data busybox ls /data

<content of /remote on machine 1.2.3.4>
```

----------------------------------------

TITLE: Remove Docker volume
DESCRIPTION: Removes the 'rclonevolume' from Docker Engine.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker volume rm rclonevolume

sshvolume
```

----------------------------------------

TITLE: Create Docker Plugin Root Filesystem from Dockerfile
DESCRIPTION: This snippet demonstrates how to prepare the `rootfs` directory for a Docker plugin. It involves cloning a sample plugin repository, building a Docker image, creating a temporary container, exporting its filesystem, and extracting it into the `myplugin/rootfs` directory. The `/run/docker/plugins` directory is mandatory for Docker communication.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_6

LANGUAGE: console
CODE:
```
$ git clone https://github.com/vieux/docker-volume-sshfs
$ cd docker-volume-sshfs
$ docker build -t rootfsimage .
$ id=$(docker create rootfsimage true) # id was cd851ce43a403 when the image was created
$ sudo mkdir -p myplugin/rootfs
$ sudo docker export ""$id"" | sudo tar -x -C myplugin/rootfs
$ docker rm -vf ""$id""
$ docker rmi rootfsimage
```

----------------------------------------

TITLE: Example Docker Plugin Configuration File (config.json)
DESCRIPTION: This JSON snippet provides an example `config.json` file for a Docker volume driver plugin. It defines the plugin's description, documentation link, entrypoint, network type (host), interface details including type and socket, and required Linux capabilities (CAP_SYS_ADMIN). This configuration specifies how the plugin interacts with Docker Engine.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_7

LANGUAGE: json
CODE:
```
{
  ""description"": ""sshFS plugin for Docker"",
  ""documentation"": ""https://docs.docker.com/engine/extend/plugins/"",
  ""entrypoint"": [""/docker-volume-sshfs""],
  ""network"": {
    ""type"": ""host""
  },
  ""interface"": {
    ""types"": [""docker.volumedriver/1.0""],
    ""socket"": ""sshfs.sock""
  },
  ""linux"": {
    ""capabilities"": [""CAP_SYS_ADMIN""]
  }
}
```

----------------------------------------

TITLE: Debug Docker Plugin Installation Logs
DESCRIPTION: This console command demonstrates installing a Docker plugin and shows the corresponding log output in the `dockerd` logs. The log entry indicates the plugin's startup and includes a `plugin=<ID>` suffix for identification.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker plugin install tiborvass/sample-volume-plugin

INFO[0036] Starting...       Found 0 volumes on startup  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
```

----------------------------------------

TITLE: Debug Docker Volume Creation Logs for Plugin
DESCRIPTION: This snippet illustrates creating a Docker volume using a plugin and the detailed `dockerd` log entries generated. The logs show the plugin's actions, such as ensuring a directory exists on the host, handling file access, and confirming the volume creation with its mountpoint.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker volume create -d tiborvass/sample-volume-plugin samplevol

INFO[0193] Create Called...  Ensuring directory /data/samplevol exists on host...  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
INFO[0193] open /var/lib/docker/plugin-data/local-persist.json: no such file or directory  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
INFO[0193]                   Created volume samplevol with mountpoint /data/samplevol  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
INFO[0193] Path Called...    Returned path /data/samplevol  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
```

----------------------------------------

TITLE: Debug Docker Container Run with Plugin Volume Logs
DESCRIPTION: This example demonstrates running a Docker container with a volume managed by a plugin and the corresponding `dockerd` log entries. The logs detail the plugin's lifecycle calls, including `Get`, `Mount`, `Path`, and `Unmount`, as the container interacts with the volume.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker run -v samplevol:/tmp busybox sh

INFO[0421] Get Called...     Found samplevol                plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
INFO[0421] Mount Called...   Mounted samplevol              plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
INFO[0421] Path Called...    Returned path /data/samplevol  plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
INFO[0421] Unmount Called... Unmounted samplevol            plugin=f52a3df433b9aceee436eaada0752f5797aab1de47e5485f1690a073b860ff62
```

----------------------------------------

TITLE: List Running Docker Plugins with runc
DESCRIPTION: Use this `runc` command to list all active Docker plugins, displaying their IDs, PIDs, status, and bundle paths. This helps in identifying the specific plugin ID required for further debugging operations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_11

LANGUAGE: bash
CODE:
```
sudo runc --root /run/docker/runtime-runc/plugins.moby list
```

----------------------------------------

TITLE: Retrieve Docker Plugin Logs using runc
DESCRIPTION: This command allows you to execute a command, such as `cat /var/log/plugin.log`, inside a running Docker plugin using `runc`. Replace the placeholder ID with the actual plugin ID to access its log files directly for troubleshooting.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_12

LANGUAGE: bash
CODE:
```
sudo runc --root /run/docker/runtime-runc/plugins.moby exec 93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25 cat /var/log/plugin.log
```

----------------------------------------

TITLE: Shell into Docker Plugin using runc
DESCRIPTION: If a Docker plugin includes a built-in shell, this command enables you to gain interactive shell access (e.g., `sh`) within the plugin's container via `runc`. This is useful for in-depth debugging and inspection of the plugin's environment.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_13

LANGUAGE: bash
CODE:
```
sudo runc --root /run/docker/runtime-runc/plugins.moby exec -t 93f1e7dbfe11c938782c2993628c895cf28e2274072c4a346a6002446c949b25 sh
```

----------------------------------------

TITLE: Verify Docker Volume Plugin API with curl
DESCRIPTION: Use this `curl` command to send an empty POST request to the `VolumeDriver.List` API endpoint of a Docker volume plugin via its Unix socket. This verifies if the plugin's API socket is responsive and correctly returns a list of volumes. Plugin sockets are typically found under `/var/run/docker/plugins/<pluginID>`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_14

LANGUAGE: bash
CODE:
```
curl -H ""Content-Type: application/json"" -XPOST -d '{}' --unix-socket /var/run/docker/plugins/e8a37ba56fc879c991f7d7921901723c64df6b42b87e6a0b055771ecf8477a6d/plugin.sock http:/VolumeDriver.List
```

----------------------------------------

TITLE: Verify Docker Network Plugin API with curl
DESCRIPTION: This `curl` command sends an empty POST request to the `NetworkDriver.GetCapabilities` API endpoint of a Docker network plugin via its Unix socket. It helps confirm that the plugin's API socket is responsive and can report its capabilities.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/_index.md#_snippet_15

LANGUAGE: bash
CODE:
```
curl -H ""Content-Type: application/json"" -XPOST -d '{}' --unix-socket /var/run/docker/plugins/45e00a7ce6185d6e365904c8bcf62eb724b1fe307e0d4e7ecc9f6c1eb7bcdb70/plugin.sock http:/NetworkDriver.GetCapabilities
```

----------------------------------------

TITLE: Docker Plugin Configuration V0 Schema
DESCRIPTION: Defines the structure and fields for Docker engine plugin configurations, including interface types, network settings, mount options, environment variables, and Linux-specific capabilities. This schema is serialized to JSON with the media type `application/vnd.docker.plugin.v1+json`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/config.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Config:
  description: string - Description of the plugin
  documentation: string - Link to the documentation about the plugin
  interface: PluginInterface
    types: string array - Types indicate what interface(s) the plugin currently implements.
      Supported types:
        - docker.volumedriver/1.0
        - docker.networkdriver/1.0
        - docker.ipamdriver/1.0
        - docker.authz/1.0
        - docker.logdriver/1.0
        - docker.metricscollector/1.0
    socket: string - Name of the socket the engine should use to communicate with the plugins.
  entrypoint: string array - Entrypoint of the plugin.
  workdir: string - Working directory of the plugin.
  network: PluginNetwork
    type: string - Network type.
      Supported types:
        - bridge
        - host
        - none
  mounts: PluginMount array
    name: string - Name of the mount.
    description: string - Description of the mount.
    source: string - Source of the mount.
    destination: string - Destination of the mount.
    type: string - Mount type.
    options: string array - Options of the mount.
  ipchost: Boolean - Access to host ipc namespace.
  pidhost: Boolean - Access to host PID namespace.
  propagatedMount: string - Path to be mounted as rshared.
  env: PluginEnv array
    name: string - Name of the environment variable.
    description: string - Description of the environment variable.
    value: string - Value of the environment variable.
  args: PluginArgs
    name: string - Name of the arguments.
    description: string - Description of the arguments.
    value: string array - Values of the arguments.
  linux: PluginLinux
    capabilities: string array - Capabilities of the plugin (Linux only).
    allowAllDevices: Boolean - If /dev is bind mounted from the host, and allowAllDevices is set to true, the plugin will have rwm access to all devices on the host.
    devices: PluginDevice array
      name: string - Name of the device.
      description: string - Description of the device.
      path: string - Path of the device.
```

----------------------------------------

TITLE: Example Docker Plugin Configuration JSON
DESCRIPTION: An example JSON configuration for a Docker volume plugin, illustrating the structure and values for fields like Entrypoint, Environment variables, Interface, and PropagatedMount.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/config.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""Args"": {
    ""Description"": """",
    ""Name"": """",
    ""Settable"": null,
    ""Value"": null
  },
  ""Description"": ""A sample volume plugin for Docker"",
  ""Documentation"": ""https://docs.docker.com/engine/extend/plugins/"",
  ""Entrypoint"": [
    ""/usr/bin/sample-volume-plugin"",
    ""/data""
  ],
  ""Env"": [
    {
      ""Description"": """",
      ""Name"": ""DEBUG"",
      ""Settable"": [
        ""value""
      ],
      ""Value"": ""0""
    }
  ],
  ""Interface"": {
    ""Socket"": ""plugin.sock"",
    ""Types"": [
      ""docker.volumedriver/1.0""
    ]
  },
  ""Linux"": {
    ""Capabilities"": null,
    ""AllowAllDevices"": false,
    ""Devices"": null
  },
  ""Mounts"": null,
  ""Network"": {
    ""Type"": """"
  },
  ""PropagatedMount"": ""/data"",
  ""User"": {},
  ""Workdir"": """"
}
```

----------------------------------------

TITLE: Docker Volume Plugins Overview
DESCRIPTION: This section lists various Docker volume plugins, detailing their purpose and capabilities for managing persistent storage with Docker containers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/legacy_plugins.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Portworx Volume Plugin:
  Description: A volume plugin that turns any server into a scale-out converged compute/storage node, providing container granular storage and highly available volumes across any node, using a shared-nothing storage backend that works with any docker scheduler.
```

LANGUAGE: APIDOC
CODE:
```
Quobyte Volume Plugin:
  Description: A volume plugin that connects Docker to Quobyte's data center file system, a general-purpose scalable and fault-tolerant storage platform.
```

LANGUAGE: APIDOC
CODE:
```
REX-Ray plugin:
  Description: A volume plugin which is written in Go and provides advanced storage functionality for many platforms including VirtualBox, EC2, Google Compute Engine, OpenStack, and EMC.
```

LANGUAGE: APIDOC
CODE:
```
Virtuozzo Storage and Ploop plugin:
  Description: A volume plugin with support for Virtuozzo Storage distributed cloud file system as well as ploop devices.
```

LANGUAGE: APIDOC
CODE:
```
VMware vSphere Storage Plugin:
  Description: Docker Volume Driver for vSphere enables customers to address persistent storage requirements for Docker containers in vSphere environments.
```

----------------------------------------

TITLE: Docker Authorization Plugins Overview
DESCRIPTION: This section lists various Docker authorization plugins, detailing their purpose and capabilities for controlling access and permissions within Docker.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/legacy_plugins.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Casbin AuthZ Plugin:
  Description: An authorization plugin based on Casbin, which supports access control models like ACL, RBAC, ABAC. The access control model can be customized. The policy can be persisted into file or DB.
```

LANGUAGE: APIDOC
CODE:
```
HBM plugin:
  Description: An authorization plugin that prevents from executing commands with certains parameters.
```

LANGUAGE: APIDOC
CODE:
```
Twistlock AuthZ Broker:
  Description: A basic extendable authorization plugin that runs directly on the host or inside a container. This plugin allows you to define user policies that it evaluates during authorization. Basic authorization is provided if Docker daemon is started with the --tlsverify flag (username is extracted from the certificate common name).
```

----------------------------------------

TITLE: Define Docker Plugin with JSON Specification
DESCRIPTION: This JSON snippet illustrates the structure for defining a Docker plugin, including its unique name, network address, and an optional TLS configuration for secure communication. The `TLSConfig` field allows specifying certificate and key files for secure connections.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""Name"": ""plugin-example"",
  ""Addr"": ""https://example.com/docker/plugin"",
  ""TLSConfig"": {
    ""InsecureSkipVerify"": false,
    ""CAFile"": ""/usr/shared/docker/certs/example-ca.pem"",
    ""CertFile"": ""/usr/shared/docker/certs/example-cert.pem"",
    ""KeyFile"": ""/usr/shared/docker/certs/example-key.pem""
  }
}
```

----------------------------------------

TITLE: Systemd Service File for Docker Plugin Activation
DESCRIPTION: This systemd service file defines how a Docker plugin is managed by systemd. It specifies the plugin's description, dependencies (like `docker.service` and its own socket file), and the command to execute the plugin. The `WantedBy=multi-user.target` ensures it's started with the system.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#_snippet_1

LANGUAGE: systemd
CODE:
```
[Unit]
Description=Your plugin
Before=docker.service
After=network.target your-plugin.socket
Requires=your-plugin.socket docker.service

[Service]
ExecStart=/usr/lib/docker/your-plugin

[Install]
WantedBy=multi-user.target
```

----------------------------------------

TITLE: Systemd Socket File for Docker Plugin Activation
DESCRIPTION: This systemd socket file defines the Unix socket that a Docker plugin listens on. It specifies the socket's description and the `ListenStream` path, allowing the Docker daemon to connect to the plugin. `WantedBy=sockets.target` ensures it's managed by the systemd socket activation mechanism.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#_snippet_2

LANGUAGE: systemd
CODE:
```
[Unit]
Description=Your plugin

[Socket]
ListenStream=/run/docker/plugins/your-plugin.sock

[Install]
WantedBy=sockets.target
```

----------------------------------------

TITLE: Docker Plugin Handshake API: /Plugin.Activate
DESCRIPTION: This section describes the `/Plugin.Activate` API call, which is used to activate Docker plugins. The Docker daemon sends an empty POST request, and the plugin responds with a JSON object listing the Docker subsystems it implements. This allows the daemon to know which events to send to the plugin.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugin_api.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
/Plugin.Activate
  Method: POST
  Description: Activates a Docker plugin and identifies its implemented subsystems.
  Request:
    Body: empty
  Response:
    Content-Type: application/json
    Body:
      Type: object
      Properties:
        Implements:
          Type: array of strings
          Description: List of Docker subsystems which this plugin implements.
          Possible values:
            - authz
            - NetworkDriver
            - VolumeDriver
```

LANGUAGE: json
CODE:
```
{
    ""Implements"": [""VolumeDriver""]
}
```

----------------------------------------

TITLE: Configure Docker Daemon with Authorization Plugins
DESCRIPTION: Explains how to enable authorization plugins using the `--authorization-plugin` flag during Docker daemon startup, allowing multiple plugins to be specified. Plugins can be loaded without restarting the daemon.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#_snippet_0

LANGUAGE: console
CODE:
```
$ dockerd --authorization-plugin=plugin1 --authorization-plugin=plugin2,...
```

----------------------------------------

TITLE: Execute Authorized Docker Command
DESCRIPTION: Demonstrates a successful Docker command execution when the action is authorized by a configured plugin, showing the typical output for a completed pull operation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker pull centos
<...>
f1b10cd84249: Pull complete
<...>
```

----------------------------------------

TITLE: Execute Unauthorized Docker Command
DESCRIPTION: Shows an example of a Docker command being denied by an authorization plugin, including the specific error message indicating the reason for denial (e.g., 'volumes are not allowed').
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker pull centos
<...>
docker: Error response from daemon: authorization denied by plugin PLUGIN_NAME: volumes are not allowed.
```

----------------------------------------

TITLE: Handle Plugin Error During Docker Command
DESCRIPTION: Illustrates an error response from the Docker daemon when an authorization plugin itself encounters an issue, such as being unable to connect to the daemon.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker pull centos
<...>
docker: Error response from daemon: plugin PLUGIN_NAME failed with error: AuthZPlugin.AuthZReq: Cannot connect to the Docker daemon. Is the docker daemon running on this host?.
```

----------------------------------------

TITLE: Docker Authorization Plugin API Specification
DESCRIPTION: Comprehensive documentation for the Docker authorization plugin API, detailing the `/AuthZPlugin.AuthZReq` and `/AuthZPlugin.AuthZRes` methods, their request and response JSON schemas, and the structured message formats for daemon-to-plugin and plugin-to-daemon communications.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
/AuthZPlugin.AuthZReq:
  Description: This authorize request method is called before the Docker daemon processes the client request.
  Request:
    User: string (The user identification)
    UserAuthNMethod: string (The authentication method used)
    RequestMethod: string (The HTTP method)
    RequestURI: string (The HTTP request URI)
    RequestBody: Byte array (The raw HTTP request body)
    RequestHeader: Byte array (The raw HTTP request header as a map[string][]string)
  Response:
    Allow: boolean (Determined whether the user is allowed or not)
    Msg: string (The authorization message)
    Err: string (The error message if things go wrong)
```

LANGUAGE: json
CODE:
```
{
    ""User"":              ""The user identification"",
    ""UserAuthNMethod"":   ""The authentication method used"",
    ""RequestMethod"":     ""The HTTP method"",
    ""RequestURI"":        ""The HTTP request URI"",
    ""RequestBody"":       ""Byte array containing the raw HTTP request body"",
    ""RequestHeader"":     ""Byte array containing the raw HTTP request header as a map[string][]string ""
}
```

LANGUAGE: json
CODE:
```
{
    ""Allow"": ""Determined whether the user is allowed or not"",
    ""Msg"":   ""The authorization message"",
    ""Err"":   ""The error message if things go wrong""
}
```

LANGUAGE: APIDOC
CODE:
```
/AuthZPlugin.AuthZRes:
  Description: This authorize response method is called before the response is returned from Docker daemon to the client.
  Request:
    User: string (The user identification)
    UserAuthNMethod: string (The authentication method used)
    RequestMethod: string (The HTTP method)
    RequestURI: string (The HTTP request URI)
    RequestBody: Byte array (The raw HTTP request body)
    RequestHeader: Byte array (The raw HTTP request header as a map[string][]string)
    ResponseBody: Byte array (The raw HTTP response body)
    ResponseHeader: Byte array (The raw HTTP response header as a map[string][]string)
    ResponseStatusCode: string (Response status code)
  Response:
    Allow: boolean (Determined whether the user is allowed or not)
    Msg: string (The authorization message)
    Err: string (The error message if things go wrong)
```

LANGUAGE: json
CODE:
```
{
    ""User"":              ""The user identification"",
    ""UserAuthNMethod"":   ""The authentication method used"",
    ""RequestMethod"":     ""The HTTP method"",
    ""RequestURI"":        ""The HTTP request URI"",
    ""RequestBody"":       ""Byte array containing the raw HTTP request body"",
    ""RequestHeader"":     ""Byte array containing the raw HTTP request header as a map[string][]string"",
    ""ResponseBody"":      ""Byte array containing the raw HTTP response body"",
    ""ResponseHeader"":    ""Byte array containing the raw HTTP response header as a map[string][]string"",
    ""ResponseStatusCode"":""Response status code""
}
```

LANGUAGE: json
CODE:
```
{
   ""Allow"":              ""Determined whether the user is allowed or not"",
   ""Msg"":                ""The authorization message"",
   ""Err"":                ""The error message if things go wrong""
}
```

LANGUAGE: APIDOC
CODE:
```
Daemon -> Plugin Request Message Format:
  Name: User
  Type: string
  Description: The user identification
  Name: Authentication method
  Type: string
  Description: The authentication method used
  Name: Request method
  Type: enum
  Description: The HTTP method (GET/DELETE/POST)
  Name: Request URI
  Type: string
  Description: The HTTP request URI including API version (e.g., v.1.17/containers/json)
  Name: Request headers
  Type: map[string]string
  Description: Request headers as key value pairs (without the authorization header)
  Name: Request body
  Type: []byte
  Description: Raw request body
```

LANGUAGE: APIDOC
CODE:
```
Plugin -> Daemon Response Message Format:
  Name: Allow
  Type: bool
  Description: Boolean value indicating whether the request is allowed or denied
  Name: Msg
  Type: string
  Description: Authorization message (will be returned to the client in case the access is denied)
  Name: Err
  Type: string
  Description: Error message (will be returned to the client in case the plugin encounter an error. The string value supplied may appear in logs, so should not include confidential information)
```

LANGUAGE: APIDOC
CODE:
```
Response authorization: The plugin must support two authorization messages formats, one from the daemon to the plugin and then from the plugin to the daemon. The tables below detail the content expected in each message.
```

----------------------------------------

TITLE: Docker Daemon to Plugin Request/Response Structure
DESCRIPTION: Defines the data structure sent from the Docker Daemon to an authorization plugin for request evaluation. This includes details about the user, authentication, HTTP request, and the daemon's response that the plugin can inspect.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
DaemonToPluginRequest:
  User: string (The user identification)
  Authentication method: string (The authentication method used)
  Request method: string (The HTTP method (GET/DELETE/POST))
  Request URI: string (The HTTP request URI including API version (e.g., v.1.17/containers/json))
  Request headers: map[string]string (Request headers as key value pairs (without the authorization header))
  Request body: []byte (Raw request body)
  Response status code: int (Status code from the Docker daemon)
  Response headers: map[string]string (Response headers as key value pairs)
  Response body: []byte (Raw Docker daemon response body)
```

----------------------------------------

TITLE: Docker Plugin to Daemon Response Structure
DESCRIPTION: Defines the data structure sent from an authorization plugin back to the Docker Daemon, indicating whether a request is allowed or denied, along with optional messages or errors to be returned to the client or logged.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_authorization.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
PluginToDaemonResponse:
  Allow: bool (Boolean value indicating whether the response is allowed or denied)
  Msg: string (Authorization message (will be returned to the client in case the access is denied))
  Err: string (Error message (will be returned to the client in case the plugin encounter an error. The string value supplied may appear in logs, so should not include confidential information))
```

----------------------------------------

TITLE: API: LogDriver.StartLogging Endpoint
DESCRIPTION: Signals to the logging plugin that a container is starting and it should begin receiving logs. Logs are streamed over a specified file (FIFO on Linux). The request includes the file path and container information. The plugin must consume log messages from the file, which are encoded as protocol buffers with a [size][message] stream format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""File"": ""/path/to/file/stream"",
  ""Info"": {
          ""ContainerID"": ""123456""
  }
}
```

LANGUAGE: Go
CODE:
```
type Info struct {
	Config              map[string]string
	ContainerID         string
	ContainerName       string
	ContainerEntrypoint string
	ContainerArgs       []string
	ContainerImageID    string
	ContainerImageName  string
	ContainerCreated    time.Time
	ContainerEnv        []string
	ContainerLabels     map[string]string
	LogPath             string
	DaemonName          string
}
```

LANGUAGE: JSON
CODE:
```
{
  ""Err"": """"
}
```

LANGUAGE: text
CODE:
```
[size][message]
```

----------------------------------------

TITLE: API: LogDriver.StopLogging Endpoint
DESCRIPTION: Signals to the logging plugin to stop collecting logs from a specified file. The plugin must ensure all logs are collected from the stream before responding, as the file will be removed by Docker upon response. This does not imply the container has been removed, only that it has stopped logging.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#_snippet_1

LANGUAGE: JSON
CODE:
```
{
  ""File"": ""/path/to/file/stream""
}
```

LANGUAGE: JSON
CODE:
```
{
  ""Err"": """"
}
```

----------------------------------------

TITLE: API: LogDriver.Capabilities Endpoint
DESCRIPTION: Defines the capabilities supported by the log driver plugin. Implementing this endpoint allows Docker to leverage specific features, such as `ReadLogs`, which requires the plugin to also implement the `/LogDriver.ReadLogs` endpoint.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#_snippet_2

LANGUAGE: JSON
CODE:
```
{}
```

LANGUAGE: JSON
CODE:
```
{
  ""ReadLogs"": true
}
```

----------------------------------------

TITLE: Docker LogDriver API: ReadLogs Endpoint Specification
DESCRIPTION: Details the `/LogDriver.ReadLogs` endpoint, which allows clients to retrieve container logs. This section specifies the request payload, including the `ReadConfig` structure (defining log filtering options like `Since`, `Tail`, and `Follow`) and the `Info` object (identifying the container). It also outlines the expected log stream response format. `Since` defines the oldest log that should be sent. `Tail` defines the number of lines to read (e.g., like the command `tail -n 10`). `Follow` signals that the client wants to stay attached to receive new log messages as they come in once the existing logs have been read. `Info` is the same type defined in `/LogDriver.StartLogging` and should be used to determine what set of logs to read. The response should be the encoded log message using the same format as the messages that the plugin consumed from Docker.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_logging.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""ReadConfig"": {},
  ""Info"": {
    ""ContainerID"": ""123456""
  }
}
```

LANGUAGE: go
CODE:
```
type ReadConfig struct {
	Since  time.Time
	Tail   int
	Follow bool
}
```

LANGUAGE: text
CODE:
```
{{ log stream }}
```

----------------------------------------

TITLE: MetricsCollector.StartMetrics Endpoint Definition and Examples
DESCRIPTION: Defines the `StartMetrics` endpoint of the `MetricsCollector` interface, which signals the availability of the metrics socket for scraping. Includes the API specification and example JSON payloads for requests and responses.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_metrics.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
MetricsCollector.StartMetrics
  Description: Signals to the plugin that the metrics socket is now available for scraping.
  Request:
    Payload: {}
  Response:
    Payload: {""Err"": """"}
    Error Handling: If an error occurred during this request, add an error message to the 'Err' field in the response. If no error then you can either send an empty response ({}) or an empty value for the 'Err' field. Errors will only be logged.
```

LANGUAGE: json
CODE:
```
{}
```

LANGUAGE: json
CODE:
```
{
  ""Err"": """"
}
```

----------------------------------------

TITLE: MetricsCollector.StopMetrics Endpoint Definition and Examples
DESCRIPTION: Defines the `StopMetrics` endpoint of the `MetricsCollector` interface, which signals that the metrics socket is no longer available, typically during daemon shutdown. Includes the API specification and example JSON payloads for requests and responses.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_metrics.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
MetricsCollector.StopMetrics
  Description: Signals to the plugin that the metrics socket is no longer available. This may happen when the daemon is shutting down.
  Request:
    Payload: {}
  Response:
    Payload: {""Err"": """"}
    Error Handling: If an error occurred during this request, add an error message to the 'Err' field in the response. If no error then you can either send an empty response ({}) or an empty value for the 'Err' field. Errors will only be logged.
```

LANGUAGE: json
CODE:
```
{}
```

LANGUAGE: json
CODE:
```
{
  ""Err"": """"
}
```

----------------------------------------

TITLE: Create Docker network with a custom driver
DESCRIPTION: Demonstrates how to create a new Docker network using a third-party network driver plugin, such as 'weave'. This command registers the network 'mynet' with the specified driver, allowing Docker to delegate network management for 'mynet' to the plugin.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_network.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker network create --driver weave mynet
```

----------------------------------------

TITLE: Run Docker container on a custom network
DESCRIPTION: Shows how to run a Docker container and connect it to a previously created network that uses a custom driver. The container 'busybox' will use the 'mynet' network, routing its traffic through the 'weave' plugin, demonstrating the integration of custom networks with container operations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_network.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker run --network=mynet busybox top
```

----------------------------------------

TITLE: Initialize Docker Swarm Manager
DESCRIPTION: Initializes the current node as a Docker Swarm manager, making it the orchestrator for the swarm cluster. This command is executed on the designated manager node.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker swarm init
```

----------------------------------------

TITLE: Join Swarm, Install Volume Plugin, and Create Volume on Worker
DESCRIPTION: Commands executed on a worker node to join an existing Docker Swarm, install a sample volume plugin, and then create a new volume using that plugin. This prepares the worker node to host services requiring the specific volume plugin.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker swarm join \
  --token SWMTKN-1-49nj1cmql0jkz5s954yi3oex3nedyz0fb0xx14ie39trti4wxv-8vxv8rssmk743ojnwacrr2e7c \
  192.168.99.100:2377
```

LANGUAGE: console
CODE:
```
$ docker plugin install tiborvass/sample-volume-plugin
```

LANGUAGE: console
CODE:
```
$ docker volume create -d tiborvass/sample-volume-plugin --name pluginVol
```

----------------------------------------

TITLE: Create Docker Service with Volume Plugin
DESCRIPTION: Creates a Docker service on the manager node, specifying a volume mount that uses the previously installed volume plugin and created volume. It then lists the running services to confirm creation and status.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker service create --name my-service --mount type=volume,volume-driver=tiborvass/sample-volume-plugin,source=pluginVol,destination=/tmp busybox top
```

LANGUAGE: console
CODE:
```
$ docker service ls
```

----------------------------------------

TITLE: Observe Docker Service Task Scheduling
DESCRIPTION: Lists running Docker containers on the worker node, formatted to show ID, status, name, and command. This command confirms that the service task was successfully scheduled and is running on the node with the required volume plugin.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker ps --format '{{.ID}}\t {{.Status}} {{.Names}} {{.Command}}'
```

----------------------------------------

TITLE: Install Docker Global Network Plugin on Swarm Nodes
DESCRIPTION: Installs the 'bboreham/weave2' global scope network plugin on both the Docker swarm manager (node1) and worker (node2). This plugin is essential for creating swarm-scoped networks that require its driver.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker plugin install bboreham/weave2
Plugin ""bboreham/weave2"" is requesting the following privileges:
- network: [host]
- capabilities: [CAP_SYS_ADMIN CAP_NET_ADMIN]
Do you grant the above permissions? [y/N] y
latest: Pulling from bboreham/weave2
7718f575adf7: Download complete
Digest: sha256:2780330cc15644b60809637ee8bd68b4c85c893d973cb17f2981aabfadfb6d72
Status: Downloaded newer image for bboreham/weave2:latest
Installed plugin bboreham/weave2
```

----------------------------------------

TITLE: Create Swarm Network Using Installed Plugin
DESCRIPTION: Creates a new Docker swarm-scoped network named 'globalnet' on the manager node (node1), specifying the 'bboreham/weave2' plugin as its driver. The `docker network ls` command is then used to verify the successful creation and scope of the network.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker network create --driver=bboreham/weave2:latest globalnet

$ docker network ls
NETWORK ID          NAME                DRIVER                   SCOPE
qlj7ueteg6ly        globalnet           bboreham/weave2:latest   swarm
```

----------------------------------------

TITLE: Create Docker Service and Observe Distributed Scheduling
DESCRIPTION: Creates a Docker service named 'myservice' with 8 replicas, attaching it to the 'globalnet' network. This demonstrates how containers are scheduled across both the manager (node1) and worker (node2) nodes when the required network plugin is available on all nodes, ensuring high availability and load distribution.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker service create --network globalnet --name myservice --replicas=8 mrjana/simpleweb simpleweb
w90drnfzw85nygbie9kb89vpa
```

LANGUAGE: console
CODE:
```
$ docker ps
CONTAINER ID        IMAGE                                                                                      COMMAND             CREATED             STATUS              PORTS               NAMES
87520965206a        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         5 seconds ago       Up 4 seconds                            myservice.4.ytdzpktmwor82zjxkh118uf1v
15e24de0f7aa        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         5 seconds ago       Up 4 seconds                            myservice.2.kh7a9n3iauq759q9mtxyfs9hp
c8c8f0144cdc        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         5 seconds ago       Up 4 seconds                            myservice.6.sjhpj5gr3xt33e3u2jycoj195
2e8e4b2c5c08        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         5 seconds ago       Up 4 seconds                            myservice.8.2z29zowsghx66u2velublwmrh
```

LANGUAGE: console
CODE:
```
$ docker ps
CONTAINER ID        IMAGE                                                                                      COMMAND             CREATED             STATUS                  PORTS               NAMES
53c0ae7c1dae        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         2 seconds ago       Up Less than a second                       myservice.7.x44tvvdm3iwkt9kif35f7ykz1
9b56c627fee0        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         2 seconds ago       Up Less than a second                       myservice.1.x7n1rm6lltw5gja3ueikze57q
d4f5927ba52c        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         2 seconds ago       Up 1 second                                 myservice.5.i97bfo9uc6oe42lymafs9rz6k
478c0d395bd7        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         2 seconds ago       Up Less than a second                       myservice.3.yr7nkffa48lff1vrl2r1m1ucs
```

----------------------------------------

TITLE: Scale Down Docker Service Replicas
DESCRIPTION: Scales down the 'myservice' Docker service to 0 replicas on the manager node (node1). This action terminates all running containers associated with the service, freeing up resources.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker service scale myservice=0
myservice scaled to 0
```

----------------------------------------

TITLE: Uninstall Docker Network Plugin from Worker Node
DESCRIPTION: Disables and uninstalls the 'bboreham/weave2' network plugin from the worker node (node2). This step simulates a scenario where a plugin becomes unavailable on a specific node, setting the stage to observe its impact on subsequent service scheduling.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker plugin rm -f bboreham/weave2
bboreham/weave2
```

----------------------------------------

TITLE: Scale Up Service and Observe Scheduling Shift to Manager
DESCRIPTION: Scales up the 'myservice' Docker service back to 8 replicas on the manager node (node1). Due to the network plugin being uninstalled from the worker node, all containers are now exclusively scheduled on the manager, demonstrating that nodes without the required plugin cannot host services dependent on it.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker service scale myservice=8
myservice scaled to 8

$ docker ps
CONTAINER ID        IMAGE                                                                                      COMMAND             CREATED             STATUS              PORTS               NAMES
```

----------------------------------------

TITLE: View Running Docker Service Containers
DESCRIPTION: This console output demonstrates the `docker ps` command showing multiple active containers for a 'simpleweb' service. It includes details like container ID, image, command, creation time, status, and assigned names, indicating a healthy running service.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_10

LANGUAGE: console
CODE:
```
cf4b0ec2415e        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 36 seconds                           myservice.3.r7p5o208jmlzpcbm2ytl3q6n1
57c64a6a2b88        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 36 seconds                           myservice.4.dwoezsbb02ccstkhlqjy2xe7h
3ac68cc4e7b8        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 35 seconds                           myservice.5.zx4ezdrm2nwxzkrwnxthv0284
006c3cb318fc        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 36 seconds                           myservice.8.q0e3umt19y3h3gzo1ty336k5r
dd2ffebde435        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 36 seconds                           myservice.7.a77y3u22prjipnrjg7vzpv3ba
a86c74d8b84b        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 36 seconds                           myservice.6.z9nbn14bagitwol1biveeygl7
2846a7850ba0        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 37 seconds                           myservice.2.ypufz2eh9fyhppgb89g8wtj76
e2ec01efcd8a        mrjana/simpleweb@sha256:317d7f221d68c86d503119b0ea12c29de42af0a22ca087d522646ad1069a47a4   ""simpleweb""         39 seconds ago      Up 38 seconds                           myservice.1.8w7c4ttzr6zcb9sjsqyhwp3yl
```

----------------------------------------

TITLE: Check for Running Docker Containers on an Empty Node
DESCRIPTION: This console output shows the result of `docker ps` on a node where no containers are currently active. The command returns only the header row, indicating that no running containers are found, which is useful for verifying node status.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_services.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
```

----------------------------------------

TITLE: Docker Volume CLI Usage
DESCRIPTION: Demonstrates how to create a Docker volume using a specific driver and how to run a container with that volume mounted, providing access to the volume within the container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker volume create --driver=flocker volumename

$ docker container run -it --volume volumename:/data busybox sh
```

----------------------------------------

TITLE: VolumeDriver.Create API Endpoint
DESCRIPTION: Instructs the plugin to create a volume, given a user-specified volume name. The plugin does not need to actually manifest the volume on the filesystem until Mount is called. It accepts driver-specific options.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Request:
{
    ""Name"": ""volume_name"",
    ""Opts"": {}
}
Name: string - The user-specified name for the volume.
Opts: object - A map of driver-specific options passed from the user request.

Response:
{
    ""Err"": """"
}
Err: string - An error string if an error occurred, otherwise empty.
```

----------------------------------------

TITLE: VolumeDriver.Remove API Endpoint
DESCRIPTION: Deletes the specified volume from disk. This request is issued when a user invokes `docker rm -v` to remove volumes associated with a container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Request:
{
    ""Name"": ""volume_name""
}
Name: string - The name of the volume to be deleted.

Response:
{
    ""Err"": """"
}
Err: string - An error string if an error occurred, otherwise empty.
```

----------------------------------------

TITLE: VolumeDriver.Mount API Endpoint
DESCRIPTION: Docker requires the plugin to provide a volume, given a user-specified volume name. Mount is called once per container start. If the same volume name is requested multiple times, the plugin may need to track each new mount request. `ID` is a unique identifier for the caller requesting the mount.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Request:
{
    ""Name"": ""volume_name"",
    ""ID"": ""b87d7442095999a92b65b3d9691e697b61713829cc0ffd1bb72e4ccd51aa4d6c""
}
Name: string - The user-specified name of the volume.
ID: string - A unique ID for the caller that is requesting the mount.

Response (v1):
{
    ""Mountpoint"": ""/path/to/directory/on/host"",
    ""Err"": """"
}
Mountpoint: string - The path on the host where the volume has been made available.
Err: string - An error string if an error occurred, otherwise empty.

Response (v2):
{
    ""Mountpoint"": ""/path/under/PropagatedMount"",
    ""Err"": """"
}
Mountpoint: string - The path under PropagatedMount in the plugin where the volume has been made available.
Err: string - An error string if an error occurred, otherwise empty.
```

----------------------------------------

TITLE: API: /VolumeDriver.Path Request and Response
DESCRIPTION: Requests the path to a volume given its name. The response provides the mountpoint on the host (v1) or inside the plugin (v2) where the volume is available, along with an optional error. The mountpoint is optional, and the plugin may be queried again if not provided.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_4

LANGUAGE: json
CODE:
```
{
    ""Name"": ""volume_name""
}
```

LANGUAGE: json
CODE:
```
{
      ""Mountpoint"": ""/path/to/directory/on/host"",
      ""Err"": """"
}
```

LANGUAGE: json
CODE:
```
{
      ""Mountpoint"": ""/path/under/PropagatedMount"",
      ""Err"": """"
}
```

----------------------------------------

TITLE: API: /VolumeDriver.Unmount Request and Response
DESCRIPTION: Notifies the plugin that Docker is no longer using the named volume. This method is called once per container stop, allowing the plugin to safely deprovision the volume. The `ID` parameter provides a unique identifier for the caller requesting the unmount.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_5

LANGUAGE: json
CODE:
```
{
    ""Name"": ""volume_name"",
    ""ID"": ""b87d7442095999a92b65b3d9691e697b61713829cc0ffd1bb72e4ccd51aa4d6c""
}
```

LANGUAGE: json
CODE:
```
{
    ""Err"": """"
}
```

----------------------------------------

TITLE: API: /VolumeDriver.Get Request and Response
DESCRIPTION: Retrieves detailed information about a specific volume by its name. The response includes the volume's name, mountpoint (v1 or v2), and an optional status object, along with an error string. Both `Mountpoint` and `Status` fields are optional.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_6

LANGUAGE: json
CODE:
```
{
    ""Name"": ""volume_name""
}
```

LANGUAGE: json
CODE:
```
{
    ""Volume"": {
      ""Name"": ""volume_name"",
      ""Mountpoint"": ""/path/to/directory/on/host"",
      ""Status"": {}
    },
    ""Err"": """"
}
```

LANGUAGE: json
CODE:
```
{
    ""Volume"": {
      ""Name"": ""volume_name"",
      ""Mountpoint"": ""/path/under/PropagatedMount"",
      ""Status"": {}
    },
    ""Err"": """"
}
```

----------------------------------------

TITLE: API: /VolumeDriver.List Request and Response
DESCRIPTION: Retrieves a list of all volumes currently registered with the plugin. The response includes an array of volume objects, each containing the volume's name and an optional mountpoint, along with an error string. The `Mountpoint` field within each volume object is optional.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_7

LANGUAGE: json
CODE:
```
{}
```

LANGUAGE: json
CODE:
```
{
    ""Volumes"": [
      {
        ""Name"": ""volume_name"",
        ""Mountpoint"": ""/path/to/directory/on/host""
      }
    ],
    ""Err"": """"
}
```

LANGUAGE: json
CODE:
```
{
    ""Volumes"": [
      {
        ""Name"": ""volume_name"",
        ""Mountpoint"": ""/path/under/PropagatedMount""
      }
    ],
    ""Err"": """"
}
```

----------------------------------------

TITLE: API: /VolumeDriver.Capabilities Request and Response
DESCRIPTION: Retrieves the list of capabilities supported by the volume driver. If this endpoint is not implemented by the driver, default values are used. The response includes a `Scope` capability, which can be `global` or `local`, influencing how cluster managers handle the volume.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/extend/plugins_volume.md#_snippet_8

LANGUAGE: json
CODE:
```
{}
```

LANGUAGE: json
CODE:
```
{
  ""Capabilities"": {
    ""Scope"": ""global""
  }
}
```

----------------------------------------

TITLE: Docker Daemon (dockerd) Command-Line Options
DESCRIPTION: Detailed reference for the `dockerd` command, including options for network configuration, runtime behavior, security, and debugging. Each option controls a specific aspect of the Docker daemon's operation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Usage:	dockerd [OPTIONS]

A self-sufficient runtime for containers.

Options:
      --add-runtime runtime                   Register an additional OCI compatible runtime (default [])
      --allow-direct-routing                  Allow remote access to published ports on container IP addresses
      --authorization-plugin list             Authorization plugins to load
      --bip string                            IPv4 address for the default bridge
      --bip6 string                           IPv6 address for the default bridge
  -b, --bridge string                         Attach containers to a network bridge
      --cdi-spec-dir list                     CDI specification directories to use
      --cgroup-parent string                  Set parent cgroup for all containers
      --config-file string                    Daemon configuration file (default ""/etc/docker/daemon.json"")
      --containerd string                     containerd grpc address
      --containerd-namespace string           Containerd namespace to use (default ""moby"")
      --containerd-plugins-namespace string   Containerd namespace to use for plugins (default ""plugins.moby"")
      --cpu-rt-period int                     Limit the CPU real-time period in microseconds for the
                                              parent cgroup for all containers (not supported with cgroups v2)
      --cpu-rt-runtime int                    Limit the CPU real-time runtime in microseconds for the
                                              parent cgroup for all containers (not supported with cgroups v2)
      --cri-containerd                        start containerd with cri
      --data-root string                      Root directory of persistent Docker state (default ""/var/lib/docker"")
  -D, --debug                                 Enable debug mode
      --default-address-pool pool-options     Default address pools for node specific local networks
      --default-cgroupns-mode string          Default mode for containers cgroup namespace (""host"" | ""private"") (default ""private"")
      --default-gateway ip                    Default gateway IPv4 address for the default bridge network
      --default-gateway-v6 ip                 Default gateway IPv6 address for the default bridge network
      --default-ipc-mode string               Default mode for containers ipc (""shareable"" | ""private"") (default ""private"")
      --default-network-opt mapmap            Default network options (default map[])
      --default-runtime string                Default OCI runtime for containers (default ""runc"")
      --default-shm-size bytes                Default shm size for containers (default 64MiB)
      --default-ulimit ulimit                 Default ulimits for containers (default [])
      --dns list                              DNS server to use
      --dns-opt list                          DNS options to use
      --dns-search list                       DNS search domains to use
      --exec-opt list                         Runtime execution options
      --exec-root string                      Root directory for execution state files (default ""/run/docker"")
      --experimental                          Enable experimental features
      --feature map                           Enable feature in the daemon
      --fixed-cidr string                     IPv4 subnet for the default bridge network
      --fixed-cidr-v6 string                  IPv6 subnet for the default bridge network
  -G, --group string                          Group for the unix socket (default ""docker"")
      --help                                  Print usage
  -H, --host list                             Daemon socket(s) to connect to
      --host-gateway-ip list                  IP addresses that the special 'host-gateway' string in --add-host resolves to.
                                              Defaults to the IP addresses of the default bridge
      --http-proxy string                     HTTP proxy URL to use for outgoing traffic
      --https-proxy string                    HTTPS proxy URL to use for outgoing traffic
      --icc                                   Enable inter-container communication for the default bridge network (default true)
      --init                                  Run an init in the container to forward signals and reap processes
      --init-path string                      Path to the docker-init binary
      --insecure-registry list                Enable insecure registry communication
      --ip ip                                 Host IP for port publishing from the default bridge network (default 0.0.0.0)
      --ip-forward                            Enable IP forwarding in system configuration (default true)
      --ip-forward-no-drop                    Do not set the filter-FORWARD policy to DROP when enabling IP forwarding
```

----------------------------------------

TITLE: dockerd Daemon Command-Line Options Reference
DESCRIPTION: A comprehensive list of command-line flags and their descriptions for configuring the Docker daemon (`dockerd`). These options control various aspects like networking, logging, storage, security, and TLS settings. Options with `list` or `map` types can be specified multiple times or take key-value pairs respectively.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
--ip-masq                               Enable IP masquerading for the default bridge network (default true)
--ip6tables                             Enable addition of ip6tables rules (default true)
--iptables                              Enable addition of iptables rules (default true)
--ipv6                                  Enable IPv6 networking for the default bridge network
--label list                            Set key=value labels to the daemon
--live-restore                          Enable live restore of docker when containers are still running
--log-driver string                     Default driver for container logs (default ""json-file"")
--log-format string                     Set the logging format (""text""|""json"") (default ""text"")
-l, --log-level string                      Set the logging level (""debug""|""info""|""warn""|""error""|""fatal"") (default ""info"")
--log-opt map                           Default log driver options for containers (default map[])
--max-concurrent-downloads int          Set the max concurrent downloads (default 3)
--max-concurrent-uploads int          Set the max concurrent uploads (default 5)
--max-download-attempts int             Set the max download attempts for each pull (default 5)
--metrics-addr string                   Set default address and port to serve the metrics api on
--mtu int                               Set the MTU for the default ""bridge"" network (default 1500)
--network-control-plane-mtu int         Network Control plane MTU (default 1500)
--no-new-privileges                     Set no-new-privileges by default for new containers
--no-proxy string                       Comma-separated list of hosts or IP addresses for which the proxy is skipped
--node-generic-resource list            Advertise user-defined resource
-p, --pidfile string                        Path to use for daemon PID file (default ""/var/run/docker.pid"")
--raw-logs                              Full timestamps without ANSI coloring
--registry-mirror list                  Preferred registry mirror
--rootless                              Enable rootless mode; typically used with RootlessKit
--seccomp-profile string                Path to seccomp profile. Set to ""unconfined"" to disable the default seccomp profile (default ""builtin"")
--selinux-enabled                       Enable selinux support
--shutdown-timeout int                  Set the default shutdown timeout (default 15)
-s, --storage-driver string                 Storage driver to use
--storage-opt list                      Storage driver options
--swarm-default-advertise-addr string   Set default address or interface for swarm advertised address
--tls                                   Use TLS; implied by --tlsverify
--tlscacert string                      Trust certs signed only by this CA (default ""~/.docker/ca.pem"")
--tlscert string                        Path to TLS certificate file (default ""~/.docker/cert.pem"")
--tlskey string                         Path to TLS key file (default ""~/.docker/key.pem"")
--tlsverify                             Use TLS and verify the remote
--userland-proxy                        Use userland proxy for loopback traffic (default true)
--userland-proxy-path string            Path to the userland proxy binary
--userns-remap string                   User/Group setting for user namespaces
--validate                              Validate daemon configuration and exit
-v, --version                               Print version information and quit
```

----------------------------------------

TITLE: Running and Configuring the Docker Daemon
DESCRIPTION: Examples demonstrating how to start the `dockerd` process, enable debug output, and activate experimental features using command-line flags. It also references configuration via the `daemon.json` file for persistent settings.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_2

LANGUAGE: Bash
CODE:
```
dockerd
```

LANGUAGE: Bash
CODE:
```
dockerd --debug
```

LANGUAGE: Bash
CODE:
```
dockerd --experimental
```

LANGUAGE: JSON
CODE:
```
""debug"": true
```

LANGUAGE: JSON
CODE:
```
""experimental"": true
```

----------------------------------------

TITLE: Docker Daemon Environment Variables Reference
DESCRIPTION: A comprehensive list of environment variables supported by the `dockerd` daemon, detailing their purpose and usage. This includes variables also used by the `docker` CLI and those specifically for proxy configuration, noting their precedence over other configuration methods.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Environment Variables:
  DOCKER_CERT_PATH:
    Description: Location of your authentication keys. This variable is used both by the `docker` CLI and the `dockerd` daemon.
  DOCKER_DRIVER:
    Description: The storage driver to use.
  DOCKER_RAMDISK:
    Description: If set this disables `pivot_root`.
  DOCKER_TLS_VERIFY:
    Description: When set Docker uses TLS and verifies the remote. This variable is used both by the `docker` CLI and the `dockerd` daemon.
  DOCKER_TMPDIR:
    Description: Location for temporary files created by the daemon.
  HTTP_PROXY:
    Description: Proxy URL for HTTP requests unless overridden by NoProxy. See the Go specification for details.
  HTTPS_PROXY:
    Description: Proxy URL for HTTPS requests unless overridden by NoProxy. See the Go specification for details.
  MOBY_DISABLE_PIGZ:
    Description: Disables the use of `unpigz` to decompress layers in parallel when pulling images, even if it is installed.
  NO_PROXY:
    Description: Comma-separated values specifying hosts that should be excluded from proxying. See the Go specification for details.
```

----------------------------------------

TITLE: Configure Docker Daemon to Listen on Multiple Sockets
DESCRIPTION: This command configures the Docker daemon to listen on the default Unix socket and two specific TCP IP addresses simultaneously. It demonstrates how to use multiple -H options for flexible daemon access, allowing the daemon to be accessible via different network interfaces.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_4

LANGUAGE: console
CODE:
```
sudo dockerd -H unix:///var/run/docker.sock -H tcp://192.168.59.106 -H tcp://10.10.10.2
```

----------------------------------------

TITLE: Connect Docker Client to Remote TCP Socket via -H Flag
DESCRIPTION: This command shows how to connect the Docker client to a remote Docker daemon listening on a TCP socket (0.0.0.0:2375) using the -H flag. It then lists running containers, demonstrating direct client-daemon communication over TCP.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_5

LANGUAGE: console
CODE:
```
docker -H tcp://0.0.0.0:2375 ps
```

----------------------------------------

TITLE: Connect Docker Client to Remote TCP Socket via DOCKER_HOST Environment Variable
DESCRIPTION: This command demonstrates setting the DOCKER_HOST environment variable to specify the Docker daemon's address. Once set, the Docker client automatically uses this variable for subsequent commands, eliminating the need for the -H flag in each command, and here it lists running containers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_6

LANGUAGE: console
CODE:
```
export DOCKER_HOST=""tcp://0.0.0.0:2375""

docker ps
```

----------------------------------------

TITLE: Enable TLS Verification for Docker Client Connection
DESCRIPTION: This snippet shows two equivalent ways to enable TLS verification for the Docker client: using the --tlsverify flag directly or setting the DOCKER_TLS_VERIFY environment variable to a non-empty value. Both methods ensure secure communication with the Docker daemon by enforcing TLS, and both commands list running containers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_7

LANGUAGE: console
CODE:
```
docker --tlsverify ps
# or
export DOCKER_TLS_VERIFY=1
docker ps
```

----------------------------------------

TITLE: Connect Docker Client to Remote Daemon via SSH
DESCRIPTION: These commands illustrate various ways to connect the Docker client to a remote daemon over SSH. They show different levels of specificity for the SSH connection string, including user, host, port, and remote socket path. Public key authentication is required for this connection method.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_8

LANGUAGE: console
CODE:
```
docker -H ssh://me@example.com:22/var/run/docker.sock ps
docker -H ssh://me@example.com:22 ps
docker -H ssh://me@example.com ps
docker -H ssh://example.com ps
```

----------------------------------------

TITLE: Docker Host Binding Format for -H Option
DESCRIPTION: Defines the general syntax for specifying host and port assignments using the Docker daemon's or client's -H option. This format supports both TCP connections and Unix socket paths.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_9

LANGUAGE: text
CODE:
```
tcp://[host]:[port][path] or unix://path
```

----------------------------------------

TITLE: Examples of Docker Host Binding Formats
DESCRIPTION: Illustrates various ways to use the -H option for Docker host binding, covering default TCP connections, specific host/port combinations, paths, and Unix socket specifications.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_10

LANGUAGE: text
CODE:
```
-   tcp:// -> TCP connection to 127.0.0.1 on either port 2376 (TLS) or 2375 (plain text).
-   tcp://host:2375 -> TCP connection on host:2375
-   tcp://host:2375/path -> TCP connection on host:2375 and prepend path to all requests
-   unix://path/to/socket -> Unix socket located at path/to/socket
```

----------------------------------------

TITLE: Run Docker Daemon with Custom TCP Port
DESCRIPTION: Demonstrates how to start the Docker daemon (`dockerd`) and bind it to a specific IP address and port (e.g., 0.0.0.0:5555) for network access. This command runs the daemon in the background.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_11

LANGUAGE: console
CODE:
```
$ sudo <path to>/dockerd -H 0.0.0.0:5555 &
```

----------------------------------------

TITLE: Pull Docker Image Using Custom Daemon Port
DESCRIPTION: Shows how to use the Docker client to connect to a daemon listening on a non-default TCP port (e.g., :5555) to pull an image. This command specifies the host using the -H option.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker -H :5555 pull ubuntu
```

----------------------------------------

TITLE: Run Docker Daemon with Multiple Host Bindings
DESCRIPTION: Illustrates how to configure the Docker daemon to listen on multiple host bindings simultaneously, including both a TCP port (127.0.0.1:2375) and a Unix socket (/var/run/docker.sock).
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_13

LANGUAGE: console
CODE:
```
$ sudo dockerd -H tcp://127.0.0.1:2375 -H unix:///var/run/docker.sock &
```

----------------------------------------

TITLE: Pull Docker Image Using Default Unix Socket
DESCRIPTION: Example of pulling an Ubuntu image using the Docker client's default connection to the Unix socket, assuming the daemon is configured to listen on it.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_14

LANGUAGE: console
CODE:
```
$ docker pull ubuntu
```

----------------------------------------

TITLE: Pull Docker Image Using Specific TCP Port
DESCRIPTION: Example of pulling an Ubuntu image by explicitly connecting the Docker client to a daemon listening on a specific TCP port (e.g., tcp://127.0.0.1:2375).
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_15

LANGUAGE: console
CODE:
```
$ docker -H tcp://127.0.0.1:2375 pull ubuntu
```

----------------------------------------

TITLE: Configure ZFS Storage Driver with Custom Filesystem
DESCRIPTION: Demonstrates how to start the Docker daemon using the ZFS storage driver and specify a custom ZFS filesystem (`zroot/docker`) for its datasets via the `--storage-opt` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_16

LANGUAGE: console
CODE:
```
$ sudo dockerd -s zfs --storage-opt zfs.fsname=zroot/docker
```

----------------------------------------

TITLE: Configure Btrfs Storage Driver with Minimum Space
DESCRIPTION: Shows how to configure the Docker daemon to use the Btrfs storage driver and set a minimum space (`10G`) for container subvolumes using the `btrfs.min_space` option.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_17

LANGUAGE: console
CODE:
```
$ sudo dockerd -s btrfs --storage-opt btrfs.min_space=10G
```

----------------------------------------

TITLE: Configure Overlay2 Storage Driver with Max Container Size
DESCRIPTION: Illustrates how to set the default maximum size (`1G`) for containers when using the Overlay2 storage driver. This option is effective only when the backing filesystem is XFS mounted with `pquota`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_18

LANGUAGE: console
CODE:
```
$ sudo dockerd -s overlay2 --storage-opt overlay2.size=1G
```

----------------------------------------

TITLE: Configure Windowsfilter Storage Driver with Sandbox Size
DESCRIPTION: Example of setting the size (`40G`) for the container sandbox when using the Windowsfilter storage driver on Windows. The default size is 20G.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_19

LANGUAGE: powershell
CODE:
```
C:\> dockerd --storage-opt size=40G
```

----------------------------------------

TITLE: Docker Daemon Storage Driver Options Reference
DESCRIPTION: Detailed reference for configuring Docker daemon storage drivers and their specific options using the `--storage-opt` flag. Options are prefixed by the driver name.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
Storage Driver Options:
  --storage-opt:
    Description: Configures particular storage drivers. Options are prefixed by driver name (e.g., zfs., btrfs.).

  ZFS Options:
    zfs.fsname:
      Description: Specifies the ZFS filesystem that the daemon should use to create its datasets.
      Default: /var/lib/docker

  Btrfs Options:
    btrfs.min_space:
      Description: Specifies the minimum size to use when creating the subvolume for containers. Ensures 'size' option isn't smaller than this.

  Overlay2 Options:
    overlay2.size:
      Description: Sets the default max size of the container.
      Conditions: Supported only when the backing filesystem is 'xfs' and mounted with 'pquota' mount option.

  Windowsfilter Options:
    size:
      Description: Specifies the size to use when creating the sandbox for containers.
      Default: 20G
```

----------------------------------------

TITLE: Run Docker Container with Specific Runtime (PATH)
DESCRIPTION: Demonstrates how to run a Docker container using a specific containerd shim (e.g., Kata Containers) when the shim is installed on the system's PATH, without requiring daemon configuration changes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_21

LANGUAGE: console
CODE:
```
$ docker run --runtime io.containerd.kata.v2
```

----------------------------------------

TITLE: Basic Docker Daemon Runtime Configuration in daemon.json
DESCRIPTION: Illustrates the fundamental structure for adding custom runtimes to the Docker daemon's configuration file (`daemon.json`), where `<runtime>` is the name used with `docker run --runtime`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_22

LANGUAGE: json
CODE:
```
{
  ""runtimes"": {
    ""<runtime>"": {}
  }
}
```

----------------------------------------

TITLE: Configure Docker Daemon for Containerd Shim Runtime
DESCRIPTION: Shows the `daemon.json` configuration for registering a container runtime that implements its own containerd shim, specifying `runtimeType` and an optional `options` field.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_23

LANGUAGE: json
CODE:
```
{
    ""runtimes"": {
      ""<runtime>"": {
        ""runtimeType"": ""<name-or-path>"",
        ""options"": {}
      }
    }
  }
```

----------------------------------------

TITLE: Configure Docker Daemon for runc Drop-in Replacement Runtime
DESCRIPTION: Presents the `daemon.json` configuration for registering a container runtime designed as a drop-in replacement for runc, including `path` to the binary and optional `runtimeArgs`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_24

LANGUAGE: json
CODE:
```
{
    ""runtimes"": {
      ""<runtime>"": {
        ""path"": ""/path/to/bin"",
        ""runtimeArgs"": [""...args""]
      }
    }
  }
```

----------------------------------------

TITLE: Reload Docker Daemon Configuration
DESCRIPTION: Command to reload the Docker daemon's configuration after making changes to `daemon.json`, ensuring new runtime settings take effect without a full restart.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_25

LANGUAGE: console
CODE:
```
$ sudo systemctl reload dockerd
```

----------------------------------------

TITLE: Detailed Docker Daemon Configuration for Containerd Shims
DESCRIPTION: Specifies the `daemon.json` format for registering containerd shims, detailing the use of `runtimeType` (fully qualified name or binary path) and the optional `options` field for shim-specific configurations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_26

LANGUAGE: json
CODE:
```
{
  ""runtimes"": {
    ""<runtime>"": {
      ""runtimeType"": ""<name-or-path>"",
      ""options"": {}
    }
  }
}
```

----------------------------------------

TITLE: Example Docker Daemon Configuration for gVisor Runtime
DESCRIPTION: Provides a concrete `daemon.json` example for configuring the gVisor runtime using its containerd shim (`io.containerd.runsc.v1`), including `TypeUrl` and `ConfigPath` within the `options`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_27

LANGUAGE: json
CODE:
```
{
  ""runtimes"": {
    ""gvisor"": {
      ""runtimeType"": ""io.containerd.runsc.v1"",
      ""options"": {
        ""TypeUrl"": ""io.containerd.runsc.v1.options"",
        ""ConfigPath"": ""/etc/containerd/runsc.toml""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Multiple gVisor Runtimes in Docker Daemon
DESCRIPTION: Demonstrates how to register multiple instances of the same containerd shim runtime (e.g., gVisor) in `daemon.json`, each with distinct names and potentially different configuration paths.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_28

LANGUAGE: json
CODE:
```
{
  ""runtimes"": {
    ""gvisor-foo"": {
      ""runtimeType"": ""io.containerd.runsc.v1"",
      ""options"": {
        ""TypeUrl"": ""io.containerd.runsc.v1.options"",
        ""ConfigPath"": ""/etc/containerd/runsc-foo.toml""
      }
    },
    ""gvisor-bar"": {
      ""runtimeType"": ""io.containerd.runsc.v1"",
      ""options"": {
        ""TypeUrl"": ""io.containerd.runsc.v1.options"",
        ""ConfigPath"": ""/etc/containerd/runsc-bar.toml""
      }
    }
  }
}
```

----------------------------------------

TITLE: Configure Docker Daemon for runc Drop-in Replacement (JSON)
DESCRIPTION: This configuration snippet demonstrates how to register a custom runtime as a drop-in replacement for runc within the Docker daemon's configuration file. It specifies the absolute path to the runtime binary and allows for optional runtime arguments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_29

LANGUAGE: json
CODE:
```
{
  ""runtimes"": {
    ""<runtime>"": {
      ""path"": ""/path/to/binary"",
      ""runtimeArgs"": [""...args""]
    }
  }
}
```

----------------------------------------

TITLE: Example Docker Daemon runc Drop-in Replacement Path (JSON)
DESCRIPTION: This example shows a simplified JSON configuration for the Docker daemon, registering 'runc' itself as a drop-in replacement by specifying its name, implying it's available on the system's PATH.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_30

LANGUAGE: json
CODE:
```
{
  ""runtimes"": {
    ""runc"": {
      ""path"": ""runc""
    }
  }
}
```

----------------------------------------

TITLE: Register Docker Daemon runc Drop-in Replacement (CLI)
DESCRIPTION: This command demonstrates how to register a custom runtime as a runc drop-in replacement directly via the `dockerd` command-line interface using the `--add-runtime` flag. Note that defining runtime arguments is not supported with this CLI method.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_31

LANGUAGE: console
CODE:
```
$ sudo dockerd --add-runtime <runtime>=<path>
```

----------------------------------------

TITLE: Set Default Docker Container Runtime (JSON)
DESCRIPTION: This JSON snippet illustrates how to configure the Docker daemon to use a specific fully qualified containerd runtime shim or a registered runtime as the default for all new containers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_32

LANGUAGE: json
CODE:
```
{
  ""default-runtime"": ""io.containerd.runsc.v1""
}
```

----------------------------------------

TITLE: Set Default Docker Container Runtime (CLI)
DESCRIPTION: This command shows how to specify the default container runtime for the Docker daemon directly using the `--default-runtime` CLI flag, pointing to a specific containerd shim.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_33

LANGUAGE: console
CODE:
```
$ dockerd --default-runtime io.containerd.runsc.v1
```

----------------------------------------

TITLE: Run Docker Daemon with Standalone containerd (CLI)
DESCRIPTION: This command demonstrates how to start the Docker daemon and instruct it to connect to a manually managed `containerd` instance by providing the path to its socket via the `--containerd` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_34

LANGUAGE: console
CODE:
```
$ sudo dockerd --containerd /run/containerd/containerd.sock
```

----------------------------------------

TITLE: Configure Docker Daemon Cgroup Driver (CLI)
DESCRIPTION: This command illustrates how to set the cgroup driver for the Docker daemon using the `--exec-opt native.cgroupdriver` flag. This example configures the daemon to use `systemd` for cgroup management.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_35

LANGUAGE: console
CODE:
```
$ sudo dockerd --exec-opt native.cgroupdriver=systemd
```

----------------------------------------

TITLE: Configure Docker Daemon Windows Container Isolation (CLI)
DESCRIPTION: This command demonstrates how to specify the default container isolation technology for Windows containers using the `--exec-opt isolation` flag. The example sets `hyperv` as the default isolation method.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_36

LANGUAGE: console
CODE:
```
> dockerd --exec-opt isolation=hyperv
```

----------------------------------------

TITLE: Set Docker Daemon DNS Server (CLI)
DESCRIPTION: This command shows how to configure a specific DNS server for all Docker containers launched by the daemon using the `--dns` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_37

LANGUAGE: console
CODE:
```
$ sudo dockerd --dns 8.8.8.8
```

----------------------------------------

TITLE: Set Docker Daemon DNS Search Domain (CLI)
DESCRIPTION: This command demonstrates how to set a DNS search domain for all Docker containers managed by the daemon using the `--dns-search` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_38

LANGUAGE: console
CODE:
```
$ sudo dockerd --dns-search example.com
```

----------------------------------------

TITLE: Configure Docker Daemon for Insecure Registries
DESCRIPTION: Demonstrates how to configure the Docker daemon to allow communication with insecure registries. This can be done by specifying individual registry addresses or CIDR ranges, typically used for testing or local development environments where TLS is not enforced or trusted.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_39

LANGUAGE: Shell
CODE:
```
dockerd --insecure-registry myregistry:5000
dockerd --insecure-registry 10.1.0.0/16
```

----------------------------------------

TITLE: Run Docker Daemon with HTTPS Proxy
DESCRIPTION: Illustrates how to start the Docker daemon with an HTTPS proxy configured. This includes an example with optional username and password for proxy authentication, essential when Docker needs to communicate through a corporate proxy server.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_40

LANGUAGE: Shell
CODE:
```
HTTPS_PROXY=http://username:password@proxy:port/ dockerd
```

----------------------------------------

TITLE: Start Docker Daemon with Authorization Plugins
DESCRIPTION: This command demonstrates how to launch the Docker daemon (`dockerd`) with one or more authorization plugins enabled. Each plugin specified by `PLUGIN_ID` will be consulted to allow or deny requests made to the daemon.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_41

LANGUAGE: console
CODE:
```
$ sudo dockerd --authorization-plugin=plugin1 --authorization-plugin=plugin2,...
```

----------------------------------------

TITLE: Configure Host Gateway IPs and Test Connectivity
DESCRIPTION: This example demonstrates configuring custom IPv4 and IPv6 addresses for `host-gateway` in the Docker daemon's `daemon.json` file. It then shows how containers can use `host.docker.internal` to ping these configured host gateway IPs, enabling connectivity to services on the host.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_42

LANGUAGE: json
CODE:
```
{ ""host-gateway-ips"": [""192.0.2.1"", ""2001:db8::1111""]}
```

LANGUAGE: console
CODE:
```
$ cat > /etc/docker/daemon.json
{ ""host-gateway-ips"": [""192.0.2.1"", ""2001:db8::1111""]}
$ sudo systemctl restart docker
$ docker run -it --add-host host.docker.internal:host-gateway \
  busybox ping host.docker.internal 
PING host.docker.internal (192.0.2.1): 56 data bytes
$ docker run -it --add-host host.docker.internal:host-gateway \
  busybox ping -6 host.docker.internal
PING host.docker.internal (2001:db8::1111): 56 data bytes
```

----------------------------------------

TITLE: Enable and Configure CDI Devices in Docker Daemon
DESCRIPTION: This JSON snippet for `daemon.json` enables the experimental Container Device Interface (CDI) feature and specifies custom directories where CDI specifications are located. This allows Docker containers to interact with third-party devices.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_43

LANGUAGE: json
CODE:
```
{
  ""features"": {
     ""cdi"": true
  },
  ""cdi-spec-dirs"": [""/etc/cdi/"", ""/var/run/cdi""]
}
```

----------------------------------------

TITLE: Configure Docker Daemon Log Format via Command Line
DESCRIPTION: Demonstrates how to set the Docker daemon's logging format to JSON using the `--log-format` command-line option when starting `dockerd`. This output shows an example of the JSON log format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_44

LANGUAGE: console
CODE:
```
$ dockerd --log-format=json
# ...
{""level"":""info"",""msg"":""API listen on /var/run/docker.sock"",""time"":""2024-09-16T11:06:08.558145428Z""}
```

----------------------------------------

TITLE: Configure Docker Daemon Log Format via daemon.json
DESCRIPTION: Shows how to configure the Docker daemon's logging format to JSON by setting the `log-format` field within the `daemon.json` configuration file. This is an alternative to the command-line option.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_45

LANGUAGE: json
CODE:
```
{
  ""log-format"": ""json""
}
```

----------------------------------------

TITLE: Set Docker Data and Temporary Directories
DESCRIPTION: Illustrates how to set the `DOCKER_TMPDIR` environment variable for temporary files and configure the Docker daemon's data root using the `--data-root` option. It also shows how to disable IP masquerading with `--ip-masq=false`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_46

LANGUAGE: console
CODE:
```
$ export DOCKER_TMPDIR=/mnt/disk2/tmp
$ sudo -E dockerd --data-root /var/lib/docker -H unix://
```

----------------------------------------

TITLE: Advertise Node Generic Resources in Swarm
DESCRIPTION: Example of configuring `node-generic-resources` in `daemon.json` to advertise custom resources like NVIDIA GPUs in a Docker Swarm cluster. This allows services to request specific hardware resources for task scheduling.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_47

LANGUAGE: json
CODE:
```
{
  ""node-generic-resources"": [
    ""NVIDIA-GPU=UUID1"",
    ""NVIDIA-GPU=UUID2""
  ]
}
```

----------------------------------------

TITLE: Enable Docker Daemon Features via CLI or Configuration File
DESCRIPTION: Demonstrates how to enable specific features for the Docker daemon using either the `--feature` command-line option or by defining them within the `daemon.json` configuration file. It highlights that features should be configured exclusively through one method (either command-line or configuration file) to avoid errors, and that the `--feature` option can be specified multiple times.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_48

LANGUAGE: console
CODE:
```
$ dockerd --feature cdi=true --feature containerd-snapshotter
```

LANGUAGE: json
CODE:
```
{
  ""features"": {
    ""cdi"": true,
    ""containerd-snapshotter"": true
  }
}
```

----------------------------------------

TITLE: Validate Docker Daemon Configuration Files
DESCRIPTION: Illustrates how to validate a Docker daemon configuration file without starting the daemon using the `--validate` option in conjunction with `--config-file`. It shows examples of validating both a valid and an invalid configuration file, demonstrating the expected output and exit codes (0 for valid, non-zero for invalid) for each scenario.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_49

LANGUAGE: console
CODE:
```
$ dockerd --validate --config-file=/tmp/valid-config.json
configuration OK

$ echo $?
0
```

LANGUAGE: console
CODE:
```
$ dockerd --validate --config-file /tmp/invalid-config.json
unable to configure the Docker daemon with file /tmp/invalid-config.json: the following directives don't match any configuration option: unknown-option

$ echo $?
1
```

----------------------------------------

TITLE: Full Example of Docker Daemon daemon.json Configuration on Linux
DESCRIPTION: This JSON snippet illustrates a complete set of configuration options available for the Docker daemon's `daemon.json` file on Linux systems. It covers settings for builder, container runtime, networking, logging, security, and more. The default location for this file is `/etc/docker/daemon.json`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_50

LANGUAGE: json
CODE:
```
{
  ""allow-direct-routing"": false,
  ""authorization-plugins"": [],
  ""bip"": """",
  ""bip6"": """",
  ""bridge"": """",
  ""builder"": {
    ""gc"": {
      ""enabled"": true,
      ""defaultKeepStorage"": ""10GB"",
      ""policy"": [
        { ""keepStorage"": ""10GB"", ""filter"": [""unused-for=2200h""] },
        { ""keepStorage"": ""50GB"", ""filter"": [""unused-for=3300h""] },
        { ""keepStorage"": ""100GB"", ""all"": true }
      ]
    }
  },
  ""cgroup-parent"": """",
  ""containerd"": ""/run/containerd/containerd.sock"",
  ""containerd-namespace"": ""docker"",
  ""containerd-plugins-namespace"": ""docker-plugins"",
  ""data-root"": """",
  ""debug"": true,
  ""default-address-pools"": [
    {
      ""base"": ""172.30.0.0/16"",
      ""size"": 24
    },
    {
      ""base"": ""172.31.0.0/16"",
      ""size"": 24
    }
  ],
  ""default-cgroupns-mode"": ""private"",
  ""default-gateway"": """",
  ""default-gateway-v6"": """",
  ""default-network-opts"": {},
  ""default-runtime"": ""runc"",
  ""default-shm-size"": ""64M"",
  ""default-ulimits"": {
    ""nofile"": {
      ""Hard"": 64000,
      ""Name"": ""nofile"",
      ""Soft"": 64000
    }
  },
  ""dns"": [],
  ""dns-opts"": [],
  ""dns-search"": [],
  ""exec-opts"": [],
  ""exec-root"": """",
  ""experimental"": false,
  ""features"": {
    ""cdi"": true,
    ""containerd-snapshotter"": true
  },
  ""fixed-cidr"": """",
  ""fixed-cidr-v6"": """",
  ""group"": """",
  ""host-gateway-ip"": """",
  ""hosts"": [],
  ""proxies"": {
    ""http-proxy"": ""http://proxy.example.com:80"",
    ""https-proxy"": ""https://proxy.example.com:443"",
    ""no-proxy"": ""*.test.example.com,.example.org""
  },
  ""icc"": false,
  ""init"": false,
  ""init-path"": ""/usr/libexec/docker-init"",
  ""insecure-registries"": [],
  ""ip"": ""0.0.0.0"",
  ""ip-forward"": false,
  ""ip-masq"": false,
  ""iptables"": false,
  ""ip6tables"": false,
  ""ipv6"": false,
  ""labels"": [],
  ""live-restore"": true,
  ""log-driver"": ""json-file"",
  ""log-format"": ""text"",
  ""log-level"": """",
  ""log-opts"": {
    ""cache-disabled"": ""false"",
    ""cache-max-file"": ""5"",
    ""cache-max-size"": ""20m"",
    ""cache-compress"": ""true"",
    ""env"": ""os,customer"",
    ""labels"": ""somelabel"",
    ""max-file"": ""5"",
    ""max-size"": ""10m""
  },
  ""max-concurrent-downloads"": 3,
  ""max-concurrent-uploads"": 5,
  ""max-download-attempts"": 5,
  ""mtu"": 0,
  ""no-new-privileges"": false,
  ""node-generic-resources"": [
    ""NVIDIA-GPU=UUID1"",
    ""NVIDIA-GPU=UUID2""
  ],
  ""pidfile"": """",
  ""raw-logs"": false,
  ""registry-mirrors"": [],
  ""runtimes"": {
    ""cc-runtime"": {
      ""path"": ""/usr/bin/cc-runtime""
    },
    ""custom"": {
      ""path"": ""/usr/local/bin/my-runc-replacement"",
      ""runtimeArgs"": [
        ""--debug""
      ]
    }
  },
  ""seccomp-profile"": """",
  ""selinux-enabled"": false,
  ""shutdown-timeout"": 15,
  ""storage-driver"": """",
  ""storage-opts"": [],
  ""swarm-default-advertise-addr"": """",
  ""tls"": true,
  ""tlscacert"": """",
  ""tlscert"": """",
  ""tlskey"": """",
  ""tlsverify"": true,
  ""userland-proxy"": false,
  ""userland-proxy-path"": ""/usr/libexec/docker-proxy"",
  ""userns-remap"": """"
}
```

----------------------------------------

TITLE: Full Docker Daemon Configuration Example for Windows
DESCRIPTION: An exhaustive example of the `daemon.json` configuration file, showcasing all available options for Docker daemon on Windows. This includes settings for authorization, networking, logging, storage, and various runtime parameters. The `default-runtime` option, if unset, allows automatic detection, with accepted values like `com.docker.hcsshim.v1` and `io.containerd.runhcs.v1` for different HCS API versions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_51

LANGUAGE: json
CODE:
```
{
  ""authorization-plugins"": [],
  ""bridge"": """",
  ""containerd"": ""\\\\.\\pipe\\containerd-containerd"",
  ""containerd-namespace"": ""docker"",
  ""containerd-plugins-namespace"": ""docker-plugins"",
  ""data-root"": """",
  ""debug"": true,
  ""default-network-opts"": {},
  ""default-runtime"": """",
  ""default-ulimits"": {},
  ""dns"": [],
  ""dns-opts"": [],
  ""dns-search"": [],
  ""exec-opts"": [],
  ""experimental"": false,
  ""features"": {},
  ""fixed-cidr"": """",
  ""group"": """",
  ""host-gateway-ip"": """",
  ""hosts"": [],
  ""insecure-registries"": [],
  ""labels"": [],
  ""log-driver"": """",
  ""log-format"": ""text"",
  ""log-level"": """",
  ""max-concurrent-downloads"": 3,
  ""max-concurrent-uploads"": 5,
  ""max-download-attempts"": 5,
  ""mtu"": 0,
  ""pidfile"": """",
  ""raw-logs"": false,
  ""registry-mirrors"": [],
  ""shutdown-timeout"": 15,
  ""storage-driver"": """",
  ""storage-opts"": [],
  ""swarm-default-advertise-addr"": """",
  ""tlscacert"": """",
  ""tlscert"": """",
  ""tlskey"": """",
  ""tlsverify"": true
}
```

----------------------------------------

TITLE: Docker Daemon Features Configuration Example
DESCRIPTION: An example demonstrating how to enable or disable specific experimental or optional features within the `daemon.json` file using the `features` field.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_52

LANGUAGE: json
CODE:
```
{
  ""features"": {
    ""some-feature"": true,
    ""some-disabled-feature-enabled-by-default"": false
  }
}
```

----------------------------------------

TITLE: Docker Daemon `features` Field Options
DESCRIPTION: Detailed documentation for the individual feature flags available within the `features` object of the `daemon.json` configuration file, explaining their purpose and behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_53

LANGUAGE: APIDOC
CODE:
```
features: object
  some-feature: boolean
    Description: Example feature.
  some-disabled-feature-enabled-by-default: boolean
    Description: Example feature that is disabled by default.
  containerd-snapshotter: boolean
    Description: When set to `true`, the daemon uses containerd snapshotters instead of the classic storage drivers for storing image and container data.
  windows-dns-proxy: boolean
    Description: When set to `true`, the daemon's internal DNS resolver will forward requests to external servers. This option is only allowed on Windows.
    Warning: The `windows-dns-proxy` feature flag will be removed in a future release.
```

----------------------------------------

TITLE: Essential Docker Daemon Configuration Flags
DESCRIPTION: Lists the critical command-line flags and configuration options that must be set uniquely for each Docker daemon instance when running multiple daemons on the same host. These options prevent conflicts related to networking, data storage, and process management.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_54

LANGUAGE: text
CODE:
```
-b, --bridge=                          Attach containers to a network bridge
--exec-root=/var/run/docker            Root of the Docker execdriver
--data-root=/var/lib/docker            Root of persisted Docker data
-p, --pidfile=/var/run/docker.pid      Path to use for daemon PID file
-H, --host=[]                          Daemon socket(s) to connect to
--iptables=true                        Enable addition of iptables rules
--config-file=/etc/docker/daemon.json  Daemon configuration file
--tlscacert=""~/.docker/ca.pem""         Trust certs signed only by this CA
--tlscert=""~/.docker/cert.pem""         Path to TLS certificate file
--tlskey=""~/.docker/key.pem""           Path to TLS key file
```

----------------------------------------

TITLE: Example Bootstrap Docker Daemon Command
DESCRIPTION: An example console command demonstrating how to start a separate 'bootstrap' instance of the Docker daemon. This configuration uses a unique host socket, PID file, and data/execution roots, while also disabling iptables, IP masquerading, and setting the bridge to 'none' for isolation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_55

LANGUAGE: console
CODE:
```
$ sudo dockerd \
        -H unix:///var/run/docker-bootstrap.sock \
        -p /var/run/docker-bootstrap.pid \
        --iptables=false \
        --ip-masq=false \
        --bridge=none \
        --data-root=/var/lib/docker-bootstrap \
        --exec-root=/var/run/docker-bootstrap
```

----------------------------------------

TITLE: Configure Default Bridge Network Options in daemon.json
DESCRIPTION: This JSON snippet demonstrates how to set default options for the 'bridge' network driver within the Docker `daemon.json` configuration file. It specifies `host_binding_ipv4` and `mtu` values that will apply to newly created bridge networks after the daemon is restarted.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_56

LANGUAGE: json
CODE:
```
{
  ""default-network-opts"": {
    ""bridge"": {
      ""com.docker.network.bridge.host_binding_ipv4"": ""127.0.0.1"",
      ""com.docker.network.driver.mtu"": ""1234""
    }
  }
}
```

----------------------------------------

TITLE: Verify Default Network Options for a New Docker Network
DESCRIPTION: This console example shows how to create a new Docker network and then inspect its options to confirm that the default network options configured in `daemon.json` have been applied. It uses `docker network create` to make a new network and `docker network inspect` with a format string to view its options.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_57

LANGUAGE: console
CODE:
```
$ docker network create mynet
$ docker network inspect mynet --format ""{{json .Options}}""
```

----------------------------------------

TITLE: Start Docker Daemon with Default Network Options via CLI Flag
DESCRIPTION: This console command illustrates how to start the Docker daemon (`dockerd`) and specify default network driver options using the `--default-network-opt` CLI flag. This method is useful for testing and debugging purposes, but `daemon.json` is preferred for persistent configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/dockerd.md#_snippet_58

LANGUAGE: console
CODE:
```
$ sudo dockerd \
  --default-network-opt bridge=com.docker.network.bridge.host_binding_ipv4=127.0.0.1 \
  --default-network-opt bridge=com.docker.network.driver.mtu=1234
```

----------------------------------------

TITLE: General Docker Run Command Syntax
DESCRIPTION: Illustrates the general syntax for the `docker run` command, including optional parameters, the image reference (name, tag, or digest), and any commands or arguments to be executed inside the container upon startup.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
```

----------------------------------------

TITLE: Run Docker Container with Specific Image Digest
DESCRIPTION: Demonstrates how to run a Docker container using a content-addressable image digest instead of a tag. This ensures that a specific, immutable version of the image is used, providing greater consistency and security.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker run alpine@sha256:9cacb71397b640eca97488cf08582ae4e4068513101088e9f96c9814bfda95e0 date
```

----------------------------------------

TITLE: Start Interactive Shell in Docker Container
DESCRIPTION: Shows how to start an interactive shell (`sh`) inside a Docker container. The `-it` flags allocate a pseudo-TTY and keep `stdin` open, allowing direct interaction with the container's command line.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker run -it IMAGE sh
```

----------------------------------------

TITLE: Run Docker Container in Detached Mode
DESCRIPTION: Explains how to run a Docker container in the background using the `-d` or `--detach` flag. This allows the container to run without occupying the terminal window, returning control to the user immediately.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker run -d <IMAGE>
```

----------------------------------------

TITLE: Interact with Detached Docker Containers
DESCRIPTION: Demonstrates common commands to interact with a container running in the background. This includes `docker ps` to list running containers, `docker logs` to view the container's output, and `docker attach` to re-attach to its standard I/O streams.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker run -d nginx
0246aa4d1448a401cabd2ce8f242192b6e7af721527e48a810463366c7ff54f1
$ docker ps
CONTAINER ID   IMAGE     COMMAND                  CREATED         STATUS        PORTS     NAMES
0246aa4d1448   nginx     ""/docker-entrypoint.…""   2 seconds ago   Up 1 second   80/tcp    pedantic_liskov
$ docker logs -n 5 0246aa4d1448
2023/11/06 15:58:23 [notice] 1#1: start worker process 33
2023/11/06 15:58:23 [notice] 1#1: start worker process 34
2023/11/06 15:58:23 [notice] 1#1: start worker process 35
2023/11/06 15:58:23 [notice] 1#1: start worker process 36
2023/11/06 15:58:23 [notice] 1#1: start worker process 37
$ docker attach 0246aa4d1448
^C
2023/11/06 15:58:40 [notice] 1#1: signal 2 (SIGINT) received, exiting
```

----------------------------------------

TITLE: Filter Docker Containers by Image
DESCRIPTION: Demonstrates how to use the `docker ps` command with the `--filter ancestor` flag to list containers that were created from a specific Docker image, such as `nginx:alpine`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker ps -q --filter ancestor=nginx:alpine
```

----------------------------------------

TITLE: Create Custom Docker Network and Connect Containers
DESCRIPTION: Illustrates the process of creating a custom Docker network (`my-net`) and attaching multiple containers (`web` and `busybox`) to it. It then shows how containers on the same custom network can communicate using their container names as DNS hostnames, demonstrated by a `ping` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker network create my-net
$ docker run -d --name web --network my-net nginx:alpine
$ docker run --rm -it --network my-net busybox
/ # ping web
PING web (172.18.0.2): 56 data bytes
64 bytes from 172.18.0.2: seq=0 ttl=64 time=0.326 ms
64 bytes from 172.18.0.2: seq=1 ttl=64 time=0.257 ms
64 bytes from 172.18.0.2: seq=2 ttl=64 time=0.281 ms
^C
--- web ping statistics ---
3 packets transmitted, 3 packets received, 0% packet loss
round-trip min/avg/max = 0.257/0.288/0.326 ms
```

----------------------------------------

TITLE: Basic Docker Volume Mount Syntax
DESCRIPTION: Provides the general syntax for creating a Docker volume mount using the `docker run --mount` command. It highlights the required `source` (volume name) and `target` (in-container path) parameters for persistent data storage.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker run --mount source=<VOLUME_NAME>,target=[PATH] [IMAGE] [COMMAND...]
```

----------------------------------------

TITLE: Demonstrate Docker Volume Data Persistence
DESCRIPTION: Demonstrates the persistence of data stored in a Docker volume. It shows how data written to a volume by one container remains accessible even after that container is removed, and can be read by another container mounting the same volume.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker run --rm --mount source=my_volume,target=/foo busybox \
  echo ""hello, volume!"" > /foo/hello.txt
$ docker run --mount source=my_volume,target=/bar busybox
  cat /bar/hello.txt
hello, volume!
```

----------------------------------------

TITLE: Create Docker Bind Mount
DESCRIPTION: Demonstrates how to create a Docker bind mount using the `--mount` flag. It specifies the `type` as `bind`, the `source` path on the host, and the `target` destination inside the container, enabling file sharing.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker run -it --mount type=bind,source=[PATH],target=[PATH] busybox
```

----------------------------------------

TITLE: Interact with Docker Bind Mount and Verify Changes
DESCRIPTION: Shows how to write a file from inside a container to a bind-mounted directory and then verify the file's presence on the host filesystem. This illustrates the read-write nature of bind mounts and how changes are reflected instantly.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker run -it --mount type=bind,source=.,target=/foo busybox
/ # echo ""hello from container"" > /foo/hello.txt
/ # exit
$ cat hello.txt
hello from container
```

----------------------------------------

TITLE: Docker Exit Code 125: Daemon Error
DESCRIPTION: Illustrates an exit code of 125, which signifies an error with the Docker daemon itself. This typically occurs when an invalid command-line flag is provided to the `docker run` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker run --foo busybox; echo $?

flag provided but not defined: --foo
See 'docker run --help'.
125
```

----------------------------------------

TITLE: Docker Exit Code 126: Command Cannot Be Invoked
DESCRIPTION: Demonstrates an exit code of 126, indicating that the specified container command could not be invoked. This often happens when the command points to a non-executable path, such as a directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker run busybox /etc; echo $?

docker: Error response from daemon: Container command '/etc' could not be invoked.
126
```

----------------------------------------

TITLE: Docker Exit Code 127: Command Not Found
DESCRIPTION: Shows an exit code of 127, which means the contained command was not found or does not exist within the container's environment. This occurs when the specified command is not a valid executable.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker run busybox foo; echo $?

docker: Error response from daemon: Container command 'foo' not found or does not exist.
127
```

----------------------------------------

TITLE: Docker Exit Code: Application Specific
DESCRIPTION: Explains that any exit code other than 125, 126, or 127 represents the exit code of the command executed inside the container. This demonstrates how an application's own exit status is propagated to the host.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_14

LANGUAGE: console
CODE:
```
$ docker run busybox /bin/sh -c 'exit 3'
$ echo $?
3
```

----------------------------------------

TITLE: Docker Container Resource Limit Options
DESCRIPTION: Details the command-line options available for setting runtime resource constraints on Docker containers, including memory, CPU, and block I/O limits. Each option specifies its format, units, and specific behaviors or minimums.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
Docker Runtime Resource Options:
  -m, --memory="""": Memory limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g. Minimum is 6M.
  --memory-swap="""": Total memory limit (memory + swap, format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g.
  --memory-reservation="""": Memory soft limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g.
  --kernel-memory="""": Kernel memory limit (format: <number>[<unit>]). Number is a positive integer. Unit can be one of b, k, m, or g. Minimum is 4M.
  -c, --cpu-shares=0: CPU shares (relative weight)
  --cpus=0.000: Number of CPUs. Number is a fractional number. 0.000 means no limit.
  --cpu-period=0: Limit the CPU CFS (Completely Fair Scheduler) period
  --cpuset-cpus="""": CPUs in which to allow execution (0-3, 0,1)
  --cpuset-mems="""": Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.
  --cpu-quota=0: Limit the CPU CFS (Completely Fair Scheduler) quota
  --cpu-rt-period=0: Limit the CPU real-time period. In microseconds. Requires parent cgroups be set and cannot be higher than parent. Also check rtprio ulimits.
  --cpu-rt-runtime=0: Limit the CPU real-time runtime. In microseconds. Requires parent cgroups be set and cannot be higher than parent. Also check rtprio ulimits.
  --blkio-weight=0: Block IO weight (relative weight) accepts a weight value between 10 and 1000.
```

----------------------------------------

TITLE: Docker Run Command Resource Limit Flags
DESCRIPTION: These are command-line flags used with 'docker run' to fine-tune a container's resource consumption, covering aspects like disk I/O, memory allocation, and OOM behavior. Each option specifies a particular resource limit or configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
--blkio-weight-device="""": Block IO weight (relative device weight, format: DEVICE_NAME:WEIGHT)
--device-read-bps="""": Limit read rate from a device (format: <device-path>:<number>[<unit>]). Number is a positive integer. Unit can be one of kb, mb, or gb.
--device-write-bps="""": Limit write rate to a device (format: <device-path>:<number>[<unit>]). Number is a positive integer. Unit can be one of kb, mb, or gb.
--device-read-iops="""": Limit read rate (IO per second) from a device (format: <device-path>:<number>). Number is a positive integer.
--device-write-iops="""": Limit write rate (IO per second) to a device (format: <device-path>:<number>). Number is a positive integer.
--oom-kill-disable=false: Whether to disable OOM Killer for the container or not.
--oom-score-adj=0: Tune container's OOM preferences (-1000 to 1000)
--memory-swappiness="""": Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.
--shm-size="""": Size of /dev/shm. The format is <number><unit>. number must be greater than 0. Unit is optional and can be b (bytes), k (kilobytes), m (megabytes), or g (gigabytes). If you omit the unit, the system uses bytes. If you omit the size entirely, the system uses 64m.
```

----------------------------------------

TITLE: Docker Run with No Memory Limits
DESCRIPTION: This command starts an Ubuntu container without any explicit memory or swap limits. Processes within the container can consume as much host memory and swap as available, making it suitable for applications with variable memory demands or when host resources are abundant.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_17

LANGUAGE: console
CODE:
```
$ docker run -it ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Memory Limit and Unlimited Swap
DESCRIPTION: This command limits the container's RAM usage to 300MB (`-m 300M`) while allowing unlimited swap memory (`--memory-swap -1`). This configuration is useful when an application requires a fixed amount of RAM but can offload excess data to swap without a hard limit.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_18

LANGUAGE: console
CODE:
```
$ docker run -it -m 300M --memory-swap -1 ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Memory Limit and Default Swap
DESCRIPTION: This command sets a hard memory limit of 300MB (`-m 300M`) for the container. By default, Docker automatically sets the total virtual memory (memory + swap) to double the specified memory limit, allowing the container to use an additional 300MB of swap memory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_19

LANGUAGE: console
CODE:
```
$ docker run -it -m 300M ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Explicit Memory and Swap Limits
DESCRIPTION: This command explicitly sets a memory limit of 300MB (`-m 300M`) and a total virtual memory limit (memory + swap) of 1GB (`--memory-swap 1G`). This configuration allows the container to use 300MB of RAM and up to 700MB of swap memory, providing fine-grained control over resource allocation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_20

LANGUAGE: console
CODE:
```
$ docker run -it -m 300M --memory-swap 1G ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Memory Hard Limit and Reservation
DESCRIPTION: This command sets a hard memory limit of 500MB (`-m 500M`) and a soft memory reservation of 200MB (`--memory-reservation 200M`). When memory contention occurs, Docker attempts to reclaim memory from the container to keep its usage below the reservation, while still allowing bursts up to the hard limit.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_21

LANGUAGE: console
CODE:
```
$ docker run -it -m 500M --memory-reservation 200M ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Memory Reservation Only
DESCRIPTION: This command sets a memory reservation of 1GB (`--memory-reservation 1G`) without a hard memory limit. The container can use as much memory as needed, but during memory pressure, Docker will try to keep its consumption around the 1GB reservation, ensuring it doesn't monopolize resources for extended periods.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_22

LANGUAGE: console
CODE:
```
$ docker run -it --memory-reservation 1G ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Memory Limit and OOM Killer Disabled
DESCRIPTION: This command limits the container's memory to 100MB (`-m 100M`) and disables the Out-Of-Memory (OOM) killer (`--oom-kill-disable`). Disabling the OOM killer prevents the kernel from terminating processes within the container when memory runs out, but it should only be used with a hard memory limit to prevent host system instability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_23

LANGUAGE: console
CODE:
```
$ docker run -it -m 100M --oom-kill-disable ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Dangerous Docker Run: OOM Killer Disabled Without Memory Limit
DESCRIPTION: This command disables the Out-Of-Memory (OOM) killer (`--oom-kill-disable`) without setting a memory limit. This is a dangerous configuration as the container can consume unlimited memory, potentially leading to the host system running out of memory and requiring the termination of critical system processes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_24

LANGUAGE: console
CODE:
```
$ docker run -it --oom-kill-disable ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with User and Kernel Memory Limits
DESCRIPTION: This command demonstrates how to launch a Docker container with both a total memory limit (`-m`) and a specific kernel memory limit (`--kernel-memory`). In this example, the container is limited to 500MB total memory, with a maximum of 50MB allocated for kernel memory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_25

LANGUAGE: bash
CODE:
```
$ docker run -it -m 500M --kernel-memory 50M ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Only Kernel Memory Limit
DESCRIPTION: This command shows how to start a Docker container with only a kernel memory limit (`--kernel-memory`) specified, without a general user memory limit. The container can use unlimited user memory but is restricted to 50MB of kernel memory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_26

LANGUAGE: bash
CODE:
```
$ docker run -it --kernel-memory 50M ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Docker Run with Swappiness Disabled
DESCRIPTION: This command illustrates how to disable anonymous page swapping for a Docker container by setting `--memory-swappiness` to 0. This helps retain the container's working set in RAM and avoids performance penalties associated with swapping.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_27

LANGUAGE: bash
CODE:
```
$ docker run -it --memory-swappiness=0 ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Configure Docker Container CPU Period and Quota
DESCRIPTION: Limits a Docker container's CPU usage by setting the CPU CFS period and quota, or by specifying a float value for total CPU share. This controls the proportion of CPU time a container can consume within a given period. The --cpu-quota flag limits the container's CPU usage, with 0 allowing 100% of a CPU resource, and 50000 limiting to 50% of a CPU resource.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_28

LANGUAGE: bash
CODE:
```
$ docker run -it --cpu-period=50000 --cpu-quota=25000 ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Set Docker Container CPU and Memory Affinity (Cpuset)
DESCRIPTION: Restricts Docker container processes to specific CPU cores or NUMA memory nodes. This allows fine-grained control over where a container's processes can execute and from which memory nodes they can allocate memory, improving performance on multi-core/NUMA systems.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_29

LANGUAGE: bash
CODE:
```
$ docker run -it --cpuset-cpus=""1,3"" ubuntu:24.04 /bin/bash
$ docker run -it --cpuset-cpus=""0-2"" ubuntu:24.04 /bin/bash
```

LANGUAGE: bash
CODE:
```
$ docker run -it --cpuset-mems=""1,3"" ubuntu:24.04 /bin/bash
$ docker run -it --cpuset-mems=""0-2"" ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Set Docker Container Blkio Weight
DESCRIPTION: Demonstrates how to set the block IO bandwidth proportion for Docker containers using the `--blkio-weight` flag. This flag allows specifying a weight between 10 and 1000, influencing the container's share of direct IO bandwidth relative to other containers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_30

LANGUAGE: console
CODE:
```
$ docker run -it --name c1 --blkio-weight 300 ubuntu:24.04 /bin/bash
$ docker run -it --name c2 --blkio-weight 600 ubuntu:24.04 /bin/bash
```

----------------------------------------

TITLE: Measure Block IO Performance with dd
DESCRIPTION: Illustrates a command to perform direct block IO operations within a container to measure performance. This `dd` command writes 1GB of data directly to a file, useful for observing the effects of blkio weight settings.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_31

LANGUAGE: console
CODE:
```
$ time dd if=/mnt/zerofile of=test.out bs=1M count=1024 oflag=direct
```

----------------------------------------

TITLE: Set Specific Device Blkio Weight for Docker Container
DESCRIPTION: Shows how to set a specific block IO weight for a particular device within a Docker container using the `--blkio-weight-device` flag. The flag takes a `DEVICE_NAME:WEIGHT` string, allowing fine-grained control over device-specific IO.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_32

LANGUAGE: console
CODE:
```
$ docker run -it \
    --blkio-weight-device ""/dev/sda:200"" \
    ubuntu
```

----------------------------------------

TITLE: Override Default Blkio Weight for Specific Device in Docker
DESCRIPTION: Demonstrates how to combine `--blkio-weight` and `--blkio-weight-device` flags. This sets a default block IO weight for the container and then overrides it for a specific device, providing flexible IO control.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_33

LANGUAGE: console
CODE:
```
$ docker run -it \
    --blkio-weight 300 \
    --blkio-weight-device ""/dev/sda:200"" \
    ubuntu
```

----------------------------------------

TITLE: Limit Device Read Rate (BPS) in Docker Container
DESCRIPTION: Illustrates limiting the read rate from a specific device in a Docker container using the `--device-read-bps` flag. The limit is specified in bytes per second, with units like `kb`, `mb`, or `gb` supported.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_34

LANGUAGE: console
CODE:
```
$ docker run -it --device-read-bps /dev/sda:1mb ubuntu
```

----------------------------------------

TITLE: Limit Device Write Rate (BPS) in Docker Container
DESCRIPTION: Shows how to limit the write rate to a specific device in a Docker container using the `--device-write-bps` flag. The limit is specified in bytes per second, with units like `kb`, `mb`, or `gb` supported.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_35

LANGUAGE: console
CODE:
```
$ docker run -it --device-write-bps /dev/sda:1mb ubuntu
```

----------------------------------------

TITLE: Limit Device Read Rate (IOPS) in Docker Container
DESCRIPTION: Demonstrates limiting the read rate from a specific device in a Docker container based on IO operations per second using the `--device-read-iops` flag. The limit is a positive integer representing IOPS.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_36

LANGUAGE: console
CODE:
```
$ docker run -it --device-read-iops /dev/sda:1000 ubuntu
```

----------------------------------------

TITLE: Limit Device Write Rate (IOPS) in Docker Container
DESCRIPTION: Illustrates limiting the write rate to a specific device in a Docker container based on IO operations per second using the `--device-write-iops` flag. The limit is a positive integer representing IOPS.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_37

LANGUAGE: console
CODE:
```
$ docker run -it --device-write-iops /dev/sda:1000 ubuntu
```

----------------------------------------

TITLE: Add Additional Groups to Docker Container
DESCRIPTION: Demonstrates how to add supplementary groups to a Docker container process using the `--group-add` flag. This flag allows specifying multiple groups (by name or GID) that the container's process will run with, beyond the default user groups. The example shows adding 'audio', 'nogroup', and '777' and verifying them with the `id` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_38

LANGUAGE: console
CODE:
```
$ docker run --rm --group-add audio --group-add nogroup --group-add 777 busybox id

uid=0(root) gid=0(root) groups=10(wheel),29(audio),99(nogroup),777
```

----------------------------------------

TITLE: Docker run command-line options for container privileges
DESCRIPTION: This section outlines key command-line options for the `docker run` command that control container privileges and device access. It includes `--cap-add`, `--cap-drop`, `--privileged`, and `--device` flags with their respective descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_39

LANGUAGE: APIDOC
CODE:
```
Option: --cap-add
  Description: Add Linux capabilities

Option: --cap-drop
  Description: Drop Linux capabilities

Option: --privileged
  Description: Give extended privileges to this container

Option: --device=[]
  Description: Allows you to run devices inside the container without the --privileged flag.
```

----------------------------------------

TITLE: Grant specific device access to Docker container
DESCRIPTION: This example demonstrates how to allow a Docker container to access a specific device on the host system, such as an audio device, using the `--device` flag. This provides targeted access without granting full `--privileged` permissions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_40

LANGUAGE: console
CODE:
```
$ docker run --device=/dev/snd:/dev/snd ...
```

----------------------------------------

TITLE: Control device permissions in Docker containers with :rwm options
DESCRIPTION: These examples illustrate how to specify read, write, or mknod permissions for a device passed into a Docker container using the `--device` flag with the `:rwm` options. It shows the impact of read-only, write-only, and mknod-only permissions on `fdisk` operations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_41

LANGUAGE: console
CODE:
```
$ docker run --device=/dev/sda:/dev/xvdc --rm -it ubuntu fdisk  /dev/xvdc

Command (m for help): q
$ docker run --device=/dev/sda:/dev/xvdc:r --rm -it ubuntu fdisk  /dev/xvdc
You will not be able to write the partition table.

Command (m for help): q

$ docker run --device=/dev/sda:/dev/xvdc:w --rm -it ubuntu fdisk  /dev/xvdc
    crash....

$ docker run --device=/dev/sda:/dev/xvdc:m --rm -it ubuntu fdisk  /dev/xvdc
fdisk: unable to open /dev/xvdc: Operation not permitted
```

----------------------------------------

TITLE: Default Linux capabilities in Docker containers
DESCRIPTION: This table lists the Linux capabilities that are included by default in Docker containers. These capabilities can be explicitly dropped using the `--cap-drop` flag to further restrict a container's permissions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_42

LANGUAGE: APIDOC
CODE:
```
Capability Key: AUDIT_WRITE
  Description: Write records to kernel auditing log.

Capability Key: CHOWN
  Description: Make arbitrary changes to file UIDs and GIDs (see chown(2)).

Capability Key: DAC_OVERRIDE
  Description: Bypass file read, write, and execute permission checks.

Capability Key: FOWNER
  Description: Bypass permission checks on operations that normally require the file system UID of the process to match the UID of the file.

Capability Key: FSETID
  Description: Don't clear set-user-ID and set-group-ID permission bits when a file is modified.

Capability Key: KILL
  Description: Bypass permission checks for sending signals.

Capability Key: MKNOD
  Description: Create special files using mknod(2).

Capability Key: NET_BIND_SERVICE
  Description: Bind a socket to internet domain privileged ports (port numbers less than 1024).

Capability Key: NET_RAW
  Description: Use RAW and PACKET sockets.

Capability Key: SETFCAP
  Description: Set file capabilities.

Capability Key: SETGID
  Description: Make arbitrary manipulations of process GIDs and supplementary GID list.

Capability Key: SETPCAP
  Description: Modify process capabilities.
```

----------------------------------------

TITLE: Default Docker Container Capability Manipulations
DESCRIPTION: This section lists Linux capabilities that are often implicitly manipulated or removed by default in Docker containers to enhance security, such as those related to user ID manipulation or changing the root directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_43

LANGUAGE: APIDOC
CODE:
```
SETUID: Make arbitrary manipulations of process UIDs.
SYS_CHROOT: Use chroot(2), change root directory.
```

----------------------------------------

TITLE: Addable Docker Container Capabilities
DESCRIPTION: This section provides a comprehensive list of Linux capabilities that are not granted to Docker containers by default but can be explicitly added to allow containers to perform specific privileged operations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
AUDIT_CONTROL: Enable and disable kernel auditing; change auditing filter rules; retrieve auditing status and filtering rules.
AUDIT_READ: Allow reading the audit log via multicast netlink socket.
BLOCK_SUSPEND: Allow preventing system suspends.
BPF: Allow creating BPF maps, loading BPF Type Format (BTF) data, retrieve JITed code of BPF programs, and more.
CHECKPOINT_RESTORE: Allow checkpoint/restore related operations.  Introduced in kernel 5.9.
DAC_READ_SEARCH: Bypass file read permission checks and directory read and execute permission checks.
IPC_LOCK: Lock memory (mlock(2), mlockall(2), mmap(2), shmctl(2)).
IPC_OWNER: Bypass permission checks for operations on System V IPC objects.
LEASE: Establish leases on arbitrary files (see fcntl(2)).
LINUX_IMMUTABLE: Set the FS_APPEND_FL and FS_IMMUTABLE_FL i-node flags.
MAC_ADMIN: Allow MAC configuration or state changes. Implemented for the Smack LSM.
MAC_OVERRIDE: Override Mandatory Access Control (MAC). Implemented for the Smack Linux Security Module (LSM).
NET_ADMIN: Perform various network-related operations.
NET_BROADCAST: Make socket broadcasts, and listen to multicasts.
PERFMON: Allow system performance and observability privileged operations using perf_events, i915_perf and other kernel subsystems
SYS_ADMIN: Perform a range of system administration operations.
SYS_BOOT: Use reboot(2) and kexec_load(2), reboot and load a new kernel for later execution.
SYS_MODULE: Load and unload kernel modules.
SYS_NICE: Raise process nice value (nice(2), setpriority(2)) and change the nice value for arbitrary processes.
SYS_PACCT: Use acct(2), switch process accounting on or off.
SYS_PTRACE: Trace arbitrary processes using ptrace(2).
SYS_RAWIO: Perform I/O port operations (iopl(2) and ioperm(2)).
SYS_RESOURCE: Override resource Limits.
SYS_TIME: Set system clock (settimeofday(2), stime(2), adjtimex(2)); set real-time (hardware) clock.
SYS_TTY_CONFIG: Use vhangup(2); employ various privileged ioctl(2) operations on virtual terminals.
SYSLOG: Perform privileged syslog(2) operations.
WAKE_ALARM: Trigger something that will wake up the system.
```

----------------------------------------

TITLE: Docker: Add All Capabilities Except One
DESCRIPTION: Demonstrates how to grant a Docker container all Linux capabilities using `--cap-add=ALL` while simultaneously dropping a specific capability, such as `MKNOD`, using `--cap-drop`. This provides fine-grained control over container privileges.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_45

LANGUAGE: console
CODE:
```
$ docker run --cap-add=ALL --cap-drop=MKNOD ...
```

----------------------------------------

TITLE: Docker: Specify Capabilities with or without CAP_ Prefix
DESCRIPTION: Shows that Docker's `--cap-add` and `--cap-drop` flags accept capability names both with and without the `CAP_` prefix, making `SYS_ADMIN` and `CAP_SYS_ADMIN` functionally equivalent.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_46

LANGUAGE: console
CODE:
```
$ docker run --cap-add=SYS_ADMIN ...
```

LANGUAGE: console
CODE:
```
$ docker run --cap-add=CAP_SYS_ADMIN ...
```

----------------------------------------

TITLE: Docker: Add Network Interfaces with NET_ADMIN Capability
DESCRIPTION: Illustrates the necessity of the `NET_ADMIN` capability for modifying network interfaces within a Docker container. The first command fails without `NET_ADMIN`, while the second succeeds by adding the required capability, demonstrating a more secure alternative to `--privileged`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_47

LANGUAGE: console
CODE:
```
$ docker run -it --rm  ubuntu:24.04 ip link add dummy0 type dummy

RTNETLINK answers: Operation not permitted
```

LANGUAGE: console
CODE:
```
$ docker run -it --rm --cap-add=NET_ADMIN ubuntu:24.04 ip link add dummy0 type dummy
```

----------------------------------------

TITLE: Docker: Mount FUSE Filesystem with SYS_ADMIN and Device Access
DESCRIPTION: Explains how to successfully mount a FUSE-based filesystem inside a Docker container. It demonstrates that both the `SYS_ADMIN` capability and explicit device access (`--device /dev/fuse`) are required, as attempts with only one or the other will result in permission errors.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_48

LANGUAGE: console
CODE:
```
$ docker run --rm -it --cap-add SYS_ADMIN sshfs sshfs sven@10.10.10.20:/home/sven /mnt

fuse: failed to open /dev/fuse: Operation not permitted
```

LANGUAGE: console
CODE:
```
$ docker run --rm -it --device /dev/fuse sshfs sshfs sven@10.10.10.20:/home/sven /mnt

fusermount: mount failed: Operation not permitted
```

LANGUAGE: console
CODE:
```
$ docker run --rm -it --cap-add SYS_ADMIN --device /dev/fuse sshfs

# sshfs sven@10.10.10.20:/home/sven /mnt
The authenticity of host '10.10.10.20 (10.10.10.20)' can't be established.
ECDSA key fingerprint is 25:34:85:75:25:b0:17:46:05:19:04:93:b5:dd:5f:c6.
Are you sure you want to continue connecting (yes/no)? yes
sven@10.10.10.20's password:

root@30aa0cfaf1b5:/# ls -la /mnt/src/docker

total 1516
drwxrwxr-x 1 1000 1000   4096 Dec  4 06:08 .
drwxrwxr-x 1 1000 1000   4096 Dec  4 11:46 ..
-rw-rw-r-- 1 1000 1000     16 Oct  8 00:09 .dockerignore
-rwxrwxr-x 1 1000 1000    464 Oct  8 00:09 .drone.yml
drwxrwxr-x 1 1000 1000   4096 Dec  4 06:11 .git
-rw-rw-r-- 1 1000 1000    461 Dec  4 06:08 .gitignore
....
```

----------------------------------------

TITLE: Docker: General `docker run` Command Syntax
DESCRIPTION: Provides the general command-line syntax for `docker run`, showing how options, image, and optional commands/arguments are structured. It highlights that `COMMAND` and `ARG` can override defaults set in the Dockerfile `CMD` instruction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_49

LANGUAGE: console
CODE:
```
$ docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMMAND] [ARG...]
```

----------------------------------------

TITLE: Docker Entrypoint Flag Syntax
DESCRIPTION: This snippet shows the basic syntax for the `--entrypoint` flag, which allows overriding the default entrypoint set by a Docker image. It's used to specify a different executable to run when the container starts.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_50

LANGUAGE: text
CODE:
```
--entrypoint="""": Overwrite the default entrypoint set by the image
```

----------------------------------------

TITLE: Run Docker Container with Custom Entrypoint
DESCRIPTION: This example demonstrates how to run a Docker container with a custom entrypoint, specifically `/bin/bash`, instead of the image's default. This is useful for debugging or executing specific commands within a container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_51

LANGUAGE: Shell
CODE:
```
$ docker run -it --entrypoint /bin/bash example/redis
```

----------------------------------------

TITLE: Pass Parameters to Custom Docker Entrypoint
DESCRIPTION: These examples illustrate how to pass additional command-line arguments to a custom entrypoint. The arguments are provided as positional commands after the image name, allowing for flexible execution of the custom entrypoint.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_52

LANGUAGE: Shell
CODE:
```
$ docker run -it --entrypoint /bin/bash example/redis -c ls -l
$ docker run -it --entrypoint /usr/bin/redis-cli example/redis --help
```

----------------------------------------

TITLE: Reset Docker Container Entrypoint
DESCRIPTION: This snippet shows how to effectively reset or clear a container's entrypoint by passing an empty string to the `--entrypoint` flag. This can be useful when you want to run a command directly without any predefined entrypoint behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_53

LANGUAGE: Shell
CODE:
```
$ docker run -it --entrypoint="""" mysql bash
```

----------------------------------------

TITLE: Set and Propagate Environment Variables in Linux Container
DESCRIPTION: This snippet demonstrates how to set explicit environment variables (e.g., 'deep=purple') and propagate host environment variables (e.g., 'today') into a Linux Docker container using the `-e` flag. It then runs the `env` command inside an `alpine` container to display the resulting environment variables, showing both explicitly set and propagated values.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_54

LANGUAGE: console
CODE:
```
$ export today=Wednesday
$ docker run -e ""deep=purple"" -e today --rm alpine env

PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=d2219b854598
deep=purple
today=Wednesday
HOME=/root
```

----------------------------------------

TITLE: Set Environment Variable in Windows Container with PowerShell
DESCRIPTION: This PowerShell snippet illustrates how to set an environment variable (e.g., 'foo=bar') within a Windows Docker container. It runs a `microsoft/nanoserver` image and executes the `set` command to list all environment variables, confirming that the 'foo' variable has been successfully added to the container's environment.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_55

LANGUAGE: powershell
CODE:
```
PS C:\> docker run --rm -e ""foo=bar"" microsoft/nanoserver cmd /s /c set
ALLUSERSPROFILE=C:\ProgramData
APPDATA=C:\Users\ContainerAdministrator\AppData\Roaming
CommonProgramFiles=C:\Program Files\Common Files
CommonProgramFiles(x86)=C:\Program Files (x86)\Common Files
CommonProgramW6432=C:\Program Files\Common Files
COMPUTERNAME=C2FAEFCC8253
ComSpec=C:\Windows\system32\cmd.exe
foo=bar
LOCALAPPDATA=C:\Users\ContainerAdministrator\AppData\Local
NUMBER_OF_PROCESSORS=8
OS=Windows_NT
Path=C:\Windows\system32;C:\Windows;C:\Windows\System32\Wbem;C:\Windows\System32\WindowsPowerShell\v1.0\;C:\Users\ContainerAdministrator\AppData\Local\Microsoft\WindowsApps
PATHEXT=.COM;.EXE;.BAT;.CMD
PROCESSOR_ARCHITECTURE=AMD64
PROCESSOR_IDENTIFIER=Intel64 Family 6 Model 62 Stepping 4, GenuineIntel
PROCESSOR_LEVEL=6
PROCESSOR_REVISION=3e04
ProgramData=C:\ProgramData
ProgramFiles=C:\Program Files
ProgramFiles(x86)=C:\Program Files (x86)
ProgramW6432=C:\Program Files
PROMPT=$P$G
PUBLIC=C:\Users\Public
SystemDrive=C:
SystemRoot=C:\Windows
TEMP=C:\Users\ContainerAdministrator\AppData\Local\Temp
TMP=C:\Users\ContainerAdministrator\AppData\Local\Temp
USERDOMAIN=User Manager
USERNAME=ContainerAdministrator
USERPROFILE=C:\Users\ContainerAdministrator
windir=C:\Windows
```

----------------------------------------

TITLE: Configure Docker Container Healthchecks
DESCRIPTION: Explains how to set up health checks for Docker containers using `docker run` flags like `--health-cmd`, `--health-interval`, and `--health-retries`. It demonstrates how to run a container with a health check and inspect its status, showing transitions from healthy to unhealthy.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_56

LANGUAGE: APIDOC
CODE:
```
docker run Healthcheck Options:
  --health-cmd: Command to run to check health
  --health-interval: Time between running the check
  --health-retries: Consecutive failures needed to report unhealthy
  --health-timeout: Maximum time to allow one check to run
  --health-start-period: Start period for the container to initialize before starting health-retries countdown
  --health-start-interval: Time between running the check during the start period
  --no-healthcheck: Disable any container-specified HEALTHCHECK
```

LANGUAGE: console
CODE:
```
$ docker run --name=test -d \
    --health-cmd='stat /etc/passwd || exit 1' \
    --health-interval=2s \
    busybox sleep 1d
$ sleep 2; docker inspect --format='{{.State.Health.Status}}' test
healthy
$ docker exec test rm /etc/passwd
$ sleep 2; docker inspect --format='{{json .State.Health}}' test
{
  ""Status"": ""unhealthy"",
  ""FailingStreak"": 3,
  ""Log"": [
    {
      ""Start"": ""2016-05-25T17:22:04.635478668Z"",
      ""End"": ""2016-05-25T17:22:04.7272552Z"",
      ""ExitCode"": 0,
      ""Output"": ""  File: /etc/passwd\n  Size: 334       \tBlocks: 8          IO Block: 4096   regular file\nDevice: 32h/50d\tInode: 12          Links: 1\nAccess: (0664/-rw-rw-r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-12-05 22:05:32.000000000\nModify: 2015...""
    },
    {
      ""Start"": ""2016-05-25T17:22:06.732900633Z"",
      ""End"": ""2016-05-25T17:22:06.822168935Z"",
      ""ExitCode"": 0,
      ""Output"": ""  File: /etc/passwd\n  Size: 334       \tBlocks: 8          IO Block: 4096   regular file\nDevice: 32h/50d\tInode: 12          Links: 1\nAccess: (0664/-rw-rw-r--)  Uid: (    0/    root)   Gid: (    0/    root)\nAccess: 2015-12-05 22:05:32.000000000\nModify: 2015...""
    },
    {
      ""Start"": ""2016-05-25T17:22:08.823956535Z"",
      ""End"": ""2016-05-25T17:22:08.897359124Z"",
      ""ExitCode"": 1,
      ""Output"": ""stat: can't stat '/etc/passwd': No such file or directory\n""
    },
    {
      ""Start"": ""2016-05-25T17:22:10.898802931Z"",
      ""End"": ""2016-05-25T17:22:10.969631866Z"",
      ""ExitCode"": 1,
      ""Output"": ""stat: can't stat '/etc/passwd': No such file or directory\n""
    },
    {
      ""Start"": ""2016-05-25T17:22:12.971033523Z"",
      ""End"": ""2016-05-25T17:22:13.082015516Z"",
      ""ExitCode"": 1,
      ""Output"": ""stat: can't stat '/etc/passwd': No such file or directory\n""
    }
  ]
}
```

----------------------------------------

TITLE: Manage Docker Container User Identity
DESCRIPTION: Describes how to control the user identity within a Docker container, either by setting a default with the Dockerfile `USER` instruction or overriding it at runtime using the `docker run -u` option. It specifies valid formats for the user and group parameters.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_57

LANGUAGE: text
CODE:
```
-u="""", --user="""": Sets the username or UID used and optionally the groupname or GID for the specified command.
```

LANGUAGE: text
CODE:
```
--user=[ user | user:group | uid | uid:gid | user:gid | uid:group ]
```

----------------------------------------

TITLE: Set Docker Container Working Directory
DESCRIPTION: Explains how to define the working directory for processes inside a Docker container. It covers using the Dockerfile `WORKDIR` command to set a default and overriding it at runtime with the `docker run -w` or `--workdir` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/cli/docs/reference/run.md#_snippet_58

LANGUAGE: console
CODE:
```
$ docker run --rm -w /my/workdir alpine pwd
/my/workdir
```

----------------------------------------

TITLE: docker compose alpha generate Command Options
DESCRIPTION: Documents the `docker compose alpha generate` command, which is an experimental feature to generate a Compose file from existing containers. It lists available options, their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha_generate.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose alpha generate
Description: EXPERIMENTAL - Generate a Compose file from existing containers

Options:
  --dry-run:
    Type: bool
    Default: (none)
    Description: Execute command in dry run mode
  --format:
    Type: string
    Default: yaml
    Description: Format the output. Values: [yaml | json]
  --name:
    Type: string
    Default: (none)
    Description: Project name to set in the Compose file
  --project-dir:
    Type: string
    Default: (none)
    Description: Directory to use for the project
```

----------------------------------------

TITLE: Docker Compose Alpha Experimental Commands and Options
DESCRIPTION: Details the experimental subcommands and global options available under `docker compose alpha`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose alpha:
  Description: Experimental commands
  Subcommands:
    viz:
      Description: EXPERIMENTAL - Generate a graphviz graph from your compose file
    watch:
      Description: EXPERIMENTAL - Watch build context for service and rebuild/refresh containers when files are updated
  Options:
    --dry-run:
      Type: N/A
      Default: N/A
      Description: Execute command in dry run mode
```

----------------------------------------

TITLE: docker compose alpha publish Command Options
DESCRIPTION: Available options for the `docker compose alpha publish` command, controlling its behavior during application publishing. These options allow for dry runs, OCI version specification, image digest pinning, environment variable inclusion, and automatic 'yes' responses.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha_publish.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose alpha publish options:
  `--dry-run`:
    Type: `bool`
    Default: 
    Description: Execute command in dry run mode
  `--oci-version`:
    Type: `string`
    Default: 
    Description: OCI image/artifact specification version (automatically determined by default)
  `--resolve-image-digests`:
    Type: `bool`
    Default: 
    Description: Pin image tags to digests
  `--with-env`:
    Type: `bool`
    Default: 
    Description: Include environment variables in the published OCI artifact
  `-y`, `--yes`:
    Type: `bool`
    Default: 
    Description: Assume ""yes"" as answer to all prompts
```

----------------------------------------

TITLE: Docker Compose Scale Command Options
DESCRIPTION: Details the command-line options available for the `docker compose alpha scale` command, including their purpose and behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha_scale.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose alpha scale
Description: Scale services

Options:
  --dry-run:
    Type: N/A
    Default: N/A
    Description: Execute command in dry run mode
  --no-deps:
    Type: N/A
    Default: N/A
    Description: Don't start linked services
```

----------------------------------------

TITLE: Docker Compose Alpha Viz Command Options
DESCRIPTION: Lists and describes the available command-line options for the `docker compose alpha viz` command, which generates a Graphviz graph from a Compose file. Each option includes its name, type, default value, and a brief description of its function.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha_viz.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: (none)
    Description: Execute command in dry run mode
  --image:
    Type: bool
    Default: (none)
    Description: Include service's image name in output graph
  --indentation-size:
    Type: int
    Default: 1
    Description: Number of tabs or spaces to use for indentation
  --networks:
    Type: bool
    Default: (none)
    Description: Include service's attached networks in output graph
  --ports:
    Type: bool
    Default: (none)
    Description: Include service's exposed ports in output graph
  --spaces:
    Type: bool
    Default: (none)
    Description: If given, space character ' ' will be used to indent,\notherwise tab character '\t' will be used
```

----------------------------------------

TITLE: Docker Compose Alpha Watch Command Options
DESCRIPTION: This section details the command-line options available for the 'docker compose alpha watch' command, which allows users to control its behavior, such as running in dry-run mode, skipping initial service startup, or suppressing build output.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_alpha_watch.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose alpha watch
Description: Watch build context for service and rebuild/refresh containers when files are updated

Options:
  --dry-run:
    Type: N/A
    Default: N/A
    Description: Execute command in dry run mode
  --no-up:
    Type: N/A
    Default: N/A
    Description: Do not build & start services before watching
  --quiet:
    Type: N/A
    Default: N/A
    Description: hide build output
```

----------------------------------------

TITLE: docker compose attach Command Options
DESCRIPTION: Describes the available command-line options for the `docker compose attach` command, including their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_attach.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose attach
Description: Attach local standard input, output, and error streams to a service's running container

Options:
  --detach-keys:
    Type: string
    Default: 
    Description: Override the key sequence for detaching from a container.
  --dry-run:
    Type: bool
    Default: 
    Description: Execute command in dry run mode
  --index:
    Type: int
    Default: 0
    Description: index of the container if service has multiple replicas.
  --no-stdin:
    Type: bool
    Default: 
    Description: Do not attach STDIN
  --sig-proxy:
    Type: bool
    Default: true
    Description: Proxy all received signals to the process
```

----------------------------------------

TITLE: docker compose bridge convert Command Options
DESCRIPTION: This section details the command-line options available for the 'docker compose bridge convert' command, including their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_bridge_convert.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose bridge convert
Options:
  --dry-run
    Type: bool
    Description: Execute command in dry run mode

  -o, --output
    Type: string
    Default: out
    Description: The output directory for the Kubernetes resources

  --templates
    Type: string
    Description: Directory containing transformation templates

  -t, --transformation
    Type: stringArray
    Default: docker/compose-bridge-kubernetes
    Description: Transformation to apply to compose model
```

----------------------------------------

TITLE: Docker Compose Bridge Subcommands
DESCRIPTION: Lists the available subcommands for `docker compose bridge`, detailing their purpose and functionality.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_bridge.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Subcommands:
  convert:
    Description: Convert compose files to Kubernetes manifests, Helm charts, or another model
  transformations:
    Description: Manage transformation images
```

----------------------------------------

TITLE: Docker Compose Bridge Global Options
DESCRIPTION: Describes the global options that can be used with `docker compose bridge` commands, including their type and default values.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_bridge.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: 
    Description: Execute command in dry run mode
```

----------------------------------------

TITLE: docker compose bridge transformations create Command Options
DESCRIPTION: Details the command-line options available for creating a new transformation using `docker compose bridge transformations create`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_bridge_transformations_create.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose bridge transformations create

Description: Create a new transformation

Options:
  --dry-run:
    Type: bool
    Default: N/A
    Description: Execute command in dry run mode
  -f, --from:
    Type: string
    Default: docker/compose-bridge-kubernetes
    Description: Existing transformation to copy (default: docker/compose-bridge-kubernetes)
```

----------------------------------------

TITLE: Docker Compose Bridge Transformations List Command Reference
DESCRIPTION: Detailed API documentation for the `docker compose bridge transformations list` command, including its aliases and available options. This command is used to list available transformations, with options to control output format and enable dry-run mode.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_bridge_transformations_list.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose bridge transformations list

Aliases:
  docker compose bridge transformations list
  docker compose bridge transformations ls

Options:
  --dry-run (bool): Execute command in dry run mode
  --format (string, default: table): Format the output. Values: [table | json]
  -q, --quiet (bool): Only display transformer names
```

----------------------------------------

TITLE: Docker Compose Bridge Transformations Subcommands
DESCRIPTION: Provides a list of available subcommands for managing Docker Compose bridge transformations, including creating and listing transformations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_bridge_transformations.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Subcommands:
  create:
    Description: Create a new transformation
  list:
    Description: List available transformations
```

----------------------------------------

TITLE: Docker Compose Bridge Transformations Options
DESCRIPTION: Details the command-line options available for Docker Compose bridge transformations, such as the dry-run mode.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_bridge_transformations.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: null
    Description: Execute command in dry run mode
```

----------------------------------------

TITLE: docker compose build Command Line Options
DESCRIPTION: This section details the various command-line options available for `docker compose build`, allowing users to customize the build process, set build-time variables, manage cache, and control output.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_build.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose build
Description: Builds or rebuilds services defined in a Compose file.

Options:
  --build-arg <stringArray> [Default: ]
    Description: Set build-time variables for services
  --builder <string> [Default: ]
    Description: Set builder to use
  --check <bool> [Default: ]
    Description: Check build configuration
  --dry-run <bool> [Default: ]
    Description: Execute command in dry run mode
  -m, --memory <bytes> [Default: 0]
    Description: Set memory limit for the build container. Not supported by BuildKit.
  --no-cache <bool> [Default: ]
    Description: Do not use cache when building the image
  --print <bool> [Default: ]
    Description: Print equivalent bake file
  --pull <bool> [Default: ]
    Description: Always attempt to pull a newer version of the image
  --push <bool> [Default: ]
    Description: Push service images
  -q, --quiet <bool> [Default: ]
    Description: Don't print anything to STDOUT
  --ssh <string> [Default: ]
    Description: Set SSH authentications used when building service images. (use 'default' for using your default SSH Agent)
  --with-dependencies <bool> [Default: ]
    Description: Also build dependencies (transitively)
```

----------------------------------------

TITLE: Docker Compose Commit Command Options
DESCRIPTION: Details the command-line options available for `docker compose commit`, specifying their names, types, default values, and a brief description of their function.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_commit.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose commit options:
  -a, --author:
    Type: string
    Description: Author (e.g., ""John Hannibal Smith <hannibal@a-team.com"")
  -c, --change:
    Type: list
    Description: Apply Dockerfile instruction to the created image
  --dry-run:
    Type: bool
    Description: Execute command in dry run mode
  --index:
    Type: int
    Default: 0
    Description: index of the container if service has multiple replicas.
  -m, --message:
    Type: string
    Description: Commit message
  -p, --pause:
    Type: bool
    Default: true
    Description: Pause container during commit
```

----------------------------------------

TITLE: Docker Compose Config Command API Reference
DESCRIPTION: This section provides a detailed API reference for the `docker compose config` command, outlining its purpose and all available command-line options. Each option includes its name, data type, default value (if applicable), and a brief description of its functionality.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_config.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose config
Description: Renders the actual data model to be applied on the Docker Engine. It merges Compose files, resolves variables, and expands short-notation into canonical format.

Options:
  --dry-run (bool): Execute command in dry run mode
  --environment (bool): Print environment used for interpolation.
  --format (string): Format the output. Values: [yaml | json]
  --hash (string): Print the service config hash, one per line.
  --images (bool): Print the image names, one per line.
  --lock-image-digests (bool): Produces an override file with image digests
  --no-consistency (bool): Don't check model consistency - warning: may produce invalid Compose output
  --no-env-resolution (bool): Don't resolve service env files
  --no-interpolate (bool): Don't interpolate environment variables
  --no-normalize (bool): Don't normalize compose model
  --no-path-resolution (bool): Don't resolve file paths
  -o, --output (string): Save to file (default to stdout)
  --profiles (bool): Print the profile names, one per line.
  -q, --quiet (bool): Only validate the configuration, don't print anything
  --resolve-image-digests (bool): Pin image tags to digests
  --services (bool): Print the service names, one per line.
  --variables (bool): Print model variables and default values.
  --volumes (bool): Print the volume names, one per line.
```

----------------------------------------

TITLE: Docker Compose CP Command Options
DESCRIPTION: Describes the available command-line options for the `docker compose cp` command, including their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_cp.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
- Name: --all
  Type: bool
  Default: 
  Description: Include containers created by the run command
- Name: -a, --archive
  Type: bool
  Default: 
  Description: Archive mode (copy all uid/gid information)
- Name: --dry-run
  Type: bool
  Default: 
  Description: Execute command in dry run mode
- Name: -L, --follow-link
  Type: bool
  Default: 
  Description: Always follow symbol link in SRC_PATH
- Name: --index
  Type: int
  Default: 0
  Description: Index of the container if service has multiple replicas
```

----------------------------------------

TITLE: Docker Compose Create Command Options
DESCRIPTION: Lists and describes the available command-line options for `docker compose create`, including their data types, default values, and effects on container creation and management.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_create.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose create command options:
  --build (bool): Build images before starting containers
  --dry-run (bool): Execute command in dry run mode
  --force-recreate (bool): Recreate containers even if their configuration and image haven't changed
  --no-build (bool): Don't build an image, even if it's policy
  --no-recreate (bool): If containers already exist, don't recreate them. Incompatible with --force-recreate.
  --pull (string, default: ""policy""): Pull image before running (""always""|""missing""|""never""|""build"")
  --quiet-pull (bool): Pull without printing progress information
  --remove-orphans (bool): Remove containers for services not defined in the Compose file
  --scale (stringArray): Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present.
  -y, --yes (bool): Assume ""yes"" as answer to all prompts and run non-interactively
```

----------------------------------------

TITLE: docker compose down Command Options
DESCRIPTION: Describes the command-line options available for `docker compose down`, including their types, default values, and effects on the removal process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_down.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: 
    Description: Execute command in dry run mode
  --remove-orphans:
    Type: bool
    Default: 
    Description: Remove containers for services not defined in the Compose file
  --rmi:
    Type: string
    Default: 
    Description: Remove images used by services. ""local"" remove only images that don't have a custom tag (""local""|""all"")
  -t, --timeout:
    Type: int
    Default: 0
    Description: Specify a shutdown timeout in seconds
  -v, --volumes:
    Type: bool
    Default: 
    Description: Remove named volumes declared in the ""volumes"" section of the Compose file and anonymous volumes attached to containers
```

----------------------------------------

TITLE: Docker Compose Events JSON Output Format
DESCRIPTION: Defines the structure of the JSON object printed per line when the `--json` flag is used with `docker compose events`. It includes fields like time, type, action, ID, service, and attributes for the container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_events.md#_snippet_0

LANGUAGE: json
CODE:
```
{
    ""time"": ""2015-11-20T18:01:03.615550"",
    ""type"": ""container"",
    ""action"": ""create"",
    ""id"": ""213cf7...5fc39a"",
    ""service"": ""web"",
    ""attributes"": {
      ""name"": ""application_web_1"",
      ""image"": ""alpine:edge""
    }
}
```

----------------------------------------

TITLE: Docker Compose Events Command Options
DESCRIPTION: Describes the command-line options available for the `docker compose events` command, including their type, default values, and a brief description of their functionality.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_events.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: 
    Description: Execute command in dry run mode
  --json:
    Type: bool
    Default: 
    Description: Output events as a stream of json objects
```

----------------------------------------

TITLE: Get interactive shell in Docker Compose service
DESCRIPTION: Use `docker compose exec` to obtain an interactive shell within a specified service container. By default, this command allocates a TTY, enabling interactive sessions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_exec.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker compose exec web sh
```

----------------------------------------

TITLE: docker compose exec Command Options
DESCRIPTION: Available options for the `docker compose exec` command, allowing customization of command execution within a service container. Options include running in detached mode, setting environment variables, specifying user, and more.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_exec.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
docker compose exec
  -d, --detach (bool): Detached mode: Run command in the background
  --dry-run (bool): Execute command in dry run mode
  -e, --env (stringArray): Set environment variables
  --index (int, default: 0): Index of the container if service has multiple replicas
  -T, --no-TTY (bool, default: true): Disable pseudo-TTY allocation. By default `docker compose exec` allocates a TTY.
  --privileged (bool): Give extended privileges to the process
  -u, --user (string): Run the command as this user
  -w, --workdir (string): Path to workdir directory for this command
```

----------------------------------------

TITLE: docker compose export Command Options
DESCRIPTION: Describes the available options for the `docker compose export` command, including their type, default values, and purpose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_export.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose export options:
  --dry-run:
    Type: bool
    Default: (none)
    Description: Execute command in dry run mode
  --index:
    Type: int
    Default: 0
    Description: index of the container if service has multiple replicas.
  -o, --output:
    Type: string
    Default: (none)
    Description: Write to a file, instead of STDOUT
```

----------------------------------------

TITLE: docker compose images Command Options
DESCRIPTION: Details the available command-line options for 'docker compose images', including their types, default values, and descriptions. This command lists images used by containers managed by Docker Compose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_images.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose images
  Options:
    --dry-run (bool): Execute command in dry run mode
    --format (string, default: table): Format the output. Values: [table | json]
    -q, --quiet (bool): Only display IDs
```

----------------------------------------

TITLE: Forcefully stop Docker Compose containers with a custom signal
DESCRIPTION: Demonstrates how to use the `docker compose kill` command to stop running containers by sending a specific signal, such as `SIGINT`, instead of the default `SIGKILL`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_kill.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker compose kill -s SIGINT
```

----------------------------------------

TITLE: docker compose kill command-line options
DESCRIPTION: Detailed API documentation for the `docker compose kill` command's options, including their types, default values, and descriptions for controlling container termination behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_kill.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
docker compose kill options:
  --dry-run:
    Type: bool
    Default: N/A
    Description: Execute command in dry run mode
  --remove-orphans:
    Type: bool
    Default: N/A
    Description: Remove containers for services not defined in the Compose file
  -s, --signal:
    Type: string
    Default: SIGKILL
    Description: SIGNAL to send to the container
```

----------------------------------------

TITLE: docker compose logs command options
DESCRIPTION: Detailed options for the `docker compose logs` command, including their types, defaults, and descriptions for controlling log output.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_logs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose logs
Description: Displays log output from services

Options:
  --dry-run (bool): Execute command in dry run mode
    Default: (empty)
  -f, --follow (bool): Follow log output
    Default: (empty)
  --index (int): index of the container if service has multiple replicas
    Default: 0
  --no-color (bool): Produce monochrome output
    Default: (empty)
  --no-log-prefix (bool): Don't print prefix in logs
    Default: (empty)
  --since (string): Show logs since timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)
    Default: (empty)
  -n, --tail (string): Number of lines to show from the end of the logs for each container
    Default: all
  -t, --timestamps (bool): Show timestamps
    Default: (empty)
  --until (string): Show logs before a timestamp (e.g. 2013-01-02T13:23:37Z) or relative (e.g. 42m for 42 minutes)
    Default: (empty)
```

----------------------------------------

TITLE: docker compose ls Command Options
DESCRIPTION: Describes the available command-line options for the `docker compose ls` command, including their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ls.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose ls:
  Options:
    -a, --all:
      Type: bool
      Default: N/A
      Description: Show all stopped Compose projects
    --dry-run:
      Type: bool
      Default: N/A
      Description: Execute command in dry run mode
    --filter:
      Type: filter
      Default: N/A
      Description: Filter output based on conditions provided
    --format:
      Type: string
      Default: table
      Description: Format the output. Values: [table | json]
    -q, --quiet:
      Type: bool
      Default: N/A
      Description: Only display project names
```

----------------------------------------

TITLE: Docker Compose Command Line Syntax
DESCRIPTION: Shows the general command-line syntax for the `docker compose` command, including optional arguments, options, and subcommand placeholders. This syntax is used to invoke various operations on Docker Compose projects.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker compose [-f <arg>...] [options] [COMMAND] [ARGS...]
```

----------------------------------------

TITLE: Docker Compose Subcommands Reference
DESCRIPTION: A comprehensive list of all available subcommands for `docker compose`, detailing their purpose and functionality for managing multi-container applications. Each subcommand performs a specific operation, from building images to stopping services.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
docker compose:
  Subcommands:
    attach: Attach local standard input, output, and error streams to a service's running container
    bridge: Convert compose files into another model
    build: Build or rebuild services
    commit: Create a new image from a service container's changes
    config: Parse, resolve and render compose file in canonical format
    cp: Copy files/folders between a service container and the local filesystem
    create: Creates containers for a service
    down: Stop and remove containers, networks
    events: Receive real time events from containers
    exec: Execute a command in a running container
    export: Export a service container's filesystem as a tar archive
    images: List images used by the created containers
    kill: Force stop service containers
    logs: View output from containers
    ls: List running compose projects
    pause: Pause services
    port: Print the public port for a port binding
    ps: List containers
    publish: Publish compose application
    pull: Pull service images
    push: Push service images
    restart: Restart service containers
    rm: Removes stopped service containers
    run: Run a one-off command on a service
    scale: Scale services
    start: Start services
    stats: Display a live stream of container(s) resource usage statistics
    stop: Stop services
    top: Display the running processes
    unpause: Unpause services
    up: Create and start containers
    version: Show the Docker Compose version information
    volumes: List volumes
    wait: Block until containers of all (or specified) services stop.
    watch: Watch build context for service and rebuild/refresh containers when files are updated
```

----------------------------------------

TITLE: Docker Compose CLI Options Reference
DESCRIPTION: This section details the various command-line options available for Docker Compose, including their data types, default values, and a brief description of their functionality. These options control aspects like resource inclusion, ANSI output, compatibility mode, dry run execution, environment files, configuration file paths, parallelism, profiles, progress output, project directory, and project name.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Docker Compose CLI Options:
  --all-resources: bool (Include all resources, even those not used by services)
  --ansi: string (default: auto) (Control when to print ANSI control characters (""never""|""always""|""auto""))
  --compatibility: bool (Run compose in backward compatibility mode)
  --dry-run: bool (Execute command in dry run mode)
  --env-file: stringArray (Specify an alternate environment file)
  -f, --file: stringArray (Compose configuration files)
  --parallel: int (default: -1) (Control max parallelism, -1 for unlimited)
  --profile: stringArray (Specify a profile to enable)
  --progress: string (Set type of progress output (auto, tty, plain, json, quiet))
  --project-directory: string (default: the path of the, first specified, Compose file) (Specify an alternate working directory)
  -p, --project-name: string (Project name)
```

----------------------------------------

TITLE: Docker Compose: Specifying Multiple Configuration Files
DESCRIPTION: Demonstrates how to use the `-f` flag to combine multiple Compose configuration files. When multiple files are supplied, Compose merges them into a single configuration, with subsequent files overriding or adding to predecessors. Paths within these files are relative to the first specified configuration file, though this can be overridden with `--project-directory`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker compose -f compose.yaml -f compose.admin.yaml run backup_db
```

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    image: examples/web
    ports:
      - ""8000:8000""
    volumes:
      - ""/data""
```

LANGUAGE: yaml
CODE:
```
services:
  webapp:
    build: .
    environment:
      - DEBUG=1
```

----------------------------------------

TITLE: Docker Compose: Specifying a Single Configuration File Path
DESCRIPTION: Illustrates how to use the `-f` flag to specify a Compose file located at an arbitrary path, not necessarily in the current working directory. This is useful for managing configurations stored in different locations or when running commands from a different directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker compose -f ~/sandbox/rails/compose.yaml pull db
```

----------------------------------------

TITLE: Specify Docker Compose Project Name with -p Flag
DESCRIPTION: Demonstrates how to use the `-p` flag to explicitly set a project name for Docker Compose commands, overriding default naming conventions. The first command lists services for 'my_project', and the second shows logs for services within that project.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker compose -p my_project ps -a
NAME                 SERVICE    STATUS     PORTS
my_project_demo_1    demo       running

$ docker compose -p my_project logs
demo_1  | PING localhost (127.0.0.1): 56 data bytes
demo_1  | 64 bytes from 127.0.0.1: seq=0 ttl=64 time=0.095 ms
```

----------------------------------------

TITLE: Activate Docker Compose Profiles for Optional Services
DESCRIPTION: Illustrates how to use the `--profile` flag to activate specific profiles, enabling optional services defined in the Compose file. It shows activating a single profile ('frontend') and multiple profiles ('frontend' and 'debug') to start services.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_6

LANGUAGE: console
CODE:
```
docker compose --profile frontend up
docker compose --profile frontend --profile debug up
```

----------------------------------------

TITLE: Control Docker Compose Parallelism for Operations
DESCRIPTION: Shows how to use the `--parallel` flag to limit the maximum number of concurrent engine calls, useful for controlling build or pull concurrency. The example demonstrates pulling images one at a time.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_7

LANGUAGE: console
CODE:
```
docker compose --parallel 1 pull
```

----------------------------------------

TITLE: Simulate Docker Compose Up with Dry Run
DESCRIPTION: This example demonstrates using the `--dry-run` flag with `docker compose up --build -d`. The output shows the sequence of operations Docker Compose would perform, including pulling images, building services, creating containers, and managing their health and startup, all without actually modifying the system state. It highlights the steps involved in bringing up a multi-service application.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker compose --dry-run up --build -d
[+] Pulling 1/1
 ✔ DRY-RUN MODE -  db Pulled                                                                                                                                                                                                               0.9s
[+] Running 10/8
 ✔ DRY-RUN MODE -    build service backend                                                                                                                                                                                                 0.0s
 ✔ DRY-RUN MODE -  ==> ==> writing image dryRun-754a08ddf8bcb1cf22f310f09206dd783d42f7dd                                                                                                                                                   0.0s
 ✔ DRY-RUN MODE -  ==> ==> naming to nginx-golang-mysql-backend                                                                                                                                                                            0.0s
 ✔ DRY-RUN MODE -  Network nginx-golang-mysql_default                                    Created                                                                                                                                           0.0s
 ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Created                                                                                                                                           0.0s
 ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Created                                                                                                                                           0.0s
 ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Created                                                                                                                                           0.0s
 ✔ DRY-RUN MODE -  Container nginx-golang-mysql-db-1                                     Healthy                                                                                                                                           0.5s
 ✔ DRY-RUN MODE -  Container nginx-golang-mysql-backend-1                                Started                                                                                                                                           0.0s
 ✔ DRY-RUN MODE -  Container nginx-golang-mysql-proxy-1                                  Started                                     Started
```

----------------------------------------

TITLE: Docker Compose Pause Command Options
DESCRIPTION: Describes the available options for the `docker compose pause` command, including their type, default value, and purpose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_pause.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose pause
Description: Pauses running containers of a service. They can be unpaused with `docker compose unpause`.

Options:
  --dry-run:
    Type: bool
    Default: (none)
    Description: Execute command in dry run mode
```

----------------------------------------

TITLE: Docker Compose Port Command Options
DESCRIPTION: Documents the available options for the `docker compose port` command, including their types, default values, and descriptions. These options allow for controlling the command's behavior, such as dry run execution, specifying container index for replicas, and defining the protocol.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_port.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose port
Description: Prints the public port for a port binding

Options:
  --dry-run:
    Type: bool
    Default: (none)
    Description: Execute command in dry run mode
  --index:
    Type: int
    Default: 0
    Description: Index of the container if service has multiple replicas
  --protocol:
    Type: string
    Default: tcp
    Description: tcp or udp
```

----------------------------------------

TITLE: List Running Docker Compose Containers
DESCRIPTION: Demonstrates the basic usage of `docker compose ps` to list containers that are currently running within a Compose project. It displays the container's name, image, command, service, creation time, status, and exposed ports.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker compose ps
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    ""/entrypoint.…""   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp
```

----------------------------------------

TITLE: List All Docker Compose Containers (Running and Stopped)
DESCRIPTION: Illustrates how to use the `--all` flag with `docker compose ps` to include both running and stopped containers in the listing. This provides a comprehensive view of all containers associated with the Compose project, regardless of their current status.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker compose ps --all
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    ""/entrypoint.…""   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp
example-bar-1   alpine    ""/entrypoint.…""   bar        4 seconds ago   exited (0)
```

----------------------------------------

TITLE: Docker CLI Command Options Reference
DESCRIPTION: A comprehensive list of command-line options available for Docker commands, detailing their names, types, default values, and functionalities. Options include filtering, formatting, and controlling output verbosity.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Options:
  -a, --all:
    Type: bool
    Description: Show all stopped containers (including those created by the run command)
  --dry-run:
    Type: bool
    Description: Execute command in dry run mode
  --filter:
    Type: string
    Description: Filter services by a property (supported filters: status)
  --format:
    Type: string
    Default: table
    Description: Format output using a custom template:
      'table':            Print output in table format with column headers (default)
      'table TEMPLATE':   Print output in table format using the given Go template
      'json':             Print in JSON format
      'TEMPLATE':         Print output using the given Go template.
      Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates
  --no-trunc:
    Type: bool
    Description: Don't truncate output
  --orphans:
    Type: bool
    Default: true
    Description: Include orphaned services (not declared by project)
  -q, --quiet:
    Type: bool
    Description: Only display IDs
  --services:
    Type: bool
    Description: Display services
```

----------------------------------------

TITLE: Docker Compose PS Command Options
DESCRIPTION: Documents the command-line options available for `docker compose ps`, including their type and description.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
--status: stringArray - Filter services by status. Values: [paused | restarting | removing | running | dead | created | exited]
```

----------------------------------------

TITLE: List Running Docker Compose Containers
DESCRIPTION: Lists currently running containers for a Compose project, showing their name, image, command, service, creation time, status, and exposed ports.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker compose ps
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    ""/entrypoint.…""   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp
```

----------------------------------------

TITLE: List All Docker Compose Containers Including Stopped
DESCRIPTION: Shows all containers, including those that are stopped or exited, by using the `--all` flag with `docker compose ps`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker compose ps --all
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    ""/entrypoint.…""   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp
example-bar-1   alpine    ""/entrypoint.…""   bar        4 seconds ago   exited (0)
```

----------------------------------------

TITLE: Format Docker Compose PS Output as JSON
DESCRIPTION: Demonstrates how to output container information in JSON format using the `--format json` flag, which is useful for programmatic processing.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker compose ps --format json
[{""ID"":""1553b0236cf4d2715845f053a4ee97042c4f9a2ef655731ee34f1f7940eaa41a"",""Name"":""example-bar-1"",""Command"":""/docker-entrypoint.sh nginx -g 'daemon off;'"",""Project"":""example"",""Service"":""bar"",""State"":""exited"",""Health"":"""",""ExitCode"":0,""Publishers"":null},{""ID"":""f02a4efaabb67416e1ff127d51c4b5578634a0ad5743bd65225ff7d1909a3fa0"",""Name"":""example-foo-1"",""Command"":""/docker-entrypoint.sh nginx -g 'daemon off;'"",""Project"":""example"",""Service"":""foo"",""State"":""running"",""Health"":"""",""ExitCode"":0,""Publishers"":[{""URL"":""0.0.0.0"",""TargetPort"":80,""PublishedPort"":8080,""Protocol"":""tcp""}]}]
```

----------------------------------------

TITLE: Pretty-Print Docker Compose PS JSON Output with JQ
DESCRIPTION: Illustrates piping the JSON output of `docker compose ps` to the `jq` utility for pretty-printing, making the structured data more readable.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker compose ps --format json | jq .
[
  {
    ""ID"": ""1553b0236cf4d2715845f053a4ee97042c4f9a2ef655731ee34f1f7940eaa41a"",
    ""Name"": ""example-bar-1"",
    ""Command"": ""/docker-entrypoint.sh nginx -g 'daemon off;'"",
    ""Project"": ""example"",
    ""Service"": ""bar"",
    ""State"": ""exited"",
    ""Health"": """",
    ""ExitCode"": 0,
    ""Publishers"": null
  },
  {
    ""ID"": ""f02a4efaabb67416e1ff127d51c4b5578634a0ad5743bd65225ff7d1909a3fa0"",
    ""Name"": ""example-foo-1"",
    ""Command"": ""/docker-entrypoint.sh nginx -g 'daemon off;'"",
    ""Project"": ""example"",
    ""Service"": ""foo"",
    ""State"": ""running"",
    ""Health"": """",
    ""ExitCode"": 0,
    ""Publishers"": [
      {
        ""URL"": ""0.0.0.0"",
        ""TargetPort"": 80,
        ""PublishedPort"": 8080,
        ""Protocol"": ""tcp""
      }
    ]
  }
]
```

----------------------------------------

TITLE: Filter Docker Compose Containers by Status
DESCRIPTION: Shows how to use the `--status` flag to filter containers based on their current state, such as 'running' or 'exited'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker compose ps --status=running
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    ""/entrypoint.…""   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp

$ docker compose ps --status=exited
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-bar-1   alpine    ""/entrypoint.…""   bar        4 seconds ago   exited (0)
```

----------------------------------------

TITLE: Filter Docker Compose Containers Using Generic --filter Flag
DESCRIPTION: Demonstrates the equivalent of `--status` using the more general `--filter status=<status>` option, highlighting its flexibility for future filtering capabilities.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_ps.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker compose ps --filter status=running
NAME            IMAGE     COMMAND           SERVICE    CREATED         STATUS          PORTS
example-foo-1   alpine    ""/entrypoint.…""   foo        4 seconds ago   Up 2 seconds    0.0.0.0:8080->80/tcp
```

----------------------------------------

TITLE: Docker Compose Publish Command Options
DESCRIPTION: Details the command-line options for `docker compose publish`, including their types, default values, and descriptions for publishing Docker Compose applications.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_publish.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose publish
Purpose: Publish compose application

Options:
  --dry-run:
    Type: bool
    Default: None
    Description: Execute command in dry run mode
  --oci-version:
    Type: string
    Default: automatically determined by default
    Description: OCI image/artifact specification version
  --resolve-image-digests:
    Type: bool
    Default: None
    Description: Pin image tags to digests
  --with-env:
    Type: bool
    Default: None
    Description: Include environment variables in the published OCI artifact
  -y, --yes:
    Type: bool
    Default: None
    Description: Assume ""yes"" as answer to all prompts
```

----------------------------------------

TITLE: docker compose pull Command Options
DESCRIPTION: This section outlines the various command-line options available for the `docker compose pull` command. Each option includes its name, data type, default value (if applicable), and a brief description of its effect on the command's behavior, such as controlling output or handling dependencies.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_pull.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose pull options:
  --dry-run:
    type: bool
    description: Execute command in dry run mode
  --ignore-buildable:
    type: bool
    description: Ignore images that can be built
  --ignore-pull-failures:
    type: bool
    description: Pull what it can and ignores images with pull failures
  --include-deps:
    type: bool
    description: Also pull services declared as dependencies
  --policy:
    type: string
    description: Apply pull policy (""missing""|""always"")
  -q, --quiet:
    type: bool
    description: Pull without printing progress information
```

----------------------------------------

TITLE: Example compose.yaml for Docker Services
DESCRIPTION: This YAML snippet provides a sample `compose.yaml` file, defining two services: `db` and `web`. The `db` service uses the `postgres` image, while the `web` service is built from the current directory, exposes port 3000, and depends on the `db` service.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_pull.md#_snippet_1

LANGUAGE: yaml
CODE:
```
services:
  db:
    image: postgres
  web:
    build: .
    command: bundle exec rails s -p 3000 -b '0.0.0.0'
    volumes:
      - .:/myapp
    ports:
      - ""3000:3000""
    depends_on:
      - db
```

----------------------------------------

TITLE: Console Output for docker compose pull db
DESCRIPTION: This console output demonstrates the execution of `docker compose pull db`, showing the progress of pulling the `postgres` image associated with the 'db' service. It displays the various stages of image pulling, including layer downloads and status updates.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_pull.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker compose pull db
[+] Running 1/15
 ◘ db Pulling                                                             12.4s
   ◗ 45b42c59be33 Already exists                                           0.0s
   ◙ 40adec129f1a Downloading  3.374MB/4.178MB                             9.3s
   ◙ b4c431d00c78 Download complete                                        9.3s
   ◙ 2696974e2815 Download complete                                        9.3s
   ◙ 564b77596399 Downloading  5.622MB/7.965MB                             9.3s
   ◙ 5044045cf6f2 Downloading  216.7kB/391.1kB                             9.3s
   ◙ d736e67e6ac3 Waiting                                                  9.3s
   ◙ 390c1c9a5ae4 Waiting                                                  9.3s
   ◙ c0e62f172284 Waiting                                                  9.3s
   ◙ ebcdc659c5bf Waiting                                                  9.3s
   ◙ 29be22cb3acc Waiting                                                  9.3s
   ◙ f63c47038e66 Waiting                                                  9.3s
   ◙ 77a0c198cde5 Waiting                                                  9.3s
   ◙ c8752d5b785c Waiting                                                  9.3s
```

----------------------------------------

TITLE: Docker Compose YAML for Image Push Configuration
DESCRIPTION: Illustrates a `docker-compose.yaml` configuration for defining services with images intended for pushing to a local registry or Docker Hub. It shows how to specify image names for different push targets.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_push.md#_snippet_0

LANGUAGE: yaml
CODE:
```
services:
  service1:
    build: .
    image: localhost:5000/yourimage  ## goes to local registry

  service2:
    build: .
    image: your-dockerid/yourimage  ## goes to your repository on Docker Hub
```

----------------------------------------

TITLE: Docker Compose Push Command Line Options
DESCRIPTION: Documents the available command-line options for the `docker compose push` command, including their types, default values, and descriptions. These options control the behavior of the image push operation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_push.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
--dry-run:
  Type: bool
  Default: 
  Description: Execute command in dry run mode

--ignore-push-failures:
  Type: bool
  Default: 
  Description: Push what it can and ignores images with push failures

--include-deps:
  Type: bool
  Default: 
  Description: Also push images of services declared as dependencies

-q, --quiet:
  Type: bool
  Default: 
  Description: Push without printing progress information
```

----------------------------------------

TITLE: Docker Compose Restart Command Options
DESCRIPTION: Available command-line options for the `docker compose restart` command, specifying their type, default values, and purpose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_restart.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options for docker compose restart:
  --dry-run:
    Type: bool
    Default: N/A
    Description: Execute command in dry run mode
  --no-deps:
    Type: bool
    Default: N/A
    Description: Don't restart dependent services
  -t, --timeout:
    Type: int
    Default: 0
    Description: Specify a shutdown timeout in seconds
```

----------------------------------------

TITLE: Remove stopped Docker Compose containers interactively
DESCRIPTION: Demonstrates the interactive removal of a stopped service container using `docker compose rm`, including the confirmation prompt and successful removal message.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_rm.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker compose rm
Going to remove djangoquickstart_web_run_1
Are you sure? [yN] y
Removing djangoquickstart_web_run_1 ... done
```

----------------------------------------

TITLE: Docker Compose rm Command Options
DESCRIPTION: Lists the available command-line options for `docker compose rm`, detailing their type, default value, and a brief description of their purpose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_rm.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
--dry-run:
  Type: bool
  Default: (none)
  Description: Execute command in dry run mode
-f, --force:
  Type: bool
  Default: (none)
  Description: Don't ask to confirm removal
-s, --stop:
  Type: bool
  Default: (none)
  Description: Stop the containers, if required, before removing
-v, --volumes:
  Type: bool
  Default: (none)
  Description: Remove any anonymous volumes attached to containers
```

----------------------------------------

TITLE: Run Bash in Docker Compose Service
DESCRIPTION: Demonstrates how to run a one-time `bash` command within the `web` service container defined in your Docker Compose configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker compose run web bash
```

----------------------------------------

TITLE: Run Docker Compose Service with Ports Mapped
DESCRIPTION: Shows how to run a command in a Docker Compose service while also publishing the service's defined ports to the host, preventing port collisions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker compose run --service-ports web python manage.py shell
```

----------------------------------------

TITLE: Run Docker Compose Service with Manual Port Mapping
DESCRIPTION: Illustrates how to manually map specific ports from a Docker Compose service container to the host using the `--publish` or `-p` options, similar to `docker run`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell
```

----------------------------------------

TITLE: Run Interactive PostgreSQL Shell in Linked Docker Compose Service
DESCRIPTION: Shows how to run an interactive `psql` shell within a linked `db` service container, automatically starting linked services if they are not already running.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker compose run db psql -h db -U docker
```

----------------------------------------

TITLE: Run Docker Compose Service Without Dependencies
DESCRIPTION: Demonstrates using the `--no-deps` flag with `docker compose run` to execute a command in a service without starting its linked dependent containers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker compose run --no-deps web python manage.py shell
```

----------------------------------------

TITLE: Run Docker Compose Command and Remove Container
DESCRIPTION: Illustrates how to run a one-time command, such as a database upgrade script, and automatically remove the container upon completion, overriding any defined restart policy using the `--rm` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker compose run --rm web python manage.py db upgrade
```

----------------------------------------

TITLE: Docker Command-Line Options Reference
DESCRIPTION: This section lists the available command-line options, their data types, default values, and a brief explanation of their purpose for Docker commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Option: --build
  Type: bool
  Default: None
  Description: Build image before starting container

Option: --cap-add
  Type: list
  Default: None
  Description: Add Linux capabilities

Option: --cap-drop
  Type: list
  Default: None
  Description: Drop Linux capabilities

Option: -d, --detach
  Type: bool
  Default: None
  Description: Run container in background and print container ID

Option: --dry-run
  Type: bool
  Default: None
  Description: Execute command in dry run mode

Option: --entrypoint
  Type: string
  Default: None
  Description: Override the entrypoint of the image

Option: -e, --env
  Type: stringArray
  Default: None
  Description: Set environment variables

Option: --env-from-file
  Type: stringArray
  Default: None
  Description: Set environment variables from file

Option: -i, --interactive
  Type: bool
  Default: true
  Description: Keep STDIN open even if not attached

Option: -l, --label
  Type: stringArray
  Default: None
  Description: Add or override a label

Option: --name
  Type: string
  Default: None
  Description: Assign a name to the container

Option: -T, --no-TTY
  Type: bool
  Default: true
  Description: Disable pseudo-TTY allocation (default: auto-detected)

Option: --no-deps
  Type: bool
  Default: None
  Description: Don't start linked services

Option: -p, --publish
  Type: stringArray
  Default: None
  Description: Publish a container's port(s) to the host

Option: --pull
  Type: string
  Default: policy
  Description: Pull image before running (""always""|""missing""|""never"")

Option: -q, --quiet
  Type: bool
  Default: None
  Description: Don't print anything to STDOUT

Option: --quiet-build
  Type: bool
  Default: None
  Description: Suppress progress output from the build process

Option: --quiet-pull
  Type: bool
  Default: None
  Description: Pull without printing progress information

Option: --remove-orphans
  Type: bool
  Default: None
  Description: Remove containers for services not defined in the Compose file

Option: --rm
  Type: bool
  Default: None
  Description: Automatically remove the container when it exits

Option: -P, --service-ports
  Type: bool
  Default: None
  Description: Run command with all service's ports enabled and mapped to the host

Option: --use-aliases
  Type: bool
  Default: None
  Description: Use the service's network useAliases in the network(s) the container connects to

Option: -u, --user
  Type: string
  Default: None
  Description: Run as specified username or uid

Option: -v, --volume
  Type: stringArray
  Default: None
  Description: Bind mount a volume

Option: -w, --workdir
  Type: string
  Default: None
  Description: Working directory inside the container
```

----------------------------------------

TITLE: Run Bash in Docker Compose Service
DESCRIPTION: Demonstrates the basic usage of `docker compose run` to execute a one-time command, `bash`, within the `web` service container. This command overrides the default command defined in the service configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker compose run web bash
```

----------------------------------------

TITLE: Run Command with Service Ports in Docker Compose
DESCRIPTION: Illustrates how to run a command, `python manage.py shell`, within the `web` service while also creating and mapping the service's defined ports to the host. This is useful when the command requires network access through the service's configured ports.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker compose run --service-ports web python manage.py shell
```

----------------------------------------

TITLE: Run Command with Manual Port Mapping in Docker Compose
DESCRIPTION: Shows how to manually map specific ports from the service container to the host using the `--publish` or `-p` options. This allows for fine-grained control over port exposure when running a one-time command, similar to `docker run`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker compose run --publish 8080:80 -p 2022:22 -p 127.0.0.1:2021:21 web python manage.py shell
```

----------------------------------------

TITLE: Run Command with Linked Services in Docker Compose
DESCRIPTION: Demonstrates running a command, `psql`, against a service (`db`) that has linked dependencies. `docker compose run` automatically starts linked services if they are not already running before executing the specified command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker compose run db psql -h db -U docker
```

----------------------------------------

TITLE: Run Command Without Dependencies in Docker Compose
DESCRIPTION: Explains how to use the `--no-deps` flag to prevent `docker compose run` from starting linked containers. This is useful when you only want to execute a command against the specified service without bringing up its dependencies.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker compose run --no-deps web python manage.py shell
```

----------------------------------------

TITLE: Run Command and Remove Container in Docker Compose
DESCRIPTION: Shows the `--rm` flag, which automatically removes the container after the command finishes execution. This is useful for one-off tasks like database migrations, ensuring no lingering containers are left behind, even if a restart policy is defined.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_run.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker compose run --rm web python manage.py db upgrade
```

----------------------------------------

TITLE: Docker Compose Scale Command Options
DESCRIPTION: Details the command-line options available for the `docker compose scale` command, including their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_scale.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: N/A
    Description: Execute command in dry run mode
  --no-deps:
    Type: bool
    Default: N/A
    Description: Don't start linked services
```

----------------------------------------

TITLE: docker compose start Command Options
DESCRIPTION: This section details the available options for the 'docker compose start' command, including their types and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_start.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker compose start
  Options:
    --dry-run:
      Type: bool
      Description: Execute command in dry run mode
```

----------------------------------------

TITLE: Docker Compose Stats Command Options
DESCRIPTION: Lists and describes the available command-line options for `docker compose stats`, including flags for showing all containers, dry run, output formatting, disabling streaming, and preventing truncation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_stats.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose stats
Description: Display a live stream of container(s) resource usage statistics

Options:
- Name: -a, --all
  Type: bool
  Default: (empty)
  Description: Show all containers (default shows just running)
- Name: --dry-run
  Type: bool
  Default: (empty)
  Description: Execute command in dry run mode
- Name: --format
  Type: string
  Default: (empty)
  Description: Format output using a custom template:
    'table': Print output in table format with column headers (default)
    'table TEMPLATE': Print output in table format using the given Go template
    'json': Print in JSON format
    'TEMPLATE': Print output using the given Go template.
    Refer to https://docs.docker.com/engine/cli/formatting/ for more information about formatting output with templates
- Name: --no-stream
  Type: bool
  Default: (empty)
  Description: Disable streaming stats and only pull the first result
- Name: --no-trunc
  Type: bool
  Default: (empty)
  Description: Do not truncate output
```

----------------------------------------

TITLE: Docker Compose: Stop Running Containers
DESCRIPTION: Documents the `docker compose stop` command, which halts running containers without removing their state. Containers can be restarted later using `docker compose start`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_stop.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose stop
```

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Description: Execute command in dry run mode
  -t, --timeout:
    Type: int
    Default: 0
    Description: Specify a shutdown timeout in seconds
```

----------------------------------------

TITLE: docker compose top Options Reference
DESCRIPTION: Reference for available options for the `docker compose top` command, including their type, default value, and description.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_top.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: (empty)
    Description: Execute command in dry run mode
```

----------------------------------------

TITLE: Display Running Processes with docker compose top
DESCRIPTION: Example of using `docker compose top` to display running processes within a Docker Compose project, showing the output format including UID, PID, PPID, C, STIME, TTY, TIME, and CMD.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_top.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker compose top
example_foo_1
UID    PID      PPID     C    STIME   TTY   TIME       CMD
root   142353   142331   2    15:33   ?     00:00:00   ping localhost -c 5
```

----------------------------------------

TITLE: docker compose unpause Command Options
DESCRIPTION: Lists the available command-line options for the `docker compose unpause` command, including their type, default value, and a brief description of their function.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_unpause.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run:
    Type: bool
    Default: 
    Description: Execute command in dry run mode
```

----------------------------------------

TITLE: Docker Compose Command-Line Options Reference
DESCRIPTION: A comprehensive list of command-line options for Docker Compose, detailing their names, data types, default values, and descriptions. These options can be used to modify the behavior of various Docker Compose commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Docker Compose Command Options:
  --abort-on-container-exit (Type: bool, Default: None)
    Description: Stops all containers if any container was stopped. Incompatible with -d
  --abort-on-container-failure (Type: bool, Default: None)
    Description: Stops all containers if any container exited with failure. Incompatible with -d
  --always-recreate-deps (Type: bool, Default: None)
    Description: Recreate dependent containers. Incompatible with --no-recreate.
  --attach (Type: stringArray, Default: None)
    Description: Restrict attaching to the specified services. Incompatible with --attach-dependencies.
  --attach-dependencies (Type: bool, Default: None)
    Description: Automatically attach to log output of dependent services
  --build (Type: bool, Default: None)
    Description: Build images before starting containers
  -d, --detach (Type: bool, Default: None)
    Description: Detached mode: Run containers in the background
  --dry-run (Type: bool, Default: None)
    Description: Execute command in dry run mode
  --exit-code-from (Type: string, Default: None)
    Description: Return the exit code of the selected service container. Implies --abort-on-container-exit
  --force-recreate (Type: bool, Default: None)
    Description: Recreate containers even if their configuration and image haven't changed
  --menu (Type: bool, Default: None)
    Description: Enable interactive shortcuts when running attached. Incompatible with --detach. Can also be enable/disable by setting COMPOSE_MENU environment var.
  --no-attach (Type: stringArray, Default: None)
    Description: Do not attach (stream logs) to the specified services
  --no-build (Type: bool, Default: None)
    Description: Don't build an image, even if it's policy
  --no-color (Type: bool, Default: None)
    Description: Produce monochrome output
  --no-deps (Type: bool, Default: None)
    Description: Don't start linked services
  --no-log-prefix (Type: bool, Default: None)
    Description: Don't print prefix in logs
  --no-recreate (Type: bool, Default: None)
    Description: If containers already exist, don't recreate them. Incompatible with --force-recreate.
  --no-start (Type: bool, Default: None)
    Description: Don't start the services after creating them
  --pull (Type: string, Default: policy)
    Description: Pull image before running (""always""|""missing""|""never"")
  --quiet-pull (Type: bool, Default: None)
    Description: Pull without printing progress information
  --remove-orphans (Type: bool, Default: None)
    Description: Remove containers for services not defined in the Compose file
```

----------------------------------------

TITLE: Docker Compose Up Command Flags Reference
DESCRIPTION: This section lists the available command-line flags for `docker compose up`, detailing their types, default values, and effects on the command's execution. These flags allow for fine-grained control over container creation, scaling, shutdown, and interaction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Option: -V, --renew-anon-volumes
  Type: bool
  Description: Recreate anonymous volumes instead of retrieving data from the previous containers

Option: --scale
  Type: stringArray
  Description: Scale SERVICE to NUM instances. Overrides the `scale` setting in the Compose file if present.

Option: -t, --timeout
  Type: int
  Default: 0
  Description: Use this timeout in seconds for container shutdown when attached or when containers are already running

Option: --timestamps
  Type: bool
  Description: Show timestamps

Option: --wait
  Type: bool
  Description: Wait for services to be running|healthy. Implies detached mode.

Option: --wait-timeout
  Type: int
  Default: 0
  Description: Maximum duration in seconds to wait for the project to be running|healthy

Option: -w, --watch
  Type: bool
  Description: Watch source code and rebuild/refresh containers when files are updated.

Option: -y, --yes
  Type: bool
  Description: Assume ""yes"" as answer to all prompts and run non-interactively
```

----------------------------------------

TITLE: Docker Compose Up Command Operational Behavior
DESCRIPTION: This section describes the core functionality and behavior of the `docker compose up` command. It explains how the command handles service creation, linking, output aggregation, background execution, configuration changes, and exit codes under various conditions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_up.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Builds, (re)creates, starts, and attaches to containers for a service.

Unless they are already running, this command also starts any linked services.

The `docker compose up` command aggregates the output of each container (like `docker compose logs --follow` does).
One can optionally select a subset of services to attach to using `--attach` flag, or exclude some services using 
`--no-attach` to prevent output to be flooded by some verbose services. 

When the command exits, all containers are stopped. Running `docker compose up --detach` starts the containers in the
background and leaves them running.

If there are existing containers for a service, and the service’s configuration or image was changed after the
container’s creation, `docker compose up` picks up the changes by stopping and recreating the containers
(preserving mounted volumes). To prevent Compose from picking up changes, use the `--no-recreate` flag.

If you want to force Compose to stop and recreate all containers, use the `--force-recreate` flag.

If the process encounters an error, the exit code for this command is `1`.
If the process is interrupted using `SIGINT` (ctrl + C) or `SIGTERM`, the containers are stopped, and the exit code is `0`.
```

----------------------------------------

TITLE: Docker Compose Version Command Options
DESCRIPTION: Details the available command-line options for `docker compose version`, including their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_version.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose version
Description: Show the Docker Compose version information

Options:
  --dry-run:
    Type: bool
    Description: Execute command in dry run mode
  -f, --format:
    Type: string
    Default: pretty
    Description: Format the output. Values: [pretty | json].
  --short:
    Type: bool
    Description: Shows only Compose's version number
```

----------------------------------------

TITLE: docker compose volumes Command Options
DESCRIPTION: Details the command-line options available for the `docker compose volumes` command, including their types, default values, and descriptions. This documentation outlines how to control the output format and behavior of the volume listing.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_volumes.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker compose volumes
Description: List volumes

Options:
  --dry-run (Type: bool)
    Description: Execute command in dry run mode

  --format (Type: string, Default: table)
    Description: Format output using a custom template:
      'table':            Print output in table format with column headers (default)
      'table TEMPLATE':   Print output in table format using the given Go template
      'json':             Print in JSON format
      'TEMPLATE':         Print output using the given Go template.
      Refer to https://docs.docker.com/go/formatting/ for more information about formatting output with templates

  -q, --quiet (Type: bool)
    Description: Only display volume names
```

----------------------------------------

TITLE: Docker Compose Wait Command Options
DESCRIPTION: Describes the available command-line options for the `docker compose wait` command, including their type, default values, and purpose.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_wait.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --down-project:
    Type: bool
    Default: N/A
    Description: Drops project when the first container stops
  --dry-run:
    Type: bool
    Default: N/A
    Description: Execute command in dry run mode
```

----------------------------------------

TITLE: docker compose watch command options
DESCRIPTION: Lists the available command-line options for `docker compose watch`, detailing their type, default values, and a brief description of their function.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/compose/v2/docs/reference/compose_watch.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --dry-run (Type: bool, Default: N/A) - Execute command in dry run mode
  --no-up (Type: bool, Default: N/A) - Do not build & start services before watching
  --prune (Type: bool, Default: true) - Prune dangling images on rebuild
  --quiet (Type: bool, Default: N/A) - hide build output
```

----------------------------------------

TITLE: docker model inspect Command and Options
DESCRIPTION: This section details the 'docker model inspect' command, which is used to display comprehensive information about a specific Docker model. It also outlines the available command-line options, such as '--openai', which modifies the output format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_inspect.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker model inspect
Description: Display detailed information on one model

Options:
  - Name: --openai
    Type: bool
    Default: N/A
    Description: List model in an OpenAI format
```

----------------------------------------

TITLE: Docker Model Runner Installation Options
DESCRIPTION: Available command-line options for configuring the Docker Model Runner installation, including GPU support and container port.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_install-runner.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --gpu:
    Type: string
    Default: auto
    Description: Specify GPU support (none|auto|cuda)
  --port:
    Type: uint16
    Default: 12434
    Description: Docker container port for Docker Model Runner
```

----------------------------------------

TITLE: List Docker Models using CLI Aliases
DESCRIPTION: Provides the command-line aliases for listing Docker models, including the primary command and its shorthand.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_list.md#_snippet_0

LANGUAGE: CLI
CODE:
```
docker model list
docker model ls
```

----------------------------------------

TITLE: Docker Model List Command Options Reference
DESCRIPTION: Details the available command-line options for the `docker model list` command, specifying their types, default values, and descriptions for customizing output format and verbosity.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_list.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Options:
  --json:
    Type: bool
    Default: 
    Description: List models in a JSON format
  --openai:
    Type: bool
    Default: 
    Description: List models in an OpenAI format
  -q, --quiet:
    Type: bool
    Default: 
    Description: Only show model IDs
```

----------------------------------------

TITLE: Docker Model Logs Command Options
DESCRIPTION: Describes the available command-line options for fetching Docker Model Runner logs, including real-time streaming and filtering engine logs.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_logs.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker model logs
Description: Fetch the Docker Model Runner logs

Options:
  -f, --follow
    Type: bool
    Default: N/A
    Description: View logs with real-time streaming

  --no-engines
    Type: bool
    Default: N/A
    Description: Exclude inference engine logs from the output
```

----------------------------------------

TITLE: Docker Model Runner: df command
DESCRIPTION: Displays disk usage information for the Docker Model Runner.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: df
Description: Show Docker Model Runner disk usage
```

----------------------------------------

TITLE: Docker Model Runner: inspect command
DESCRIPTION: Provides detailed information about a specific Docker model.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Command: inspect
Description: Display detailed information on one model
```

----------------------------------------

TITLE: Docker Model Runner: install-runner command
DESCRIPTION: Installs the Docker Model Runner, specifically for Docker Engine environments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Command: install-runner
Description: Install Docker Model Runner (Docker Engine only)
```

----------------------------------------

TITLE: Docker Model Runner: list command
DESCRIPTION: Lists all AI models that have been pulled to your local environment.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Command: list
Description: List the models pulled to your local environment
```

----------------------------------------

TITLE: Docker Model Runner: logs command
DESCRIPTION: Fetches and displays the logs generated by the Docker Model Runner.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Command: logs
Description: Fetch the Docker Model Runner logs
```

----------------------------------------

TITLE: Docker Model Runner: package command
DESCRIPTION: Packages a GGUF file into a Docker model OCI artifact, allowing for optional licenses and pushing to a specified registry.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Command: package
Description: Package a GGUF file into a Docker model OCI artifact, with optional licenses, and pushes it to the specified registry
```

----------------------------------------

TITLE: Docker Model Runner: ps command
DESCRIPTION: Lists all currently running AI models.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
Command: ps
Description: List running models
```

----------------------------------------

TITLE: Docker Model Runner: pull command
DESCRIPTION: Pulls an AI model from Docker Hub or HuggingFace to your local environment.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Command: pull
Description: Pull a model from Docker Hub or HuggingFace to your local environment
```

----------------------------------------

TITLE: Docker Model Runner: push command
DESCRIPTION: Pushes a local AI model to Docker Hub.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Command: push
Description: Push a model to Docker Hub
```

----------------------------------------

TITLE: Docker Model Runner: rm command
DESCRIPTION: Removes locally downloaded AI models from Docker Hub.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Command: rm
Description: Remove local models downloaded from Docker Hub
```

----------------------------------------

TITLE: Docker Model Runner: run command
DESCRIPTION: Executes an AI model and enables interaction via submitted prompts or chat mode.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Command: run
Description: Run a model and interact with it using a submitted prompt or chat mode
```

----------------------------------------

TITLE: Docker Model Runner: status command
DESCRIPTION: Checks the running status of the Docker Model Runner.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
Command: status
Description: Check if the Docker Model Runner is running
```

----------------------------------------

TITLE: Docker Model Runner: tag command
DESCRIPTION: Applies a tag to a Docker model for identification and versioning.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
Command: tag
Description: Tag a model
```

----------------------------------------

TITLE: Docker Model Runner: uninstall-runner command
DESCRIPTION: Uninstalls the Docker Model Runner.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_13

LANGUAGE: APIDOC
CODE:
```
Command: uninstall-runner
Description: Uninstall Docker Model Runner
```

----------------------------------------

TITLE: Docker Model Runner: unload command
DESCRIPTION: Unloads currently running AI models from memory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Command: unload
Description: Unload running models
```

----------------------------------------

TITLE: Docker Model Runner: version command
DESCRIPTION: Displays the version information for the Docker Model Runner.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
Command: version
Description: Show the Docker Model Runner version
```

----------------------------------------

TITLE: Docker Model Package CLI Options
DESCRIPTION: Defines the command-line options available for packaging GGUF files into Docker OCI artifacts. It specifies required and optional parameters for file paths, licenses, and registry push behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_package.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker model package options:
  --gguf:
    Type: string
    Required: true
    Description: absolute path to gguf file
  -l, --license:
    Type: stringArray
    Default: None
    Description: absolute path to a license file
  --push:
    Type: bool
    Required: true
    Description: push to registry
```

----------------------------------------

TITLE: List Running Docker Models
DESCRIPTION: Use this command to display a table of all active Docker models, showing their unique identifiers, names, and current operational status.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_ps.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker model ps
```

----------------------------------------

TITLE: Pulling a model from Docker Hub
DESCRIPTION: Demonstrates how to pull a specified model from Docker Hub using the `docker model pull` command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_pull.md#_snippet_0

LANGUAGE: console
CODE:
```
docker model pull ai/smollm2
```

----------------------------------------

TITLE: Pulling from HuggingFace
DESCRIPTION: Illustrates how to pull GGUF models directly from Hugging Face using the `docker model pull` command, providing a specific example.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_pull.md#_snippet_1

LANGUAGE: console
CODE:
```
docker model pull hf.co/bartowski/Llama-3.2-1B-Instruct-GGUF
```

----------------------------------------

TITLE: Push Docker Model to Docker Hub
DESCRIPTION: Demonstrates the command-line syntax for pushing a Docker model to Docker Hub. This command requires specifying the model's namespace and name.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_push.md#_snippet_0

LANGUAGE: console
CODE:
```
docker model push <namespace>/<model>
```

----------------------------------------

TITLE: docker model rm Command Reference
DESCRIPTION: This section documents the 'docker model rm' command, which is used to remove local models that have been downloaded from Docker Hub. It includes details on available options and their effects.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_rm.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker model rm:
  Description: Remove local models downloaded from Docker Hub
  Options:
    -f, --force:
      Type: bool
      Default: 
      Description: Forcefully remove the model
```

----------------------------------------

TITLE: Docker Model Run Command Options
DESCRIPTION: Describes the command-line options available for the `docker model run` command, including their types, default values, and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_run.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --debug:
    Type: bool
    Default: (empty)
    Description: Enable debug logging
```

----------------------------------------

TITLE: Run Docker Model with a One-Time Prompt
DESCRIPTION: Demonstrates how to run a Docker model with a single, non-interactive prompt, immediately receiving an output.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_run.md#_snippet_1

LANGUAGE: console
CODE:
```
docker model run ai/smollm2 ""Hi""
Output:
Hello! How can I assist you today?
```

----------------------------------------

TITLE: Start Interactive Chat with Docker Model
DESCRIPTION: Shows how to initiate an interactive chat session with a Docker model, allowing multiple turns of conversation until the user exits by typing '/bye'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_run.md#_snippet_2

LANGUAGE: console
CODE:
```
docker model run ai/smollm2
Output:
Interactive chat mode started. Type '/bye' to exit.
> Hi
Hi there! It's SmolLM, AI assistant. How can I help you today?
> /bye
Chat session ended.
```

----------------------------------------

TITLE: Docker Model Runner Uninstall Options
DESCRIPTION: Options available for the `docker model uninstall-runner` command, allowing users to specify whether to remove Docker Model Runner images or the model storage volume.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_uninstall-runner.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --images:
    Type: bool
    Default: N/A
    Description: Remove docker/model-runner images
  --models:
    Type: bool
    Default: N/A
    Description: Remove model storage volume
```

----------------------------------------

TITLE: docker model unload Command Options
DESCRIPTION: Details the available command-line options for the `docker model unload` command, including their types and descriptions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/model-cli/docs/reference/model_unload.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker model unload options:
  --all:
    Type: bool
    Description: Unload all running models
  --backend:
    Type: string
    Description: Optional backend to target
```

----------------------------------------

TITLE: Docker Scout Attestation Add Command Reference
DESCRIPTION: This section provides a comprehensive reference for the 'docker scout attestation add' command. It outlines the command's aliases and lists all available options, including their data types, default values, and a brief description of their function.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_attestation_add.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker scout attestation add
Aliases:
  - docker scout attestation add
  - docker scout attest add

Options:
  --file
    Type: stringSlice
    Default: 
    Description: File location of attestations to attach
  --predicate-type
    Type: string
    Default: 
    Description: Predicate-type for attestations
```

----------------------------------------

TITLE: Docker Scout Attestation CLI Commands
DESCRIPTION: Provides an overview of the `docker scout attestation` command, its aliases, and available subcommands for managing image attestations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_attestation.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Aliases:
  docker scout attestation
  docker scout attest

Subcommands:
  add: Add attestation to image
```

----------------------------------------

TITLE: List temporary and cache files
DESCRIPTION: Demonstrates how to view the disk usage of Docker Scout's temporary and cached SBOM files, including their locations and sizes, and how the cache directory can be configured using an environment variable.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache_df.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker scout cache df
Docker Scout temporary directory to generate SBOMs is located at:
   /var/folders/dw/d6h9w2sx6rv3lzwwgrnx7t5h0000gp/T/docker-scout
   this path can be configured using the DOCKER_SCOUT_CACHE_DIR environment variable

                               Image Digest                               │ Size
──────────────────────────────────────────────────────────────────────────┼────────
  sha256:c41ab5c992deb4fe7e5da09f67a8804a46bd0592bfdf0b1847dde0e0889d2bff │ 21 kB

Total: 21 kB


Docker Scout cached SBOMs are located at:
   /Users/user/.docker/scout/sbom

                               Image Digest                               │ Size of SBOM
──────────────────────────────────────────────────────────────────────────┼───────────────
  sha256:02bb6f428431fbc2809c5d1b41eab5a68350194fb508869a33cb1af4444c9b11 │ 42 kB
  sha256:03fc002fe4f370463a8f04d3a288cdffa861e462fc8b5be44ab62b296ad95183 │ 100 kB
  sha256:088134dd33e4a2997480a1488a41c11abebda465da5cf7f305a0ecf8ed494329 │ 194 kB
  sha256:0b80b2f17aff7ee5bfb135c69d0d6fe34070e89042b7aac73d1abcc79cfe6759 │ 852 kB
  sha256:0c9e8abe31a5f17d84d5c85d3853d2f948a4f126421e89e68753591f1b6fedc5 │ 930 kB
  sha256:0d49cae0723c8d310e413736b5e91e0c59b605ade2546f6e6ef8f1f3ddc76066 │ 510 kB
  sha256:0ef04748d071c2e631bb3edce8f805cb5512e746b682c83fdae6d8c0b243280b │ 1.0 MB
  sha256:13fd22925b638bb7d2131914bb8f8b0f5f582bee364aec682d9e7fe722bb486a │ 42 kB
  sha256:174c41d4fbc7f63e1f2bb7d2f7837318050406f2f27e5073a84a84f18b48b883 │ 115 kB

Total: 4 MB
```

----------------------------------------

TITLE: Docker Scout Cache CLI Subcommands
DESCRIPTION: Lists the available subcommands for the `docker scout cache` command, along with their descriptions. These subcommands provide functionality to manage disk usage and remove temporary or cached data.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker scout cache
  Subcommands:
    df: Show Docker Scout disk usage
    prune: Remove temporary or cached data
```

----------------------------------------

TITLE: docker scout cache prune Options
DESCRIPTION: Available options for the `docker scout cache prune` command, including force deletion and SBOM pruning.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache_prune.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  -f, --force: Do not prompt for confirmation
  --sboms: Prune cached SBOMs
```

----------------------------------------

TITLE: Delete temporary data with docker scout cache prune
DESCRIPTION: Demonstrates how to use `docker scout cache prune` to delete only temporary data, requiring user confirmation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache_prune.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout cache prune
? Are you sure to delete all temporary data? Yes
    ✓ temporary data deleted
```

----------------------------------------

TITLE: Delete temporary and cached SBOMs with docker scout cache prune
DESCRIPTION: Shows how to use `docker scout cache prune` with the `--sboms` flag to delete both temporary data and cached SBOMs, requiring user confirmation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cache_prune.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout cache prune --sboms
? Are you sure to delete all temporary data and all cached SBOMs? Yes
    ✓ temporary data deleted
    ✓ cached SBOMs deleted
```

----------------------------------------

TITLE: Docker Image Analysis Command-Line Options
DESCRIPTION: This section details the available command-line arguments for controlling the Docker image analysis tool. Each option allows for fine-grained control over the analysis process, report generation, and data filtering, enabling users to tailor the tool's behavior to specific needs.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
-x, --exit-on (stringSlice): Comma separated list of conditions to fail the action step if worse, options are: vulnerability, policy
--format (string, default: text): Output format of the generated vulnerability report:
- text: default output, plain text with or without colors depending on the terminal
- markdown: Markdown output
--hide-policies: Hide policy status from the output
--ignore-base: Filter out CVEs introduced from base image
--ignore-unchanged: Filter out unchanged packages
--multi-stage: Show packages from multi-stage Docker builds
--only-fixed: Filter to fixable CVEs
--only-package-type (stringSlice): Comma separated list of package types (like apk, deb, rpm, npm, pypi, golang, etc)
--only-policy (stringSlice): Comma separated list of policies to evaluate
--only-severity (stringSlice): Comma separated list of severities (critical, high, medium, low, unspecified) to filter CVEs by
--only-stage (stringSlice): Comma separated list of multi-stage Docker build stage names
--only-unfixed: Filter to unfixed CVEs
--org (string): Namespace of the Docker organization
-o, --output (string): Write the report to a file
--platform (string): Platform of image to analyze
--ref (string): Reference to use if the provided tarball contains multiple references.
Can only be used with archive
--to (string): Image, directory, or archive to compare to
--to-env (string): Name of environment to compare to
--to-latest: Latest image processed to compare to
```

----------------------------------------

TITLE: Docker Scout Compare Command Parameter: --to-ref
DESCRIPTION: Documentation for the `--to-ref` parameter used with the `docker scout compare` command. This parameter specifies a reference to use if the provided tarball contains multiple references and can only be used with archive artifacts.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Parameter: --to-ref
  Type: string
  Description: Reference to use if the provided tarball contains multiple references. Can only be used with archive.
```

----------------------------------------

TITLE: Compare Most Recently Built Image to Latest Tag
DESCRIPTION: This example demonstrates how to compare the most recently built Docker image with the image tagged as 'latest' in a specified namespace and repository.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout compare --to namespace/repo:latest
```

----------------------------------------

TITLE: Compare Local Build to Registry Tag
DESCRIPTION: This example shows how to compare a locally built image with the same tag retrieved directly from a registry, explicitly using `local://` and `registry://` prefixes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout compare local://namespace/repo:latest --to registry://namespace/repo:latest
```

----------------------------------------

TITLE: Ignore Base Images During Comparison
DESCRIPTION: This example uses the `--ignore-base` flag to exclude base image layers from the comparison between two specified image versions.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout compare --ignore-base --to namespace/repo:latest namespace/repo:v1.2.3-pre
```

----------------------------------------

TITLE: Generate Markdown Output for Comparison
DESCRIPTION: This example demonstrates how to format the output of the `docker scout compare` command as markdown using the `--format markdown` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker scout compare --format markdown --to namespace/repo:latest namespace/repo:v1.2.3-pre
```

----------------------------------------

TITLE: Filter Comparison by Package Type and Severity
DESCRIPTION: This example shows how to narrow down the comparison results to only include 'maven' package types and display only 'critical' severity vulnerabilities for those packages.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_6

LANGUAGE: console
CODE:
```
$ docker scout compare --only-package-type maven --only-severity critical --to namespace/repo:latest namespace/repo:v1.2.3-pre
```

----------------------------------------

TITLE: Show All Policy Results for Both Images
DESCRIPTION: This example demonstrates a basic comparison command that will show all policy results for both images being compared.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_compare.md#_snippet_7

LANGUAGE: console
CODE:
```
docker scout compare --to namespace/repo:latest namespace/repo:v1.2.3-pre
```

----------------------------------------

TITLE: List Docker Scout configuration
DESCRIPTION: This command displays all currently set Docker Scout configuration key-value pairs, such as the organization namespace.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_config.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker scout config
organization=my-org-namespace
```

----------------------------------------

TITLE: Print a specific Docker Scout configuration value
DESCRIPTION: Use this command to retrieve and display the value of a specific Docker Scout configuration key, such as 'organization'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_config.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout config organization
my-org-namespace
```

----------------------------------------

TITLE: Set a Docker Scout configuration value
DESCRIPTION: This command allows you to set or update a specific Docker Scout configuration key with a new value, for example, setting the default organization namespace.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_config.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout config organization my-org-namespace
    ✓ Successfully set organization to my-org-namespace
```

----------------------------------------

TITLE: Docker Scout CVEs Command Usage
DESCRIPTION: Shows the basic command-line usage for `docker scout cves`, allowing users to specify an image, directory, or archive to scan for CVEs, along with optional parameters.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_0

LANGUAGE: shell
CODE:
```
docker scout cves [OPTIONS] [IMAGE|DIRECTORY|ARCHIVE]
```

----------------------------------------

TITLE: CLI Options for Docker Vulnerability Scanner
DESCRIPTION: This section provides a detailed reference for the command-line options used to customize the behavior of the Docker vulnerability scanning tool. Options include controlling the level of detail, specifying environments, filtering by EPSS scores, setting exit codes, choosing output formats (e.g., SARIF, SPDX, GitLab, Markdown, SBOM), and managing ignored vulnerabilities.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
--details:
  Type: """"
  Default: """"
  Description: ""Print details on default text output""
--env:
  Type: ""string""
  Default: """"
  Description: ""Name of environment""
--epss:
  Type: """"
  Default: """"
  Description: ""Display the EPSS scores and organize the package's CVEs according to their EPSS score""
--epss-percentile:
  Type: ""float32""
  Default: ""0""
  Description: ""Exclude CVEs with EPSS scores less than the specified percentile (0 to 1)""
--epss-score:
  Type: ""float32""
  Default: ""0""
  Description: ""Exclude CVEs with EPSS scores less than the specified value (0 to 1)""
-e, --exit-code:
  Type: """"
  Default: """"
  Description: ""Return exit code '2' if vulnerabilities are detected""
--format:
  Type: ""string""
  Default: ""packages""
  Description: ""Output format of the generated vulnerability report:\n- packages: default output, plain text with vulnerabilities grouped by packages\n- sarif: json Sarif output\n- spdx: json SPDX output\n- gitlab: json GitLab output\n- markdown: markdown output (including some html tags like collapsible sections)\n- sbom: json SBOM output""
--ignore-base:
  Type: """"
  Default: """"
  Description: ""Filter out CVEs introduced from base image""
--ignore-suppressed:
  Type: """"
  Default: """"
  Description: ""Filter CVEs found in Scout exceptions based on the specified exception scope""
--locations:
  Type: """"
  Default: """"
  Description: ""Print package locations including file paths and layer diff_id""
```

----------------------------------------

TITLE: CLI Flags for Docker Vulnerability Scanning
DESCRIPTION: Details various command-line flags used to filter and refine the output of a Docker vulnerability scanner. These flags allow users to specify criteria such as CVE IDs, severity levels, package types, and multi-stage build options to narrow down vulnerability reports.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
CLI Flags:
  --multi-stage:
    Description: Show packages from multi-stage Docker builds
  --only-base:
    Description: Only show CVEs introduced by the base image
  --only-cisa-kev:
    Description: Filter to CVEs listed in the CISA KEV catalog
  --only-cve-id:
    Type: stringSlice
    Description: Comma separated list of CVE ids (like CVE-2021-45105) to search for
  --only-fixed:
    Description: Filter to fixable CVEs
  --only-metric:
    Type: stringSlice
    Description: Comma separated list of CVSS metrics (like AV:N or PR:L) to filter CVEs by
  --only-package:
    Type: stringSlice
    Description: Comma separated regular expressions to filter packages by
  --only-package-type:
    Type: stringSlice
    Description: Comma separated list of package types (like apk, deb, rpm, npm, pypi, golang, etc)
  --only-severity:
    Type: stringSlice
    Description: Comma separated list of severities (critical, high, medium, low, unspecified) to filter CVEs by
  --only-stage:
    Type: stringSlice
    Description: Comma separated list of multi-stage Docker build stage names
  --only-unfixed:
    Description: Filter to unfixed CVEs
  --only-vex-affected:
    Description: Filter CVEs by VEX statements with status not affected
```

----------------------------------------

TITLE: docker scout cves Command Line Arguments
DESCRIPTION: This section outlines the various command-line options and flags available for the `docker scout cves` command. Each option includes its name, expected data type, and a brief description of its function, allowing users to customize the vulnerability analysis process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
--only-vuln-packages: When used with --format=only-packages ignore packages with no vulnerabilities
--org (string): Namespace of the Docker organization
-o, --output (string): Write the report to a file
--platform (string): Platform of image to analyze
--ref (string): Reference to use if the provided tarball contains multiple references. Can only be used with archive
--vex-author (stringSlice): List of VEX statement authors to accept
--vex-location (stringSlice): File location of directory or file containing VEX statements
```

----------------------------------------

TITLE: Display Vulnerabilities Grouped by Package with docker scout cves
DESCRIPTION: This example demonstrates the basic usage of `docker scout cves` to analyze a Docker image, specifically 'alpine'. It shows the default output, which includes indexing packages and reporting whether vulnerable packages were detected.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout cves alpine
Analyzing image alpine
✓ Image stored for indexing
✓ Indexed 18 packages
✓ No vulnerable package detected
```

----------------------------------------

TITLE: Analyze Vulnerabilities from a docker save Tarball
DESCRIPTION: This snippet illustrates how to perform a vulnerability scan on an image saved as a tarball using `docker save`. The `archive://` prefix is used with `docker scout cves` to specify the tarball as the artifact source, allowing analysis without needing the image in the local Docker store.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker save alpine > alpine.tar

$ docker scout cves archive://alpine.tar
Analyzing archive alpine.tar
✓ Archive read
✓ SBOM of image already cached, 18 packages indexed
✓ No vulnerable package detected
```

----------------------------------------

TITLE: Analyze Vulnerabilities from an OCI Directory
DESCRIPTION: This example shows how to analyze vulnerabilities from an OCI layout directory. It first uses `skopeo` to copy a Docker image into an OCI directory, then uses `docker scout cves` with the `oci-dir://` prefix to scan the contents of that directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_6

LANGUAGE: console
CODE:
```
$ skopeo copy --override-os linux docker://alpine oci:alpine

$ docker scout cves oci-dir://alpine
Analyzing OCI directory alpine
✓ OCI directory read
✓ Image stored for indexing
✓ Indexed 19 packages
✓ No vulnerable package detected
```

----------------------------------------

TITLE: Analyze Vulnerabilities from the Current Local Directory
DESCRIPTION: This snippet demonstrates how to use `docker scout cves` to analyze a local directory or file for vulnerabilities. The `fs://` prefix is used to indicate that the target artifact is a file system path, allowing for direct scanning of local codebases or directories.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_7

LANGUAGE: console
CODE:
```
$ docker scout cves fs://.
```

----------------------------------------

TITLE: Export Vulnerabilities to SARIF JSON with Docker Scout
DESCRIPTION: This command demonstrates how to analyze a Docker image for vulnerabilities and export the results into a SARIF JSON file. The SARIF format is a standard for static analysis results, making it suitable for integration with other security tools.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_8

LANGUAGE: console
CODE:
```
$ docker scout cves --format sarif --output alpine.sarif.json alpine
Analyzing image alpine
✓ SBOM of image already cached, 18 packages indexed
✓ No vulnerable package detected
✓ Report written to alpine.sarif.json
```

----------------------------------------

TITLE: Display Vulnerability Report in Markdown Format
DESCRIPTION: This example illustrates how to generate a human-readable vulnerability report in Markdown format directly in the console. The output includes a summary of detected vulnerabilities and image details, suitable for documentation or quick review.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_9

LANGUAGE: console
CODE:
```
$ docker scout cves --format markdown alpine
✓ Pulled
✓ SBOM of image already cached, 19 packages indexed
✗ Detected 1 vulnerable package with 3 vulnerabilities
<h2>:mag: Vulnerabilities of <code>alpine</code></h2>

<details open=""true""><summary>:package: Image Reference</strong> <code>alpine</code></summary>
<table>
<tr><td>digest</td><td><code>sha256:e3bd82196e98898cae9fe7fbfd6e2436530485974dc4fb3b7ddb69134eda2407</code></td><tr><tr><td>vulnerabilities</td><td><img alt=""critical: 0"" src=""https://img.shields.io/badge/critical-0-lightgrey""/> <img alt=""high: 0"" src=""https://img.shields.io/badge/high-0-lightgrey""/> <img alt=""medium: 2"" src=""https://img.shields.io/badge/medium-2-fbb552""/> <img alt=""low: 0"" src=""https://img.shields.io/badge/low-0-lightgrey""/> <img alt=""unspecified: 1"" src=""https://img.shields.io/badge/unspecified-1-lightgrey""/></td></tr>
<tr><td>platform</td><td>linux/arm64</td></tr>
<tr><td>size</td><td>3.3 MB</td></tr>
<tr><td>packages</td><td>19</td></tr>
</table>
</details></table>
</details>
...
```

----------------------------------------

TITLE: List Vulnerable Packages by Type with Docker Scout
DESCRIPTION: This command demonstrates how to filter the vulnerability report to only include packages of a specified type (e.g., `golang`) and only show those that are actually vulnerable. This helps in focusing on specific technology stacks within an image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_10

LANGUAGE: console
CODE:
```
$ docker scout cves --format only-packages --only-package-type golang --only-vuln-packages golang:1.18.0
✓ Pulled
✓ SBOM of image already cached, 296 packages indexed
✗ Detected 1 vulnerable package with 40 vulnerabilities

Name   Version   Type         Vulnerabilities
───────────────────────────────────────────────────────────
stdlib  1.18     golang     2C    29H     8M     1L
```

----------------------------------------

TITLE: Display EPSS Scores for Vulnerabilities with Docker Scout
DESCRIPTION: This example shows how to use the `--epss` flag to augment the `docker scout cves` output with Exploit Prediction Scoring System (EPSS) scores. EPSS scores provide a probability estimate of a vulnerability being exploited in the wild within the next 30 days, aiding in prioritization.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_11

LANGUAGE: console
CODE:
```
$ docker scout cves --epss nginx
 ✓ Provenance obtained from attestation
 ✓ SBOM obtained from attestation, 232 packages indexed
 ✓ Pulled
 ✗ Detected 23 vulnerable packages with a total of 39 vulnerabilities

...

 ✗ HIGH CVE-2023-52425
   https://scout.docker.com/v/CVE-2023-52425
   Affected range  : >=2.5.0-1
   Fixed version   : not fixed
   EPSS Score      : 0.000510
   EPSS Percentile : 0.173680
```

----------------------------------------

TITLE: Filter Vulnerabilities by EPSS Score Threshold
DESCRIPTION: This command demonstrates how to filter the `docker scout cves` output to only display vulnerabilities with an EPSS score higher than a specified threshold. This allows users to focus on vulnerabilities with a higher likelihood of active exploitation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_12

LANGUAGE: console
CODE:
```
$ docker scout cves --epss --epss-score 0.5 nginx
 ✓ SBOM of image already cached, 232 packages indexed
 ✓ EPSS scores for 2024-03-01 already cached
 ✗ Detected 1 vulnerable package with 1 vulnerability

...

 ✗ LOW CVE-2023-44487
   https://scout.docker.com/v/CVE-2023-44487
   Affected range  : >=1.22.1-9
   Fixed version   : not fixed
   EPSS Score      : 0.705850
   EPSS Percentile : 0.979410
```

----------------------------------------

TITLE: Specify EPSS Score Date for Vulnerability Analysis
DESCRIPTION: This example shows how to use the `--epss-date` flag to fetch EPSS scores for a specific historical date. This is useful for historical analysis or when needing to reproduce results based on past EPSS data.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_13

LANGUAGE: console
CODE:
```
$ docker scout cves --epss --epss-date 2024-01-02 nginx
```

----------------------------------------

TITLE: Generate and list vulnerabilities from an SPDX file using syft and docker scout
DESCRIPTION: This command demonstrates how to pipe the SPDX JSON output from `syft` (used to catalog an image) into `docker scout cves` to analyze and display vulnerabilities. The output includes a summary of the analyzed SBOM, a list of vulnerable packages, and a breakdown of vulnerability severities.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_cves.md#_snippet_14

LANGUAGE: console
CODE:
```
$ syft -o spdx-json alpine:3.16.1 | docker scout cves sbom://
 ✔ Pulled image
 ✔ Loaded image                                                                                                                              alpine:3.16.1
 ✔ Parsed image                                                                    sha256:3d81c46cd8756ddb6db9ec36fa06a6fb71c287fb265232ba516739dc67a5f07d
 ✔ Cataloged contents                                                                     274a317d88b54f9e67799244a1250cad3fe7080f45249fa9167d1f871218d35f
   ├── ✔ Packages                        [14 packages]
   ├── ✔ File digests                    [75 files]
   ├── ✔ File metadata                   [75 locations]
   └── ✔ Executables                     [16 executables]
    ✗ Detected 2 vulnerable packages with a total of 11 vulnerabilities


## Overview

                    │        Analyzed SBOM
────────────────────┼──────────────────────────────
  Target            │ <stdin>
    digest          │  274a317d88b5
    platform        │ linux/arm64
    vulnerabilities │    1C     2H     8M     0L
    packages        │ 15


## Packages and Vulnerabilities

   1C     0H     0M     0L  zlib 1.2.12-r1
pkg:apk/alpine/zlib@1.2.12-r1?arch=aarch64&distro=alpine-3.16.1

    ✗ CRITICAL CVE-2022-37434
      https://scout.docker.com/v/CVE-2022-37434
      Affected range : <1.2.12-r2
      Fixed version  : 1.2.12-r2

    ...

11 vulnerabilities found in 2 packages
  CRITICAL  1
  HIGH      2
  MEDIUM    8
  LOW       0
```

----------------------------------------

TITLE: docker scout environment Command Reference
DESCRIPTION: This section details the `docker scout environment` command, outlining its aliases and available options. It serves as a comprehensive reference for managing and interacting with Docker Scout environments, including parameters for organization, output, and platform specification.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker scout environment
Aliases: docker scout env

Options:
  --org (string): Namespace of the Docker organization
  -o, --output (string): Write the report to a file
  --platform (string): Platform of image to record
```

----------------------------------------

TITLE: Compare Docker Scout Images Against a Specific Environment
DESCRIPTION: This example demonstrates how to use the `docker scout compare` command to perform a comparison of images against a designated environment. It illustrates referencing an environment by its name, such as 'production', to facilitate targeted analysis.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout compare --to-env production
```

----------------------------------------

TITLE: List All Configured Docker Scout Environments
DESCRIPTION: This example shows the basic usage of the `docker scout environment` command to retrieve a list of all existing environments. Executing the command without any arguments displays the names of configured environments, such as 'prod' and 'staging'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout environment
prod
staging
```

----------------------------------------

TITLE: List Images Associated with a Docker Scout Environment
DESCRIPTION: This example illustrates how to view the specific images recorded within a particular Docker Scout environment. By providing the environment name, such as 'staging', the command outputs a list of image references, including their full digest.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout environment staging
namespace/repo:tag@sha256:9a4df4fadc9bbd44c345e473e0688c2066a6583d4741679494ba9228cfd93e1b
namespace/other-repo:tag@sha256:0001d6ce124855b0a158569c584162097fe0ca8d72519067c2c8e3ce407c580f
```

----------------------------------------

TITLE: Record Docker Image to Environment with Platform Specification
DESCRIPTION: This example demonstrates how to record a Docker image to a specified environment, such as 'staging', while also explicitly defining the target platform. The command confirms successful recording and pulling of the image for the given platform, like 'linux/amd64'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_environment.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout environment staging namespace/repo:stage-latest --platform linux/amd64
✓ Pulled
✓ Successfully recorded namespace/repo:stage-latest in environment staging
```

----------------------------------------

TITLE: Docker Scout Integration Configure Command Options
DESCRIPTION: Describes the available options for the `docker scout integration configure` command, including their types, default values, and descriptions for configuring or updating an integration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration_configure.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker scout integration configure
Description: Configure or update a new integration configuration

Options:
  --name:
    Type: string
    Default: (empty)
    Description: Name of integration configuration to create
  --org:
    Type: string
    Default: (empty)
    Description: Namespace of the Docker organization
  --parameter:
    Type: stringSlice
    Default: (empty)
    Description: Integration parameters in the form of --parameter NAME=VALUE
```

----------------------------------------

TITLE: Docker Scout Integration Delete CLI Command
DESCRIPTION: Describes the `docker scout integration delete` command, including its purpose and available command-line options for specifying the integration name and organization.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration_delete.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker scout integration delete
  Description: Delete a new integration configuration
  Options:
    --name:
      Type: string
      Description: Name of integration configuration to delete
    --org:
      Type: string
      Description: Namespace of the Docker organization
```

----------------------------------------

TITLE: Docker Scout Integration List Command Options
DESCRIPTION: Details the command-line options for the `docker scout integration list` command, including their types, default values, and descriptions. These options allow users to filter or specify the context for listing Docker Scout integration configurations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration_list.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker scout integration list

Options:
  --name (string): Name of integration configuration to list
  --org (string): Namespace of the Docker organization
```

----------------------------------------

TITLE: Docker Scout Integration Subcommands
DESCRIPTION: This section details the available subcommands for the `docker scout integration` command, providing functionality to configure, delete, and list Docker Scout integrations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_integration.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Subcommands:
  configure:
    Description: Configure or update a new integration configuration
  delete:
    Description: Delete a new integration configuration
  list:
    Description: Integration Docker Scout
```

----------------------------------------

TITLE: Docker Scout CLI Base Command Usage
DESCRIPTION: Illustrates the fundamental syntax for invoking the `docker scout` command-line tool, indicating that it requires a specific subcommand to perform operations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout.md#_snippet_0

LANGUAGE: Shell
CODE:
```
docker scout COMMAND
```

----------------------------------------

TITLE: Docker Scout CLI Subcommands Reference
DESCRIPTION: Provides a detailed reference of all available subcommands for the `docker scout` CLI, along with a brief description of the functionality each subcommand offers. This serves as an API-like documentation for the command-line interface.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Subcommands:
  attestation: Manage attestations on image indexes
  cache: Manage Docker Scout cache and temporary files
  compare: Compare two images and display differences (experimental)
  config: Manage Docker Scout configuration
  cves: Display CVEs identified in a software artifact
  docker-cli-plugin-hooks: runs the plugins hooks
  enroll: Enroll an organization with Docker Scout
  environment: Manage environments (experimental)
  help: Display information about the available commands
  integration: Commands to list, configure, and delete Docker Scout integrations
  policy: Evaluate policies against an image and display the policy evaluation results (experimental)
  push: Push an image or image index to Docker Scout
  quickview: Quick overview of an image
  recommendations: Display available base image updates and remediation recommendations
  repo: Commands to list, enable, and disable Docker Scout on repositories
  sbom: Generate or display SBOM of an image
  stream: Manage streams (experimental)
  version: Show Docker Scout version information
  watch: Watch repositories in a registry and push images and indexes to Docker Scout (experimental)
```

----------------------------------------

TITLE: docker scout policy Command Options
DESCRIPTION: Available options for the `docker scout policy` command, including their types, default values, and descriptions. These options allow for fine-grained control over policy evaluation and reporting.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  -e, --exit-code:
    Type: """"
    Default: """"
    Description: Return exit code '2' if policies are not met, '0' otherwise
  --only-policy:
    Type: ""stringSlice""
    Default: """"
    Description: Comma separated list of policies to evaluate
  --org:
    Type: ""string""
    Default: """"
    Description: Namespace of the Docker organization
  -o, --output:
    Type: ""string""
    Default: """"
    Description: Write the report to a file
  --platform:
    Type: ""string""
    Default: """"
    Description: Platform of image to pull policy results from
  --to-env:
    Type: ""string""
    Default: """"
    Description: Name of the environment to compare to
  --to-latest:
    Type: """"
    Default: """"
    Description: Latest image processed to compare to
```

----------------------------------------

TITLE: Evaluate Docker Scout Policies Against an Image
DESCRIPTION: This command evaluates policies against a specified Docker image and displays the results directly in the console. It's the most basic usage for checking an image's compliance.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout policy dockerscoutpolicy/customers-api-service:0.0.1
```

----------------------------------------

TITLE: Evaluate Docker Scout Policies for a Specific Organization
DESCRIPTION: This command evaluates policies against a Docker image, specifying the Docker organization to which the image belongs. This is useful for managing policies within a multi-organizational setup.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout policy dockerscoutpolicy/customers-api-service:0.0.1 --org dockerscoutpolicy
```

----------------------------------------

TITLE: Evaluate Docker Scout Policies for a Specific Platform
DESCRIPTION: This command evaluates policies against a Docker image, explicitly defining the platform (e.g., linux/amd64) for which the policy results should be pulled. This ensures policy checks are relevant to the target deployment environment.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout policy dockerscoutpolicy/customers-api-service:0.0.1 --platform linux/amd64
```

----------------------------------------

TITLE: Compare Docker Scout Policy Results in a Specific Environment
DESCRIPTION: This command compares policy evaluation results for a Docker repository against a specified environment, such as 'production'. This helps in tracking policy compliance changes across different deployment stages.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_policy.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout policy dockerscoutpolicy/customers-api-service --to-env production
```

----------------------------------------

TITLE: Docker Scout Push Command Options
DESCRIPTION: Describes the available command-line options for `docker scout push`, including their types, default values, and descriptions for customizing the push operation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_push.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --author (string): Name of the author of the image
  --dry-run: Do not push the image but process it
  --org (string): Namespace of the Docker organization to which image will be pushed
  -o, --output (string): Write the report to a file
  --platform (string): Platform of image to be pushed
  --sbom: Create and upload SBOMs
  --timestamp (string): Timestamp of image or tag creation
```

----------------------------------------

TITLE: Push an Image to Docker Scout using CLI
DESCRIPTION: Demonstrates how to push a Docker image to Docker Scout for analysis using the `docker scout push` command, specifying an organization and image tag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_push.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout push --org my-org registry.example.com/repo:tag
```

----------------------------------------

TITLE: Docker Scout Quickview Command Options
DESCRIPTION: Describes the available command-line options for `docker scout quickview`, including their types, default values, and descriptions. These options allow users to customize the analysis and output of the command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_quickview.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Aliases:
- docker scout quickview
- docker scout qv

Options:
- --env (string): Name of the environment
- --ignore-suppressed: Filter CVEs found in Scout exceptions based on the specified exception scope
- --latest: Latest indexed image
- --only-policy (stringSlice): Comma separated list of policies to evaluate
- --only-vex-affected: Filter CVEs by VEX statements with status not affected
- --org (string): Namespace of the Docker organization
- -o, --output (string): Write the report to a file
- --platform (string): Platform of image to analyze
- --ref (string): Reference to use if the provided tarball contains multiple references. Can only be used with archive
- --vex-author (stringSlice): List of VEX statement authors to accept
- --vex-location (stringSlice): File location of directory or file containing VEX statements
```

----------------------------------------

TITLE: Get Quick Overview of a Specific Docker Image
DESCRIPTION: Demonstrates how to use `docker scout quickview` with a specified image reference (e.g., `golang:1.19.4`) to display vulnerability summaries and base image recommendations. The output includes details on your image, its base image, and refreshed/updated base image options.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_quickview.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout quickview golang:1.19.4
    ...Pulling
    ✓ Pulled
    ✓ SBOM of image already cached, 278 packages indexed

  Your image  golang:1.19.4                          │    5C     3H     6M    63L
  Base image  buildpack-deps:bullseye-scm            │    5C     1H     3M    48L     6?
  Refreshed base image  buildpack-deps:bullseye-scm  │    0C     0H     0M    42L
                                                     │    -5     -1     -3     -6     -6
  Updated base image  buildpack-deps:sid-scm         │    0C     0H     1M    29L
                                                     │    -5     -1     -2    -19     -6
```

----------------------------------------

TITLE: Get Quick Overview of Most Recently Built Docker Image
DESCRIPTION: Shows how to use `docker scout qv` (an alias for `docker scout quickview`) without an explicit image reference. When no image is specified, the command automatically analyzes the most recently built image in your local Docker environment.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_quickview.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout qv
```

----------------------------------------

TITLE: Generate and Quick View SPDX SBOM for Docker Image
DESCRIPTION: This command pipeline first uses 'syft' to generate an SPDX-JSON formatted Software Bill of Materials (SBOM) for the 'alpine:3.16.1' Docker image. The output of 'syft' is then piped to 'docker scout quickview sbom://', which processes the SBOM from standard input and provides a summarized view of the image's contents, including packages, file digests, metadata, and executables. This allows for a rapid assessment of an image's composition.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_quickview.md#_snippet_3

LANGUAGE: console
CODE:
```
$  syft -o spdx-json alpine:3.16.1 | docker scout quickview sbom://
 ✔ Loaded image                                                                                                                              alpine:3.16.1
 ✔ Parsed image                                                                    sha256:3d81c46cd8756ddb6db9ec36fa06a6fb71c287fb265232ba516739dc67a5f07d
 ✔ Cataloged contents                                                                     274a317d88b54f9e67799244a1250cad3fe7080f45249fa9167d1f871218d35f
   ├── ✔ Packages                        [14 packages]
   ├── ✔ File digests                    [75 files]
   ├── ✔ File metadata                   [75 locations]
   └── ✔ Executables                     [16 executables]

  Target   │ <stdin>        │    1C     2H     8M     0L
    digest │  274a317d88b5  │
```

----------------------------------------

TITLE: Docker Scout Recommendations Command Options
DESCRIPTION: Describes the command-line options available for the `docker scout recommendations` command, including their types, default values, and purposes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_recommendations.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --only-refresh:
    Type: N/A
    Default: N/A
    Description: Only display base image refresh recommendations
  --only-update:
    Type: N/A
    Default: N/A
    Description: Only display base image update recommendations
  --org:
    Type: string
    Default: N/A
    Description: Namespace of the Docker organization
  -o, --output:
    Type: string
    Default: N/A
    Description: Write the report to a file
  --platform:
    Type: string
    Default: N/A
    Description: Platform of image to analyze
  --ref:
    Type: string
    Default: N/A
    Description: Reference to use if the provided tarball contains multiple references. Can only be used with archive
  --tag:
    Type: string
    Default: N/A
    Description: Specify tag
```

----------------------------------------

TITLE: Display Docker Scout Base Image Update Recommendations
DESCRIPTION: Shows how to use `docker scout recommendations` to display general base image update recommendations for a specified image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_recommendations.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout recommendations golang:1.19.4
```

----------------------------------------

TITLE: Display Docker Scout Base Image Refresh Only Recommendations
DESCRIPTION: Demonstrates how to use the `--only-refresh` option with `docker scout recommendations` to specifically display base image refresh recommendations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_recommendations.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout recommendations --only-refresh golang:1.19.4
```

----------------------------------------

TITLE: Display Docker Scout Base Image Update Only Recommendations
DESCRIPTION: Illustrates using the `--only-update` option with `docker scout recommendations` to filter and display only base image update recommendations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_recommendations.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout recommendations --only-update golang:1.19.4
```

----------------------------------------

TITLE: docker scout repo disable Command Options
DESCRIPTION: Options available for the `docker scout repo disable` command to control its behavior, including targeting specific repositories, organizations, or registries, and filtering.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --all:
    Type: N/A
    Default: N/A
    Description: Disable all repositories of the organization. Can not be used with --filter.
  --filter:
    Type: string
    Default: N/A
    Description: Regular expression to filter repositories by name
  --integration:
    Type: string
    Default: N/A
    Description: Name of the integration to use for enabling an image
  --org:
    Type: string
    Default: N/A
    Description: Namespace of the Docker organization
  --registry:
    Type: string
    Default: N/A
    Description: Container Registry
```

----------------------------------------

TITLE: Disable a specific repository
DESCRIPTION: Disables Docker Scout for a single, specified repository by its full name.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout repo disable my/repository
```

----------------------------------------

TITLE: Disable all repositories of the organization
DESCRIPTION: Disables Docker Scout for all repositories associated with the current organization. Cannot be used with the `--filter` option.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout repo disable --all
```

----------------------------------------

TITLE: Disable some repositories based on a filter
DESCRIPTION: Disables Docker Scout for repositories whose names match a specified regular expression filter.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout repo disable --filter namespace/backend
```

----------------------------------------

TITLE: Disable a repository from a specific registry
DESCRIPTION: Disables Docker Scout for a specific repository located within a designated container registry.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_disable.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout repo disable my/repository --registry 123456.dkr.ecr.us-east-1.amazonaws.com
```

----------------------------------------

TITLE: Docker Scout Repo Enable Command Options
DESCRIPTION: Describes the available command-line options for `docker scout repo enable`, including their types, default values, and descriptions. These options allow for fine-grained control over which repositories are enabled, such as enabling all, filtering by name, or specifying an integration or registry.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --all: Enable all repositories of the organization. Cannot be used with --filter.
  --filter (string): Regular expression to filter repositories by name.
  --integration (string): Name of the integration to use for enabling an image.
  --org (string): Namespace of the Docker organization.
  --registry (string): Container Registry.
```

----------------------------------------

TITLE: Enable a Specific Docker Scout Repository
DESCRIPTION: Demonstrates how to enable a single Docker Scout repository by specifying its full name. This is the most basic usage of the `docker scout repo enable` command, targeting a precise repository for monitoring.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout repo enable my/repository
```

----------------------------------------

TITLE: Enable All Docker Scout Repositories in an Organization
DESCRIPTION: Shows how to enable all repositories associated with the current Docker organization using the `--all` flag. This option simplifies bulk enabling for an entire organization but cannot be combined with the `--filter` option.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout repo enable --all
```

----------------------------------------

TITLE: Enable Docker Scout Repositories Using a Regular Expression Filter
DESCRIPTION: Illustrates how to selectively enable repositories by applying a regular expression filter to their names using the `--filter` option. This allows for enabling multiple repositories that match a specific pattern, providing flexible control over which repositories are monitored.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout repo enable --filter namespace/backend
```

----------------------------------------

TITLE: Enable a Docker Scout Repository from a Specific Registry
DESCRIPTION: Provides an example of enabling a repository located in a particular container registry by using the `--registry` flag. This is useful when managing repositories across different registry providers or instances, ensuring the correct registry is targeted.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_enable.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout repo enable my/repository --registry 123456.dkr.ecr.us-east-1.amazonaws.com
```

----------------------------------------

TITLE: docker scout repo list Command Options
DESCRIPTION: Describes the available command-line options for the `docker scout repo list` command, enabling users to filter repositories by name, status (enabled/disabled), registry, or organization.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo_list.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: docker scout repo list
Description: List Docker Scout repositories

Options:
  --filter <string>: Regular expression to filter repositories by name
  --only-disabled: Filter to disabled repositories only
  --only-enabled: Filter to enabled repositories only
  --only-registry <string>: Filter to a specific registry only:
    - hub.docker.com
    - ecr (AWS ECR)
  --org <string>: Namespace of the Docker organization
```

----------------------------------------

TITLE: Docker Scout Repository Subcommands Overview
DESCRIPTION: This section outlines the available subcommands for `docker scout repo`, detailing their purpose for managing Docker Scout integration with repositories. Users can disable, enable, or list repositories that have Docker Scout configured.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_repo.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
docker scout repo subcommands:
  disable: Disable Docker Scout for a repository.
  enable: Enable Docker Scout for a repository.
  list: List repositories configured with Docker Scout.
```

----------------------------------------

TITLE: Docker Scout SBOM Command Options
DESCRIPTION: This section details the available command-line options for the `docker scout sbom` command, including their types, default values, and descriptions. These options allow users to control the output format, filter package types, specify output files, and define the image platform or reference.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --format:
    Type: string
    Default: json
    Description: Output format:
      - list: list of packages of the image
      - json: json representation of the SBOM
      - spdx: spdx representation of the SBOM
      - cyclonedx: cyclone dx representation of the SBOM
  --only-package-type:
    Type: stringSlice
    Default: """"
    Description: Comma separated list of package types (like apk, deb, rpm, npm, pypi, golang, etc)
      Can only be used with --format list
  -o, --output:
    Type: string
    Default: """"
    Description: Write the report to a file
  --platform:
    Type: string
    Default: """"
    Description: Platform of image to analyze
  --ref:
    Type: string
    Default: """"
    Description: Reference to use if the provided tarball contains multiple references.
      Can only be used with archive
```

----------------------------------------

TITLE: Display list of packages with Docker Scout SBOM
DESCRIPTION: This command generates and displays a list of all packages found in the `alpine` image using the `docker scout sbom` command with the `--format list` option.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout sbom --format list alpine
```

----------------------------------------

TITLE: Filter SBOM packages by type with Docker Scout
DESCRIPTION: This command generates a list of packages for the `alpine` image, specifically filtering to display only packages of type `apk` using the `--only-package-type apk` option. This requires `--format list`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout sbom --format list --only-package-type apk alpine
```

----------------------------------------

TITLE: Display full SBOM in JSON format with Docker Scout
DESCRIPTION: This command generates and displays the complete Software Bill Of Materials (SBOM) for the `alpine` image. By default, if no format is specified, the output is in JSON format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout sbom alpine
```

----------------------------------------

TITLE: Display SBOM of most recently built image with Docker Scout
DESCRIPTION: This command generates and displays the Software Bill Of Materials (SBOM) for the most recently built Docker image. If no image is specified, `docker scout sbom` automatically targets the last built image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout sbom
```

----------------------------------------

TITLE: Write Docker Scout SBOM to a file
DESCRIPTION: This command generates the Software Bill Of Materials (SBOM) for the `alpine` image and writes the output to a specified file named `alpine.sbom` using the `--output` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_sbom.md#_snippet_5

LANGUAGE: console
CODE:
```
$ docker scout sbom --output alpine.sbom alpine
```

----------------------------------------

TITLE: docker scout stream Options
DESCRIPTION: Command-line options available for configuring the behavior of the `docker scout stream` command, including specifying organization, output file, and target platform.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_stream.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Options:
  --org:
    Type: string
    Default: """"
    Description: Namespace of the Docker organization
  -o, --output:
    Type: string
    Default: """"
    Description: Write the report to a file
  --platform:
    Type: string
    Default: """"
    Description: Platform of image to record
```

----------------------------------------

TITLE: List existing docker scout streams
DESCRIPTION: Example demonstrating how to list all currently configured deployment streams using the `docker scout stream` command without any additional arguments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_stream.md#_snippet_1

LANGUAGE: console
CODE:
```
$ %[1]s %[2]s
prod-cluster-123
stage-cluster-234
```

----------------------------------------

TITLE: List images within a specific docker scout stream
DESCRIPTION: Example showing how to list all images that have been recorded within a named stream, such as 'prod-cluster-123', by providing the stream name as an argument.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_stream.md#_snippet_2

LANGUAGE: console
CODE:
```
$ %[1]s %[2]s prod-cluster-123
namespace/repo:tag@sha256:9a4df4fadc9bbd44c345e473e0688c2066a6583d4741679494ba9228cfd93e1b
namespace/other-repo:tag@sha256:0001d6ce124855b0a158569c584162097fe0ca8d72519067c2c8e3ce407c580f
```

----------------------------------------

TITLE: Record an image to a docker scout stream for a specific platform
DESCRIPTION: Example demonstrating how to record a specific image to a named stream, like 'stage-cluster-234', while also specifying the target platform for the image, such as 'linux/amd64'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_stream.md#_snippet_3

LANGUAGE: console
CODE:
```
$ %[1]s %[2]s stage-cluster-234 namespace/repo:stage-latest --platform linux/amd64
✓ Pulled
✓ Successfully recorded namespace/repo:stage-latest in stream stage-cluster-234
```

----------------------------------------

TITLE: Check Docker Scout Version
DESCRIPTION: Use the `docker scout version` command to display the current version of Docker Scout, along with detailed build information such as the Go version, operating system, architecture, and the Git commit hash. This helps in confirming the installed version and provides crucial details for support or debugging.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_version.md#_snippet_0

LANGUAGE: console
CODE:
```
docker scout version
```

LANGUAGE: console
CODE:
```
$ docker scout version

      ⢀⢀⢀             ⣀⣀⡤⣔⢖⣖⢽⢝
   ⡠⡢⡣⡣⡣⡣⡣⡣⡢⡀    ⢀⣠⢴⡲⣫⡺⣜⢞⢮⡳⡵⡹⡅
  ⡜⡜⡜⡜⡜⡜⠜⠈⠈        ⠁⠙⠮⣺⡪⡯⣺⡪⡯⣺ 
 ⢘⢜⢜⢜⢜⠜               ⠈⠪⡳⡵⣹⡪⠇ 
 ⠨⡪⡪⡪⠂    ⢀⡤⣖⢽⡹⣝⡝⣖⢤⡀    ⠘⢝⢮⡚       _____                 _   
  ⠱⡱⠁    ⡴⡫⣞⢮⡳⣝⢮⡺⣪⡳⣝⢦    ⠘⡵⠁      / ____| Docker        | |  
   ⠁    ⣸⢝⣕⢗⡵⣝⢮⡳⣝⢮⡺⣪⡳⣣    ⠁      | (___   ___ ___  _   _| |_ 
        ⣗⣝⢮⡳⣝⢮⡳⣝⢮⡳⣝⢮⢮⡳            \___ \ / __/ _ | | | | __|
   ⢀    ⢱⡳⡵⣹⡪⡳⣝⢮⡳⣝⢮⡳⡣⡏    ⡀       ____) | (_| (_) | |_| | |_ 
  ⢀⢾⠄    ⠫⣞⢮⡺⣝⢮⡳⣝⢮⡳⣝⠝    ⢠⢣⢂     |_____/ ______/ __,_|__| 
  ⡼⣕⢗⡄    ⠈⠓⠝⢮⡳⣝⠮⠳⠙     ⢠⢢⢣⢣  
 ⢰⡫⡮⡳⣝⢦⡀              ⢀⢔⢕⢕⢕⢕⠅ 
 ⡯⣎⢯⡺⣪⡳⣝⢖⣄⣀        ⡀⡠⡢⡣⡣⡣⡣⡣⡃  
⢸⢝⢮⡳⣝⢮⡺⣪⡳⠕⠗⠉⠁    ⠘⠜⡜⡜⡜⡜⡜⡜⠜⠈   
⡯⡳⠳⠝⠊⠓⠉             ⠈⠈⠈⠈      



version: v1.0.9 (go1.21.3 - darwin/arm64)
git commit: 8bf95bf60d084af341f70e8263342f71b0a3cd16
```

----------------------------------------

TITLE: docker scout watch Command Options
DESCRIPTION: Options available for configuring the behavior of the `docker scout watch` command, including specifying repositories, registries, intervals, and push behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Option: --all-images
  Type: N/A
  Default: N/A
  Description: Push all images instead of only the ones pushed during the watch command is running
Option: --dry-run
  Type: N/A
  Default: N/A
  Description: Watch images and prepare them, but do not push them
Option: --interval
  Type: int64
  Default: 60
  Description: Interval in seconds between checks
Option: --org
  Type: string
  Default: N/A
  Description: Namespace of the Docker organization to which image will be pushed
Option: --refresh-registry
  Type: N/A
  Default: N/A
  Description: Refresh the list of repositories of a registry at every run. Only with --registry.
Option: --registry
  Type: string
  Default: N/A
  Description: Registry to watch
Option: --repository
  Type: stringSlice
  Default: N/A
  Description: Repository to watch
Option: --sbom
  Type: N/A
  Default: N/A
  Description: Create and upload SBOMs
Option: --tag
  Type: stringSlice
  Default: N/A
  Description: Regular expression to match tags to watch
Option: --workers
  Type: int
  Default: 3
  Description: Number of concurrent workers
```

----------------------------------------

TITLE: Watch Multiple Repositories with Docker Scout
DESCRIPTION: This command watches for new images across two specified repositories and pushes them to Docker Scout for analysis. It requires specifying the organization and each repository individually.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#_snippet_1

LANGUAGE: console
CODE:
```
$ docker scout watch --org my-org --repository registry-1.example.com/repo-1 --repository registry-2.example.com/repo-2
```

----------------------------------------

TITLE: Watch and Push Images with Specific Tag using Docker Scout
DESCRIPTION: This command configures `docker scout watch` to monitor a specific repository and only push images that match the provided tag (e.g., 'latest') to Docker Scout.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#_snippet_2

LANGUAGE: console
CODE:
```
$ docker scout watch --org my-org --repository registry.example.com/my-service --tag latest
```

----------------------------------------

TITLE: Watch All Repositories in a Registry with Docker Scout
DESCRIPTION: This command instructs `docker scout watch` to monitor all repositories within a specified Docker registry, pushing any new or updated images to Docker Scout.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#_snippet_3

LANGUAGE: console
CODE:
```
$ docker scout watch --org my-org --registry registry.example.com
```

----------------------------------------

TITLE: Push All Images from Repository to Docker Scout
DESCRIPTION: This command uses the `--all-images` flag to force `docker scout watch` to push all images from the specified repository to Docker Scout, not just those newly detected or updated.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/docker/scout-cli/docs/scout_watch.md#_snippet_4

LANGUAGE: console
CODE:
```
$ docker scout watch--org my-org --repository registry.example.com/my-service --all-images
```

----------------------------------------

TITLE: Attestation Manifest Structure and Properties
DESCRIPTION: Describes the structure and properties of an Attestation Manifest, which is attached to the root image index object. It details how attestation blobs are referenced via layers and the specific `mediaType` and annotations used for in-toto attestations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Attestation Manifest:
  image config: object (ignored)
    Description: The image `config` descriptor will point to a valid image config, however, it will not contain attestation-specific details, and should be ignored as it is only included for compatibility purposes.
  layers: array of objects
    Description: Each image layer in `layers` will contain a descriptor for a single attestation blob.
    Layer Descriptor Properties:
      mediaType: string
        Description: The `mediaType` of each layer will be set in accordance to its contents.
        Supported Values:
          application/vnd.in-toto+json: Indicates an in-toto attestation blob (currently, the only supported option).
      annotations: object (optional)
        Description: Annotations that may be set on each layer descriptor to assist attestation traversal.
        Properties:
          in-toto.io/predicate-type: string
            Description: This annotation will be set if the enclosed attestation is an in-toto attestation. The annotation will be set to contain the same value as the `predicateType` property present inside the attestation. When present, this annotation may be used to find the specific attestation(s) they are looking for to avoid pulling the contents of the others.
```

----------------------------------------

TITLE: in-toto Attestation Statement JSON Structure
DESCRIPTION: Defines the JSON structure for a full in-toto attestation statement, including `_type`, `subject`, `predicateType`, and `predicate` fields, as contained within an `application/vnd.in-toto+json` blob.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""_type"": ""https://in-toto.io/Statement/v0.1"",
  ""subject"": [
    {
      ""name"": ""<NAME>"",
      ""digest"": {""<ALGORITHM>"": ""<HEX_VALUE>""}
    },
    ...
  ],
  ""predicateType"": ""<URI>"",
  ""predicate"": { ... }
}
```

----------------------------------------

TITLE: Attestation Manifest Descriptor Properties
DESCRIPTION: Details the properties of an Attestation Manifest Descriptor, attached to the root image index `manifests` key. Specifies the `platform` property for preventing accidental runtime pulling and key annotations for traversal and referencing the target image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Attestation Manifest Descriptor:
  platform: object
    Description: To prevent container runtimes from accidentally pulling or running the image described in the manifest, the `platform` property of the attestation manifest will be set as follows.
    Properties:
      architecture: string (value: ""unknown"")
      os: string (value: ""unknown"")
  annotations: object
    Description: Annotations that will be set on the manifest descriptor to assist index traversal.
    Properties:
      vnd.docker.reference.type: string (value: ""attestation-manifest"")
        Description: This annotation describes the type of the artifact, and will be set to `attestation-manifest`. If any other value is specified, the entire manifest should be ignored.
      vnd.docker.reference.digest: string
        Description: This annotation will contain the digest of the object in the image index that the attestation manifest refers to. When present, this annotation can be used to find the matching attestation manifest for a selected image manifest.
```

----------------------------------------

TITLE: OCI Image Index JSON Structure
DESCRIPTION: This JSON snippet defines an OCI image index, which references an AMD64 image and an associated attestation manifest. It illustrates how different components of a container image are linked together within the OCI specification.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""mediaType"": ""application/vnd.oci.image.index.v1+json"",
  ""schemaVersion"": 2,
  ""manifests"": [
    {
      ""mediaType"": ""application/vnd.oci.image.manifest.v1+json"",
      ""digest"": ""sha256:23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827"",
      ""size"": 1234,
      ""platform"": {
        ""architecture"": ""amd64"",
        ""os"": ""linux""
      }
    },
    {
      ""mediaType"": ""application/vnd.oci.image.manifest.v1+json"",
      ""digest"": ""sha256:02cb9aa7600e73fcf41ee9f0f19cc03122b2d8be43d41ce4b21335118f5dd943"",
      ""size"": 1234,
      ""annotations"": {
        ""vnd.docker.reference.digest"": ""sha256:23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827"",
        ""vnd.docker.reference.type"": ""attestation-manifest""
      },
      ""platform"": {
         ""architecture"": ""unknown"",
         ""os"": ""unknown""
      }
    }
  ]
}
```

----------------------------------------

TITLE: OCI Attestation Manifest JSON Structure
DESCRIPTION: This JSON snippet represents an OCI attestation manifest. It contains one attestation, which is an in-toto attestation with a ""https://spdx.dev/Document"" predicate, signifying that it defines a Software Bill of Materials (SBOM) for the referenced image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#_snippet_4

LANGUAGE: json
CODE:
```
{
  ""mediaType"": ""application/vnd.oci.image.manifest.v1+json"",
  ""schemaVersion"": 2,
  ""config"": {
    ""mediaType"": ""application/vnd.oci.image.config.v1+json"",
    ""digest"": ""sha256:a781560066f20ec9c28f2115a95a886e5e71c7c7aa9d8fd680678498b82f3ea3"",
    ""size"": 123
  },
  ""layers"": [
    {
      ""mediaType"": ""application/vnd.in-toto+json"",
      ""digest"": ""sha256:133ae3f9bcc385295b66c2d83b28c25a9f294ce20954d5cf922dda860429734a"",
      ""size"": 1234,
      ""annotations"": {
        ""in-toto.io/predicate-type"": ""https://spdx.dev/Document""
      }
    }
  ]
}
```

----------------------------------------

TITLE: OCI Image Configuration JSON Structure
DESCRIPTION: This JSON snippet shows the configuration for an OCI image. It specifies the architecture, operating system, and the root filesystem layers, linking to the actual content via diff IDs.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#_snippet_5

LANGUAGE: json
CODE:
```
{
  ""architecture"": ""unknown"",
  ""os"": ""unknown"",
  ""config"": {},
  ""rootfs"": {
    ""type"": ""layers"",
    ""diff_ids"": [
      ""sha256:133ae3f9bcc385295b66c2d83b28c25a9f294ce20954d5cf922dda860429734a""
    ]
  }
}
```

----------------------------------------

TITLE: In-Toto Attestation Body with SPDX Predicate
DESCRIPTION: This JSON snippet represents the content of an attestation layer, specifically an in-toto statement. It includes an SPDX predicate type, signifying that the predicate contains SBOM data listing the packages used during the build in SPDX format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/attestation-storage.md#_snippet_6

LANGUAGE: json
CODE:
```
{
  ""_type"": ""https://in-toto.io/Statement/v0.1"",
  ""predicateType"": ""https://spdx.dev/Document"",
  ""subject"": [
    {
      ""name"": ""_"",
      ""digest"": {
        ""sha256"": ""23678f31b3b3586c4fb318aecfe64a96a1f0916ba8faf9b2be2abee63fa9e827""
      }
    }
  ],
  ""predicate"": {
    ""SPDXID"": ""SPDXRef-DOCUMENT"",
    ""spdxVersion"": ""SPDX-2.2"",
    ...
}
```

----------------------------------------

TITLE: SLSA Provenance: builder.id Field Population
DESCRIPTION: This section explains how BuildKit sets the `builder.id` field in SLSA Provenance, which corresponds to the URL of the build. This field is included in both `mode=min` and `mode=max` attestations and can be set via the `builder-id` attestation parameter.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_0

LANGUAGE: json
CODE:
```
    ""builder"": {
      ""id"": ""https://github.com/docker/buildx/actions/runs/3709599520""
    },
```

----------------------------------------

TITLE: SLSA Provenance: buildType Field Definition
DESCRIPTION: This section describes the `buildType` field in SLSA Provenance, which BuildKit sets to `https://mobyproject.org/buildkit@v1`. This value helps determine the structure of the provenance content and is included in both `mode=min` and `mode=max` attestations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_1

LANGUAGE: json
CODE:
```
    ""buildType"": ""https://mobyproject.org/buildkit@v1"",
```

----------------------------------------

TITLE: SLSA Provenance: invocation.configSource Field
DESCRIPTION: This section details the `invocation.configSource` field, which describes the configuration that initialized the build. For remote contexts, it includes the URI and digest; for local frontends, it defines the `entryPoint`. This field is included in both `mode=min` and `mode=max` attestations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_2

LANGUAGE: json
CODE:
```
    ""invocation"": {
      ""configSource"": {
        ""uri"": ""https://github.com/moby/buildkit.git#refs/tags/v0.11.0"",
        ""digest"": {
          ""sha1"": ""4b220de5058abfd01ff619c9d2ff6b09a049bea0""
        },
        ""entryPoint"": ""Dockerfile""
      },
      ...
    },
```

----------------------------------------

TITLE: SLSA Provenance: invocation.parameters Field
DESCRIPTION: This section describes the `invocation.parameters` field, which details build inputs passed to the build. It partially includes fields with `mode=min` and fully with `mode=max`, covering `locals`, `frontend`, `args`, `secrets`, and `ssh`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_3

LANGUAGE: json
CODE:
```
    ""invocation"": {
      ""parameters"": {
        ""frontend"": ""gateway.v0"",
        ""args"": {
          ""build-arg:BUILDKIT_CONTEXT_KEEP_GIT_DIR"": ""1"",
          ""label:FOO"": ""bar"",
          ""source"": ""docker/dockerfile-upstream:master"",
          ""target"": ""release""
        },
        ""secrets"": [
          {
            ""id"": ""GIT_AUTH_HEADER"",
            ""optional"": true
          },
          ...
        ],
        ""ssh"": [],
        ""locals"": []
      },
      ...
    },
```

----------------------------------------

TITLE: SLSA Provenance: invocation.environment Field
DESCRIPTION: This section explains the `invocation.environment` field, which currently only sets the `platform` of the current build machine. This field is included in both `mode=min` and `mode=max` attestations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_4

LANGUAGE: json
CODE:
```
    ""invocation"": {
      ""environment"": {
        ""platform"": ""linux/amd64""
      },
      ...
    },
```

----------------------------------------

TITLE: SLSA Provenance Materials Field
DESCRIPTION: This field defines all external artifacts used in the build, such as Git repository URLs, HTTP tarball URLs, or Docker images. Docker image URLs are in Package URL format. Each material includes an immutable checksum for verification. This field is included in both `min` and `max` provenance modes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_5

LANGUAGE: json
CODE:
```
    ""materials"": [
      {
        ""uri"": ""pkg:docker/alpine@3.17?platform=linux%2Famd64"",
        ""digest"": {
          ""sha256"": ""8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4""
        }
      },
      {
        ""uri"": ""https://github.com/moby/buildkit.git#refs/tags/v0.11.0"",
        ""digest"": {
          ""sha1"": ""4b220de5058abfd01ff619c9d2ff6b09a049bea0""
        }
      },
      ...
    ],
```

----------------------------------------

TITLE: SLSA Provenance BuildConfig Field
DESCRIPTION: This field defines the build steps performed, specifically the LLB (Low-Level Builder) definition used by BuildKit. The `llbDefinition` field contains JSON representations of the LLB ProtoBuf API, with `inputs` showing step dependencies. This field is only included in `max` provenance mode.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_6

LANGUAGE: json
CODE:
```
  ""buildConfig"": {
    ""llbDefinition"": [
      {
        ""id"": ""step0"",
        ""op"": {
          ""Op"": {
            ""exec"": {
              ""meta"": {
                ""args"": [
                  ""/bin/sh"",
                  ""-c"",
                  ""go build .""
                ],
                ""env"": [
                  ""PATH=/go/bin:/usr/local/go/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"",
                  ""GOPATH=/go"",
                  ""GOFLAGS=-mod=vendor""
                ],
                ""cwd"": ""/src""
              },
              ""mounts"": [...]
            }
          },
          ""platform"": {...}
        },
        ""inputs"": [
          ""step8:0"",
          ""step2:0""
        ]
      },
      ...
    ]
  },
```

----------------------------------------

TITLE: SLSA Provenance Metadata Build Invocation ID
DESCRIPTION: A unique identifier for a specific build invocation. When building a multi-platform image with a single build request, this value will be shared by all the platform versions of the image. This field is included in both `min` and `max` provenance modes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_7

LANGUAGE: json
CODE:
```
    ""metadata"": {
      ""buildInvocationID"": ""rpv7a389uzil5lqmrgwhijwjz"",
      ...
    },
```

----------------------------------------

TITLE: SLSA Provenance Metadata Build Started Timestamp
DESCRIPTION: Timestamp indicating when the build process began. This field is included in both `min` and `max` provenance modes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_8

LANGUAGE: json
CODE:
```
    ""metadata"": {
      ""buildStartedOn"": ""2021-11-17T15:00:00Z"",
      ...
    },
```

----------------------------------------

TITLE: SLSA Provenance Metadata Build Finished Timestamp
DESCRIPTION: Timestamp indicating when the build process completed. This field is included in both `min` and `max` provenance modes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_9

LANGUAGE: json
CODE:
```
    ""metadata"": {
      ""buildFinishedOn"": ""2021-11-17T15:01:00Z"",
      ...
    },
```

----------------------------------------

TITLE: SLSA Provenance Metadata Completeness Field
DESCRIPTION: This field indicates whether the provenance information is complete for parameters, environment, and materials. `parameters` is true if all build arguments are included. `environment` is always true for BuildKit builds. `materials` is true if all build dependencies are tracked. This field is included in both `min` and `max` provenance modes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_10

LANGUAGE: json
CODE:
```
    ""metadata"": {
      ""completeness"": {
        ""parameters"": true,
        ""environment"": true,
        ""materials"": true
      },
      ...
    },
```

----------------------------------------

TITLE: Configure Reproducible Build Metadata
DESCRIPTION: Corresponds to SLSA `metadata.reproducible`. This field defines if the build result is supposed to be byte-by-byte reproducible. Users can set this value with the `reproducible=true` attestation parameter.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_11

LANGUAGE: json
CODE:
```
    ""metadata"": {
      ""reproducible"": false,
      ...
    },
```

----------------------------------------

TITLE: Configure Hermetic Build Metadata
DESCRIPTION: This extension field is included with `mode=min` and `mode=max`. It is set to true if the build was hermetic and did not access the network. In Dockerfiles, a build is hermetic if it does not use `RUN` commands or disables network with the `--network=none` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_12

LANGUAGE: json
CODE:
```
    ""metadata"": {
      ""https://mobyproject.org/buildkit@v1#hermetic"": true,
      ...
    },
```

----------------------------------------

TITLE: Configure BuildKit-Specific Metadata Extension
DESCRIPTION: This extension field is partially included with `mode=min` and defines BuildKit-specific additional metadata that is not part of the SLSA provenance specification. It can contain `source`, `layers`, and `vcs` sub-fields.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_13

LANGUAGE: json
CODE:
```
    ""metadata"": {
      ""https://mobyproject.org/buildkit@v1#metadata"": {
        ""source"": {...},
        ""layers"": {...},
        ""vcs"": {...}
      },
      ...
    },
```

----------------------------------------

TITLE: BuildKit Metadata Extension (`metadata.https://mobyproject.org/buildkit@v1#metadata`) Structure
DESCRIPTION: Detailed structure and description of the BuildKit-specific metadata extension field, including its sub-fields for source mapping, layer mapping, and version control system information.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
metadata.https://mobyproject.org/buildkit@v1#metadata: object
  source: object (Optional, mode=max)
    description: Defines a source mapping of LLB build steps to their original source code (e.g., Dockerfile commands).
    fields:
      locations: array (ranges of Dockerfile commands)
      infos: array (source code itself)
  layers: object (Optional, mode=max)
    description: Defines the layer mapping of LLB build step mounts to OCI descriptors of equivalent layers.
  vcs: object (Optional, mode=min, mode=max)
    description: Defines optional metadata for the version control system used for the build.
    notes: BuildKit doesn't verify these values; use as a metadata hint. Can be populated via `vcs:source` and `vcs:revision` build options.
```

----------------------------------------

TITLE: Provenance Attestation for Docker Image (mode=min)
DESCRIPTION: This JSON snippet displays a provenance attestation generated for a Docker image built with `mode=min`. It includes details such as the subject image, predicate type (SLSA provenance v0.2), builder information, source materials, build invocation parameters, and metadata like build timestamps and completeness.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_15

LANGUAGE: json
CODE:
```
{
  ""_type"": ""https://in-toto.io/Statement/v0.1"",
  ""predicateType"": ""https://slsa.dev/provenance/v0.2"",
  ""subject"": [
    {
      ""name"": ""pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>"",
      ""digest"": {
        ""sha256"": ""e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862""
      }
    }
  ],
  ""predicate"": {
    ""builder"": {
      ""id"": """"
    },
    ""buildType"": ""https://mobyproject.org/buildkit@v1"",
    ""materials"": [
      {
        ""uri"": ""pkg:docker/alpine@latest?platform=linux%2Famd64"",
        ""digest"": {
          ""sha256"": ""8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4""
        }
      }
    ],
    ""invocation"": {
      ""configSource"": {
        ""entryPoint"": ""Dockerfile""
      },
      ""parameters"": {
        ""frontend"": ""dockerfile.v0"",
        ""args"": {},
        ""locals"": [
          {
            ""name"": ""context""
          },
          {
            ""name"": ""dockerfile""
          }
        ]
      },
      ""environment"": {
        ""platform"": ""linux/amd64""
      }
    },
    ""metadata"": {
      ""buildInvocationID"": ""yirbp1aosi1vqjmi3z6bc75nb"",
      ""buildStartedOn"": ""2022-12-08T11:48:59.466513707Z"",
      ""buildFinishedOn"": ""2022-12-08T11:49:01.256820297Z"",
      ""reproducible"": false,
      ""completeness"": {
        ""parameters"": true,
        ""environment"": true,
        ""materials"": false
      },
      ""https://mobyproject.org/buildkit@v1#metadata"": {}
    }
  }
}
```

----------------------------------------

TITLE: Provenance Attestation for Docker Image (mode=max)
DESCRIPTION: This JSON snippet illustrates a provenance attestation for a Docker image built with `mode=max`. In addition to the fields found in `mode=min`, this attestation includes a `buildConfig` section with `llbDefinition`, providing more detailed low-level build information and source locations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/attestations/slsa-definitions.md#_snippet_16

LANGUAGE: json
CODE:
```
{
  ""_type"": ""https://in-toto.io/Statement/v0.1"",
  ""predicateType"": ""https://slsa.dev/provenance/v0.2"",
  ""subject"": [
    {
      ""name"": ""pkg:docker/<registry>/<image>@<tag/digest>?platform=<platform>"",
      ""digest"": {
        ""sha256"": ""e8275b2b76280af67e26f068e5d585eb905f8dfd2f1918b3229db98133cb4862""
      }
    }
  ],
  ""predicate"": {
    ""builder"": {
      ""id"": """"
    },
    ""buildType"": ""https://mobyproject.org/buildkit@v1"",
    ""materials"": [
      {
        ""uri"": ""pkg:docker/alpine@latest?platform=linux%2Famd64"",
        ""digest"": {
          ""sha256"": ""8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4""
        }
      }
    ],
    ""invocation"": {
      ""configSource"": {
        ""entryPoint"": ""Dockerfile""
      },
      ""parameters"": {
        ""frontend"": ""dockerfile.v0"",
        ""args"": {},
        ""locals"": [
          {
            ""name"": ""context""
          },
          {
            ""name"": ""dockerfile""
          }
        ]
      },
      ""environment"": {
        ""platform"": ""linux/amd64""
      }
    },
    ""buildConfig"": {
      ""llbDefinition"": [
        {
          ""id"": ""step0"",
          ""op"": {
            ""Op"": {
              ""source"": {
                ""identifier"": ""docker-image://docker.io/library/alpine:latest@sha256:8914eb54f968791faf6a8638949e480fef81e697984fba772b3976835194c6d4""
              }
            },
            ""platform"": {
              ""Architecture"": ""amd64"",
              ""OS"": ""linux""
            },
            ""constraints"": {}
          }
        },
        {
          ""id"": ""step1"",
          ""op"": {
            ""Op"": null
          },
          ""inputs"": [""step0:0""]
        }
      ]
    },
    ""metadata"": {
      ""buildInvocationID"": ""46ue2x93k3xj5l463dektwldw"",
      ""buildStartedOn"": ""2022-12-08T11:50:54.953375437Z"",
      ""buildFinishedOn"": ""2022-12-08T11:50:55.447841328Z"",
      ""reproducible"": false,
      ""completeness"": {
        ""parameters"": true,
        ""environment"": true,
        ""materials"": false
      },
      ""https://mobyproject.org/buildkit@v1#metadata"": {
        ""source"": {
          ""locations"": {
            ""step0"": {
              ""locations"": [
                {
                  ""ranges"": [
                    {
                      ""start"": {
                        ""line"": 1
                      },
                      ""end"": {
                        ""line"": 1
                      }
                    }
                  ]
                }
              ]
            }
          },
          ""infos"": [
            {
              ""filename"": ""Dockerfile"",
              ""data"": ""RlJPTSBhbHBpbmU6bGF0ZXN0Cg=="",
              ""llbDefinition"": [
                {
                  ""id"": ""step0"",
                  ""op"": {
                    ""Op"": {
                      ""source"": {
                        ""identifier"": ""local://dockerfile"",
                        ""attrs"": {
                          ""local.differ"": ""none""
                        }
                      }
                    }
                  }
                }
              ]
            }
          ]
        }
      }
    }
  }
}
```

----------------------------------------

TITLE: Example buildkitd.toml Configuration
DESCRIPTION: A complete example of the `buildkitd.toml` configuration file, demonstrating global settings such as debug, trace, root path, and insecure entitlements, as well as specific sections for log formatting, DNS nameservers, gRPC addresses and TLS settings, OpenTelemetry socket path, and Container Device Interface (CDI) settings including disabling CDI and specifying spec directories.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#_snippet_0

LANGUAGE: toml
CODE:
```
# debug enables additional debug logging
debug = true
# trace enables additional trace logging (very verbose, with potential performance impacts)
trace = true
# root is where all buildkit state is stored.
root = ""/var/lib/buildkit""
# insecure-entitlements allows insecure entitlements, disabled by default.
insecure-entitlements = [ ""network.host"", ""security.insecure"" ]

[log]
  # log formatter: json or text
  format = ""text""

[dns]
  nameservers=[""1.1.1.1"",""8.8.8.8""]
  options=[""edns0""]
  searchDomains=[""example.com""]

[grpc]
  address = [ ""tcp://0.0.0.0:1234"" ]
  # debugAddress is address for attaching go profiles and debuggers.
  debugAddress = ""0.0.0.0:6060""
  uid = 0
  gid = 0
  [grpc.tls]
    cert = ""/etc/buildkit/tls.crt""
    key = ""/etc/buildkit/tls.key""
    ca = ""/etc/buildkit/tlsca.crt""

[otel]
  # OTEL collector trace socket path
  socketPath = ""/run/buildkit/otel-grpc.sock""

[cdi]
  # Disables support of the Container Device Interface (CDI).
  disabled = true
  # List of directories to scan for CDI spec files. For more details about CDI
  # specification, please refer to https://github.com/cncf-tags/container-device-interface/blob/main/SPEC.md#cdi-json-specification
  specDirs = [""/etc/cdi"", ""/var/run/cdi"", ""/etc/buildkit/cdi""]
```

----------------------------------------

TITLE: BuildKit Configuration Reference
DESCRIPTION: Defines the various configurable parameters for BuildKit's build history and worker components (OCI and containerd), including settings for resource management, garbage collection, and runtime specifics.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
[history]
  maxAge: int (seconds)
    Maximum age of history entries to keep.
  maxEntries: int
    Maximum number of history entries to keep.

[worker.oci]
  enabled: boolean
    Enables/disables the OCI worker.
  platforms: array of strings
    Manually configured platforms (e.g., ""linux/amd64"", ""linux/arm64""). Detected automatically if unset.
  snapshotter: string
    Snapshotter type (""auto"", ""overlayfs"", or ""native""). Default is ""auto"".
  rootless: boolean
    Enables rootless mode. See docs/rootless.md for details.
  noProcessSandbox: boolean
    Whether to run subprocesses in the main PID namespace. Useful for rootless BuildKit inside a container.
  gc: boolean
    Enables/disables garbage collection.
  reservedSpace: string (bytes, unit, or percentage)
    Minimum disk space guaranteed to be retained by this worker. E.g., ""512000000"", ""512MB"", ""10%"".
  maxUsedSpace: string (bytes, unit, or percentage)
    Maximum disk space that may be used by this worker. Usage above this threshold will be reclaimed during GC.
  minFreeSpace: string (bytes, unit, or percentage)
    Target amount of free disk space the garbage collector will attempt to leave, never below reservedSpace.
  binary: string
    Alternate OCI worker binary name (e.g., 'crun'). By default, buildkit-runc or runc is used.
  apparmor-profile: string
    Name of the AppArmor profile to constrain build containers. Profile must be pre-loaded.
  max-parallelism: int
    Limits the number of parallel build steps.
  cniPoolSize: int
    Maintains a pool of reusable CNI network namespaces to amortize overhead.

  [worker.oci.labels]
    ""key"": string
      Custom labels for the OCI worker.

  [[worker.oci.gcpolicy]] (array of policies)
    reservedSpace: string (bytes, unit, or percentage)
      Minimum disk space guaranteed to be retained by this policy.
    maxUsedSpace: string (bytes, unit, or percentage)
      Maximum disk space that may be used by this policy.
    minFreeSpace: string (bytes, unit, or percentage)
      Target amount of free disk space the garbage collector will attempt to leave.
    keepDuration: string (seconds or duration string)
      Duration to keep entries (e.g., 172800, ""48h"").
    filters: array of strings
      Filters to apply to this policy (e.g., ""type==source.local"").
    all: boolean
      If true, applies policy to all entries.

[worker.containerd]
  address: string
    Address of the containerd socket (e.g., ""/run/containerd/containerd.sock"").
  enabled: boolean
    Enables/disables the containerd worker.
  platforms: array of strings
    Manually configured platforms.
  namespace: string
    Containerd namespace to use (e.g., ""buildkit"").
  gc: boolean
    Enables/disables garbage collection.
  reservedSpace: string (bytes, unit, or percentage)
    Minimum disk space guaranteed to be retained by this worker.
  maxUsedSpace: string (bytes, unit, or percentage)
    Maximum disk space that may be used by this worker.
  minFreeSpace: string (bytes, unit, or percentage)
    Target amount of free disk space the garbage collector will attempt to leave.
  cniPoolSize: int
    Maintains a pool of reusable CNI network namespaces.
  defaultCgroupParent: string
    Sets the parent cgroup of all containers.

  [worker.containerd.labels]
    ""key"": string
      Custom labels for the containerd worker.

  [worker.containerd.runtime]
    name: string
      Name of the containerd runtime (e.g., ""io.containerd.runc.v2"").
    path: string
      Path to the containerd runtime shim (e.g., ""/path/to/containerd/runc/shim"").
    options: object
      Runtime specific options (e.g., {""BinaryName"": ""runc""}).

  [[worker.containerd.gcpolicy]] (array of policies)
    reservedSpace: int/string
      Minimum disk space guaranteed to be retained by this policy.
    keepDuration: int/string
      Duration to keep entries.
    filters: array of strings
      Filters to apply to this policy.
    all: boolean
      If true, applies policy to all entries.
```

----------------------------------------

TITLE: Configure Docker.io Registry for Cache and Mirrors
DESCRIPTION: This section defines how to configure the `docker.io` registry for use with BuildKit, including setting up mirror registries, enabling insecure HTTP connections, specifying CA certificates, and configuring client key pairs for authentication. It allows for advanced control over registry interactions and cache import/output.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#_snippet_2

LANGUAGE: TOML
CODE:
```
[registry.""docker.io""]
  # mirror configuration to handle path in case a mirror registry requires a /project path rather than just a host:port
  mirrors = [""yourmirror.local:5000"", ""core.harbor.domain/proxy.docker.io""]
  http = true
  insecure = true
  ca=[""/etc/config/myca.pem""]
  [[registry.""docker.io"".keypair]]
    key=""/etc/config/key.pem""
    cert=""/etc/config/cert.pem""
```

----------------------------------------

TITLE: Configure Local Mirror Registry
DESCRIPTION: This snippet demonstrates how to define an additional mirror registry, such as a local one, by specifying its address and enabling HTTP access. This is useful for internal or private registry setups to optimize image pulling and caching.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#_snippet_3

LANGUAGE: TOML
CODE:
```
[registry.""yourmirror.local:5000""]
  http = true
```

----------------------------------------

TITLE: Enable Dockerfile v0 Frontend
DESCRIPTION: This configuration enables the `dockerfile.v0` frontend, allowing BuildKit to process Dockerfiles. It's a fundamental setting for building images from Dockerfile specifications and is typically enabled by default.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#_snippet_4

LANGUAGE: TOML
CODE:
```
[frontend.""dockerfile.v0""]
  enabled = true
```

----------------------------------------

TITLE: Configure Gateway v0 Frontend and Repository Access
DESCRIPTION: This section enables the `gateway.v0` frontend, which allows BuildKit to use external sources. It also includes an `allowedRepositories` setting to restrict which repositories can be used as gateway sources, enhancing security by limiting external dependencies.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#_snippet_5

LANGUAGE: TOML
CODE:
```
[frontend.""gateway.v0""]
  enabled = true

  # If allowedRepositories is empty, all gateway sources are allowed.
  # Otherwise, only the listed repositories are allowed as a gateway source.
  # 
  # NOTE: Only the repository name (without tag) is compared.
  #
  # Example:
  # allowedRepositories = [ ""docker-registry.wikimedia.org/repos/releng/blubber/buildkit"" ]
  allowedRepositories = []
```

----------------------------------------

TITLE: Configure System-Wide Settings for BuildKit
DESCRIPTION: This snippet defines system-level configurations for BuildKit, specifically `platformsCacheMaxAge`. This setting controls how often BuildKit scans for changes in supported emulated platforms, impacting performance and freshness of platform information for multi-platform builds.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/docs/buildkitd.toml.md#_snippet_6

LANGUAGE: TOML
CODE:
```
[system]
  # how often buildkit scans for changes in the supported emulated platforms
  platformsCacheMaxAge = ""1h""
```

----------------------------------------

TITLE: Dockerfile Instruction Reference
DESCRIPTION: A comprehensive reference of all supported instructions in a Dockerfile, detailing their purpose and usage.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ADD: Add local or remote files and directories.
ARG: Use build-time variables.
CMD: Specify default commands.
COPY: Copy files and directories.
ENTRYPOINT: Specify default executable.
ENV: Set environment variables.
EXPOSE: Describe which ports your application is listening on.
FROM: Create a new build stage from a base image.
HEALTHCHECK: Check a container's health on startup.
LABEL: Add metadata to an image.
MAINTAINER (deprecated): Specify the author of an image.
ONBUILD: Specify instructions for when the image is used in a build.
RUN: Execute build commands.
SHELL: Set the default shell of an image.
STOPSIGNAL: Specify the system call signal for exiting a container.
USER: Set user and group ID.
VOLUME: Create volume mounts.
WORKDIR: Change working directory.
```

----------------------------------------

TITLE: Basic Dockerfile Instruction Format
DESCRIPTION: Illustrates the fundamental structure of a Dockerfile instruction, including comments and arguments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
# Comment
INSTRUCTION arguments
```

----------------------------------------

TITLE: Dockerfile Comment and Instruction Example
DESCRIPTION: Demonstrates how comments are handled in a Dockerfile, showing a line comment and an instruction with a '#' character in its argument.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
# Comment
RUN echo 'we are running some # of cool things'
```

----------------------------------------

TITLE: Dockerfile Line Continuation with Comment
DESCRIPTION: Shows an example of a multi-line instruction using a line continuation character, with a comment on the continued line. The comment is removed before execution.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
RUN echo hello \
# comment
world
```

----------------------------------------

TITLE: Dockerfile Equivalent Multi-line Instruction
DESCRIPTION: An example of a multi-line instruction without an intervening comment, demonstrating the effective execution after comment removal.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
RUN echo hello \
world
```

----------------------------------------

TITLE: Dockerfile Leading Whitespace Handling
DESCRIPTION: Illustrates that leading whitespace before comments and instructions is ignored for backward compatibility, showing equivalent Dockerfile snippets.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_5

LANGUAGE: dockerfile
CODE:
```
        # this is a comment-line
    RUN echo hello
RUN echo world
```

LANGUAGE: dockerfile
CODE:
```
# this is a comment-line
RUN echo hello
RUN echo world
```

----------------------------------------

TITLE: Dockerfile Whitespace Preservation in Arguments
DESCRIPTION: Demonstrates that whitespace within instruction arguments is preserved, unlike leading whitespace before instructions or comments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
RUN echo ""\
     hello\
     world""
```

----------------------------------------

TITLE: Invalid Dockerfile Parser Directive Examples
DESCRIPTION: Illustrates various scenarios where Dockerfile parser directives are considered invalid or treated as comments. This includes directives with line continuations, duplicate directives, directives appearing after builder instructions, or directives appearing after non-parser directive comments. Unrecognized directives are also treated as comments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_7

LANGUAGE: dockerfile
CODE:
```
# direc \
tive=value
```

LANGUAGE: dockerfile
CODE:
```
# directive=value1
# directive=value2

FROM ImageName
```

LANGUAGE: dockerfile
CODE:
```
FROM ImageName
# directive=value
```

LANGUAGE: dockerfile
CODE:
```
# About my dockerfile
# directive=value
FROM ImageName
```

LANGUAGE: dockerfile
CODE:
```
# unknowndirective=value
# syntax=value
```

----------------------------------------

TITLE: Dockerfile Parser Directive Whitespace Examples
DESCRIPTION: Demonstrates that non-line-breaking whitespace is permitted within Dockerfile parser directives. All shown examples are treated identically by the parser, highlighting flexibility in formatting.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_8

LANGUAGE: dockerfile
CODE:
```
#directive=value
```

LANGUAGE: dockerfile
CODE:
```
# directive =value
```

LANGUAGE: dockerfile
CODE:
```
#	directive= value
```

LANGUAGE: dockerfile
CODE:
```
# directive = value
```

LANGUAGE: dockerfile
CODE:
```
#	  dIrEcTiVe=value
```

----------------------------------------

TITLE: Declare Dockerfile Syntax Version with `syntax` Directive
DESCRIPTION: Shows how to use the `syntax` parser directive to declare the Dockerfile syntax version for the build. This allows BuildKit to pull the latest stable version of the Dockerfile syntax, enabling access to new features without upgrading Docker Engine.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_9

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
```

----------------------------------------

TITLE: Declare Dockerfile Escape Character with `escape` Directive
DESCRIPTION: Illustrates the usage of the `escape` parser directive to define the escape character for a Dockerfile. This directive is typically used to change the default escape character (backslash) to a different one, such as a backtick, for multi-line commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_10

LANGUAGE: dockerfile
CODE:
```
# escape=\
```

----------------------------------------

TITLE: Dockerfile `escape` Directive Syntax
DESCRIPTION: Introduces the `escape` directive, which allows setting a custom escape character for Dockerfile instructions. The default escape character is `\`, but it can be changed to `\`` (backtick) for better compatibility on Windows systems where `\` is a path separator.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_11

LANGUAGE: Dockerfile
CODE:
```
# escape=`
```

----------------------------------------

TITLE: Dockerfile Failing on Windows (Default Escape)
DESCRIPTION: This Dockerfile demonstrates a common issue on Windows when the default `\` escape character conflicts with directory path separators. The `COPY` and `RUN` instructions fail because `\` is misinterpreted as an escape for the newline or a line continuation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_12

LANGUAGE: Dockerfile
CODE:
```
FROM microsoft/nanoserver
COPY testfile.txt c:\\
RUN dir c:\
```

----------------------------------------

TITLE: Console Output: Docker Build Failure Example
DESCRIPTION: Shows the console output when attempting to build the problematic Dockerfile on Windows. The error message 'GetFileAttributesEx c:RUN: The system cannot find the file specified.' indicates that the `RUN dir c:\` command was incorrectly parsed as part of the `COPY` instruction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_13

LANGUAGE: console
CODE:
```
PS E:\myproject> docker build -t cmd .

Sending build context to Docker daemon 3.072 kB
Step 1/2 : FROM microsoft/nanoserver
 ---> 22738ff49c6d
Step 2/2 : COPY testfile.txt c:\\RUN dir c:
GetFileAttributesEx c:RUN: The system cannot find the file specified.
PS E:\myproject>
```

----------------------------------------

TITLE: Dockerfile Succeeding on Windows (Custom Escape)
DESCRIPTION: This Dockerfile resolves the Windows path issue by adding the `# escape=\` directive at the top. By changing the escape character to a backtick, `\` is correctly interpreted as a path separator, allowing the `COPY` and `RUN` commands to execute as intended.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_14

LANGUAGE: Dockerfile
CODE:
```
# escape=`

FROM microsoft/nanoserver
COPY testfile.txt c:\\
RUN dir c:\
```

----------------------------------------

TITLE: Console Output: Docker Build Success Example
DESCRIPTION: Displays the successful console output after building the Dockerfile that includes the `# escape=\` directive. The `dir c:\` command now executes correctly, listing the directory contents, demonstrating the effectiveness of the custom escape character.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_15

LANGUAGE: console
CODE:
```
PS E:\myproject> docker build -t succeeds --no-cache=true .

Sending build context to Docker daemon 3.072 kB
Step 1/3 : FROM microsoft/nanoserver
 ---> 22738ff49c6d
Step 2/3 : COPY testfile.txt c:\\
 ---> 96655de338de
Removing intermediate container 4db9acbb1682
Step 3/3 : RUN dir c:\\
 ---> Running in a2c157f842f5
 Volume in drive C has no label.
 Volume Serial Number is 7E6D-E0F7

 Directory of c:\\

10/05/2016  05:04 PM             1,894 License.txt
10/05/2016  02:22 PM    <DIR>          Program Files
10/05/2016  02:14 PM    <DIR>          Program Files (x86)
10/28/2016  11:18 AM                62 testfile.txt
10/28/2016  11:20 AM    <DIR>          Users
10/28/2016  11:20 AM    <DIR>          Windows
           2 File(s)          1,956 bytes
           4 Dir(s)  21,259,096,064 bytes free
 ---> 01c7f3bef04f
Removing intermediate container a2c157f842f5
Successfully built 01c7f3bef04f
PS E:\myproject>
```

----------------------------------------

TITLE: Dockerfile `check` Directive Syntax
DESCRIPTION: Provides the general syntax for the `check` directive, which is used to configure how Docker build checks are evaluated. It allows specifying checks to skip or setting whether build failures should result in an error.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_16

LANGUAGE: Dockerfile
CODE:
```
# check=skip=<checks|all>
# check=error=<boolean>
```

----------------------------------------

TITLE: Dockerfile `check` Directive: Skipping Specific Checks
DESCRIPTION: Illustrates how to use the `check` directive to disable one or more specific build checks. Multiple check names can be provided, separated by commas, to prevent them from being evaluated during the build process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_17

LANGUAGE: Dockerfile
CODE:
```
# check=skip=JSONArgsRecommended,StageNameCasing
```

----------------------------------------

TITLE: Dockerfile `check` Directive: Disabling All Checks
DESCRIPTION: Shows a simplified way to disable all available build checks by setting the `skip` option to `all` within the `check` directive. This can be useful for specific scenarios where build checks are not desired.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_18

LANGUAGE: Dockerfile
CODE:
```
# check=skip=all
```

----------------------------------------

TITLE: Dockerfile `check` Directive: Fail on Warnings
DESCRIPTION: Demonstrates how to configure the `check` directive to make the Docker build fail if any build check warnings occur. By default, warnings do not stop the build, but setting `error=true` enforces stricter validation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_19

LANGUAGE: Dockerfile
CODE:
```
# check=error=true
```

----------------------------------------

TITLE: Dockerfile `check` Directive: Combine Skip and Error Options
DESCRIPTION: Explains how to combine both `skip` and `error` options within a single `check` directive. A semicolon (`;`) is used as a separator between different configurations, allowing for granular control over build check behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_20

LANGUAGE: Dockerfile
CODE:
```
# check=skip=JSONArgsRecommended;error=true
```

----------------------------------------

TITLE: Bash: Remove Shortest Prefix Match
DESCRIPTION: Demonstrates how to remove the shortest matching pattern from the beginning of a string using bash parameter expansion (`${variable#pattern}`). This feature is available in pre-release Dockerfile syntax.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_21

LANGUAGE: bash
CODE:
```
str=foobarbaz echo ${str#f*b}     # arbaz
```

----------------------------------------

TITLE: Bash: Remove Longest Prefix Match
DESCRIPTION: Illustrates how to remove the longest matching pattern from the beginning of a string using bash parameter expansion (`${variable##pattern}`). This feature is available in pre-release Dockerfile syntax.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_22

LANGUAGE: bash
CODE:
```
str=foobarbaz echo ${str##f*b}    # az
```

----------------------------------------

TITLE: Bash: Remove Shortest Suffix Match
DESCRIPTION: Shows how to remove the shortest matching pattern from the end of a string using bash parameter expansion (`${variable%pattern}`). This feature is available in pre-release Dockerfile syntax.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_23

LANGUAGE: bash
CODE:
```
string=foobarbaz echo ${string%b*}    # foobar
```

----------------------------------------

TITLE: Bash: Remove Longest Suffix Match
DESCRIPTION: Demonstrates how to remove the longest matching pattern from the end of a string using bash parameter expansion (`${variable%%pattern}`). This feature is available in pre-release Dockerfile syntax.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_24

LANGUAGE: bash
CODE:
```
string=foobarbaz echo ${string%%b*}   # foo
```

----------------------------------------

TITLE: Bash: Replace First Occurrence of Pattern
DESCRIPTION: Illustrates how to replace the first occurrence of a pattern in a string with a specified replacement using bash parameter expansion (`${variable/pattern/replacement}`). This feature is available in pre-release Dockerfile syntax.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_25

LANGUAGE: bash
CODE:
```
string=foobarbaz echo ${string/ba/fo}  # fooforbaz
```

----------------------------------------

TITLE: Bash: Replace All Occurrences of Pattern
DESCRIPTION: Shows how to replace all occurrences of a pattern in a string with a specified replacement using bash parameter expansion (`${variable//pattern/replacement}`). This feature is available in pre-release Dockerfile syntax.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_26

LANGUAGE: bash
CODE:
```
string=foobarbaz echo ${string//ba/fo}  # fooforfoz
```

----------------------------------------

TITLE: Dockerfile: Environment Variable Usage Example
DESCRIPTION: Demonstrates how environment variables declared with `ENV` are used and expanded within various Dockerfile instructions like `WORKDIR`, `ADD`, and `COPY`. It also shows how to escape variable names to prevent substitution.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_27

LANGUAGE: dockerfile
CODE:
```
FROM busybox
ENV FOO=/bar
WORKDIR ${FOO}   # WORKDIR /bar
ADD . $FOO       # ADD . /bar
COPY \$FOO /quux # COPY $FOO /quux
```

----------------------------------------

TITLE: Dockerfile Exec Form: Basic ENTRYPOINT
DESCRIPTION: Demonstrates the exec form for the ENTRYPOINT instruction, parsed as a JSON array. This form requires double-quotes for elements and does not automatically invoke a command shell.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_28

LANGUAGE: Dockerfile
CODE:
```
ENTRYPOINT [""/bin/bash"", ""-c"", ""echo hello""]
```

----------------------------------------

TITLE: Dockerfile Exec Form: Windows Path Backslash Escaping
DESCRIPTION: Illustrates the necessity of escaping backslashes in the exec form, especially for Windows paths. This prevents the instruction from being incorrectly parsed as shell form.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_29

LANGUAGE: Dockerfile
CODE:
```
RUN [""c:\\windows\\system32\\tasklist.exe""]
```

----------------------------------------

TITLE: Dockerfile Shell Form: Multi-line Commands
DESCRIPTION: Shows how to use the shell form to split long commands across multiple lines using the backslash escape character, making Dockerfiles more readable. An equivalent single-line command is also provided.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_30

LANGUAGE: Dockerfile
CODE:
```
RUN source $HOME/.bashrc && \
echo $HOME
```

LANGUAGE: Dockerfile
CODE:
```
RUN source $HOME/.bashrc && echo $HOME
```

----------------------------------------

TITLE: Dockerfile Shell Form: Heredoc Usage
DESCRIPTION: Demonstrates using heredocs with the shell form to define multi-line commands, providing an alternative to backslash escaping for improved readability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_31

LANGUAGE: Dockerfile
CODE:
```
RUN <<EOF
source $HOME/.bashrc && \
echo $HOME
EOF
```

----------------------------------------

TITLE: Dockerfile: Changing Default Shell
DESCRIPTION: Illustrates how to change the default shell used for subsequent shell-form instructions within a Dockerfile using the SHELL command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_32

LANGUAGE: Dockerfile
CODE:
```
SHELL [""/bin/bash"", ""-c""]
RUN echo hello
```

----------------------------------------

TITLE: Dockerfile FROM Instruction Reference
DESCRIPTION: API documentation for the Dockerfile FROM instruction, which initializes a new build stage and sets the base image. It details various syntaxes including optional platform, tag, digest, and AS name parameters.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_33

LANGUAGE: APIDOC
CODE:
```
FROM [--platform=<platform>] <image> [AS <name>]
```

LANGUAGE: APIDOC
CODE:
```
FROM [--platform=<platform>] <image>[:<tag>] [AS <name>]
```

LANGUAGE: APIDOC
CODE:
```
FROM [--platform=<platform>] <image>[@<digest>] [AS <name>]
```

----------------------------------------

TITLE: Dockerfile ARG and FROM Interaction Across Stages
DESCRIPTION: Demonstrates how an `ARG` variable declared before the first `FROM` instruction can be effectively used across multiple build stages in a Dockerfile, allowing for consistent versioning or configuration.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_34

LANGUAGE: dockerfile
CODE:
```
ARG  CODE_VERSION=latest
FROM base:${CODE_VERSION}
CMD  /code/run-app

FROM extras:${CODE_VERSION}
CMD  /code/run-extras
```

----------------------------------------

TITLE: Dockerfile ARG Re-declaration for Build Stage Scope
DESCRIPTION: Illustrates how to re-declare an `ARG` instruction without a value inside a build stage. This technique allows the build stage to access the default value of an `ARG` that was initially declared before the first `FROM` instruction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_35

LANGUAGE: dockerfile
CODE:
```
ARG VERSION=latest
FROM busybox:$VERSION
ARG VERSION
RUN echo $VERSION > image_version
```

----------------------------------------

TITLE: Dockerfile RUN Instruction Forms
DESCRIPTION: Presents the two primary syntaxes for the `RUN` instruction in Dockerfiles: the 'shell form' and the 'exec form'. These forms dictate how commands are executed to create new layers on top of the current image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_36

LANGUAGE: dockerfile
CODE:
```
# Shell form:
RUN [OPTIONS] <command> ...
# Exec form:
RUN [OPTIONS] [ ""<command>"", ... ]
```

----------------------------------------

TITLE: Dockerfile RUN Instruction with Heredoc
DESCRIPTION: Shows an example of using a heredoc (`<<EOF`) with the `RUN` instruction in its shell form. This allows for executing multi-line commands cleanly and readably within a Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_37

LANGUAGE: dockerfile
CODE:
```
RUN <<EOF
apt-get update
apt-get install -y curl
EOF
```

----------------------------------------

TITLE: APIDOC: Dockerfile RUN --device Option
DESCRIPTION: Documents the `RUN --device` option, which allows Dockerfile builds to request CDI (Container Device Interface) devices. It explains the syntax `RUN --device=name,[required]` and details the flexible device naming conventions, including vendor-specific names, specific device requests, wildcard requests, and class-based requests.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_38

LANGUAGE: APIDOC
CODE:
```
RUN --device=name,[required]

Purpose: Allows build to request CDI devices to be available to the build step.
Parameter 'name': The device name, provided by the CDI specification registered in BuildKit.

Device Name Formats:
- vendor1.com/device: Request the first device found for this vendor.
- vendor1.com/device=foo: Request a specific device.
- vendor1.com/device=*: Request all devices for this vendor.
- class1: Request devices by 'org.mobyproject.buildkit.device.class' annotation.
```

----------------------------------------

TITLE: CDI Device Specification Example (YAML)
DESCRIPTION: Provides a YAML example of a CDI (Container Device Interface) specification. This configuration defines multiple devices with names, annotations, and environment variable injections, demonstrating how BuildKit registers and manages available devices.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_39

LANGUAGE: yaml
CODE:
```
cdiVersion: ""0.6.0""
kind: ""vendor1.com/device""
devices:
  - name: foo
    containerEdits:
      env:
        - FOO=injected
  - name: bar
    annotations:
      org.mobyproject.buildkit.device.class: class1
    containerEdits:
      env:
        - BAR=injected
  - name: baz
    annotations:
      org.mobyproject.buildkit.device.class: class1
    containerEdits:
      env:
        - BAZ=injected
  - name: qux
    annotations:
      org.mobyproject.buildkit.device.class: class2
    containerEdits:
      env:
        - QUX=injected
```

----------------------------------------

TITLE: Dockerfile Example: CUDA LLaMA Inference with RUN --device
DESCRIPTION: A comprehensive Dockerfile example demonstrating a multi-stage build for LLaMA inference. It utilizes the `RUN --device` flag to leverage NVIDIA GPUs via CDI, along with `--mount` options for model and prompt preparation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_40

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1-labs

FROM scratch AS model
ADD https://huggingface.co/bartowski/Llama-3.2-1B-Instruct-GGUF/resolve/main/Llama-3.2-1B-Instruct-Q4_K_M.gguf /model.gguf

FROM scratch AS prompt
COPY <<EOF prompt.txt
Q: Generate a list of 10 unique biggest countries by population in JSON with their estimated poulation in 1900 and 2024. Answer only newline formatted JSON with keys ""country"", ""population_1900"", ""population_2024"" with 10 items.
A:
[
    {

EOF

FROM ghcr.io/ggml-org/llama.cpp:full-cuda-b5124
RUN --device=nvidia.com/gpu=all \
    --mount=from=model,target=/models \
    --mount=from=prompt,target=/tmp \
    ./llama-cli -m /models/model.gguf -no-cnv -ngl 99 -f /tmp/prompt.txt
```

----------------------------------------

TITLE: Dockerfile RUN --mount Command Syntax
DESCRIPTION: Illustrates the general syntax for the Dockerfile RUN --mount command, showing optional type and value pairs for configuring filesystem mounts during a build.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_41

LANGUAGE: dockerfile
CODE:
```
RUN --mount=[type=<TYPE>][,option=<value>[,option=<value>]...]
```

----------------------------------------

TITLE: Docker RUN --mount Supported Mount Types
DESCRIPTION: Documents the various mount types supported by the Dockerfile RUN --mount command, including their purpose and usage. These types allow for different ways to access filesystems during the build process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_42

LANGUAGE: APIDOC
CODE:
```
Mount Types:
  bind (default):
    Description: Bind-mount context directories (read-only).
  cache:
    Description: Mount a temporary directory to cache directories for compilers and package managers.
  tmpfs:
    Description: Mount a tmpfs in the build container.
  secret:
    Description: Allow the build container to access secure files such as private keys without baking them into the image or build cache.
  ssh:
    Description: Allow the build container to access SSH keys via SSH agents, with support for passphrases.
```

----------------------------------------

TITLE: Docker RUN --mount=type=bind Options
DESCRIPTION: Details the specific options available for the 'bind' mount type when using the Dockerfile RUN --mount command. These options control the target path, source, origin, and read/write permissions of the bind mount.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_43

LANGUAGE: APIDOC
CODE:
```
Bind Mount Options:
  target, dst, destination:
    Description: Mount path.
  source:
    Description: Source path in the from. Defaults to the root of the from.
  from:
    Description: Build stage, context, or image name for the root of the source. Defaults to the build context.
  rw, readwrite:
    Description: Allow writes on the mount. Written data will be discarded.
```

----------------------------------------

TITLE: Docker RUN --mount=type=tmpfs Options
DESCRIPTION: Documentation for the `tmpfs` mount type, allowing temporary file system mounts in the build container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
RUN --mount=type=tmpfs
  Options:
    target, dst, destination: Mount path.
    size: Specify an upper limit on the size of the filesystem.
```

----------------------------------------

TITLE: Docker RUN --mount=type=secret Options
DESCRIPTION: Documentation for the `secret` mount type, enabling access to secret values without baking them into the image. Secrets can be mounted as files or environment variables.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_45

LANGUAGE: APIDOC
CODE:
```
RUN --mount=type=secret
  Options:
    id: ID of the secret. Defaults to basename of the target path.
    target, dst, destination: Mount the secret to the specified path. Defaults to /run/secrets/ + id if unset and if env is also unset.
    env: Mount the secret to an environment variable instead of a file, or both. (since Dockerfile v1.10.0)
    required: If set to true, the instruction errors out when the secret is unavailable. Defaults to false.
    mode: File mode for secret file in octal. Default 0400.
    uid: User ID for secret file. Default 0.
    gid: Group ID for secret file. Default 0.
```

----------------------------------------

TITLE: Docker RUN --mount=type=secret Example: Access S3
DESCRIPTION: Demonstrates how to use `RUN --mount=type=secret` to securely access AWS S3 credentials within a Docker build, preventing secrets from being baked into the image. Includes both Dockerfile and build command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_46

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM python:3
RUN pip install awscli
RUN --mount=type=secret,id=aws,target=/root/.aws/credentials \
  aws s3 cp s3://... ...
```

LANGUAGE: Console
CODE:
```
$ docker buildx build --secret id=aws,src=$HOME/.aws/credentials .
```

----------------------------------------

TITLE: Docker RUN --mount=type=secret Example: Mount as Environment Variable
DESCRIPTION: Illustrates how to mount a secret as an environment variable using `RUN --mount=type=secret,env=API_KEY`, allowing commands to access sensitive data directly from the environment. Includes Dockerfile and build command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_47

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
RUN --mount=type=secret,id=API_KEY,env=API_KEY \
    some-command --token-from-env $API_KEY
```

LANGUAGE: Console
CODE:
```
$ docker buildx build --secret id=API_KEY .
```

----------------------------------------

TITLE: Docker RUN --mount=type=ssh Options
DESCRIPTION: Documentation for the `ssh` mount type, enabling build containers to access SSH keys via SSH agents, supporting passphrases.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_48

LANGUAGE: APIDOC
CODE:
```
RUN --mount=type=ssh
  Options:
    id: ID of SSH agent socket or key. Defaults to ""default"".
    target, dst, destination: SSH agent socket path. Defaults to /run/buildkit/ssh_agent.${N}.
    required: If set to true, the instruction errors out when the key is unavailable. Defaults to false.
    mode: File mode for socket in octal. Default 0600.
    uid: User ID for socket. Default 0.
    gid: Group ID for socket. Default 0.
```

----------------------------------------

TITLE: Docker RUN --mount=type=ssh Example: Access GitLab
DESCRIPTION: Shows how to use `RUN --mount=type=ssh` to authenticate with GitLab during a Docker build using SSH keys from an agent. Includes Dockerfile and build commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_49

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
RUN apk add --no-cache openssh-client
RUN mkdir -p -m 0700 ~/.ssh && ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
RUN --mount=type=ssh \
  ssh -q -T git@gitlab.com 2>&1 | tee /hello
```

LANGUAGE: Console
CODE:
```
$ eval $(ssh-agent)
$ ssh-add ~/.ssh/id_rsa
(Input your passphrase here)
$ docker buildx build --ssh default=$SSH_AUTH_SOCK .
```

----------------------------------------

TITLE: Dockerfile RUN --network Instruction Syntax
DESCRIPTION: Illustrates the basic syntax for the `RUN --network` instruction in a Dockerfile. This instruction allows explicit control over the networking environment for a build command, enabling isolation or host network access.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_50

LANGUAGE: Dockerfile
CODE:
```
RUN --network=<TYPE>
```

----------------------------------------

TITLE: Dockerfile RUN --network=none Example for Isolated Package Installation
DESCRIPTION: Demonstrates using `RUN --network=none` to install Python packages from a local tarball. This ensures `pip install` operates without external network access, isolating the build process and preventing unintended external dependencies.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_51

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM python:3.6
ADD mypackage.tgz wheels/
RUN --network=none pip install --find-links wheels mypackage
```

----------------------------------------

TITLE: Dockerfile RUN --security Instruction Syntax
DESCRIPTION: Shows the syntax for the `RUN --security` instruction, which controls the security mode for a build command. It allows specifying `sandbox` (default) or `insecure` modes, with `insecure` enabling elevated privileges.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_52

LANGUAGE: Dockerfile
CODE:
```
RUN --security=<sandbox|insecure>
```

----------------------------------------

TITLE: Dockerfile RUN --security=insecure Example for Entitlement Check
DESCRIPTION: Provides an example of using `RUN --security=insecure` to check effective capabilities within a Docker build. This demonstrates running a command with elevated privileges, requiring the `security.insecure` entitlement to be enabled.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_53

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1-labs
FROM ubuntu
RUN --security=insecure cat /proc/self/status | grep CapEff
```

----------------------------------------

TITLE: Dockerfile CMD Instruction Forms and Usage
DESCRIPTION: Explains the three forms of the `CMD` instruction: exec form with an executable, exec form for default `ENTRYPOINT` parameters, and shell form. It clarifies that `CMD` provides defaults for a container at runtime and only the last `CMD` in a Dockerfile takes effect.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_54

LANGUAGE: Dockerfile
CODE:
```
CMD [""executable"",""param1"",""param2""]
CMD [""param1"",""param2""]
CMD command param1 param2
```

----------------------------------------

TITLE: Dockerfile LABEL Instruction Syntax
DESCRIPTION: Defines the basic syntax for the `LABEL` instruction in a Dockerfile, used to add metadata as key-value pairs to an image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_55

LANGUAGE: dockerfile
CODE:
```
LABEL <key>=<value> [<key>=<value>...]
```

----------------------------------------

TITLE: Dockerfile LABEL Instruction Usage Examples
DESCRIPTION: Illustrates various ways to use the `LABEL` instruction, including handling spaces in values with quotes and backslashes, and defining multiple labels on single or multiple lines.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_56

LANGUAGE: dockerfile
CODE:
```
LABEL ""com.example.vendor""=""ACME Incorporated""
LABEL com.example.label-with-value=""foo""
LABEL version=""1.0""
LABEL description=""This text illustrates \
that label-values can span multiple lines.""
```

LANGUAGE: dockerfile
CODE:
```
LABEL multi.label1=""value1"" multi.label2=""value2"" other=""value3""
```

LANGUAGE: dockerfile
CODE:
```
LABEL multi.label1=""value1"" \
      multi.label2=""value2"" \
      other=""value3""
```

----------------------------------------

TITLE: Inspect Docker Image Labels
DESCRIPTION: Shows how to use the `docker image inspect` command with the `--format` option to retrieve and display the labels associated with a Docker image in JSON format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_57

LANGUAGE: console
CODE:
```
docker image inspect --format='{{json .Config.Labels}}' myimage
```

----------------------------------------

TITLE: Example JSON Output of Docker Image Labels
DESCRIPTION: Provides an example of the JSON structure returned by `docker image inspect` when querying for image labels, demonstrating how key-value pairs are represented.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_58

LANGUAGE: json
CODE:
```
{
  ""com.example.vendor"": ""ACME Incorporated"",
  ""com.example.label-with-value"": ""foo"",
  ""version"": ""1.0"",
  ""description"": ""This text illustrates that label-values can span multiple lines."",
  ""multi.label1"": ""value1"",
  ""multi.label2"": ""value2"",
  ""other"": ""value3""
}
```

----------------------------------------

TITLE: Dockerfile MAINTAINER Instruction Syntax (Deprecated)
DESCRIPTION: Defines the syntax for the deprecated `MAINTAINER` instruction, which was used to set the author field of an image. It is recommended to use `LABEL` instead for better metadata management.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_59

LANGUAGE: dockerfile
CODE:
```
MAINTAINER <name>
```

----------------------------------------

TITLE: Replace MAINTAINER with LABEL for Author Information
DESCRIPTION: Demonstrates how to use the `LABEL` instruction with the `org.opencontainers.image.authors` key to achieve the same functionality as the deprecated `MAINTAINER` instruction, providing better metadata management and visibility via `docker inspect`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_60

LANGUAGE: dockerfile
CODE:
```
LABEL org.opencontainers.image.authors=""SvenDowideit@home.org.au""
```

----------------------------------------

TITLE: Dockerfile EXPOSE Instruction Syntax
DESCRIPTION: Defines the basic syntax for the `EXPOSE` instruction in a Dockerfile, which informs Docker that the container listens on specified network ports at runtime. This instruction does not actually publish the ports.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_61

LANGUAGE: dockerfile
CODE:
```
EXPOSE <port> [<port>/<protocol>...]
```

----------------------------------------

TITLE: Dockerfile EXPOSE Instruction Protocol Examples
DESCRIPTION: Illustrates how to specify different protocols (TCP, UDP) for the `EXPOSE` instruction. By default, `EXPOSE` assumes TCP. Multiple `EXPOSE` lines can be used to expose the same port for different protocols.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_62

LANGUAGE: dockerfile
CODE:
```
EXPOSE 80/udp
```

LANGUAGE: dockerfile
CODE:
```
EXPOSE 80/tcp
EXPOSE 80/udp
```

----------------------------------------

TITLE: Override EXPOSE with Docker Run Port Mapping
DESCRIPTION: Shows how to use the `-p` flag with `docker run` to explicitly publish and map container ports to host ports, overriding any `EXPOSE` settings defined in the Dockerfile and allowing for flexible port redirection.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_63

LANGUAGE: console
CODE:
```
docker run -p 80:80/tcp -p 80:80/udp ...
```

----------------------------------------

TITLE: Dockerfile ENV Instruction Basic Syntax
DESCRIPTION: Defines the fundamental syntax for the Dockerfile `ENV` instruction, which is used to set environment variables that persist in the build stage and the final Docker image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_64

LANGUAGE: dockerfile
CODE:
```
ENV <key>=<value> [<key>=<value>...]
```

----------------------------------------

TITLE: Dockerfile ENV Instruction Examples
DESCRIPTION: Illustrates practical examples of the `ENV` instruction, demonstrating how to set environment variables with string values, including handling spaces through quoting or escaping.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_65

LANGUAGE: dockerfile
CODE:
```
ENV MY_NAME=""John Doe""
ENV MY_DOG=Rex\ The\ Dog
ENV MY_CAT=fluffy
```

----------------------------------------

TITLE: Dockerfile ENV Instruction with Multiple Variables
DESCRIPTION: Shows how to define multiple environment variables within a single `ENV` instruction, providing a more concise way to set several variables simultaneously.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_66

LANGUAGE: dockerfile
CODE:
```
ENV MY_NAME=""John Doe"" MY_DOG=Rex\ The\ Dog \
    MY_CAT=fluffy
```

----------------------------------------

TITLE: Dockerfile RUN Command for Build-Time Variables
DESCRIPTION: Demonstrates how to set environment variables for a single command execution using the `RUN` instruction. This method is suitable for variables that are only required during the build process and should not persist in the final image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_67

LANGUAGE: dockerfile
CODE:
```
RUN DEBIAN_FRONTEND=noninteractive apt-get update && apt-get install -y ...
```

----------------------------------------

TITLE: Dockerfile ARG Instruction for Build-Time Variables
DESCRIPTION: Illustrates the use of the `ARG` instruction to define build-time variables. Unlike `ENV`, `ARG` variables are not persisted in the final Docker image, making them ideal for temporary build configurations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_68

LANGUAGE: dockerfile
CODE:
```
ARG DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y ...
```

----------------------------------------

TITLE: Dockerfile ENV Instruction Alternative Syntax (Discouraged)
DESCRIPTION: Presents an older, discouraged syntax for the `ENV` instruction where the equals sign is omitted. This syntax is supported for backward compatibility but is prone to confusion and does not allow setting multiple variables in one instruction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_69

LANGUAGE: dockerfile
CODE:
```
ENV MY_VAR my-value
```

----------------------------------------

TITLE: Dockerfile ENV Alternative Syntax Ambiguity Example
DESCRIPTION: Highlights the potential ambiguity of the discouraged `ENV <key> <value>` syntax, showing how it can incorrectly interpret multiple words as part of a single value rather than separate key-value pairs.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_70

LANGUAGE: dockerfile
CODE:
```
ENV ONE TWO= THREE=world
```

----------------------------------------

TITLE: Dockerfile ADD Instruction Syntax
DESCRIPTION: Defines the two primary forms of the Dockerfile `ADD` instruction used for copying new files or directories from a source to a destination within the image filesystem. It includes the form required for paths containing whitespace.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_71

LANGUAGE: dockerfile
CODE:
```
ADD [OPTIONS] <src> ... <dest>
ADD [OPTIONS] [""<src>"", ... ""<dest>""]
```

----------------------------------------

TITLE: Add Multiple Local Files to Docker Image
DESCRIPTION: Demonstrates how to add multiple local files (file1.txt, file2.txt) from the build context to a specified directory (/usr/src/things/) within the Docker image. When multiple sources are specified, either directly or using a wildcard, the destination must be a directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_72

LANGUAGE: dockerfile
CODE:
```
ADD file1.txt file2.txt /usr/src/things/
```

----------------------------------------

TITLE: Add Remote Files or Git Repository to Docker Image
DESCRIPTION: Illustrates adding content from remote sources using the `ADD` instruction. The first example downloads an archive from a URL, and the second clones a Git repository, placing their contents into `/usr/src/things/` in the Docker image. BuildKit automatically detects the source type (URL, Git repository).
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_73

LANGUAGE: dockerfile
CODE:
```
ADD https://example.com/archive.zip /usr/src/things/
```

LANGUAGE: dockerfile
CODE:
```
ADD git@github.com:user/repo.git /usr/src/things/
```

----------------------------------------

TITLE: Add Files Matching Wildcard Pattern (PNGs)
DESCRIPTION: Shows how to use a wildcard (`*.png`) to add all files ending with `.png` from the root of the build context to the `/dest/` directory in the Docker image. Wildcard matching for local files follows Go's `filepath.Match` rules.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_74

LANGUAGE: dockerfile
CODE:
```
ADD *.png /dest/
```

----------------------------------------

TITLE: Add Files Matching Single-Character Wildcard
DESCRIPTION: Demonstrates the use of the single-character wildcard `?` to match files like `index.js` or `index.ts`. All matched files from the build context will be copied to `/dest/` in the Docker image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_75

LANGUAGE: dockerfile
CODE:
```
ADD index.?s /dest/
```

----------------------------------------

TITLE: Add File with Special Characters in Name
DESCRIPTION: Explains how to escape special characters like `[` and `]` in a file name when using the `ADD` instruction. The example shows adding a file named `arr[0].txt` by escaping the brackets according to Golang's rules, copying it to `/dest/`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_76

LANGUAGE: dockerfile
CODE:
```
ADD arr[[]0].txt /dest/
```

----------------------------------------

TITLE: Add Git Repository via HTTPS in Dockerfile
DESCRIPTION: Demonstrates how to use the `ADD` instruction to clone a Git repository into the Docker image using an HTTPS URL. The repository content will be placed at the specified destination path.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_77

LANGUAGE: dockerfile
CODE:
```
ADD https://github.com/user/repo.git /mydir/
```

----------------------------------------

TITLE: Add Specific Git Branch, Tag, or Subdirectory
DESCRIPTION: Illustrates using URL fragments with the `ADD` instruction to specify a particular branch, tag, commit, or even a subdirectory from a Git repository. This allows for granular control over what content is added from the source repository.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_78

LANGUAGE: dockerfile
CODE:
```
ADD git@github.com:moby/buildkit.git#v0.14.1:docs /buildkit-docs
```

----------------------------------------

TITLE: Dockerfile Example for Adding Git via SSH
DESCRIPTION: Provides a Dockerfile example showing how to use the `ADD` instruction to clone a private Git repository via SSH. This requires passing an SSH key during the build process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_79

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
ADD git@git.example.com:foo/bar.git /bar
```

----------------------------------------

TITLE: Build Docker Image with SSH Agent Forwarding
DESCRIPTION: Command-line instruction to build a Docker image that requires SSH access to a Git repository. The `--ssh default` flag mounts the SSH agent socket, enabling authentication during the build.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_80

LANGUAGE: console
CODE:
```
docker build --ssh default .
```

----------------------------------------

TITLE: Add File to Absolute Path in Dockerfile
DESCRIPTION: Demonstrates how the `ADD` instruction creates a file at an absolute path within the Docker image. The source file `test.txt` is copied to `/abs/test.txt`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_81

LANGUAGE: dockerfile
CODE:
```
# create /abs/test.txt
ADD test.txt /abs/
```

----------------------------------------

TITLE: Add File to Relative Path Using WORKDIR
DESCRIPTION: Shows how the `ADD` instruction behaves when the destination path is relative. When `WORKDIR` is set, the relative path is interpreted from the working directory, resulting in `/usr/src/app/rel/test.txt`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_82

LANGUAGE: dockerfile
CODE:
```
WORKDIR /usr/src/app
# create /usr/src/app/rel/test.txt
ADD test.txt rel/
```

----------------------------------------

TITLE: Dockerfile ADD Command Syntax: --keep-git-dir
DESCRIPTION: Defines the syntax for the Dockerfile ADD command when using the --keep-git-dir option. This flag allows preserving the .git directory when adding contents from a remote Git repository.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_83

LANGUAGE: APIDOC
CODE:
```
ADD [--keep-git-dir=<boolean>] <src> ... <dir>
```

----------------------------------------

TITLE: Example: ADD with --keep-git-dir=true
DESCRIPTION: Demonstrates how to use the ADD command to clone a Git repository from GitHub and explicitly keep the .git directory within the Docker image, useful for debugging or further Git operations inside the container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_84

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
ADD --keep-git-dir=true https://github.com/moby/buildkit.git#v0.10.1 /buildkit
```

----------------------------------------

TITLE: Dockerfile ADD Command Syntax: --checksum
DESCRIPTION: Defines the syntax for the Dockerfile ADD command when using the --checksum option. This flag allows verifying the integrity of remote resources using a SHA-256 hash.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_85

LANGUAGE: APIDOC
CODE:
```
ADD [--checksum=<hash>] <src> ... <dir>
```

----------------------------------------

TITLE: Example: ADD with --checksum
DESCRIPTION: Illustrates using the ADD command with a SHA-256 checksum to ensure the integrity of a downloaded remote file from a URL. This helps prevent tampering or corruption during download.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_86

LANGUAGE: dockerfile
CODE:
```
ADD --checksum=sha256:24454f830cdb571e2c4ad15481119c43b3cafd48dd869a9b2945d1036d1dc68d https://mirrors.edge.kernel.org/pub/linux/kernel/Historic/linux-0.01.tar.gz /
```

----------------------------------------

TITLE: Dockerfile COPY Command Basic Syntax
DESCRIPTION: Defines the two primary syntax forms for the Dockerfile COPY command. The latter form, using double quotes, is required for paths containing whitespace to ensure correct parsing.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_87

LANGUAGE: APIDOC
CODE:
```
COPY [OPTIONS] <src> ... <dest>
COPY [OPTIONS] [""<src>"", ... ""<dest>""]
```

----------------------------------------

TITLE: Dockerfile COPY Command Options
DESCRIPTION: Lists the available options for the Dockerfile COPY command, along with the minimum Dockerfile version required for each option's support.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_88

LANGUAGE: APIDOC
CODE:
```
Option                             | Minimum Dockerfile version
---------------------------------- | --------------------------
[`--from`](#copy---from)           |
[`--chown`](#copy---chown---chmod) |
[`--chmod`](#copy---chown---chmod) | 1.2
[`--link`](#copy---link)           | 1.4
[`--parents`](#copy---parents)     | 1.7-labs
[`--exclude`](#copy---exclude)     | 1.7-labs
```

----------------------------------------

TITLE: Example: COPY with Multiple Source Files
DESCRIPTION: Demonstrates how to copy multiple individual files from the build context to a specified directory within the image using the COPY command. When multiple sources are specified, the destination must be a directory.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_89

LANGUAGE: dockerfile
CODE:
```
COPY file1.txt file2.txt /usr/src/things/
```

----------------------------------------

TITLE: Example: COPY with --from Option (Multi-stage Build)
DESCRIPTION: Illustrates using the COPY command with the --from flag to copy artifacts from a named build stage in a multi-stage Dockerfile. This is crucial for creating smaller, production-ready images by only including necessary build outputs.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_90

LANGUAGE: dockerfile
CODE:
```
FROM golang AS build
WORKDIR /app
RUN --mount=type=bind,target=. go build -o /myapp ./cmd

COPY --from=build /myapp /usr/bin/
```

----------------------------------------

TITLE: Dockerfile: Copying Files with Wildcard Matching (PNG)
DESCRIPTION: This snippet demonstrates how to use wildcards to copy all files with a specific extension (e.g., .png) from the build context to a destination directory within the Docker image. The `*.png` pattern matches any file ending with '.png'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_91

LANGUAGE: Dockerfile
CODE:
```
COPY *.png /dest/
```

----------------------------------------

TITLE: Dockerfile: Copying Files with Single-Character Wildcard
DESCRIPTION: This example illustrates the use of the single-character wildcard `?` in the `COPY` instruction. It matches any single character, allowing for flexible file selection, such as `index.js` or `index.ts`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_92

LANGUAGE: Dockerfile
CODE:
```
COPY index.?s /dest/
```

----------------------------------------

TITLE: Dockerfile: Escaping Special Characters in Source Paths
DESCRIPTION: When source file paths contain special characters like `[` or `]`, they must be escaped according to Golang's `filepath.Match` rules to prevent them from being interpreted as pattern matching characters. This snippet shows how to copy a file named `arr[0].txt`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_93

LANGUAGE: Dockerfile
CODE:
```
COPY arr[[]0].txt /dest/
```

----------------------------------------

TITLE: Dockerfile: Copying to an Absolute Destination Path
DESCRIPTION: This example demonstrates copying a file to an absolute path within the Docker image. When the destination path begins with a forward slash, it's interpreted relative to the root of the current build stage.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_94

LANGUAGE: Dockerfile
CODE:
```
COPY test.txt /abs/
```

----------------------------------------

TITLE: Dockerfile: Copying to a Relative Destination Path
DESCRIPTION: This snippet shows how to copy a file to a path relative to the `WORKDIR` set in the Dockerfile. If the destination path doesn't begin with a leading slash, it's interpreted relative to the current working directory of the build container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_95

LANGUAGE: Dockerfile
CODE:
```
WORKDIR /usr/src/app
# create /usr/src/app/rel/test.txt
COPY test.txt rel/
```

----------------------------------------

TITLE: Dockerfile: COPY --from Instruction Syntax
DESCRIPTION: This is the general syntax for the `COPY --from` instruction, which allows copying files from an image, a build stage, or a named context instead of the default build context. It specifies the optional `--from` flag followed by the source and destination paths.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_96

LANGUAGE: Dockerfile
CODE:
```
COPY [--from=<image|stage|context>] <src> ... <dest>
```

----------------------------------------

TITLE: Dockerfile: Copying from a Build Stage in Multi-Stage Builds
DESCRIPTION: This advanced example demonstrates using `COPY --from` to copy compiled artifacts from a previous build stage (`build`) to a new, smaller stage (`scratch`). This is a common pattern in multi-stage Docker builds to reduce final image size.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_97

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine AS build
COPY . .
RUN apk add clang
RUN clang -o /hello hello.c

FROM scratch
COPY --from=build /hello /
```

----------------------------------------

TITLE: Dockerfile: Copying from an External Docker Image
DESCRIPTION: This snippet illustrates how to use `COPY --from` to copy a specific file directly from an existing Docker image (e.g., `nginx:latest`) into the current build stage. The source path is resolved from the filesystem root of the specified image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_98

LANGUAGE: Dockerfile
CODE:
```
COPY --from=nginx:latest /etc/nginx/nginx.conf /nginx.conf
```

----------------------------------------

TITLE: Docker COPY Command Syntax with Ownership and Permissions
DESCRIPTION: Illustrates the general syntax of the `COPY` command with optional `--chown` for specifying user/group ownership and `--chmod` for setting file permissions. Note that `--chmod` currently only supports octal notation and these features are primarily for Linux containers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_99

LANGUAGE: Dockerfile
CODE:
```
COPY [--chown=<user>:<group>] [--chmod=<perms> ...] <src> ... <dest>
```

----------------------------------------

TITLE: Docker COPY --chown Flag Examples
DESCRIPTION: Provides various examples of using the `--chown` flag to set ownership of copied files. Examples include specifying UID/GID combinations, usernames, and mixed formats. It highlights that user/group name translation relies on the container's `/etc/passwd` and `/etc/group` files, while numeric IDs do not.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_100

LANGUAGE: Dockerfile
CODE:
```
COPY --chown=55:mygroup files* /somedir/
COPY --chown=bin files* /somedir/
COPY --chown=1 files* /somedir/
COPY --chown=10:11 files* /somedir/
COPY --chown=myuser:mygroup --chmod=644 files* /somedir/
```

----------------------------------------

TITLE: Docker COPY --chmod with Build Arguments
DESCRIPTION: Demonstrates how to use the `--chmod` flag with variable interpolation, allowing permission bits to be defined using build arguments. This feature requires Dockerfile syntax version 1.10 or later.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_101

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1.10
FROM alpine
WORKDIR /src
ARG MODE=440
COPY --chmod=$MODE . .
```

----------------------------------------

TITLE: Docker COPY --link Command Syntax
DESCRIPTION: Shows the syntax for the `COPY` command with the `--link` flag. This flag enables enhanced semantics for copying files, allowing them to remain independent on their own layer and improving cache reuse.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_102

LANGUAGE: Dockerfile
CODE:
```
COPY [--link[=<boolean>]] <src> ... <dest>
```

----------------------------------------

TITLE: Docker COPY --link Basic Usage and Equivalence
DESCRIPTION: Illustrates a basic example of `COPY --link` and explains its underlying mechanism. When `--link` is used, the source files are copied into an empty destination directory, which becomes a linked layer. This is conceptually equivalent to performing two separate builds and merging their layers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_103

LANGUAGE: Dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
COPY --link /foo /bar
```

LANGUAGE: Dockerfile
CODE:
```
FROM alpine
```

LANGUAGE: Dockerfile
CODE:
```
FROM scratch
COPY /foo /bar
```

----------------------------------------

TITLE: Dockerfile COPY --parents Syntax
DESCRIPTION: Defines the syntax for the Dockerfile COPY instruction when using the `--parents` flag. This flag is used to preserve the parent directory structure of source entries during the copy operation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_104

LANGUAGE: dockerfile
CODE:
```
COPY [--parents[=<boolean>]] <src> ... <dest>
```

----------------------------------------

TITLE: Dockerfile COPY --parents Example Usage
DESCRIPTION: Illustrates the behavior of the `COPY --parents` flag compared to a standard `COPY` operation. It shows how `--parents` maintains the source directory hierarchy in the destination, while a regular `COPY` flattens it.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_105

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1-labs
FROM scratch

COPY ./x/a.txt ./y/a.txt /no_parents/
COPY --parents ./x/a.txt ./y/a.txt /parents/

# /no_parents/a.txt
# /parents/x/a.txt
# /parents/y/a.txt
```

----------------------------------------

TITLE: Dockerfile COPY --parents with Relative Path Limitation
DESCRIPTION: Demonstrates how to control which parent directories are preserved by inserting './' into the source path. This technique allows for more granular control over the resulting directory structure, similar to `rsync`'s `--relative` flag.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_106

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1-labs
FROM scratch

COPY --parents ./x/./y/*.txt /parents/

# Build context:
# ./x/y/a.txt
# ./x/y/b.txt
#
# Output:
# /parents/y/a.txt
# /parents/y/b.txt
```

----------------------------------------

TITLE: Dockerfile COPY --exclude Syntax
DESCRIPTION: Defines the syntax for the Dockerfile COPY instruction when using the `--exclude` flag. This flag allows specifying patterns for files or directories that should be excluded from the copy operation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_107

LANGUAGE: dockerfile
CODE:
```
COPY [--exclude=<path> ...] <src> ... <dest>
```

----------------------------------------

TITLE: Dockerfile COPY --exclude Single Pattern Example
DESCRIPTION: Provides an example of using the `--exclude` flag with a single pattern. It shows how to copy files matching a source pattern while explicitly excluding files that match the specified exclusion pattern.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_108

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1-labs
FROM scratch

COPY --exclude=*.txt hom* /mydir/
```

----------------------------------------

TITLE: Dockerfile COPY --exclude Multiple Patterns Example
DESCRIPTION: Demonstrates how to use multiple `--exclude` flags within a single `COPY` instruction. This allows for excluding files that match any of the specified patterns, providing more flexible filtering.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_109

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1-labs
FROM scratch

COPY --exclude=*.txt --exclude=*.md hom* /mydir/
```

----------------------------------------

TITLE: Dockerfile ENTRYPOINT Exec Form Syntax
DESCRIPTION: Presents the preferred 'exec' form syntax for the Dockerfile `ENTRYPOINT` instruction. In this form, the command and its arguments are specified as a JSON array, ensuring the executable runs directly as PID 1.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_110

LANGUAGE: dockerfile
CODE:
```
ENTRYPOINT [""executable"", ""param1"", ""param2""]
```

----------------------------------------

TITLE: Dockerfile ENTRYPOINT Shell Form Syntax
DESCRIPTION: Presents the 'shell' form syntax for the Dockerfile `ENTRYPOINT` instruction. In this form, the command is executed via a shell (e.g., `/bin/sh -c`), which can affect signal handling and argument passing.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_111

LANGUAGE: dockerfile
CODE:
```
ENTRYPOINT command param1 param2
```

----------------------------------------

TITLE: Docker Run Command with ENTRYPOINT Example
DESCRIPTION: Provides a console command example of running a Docker container. This demonstrates how a container configured with an `ENTRYPOINT` instruction behaves when launched, specifically showing an `nginx` container setup.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_112

LANGUAGE: console
CODE:
```
$ docker run -i -t --rm -p 80:80 nginx
```

----------------------------------------

TITLE: Dockerfile with ENTRYPOINT and CMD for 'top' command
DESCRIPTION: This Dockerfile demonstrates the interaction between `ENTRYPOINT` (exec form) and `CMD` to run the `top` command with specific arguments. `ENTRYPOINT` sets the primary command, while `CMD` provides default arguments that can be overridden.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_113

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ENTRYPOINT [""top"", ""-b""]
CMD [""-c""]
```

----------------------------------------

TITLE: Running Docker container and inspecting 'top' process
DESCRIPTION: These console commands demonstrate how to run a Docker container with `ENTRYPOINT` and `CMD` set to `top`, and then use `docker exec` to view the processes inside the running container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_114

LANGUAGE: console
CODE:
```
$ docker run -it --rm --name test  top -H
```

LANGUAGE: console
CODE:
```
$ docker exec -it test ps aux
```

----------------------------------------

TITLE: Dockerfile for running Apache in foreground with ENTRYPOINT
DESCRIPTION: This Dockerfile configures a Debian-based image to run Apache HTTP Server in the foreground as PID 1 using the `ENTRYPOINT` instruction. It includes package installation, port exposure, and volume definitions for a robust web server setup.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_115

LANGUAGE: dockerfile
CODE:
```
FROM debian:stable
RUN apt-get update && apt-get install -y --force-yes apache2
EXPOSE 80 443
VOLUME [""/var/www"", ""/var/log/apache2"", ""/etc/apache2""]
ENTRYPOINT [""/usr/sbin/apache2ctl"", ""-D"", ""FOREGROUND""]
```

----------------------------------------

TITLE: Bash starter script for handling signals and process execution
DESCRIPTION: A bash script demonstrating how to use `exec` to ensure the final executable receives Unix signals and `gosu` for privilege management, specifically for a PostgreSQL setup. It handles database initialization and passes arguments to the main process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_116

LANGUAGE: bash
CODE:
```
#!/usr/bin/env bash
set -e

if [ ""$1"" = 'postgres' ]; then
    chown -R postgres ""$PGDATA""

    if [ -z ""$(ls -A ""$PGDATA"")"" ]; then
        gosu postgres initdb
    fi

    exec gosu postgres ""$@""
fi

exec ""$@""
```

----------------------------------------

TITLE: Bash ENTRYPOINT script with signal trapping and cleanup
DESCRIPTION: This `sh` script acts as an `ENTRYPOINT` that starts a service (Apache), traps Unix signals (HUP, INT, QUIT, TERM) for graceful shutdown, and performs cleanup after the service stops. It's designed for scenarios requiring more complex shutdown logic or multiple executables.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_117

LANGUAGE: bash
CODE:
```
#!/bin/sh
# Note: I've written this using sh so it works in the busybox container too

# USE the trap if you need to also do manual cleanup after the service is stopped,
#     or need to start multiple services in the one container
trap ""echo TRAPed signal"" HUP INT QUIT TERM

# start service in background here
/usr/sbin/apachectl start

echo ""[hit enter key to exit] or run 'docker stop <container>'""
read

# stop service and clean up here
echo ""stopping apache""
/usr/sbin/apachectl stop

echo ""exited $0""
```

----------------------------------------

TITLE: Inspecting and stopping Docker container running cleanup script
DESCRIPTION: These console commands demonstrate how to inspect processes (`ps aux`, `docker top`) within a Docker container running the bash cleanup script, and then gracefully stop the container using `docker stop`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_118

LANGUAGE: console
CODE:
```
$ docker exec -it test ps aux
```

LANGUAGE: console
CODE:
```
$ docker top test
```

LANGUAGE: console
CODE:
```
$ /usr/bin/time docker stop test
```

----------------------------------------

TITLE: Dockerfile ENTRYPOINT with `exec` for Clean Shutdown
DESCRIPTION: This Dockerfile demonstrates the recommended way to define an `ENTRYPOINT` using the `exec` command. This ensures that the main application process becomes PID 1 inside the container, allowing it to receive and respond to signals (like `SIGTERM` from `docker stop`) correctly, leading to clean shutdowns.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_119

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ENTRYPOINT exec top -b
```

----------------------------------------

TITLE: Console Output: `docker run` with `exec ENTRYPOINT`
DESCRIPTION: This console output shows the result of running a Docker container where the `ENTRYPOINT` uses `exec`. Observe that the `top -b` process is correctly assigned PID 1, indicating proper signal handling setup. This configuration allows for graceful container termination.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_120

LANGUAGE: console
CODE:
```
$ docker run -it --rm --name test top

Mem: 1704520K used, 352148K free, 0K shrd, 0K buff, 140368121167873K cached
CPU:   5% usr   0% sys   0% nic  94% idle   0% io   0% irq   0% sirq
Load average: 0.08 0.03 0.05 2/98 6
  PID  PPID USER     STAT   VSZ %VSZ %CPU COMMAND
    1     0 root     R     3164   0%   0% top -b
```

----------------------------------------

TITLE: Console Output: `docker stop` with `exec ENTRYPOINT`
DESCRIPTION: This example illustrates the efficient and clean shutdown of a Docker container when its `ENTRYPOINT` uses `exec`. The `docker stop` command completes very quickly, demonstrating that the container's main process received and acted upon the termination signal promptly.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_121

LANGUAGE: console
CODE:
```
$ /usr/bin/time docker stop test

test
real	0m 0.20s
user	0m 0.02s
sys	0m 0.04s
```

----------------------------------------

TITLE: Dockerfile ENTRYPOINT without `exec`
DESCRIPTION: This Dockerfile defines an `ENTRYPOINT` without the `exec` command, which is a common pitfall. In this scenario, the shell (`/bin/sh -c`) becomes PID 1, and the intended application runs as a child process. This can lead to issues with signal handling and delayed container shutdowns.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_122

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ENTRYPOINT top -b
CMD -- --ignored-param1
```

----------------------------------------

TITLE: Console Output: `docker run` without `exec ENTRYPOINT`
DESCRIPTION: This console output shows the process tree when a Docker container is run with an `ENTRYPOINT` that does not use `exec`. Notice that `/bin/sh` is PID 1, and the `top` command is a child process. This setup prevents the application from directly receiving termination signals, complicating graceful shutdowns.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_123

LANGUAGE: console
CODE:
```
$ docker run -it --name test top --ignored-param2

top - 13:58:24 up 17 min,  0 users,  load average: 0.00, 0.00, 0.00
Tasks:   2 total,   1 running,   1 sleeping,   0 stopped,   0 zombie
%Cpu(s): 16.7 us, 33.3 sy,  0.0 ni, 50.0 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
MiB Mem :   1990.8 total,   1354.6 free,    231.4 used,    404.7 buff/cache
MiB Swap:   1024.0 total,   1024.0 free,      0.0 used.   1639.8 avail Mem

  PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND
    1 root      20   0    2612    604    536 S   0.0   0.0   0:00.02 sh
    6 root      20   0    5956   3188   2768 R   0.0   0.2   0:00.00 top
```

----------------------------------------

TITLE: Console Output: `ps` and `docker stop` without `exec ENTRYPOINT`
DESCRIPTION: This example demonstrates the consequences of not using `exec` with `ENTRYPOINT`. The `ps waux` command confirms that `/bin/sh` is PID 1. Subsequently, `docker stop` takes significantly longer (10 seconds) because the shell does not forward signals to its child process, forcing Docker to send a `SIGKILL` after a timeout.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_124

LANGUAGE: console
CODE:
```
$ docker exec -it test ps waux

USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND
root         1  0.4  0.0   2612   604 pts/0    Ss+  13:58   0:00 /bin/sh -c top -b --ignored-param2
root         6  0.0  0.1   5956  3188 pts/0    S+   13:58   0:00 top -b
root         7  0.0  0.1   5884  2816 pts/1    Rs+  13:58   0:00 ps waux

$ /usr/bin/time docker stop test

test
real	0m 10.19s
user	0m 0.04s
sys	0m 0.03s
```

----------------------------------------

TITLE: API Documentation: Docker `CMD` and `ENTRYPOINT` Interaction Matrix
DESCRIPTION: This table provides a comprehensive overview of how Docker's `CMD` and `ENTRYPOINT` instructions interact under various configurations. It illustrates the resulting command execution for different combinations of shell form, exec form, and absence of these instructions, clarifying their precedence and behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_125

LANGUAGE: APIDOC
CODE:
```
|                                | No ENTRYPOINT              | ENTRYPOINT exec_entry p1_entry | ENTRYPOINT [""exec_entry"", ""p1_entry""]          |
| :----------------------------- | :------------------------- | :----------------------------- | :--------------------------------------------- |
| **No CMD**                     | error, not allowed         | /bin/sh -c exec_entry p1_entry | exec_entry p1_entry                            |
| **CMD [""exec_cmd"", ""p1_cmd""]** | exec_cmd p1_cmd            | /bin/sh -c exec_entry p1_entry | exec_entry p1_entry exec_cmd p1_cmd            |
| **CMD exec_cmd p1_cmd**        | /bin/sh -c exec_entry p1_cmd | /bin/sh -c exec_entry p1_entry | exec_entry p1_entry /bin/sh -c exec_cmd p1_cmd |
```

----------------------------------------

TITLE: Define Docker Volume Mount Point
DESCRIPTION: The `VOLUME` instruction creates a mount point with the specified name and marks it as holding externally mounted volumes from the native host or other containers. It can accept a JSON array or a plain string with multiple arguments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_126

LANGUAGE: dockerfile
CODE:
```
VOLUME [""/data""]
```

----------------------------------------

TITLE: Initialize Docker Volume with Base Image Data
DESCRIPTION: This Dockerfile snippet demonstrates how `docker run` initializes a newly created volume. Any data existing at the specified location within the base image, such as the `greeting` file in this example, is copied into the newly created volume.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_127

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
RUN mkdir /myvol
RUN echo ""hello world"" > /myvol/greeting
VOLUME /myvol
```

----------------------------------------

TITLE: Set Default User and Group for Docker Container
DESCRIPTION: The `USER` instruction sets the user name (or UID) and optionally the user group (or GID) to use as the default for the remainder of the current stage. This specified user is applied to `RUN` instructions and at runtime for `ENTRYPOINT` and `CMD` commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_128

LANGUAGE: dockerfile
CODE:
```
USER <user>[:<group>]
```

LANGUAGE: dockerfile
CODE:
```
USER <UID>[:<GID>]
```

----------------------------------------

TITLE: Create and Set User in Windows Dockerfile
DESCRIPTION: This example demonstrates how to create a new user in a Windows-based container using the `net user` command and then switch to that user using the `USER` instruction for subsequent commands within the Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_129

LANGUAGE: dockerfile
CODE:
```
FROM microsoft/windowsservercore
# Create Windows user in the container
RUN net user /add patrick
# Set it for subsequent commands
USER patrick
```

----------------------------------------

TITLE: Set Working Directory for Dockerfile Instructions
DESCRIPTION: The `WORKDIR` instruction sets the working directory for any `RUN`, `CMD`, `ENTRYPOINT`, `COPY`, and `ADD` instructions that follow it in the Dockerfile. If the specified directory does not exist, it will be created automatically.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_130

LANGUAGE: dockerfile
CODE:
```
WORKDIR /path/to/workdir
```

----------------------------------------

TITLE: Handle Relative Paths with Multiple WORKDIR Instructions
DESCRIPTION: When `WORKDIR` is used multiple times in a Dockerfile, a relative path provided in a subsequent instruction will be relative to the path set by the previous `WORKDIR`. This example illustrates the cumulative effect of multiple `WORKDIR` commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_131

LANGUAGE: dockerfile
CODE:
```
WORKDIR /a
WORKDIR b
WORKDIR c
RUN pwd
```

----------------------------------------

TITLE: Resolve Environment Variables in WORKDIR
DESCRIPTION: The `WORKDIR` instruction can resolve environment variables that have been explicitly set earlier in the Dockerfile using the `ENV` instruction. This allows for dynamic construction of working directory paths based on defined variables.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_132

LANGUAGE: dockerfile
CODE:
```
ENV DIRPATH=/path
WORKDIR $DIRPATH/$DIRNAME
RUN pwd
```

----------------------------------------

TITLE: Dockerfile ARG Instruction Basic Syntax
DESCRIPTION: Defines a build-time variable that can be passed to the Docker builder using the `--build-arg <varname>=<value>` flag. Multiple variables can be declared on a single line.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_133

LANGUAGE: dockerfile
CODE:
```
ARG <name>[=<default value>] [<name>[=<default value>]...]
```

----------------------------------------

TITLE: Dockerfile Multiple ARG Declarations
DESCRIPTION: Illustrates how to declare multiple `ARG` variables in a Dockerfile, each on its own line.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_134

LANGUAGE: dockerfile
CODE:
```
FROM busybox
ARG user1
ARG buildno
# ...
```

----------------------------------------

TITLE: Dockerfile ARG with Default Values
DESCRIPTION: Shows how to assign default values to `ARG` variables. If no value is passed at build-time for a specific `ARG`, the builder uses its defined default.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_135

LANGUAGE: dockerfile
CODE:
```
FROM busybox
ARG user1=someuser
ARG buildno=1
# ...
```

----------------------------------------

TITLE: Dockerfile ARG Variable Scoping Example
DESCRIPTION: Demonstrates the scope of `ARG` variables within a Dockerfile. An `ARG` variable is only effective from the line on which it is declared onwards. This example shows how a variable is undefined before its `ARG` declaration and then becomes available.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_136

LANGUAGE: dockerfile
CODE:
```
FROM busybox
USER ${username:-some_user}
ARG username
USER $username
# ...
```

LANGUAGE: console
CODE:
```
$ docker build --build-arg username=what_user .
```

----------------------------------------

TITLE: Dockerfile ARG vs. ENV Variable Precedence
DESCRIPTION: Illustrates the precedence rules between `ARG` and `ENV` instructions. An `ENV` instruction with the same name as an `ARG` will override the `ARG`'s value within the Dockerfile, even if the `ARG` was passed via `--build-arg`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_137

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG CONT_IMG_VER
ENV CONT_IMG_VER=v1.0.0
RUN echo $CONT_IMG_VER
```

LANGUAGE: console
CODE:
```
$ docker build --build-arg CONT_IMG_VER=v2.0.1 .
```

----------------------------------------

TITLE: Dockerfile ARG and ENV with Variable Expansion for Persistence
DESCRIPTION: Shows how to use variable expansion with `ENV` to allow `ARG` values to persist in the final image. If an `ARG` is provided, it's used; otherwise, a default value defined in `ENV` is applied. This technique allows passing arguments from the command line and embedding them into the built image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_138

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG CONT_IMG_VER
ENV CONT_IMG_VER=${CONT_IMG_VER:-v1.0.0}
RUN echo $CONT_IMG_VER
```

LANGUAGE: console
CODE:
```
$ docker build .
```

----------------------------------------

TITLE: Build Docker Image with Predefined Proxy ARG
DESCRIPTION: This command demonstrates how to pass a predefined `ARG` variable, such as `HTTPS_PROXY`, to the `docker build` command using the `--build-arg` flag. This allows configuring proxy settings for the build process without modifying the Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_139

LANGUAGE: console
CODE:
```
docker build --build-arg HTTPS_PROXY=https://my-proxy.example.com .
```

----------------------------------------

TITLE: Dockerfile Example: Predefined ARG Not Preserved
DESCRIPTION: This basic Dockerfile illustrates the default behavior where predefined `ARG` variables (like `HTTP_PROXY` passed via `--build-arg`) are not preserved in `docker history` and do not invalidate the build cache upon value changes. This is a security measure to prevent sensitive information leakage.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_140

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
RUN echo ""Hello World""
```

----------------------------------------

TITLE: Dockerfile Example: Explicitly Preserving Predefined ARG
DESCRIPTION: This Dockerfile shows how to override the default behavior for predefined `ARG` variables. By explicitly declaring `ARG HTTP_PROXY` within the Dockerfile, its value will be preserved in `docker history`, and changes to its value will invalidate the build cache, allowing for more controlled caching behavior.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_141

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG HTTP_PROXY
RUN echo ""Hello World""
```

----------------------------------------

TITLE: Dockerfile Example: Exposing BuildKit Platform ARG
DESCRIPTION: This Dockerfile demonstrates how to make BuildKit's automatic platform-related `ARG` variables, such as `TARGETPLATFORM`, accessible within a build stage. Since these are globally defined, they must be explicitly redefined without a value inside the Dockerfile to be used by `RUN` commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_142

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ARG TARGETPLATFORM
RUN echo ""I'm building for $TARGETPLATFORM""
```

----------------------------------------

TITLE: BuildKit Built-in Build Arguments Reference
DESCRIPTION: This section provides a reference for various built-in arguments available when using the BuildKit backend. These arguments offer advanced control over caching, context handling, image metadata, and build environment settings.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_143

LANGUAGE: APIDOC
CODE:
```
BUILDKIT_CACHE_MOUNT_NS: String
  Description: Set optional cache ID namespace.
BUILDKIT_CONTEXT_KEEP_GIT_DIR: Bool
  Description: Trigger Git context to keep the `.git` directory.
BUILDKIT_INLINE_CACHE: Bool
  Description: Inline cache metadata to image config or not.
BUILDKIT_MULTI_PLATFORM: Bool
  Description: Opt into deterministic output regardless of multi-platform output or not.
BUILDKIT_SANDBOX_HOSTNAME: String
  Description: Set the hostname (default `buildkitsandbox`)
BUILDKIT_SYNTAX: String
  Description: Set frontend image
SOURCE_DATE_EPOCH: Int
  Description: Set the Unix timestamp for created image and layers. More info from [reproducible builds](https://reproducible-builds.org/docs/source-date-epoch/). Supported since Dockerfile 1.5, BuildKit 0.11
```

----------------------------------------

TITLE: Dockerfile to Preserve Git Directory in Build Context
DESCRIPTION: Demonstrates how to configure a Dockerfile to retain the .git directory during a build, which is useful for retrieving Git information like commit revisions within the build process. This requires setting the BUILDKIT_CONTEXT_KEEP_GIT_DIR build argument.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_144

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM alpine
WORKDIR /src
RUN --mount=target=. \
  make REVISION=$(git rev-parse HEAD) build
```

----------------------------------------

TITLE: Docker Build Command with Git Directory Preservation
DESCRIPTION: Illustrates the command-line execution of a Docker build that explicitly passes the BUILDKIT_CONTEXT_KEEP_GIT_DIR argument. This ensures that the .git directory from the build context is preserved, allowing access to Git metadata during the build.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_145

LANGUAGE: console
CODE:
```
$ docker build --build-arg BUILDKIT_CONTEXT_KEEP_GIT_DIR=1 https://github.com/user/repo.git#main
```

----------------------------------------

TITLE: Dockerfile Example: ARG Variable Cache Miss on First Usage
DESCRIPTION: This Dockerfile demonstrates that a change in an ARG variable's value causes a cache miss not at its definition, but at its first implicit usage by a subsequent RUN instruction. The RUN command implicitly uses the ARG as an environment variable.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_146

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG CONT_IMG_VER
RUN echo $CONT_IMG_VER
```

----------------------------------------

TITLE: Dockerfile Example: ARG Variable Cache Miss with Constant RUN
DESCRIPTION: Even if a RUN instruction's literal content remains constant, a change in an ARG variable's value will still cause a cache miss at that RUN instruction. This is because the ARG variable is implicitly used, making the effective command different.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_147

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG CONT_IMG_VER
RUN echo hello
```

----------------------------------------

TITLE: Dockerfile Example: ARG and ENV Variable Interaction Cache Miss
DESCRIPTION: This example shows a cache miss occurring when an ENV instruction references an ARG variable whose value is changed via the command line. The cache miss happens at the ENV instruction because its resulting value changes, affecting the image layer.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_148

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG CONT_IMG_VER
ENV CONT_IMG_VER=$CONT_IMG_VER
RUN echo $CONT_IMG_VER
```

----------------------------------------

TITLE: Dockerfile Example: ENV Overriding ARG with Constant Value
DESCRIPTION: Illustrates that if an ENV instruction explicitly overrides an ARG variable with a constant value, subsequent RUN instructions will not cause a cache miss even if the ARG's value changes. This is because the effective environment variable used by RUN remains constant.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_149

LANGUAGE: dockerfile
CODE:
```
FROM ubuntu
ARG CONT_IMG_VER
ENV CONT_IMG_VER=hello
RUN echo $CONT_IMG_VER
```

----------------------------------------

TITLE: Dockerfile ONBUILD Instruction Reference
DESCRIPTION: The ONBUILD instruction adds a trigger instruction to an image, which will be executed later when this image is used as the base for another build. These triggers are executed immediately after the FROM instruction in the downstream Dockerfile, allowing for advanced image composition and reusable base images. Triggers are stored in the image manifest and are cleared after execution by 'grand-children' builds.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_150

LANGUAGE: APIDOC
CODE:
```
ONBUILD <INSTRUCTION>

Description:
  Adds a trigger instruction to the image metadata.
  Executed when the image is used as a base for another build (via FROM).
  Triggers run in the context of the downstream build, after FROM.
  Useful for building reusable base images (e.g., application builders).

Execution Flow:
1. Builder adds trigger to image metadata (doesn't affect current build).
2. Triggers stored in image manifest under 'OnBuild' key.
3. Downstream builder (using FROM) looks for and executes ONBUILD triggers in order.
4. If any trigger fails, FROM instruction (and build) is aborted.
5. Triggers are cleared from the final image after execution (not inherited by 'grand-children').
```

----------------------------------------

TITLE: Dockerfile Example: ONBUILD Instructions for Application Setup
DESCRIPTION: Provides a practical example of using ONBUILD instructions to automate common steps for an application, such as adding source code and running a build script. These instructions will only execute when another Dockerfile uses this image as its base, ensuring consistent setup for derived images.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_151

LANGUAGE: dockerfile
CODE:
```
ONBUILD ADD . /app/src
ONBUILD RUN /usr/local/bin/python-build --dir /app/src
```

----------------------------------------

TITLE: Define ONBUILD Instructions for Conditional Build Steps
DESCRIPTION: The `ONBUILD` instruction allows defining commands that will be executed when the image is used as a base for another build. As of Dockerfile syntax 1.11, it supports `COPY --from` for copying files from other stages, images, or build contexts, and `RUN --mount` for mounting resources. The source of `from` must be defined in the Dockerfile where `ONBUILD` is triggered, or the context passed to the downstream build. Chaining `ONBUILD` instructions or using `FROM`/`MAINTAINER` within `ONBUILD` is not permitted.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_152

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1.11
FROM alpine AS baseimage
ONBUILD COPY --from=build /usr/bin/app /app
ONBUILD RUN --mount=from=config,target=/opt/appconfig ...
```

----------------------------------------

TITLE: Configure Container Exit Signal with STOPSIGNAL
DESCRIPTION: The `STOPSIGNAL` instruction specifies the system call signal sent to a container to initiate its exit. This signal can be a named signal (e.g., `SIGKILL`) or an unsigned number (e.g., `9`). If not explicitly defined, the default signal is `SIGTERM`. The image's default stop signal can be overridden at runtime using the `--stop-signal` flag with `docker run` or `docker create`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_153

LANGUAGE: dockerfile
CODE:
```
STOPSIGNAL signal
```

----------------------------------------

TITLE: Implement Container Health Checks using HEALTHCHECK
DESCRIPTION: The `HEALTHCHECK` instruction defines how Docker should test a container's health. It supports two forms: `HEALTHCHECK [OPTIONS] CMD command` to run a command inside the container, or `HEALTHCHECK NONE` to disable inherited health checks. Docker tracks the container's health status (starting, healthy, unhealthy) based on the command's exit code (0 for success, 1 for unhealthy). Options like `--interval`, `--timeout`, `--start-period`, `--start-interval`, and `--retries` control the check frequency, duration, and failure thresholds. Only the last `HEALTHCHECK` instruction in a Dockerfile takes effect.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_154

LANGUAGE: dockerfile
CODE:
```
HEALTHCHECK --interval=5m --timeout=3s \
  CMD curl -f http://localhost/ || exit 1
```

----------------------------------------

TITLE: Dockerfile SHELL Instruction Basic Syntax
DESCRIPTION: Illustrates the fundamental JSON syntax for the Dockerfile SHELL instruction, which allows overriding the default shell used for subsequent commands. It specifies the executable and its parameters.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_155

LANGUAGE: dockerfile
CODE:
```
SHELL [""executable"", ""parameters""]
```

----------------------------------------

TITLE: Dockerfile SHELL Instruction Overriding Example
DESCRIPTION: Demonstrates how the SHELL instruction can be used multiple times within a Dockerfile, with each instance overriding previous settings. This example shows switching between 'cmd' and 'powershell' for 'RUN' commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_156

LANGUAGE: dockerfile
CODE:
```
FROM microsoft/windowsservercore

# Executed as cmd /S /C echo default
RUN echo default

# Executed as cmd /S /C powershell -command Write-Host default
RUN powershell -command Write-Host default

# Executed as powershell -command Write-Host hello
SHELL [""powershell"", ""-command""]
RUN Write-Host hello

# Executed as cmd /S /C echo hello
SHELL [""cmd"", ""/S"", ""/C""]
RUN echo hello
```

----------------------------------------

TITLE: Inefficient PowerShell RUN Command in Dockerfile
DESCRIPTION: Highlights a common, but inefficient, pattern for executing PowerShell cmdlets in a Dockerfile. This approach implicitly invokes 'cmd.exe' before PowerShell, adding unnecessary overhead.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_157

LANGUAGE: dockerfile
CODE:
```
RUN powershell -command Execute-MyCmdlet -param1 ""c:\foo.txt""
```

----------------------------------------

TITLE: Invoked Command for Inefficient PowerShell RUN
DESCRIPTION: Shows the actual command string that Docker's builder constructs and executes when the inefficient PowerShell RUN command is used. It clearly illustrates the 'cmd /S /C' wrapper.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_158

LANGUAGE: powershell
CODE:
```
cmd /S /C powershell -command Execute-MyCmdlet -param1 ""c:\foo.txt""
```

----------------------------------------

TITLE: Efficient PowerShell RUN in Dockerfile (JSON Form)
DESCRIPTION: Presents an alternative, more efficient way to execute PowerShell commands using the JSON form of the 'RUN' instruction. This method avoids the 'cmd.exe' wrapper but requires careful escaping of arguments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_159

LANGUAGE: dockerfile
CODE:
```
RUN [""powershell"", ""-command"", ""Execute-MyCmdlet"", ""-param1 \""c:\\foo.txt\""""]
```

----------------------------------------

TITLE: Efficient PowerShell RUN in Dockerfile (SHELL Instruction with Escape)
DESCRIPTION: Demonstrates a highly efficient and readable method for running PowerShell commands by combining the 'SHELL' instruction with the 'escape' parser directive. This sets PowerShell as the default shell, simplifying subsequent 'RUN' commands.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_160

LANGUAGE: dockerfile
CODE:
```
# escape=`

FROM microsoft/nanoserver
SHELL [""powershell"",""-command""]
RUN New-Item -ItemType Directory C:\Example
ADD Execute-MyCmdlet.ps1 c:\example\
RUN c:\example\Execute-MyCmdlet -sample 'hello world'
```

----------------------------------------

TITLE: Docker Build Output for SHELL Instruction Example
DESCRIPTION: Provides the console output from a Docker build process, illustrating the practical application and effects of using the SHELL instruction and escape directive. It shows the successful execution of PowerShell commands within the container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_161

LANGUAGE: console
CODE:
```
PS E:\myproject> docker build -t shell .

Sending build context to Docker daemon 4.096 kB
Step 1/5 : FROM microsoft/nanoserver
 ---> 22738ff49c6d
Step 2/5 : SHELL powershell -command
 ---> Running in 6fcdb6855ae2
 ---> 6331462d4300
Removing intermediate container 6fcdb6855ae2
Step 3/5 : RUN New-Item -ItemType Directory C:\Example
 ---> Running in d0eef8386e97


    Directory: C:\


Mode         LastWriteTime              Length Name
----		             -------------              ------ ----
d-----		             10/28/2016  11:26 AM              Example


 ---> 3f2fbf1395d9
Removing intermediate container d0eef8386e97
Step 4/5 : ADD Execute-MyCmdlet.ps1 c:\example\
 ---> a955b2621c31
Removing intermediate container b825593d39fc
Step 5/5 : RUN c:\example\Execute-MyCmdlet 'hello world'
 ---> Running in be6d8e63fe75
hello world
 ---> 8e559e9bf424
Removing intermediate container be6d8e63fe75
Successfully built 8e559e9bf424
PS E:\myproject>
```

----------------------------------------

TITLE: Dockerfile Here-Document with Multi-line Bash Script
DESCRIPTION: Illustrates the use of a here-document within a Dockerfile's 'RUN' instruction to embed and execute a multi-line bash script. The 'EOT bash' syntax explicitly sets 'bash' as the interpreter for the script.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_162

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM debian
RUN <<EOT bash
  set -ex
  apt-get update
  apt-get install -y vim
EOT
```

----------------------------------------

TITLE: Dockerfile Here-Document with Default Shell
DESCRIPTION: Demonstrates a here-document in a Dockerfile's 'RUN' instruction where the embedded script content is executed by the default shell. This is suitable for simple multi-line commands without needing to specify an interpreter.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_163

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM debian
RUN <<EOT
  mkdir -p foo/bar
EOT
```

----------------------------------------

TITLE: Dockerfile Here-Document with Shebang for Python Script
DESCRIPTION: Shows how to embed a Python script within a Dockerfile's 'RUN' instruction using a here-document and a shebang header. The shebang ('#!/usr/bin/env python') ensures the script is executed by the Python interpreter.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_164

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM python:3.6
RUN <<EOT
#!/usr/bin/env python
print(\""hello world\"")
EOT
```

----------------------------------------

TITLE: Dockerfile: Creating Multiple Inline Files with RUN
DESCRIPTION: Demonstrates creating multiple inline files (`file1`, `file2`) within a Dockerfile using the `RUN` instruction combined with here-documents.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_165

LANGUAGE: dockerfile
CODE:
```
FROM alpine
RUN <<FILE1 cat > file1 && <<FILE2 cat > file2
I am
first
FILE1
I am
second
FILE2
```

----------------------------------------

TITLE: Dockerfile: Creating a Single Inline File with COPY
DESCRIPTION: Illustrates how to create a single inline file, `greeting.txt`, containing 'hello world' directly in a Dockerfile using the `COPY` instruction with a here-document.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_166

LANGUAGE: dockerfile
CODE:
```
FROM alpine
COPY <<EOF greeting.txt
hello world
EOF
```

----------------------------------------

TITLE: Dockerfile: Build-Time Variable Expansion in Here-Docs
DESCRIPTION: Shows how variables defined with `ARG` are expanded at build-time within a `COPY` instruction's here-document when the delimiter is unquoted.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_167

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ARG FOO=bar
COPY <<-EOT /script.sh
  echo ""hello ${FOO}""
EOT
ENTRYPOINT ash /script.sh
```

----------------------------------------

TITLE: Console: Build and Run Dockerfile with Build-Time Expansion
DESCRIPTION: Commands to build and execute the Dockerfile example demonstrating build-time variable expansion in a here-document, showing the output 'hello bar'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_168

LANGUAGE: console
CODE:
```
docker build -t heredoc .
docker run heredoc
```

----------------------------------------

TITLE: Dockerfile: Preventing Build-Time Variable Expansion
DESCRIPTION: Demonstrates that quoting the here-document delimiter (`""EOT""`) prevents build-time variable expansion, allowing the variable to be interpreted at runtime.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_169

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ARG FOO=bar
COPY <<-""EOT"" /script.sh
  echo ""hello ${FOO}""
EOT
ENTRYPOINT ash /script.sh
```

----------------------------------------

TITLE: Console: Build and Run Dockerfile with Runtime Expansion
DESCRIPTION: Commands to build and execute the Dockerfile example where variable expansion occurs at runtime, demonstrating how to pass environment variables.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_170

LANGUAGE: console
CODE:
```
docker build -t heredoc .
docker run -e FOO=world heredoc
```

----------------------------------------

TITLE: Dockerfile: Cache Go Build Artifacts
DESCRIPTION: Demonstrates using `RUN --mount=type=cache` to cache the Go build cache directory (`/root/.cache/go-build`). This significantly speeds up subsequent Go builds by reusing downloaded modules and compiled objects, improving overall build efficiency.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_171

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM golang
RUN --mount=type=cache,target=/root/.cache/go-build \
  go build ...
```

----------------------------------------

TITLE: Dockerfile: Cache APT Packages with Locked Sharing
DESCRIPTION: Illustrates caching APT package data using two `RUN --mount=type=cache` directives for `/var/cache/apt` and `/var/lib/apt`. The `sharing=locked` option is critical here, ensuring that parallel builds wait for exclusive access to APT's data, preventing corruption and maintaining cache integrity during concurrent operations.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/reference.md#_snippet_172

LANGUAGE: dockerfile
CODE:
```
# syntax=docker/dockerfile:1
FROM ubuntu
RUN rm -f /etc/apt/apt.conf.d/docker-clean; echo 'Binary::apt::APT::Keep-Downloaded-Packages \""true\"";' > /etc/apt/apt.conf.d/keep-cache
RUN --mount=type=cache,target=/var/cache/apt,sharing=locked \
  --mount=type=cache,target=/var/lib/apt,sharing=locked \
  apt update && apt-get --no-install-recommends install -y gcc
```

----------------------------------------

TITLE: Run Docker Build Checks
DESCRIPTION: Executes a build check on the current directory's Dockerfile and build configuration using the `--check` flag. This command performs a series of validations against predefined rules instead of producing a build output.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/_index.md#_snippet_0

LANGUAGE: console
CODE:
```
$ docker build --check .
```

----------------------------------------

TITLE: BuildKit Dockerfile Best Practice Checks
DESCRIPTION: A comprehensive list of pre-defined rules enforced by BuildKit to ensure Dockerfile best practices, readability, and error prevention. Each rule describes a specific check performed during the build process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/_index.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
BuildKit Rules:
- Name: StageNameCasing
  Description: Stage names should be lowercase
- Name: FromAsCasing
  Description: The 'as' keyword should match the case of the 'from' keyword
- Name: NoEmptyContinuation
  Description: Empty continuation lines will become errors in a future release
- Name: ConsistentInstructionCasing
  Description: All commands within the Dockerfile should use the same casing (either upper or lower)
- Name: DuplicateStageName
  Description: Stage names should be unique
- Name: ReservedStageName
  Description: Reserved words should not be used as stage names
- Name: JSONArgsRecommended
  Description: JSON arguments recommended for ENTRYPOINT/CMD to prevent unintended behavior related to OS signals
- Name: MaintainerDeprecated
  Description: The MAINTAINER instruction is deprecated, use a label instead to define an image author
- Name: UndefinedArgInFrom
  Description: FROM command must use declared ARGs
- Name: WorkdirRelativePath
  Description: Relative workdir without an absolute workdir declared within the build can have unexpected results if the base image changes
- Name: UndefinedVar
  Description: Variables should be defined before their use
- Name: MultipleInstructionsDisallowed
  Description: Multiple instructions of the same type should not be used in the same stage
- Name: LegacyKeyValueFormat
  Description: Legacy key/value format with whitespace separator should not be used
- Name: RedundantTargetPlatform
  Description: Setting platform to predefined $TARGETPLATFORM in FROM is redundant as this is the default behavior
- Name: SecretsUsedInArgOrEnv
  Description: Sensitive data should not be used in the ARG or ENV commands
- Name: InvalidDefaultArgInFrom
  Description: Default value for global ARG results in an empty or invalid base image name
- Name: FromPlatformFlagConstDisallowed
  Description: FROM --platform flag should not use a constant value
- Name: CopyIgnoredFile (experimental)
  Description: Attempting to Copy file that is excluded by .dockerignore
- Name: InvalidDefinitionDescription (experimental)
  Description: Comment for build stage or argument should follow the format: `# <arg/stage name> <description>`. If this is not intended to be a description comment, add an empty line or comment between the instruction and the comment.
```

----------------------------------------

TITLE: Example Linter Output for Inconsistent Casing
DESCRIPTION: This snippet shows an example of the error message generated by a linter when Dockerfile instructions have inconsistent casing, specifically highlighting a mixed-case 'EntryPoint' command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/consistent-instruction-casing.md#_snippet_0

LANGUAGE: text
CODE:
```
Command 'EntryPoint' should be consistently cased
```

----------------------------------------

TITLE: Dockerfile Instruction Casing Examples
DESCRIPTION: These examples illustrate the rule for consistent casing in Dockerfile instructions. The 'Bad' example demonstrates mixed casing, while the 'Good' examples show correct usage with either all uppercase or all lowercase instructions, enhancing readability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/consistent-instruction-casing.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
From alpine
Run echo hello > /greeting.txt
EntRYpOiNT [""cat"", ""/greeting.txt""]
```

LANGUAGE: dockerfile
CODE:
```
FROM alpine
RUN echo hello > /greeting.txt
ENTRYPOINT [""cat"", ""/greeting.txt""]
```

LANGUAGE: dockerfile
CODE:
```
from alpine
run echo hello > /greeting.txt
entrypoint [""cat"", ""/greeting.txt""]
```

----------------------------------------

TITLE: Example Build Output for Copying Ignored File
DESCRIPTION: Shows the specific error message generated when a Docker build attempts to copy a file that is excluded by the project's .dockerignore file. This error indicates the file is not present in the build context.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/copy-ignored-file.md#_snippet_0

LANGUAGE: text
CODE:
```
Attempting to Copy file ""./tmp/Dockerfile"" that is excluded by .dockerignore
```

----------------------------------------

TITLE: .dockerignore Pattern for Excluding Temporary Files
DESCRIPTION: Provides an example of a .dockerignore pattern that excludes all files within any 'tmp' directory, preventing them from being included in the Docker build context.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/copy-ignored-file.md#_snippet_1

LANGUAGE: text
CODE:
```
*/tmp/*
```

----------------------------------------

TITLE: Dockerfile COPY Instruction with .dockerignore Considerations
DESCRIPTION: Illustrates both incorrect and correct ways to use the COPY instruction in a Dockerfile when a .dockerignore file is active. The 'Bad' example attempts to copy a file that matches an exclusion pattern, leading to a build error. The 'Good' example successfully copies a file that is not excluded.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/copy-ignored-file.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM scratch
COPY ./tmp/helloworld.txt /helloworld.txt
```

LANGUAGE: dockerfile
CODE:
```
FROM scratch
COPY ./forever/helloworld.txt /helloworld.txt
```

----------------------------------------

TITLE: Example Error Message for Duplicate Dockerfile Stage Name
DESCRIPTION: This text snippet shows the specific error message generated by Docker when a Dockerfile contains multiple build stages with the same name, indicating the conflict and the need for unique identifiers.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/duplicate-stage-name.md#_snippet_0

LANGUAGE: text
CODE:
```
Duplicate stage name 'foo-base', stage names should be unique
```

----------------------------------------

TITLE: Incorrect Dockerfile: Duplicate Build Stage Names
DESCRIPTION: This Dockerfile demonstrates an incorrect configuration where the 'builder' stage name is declared twice. This practice leads to an error during the build process because the Docker builder cannot uniquely resolve the stage reference, preventing successful image creation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/duplicate-stage-name.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM debian:latest AS builder
RUN apt-get update; apt-get install -y curl

FROM golang:latest AS builder
```

----------------------------------------

TITLE: Correct Dockerfile: Unique Build Stage Names
DESCRIPTION: This Dockerfile provides an example of a correctly structured multi-stage build where each stage is assigned a unique name ('deb-builder' and 'go-builder'). This ensures that the Docker builder can correctly identify and reference each stage, allowing for a successful and unambiguous build process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/duplicate-stage-name.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM debian:latest AS deb-builder
RUN apt-get update; apt-get install -y curl

FROM golang:latest AS go-builder
```

----------------------------------------

TITLE: Dockerfile Casing Mismatch Error Output
DESCRIPTION: Displays the specific error message generated when the 'as' and 'FROM' keywords have inconsistent casing within a Dockerfile, indicating a readability violation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#_snippet_0

LANGUAGE: text
CODE:
```
'as' and 'FROM' keywords' casing do not match
```

----------------------------------------

TITLE: Dockerfile FROM AS Casing Mismatch (Bad Example)
DESCRIPTION: Illustrates a Dockerfile instruction where 'FROM' is uppercase and 'as' is lowercase, demonstrating the inconsistent casing that triggers the linting rule violation.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM debian:latest as builder
```

----------------------------------------

TITLE: Dockerfile FROM AS Casing Match (Good Example - Uppercase)
DESCRIPTION: Provides an example of a Dockerfile instruction where both 'FROM' and 'AS' keywords are consistently uppercase, adhering to the recommended casing style for improved readability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM debian:latest AS deb-builder
```

----------------------------------------

TITLE: Dockerfile FROM AS Casing Match (Good Example - Lowercase)
DESCRIPTION: Shows another correct Dockerfile instruction where both 'from' and 'as' keywords are consistently lowercase, demonstrating adherence to the casing rule for readability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-as-casing.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
from debian:latest as deb-builder
```

----------------------------------------

TITLE: Dockerfile FROM --platform Flag Constant Value Error Output
DESCRIPTION: Illustrates the error message generated when the Dockerfile FROM instruction uses a constant value for the --platform flag. This output indicates a violation of the recommended practice for multi-platform builds.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#_snippet_0

LANGUAGE: text
CODE:
```
FROM --platform flag should not use constant value ""linux/amd64""
```

----------------------------------------

TITLE: Dockerfile FROM --platform Constant Value (Bad Practice)
DESCRIPTION: Demonstrates an incorrect Dockerfile usage where the FROM instruction specifies a fixed platform (e.g., linux/amd64). This approach prevents the Dockerfile from being used to build multi-platform images and is not recommended.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM --platform=linux/amd64 alpine AS base
RUN apk add --no-cache git
```

----------------------------------------

TITLE: Dockerfile FROM --platform Flexible Usage (Good Practices)
DESCRIPTION: Shows recommended ways to handle the --platform flag in Dockerfiles for multi-platform compatibility. Examples include omitting the flag for default behavior, using build-time variables like $BUILDPLATFORM, and structuring multi-stage builds with target architectures.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/from-platform-flag-const-disallowed.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS base
RUN apk add --no-cache git
```

LANGUAGE: dockerfile
CODE:
```
FROM --platform=${BUILDPLATFORM} alpine AS base
RUN apk add --no-cache git
```

LANGUAGE: dockerfile
CODE:
```
FROM --platform=linux/amd64 alpine AS build_amd64
...

FROM --platform=linux/arm64 alpine AS build_arm64
...

FROM build_${TARGETARCH} AS build
...
```

----------------------------------------

TITLE: Expected Build Output Message
DESCRIPTION: Shows the console output indicating a successful build when global ARGs with default values are correctly handled, producing a valid image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-default-arg-in-from.md#_snippet_0

LANGUAGE: text
CODE:
```
Using the global ARGs with default values should produce a valid build.
```

----------------------------------------

TITLE: Dockerfile: Invalid ARG in FROM Instruction
DESCRIPTION: Illustrates an incorrect Dockerfile pattern where an ARG used in the FROM instruction is not initialized, leading to an invalid base image name if the ARG is not provided during the build process. This requires `--build-arg` to produce a valid build.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-default-arg-in-from.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
ARG TAG
FROM busybox:${TAG}
```

----------------------------------------

TITLE: Dockerfile: Valid ARG Usage in FROM Instruction
DESCRIPTION: Demonstrates multiple correct ways to use ARGs in the FROM instruction, ensuring the base image reference is always valid. This includes providing a default value directly, allowing an empty ARG if the resulting image name is still valid, or using shell parameter expansion for a fallback default.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-default-arg-in-from.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
ARG TAG=latest
FROM busybox:${TAG}
```

LANGUAGE: dockerfile
CODE:
```
ARG VARIANT
FROM busybox:stable${VARIANT}
```

LANGUAGE: dockerfile
CODE:
```
ARG TAG
FROM alpine:${TAG:-3.14}
```

----------------------------------------

TITLE: Output Message for Invalid Definition Description
DESCRIPTION: Shows the exact error message format produced by the `InvalidDefinitionDescription` check when a Dockerfile comment does not follow the expected description format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-definition-description.md#_snippet_0

LANGUAGE: text
CODE:
```
Comment for build stage or argument should follow the format: `# <arg/stage name> <description>`. If this is not intended to be a description comment, add an empty line or comment between the instruction and the comment.
```

----------------------------------------

TITLE: Incorrect Dockerfile Comment Placement
DESCRIPTION: Demonstrates how non-descriptive comments immediately preceding `FROM` or `ARG` instructions without an empty line are misinterpreted as descriptions, leading to validation errors.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-definition-description.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
# a non-descriptive comment
FROM scratch AS base

# another non-descriptive comment
ARG VERSION=1
```

----------------------------------------

TITLE: Correct Dockerfile Comment Handling for Descriptions and Non-Descriptions
DESCRIPTION: Illustrates two correct methods for Dockerfile comments: using an empty line to separate non-descriptive comments from instructions, and properly formatting comments to serve as descriptions for build stages and arguments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/invalid-definition-description.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
# a non-descriptive comment

FROM scratch AS base

# another non-descriptive comment

ARG VERSION=1
```

LANGUAGE: dockerfile
CODE:
```
# build-cli builds the CLI binary
FROM alpine AS build-cli
# VERSION controls the version of the program
ARG VERSION=1
```

LANGUAGE: dockerfile
CODE:
```
# base is a stage for compiling source
FROM scratch AS base
# VERSION This is the version number.
ARG VERSION=1
```

----------------------------------------

TITLE: Example Output for JSON Arguments Recommendation
DESCRIPTION: Illustrates the recommended output message regarding JSON arguments for Dockerfile ENTRYPOINT/CMD.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#_snippet_0

LANGUAGE: text
CODE:
```
JSON arguments recommended for ENTRYPOINT/CMD to prevent unintended behavior related to OS signals
```

----------------------------------------

TITLE: Incorrect Dockerfile ENTRYPOINT (Shell Form)
DESCRIPTION: Demonstrates the shell form of ENTRYPOINT, which prevents the application from receiving OS signals like SIGTERM and SIGKILL, leading to unintended behavior during container shutdown.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ENTRYPOINT my-program start
```

----------------------------------------

TITLE: Correct Dockerfile ENTRYPOINT (Exec Form)
DESCRIPTION: Shows the recommended exec form (JSON array) for ENTRYPOINT, ensuring the application runs as PID 1 and correctly receives OS signals for graceful shutdown.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ENTRYPOINT [""my-program"", ""start""]
```

----------------------------------------

TITLE: Dockerfile ENTRYPOINT with Wrapper Script Workaround
DESCRIPTION: Provides a workaround for using shell features while still employing the exec form for ENTRYPOINT. It involves creating an entrypoint script that wraps startup commands, which is then executed via a JSON-formatted ENTRYPOINT.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
FROM alpine
RUN apk add bash
COPY --chmod=755 <<EOT /entrypoint.sh
#!/usr/bin/env bash
set -e
my-background-process &
my-program start
EOT
ENTRYPOINT [""/entrypoint.sh""]
```

----------------------------------------

TITLE: Dockerfile ENTRYPOINT with Explicit SHELL Instruction Workaround
DESCRIPTION: Illustrates another workaround where the SHELL instruction is explicitly defined. This suppresses warnings about using shell form, indicating a conscious decision to leverage shell features, though the executable still runs as a child process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/json-args-recommended.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
FROM alpine
RUN apk add bash
SHELL [""/bin/bash"", ""-c""]
ENTRYPOINT echo ""hello world""
```

----------------------------------------

TITLE: Legacy Key-Value Format Warning Message
DESCRIPTION: The standard warning message displayed when a Dockerfile uses the deprecated space-separated key-value format, advising to switch to the equals-separated format.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#_snippet_0

LANGUAGE: text
CODE:
```
""ENV key=value"" should be used instead of legacy ""ENV key value"" format
```

----------------------------------------

TITLE: Dockerfile ARG Variable Declaration Examples
DESCRIPTION: Illustrates both the deprecated space-separated format and the recommended equals-separated format for declaring build arguments (`ARG`) in a Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ARG foo bar
```

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ARG foo=bar
```

----------------------------------------

TITLE: Dockerfile ENV Multi-Line Variable Declaration Examples
DESCRIPTION: Compares the deprecated space-separated multi-line `ENV` declaration with the recommended equals-separated format, which requires quoting the entire value.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/legacy-key-value-format.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
ENV DEPS \\
    curl \\
    git \\
    make
```

LANGUAGE: dockerfile
CODE:
```
ENV DEPS=\""\\
    curl \\
    git \\
    make\""
```

----------------------------------------

TITLE: Output for deprecated MAINTAINER instruction
DESCRIPTION: This text snippet shows the warning message displayed when the deprecated MAINTAINER instruction is used in a Dockerfile. It indicates that the instruction is no longer recommended.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/maintainer-deprecated.md#_snippet_0

LANGUAGE: text
CODE:
```
MAINTAINER instruction is deprecated in favor of using label
```

----------------------------------------

TITLE: Deprecated MAINTAINER instruction in Dockerfile
DESCRIPTION: This Dockerfile snippet demonstrates the incorrect and deprecated use of the MAINTAINER instruction. It should be replaced with a LABEL for specifying image authors.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/maintainer-deprecated.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
MAINTAINER moby@example.com
```

----------------------------------------

TITLE: Recommended OCI label for Dockerfile author
DESCRIPTION: This Dockerfile snippet shows the correct and recommended way to specify the image author using the org.opencontainers.image.authors OCI label. This replaces the deprecated MAINTAINER instruction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/maintainer-deprecated.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
LABEL org.opencontainers.image.authors=""moby@example.com""
```

----------------------------------------

TITLE: Example Output for Multiple Instruction Rule
DESCRIPTION: Illustrates the warning message or output that indicates multiple instructions of the same type are being used in a Dockerfile stage, and only the last one will be effective.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#_snippet_0

LANGUAGE: text
CODE:
```
Multiple CMD instructions should not be used in the same stage because only the last one will be used
```

----------------------------------------

TITLE: Dockerfile: Incorrect Multiple ENTRYPOINT Instructions
DESCRIPTION: Demonstrates a Dockerfile with multiple `ENTRYPOINT` instructions, which is a bad practice as only the last one will be effective. This violates the rule against duplicate instructions of the same type.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ENTRYPOINT [""echo"", ""Hello, Norway!""]
ENTRYPOINT [""echo"", ""Hello, Sweden!""]
# Only ""Hello, Sweden!"" will be printed
```

----------------------------------------

TITLE: Dockerfile: Correct Single ENTRYPOINT Instruction
DESCRIPTION: Shows the correct way to define a single `ENTRYPOINT` instruction in a Dockerfile, combining multiple commands or outputs into one to adhere to best practices.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ENTRYPOINT [""echo"", ""Hello, Norway!\nHello, Sweden!""]
```

----------------------------------------

TITLE: Dockerfile: Correct Usage of Top-Level CMD and HEALTHCHECK CMD
DESCRIPTION: Illustrates that a top-level `CMD` instruction and a `CMD` instruction within a `HEALTHCHECK` are considered distinct and are both allowed. This example demonstrates a valid Dockerfile configuration where both types of CMD instructions coexist without conflict.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/multiple-instructions-disallowed.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
FROM python:alpine
RUN apk add curl
HEALTHCHECK --interval=1s --timeout=3s \
  CMD [""curl"", ""-f"", ""http://localhost:8080""]
CMD [""python"", ""-m"", ""http.server"", ""8080""]
```

----------------------------------------

TITLE: Example: Output for Empty Dockerfile Continuation Line Error
DESCRIPTION: An example of the warning or error message generated when an empty continuation line is detected in a Dockerfile, indicating a future breaking change.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/no-empty-continuation.md#_snippet_0

LANGUAGE: text
CODE:
```
Empty continuation line found in: RUN apk add     gnupg     curl
```

----------------------------------------

TITLE: Dockerfile: Avoid Empty Continuation Lines
DESCRIPTION: Demonstrates the deprecated use of empty continuation lines in Dockerfiles and provides examples of both problematic and correct syntax. Empty lines following a newline escape will cause build errors in future BuildKit releases. To prevent errors, remove empty lines or add comments.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/no-empty-continuation.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM alpine
RUN apk add \

    gnupg \

    curl
```

LANGUAGE: dockerfile
CODE:
```
FROM alpine
EXPOSE \

80
```

LANGUAGE: dockerfile
CODE:
```
FROM alpine
EXPOSE \
# Port
80
```

----------------------------------------

TITLE: Example Output for Redundant Target Platform Warning
DESCRIPTION: This text snippet shows the warning message generated when the --platform=$TARGETPLATFORM argument is used redundantly in a Dockerfile, indicating that it's unnecessary.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/redundant-target-platform.md#_snippet_0

LANGUAGE: text
CODE:
```
Setting platform to predefined $TARGETPLATFORM in FROM is redundant as this is the default behavior
```

----------------------------------------

TITLE: Dockerfile Example: Redundant --platform=$TARGETPLATFORM Usage
DESCRIPTION: This Dockerfile snippet demonstrates the incorrect practice of explicitly setting --platform=$TARGETPLATFORM. This usage is redundant because $TARGETPLATFORM is the default platform for the base image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/redundant-target-platform.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM --platform=$TARGETPLATFORM alpine AS builder
RUN apk add --no-cache git
```

----------------------------------------

TITLE: Dockerfile Example: Correct Omission of --platform Argument
DESCRIPTION: This Dockerfile snippet shows the recommended way to define a base image without the redundant --platform=$TARGETPLATFORM argument. Omitting it relies on the default behavior, which is to use the target platform.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/redundant-target-platform.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS builder
RUN apk add --no-cache git
```

----------------------------------------

TITLE: Example Error Output for Reserved Stage Name
DESCRIPTION: This snippet shows the error message generated when a reserved word like 'scratch' is used as a stage name in a Dockerfile, indicating it's not allowed.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/reserved-stage-name.md#_snippet_0

LANGUAGE: text
CODE:
```
'scratch' is reserved and should not be used as a stage name
```

----------------------------------------

TITLE: Dockerfile Bad Practice: Using Reserved Stage Names
DESCRIPTION: Illustrates incorrect Dockerfile syntax where 'scratch' and 'context' are used as stage names. These words are reserved and will cause build errors.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/reserved-stage-name.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS scratch
FROM alpine AS context
```

----------------------------------------

TITLE: Dockerfile Good Practice: Using Non-Reserved Stage Name
DESCRIPTION: Demonstrates the correct way to define a stage name in a Dockerfile. 'builder' is a valid, non-reserved name, ensuring the build proceeds without issues.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/reserved-stage-name.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS builder
```

----------------------------------------

TITLE: Example of Sensitive Data Warning Output
DESCRIPTION: This text snippet shows the warning message generated when sensitive data is detected in ARG or ENV commands within a Dockerfile, indicating a security vulnerability.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/secrets-used-in-arg-or-env.md#_snippet_0

LANGUAGE: text
CODE:
```
Potentially sensitive data should not be used in the ARG or ENV commands
```

----------------------------------------

TITLE: Bad Practice: Using ARG for AWS Secret Key in Dockerfile
DESCRIPTION: This Dockerfile snippet demonstrates an insecure practice where AWS_SECRET_ACCESS_KEY is passed using the ARG command. This method is problematic because the secret persists in the final image, making it vulnerable to exposure. It violates the security rule against embedding sensitive data directly in Dockerfile commands like ARG or ENV.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/secrets-used-in-arg-or-env.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM scratch
ARG AWS_SECRET_ACCESS_KEY
```

----------------------------------------

TITLE: Example Output for Stage Name Casing Violation
DESCRIPTION: Illustrates the error message generated when a Dockerfile stage name violates the lowercase rule by containing uppercase characters.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/stage-name-casing.md#_snippet_0

LANGUAGE: text
CODE:
```
Stage name 'BuilderBase' should be lowercase
```

----------------------------------------

TITLE: Incorrect Dockerfile Stage Naming (Uppercase)
DESCRIPTION: Demonstrates a Dockerfile with a stage name that mixes uppercase and lowercase characters, violating the recommended naming convention for stages.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/stage-name-casing.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS BuilderBase
```

----------------------------------------

TITLE: Correct Dockerfile Stage Naming (Lowercase)
DESCRIPTION: Shows a Dockerfile with a stage name that is entirely in lowercase, adhering to the recommended naming convention for stages.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/stage-name-casing.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS builder-base
```

----------------------------------------

TITLE: Example Error Output for Undefined ARG in FROM
DESCRIPTION: Displays the console output when a Dockerfile's FROM instruction attempts to use an undeclared build argument, indicating the specific argument that is not defined.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#_snippet_0

LANGUAGE: text
CODE:
```
FROM argument 'VARIANT' is not declared
```

----------------------------------------

TITLE: Flexible Base Image with Defined ARG in Dockerfile
DESCRIPTION: Demonstrates how to properly define and use a build argument (ARG) within a Dockerfile's FROM instruction to make the base image version flexible. It also includes an example of overriding the ARG during the build process using `docker buildx build`.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
ARG ALPINE_VERSION=3.20

FROM alpine:${ALPINE_VERSION}
```

LANGUAGE: console
CODE:
```
$ docker buildx build --build-arg ALPINE_VERSION=edge .
```

----------------------------------------

TITLE: Incorrect: Undefined ARG Usage in Dockerfile FROM
DESCRIPTION: Illustrates an incorrect usage where a build argument (VARIANT) is used in a FROM instruction without being previously defined. This will lead to a build error because the argument cannot be interpolated.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM node:22${VARIANT} AS jsbuilder
```

----------------------------------------

TITLE: Correct: Defined ARG Usage in Dockerfile FROM
DESCRIPTION: Shows the correct way to define a build argument (VARIANT) before using it in a Dockerfile's FROM instruction. This ensures the argument is properly interpolated, allowing for dynamic base image specifications.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-arg-in-from.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
ARG VARIANT=""-alpine3.20""
FROM node:22${VARIANT} AS jsbuilder
```

----------------------------------------

TITLE: Example Output for Undefined Variable Detection
DESCRIPTION: This snippet shows the typical output message generated when the check identifies an undefined variable in a Dockerfile.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#_snippet_0

LANGUAGE: text
CODE:
```
Usage of undefined variable '$foo'
```

----------------------------------------

TITLE: Dockerfile Typo Detection Example
DESCRIPTION: This Dockerfile snippet demonstrates a common typo where '$PAHT' is used instead of '$PATH'. The check identifies this as an undefined variable, suggesting the likely correction.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM alpine
ENV PATH=$PAHT:/app/bin
```

----------------------------------------

TITLE: Output for Dockerfile Typo Detection
DESCRIPTION: This is the output message produced by the check when it detects a potential typo in a variable name, providing a helpful suggestion.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#_snippet_2

LANGUAGE: text
CODE:
```
Usage of undefined variable '$PAHT' (did you mean $PATH?)
```

----------------------------------------

TITLE: Incorrect Dockerfile: Undefined Build Argument Usage
DESCRIPTION: This example illustrates an incorrect Dockerfile where the build argument '$foo' is used in a COPY instruction without being declared first, leading to an undefined variable error.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#_snippet_3

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS base
COPY $foo .
```

----------------------------------------

TITLE: Correct Dockerfile: Declaring Build Argument Before Use
DESCRIPTION: This example shows the correct approach: the build argument 'foo' is explicitly declared using 'ARG foo' before it is referenced in the COPY instruction, ensuring it is defined.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#_snippet_4

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS base
ARG foo
COPY $foo .
```

----------------------------------------

TITLE: Incorrect Dockerfile: Assigning Undefined Variable to ARG
DESCRIPTION: This snippet demonstrates an incorrect Dockerfile where an ARG instruction attempts to assign the value of an undefined variable '$foo' to 'VERSION'.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#_snippet_5

LANGUAGE: dockerfile
CODE:
```
FROM alpine AS base
ARG VERSION=$foo
```

----------------------------------------

TITLE: Correct Dockerfile: Using Pre-defined Variable from Base Image
DESCRIPTION: This example shows the correct usage where the 'VERSION' build argument is assigned a value from '$PYTHON_VERSION', which is expected to be pre-defined by the 'python' base image.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/undefined-var.md#_snippet_6

LANGUAGE: dockerfile
CODE:
```
FROM python AS base
ARG VERSION=$PYTHON_VERSION
```

----------------------------------------

TITLE: WorkdirRelativePath Rule Output Example
DESCRIPTION: Illustrates the warning message generated by the `WorkdirRelativePath` rule when a relative `WORKDIR` is detected without an initial absolute path.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/workdir-relative-path.md#_snippet_0

LANGUAGE: text
CODE:
```
Relative workdir 'app/src' can have unexpected results if the base image changes
```

----------------------------------------

TITLE: Dockerfile: Incorrect Relative WORKDIR Usage
DESCRIPTION: Demonstrates a Dockerfile using a relative `WORKDIR` path (`usr/share/nginx/html`) without an initial absolute path. This is problematic as it assumes the base image's `WORKDIR` is `/`, leading to potential breakage if the base image changes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/workdir-relative-path.md#_snippet_1

LANGUAGE: dockerfile
CODE:
```
FROM nginx AS web
WORKDIR usr/share/nginx/html
COPY public .
```

----------------------------------------

TITLE: Dockerfile: Correct Absolute WORKDIR Usage
DESCRIPTION: Shows the recommended Dockerfile practice of using an absolute `WORKDIR` path (`/usr/share/nginx/html`). A leading slash ensures the working directory is consistently set, preventing issues caused by base image changes.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/buildkit/frontend/dockerfile/docs/rules/workdir-relative-path.md#_snippet_2

LANGUAGE: dockerfile
CODE:
```
FROM nginx AS web
WORKDIR /usr/share/nginx/html
COPY public .
```

----------------------------------------

TITLE: API Error Response Format
DESCRIPTION: Describes the standard JSON format for error messages returned by the Docker Engine API when an API call fails. The 'message' field provides a human-readable description of the error.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
{
    ""message"": ""page not found""
}
```

----------------------------------------

TITLE: List Docker Containers API Endpoint
DESCRIPTION: Documents the API endpoint for retrieving a list of Docker containers. This endpoint supports various query parameters to filter the results, such as showing all containers, or containers created before a specific ID. The response provides detailed information for each container.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
GET /containers/json

List containers
```

LANGUAGE: HTTP
CODE:
```
GET /v1.24/containers/json?all=1&before=8dfafdbc3a40&size=1 HTTP/1.1
```

LANGUAGE: JSON
CODE:
```
HTTP/1.1 200 OK
Content-Type: application/json

[
     {
             ""Id"": ""8dfafdbc3a40"",
             ""Names"":[""/boring_feynman""],
             ""Image"": ""ubuntu:latest"",
             ""ImageID"": ""d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"",
             ""Command"": ""echo 1"",
             ""Created"": 1367854155,
             ""State"": ""exited"",
             ""Status"": ""Exit 0"",
             ""Ports"": [{""PrivatePort"": 2222, ""PublicPort"": 3333, ""Type"": ""tcp""}],
             ""Labels"": {
                     ""com.example.vendor"": ""Acme"",
                     ""com.example.license"": ""GPL"",
                     ""com.example.version"": ""1.0""
             },
             ""SizeRw"": 12288,
             ""SizeRootFs"": 0,
             ""HostConfig"": {
                     ""NetworkMode"": ""default""
             },
             ""NetworkSettings"": {
                     ""Networks"": {
                             ""bridge"": {
                                      ""IPAMConfig"": null,
                                      ""Links"": null,
                                      ""Aliases"": null,
                                      ""NetworkID"": ""7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"",
                                      ""EndpointID"": ""2cdc4edb1ded3631c81f57966563e5c8525b81121bb3706a9a9a3ae102711f3f"",
                                      ""Gateway"": ""172.17.0.1"",
                                      ""IPAddress"": ""172.17.0.2"",
                                      ""IPPrefixLen"": 16,
                                      ""IPv6Gateway"": """",
                                      ""GlobalIPv6Address"": """",
                                      ""GlobalIPv6PrefixLen"": 0,
                                      ""MacAddress"": ""02:42:ac:11:00:02""
                              }
                     }
             },
             ""Mounts"": [
                     {
                              ""Name"": ""fac362...80535"",
                              ""Source"": ""/data"",
                              ""Destination"": ""/data"",
                              ""Driver"": ""local"",
                              ""Mode"": ""ro,Z"",
                              ""RW"": false,
                              ""Propagation"": """"
                     }
             ]
     },
     {
             ""Id"": ""9cd87474be90"",
             ""Names"":[""/coolName""],
             ""Image"": ""ubuntu:latest"",
             ""ImageID"": ""d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"",
             ""Command"": ""echo 222222"",
             ""Created"": 1367854155,
             ""State"": ""exited"",
             ""Status"": ""Exit 0"",
             ""Ports"": [],
             ""Labels"": {},
             ""SizeRw"": 12288,
             ""SizeRootFs"": 0,
             ""HostConfig"": {
                     ""NetworkMode"": ""default""
             },
             ""NetworkSettings"": {
                     ""Networks"": {
                             ""bridge"": {
                                      ""IPAMConfig"": null,
                                      ""Links"": null,
                                      ""Aliases"": null,
                                      ""NetworkID"": ""7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"",
                                      ""EndpointID"": ""88eaed7b37b38c2a3f0c4bc796494fdf51b270c2d22656412a2ca5d559a64d7a"",
                                      ""Gateway"": ""172.17.0.1"",
                                      ""IPAddress"": ""172.17.0.8"",
                                      ""IPPrefixLen"": 16,
                                      ""IPv6Gateway"": """",
                                      ""GlobalIPv6Address"": """",
                                      ""GlobalIPv6PrefixLen"": 0,
                                      ""MacAddress"": ""02:42:ac:11:00:08""
                              }
                     }
             },
             ""Mounts"": []
     },
     {
             ""Id"": ""3176a2479c92"",
             ""Names"":[""/sleepy_dog""],
             ""Image"": ""ubuntu:latest"",
             ""ImageID"": ""d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"",
             ""Command"": ""echo 3333333333333333"",
             ""Created"": 1367854154,
             ""State"": ""exited"",
             ""Status"": ""Exit 0"",
             ""Ports"":[],
             ""Labels"": {},
             ""SizeRw"":12288,
             ""SizeRootFs"":0,
             ""HostConfig"": {
```

----------------------------------------

TITLE: Example Docker Container List JSON Response
DESCRIPTION: A sample JSON array showing the structure of a Docker API response for listing multiple containers, including their network settings, states, and other metadata. This output is typical for a 'docker ps' or 'docker inspect' command.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#_snippet_2

LANGUAGE: JSON
CODE:
```
[
         {
                 ""Id"": ""4cb07b47f9fb"",
                 ""Names"":[""/running_cat""],
                 ""Image"": ""ubuntu:latest"",
                 ""ImageID"": ""d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"",
                 ""Command"": ""echo 444444444444444444444444444444444"",
                 ""Created"": 1367854152,
                 ""State"": ""exited"",
                 ""Status"": ""Exit 0"",
                 ""Ports"": [],
                 ""Labels"": {},
                 ""SizeRw"": 12288,
                 ""SizeRootFs"": 0,
                 ""HostConfig"": {
                         ""NetworkMode"": ""default""
                 },
                 ""NetworkSettings"": {
                         ""Networks"": {
                                 ""bridge"": {
                                          ""IPAMConfig"": null,
                                          ""Links"": null,
                                          ""Aliases"": null,
                                          ""NetworkID"": ""7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"",
                                          ""EndpointID"": ""8b27c041c30326d59cd6e6f510d4f8d1d570a228466f956edf7815508f78e30d"",
                                          ""Gateway"": ""172.17.0.1"",
                                          ""IPAddress"": ""172.17.0.6"",
                                          ""IPPrefixLen"": 16,
                                          ""IPv6Gateway"": """",
                                          ""GlobalIPv6Address"": """",
                                          ""GlobalIPv6PrefixLen"": 0,
                                          ""MacAddress"": ""02:42:ac:11:00:06""
                                  }
                         }
                 },
                 ""Mounts"": []
         },
         {
                 ""Id"": ""4cb07b47f9fb"",
                 ""Names"":[""/running_cat""],
                 ""Image"": ""ubuntu:latest"",
                 ""ImageID"": ""d74508fb6632491cea586a1fd7d748dfc5274cd6fdfedee309ecdcbc2bf5cb82"",
                 ""Command"": ""echo 444444444444444444444444444444444"",
                 ""Created"": 1367854152,
                 ""State"": ""exited"",
                 ""Status"": ""Exit 0"",
                 ""Ports"": [],
                 ""Labels"": {},
                 ""SizeRw"": 12288,
                 ""SizeRootFs"": 0,
                 ""HostConfig"": {
                         ""NetworkMode"": ""default""
                 },
                 ""NetworkSettings"": {
                         ""Networks"": {
                                 ""bridge"": {
                                          ""IPAMConfig"": null,
                                          ""Links"": null,
                                          ""Aliases"": null,
                                          ""NetworkID"": ""7ea29fc1412292a2d7bba362f9253545fecdfa8ce9a6e37dd10ba8bee7129812"",
                                          ""EndpointID"": ""d91c7b2f0644403d7ef3095985ea0e2370325cd2332ff3a3225c4247328e66e9"",
                                          ""Gateway"": ""172.17.0.1"",
                                          ""IPAddress"": ""172.17.0.5"",
                                          ""IPPrefixLen"": 16,
                                          ""IPv6Gateway"": """",
                                          ""GlobalIPv6Address"": """",
                                          ""GlobalIPv6PrefixLen"": 0,
                                          ""MacAddress"": ""02:42:ac:11:00:05""
                                  }
                         }
                 },
                 ""Mounts"": []
         }
    ]
```

----------------------------------------

TITLE: Docker Container List API Query Parameters and Status Codes
DESCRIPTION: Details the available query parameters for filtering and customizing the Docker container list API, along with the possible HTTP status codes returned by the API.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Query parameters:
- all: boolean (1/True/true or 0/False/false)
  Description: Show all containers. Only running containers are shown by default (i.e., this defaults to false)
- limit: integer
  Description: Show `limit` last created containers, include non-running ones.
- since: string (Id)
  Description: Show only containers created since Id, include non-running ones.
- before: string (Id)
  Description: Show only containers created before Id, include non-running ones.
- size: boolean (1/True/true or 0/False/false)
  Description: Show the containers sizes
- filters: JSON encoded value (map[string][]string)
  Description: A JSON encoded value of the filters to process on the containers list. Available filters:
    - exited: <int> - containers with exit code of <int>
    - status: (created|restarting|running|paused|exited|dead)
    - label: key or ""key=value"" of a container label
    - isolation: (default|process|hyperv) (Windows daemon only)
    - ancestor: (<image-name>[:<tag>] | <image id> | <image@digest>)
    - before: (<container id> | <container name>)
    - since: (<container id> | <container name>)
    - volume: (<volume name> | <mount point destination>)
    - network: (<network id> | <network name>)

Status codes:
- 200: no error
- 400: bad parameter
- 500: server error
```

----------------------------------------

TITLE: Docker Container API: Create Container Endpoint
DESCRIPTION: Defines the HTTP endpoint for creating a new Docker container. This is a POST request to the /containers/create path, used to initiate the container provisioning process.
SOURCE: https://github.com/docker/docs/blob/main/_vendor/github.com/moby/moby/docs/api/v1.24.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
POST /containers/create
```","docker",""