"nextjs","TITLE: Bootstrap Next.js App with Context API Example
DESCRIPTION: These commands initialize a new Next.js project using the `create-next-app` utility, specifically cloning the 'with-context-api' example. This sets up a ready-to-use application demonstrating React Context API patterns, allowing users to quickly get started with the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-context-api/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-context-api with-context-api-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-context-api with-context-api-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-context-api with-context-api-app
```

----------------------------------------

TITLE: Initialize Next.js project with API routes middleware example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the API routes middleware example using `create-next-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-middleware/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-middleware api-routes-middleware-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-middleware api-routes-middleware-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-middleware api-routes-middleware-app
```

----------------------------------------

TITLE: Create a basic GET Route Handler
DESCRIPTION: Demonstrates how to create a simple GET request handler in Next.js Route Handlers, returning a JSON response. This is a fundamental example for setting up an API endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

LANGUAGE: js
CODE:
```
export async function GET() {
  return Response.json({ message: 'Hello World' })
}
```

----------------------------------------

TITLE: Initialize Next.js Project with API Routes REST Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application pre-configured with the 'api-routes-rest' example. You can choose your preferred package manager: npm (via npx), Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-rest/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-rest api-routes-rest-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-rest api-routes-rest-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-rest api-routes-rest-app
```

----------------------------------------

TITLE: Configure Umbraco Delivery API in appsettings.json
DESCRIPTION: This JSON snippet shows how to enable and optionally configure an API key for the Umbraco Delivery API within the `appsettings.json` file. The Delivery API serves as the data source for the blog, and the API key is crucial for preview functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_4

LANGUAGE: json
CODE:
```
  ""Umbraco"": {
    ""CMS"": {
      ""DeliveryApi"": {
        ""Enabled"": true,
        ""ApiKey"": ""my-secret-api-key""
      },
      ....

```

----------------------------------------

TITLE: Initialize Next.js Project with API Route Example
DESCRIPTION: This command initializes a new Next.js project using `create-next-app` and automatically sets up an example `route.ts` file in the `app/` folder, demonstrating how to create an API endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --api
```

----------------------------------------

TITLE: Create Builder.io Space and Get API Key
DESCRIPTION: Navigates into the project directory and uses the Builder.io CLI to create a new space. This command requires a private key and a desired space name, and it outputs the public API key needed for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cd cms-builder-io-app
builder create -k [private-key] -n [space-name] -d
```

----------------------------------------

TITLE: Initializing Next.js Project with an Example (CLI)
DESCRIPTION: This snippet demonstrates how to initialize a Next.js project using a specific example from the official Next.js examples collection. The `--example` flag allows users to bootstrap their application with pre-configured setups, such as `route-handlers`, accelerating development by providing a functional starting point.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app --example route-handlers
```

----------------------------------------

TITLE: Initialize Next.js Project with Xata Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application pre-configured with the Xata example using `create-next-app` via npm, Yarn, or pnpm. This sets up the basic project structure and dependencies, providing a ready-to-use starting point for your project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xata/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npx create-next-app --example with-xata with-xata-app
```

LANGUAGE: sh
CODE:
```
yarn create next-app --example with-xata with-xata-app
```

LANGUAGE: sh
CODE:
```
pnpm create next-app --example with-xata with-xata-app
```

----------------------------------------

TITLE: Tigris Next.js Todo App API Endpoints
DESCRIPTION: Documentation for the RESTful API endpoints exposed by the Next.js application for managing todo items. These endpoints provide functionality for listing, adding, searching, fetching by ID, updating, and deleting todo items.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
GET /api/items
  - Description: Retrieves an array of all todo items.
  - Returns: Array<TodoItem>

POST /api/items
  - Description: Adds a new todo item to the list.
  - Parameters: Request body containing the new todo item data.

GET /api/items/search?q=query
  - Description: Finds and returns todo items matching the given query string.
  - Parameters:
    - q (query): The search query string.

GET /api/item/{id}
  - Description: Fetches a single todo item by its unique identifier.
  - Parameters:
    - id (path): The unique ID of the todo item.

PUT /api/item/{id}
  - Description: Updates an existing todo item identified by its ID.
  - Parameters:
    - id (path): The unique ID of the todo item to update.
    - Request body containing the updated todo item data.

DELETE /api/item/[id]
  - Description: Deletes a todo item identified by its ID.
  - Parameters:
    - id (path): The unique ID of the todo item to delete.
```

----------------------------------------

TITLE: Create Next.js App with GraphQL Example
DESCRIPTION: These commands bootstrap a new Next.js application pre-configured with the GraphQL API routes example. Users can choose their preferred package manager (npm, Yarn, or pnpm) to initialize the project, which includes the necessary setup for a GraphQL server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-graphql/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-graphql api-routes-graphql-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-graphql api-routes-graphql-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-graphql api-routes-graphql-app
```

----------------------------------------

TITLE: Vercel Template Deployment API Reference
DESCRIPTION: This API documentation describes the parameters used to initiate a Vercel project deployment directly from a template URL. It allows pre-configuration of the source repository, project names, and required environment variables, streamlining the deployment process for users.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Vercel Template Deployment API:

Method: GET
Endpoint: https://vercel.com/new/clone

Description: Initiates a new project deployment on Vercel by cloning a specified GitHub repository and pre-configuring project settings and environment variables.

Parameters:
  - repository-url (string, required): The URL of the GitHub repository to clone.
    Example: https://github.com/vercel/next.js/tree/canary/examples/cms-prepr
  - project-name (string, optional): The desired name for the new project on Vercel.
    Example: cms-prepr
  - repository-name (string, optional): The desired name for the new repository on Vercel, if a new one is created.
    Example: cms-prepr
  - env (string, optional): A comma-separated list of environment variable names that should be prompted for during deployment.
    Example: PREPRIO_API,PREPRIO_PRODUCTION_TOKEN,PREPRIO_PREVIEW_TOKEN,PREPRIO_PREVIEW_SECRET
  - envDescription (string, optional): A description for the environment variables, displayed to the user.
    Example: Required to connect the app with Prepr
  - envLink (string, optional): A URL providing more information about the environment variables.
    Example: https://vercel.link/cms-prepr-env

Usage Example (Full URL):
https://vercel.com/new/clone?repository-url=https://github.com/vercel/next.js/tree/canary/examples/cms-prepr&project-name=cms-prepr&repository-name=cms-prepr&env=PREPRIO_API,PREPRIO_PRODUCTION_TOKEN,PREPRIO_PREVIEW_TOKEN,PREPRIO_PREVIEW_SECRET&envDescription=Required%20to%20connect%20the%20app%20with%20Prepr&envLink=https://vercel.link/cms-prepr-env
```

----------------------------------------

TITLE: Bootstrap Next.js API Routes CORS Example Application
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the API routes CORS example. You can choose your preferred package manager among npm, Yarn, or pnpm to set up the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-cors/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-cors api-routes-cors-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-cors api-routes-cors-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-cors api-routes-cors-app
```

----------------------------------------

TITLE: Next.js Documentation Related Links Metadata API
DESCRIPTION: Defines the structure and available fields for configuring related links in Next.js documentation pages. This metadata is used to generate 'Next Steps' cards, guiding users to relevant content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_17

LANGUAGE: APIDOC
CODE:
```
Related Links Metadata Fields:

related:
  - description: Defines the overall section for related links.
  - Fields:
    - title:
        Type: string
        Required: Optional
        Description: The title of the card list. Defaults to ""Next Steps"".
    - description:
        Type: string
        Required: Optional
        Description: The description of the card list.
    - links:
        Type: array of strings
        Required: Required
        Description: A list of relative URL paths to other documentation pages (e.g., ""app/api-reference/file-conventions/page"").
```

----------------------------------------

TITLE: Next.js Docs File System Routing Examples
DESCRIPTION: Illustrates how Next.js documentation uses file-system routing to define URL paths and navigation. It shows examples of both default alphabetical sorting and custom sorting achieved by prepending two-digit numbers to file or folder names, allowing for a logical learning progression.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_1

LANGUAGE: txt
CODE:
```
04-functions
├── after.mdx
├── cacheLife.mdx
├── cacheTag.mdx
└── ...
```

LANGUAGE: txt
CODE:
```
01-routing
├── 01-defining-routes.mdx
├── 02-pages.mdx
├── 03-layouts-and-templates.mdx
└── ...
```

----------------------------------------

TITLE: Bootstrap Next.js GraphQL Hooks Example
DESCRIPTION: Instructions to initialize a new Next.js application pre-configured with the GraphQL Hooks example using various package managers. This command sets up the project structure and dependencies, allowing users to quickly get started with the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-hooks/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-graphql-hooks with-graphql-hooks-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-graphql-hooks with-graphql-hooks-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-graphql-hooks with-graphql-hooks-app
```

----------------------------------------

TITLE: Blog Application REST API Endpoints
DESCRIPTION: Documentation for the RESTful API endpoints of the blog application, including methods, paths, and expected request body structures for creating, updating, publishing, and deleting posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
POST /api/post
  - Create a new post
  - Body: {title: string; content: string; authorName: string}
PATCH /api/post/:id
  - Update a post by id
  - Body: {title?: string; content?: string;}
PUT /api/publish/:id
  - Publish a post by id
DELETE /api/post/:id
  - Delete a post by id
```

----------------------------------------

TITLE: Next.js Preview Mode API Endpoint
DESCRIPTION: This API endpoint is used to enable Next.js Preview Mode, allowing users to view draft content. It requires a secret for authentication and the slug of the post to be previewed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
http://localhost:3000/api/preview?secret=<secret>&slug=draft

Parameters:
  <secret>: The string configured for PREVIEW_API_SECRET in your environment variables.
  <slug>: The unique identifier (slug) of the post you wish to preview.
```

----------------------------------------

TITLE: Bootstrap Next.js App Router WordPress Example
DESCRIPTION: Instructions on how to initialize a new Next.js project using the 'cms-wordpress' example. This command clones the example repository and sets up a local development environment, allowing users to quickly get started with the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-wordpress cms-wordpress-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-wordpress cms-wordpress-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-wordpress cms-wordpress-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example cms-wordpress cms-wordpress-app
```

----------------------------------------

TITLE: Bootstrap Next.js App with api.video Example
DESCRIPTION: Instructions to initialize a new Next.js project using the 'with-apivideo' example template. This snippet shows how to set up the project structure using different package managers: npx, yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-apivideo with-apivideo-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-apivideo with-apivideo-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-apivideo with-apivideo-app
```

----------------------------------------

TITLE: Manual Testing of Next.js Preview API Route
DESCRIPTION: This JavaScript example provides a complete API route (`pages/api/preview.js`) designed for manual testing of Next.js Preview Mode. It sets the necessary preview cookies and sends a confirmation message, allowing developers to verify the cookie setting and preview mode activation directly from their browser's developer tools.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_1

LANGUAGE: javascript
CODE:
```
// simple example for testing it manually from your browser.
export default function handler(req, res) {
  res.setPreviewData({})
  res.end('Preview mode enabled')
}
```

----------------------------------------

TITLE: Next.js Umbraco Preview Mode API Endpoints
DESCRIPTION: API endpoints for enabling and disabling Preview Mode in a Next.js application integrated with Umbraco. Preview mode allows developers to view unpublished content changes directly from the Umbraco CMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Enable Preview Mode:
GET /api/preview?secret=<secret>
  - Description: Activates Next.js Preview Mode to display unpublished content from Umbraco.
  - Parameters:
    - secret (string, required): The UMBRACO_PREVIEW_SECRET configured in .env.local.
  - Usage Example: http://localhost:3000/api/preview?secret=my-preview-secret

Exit Preview Mode:
GET /api/exit-preview
  - Description: Deactivates Next.js Preview Mode, returning to the view of published content.
  - Parameters: None
  - Usage Example: http://localhost:3000/api/exit-preview
```

----------------------------------------

TITLE: Next.js Docs Shared Page Content Source Example
DESCRIPTION: Shows an example of an MDX file designed to serve as a central source for shared content within Next.js documentation. This approach prevents content duplication and ensures consistency by allowing other pages to pull content from this single, authoritative location.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_4

LANGUAGE: mdx
CODE:
```
---
title: <Link>
description: API reference for the <Link> component.
---

This API reference will help you understand how to use the props
and configuration options available for the Link Component.
```

----------------------------------------

TITLE: Project File Structure Overview
DESCRIPTION: This snippet illustrates the directory and file organization of the Next.js Tigris example application, highlighting key folders like `lib`, `db`, and `pages` which contain Tigris client configuration, database models, and API routes respectively.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#_snippet_7

LANGUAGE: text
CODE:
```
├── package.json
├── lib
│   ├── tigris.ts
├── db
│   └── models
│       └── todoItems.ts
└── pages
    ├── index.tsx
    └── api
        ├── item
        │   ├── [id].ts
        └── items
            ├── index.ts
            └── search.ts
```

----------------------------------------

TITLE: Bootstrap Next.js Image Component Example Project
DESCRIPTION: These commands initialize a new Next.js application pre-configured with the image component example. They use `create-next-app` with different package managers (npm, Yarn, pnpm) to set up the project structure and dependencies, allowing users to quickly get started with the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/image-component/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example image-component image-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example image-component image-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example image-component image-app
```

----------------------------------------

TITLE: Configure Next.js Preview Mode API Endpoint
DESCRIPTION: Describes the URL format for activating Next.js preview mode, including required parameters for authentication and content identification. This endpoint allows developers to view draft content before publishing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
GET /api/preview
  - Description: Activates Next.js preview mode for a specific content slug.
  - Parameters:
    - secret: <YOUR_SECRET_TOKEN> (string, required) - A secret token matching the one defined in .env.local for authentication.
    - slug: <SLUG_TO_PREVIEW> (string, required) - The slug of the content (e.g., a post) to be previewed.
  - Usage Example:
    http://localhost:3000/api/preview?secret=<YOUR_SECRET_TOKEN>&slug=<SLUG_TO_PREVIEW>
  - Notes:
    - To exit preview mode, a dedicated UI element is typically provided (e.g., ""Click here to exit preview mode"").
    - Requires prior configuration of the secret token in the application's environment variables.
```

----------------------------------------

TITLE: Bootstrap Next.js Prefetching Example App
DESCRIPTION: These commands initialize a new Next.js application using the 'with-prefetching' example. They set up the project structure and dependencies, allowing users to quickly get started with a pre-configured Next.js app demonstrating page prefetching. Choose your preferred package manager (npm, Yarn, or pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-prefetching/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-prefetching with-prefetching-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-prefetching with-prefetching-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-prefetching with-prefetching-app
```

----------------------------------------

TITLE: Implement Next.js Catch-all API Route
DESCRIPTION: Demonstrates creating a catch-all API route (`[...slug]`) in Next.js. This route captures all dynamic path segments into a `slug` array within `req.query`, allowing for flexible routing. The example shows how to access and use these parameters to generate a response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_17

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { slug } = req.query
  res.end(`Post: ${slug.join(', ')}`)
}
```

LANGUAGE: JavaScript
CODE:
```
export default function handler(req, res) {
  const { slug } = req.query
  res.end(`Post: ${slug.join(', ')}`)
}
```

----------------------------------------

TITLE: Configure Agility CMS API Keys in .env.local
DESCRIPTION: Defines the necessary environment variables for connecting a Next.js application to Agility CMS. These variables include the instance GUID, live and preview API keys, and a security key for preview mode validation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
AGILITY_CMS_GUID=...
AGILITY_CMS_API_FETCH_KEY=...
AGILITY_CMS_API_PREVIEW_KEY=...
AGILITY_CMS_SECURITY_KEY=...
```

----------------------------------------

TITLE: Initialize Next.js Drupal Example Project
DESCRIPTION: These commands show how to quickly set up a new Next.js application pre-configured with the `cms-drupal` example. They utilize `create-next-app` with different package managers (npm, Yarn, pnpm) to bootstrap the project, providing a ready-to-use starting point for a decoupled Drupal and Next.js blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-drupal/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-drupal cms-drupal-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-drupal cms-drupal-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-drupal cms-drupal-app
```

----------------------------------------

TITLE: Bootstrap Next.js i18n Example Application
DESCRIPTION: These commands initialize a new Next.js application using the `with-i18n-next-intl` example template. They set up the project structure and dependencies for an internationalized Next.js app, demonstrating how to quickly get started with `next-intl` using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-next-intl/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-i18n-next-intl with-i18n-next-intl-app
```

----------------------------------------

TITLE: Bootstrap Next.js Elasticsearch Example Application
DESCRIPTION: These commands initialize a new Next.js project using the 'with-elasticsearch' example. They set up the basic project structure and dependencies required to start development, supporting npm, Yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-elasticsearch with-elasticsearch-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-elasticsearch with-elasticsearch-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-elasticsearch with-elasticsearch-app
```

----------------------------------------

TITLE: Bootstrap Next.js Kontent.ai Blog Example
DESCRIPTION: Instructions to initialize the Next.js application using `create-next-app` with npm, Yarn, or pnpm, leveraging the `cms-kontent-ai` example. This sets up the basic project structure for the blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-kontent-ai cms-kontent-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-kontent-ai cms-kontent-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-kontent-ai cms-kontent-app
```

----------------------------------------

TITLE: Implement Dynamic Next.js API Routes
DESCRIPTION: Demonstrates how to create dynamic API routes in Next.js, allowing parts of the URL to be captured as parameters. This example shows how to define a dynamic route using bracket notation in the filename (e.g., `[pid].ts`) and access the captured parameter via `req.query`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const { pid } = req.query
  res.end(`Post: ${pid}`)
}
```

LANGUAGE: JavaScript
CODE:
```
export default function handler(req, res) {
  const { pid } = req.query
  res.end(`Post: ${pid}`)
}
```

----------------------------------------

TITLE: Configure and Populate TakeShape CMS for Next.js Blog
DESCRIPTION: Comprehensive guide for setting up the TakeShape CMS, including creating a new project, defining content models for 'Author' and 'Post' with their respective fields and relationships, and populating these models with initial data for a Next.js blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
TakeShape CMS Configuration and Content Management:

1. Create TakeShape Account and Project:
   - Create an account on TakeShape.
   - Create a new 'Blank Project' from the dashboard.

2. Define 'Author' Content Type:
   - From project settings, create a new content type with title 'Author'.
   - Add 'Single Line' widget titled 'Name'.
   - Add 'Asset' widget titled 'Picture'.
   - Click ""Create Content Type"".

3. Define 'Post' Content Type:
   - Add another content type with title 'Post'.
   - Add 'Single Line' widget titled 'Title'.
   - Add 'Markdown' widget titled 'Content'.
   - Add 'Single Line' widget titled 'Excerpt'.
   - Add 'Asset' widget titled 'Cover Image'.
   - Add 'Date' widget titled 'Date'.
   - Add 'Single Line' widget titled 'Slug'.
   - Add 'Relationship' widget titled 'Author':
     - Set 'Relationship Type' to 'Single'.
     - Check 'Author' checkbox under 'Allowed Content Types'.
   - Click ""Create Content Type"".

4. Populate Content:

   a. Populate 'Author' Records:
      - Select 'Author' and create 1 new record.
      - Use dummy data for text fields.
      - Download an image from Unsplash for 'Picture'.
      - Set 'Workflow Status' to 'Enabled'.

   b. Populate 'Post' Records:
      - Select 'Post' and create at least 2 new records.
      - Use dummy data for text fields.
      - Write markdown for 'Content' field.
      - Download images from Unsplash for 'Cover Image'.
      - Pick the 'Author' created earlier.
      - Set 'Workflow Status' to 'Enabled'.
```

----------------------------------------

TITLE: Example .env.local Configuration for Sanity
DESCRIPTION: This snippet shows an example `.env.local` file with essential environment variables for a Next.js and Sanity project. It includes the Sanity Project ID, Dataset name, and a read token for API access and live preview.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_10

LANGUAGE: plaintext
CODE:
```
NEXT_PUBLIC_SANITY_PROJECT_ID=""r0z1eifg""
NEXT_PUBLIC_SANITY_DATASET=""blog-vercel""
SANITY_API_READ_TOKEN=""sk...""
```

----------------------------------------

TITLE: Configure Kontent.ai Environment Variables
DESCRIPTION: Defines the essential environment variables required for connecting the Next.js application to Kontent.ai, including the project ID, preview API key, and a secret for Next.js's built-in preview mode functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
KONTENT_PROJECT_ID: Project ID from Kontent.ai Project settings > API keys
KONTENT_PREVIEW_API_KEY: Preview API key from Kontent.ai Project settings > API keys
KONTENT_PREVIEW_SECRET: Any random string (e.g., MY_SECRET) for Next.js Preview Mode
```

----------------------------------------

TITLE: Bootstrap Next.js Apollo Server Example with create-next-app
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `create-next-app` utility, specifically bootstrapping it with the `api-routes-apollo-server` example. This sets up a project ready for local development and deployment, using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-apollo-server api-routes-apollo-server-app
```

----------------------------------------

TITLE: Next.js Docs Shared Page Content Target Example
DESCRIPTION: Illustrates how a Next.js documentation page consumes content from a shared source using the `source` metadata field. This mechanism allows content to be written once and reused across multiple sections, such as the App and Pages Router docs, minimizing duplication and maintenance effort.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_5

LANGUAGE: mdx
CODE:
```
---
title: <Link>
description: API reference for the <Link> component.
source: app/api-reference/components/link
---

{/* DO NOT EDIT THIS PAGE. */}
{/* The content of this page is pulled from the source above. */}
```

----------------------------------------

TITLE: Bootstrap Next.js Unsplash Example Project
DESCRIPTION: Commands to initialize a new Next.js project using the `create-next-app` utility with the `with-unsplash` example template, supporting `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-unsplash with-unsplash-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-unsplash with-unsplash-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-unsplash with-unsplash-app
```

----------------------------------------

TITLE: Bootstrap Next.js Project with MSW Example
DESCRIPTION: These commands utilize `create-next-app` to quickly set up a new Next.js project pre-configured with the Mock Service Worker example. This allows developers to rapidly start working with a functional API mocking setup. Choose the command corresponding to your preferred package manager (npm, Yarn, or pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-msw/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-msw with-msw-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-msw with-msw-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-msw with-msw-app
```

----------------------------------------

TITLE: Import Kontent.ai Content Models and Data
DESCRIPTION: Commands to install the Kontent.ai Backup Manager globally via npm and then use it to restore content models and data from a specified zip file into a Kontent.ai project. This process requires a Kontent.ai Management API key and Project ID.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm i -g @kontent-ai/backup-manager
kbm --action=restore --apiKey=<Management API key> --projectId=<Project ID> --zipFilename=kontent-ai-backup
```

----------------------------------------

TITLE: Next.js Draft Mode API Endpoints
DESCRIPTION: These API endpoints manage the Draft Mode functionality in a Next.js application integrated with Contentful. They allow for previewing unpublished content and manually exiting the draft state, enhancing the content editing workflow.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
GET /api/draft?secret=<CONTENTFUL_PREVIEW_SECRET>&slug={entry.fields.slug}
  - Purpose: Enables Draft Mode for a specific Contentful entry.
  - Parameters:
    - secret: (string) The CONTENTFUL_PREVIEW_SECRET from .env.local, used for authentication.
    - slug: (string) The slug field of the Contentful entry to preview.
  - Usage: Configured in Contentful's content preview settings to generate preview URLs.

GET /api/disable-draft
  - Purpose: Disables Draft Mode.
  - Usage: Navigate to this URL in the browser to manually exit Draft Mode, clearing the draft state.
```

----------------------------------------

TITLE: Bootstrap Next.js Builder.io Example Project
DESCRIPTION: Commands to initialize a new Next.js project based on the `cms-builder-io` example using `npx`, `yarn`, or `pnpm`. This sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-builder-io cms-builder-io-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-builder-io cms-builder-io-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-builder-io cms-builder-io-app
```

----------------------------------------

TITLE: Registering Posts Sitemap REST API Route (PHP)
DESCRIPTION: This snippet registers a WordPress REST API endpoint for retrieving post sitemap data. It defines the route `sitemap/v1/posts` with a GET method, which calls the `wsra_generate_posts_api` function to handle the request and return the post URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_16

LANGUAGE: PHP
CODE:
```
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/posts', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_posts_api',
  ));
});
```

----------------------------------------

TITLE: Registering Taxonomy Sitemap REST API Route (PHP)
DESCRIPTION: This snippet registers a WordPress REST API endpoint for retrieving taxonomy sitemap data. It defines the route `sitemap/v1/taxonomy` with a GET method, which calls the `wsra_generate_taxonomy_api` function to handle the request and return the taxonomy URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_17

LANGUAGE: PHP
CODE:
```
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/taxonomy', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_taxonomy_api',
  ));
});
```

----------------------------------------

TITLE: Bootstrap Next.js Project with React Remove Properties Example
DESCRIPTION: These commands initialize a new Next.js application using the `create-next-app` utility, specifically cloning the `react-remove-properties` example. This sets up the project structure and dependencies, allowing users to quickly get started with the pre-configured example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/react-remove-properties/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example react-remove-properties react-remove-properties-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example react-remove-properties react-remove-properties-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example react-remove-properties react-remove-properties-app
```

----------------------------------------

TITLE: Configure Makeswift API Keys
DESCRIPTION: Instructions to rename the example environment file (`.env.local.example` to `.env.local`) and update it with your Makeswift API host and site API key for proper integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_2

LANGUAGE: diff
CODE:
```
-- MAKESWIFT_API_HOST=
-- MAKESWIFT_SITE_API_KEY=
++ MAKESWIFT_API_HOST=https://api.makeswift.com
++ MAKESWIFT_SITE_API_KEY=<YOUR_MAKESWIFT_SITE_API_KEY>
```

----------------------------------------

TITLE: Initialize Next.js Project with Neo4j Example
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application pre-configured with the Neo4j example. It provides commands for npx, yarn, and pnpm to create the project directory and fetch the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-neo4j with-neo4j-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-neo4j with-neo4j-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-neo4j with-neo4j-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to install project dependencies and start the Next.js development server, making the blog accessible locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: Bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Create Next.js App from Public GitHub Example
DESCRIPTION: Demonstrates how to initialize a Next.js project by directly referencing an example from any public GitHub repository URL. This provides flexibility for using community-contributed examples or custom templates hosted on GitHub.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_4

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example ""https://github.com/.../"" [your-project-name]
```

----------------------------------------

TITLE: Prepare Local Environment Variables for Unsplash API
DESCRIPTION: Copies the example environment variable file (`.env.local.example`) to `.env.local` to configure Unsplash API keys locally, ensuring it's ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Registering Author Sitemap REST API Route (PHP)
DESCRIPTION: This snippet registers a WordPress REST API endpoint for retrieving author sitemap data. It defines the route `sitemap/v1/author` with a GET method, which calls the `wsra_generate_author_api` function to handle the request and return the author URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_18

LANGUAGE: PHP
CODE:
```
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/author', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_author_api',
  ));
});
```

----------------------------------------

TITLE: Caching a GET Route Handler in JavaScript
DESCRIPTION: This example shows how to enable caching for a GET Route Handler by setting `export const dynamic = 'force-static'`. The handler fetches data from an external API and returns it as JSON, demonstrating how to make a static data fetch within a cached route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

----------------------------------------

TITLE: Parse User Input for WordPress API Queries
DESCRIPTION: Parses `GET` parameters (`pageNo`, `perPage`, `taxonomyType`, `postType`) from the URL to construct arguments for WordPress queries. It sets default values for pagination and post type, preparing data for custom API endpoints that fetch posts or users.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_9

LANGUAGE: php
CODE:
```
<?php
function wsra_get_user_inputs()
{
  $pageNo = sprintf(""%d"", $_GET['pageNo']);
  $perPage = sprintf(""%d"", $_GET['perPage']);
  // Check for array key taxonomyType
  if (array_key_exists('taxonomyType', $_GET)) {
    $taxonomy = $_GET['taxonomyType'];
  } else {
    $taxonomy = 'category';
  }
  $postType = $_GET['postType'];
  $paged = $pageNo ? $pageNo : 1;
  $perPage = $perPage ? $perPage : 100;
  $offset = ($paged - 1) * $perPage;
  $args = array(
    'number' => $perPage,
    'offset' => $offset,
  );
  $postArgs = array(
    'posts_per_page' => $perPage,
    'post_type' => strval($postType ? $postType : 'post'),
    'paged' => $paged,
  );

  return [$args, $postArgs, $taxonomy];
}
```

----------------------------------------

TITLE: Update Next.js Middleware Cookies API
DESCRIPTION: This snippet demonstrates the migration of the Next.js Cookies API from direct methods on `NextResponse` (e.g., `response.cookie()`, `response.clearCookie()`) to a new `cookies` instance with `set`, `delete`, and `getWithOptions` methods. This change aligns the API more closely with a `get`/`set` model and extends `Map` functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  // create an instance of the class to access the public methods. This uses `next()`,
  // you could use `redirect()` or `rewrite()` as well
  let response = NextResponse.next()
  // get the cookies from the request
  let cookieFromRequest = request.cookies['my-cookie']
  // set the `cookie`
  response.cookie('hello', 'world')
  // set the `cookie` with options
  const cookieWithOptions = response.cookie('hello', 'world', {
    path: '/',
    maxAge: 1000 * 60 * 60 * 24 * 7,
    httpOnly: true,
    sameSite: 'strict',
    domain: 'example.com',
  })
  // clear the `cookie`
  response.clearCookie('hello')

  return response
}
```

LANGUAGE: typescript
CODE:
```
export function middleware() {
  const response = new NextResponse()

  // set a cookie
  response.cookies.set('vercel', 'fast')

  // set another cookie with options
  response.cookies.set('nextjs', 'awesome', { path: '/test' })

  // get all the details of a cookie
  const { value, ...options } = response.cookies.getWithOptions('vercel')
  console.log(value) // => 'fast'
  console.log(options) // => { name: 'vercel', Path: '/test' }

  // deleting a cookie will mark it as expired
  response.cookies.delete('vercel')

  return response
}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Installs project dependencies and starts the Next.js development server. This allows you to view the application locally, typically at `http://localhost:3000`, for development and testing purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Copy example environment variables file
DESCRIPTION: Command to duplicate the example environment configuration file (.env.local.example) to .env.local. This file will contain sensitive API keys and tokens required to connect the application with GraphCMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Direct Streaming with Web APIs in Next.js Route Handlers
DESCRIPTION: This example illustrates how to implement server-side streaming directly using native Web APIs like `ReadableStream` and `TextEncoder` in a Next.js Route Handler. It defines helper functions to convert an async iterator to a stream and simulate delays, then generates a stream of HTML paragraphs. The `GET` handler returns a `Response` object with the created stream.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_15

LANGUAGE: TypeScript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator: any) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    }
  })
}

function sleep(time: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

LANGUAGE: JavaScript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    }
  })
}

function sleep(time) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

----------------------------------------

TITLE: Configure Kontent.ai Preview URL for Post Content Type
DESCRIPTION: Sets up a preview URL in Kontent.ai for the 'Post' content type, enabling draft content to be viewed in the Next.js application's preview mode. This URL includes a secret and a slug placeholder.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
http://localhost:3000/api/preview?secret=<KONTENT_PREVIEW_SECRET>&slug={URLslug}
```

----------------------------------------

TITLE: Registering Total Pages Sitemap REST API Route (PHP)
DESCRIPTION: This snippet registers a WordPress REST API endpoint for retrieving total page counts for various content types. It defines the route `sitemap/v1/totalpages` with a GET method, which calls the `wsra_generate_totalpages_api` function to handle the request and return the aggregated counts.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_19

LANGUAGE: PHP
CODE:
```
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/totalpages', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_totalpages_api',
  ));
});
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Meilisearch Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using the `create-next-app` utility, pre-configured with the `with-meilisearch` example. This allows for quick setup of a Next.js application integrated with Meilisearch and InstantSearch.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-meilisearch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-meilisearch with-meilisearch-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-meilisearch with-meilisearch-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-meilisearch with-meilisearch-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example with-meilisearch with-meilisearch-app
```

----------------------------------------

TITLE: WordPress Sitemap REST API Endpoints Registration
DESCRIPTION: This section registers custom REST API endpoints under the `sitemap/v1` namespace within WordPress. Each endpoint is configured to use a GET method and is linked to a specific PHP callback function responsible for generating the relevant sitemap data (posts, taxonomies, authors, or total page counts). These registrations make the sitemap data accessible via the WordPress REST API.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/posts', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_posts_api',
  ));
});

GET /sitemap/v1/posts
  - Description: Retrieves a list of post URLs and their last modified dates.
  - Parameters: None (parameters are handled internally by wsra_get_user_inputs() if applicable).
  - Returns: Array of objects, each with 'url' (string) and 'post_modified_date' (string).

add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/taxonomy', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_taxonomy_api',
  ));
});

GET /sitemap/v1/taxonomy
  - Description: Retrieves a list of taxonomy (tags or categories) URLs.
  - Parameters: None (parameters are handled internally by wsra_get_user_inputs() if applicable).
  - Returns: Array of objects, each with 'url' (string).

add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/author', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_author_api',
  ));
});

GET /sitemap/v1/author
  - Description: Retrieves a list of author URLs.
  - Parameters: None.
  - Returns: Array of objects, each with 'url' (string).

add_action('rest_api_init', function () {
  register_rest_route('sitemap/v1', '/totalpages', array(
    'methods' => 'GET',
    'callback' => 'wsra_generate_totalpages_api',
  ));
});

GET /sitemap/v1/totalpages
  - Description: Retrieves total counts for various content types (categories, tags, users, post types).
  - Parameters: None.
  - Returns: Object with counts, e.g., {""category"": 10, ""tag"": 5, ""user"": 2, ""post"": 100, ""page"": 20, ...}.
```

----------------------------------------

TITLE: Next.js Preview Mode API Endpoint Usage
DESCRIPTION: This describes the API endpoint used to enable Next.js preview mode, allowing users to view draft content. It requires a `secret` for authentication and a `slug` to identify the content to preview.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
http://localhost:3000/api/preview?secret=<secret>&slug=<slug>
  - Description: Enables Next.js preview mode for draft content.
  - Parameters:
    - secret: string (required) - The string configured for STORYBLOK_PREVIEW_SECRET.
    - slug: string (required) - The slug of the post to preview.
  - Returns: Activates preview mode in the browser session.
  - Usage Example: http://localhost:3000/api/preview?secret=MY_SECRET&slug=my-draft-post
```

----------------------------------------

TITLE: NextResponse.json API Reference
DESCRIPTION: API documentation for `NextResponse.json()`, a static method to create a JSON response with a specified body and optional status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
NextResponse.json(body: object, options?: { status?: number, statusText?: string, headers?: HeadersInit }): NextResponse
  - Produces a response with the given JSON body.
  - Parameters:
    - body: The JavaScript object to be converted to JSON.
    - options (optional): An object to configure the response, including:
      - status: The HTTP status code (e.g., 200, 500).
      - statusText: The HTTP status text.
      - headers: Custom HTTP headers.
  - Returns: A NextResponse object with the JSON body.
```

----------------------------------------

TITLE: Example Next.js Preview Mode Access URL
DESCRIPTION: Provides a sample URL structure for accessing the Next.js preview API route, including placeholders for your site's domain, a secret token for authentication, and the content's slug or path.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_6

LANGUAGE: bash
CODE:
```
https://<your-site>/api/preview?secret=<token>&slug=<path>
```

----------------------------------------

TITLE: Cache a GET Route Handler in Next.js App Router
DESCRIPTION: Demonstrates how to opt into caching for a GET Route Handler by setting `export const dynamic = 'force-static'`. This example fetches data from an external API and returns it as JSON, showcasing how to make a GET request handler static and benefit from Next.js's caching mechanisms.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

LANGUAGE: JavaScript
CODE:
```
export const dynamic = 'force-static'

export async function GET() {
  const res = await fetch('https://data.mongodb-api.com/...', {
    headers: {
      'Content-Type': 'application/json',
      'API-Key': process.env.DATA_API_KEY,
    },
  })
  const data = await res.json()

  return Response.json({ data })
}
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with pnpm
DESCRIPTION: This command initializes a new Next.js application using `create-next-app` and the provided Temporal example template via pnpm. It sets up the project structure and dependencies required to start development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_3

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-temporal next-temporal-app
```

----------------------------------------

TITLE: Next.js Middleware Matcher with Negative Lookahead Regex
DESCRIPTION: This example illustrates using full regular expressions within the `config.matcher` to define complex matching patterns, such as excluding specific paths (e.g., API routes, static files, favicon) using a negative lookahead.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - favicon.ico (favicon file)
     */
    '/((?!api|_next/static|favicon.ico).*),'
  ],
}
```

----------------------------------------

TITLE: NextResponse.next API Reference
DESCRIPTION: API documentation for `NextResponse.next()`, a static method primarily used in Middleware to continue routing or forward headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_11

LANGUAGE: APIDOC
CODE:
```
NextResponse.next(options?: { request?: { headers?: HeadersInit } }): NextResponse
  - Allows routing to continue, useful in Middleware. Can also forward headers.
  - Parameters:
    - options (optional): An object to configure the next response, including:
      - request: An object to set new request headers.
  - Returns: A NextResponse object to continue routing.
```

----------------------------------------

TITLE: Run Next.js Development Server for Nhost Example
DESCRIPTION: Commands to install project dependencies and start the Next.js development server for the Nhost example application. This allows local testing and development of the integrated frontend and backend.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Create a JSON response with NextResponse
DESCRIPTION: Example of creating an HTTP JSON response with a 500 status code using `NextResponse.json()` in both TypeScript and JavaScript for an API route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_6

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request: Request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}
```

LANGUAGE: javascript
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 })
}
```

----------------------------------------

TITLE: Next.js API Route Query Object Examples
DESCRIPTION: Illustrates the `req.query` object structure for Next.js catch-all (`[...slug]`) and optional catch-all (`[[...slug]]`) API routes. Shows how path segments are parsed into an array for dynamic routes, and an empty object when an optional route is accessed without parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_18

LANGUAGE: JSON
CODE:
```
{ ""slug"": [""a""] }
```

LANGUAGE: JSON
CODE:
```
{ ""slug"": [""a"", ""b""] }
```

LANGUAGE: JSON
CODE:
```
{ }
```

LANGUAGE: JSON
CODE:
```
{ ""slug"": [""a""] }
```

LANGUAGE: JSON
CODE:
```
{ ""slug"": [""a"", ""b""] }
```

----------------------------------------

TITLE: devlow-bench CLI Command Reference
DESCRIPTION: Reference for the `devlow-bench` command-line interface, detailing options for running scenarios, filtering by properties, outputting results to JSON, console, or Datadog, and displaying help.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/devlow-bench/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Usage: devlow-bench [options] <scenario files>
## Selecting scenarios
  --scenario=<filter>, -s=<filter>   Only run the scenario with the given name
  --interactive, -i                  Select scenarios and variants interactively
  --<prop>=<value>                   Filter by any variant property defined in scenarios
## Output
  --json=<path>, -j=<path>           Write the results to the given path as JSON
  --console                          Print the results to the console
  --datadog[=<hostname>]             Upload the results to Datadog
                                     (requires DATADOG_API_KEY environment variables)
## Help
  --help, -h, -?                     Show this help
```

----------------------------------------

TITLE: NextResponse Cookies API Reference
DESCRIPTION: Comprehensive API documentation for managing cookies on a `NextResponse` object, including methods to set, get, retrieve all, and delete cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
NextResponse.cookies:
  set(name: string, value: string): void
    - Sets a cookie with the given name and value on the response.
    - Parameters:
      - name: The name of the cookie.
      - value: The value of the cookie.
    - Returns: void
  get(name: string): { name: string, value: string, Path?: string } | undefined
    - Retrieves the value of a specific cookie by name. Returns the first matching cookie or undefined if not found.
    - Parameters:
      - name: The name of the cookie to retrieve.
    - Returns: An object containing cookie details or undefined.
  getAll(name?: string): Array<{ name: string, value: string, Path?: string }>
    - Retrieves all cookies matching a given name, or all cookies on the response if no name is provided.
    - Parameters:
      - name (optional): The name of the cookies to retrieve.
    - Returns: An array of cookie objects.
  delete(name: string): boolean
    - Deletes a cookie from the response by name.
    - Parameters:
      - name: The name of the cookie to delete.
    - Returns: true if deleted, false if not found.
```

----------------------------------------

TITLE: Bootstrap Next.js Application with TakeShape Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using the `create-next-app` utility, specifically leveraging the `cms-takeshape` example. This sets up the basic project structure and integrates the TakeShape CMS configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-takeshape cms-takeshape-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-takeshape cms-takeshape-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-takeshape cms-takeshape-app
```

----------------------------------------

TITLE: Defining a GET API Route in Next.js
DESCRIPTION: Implements a `GET` request handler for a Next.js API route. It uses `NextResponse.json()` to return a JSON object containing the `pathname` from the incoming request's URL, demonstrating basic API route functionality and how to access request properties.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_1

LANGUAGE: javascript
CODE:
```
export const GET = (req)=>{
    return NextResponse.json({
        pathname: req.nextUrl.pathname
    });
};
```

----------------------------------------

TITLE: Configure Local Environment Variables for Cosmic
DESCRIPTION: Instructions and examples for setting up the .env.local file, which contains sensitive API keys and secrets required to connect the Next.js application with Cosmic CMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
cp .env.local.example .env.local
```

LANGUAGE: Bash
CODE:
```
COSMIC_BUCKET_SLUG=...
COSMIC_READ_KEY=...
COSMIC_PREVIEW_SECRET=...
```

----------------------------------------

TITLE: Running Next.js Development Server (npm)
DESCRIPTION: These commands first install all project dependencies using npm, then start the Next.js development server. This allows you to view your application locally at `http://localhost:3000` and enables hot-reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Vercel Template Deployment URL Parameters
DESCRIPTION: This entry describes the parameters embedded within the Vercel 'Deploy' button URL, which automates the cloning and deployment of a specified GitHub repository as a new project on Vercel. It includes repository details and environment variable configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Vercel Deploy Template URL:
https://vercel.com/new/clone

Parameters:
  repository-url: The URL of the GitHub repository to clone.
    Example: https://github.com/vercel/next.js/tree/canary/examples/cms-kontent
  project-name: The desired name for the new Vercel project.
    Example: cms-kontent
  repository-name: The desired name for the cloned repository on Vercel.
    Example: cms-kontent
  env: Comma-separated list of environment variable names required by the application.
    Example: KONTENT_PROJECT_ID,KONTENT_PREVIEW_API_KEY,KONTENT_PREVIEW_SECRET
  envDescription: A description for the environment variables, displayed to the user during deployment.
    Example: Required to connect the app with Kontent
  envLink: A URL providing more information or setup instructions for the environment variables.
    Example: https://github.com/vercel/next.js/tree/canary/examples/cms-kontent#step-3-set-up-environment-variables
```

----------------------------------------

TITLE: Bootstrap Next.js GraphQL Gateway Example Project
DESCRIPTION: These commands demonstrate how to use `create-next-app` with different package managers (npm, Yarn, pnpm) to quickly set up a new Next.js project pre-configured with the GraphQL Gateway example from the Vercel repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-graphql-gateway with-graphql-gateway-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-graphql-gateway with-graphql-gateway-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-graphql-gateway with-graphql-gateway-app
```

----------------------------------------

TITLE: Adding Sanity API Read Token to Environment
DESCRIPTION: This command demonstrates how to add the `SANITY_API_READ_TOKEN` to your `.env.local` file. This token is crucial for authentication, especially when Sanity Studio needs to live preview your application, ensuring secure access to your content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
SANITY_API_READ_TOKEN=""<paste your token here>""
```

----------------------------------------

TITLE: Next.js Cookies API Changes
DESCRIPTION: This documentation outlines the changes to the Next.js Cookies API, listing the new methods introduced and the methods that have been removed.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Next.js Request/Response Cookies API Changes:

Added Methods:
  - cookies.set(name, value, options): Sets a cookie.
  - cookies.delete(name): Deletes a cookie.
  - cookies.getWithOptions(name, options): Retrieves a cookie with options.

Removed Methods:
  - cookie: (Previously used for setting/getting a single cookie)
  - clearCookie: (Previously used for clearing a cookie)
  - cookies: (Previously used for accessing all cookies)
```

----------------------------------------

TITLE: Create Next.js App with Chakra UI Example
DESCRIPTION: Demonstrates how to initialize a new Next.js application using the `create-next-app` utility, pre-configured with the Chakra UI example. This command bootstraps the project with the necessary dependencies and setup for a Chakra UI integrated Next.js app, supporting different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-chakra-ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-chakra-ui with-chakra-ui-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-chakra-ui with-chakra-ui-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-chakra-ui with-chakra-ui-app
```

----------------------------------------

TITLE: Tigris Next.js Todo App File Structure
DESCRIPTION: An overview of the key directories and files within the Tigris Next.js todo application, illustrating the project's organization including configuration, library files, database models, and API routes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#_snippet_2

LANGUAGE: text
CODE:
```
├── package.json
├── lib
│   ├── tigris.ts
├── db
│   └── models
│       └── todoItems.ts
└── pages
    ├── index.tsx
    └── api
        ├── item
        │   ├── [id].ts
        └── items
            ├── index.ts
            └── search.ts
```

----------------------------------------

TITLE: Bootstrap Next.js app with Jotai example
DESCRIPTION: These commands provide instructions on how to quickly set up a new Next.js project pre-configured with the Jotai example. They utilize the `create-next-app` utility with different package managers (npm, Yarn, pnpm) to initialize the application structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jotai/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-jotai with-jotai-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-jotai with-jotai-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-jotai with-jotai-app
```

----------------------------------------

TITLE: Next.js Middleware with Custom Matcher Configuration
DESCRIPTION: This snippet demonstrates how to declare a single Middleware file and use the `config.matcher` object to define specific routes for which the Middleware should be invoked. It shows an example of rewriting a URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  return NextResponse.rewrite(new URL('/about-2', request.url))
}

// Supports both a single string value or an array of matchers
export const config = {
  matcher: ['/about/:path*', '/dashboard/:path*'],
}
```

----------------------------------------

TITLE: Install Dependencies and Run Next.js Development Server
DESCRIPTION: After setting up the Webiny project and environment variables, use these commands to install the Next.js project's dependencies and then start the development server. This allows you to preview your blog locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Combined Next.js Module Code (Development Build Example)
DESCRIPTION: This comprehensive JavaScript snippet represents a merged module file, typical of a development build process. It consolidates all import statements, the `GET` API route function, and additional Turbopack-specific export declarations, providing a holistic view of the module's final structure before further optimization.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_3

LANGUAGE: js
CODE:
```
import { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';
import { NextResponse } from 'next/server';
import { ClientComponent } from '../../ClientComponent';
import 'next/server';
import '../../ClientComponent';
import 'my-module/MyModuleClientComponent';
function GET() {
    return NextResponse.json({
        clientComponent: typeof ClientComponent,
        myModuleClientComponent: typeof MyModuleClientComponent
    });
}
export { GET };
export { GET as a } from ""__TURBOPACK_VAR__"" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Bootstrap Next.js App with Vanilla Extract Example
DESCRIPTION: Commands to initialize a new Next.js project using the `with-vanilla-extract` example, demonstrating usage with `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vanilla-extract/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-vanilla-extract with-vanilla-extract-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-vanilla-extract with-vanilla-extract-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-vanilla-extract with-vanilla-extract-app
```

----------------------------------------

TITLE: Handle Different HTTP Methods in Next.js API Routes
DESCRIPTION: This snippet illustrates how to process different HTTP methods (e.g., POST) within a Next.js API route handler using `req.method`. It provides examples in both TypeScript and JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method === 'POST') {
    // Process a POST request
  } else {
    // Handle any other HTTP method
  }
}
```

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  if (req.method === 'POST') {
    // Process a POST request
  } else {
    // Handle any other HTTP method
  }
}
```

----------------------------------------

TITLE: Next.js Application Routes and API Endpoints Overview
DESCRIPTION: This section details the primary routes and API endpoints implemented within the Next.js application, covering display, creation, and pagination functionalities.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
Routes:
- /: Display the three most recent posts
- /posts: Paginated list view of all posts
- /posts/new: Create a new post
- /users/new: Create a new user

API Endpoints:
- /api/posts/: Pagination logic
```

----------------------------------------

TITLE: Bootstrap Next.js GraphQL Example Project
DESCRIPTION: These commands illustrate how to initialize a new Next.js project using the `with-typescript-graphql` example. They provide options for using `npx` (npm), `yarn`, or `pnpm` to quickly set up a pre-configured environment for developing type-safe GraphQL applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-typescript-graphql with-typescript-graphql-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-typescript-graphql with-typescript-graphql-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-typescript-graphql with-typescript-graphql-app
```

----------------------------------------

TITLE: Install Node.js Dependencies and Start Next.js Development Server
DESCRIPTION: Installs project dependencies using npm and then starts the Next.js development server. This allows local development and testing of the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

----------------------------------------

TITLE: Replace Next.js Middleware Page Match Data with URLPattern
DESCRIPTION: This snippet shows the previous method of accessing page match data via `event.request.page.params`. Next.js now recommends using the web standard `URLPattern` API for more accurate and explicit page and asset matching in Middleware, deprecating the `request.page` property. An 'After' code example using `URLPattern` is not provided in the source text.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_10

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest, NextFetchEvent } from 'next/server'

export function middleware(request: NextRequest, event: NextFetchEvent) {
  const { params } = event.request.page
  const { locale, slug } = params

  if (locale && slug) {
    const { search, protocol, host } = request.nextUrl
    const url = new URL(`${protocol}//${locale}.${host}/${slug}${search}`)
    return NextResponse.redirect(url)
  }
}
```

----------------------------------------

TITLE: Bootstrap Next.js Apollo Example Application
DESCRIPTION: These commands initialize a new Next.js application using the provided Apollo Server and Client example. Choose your preferred package manager (npm, Yarn, or pnpm) to set up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-apollo-server-and-client api-routes-apollo-server-and-client-app
```

----------------------------------------

TITLE: Running Next.js Development Server (Yarn)
DESCRIPTION: These commands first install all project dependencies using Yarn, then start the Next.js development server. This allows you to view your application locally at `http://localhost:3000` and enables hot-reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Example .env.local Configuration for DatoCMS
DESCRIPTION: This snippet illustrates the structure of the `.env.local` file, which is crucial for connecting the Next.js application with DatoCMS. It includes placeholders for the DatoCMS API token and a secret string used for Next.js's preview mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
DATOCMS_API_TOKEN=...
DATOCMS_PREVIEW_SECRET=...
```

----------------------------------------

TITLE: Define Post Content Type in Kontent.ai
DESCRIPTION: Instructions for creating a 'Post' content type in Kontent.ai, detailing elements like 'Title', 'Date', 'Excerpt', 'Content', 'Cover Image', 'Slug', and 'Author' (linked item). This structure supports blog post content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Content type name: Post
Elements:
  - Title: Text element
  - Date: Date & time element
  - Excerpt: Text element
  - Content: Rich Text element
  - Cover Image: Asset Text element (At most 1, Limit file types: Adjustable images)
  - Slug: URL slug element (auto-generated from Title)
  - Author: Linked items element (Exactly 1, type: Author)
```

----------------------------------------

TITLE: Run Next.js Userbase Project in Development Mode
DESCRIPTION: This snippet provides commands to install dependencies and start the Next.js development server for the Userbase example application. It includes instructions for `npm`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Asynchronous Access of Dynamic API in Server Component (Fix)
DESCRIPTION: For Server Components or Route Handlers, this example shows the correct way to access dynamic APIs like `params` by awaiting them. This resolves the warning and ensures proper functionality with the asynchronous API design.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#_snippet_2

LANGUAGE: jsx
CODE:
```
async function Page({ params }) {
  // asynchronous access of `params.id`.
  const { id } = await params
  return <p>ID: {id}</p>
}
```

----------------------------------------

TITLE: Auth0 Application and Environment Configuration
DESCRIPTION: Comprehensive guide for setting up an Auth0 application for authentication. It covers creating a Single Page Web Application, configuring allowed URLs, and setting up necessary environment variables for domain, client ID, and admin email.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Auth0 Application Settings:

Allowed Callback URLs:
  - Description: URLs where Auth0 can redirect users after successful authentication.
  - Local: http://localhost:3000/
  - Production: https://myapp.com/

Allowed Logout URLs:
  - Description: URLs where Auth0 can redirect users after logout.
  - Local: http://localhost:3000/
  - Production: https://myapp.com/

Allowed Web Origins:
  - Description: Origins from which Auth0 will allow cross-origin requests.
  - Local: http://localhost:3000
  - Production: https://myapp.com/

Auth0 Environment Variables:

NEXT_PUBLIC_AUTH0_DOMAIN:
  - Description: Your Auth0 tenant domain.
  - Source: Auth0 dashboard under settings.

NEXT_PUBLIC_AUTH0_CLIENT_ID:
  - Description: The client ID for your Auth0 application.
  - Source: Auth0 dashboard under settings.

NEXT_PUBLIC_AUTH0_ADMIN_EMAIL:
  - Description: The email address of the user designated as an administrator, allowing them to delete any comment.
  - Source: User's email used for signing in via Auth0.
```

----------------------------------------

TITLE: Start Next.js Local Development Server
DESCRIPTION: Starts the Next.js development server, watching for code changes to facilitate rapid development.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/developing.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with Yarn
DESCRIPTION: This command initializes a new Next.js application using `create-next-app` and the provided Temporal example template via Yarn. It sets up the project structure and dependencies required to start development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-temporal next-temporal-app
```

----------------------------------------

TITLE: Next.js Image Component API Reference
DESCRIPTION: Comprehensive API documentation for the `next/image` component props, detailing their types, examples, status (e.g., Required, Deprecated), and descriptions. This reference covers all configurable aspects of image optimization and behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/image.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Props:

- src
  Type: String
  Status: Required
  Example: src=""/profile.png""
  Description: The source of the image. Can be an internal path string, an absolute external URL (must be configured with remotePatterns), or a static import.

- alt
  Type: String
  Status: Required
  Example: alt=""Picture of the author""
  Description: The `alt` property is used to describe the image for screen readers and search engines. It is also the fallback text if images have been disabled or an error occurs while loading the image. It should contain text that could replace the image without changing the meaning of the page. If the image is purely decorative or not intended for the user, the `alt` property should be an empty string (`alt=""""`).

- width
  Type: Integer (px)
  Status: -
  Example: width={500}
  Description: Specifies the width of the image in pixels.

- height
  Type: Integer (px)
  Status: -
  Example: height={500}
  Description: Specifies the height of the image in pixels.

- fill
  Type: Boolean
  Status: -
  Example: fill={true}
  Description: When true, the image will fill the parent element, and width/height are not required.

- loader
  Type: Function
  Status: -
  Example: loader={imageLoader}
  Description: A custom function to resolve image URLs.

- sizes
  Type: String
  Status: -
  Example: sizes=""(max-width: 768px) 100vw, 33vw""
  Description: A string that specifies image sizes for different viewport widths, similar to the HTML `sizes` attribute.

- quality
  Type: Integer (1-100)
  Status: -
  Example: quality={80}
  Description: The quality of the optimized image, from 1 to 100. 100 is the best quality.

- priority
  Type: Boolean
  Status: -
  Example: priority={true}
  Description: When true, the image will be considered high priority and preloaded.

- placeholder
  Type: String
  Status: -
  Example: placeholder=""blur""
  Description: The placeholder to use while the image is loading. Can be ""blur"" (uses `blurDataURL`) or ""empty"".

- style
  Type: Object
  Status: -
  Example: style={{objectFit: ""contain""}}
  Description: An object for inline styles to apply to the image element.

- onLoadingComplete
  Type: Function
  Status: Deprecated
  Example: onLoadingComplete={img => done())}
  Description: A callback function that is called when the image has finished loading. Deprecated.

- onLoad
  Type: Function
  Status: -
  Example: onLoad={event => done())}
  Description: A callback function that is called when the image has finished loading.

- onError
  Type: Function
  Status: -
  Example: onError(event => fail())}
  Description: A callback function that is called if an error occurs during image loading.

- loading
  Type: String
  Status: -
  Example: loading=""lazy""
  Description: Specifies the loading behavior of the image. Can be ""lazy"" or ""eager"".

- blurDataURL
  Type: String
  Status: -
  Example: blurDataURL=""data:image/jpeg...""
  Description: A Data URL to be used as a placeholder image before the main image loads, when `placeholder=""blur""`.

- overrideSrc
  Type: String
  Status: -
  Example: overrideSrc=""/seo.png""
  Description: Overrides the `src` prop for SEO purposes, allowing a different image to be used for search engine indexing.
```

----------------------------------------

TITLE: Run Tigris Next.js Todo App Locally
DESCRIPTION: Instructions to clone the repository, install project dependencies, start the Tigris local development environment, and run the Next.js server for the todo application on your local machine.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
git clone https://github.com/tigrisdata/tigris-vercel-starter
```

LANGUAGE: shell
CODE:
```
cd tigris-vercel-starter
npm install
```

LANGUAGE: shell
CODE:
```
tigris dev start
```

LANGUAGE: shell
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Manage Cookies in Next.js Server Actions
DESCRIPTION: This example illustrates how to perform cookie operations (get, set, delete) directly within a Next.js Server Action. It uses the `cookies` API from `next/headers` to interact with the HTTP cookies associated with the request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-updating-data.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

LANGUAGE: JavaScript
CODE:
```
'use server'

import { cookies } from 'next/headers'

export async function exampleAction() {
  // Get cookie
  const cookieStore = await cookies()

  // Get cookie
  cookieStore.get('name')?.value

  // Set cookie
  cookieStore.set('name', 'Delba')

  // Delete cookie
  cookieStore.delete('name')
}
```

----------------------------------------

TITLE: Install Dependencies and Start Next.js Development Server
DESCRIPTION: These commands are used to install project dependencies and then start the Next.js development server locally, making the application accessible on localhost.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Bootstrap Next.js Apollo Example Project
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the Apollo Server and Client authentication example. They use `create-next-app` with different package managers (npx, Yarn, pnpm) to bootstrap the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/api-routes-apollo-server-and-client-auth/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example api-routes-apollo-server-and-client-auth api-routes-apollo-server-and-client-auth-app
```

----------------------------------------

TITLE: Run Storybook Development Server
DESCRIPTION: Use these commands to start the Storybook development server locally. Storybook will typically open in your browser, allowing you to view and interact with your components. Options include `npm`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run storybook
# or
yarn storybook
# or
pnpm storybook
```

----------------------------------------

TITLE: Starting Next.js Development Server
DESCRIPTION: This command starts the Next.js development server, enabling hot-reloading and other development features. It is typically run in the root directory of the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_5

LANGUAGE: Bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Before Upgrade: Next.js Middleware Returning JSON Response
DESCRIPTION: This 'before' example demonstrates the old pattern where Next.js Middleware could directly return a JSON response, often used for authorization failures. This approach is now deprecated.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_4

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  return NextResponse.json({ message: 'Auth required' }, { status: 401 })
}
```

----------------------------------------

TITLE: Next.js Legacy Image Component API Reference
DESCRIPTION: Comprehensive API documentation for the `next/legacy/image` component in Next.js, detailing its required and optional properties, their types, and behavior, along with a comparison to the new `next/image` component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
<Image /> Component (next/legacy/image)

Comparison with new next/image component (Next.js 13+):
  - Removes `<span>` wrapper around `<img>` in favor of native computed aspect ratio.
  - Adds support for canonical `style` prop.
    - Removes `layout` prop in favor of `style` or `className`.
    - Removes `objectFit` prop in favor of `style` or `className`.
    - Removes `objectPosition` prop in favor of `style` or `className`.
  - Removes `IntersectionObserver` implementation in favor of native lazy loading.
    - Removes `lazyBoundary` prop.
    - Removes `lazyRoot` prop.
  - Removes `loader` config in favor of `loader` prop.
  - `alt` prop changed from optional to required.
  - `onLoadingComplete` callback receives reference to `<img>` element.

Required Props:
  src: string | StaticImageData
    - Description: Path to the image file. Can be a statically imported image, an absolute external URL, or an internal path depending on the loader prop or configuration.
    - Constraints:
      - When using the default loader:
        - External URLs require `remotePatterns` configuration.
        - Animated or unknown formats (JPEG, PNG, WebP, AVIF, GIF, TIFF) are served as-is.
        - SVG format is blocked unless `unoptimized` or `dangerouslyAllowSVG` is enabled.

  width: number
    - Description: Represents either the _rendered_ width or _original_ width in pixels, depending on the `layout` and `sizes` properties.
    - Behavior:
      - When using `layout=""intrinsic""` or `layout=""fixed""`: Represents the _rendered_ width, affecting how large the image appears.
      - When using `layout=""responsive""` or `layout=""fill""`: Represents the _original_ width, affecting only the aspect ratio.
    - Constraints: Required, except for statically imported images or those with `layout=""fill""`.

  height: number
    - Description: Represents either the _rendered_ height or _original_ height in pixels, depending on the `layout` and `sizes` properties.
    - Behavior:
      - When using `layout=""intrinsic""` or `layout=""fixed""`: Represents the _rendered_ height, affecting how large the image appears.
      - When using `layout=""responsive""` or `layout=""fill""`: Represents the _original_ height, affecting only the aspect ratio.
    - Constraints: Required, except for statically imported images or those with `layout=""fill""`.

Optional Props:
  - The `<Image />` component accepts a number of additional properties beyond those which are required. This section describes the most commonly-used properties. Find details about more rarely-used properties in the Advanced Props section (not detailed here).
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Ghost CMS Example
DESCRIPTION: Commands to initialize a new Next.js application using the cms-ghost example template with different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-ghost cms-ghost-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-ghost cms-ghost-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-next-app --example cms-ghost cms-ghost-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server for the Relay Modern example. This will launch the application locally for development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Next.js usePathname Hook API Reference
DESCRIPTION: Comprehensive API documentation for the `usePathname` hook, detailing its signature, lack of parameters, and the string value it returns, along with examples of expected return values for various URLs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-pathname.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
usePathname()
  - Description: A Client Component hook that lets you read the current URL's pathname.
  - Parameters: None
  - Returns: A string representing the current URL's pathname.
  - Examples of Returned Values:
    - URL: / -> Returned value: '/'
    - URL: /dashboard -> Returned value: '/dashboard'
    - URL: /dashboard?v=2 -> Returned value: '/dashboard'
    - URL: /blog/hello-world -> Returned value: '/blog/hello-world'
```

----------------------------------------

TITLE: Run Next.js development server
DESCRIPTION: Commands to install project dependencies and start the Next.js development server. This allows you to run the blog locally and see changes in real-time.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: turbo-tasks Core Concepts: Tasks, Registry, and Serialization
DESCRIPTION: Describes the concept of a 'Task' as a function invocation, and explains the global registry for `ValueType`s, including how serialization and deserialization are handled using `serde` and `Any` casting for efficient data management within the `turbo-tasks` framework.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack/architecture.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Tasks
  - A combination of a function and its arguments (an invocation of a function).

Registry
  - Global registry for `#[turbo_tasks::value]` types, creating a `ValueType` for each.
  - When serialization is enabled, `ValueType::new_with_any_serialization` stores Serialization and Deserialization implementations.
  - Uses Rust generic magic (e.g., `fn any_as_serialize(...)`) to cast `Any` to `Serialize` for concrete types, leveraging `serde`.
  - Deserialization is similar but more involved in `serde` (e.g., `AnyDeserializeSeed`).
```

----------------------------------------

TITLE: Basic Next.js Link Component Usage in TSX
DESCRIPTION: Provides a minimal working example of the Next.js <Link> component in a TypeScript React (TSX) file. It includes the necessary import statement and demonstrates how to create a simple navigation link, ensuring the code is ready to run.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_7

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href=""/about"">About</Link>
}
```

----------------------------------------

TITLE: Define GET Route Handlers in Next.js App Directory
DESCRIPTION: Illustrates how to create custom request handlers, known as Route Handlers, in the `app` directory. These handlers replace traditional API routes and utilize Web Request and Response APIs to define server-side logic for specific routes, such as a GET request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_29

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Vercel Project Deployment URL Parameters
DESCRIPTION: Describes the parameters used in the Vercel 'Deploy' button URL for cloning and deploying a repository with pre-configured environment variables. This allows for automated setup of projects directly from a template.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_10

LANGUAGE: APIDOC
CODE:
```
Vercel Deployment URL Structure:
https://vercel.com/new/clone?
  repository-url={url}
  &env={env_variable_name}
  &envDescription={description_of_env}
  &envLink={link_to_env_setup_docs}
  &demo-title={title_for_demo}
  &demo-description={description_for_demo}

Parameters:
- repository-url (string, required): The URL of the GitHub/GitLab/Bitbucket repository to clone.
- env (string, optional): The name of an environment variable to pre-fill in the Vercel project settings.
- envDescription (string, optional): A description for the environment variable, displayed to the user during deployment.
- envLink (string, optional): A URL providing more information or setup instructions for the environment variable.
- demo-title (string, optional): A title for the deployment template or demo project.
- demo-description (string, optional): A description for the deployment template or demo project.

Example Usage (from text):
https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fcms-enterspeed&env=ENTERSPEED_PRODUCTION_ENVIRONMENT_API_KEY&envDescription=Required%20to%20connect%20the%20app%20with%20Enterspeed&envLink=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fcms-enterspeed%23step-5-set-up-environment-variables&demo-title=Next.js%20with%20Enterspeed&demo-description=A%20statically%20generated%20blog%20example%20using%20Next.js%20and%20Enterspeed.
```

----------------------------------------

TITLE: Implement TS/JS Code Switcher in Next.js MDX
DESCRIPTION: Explains how to create a language switcher for code examples in MDX documentation, allowing users to toggle between TypeScript and JavaScript versions. This is achieved by placing `tsx` and `jsx` code blocks sequentially and linking them with the `switcher` prop.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_9

LANGUAGE: mdx
CODE:
```
```tsx filename=""app/page.tsx"" switcher

```

```jsx filename=""app/page.js"" switcher

```
```

----------------------------------------

TITLE: Next.js Preview Mode Activation Endpoint
DESCRIPTION: This API endpoint is used to activate Next.js's preview mode, allowing users to view draft content from DatoCMS before it is published. It requires a secret for authentication and the slug of the content to be previewed.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
GET /api/preview
  - Description: Activates Next.js Preview Mode for a specific content slug.
  - Parameters:
    - secret: string (required)
      - Description: The `DATOCMS_PREVIEW_SECRET` configured in `.env.local`. Used for authentication.
    - slug: string (required)
      - Description: The slug attribute of the content (e.g., a blog post) to be previewed.
  - Example Usage:
    http://localhost:3000/api/preview?secret=<secret>&slug=<slug>
```

----------------------------------------

TITLE: After Upgrade: Next.js Middleware Redirecting for Authorization
DESCRIPTION: This 'after' example shows the recommended pattern for handling authorization in Next.js Middleware. Instead of returning a response body, it redirects the user to a login page, passing the original path as a query parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import { NextResponse } from 'next/server'
import type { NextRequest } from 'next/server'
import { isAuthValid } from './lib/auth'

export function middleware(request: NextRequest) {
  // Example function to validate auth
  if (isAuthValid(request)) {
    return NextResponse.next()
  }

  const loginUrl = new URL('/login', request.url)
  loginUrl.searchParams.set('from', request.nextUrl.pathname)

  return NextResponse.redirect(loginUrl)
}
```

----------------------------------------

TITLE: Next.js Preview Mode API Endpoints
DESCRIPTION: API endpoints for controlling Next.js preview mode, allowing users to enter and exit live preview of content changes from Plasmic Studio. This enables real-time visualization of design updates.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Enter Preview Mode:
http://localhost:3000/api/preview?secret=PLASMIC_PREVIEW_SECRET&slug=PATH
  - Description: Activates preview mode for a specific path, displaying unpublished content.
  - Parameters:
    - secret: (string) The secret string configured in PLASMIC_PREVIEW_SECRET for authentication.
    - slug: (string) The URL path to preview (e.g., '/').

Exit Preview Mode:
http://localhost:3000/api/exit-preview
  - Description: Deactivates preview mode, returning to the default published content view.
```

----------------------------------------

TITLE: Initialize Prismic Repository and Start Slice Machine
DESCRIPTION: This section outlines the commands required to set up a Prismic account and repository, connecting it to your application via the `@slicemachine/init` CLI. It also includes the command to start the Slice Machine, which allows for visualization and management of Prismic content models locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
npx @slicemachine/init
```

LANGUAGE: sh
CODE:
```
npm run slicemachine
```

----------------------------------------

TITLE: Initialize Next.js Project from dotCMS Example
DESCRIPTION: These commands initialize a new Next.js application using the `create-next-app` utility, specifically bootstrapping it with the `cms-dotcms` example. This allows users to quickly set up a local development environment for the dotCMS-powered blog, supporting npm, Yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-dotcms cms-dotcms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-dotcms cms-dotcms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-dotcms cms-dotcms-app
```

----------------------------------------

TITLE: Initialize Next.js App with Firebase Cloud Messaging Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using `create-next-app` with different package managers (`npx`, `yarn`, `pnpm`). The `--example` flag pulls in the pre-configured Firebase Cloud Messaging setup, providing a quick start for web push notifications.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

----------------------------------------

TITLE: Define Contentful Author and Post Content Types Manually
DESCRIPTION: This section outlines the manual creation of 'Author' and 'Post' content types within the Contentful dashboard, specifying their API identifiers and required fields with their respective types and settings. This is an alternative to the automated setup script.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Contentful Content Model Definitions:

Author Content Type:
  Name: Author
  API Identifier: author
  Fields:
    - name:
      Type: Text (short text)
      Field ID: name
    - picture:
      Type: Media (one file)
      Field ID: picture

Post Content Type:
  Name: Post
  API Identifier: post
  Fields:
    - title:
      Type: Text (short text)
    - content:
      Type: Rich text
    - excerpt:
      Type: Text (Long text, full-text search)
    - coverImage:
      Type: Media (one file)
    - date:
      Type: Date and time
    - slug:
      Type: Text (optionally configured as slug of 'title' field)
    - author:
      Type: Reference (one reference)
```

----------------------------------------

TITLE: Create Next.js App with Paste and TypeScript Example
DESCRIPTION: Instructions on how to bootstrap a new Next.js application using the `create-next-app` utility, specifically cloning the `with-paste-typescript` example. This command initializes a new project directory with the specified example's structure and dependencies, using different package managers like npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-paste-typescript/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-paste-typescript with-paste-typescript-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-paste-typescript with-paste-typescript-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-paste-typescript with-paste-typescript-app
```

----------------------------------------

TITLE: Bootstrap Next.js MQTT Example Application
DESCRIPTION: Initializes a new Next.js project using `create-next-app` with the `with-mqtt-js` example template. This snippet provides commands for `npx`, `yarn`, and `pnpm` to set up the project directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mqtt-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mqtt-js with-mqtt-js-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mqtt-js with-mqtt-js-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mqtt-js with-mqtt-js-app
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Umbraco Heartcore Example
DESCRIPTION: These commands initialize a new Next.js application using the `create-next-app` utility, specifically bootstrapping it with the `cms-umbraco-heartcore` example. This sets up the basic project structure and dependencies for the blog.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example cms-umbraco-heartcore cms-umbraco-heartcore-app
```

----------------------------------------

TITLE: Generate dotCMS API Authentication Token with cURL
DESCRIPTION: This cURL command demonstrates how to generate an API authentication token for dotCMS. It sends a POST request to the authentication endpoint with admin credentials, requesting a token valid for 10 days. This token is essential for the `DOTCMS_TOKEN` environment variable required by the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
curl -H ""Content-Type:application/json"" --insecure  -X POST -d  '
{ ""user"":""admin@dotcms.com"", ""password"":""admin"", ""expirationDays"": 10 }
' http://demo.dotcms.com:8080/api/v1/authentication/api-token
```

----------------------------------------

TITLE: Configure Next.js Preview API Endpoint with Cosmic CMS
DESCRIPTION: This snippet shows the URL structure for the Next.js API endpoint used to enable preview mode with Cosmic CMS. It requires a secret for authentication and a slug to identify the content. This URL is configured in the Cosmic dashboard under 'Preview Link' settings to allow content previews.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
http://localhost:3000/api/preview?secret=<secret>&slug=[object_slug]
```

----------------------------------------

TITLE: Implement Streaming with Web APIs in Next.js
DESCRIPTION: Provides an example of implementing server-side streaming in a Next.js Route Handler using native Web APIs. It demonstrates converting an async iterator to a `ReadableStream` to send chunks of data over time, useful for custom streaming scenarios.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_16

LANGUAGE: typescript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator: any) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    },
  })
}

function sleep(time: number) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

LANGUAGE: javascript
CODE:
```
// https://developer.mozilla.org/docs/Web/API/ReadableStream#convert_async_iterator_to_stream
function iteratorToStream(iterator) {
  return new ReadableStream({
    async pull(controller) {
      const { value, done } = await iterator.next()

      if (done) {
        controller.close()
      } else {
        controller.enqueue(value)
      }
    },
  })
}

function sleep(time) {
  return new Promise((resolve) => {
    setTimeout(resolve, time)
  })
}

const encoder = new TextEncoder()

async function* makeIterator() {
  yield encoder.encode('<p>One</p>')
  await sleep(200)
  yield encoder.encode('<p>Two</p>')
  await sleep(200)
  yield encoder.encode('<p>Three</p>')
}

export async function GET() {
  const iterator = makeIterator()
  const stream = iteratorToStream(iterator)

  return new Response(stream)
}
```

----------------------------------------

TITLE: Bootstrap Next.js Project with DatoCMS Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `create-next-app` utility, specifically bootstrapping it with the `cms-datocms` example. It shows usage with npm, Yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-datocms cms-datocms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-datocms cms-datocms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-datocms cms-datocms-app
```

----------------------------------------

TITLE: Copy Agility CMS Environment Variable Template
DESCRIPTION: Copies the example environment variable file to a local, Git-ignored version for development. This file will store sensitive API keys for Agility CMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Install Dependencies and Run Next.js Development Server
DESCRIPTION: Commands to install project dependencies and start the Next.js development server, supporting `npm`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-unsplash/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Next.js API Route Definition for GET Request
DESCRIPTION: This code defines a standard Next.js API route handler for a GET request. It utilizes `NextResponse.json` to return a JSON object. The response includes the `typeof` operator applied to `ClientComponent` and `MyModuleClientComponent`, illustrating how server-side code can reference client-side components for type introspection or other purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_1

LANGUAGE: js
CODE:
```
export function GET() {
    return NextResponse.json({
        clientComponent: typeof ClientComponent,
        myModuleClientComponent: typeof MyModuleClientComponent
    });
}
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Jest Example
DESCRIPTION: Instructions for initializing a new Next.js application pre-configured with Jest using `create-next-app` via npm, Yarn, or pnpm. This command clones the 'with-jest' example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-jest with-jest-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-jest with-jest-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-jest with-jest-app
```

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: This command executes the `dev` script defined in `package.json` using npm, which typically starts the Next.js development server. This allows developers to run the application locally and see changes in real-time.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Initialize Next.js App with react-multi-carousel Example
DESCRIPTION: This snippet provides commands to quickly bootstrap a new Next.js application pre-configured with the `react-multi-carousel` example. It includes options for `npx` (npm), `yarn`, and `pnpm` to facilitate project setup and allow developers to immediately start working with the carousel component.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-multi-carousel/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-multi-carousel with-react-multi-carousel-app
```

----------------------------------------

TITLE: Start Next.js server on a reserved port (example error)
DESCRIPTION: Demonstrates how to attempt starting a Next.js development or production server using a port that is reserved, which will result in an error. This example specifically uses port `4045`, which is reserved for the Network Paging Protocol (npp).
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/reserved-port.mdx#_snippet_0

LANGUAGE: bash
CODE:
```
next start -p 4045
```

LANGUAGE: bash
CODE:
```
next dev --port 4045
```

----------------------------------------

TITLE: Setting Builder.io Public API Key in Environment
DESCRIPTION: This snippet shows the format for setting the Builder.io public API key in your `.env` files (e.g., `.env.production`, `.env.development`). This key is crucial for your Next.js application to fetch content from your Builder.io space.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_5

LANGUAGE: env
CODE:
```
BUILDER_PUBLIC_KEY=...
```

----------------------------------------

TITLE: Bootstrap Next.js Axiom Example App
DESCRIPTION: Commands to initialize a new Next.js project using the `with-axiom` example template, demonstrating setup with `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-axiom/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-axiom with-axiom-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-axiom with-axiom-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-axiom with-axiom-app
```

----------------------------------------

TITLE: Set HTTP Status Code and Send JSON in Next.js API Route
DESCRIPTION: This example demonstrates how to set the HTTP status code of a response to 200 (OK) and send a JSON object as the response body in a Next.js API route. It shows both TypeScript and JavaScript implementations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_11

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

LANGUAGE: js
CODE:
```
export default function handler(req, res) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Create a Basic Next.js API Route Handler
DESCRIPTION: This snippet demonstrates how to create a basic API route in Next.js that returns a JSON response. It shows both TypeScript and JavaScript implementations for a handler function that sends a 'Hello from Next.js!' message.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Create Next.js App with Turso Example
DESCRIPTION: Commands to initialize a new Next.js project using the `with-turso` example template, supporting `npx`, `yarn`, and `pnpm` for project scaffolding.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-turso with-turso-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-turso with-turso-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-turso with-turso-app
```

----------------------------------------

TITLE: NextResponse.rewrite API Reference
DESCRIPTION: API documentation for `NextResponse.rewrite()`, a static method to proxy a request to a new URL while preserving the original URL in the browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_9

LANGUAGE: APIDOC
CODE:
```
NextResponse.rewrite(url: string | URL): NextResponse
  - Produces a response that rewrites (proxies) the given URL while preserving the original URL in the browser.
  - Parameters:
    - url: The URL to rewrite to. Can be a string or a URL object.
  - Returns: A NextResponse object configured for rewriting.
```

----------------------------------------

TITLE: Accessing Preview Data in Next.js API Routes
DESCRIPTION: Shows how `req.preview` (boolean) and `req.previewData` (object) are available on the request object within Next.js API routes, allowing API handlers to conditionally process requests based on the active preview mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_10

LANGUAGE: js
CODE:
```
export default function myApiRoute(req, res) {
  const isPreview = req.preview
  const previewData = req.previewData
  // ...
}
```

----------------------------------------

TITLE: Building and Starting Next.js App in Production Mode
DESCRIPTION: These commands prepare the Next.js application for production and then start the server. `npm run build` compiles the application, and `npm start` runs the compiled application in production mode, utilizing translated message files for localization.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run build
npm start
```

----------------------------------------

TITLE: Create Next.js App with Ionic Example
DESCRIPTION: Instructions to bootstrap a new Next.js application pre-configured with the Ionic example using `create-next-app` via npm, Yarn, or pnpm. This command fetches the specified example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ionic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-ionic with-ionic-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-ionic with-ionic-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-ionic with-ionic-app
```

----------------------------------------

TITLE: Bootstrap Next.js application with next-sitemap example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using the `with-next-sitemap` example. They utilize `create-next-app` with `npx`, `yarn`, or `pnpm` to quickly set up a pre-configured project for sitemap generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-sitemap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-sitemap with-next-sitemap-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-sitemap with-next-sitemap-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-sitemap with-next-sitemap-app
```

----------------------------------------

TITLE: Bootstrap Next.js Cosmic Blog Project
DESCRIPTION: Commands to initialize a new Next.js project based on the Cosmic CMS example using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-cosmic/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example cms-cosmic cms-cosmic-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example cms-cosmic cms-cosmic-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example cms-cosmic cms-cosmic-app
```

----------------------------------------

TITLE: NextResponse.redirect API Reference
DESCRIPTION: API documentation for `NextResponse.redirect()`, a static method to create an HTTP redirect response to a specified URL.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_7

LANGUAGE: APIDOC
CODE:
```
NextResponse.redirect(url: string | URL, status?: number): NextResponse
  - Produces a response that redirects to a given URL.
  - Parameters:
    - url: The URL to redirect to. Can be a string or a URL object.
    - status (optional): The HTTP status code for the redirect (e.g., 307, 308). Defaults to 307.
  - Returns: A NextResponse object configured for redirection.
```

----------------------------------------

TITLE: API Reference for useSelectedLayoutSegment Hook
DESCRIPTION: Detailed API documentation for the `useSelectedLayoutSegment` hook, including its signature, optional parameters, return values, and illustrative examples of returned segments based on different URLs and layout structures.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-selected-layout-segment.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
useSelectedLayoutSegment(parallelRoutesKey?: string)
  - Description: Client Component hook to read the active route segment one level below the Layout it is called from. Useful for navigation UI.
  - Parameters:
    - parallelRoutesKey (string, optional): Key for a parallel route slot to read the active segment within.
  - Returns:
    - string: The active segment.
    - null: If no active segment exists.
  - Examples of Returned Segments:
    - app/layout.js + / -> null
    - app/layout.js + /dashboard -> 'dashboard'
    - app/dashboard/layout.js + /dashboard -> null
    - app/dashboard/layout.js + /dashboard/settings -> 'settings'
    - app/dashboard/layout.js + /dashboard/analytics -> 'analytics'
    - app/dashboard/layout.js + /dashboard/analytics/monthly -> 'analytics'
```

----------------------------------------

TITLE: Next.js Edge API Route for Proxying Requests
DESCRIPTION: This snippet demonstrates how to use an Edge API Route to proxy requests and forward headers, a common use case that previously might have been handled by Middleware. It leverages the `runtime: 'edge'` configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { type NextRequest } from 'next/server'

export const config = {
  runtime: 'edge',
}

export default async function handler(req: NextRequest) {
  const authorization = req.cookies.get('authorization')
  return fetch('https://backend-api.com/api/protected', {
    method: req.method,
    headers: {
      authorization,
    },
    redirect: 'manual',
  })
}
```

----------------------------------------

TITLE: Initialize Next.js App with Yoga Design System Example
DESCRIPTION: This snippet provides commands to bootstrap a new Next.js application pre-configured with the Yoga Design System example. It includes instructions for using `npx`, `yarn`, and `pnpm` to create the project directory and set up the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yoga/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-yoga with-yoga-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-yoga with-yoga-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-yoga with-yoga-app
```

----------------------------------------

TITLE: Starting Temporal Server with Docker Compose
DESCRIPTION: This command starts the Temporal Server locally using Docker Compose. It is typically executed in the Temporal Server's Docker directory to bring up all necessary services for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_4

LANGUAGE: Bash
CODE:
```
docker compose up
```

----------------------------------------

TITLE: Vercel Deployment Template URL for Next.js Contentful Blog
DESCRIPTION: This URL initiates a Vercel deployment of the Next.js Contentful blog example, pre-filling project details and environment variables. It provides a convenient, one-click method to deploy the template directly from a browser, streamlining the setup process.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fcms-contentful&project-name=nextjs-contentful-blog&repository-name=nextjs-contentful-blog&demo-title=Next.js+Blog&demo-description=Static+blog+with+multiple+authors+using+Draft+Mode&demo-url=https%3A%2F%2Fnext-blog-contentful.vercel.app%2F&demo-image=https%3A%2F%2Fassets.vercel.com%2Fimage%2Fupload%2Fv1625705016%2Ffront%2Fexamples%2FCleanShot_2021-07-07_at_19.43.15_2x.png&integration-ids=oac_aZtAZpDfT1lX3zrnWy7KT9VA&env=CONTENTFUL_PREVIEW_SECRET,CONTENTFUL_REVALIDATE_SECRET&envDescription=Any%20URL%20friendly%20value%20to%20secure%20Your%20App
  - Purpose: Initiates a Vercel deployment of a specific Next.js project template.
  - Parameters:
    - repository-url: (string) The URL of the GitHub repository to clone.
    - project-name: (string) The desired name for the Vercel project.
    - repository-name: (string) The desired name for the cloned repository.
    - demo-title: (string) Title for the demo application.
    - demo-description: (string) Description for the demo application.
    - demo-url: (string) URL of the live demo.
    - demo-image: (string) URL of an image representing the demo.
    - integration-ids: (string) Comma-separated IDs of Vercel integrations to enable.
    - env: (string) Comma-separated list of environment variable names to prompt the user for (e.g., CONTENTFUL_PREVIEW_SECRET, CONTENTFUL_REVALIDATE_SECRET).
    - envDescription: (string) A general description for the environment variables required.
  - Usage: Clickable button/link to quickly deploy the project to Vercel with pre-configured settings.
```

----------------------------------------

TITLE: Bootstrap Next.js Apollo Example Project
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the Apollo GraphQL client example using `create-next-app` via `npx`, `yarn`, or `pnpm`. This sets up the project structure and dependencies required for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-apollo with-apollo-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-apollo with-apollo-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-apollo with-apollo-app
```

----------------------------------------

TITLE: Define Author Content Type in Kontent.ai
DESCRIPTION: Instructions for creating an 'Author' content type in Kontent.ai, specifying 'Name' as a Text element and 'Picture' as an Asset element limited to one adjustable image. This defines the structure for author profiles.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Content type name: Author
Elements:
  - Name: Text element
  - Picture: Asset element (At most 1, Limit file types: Adjustable images)
```

----------------------------------------

TITLE: useParams Hook API Reference
DESCRIPTION: Comprehensive API documentation for the `useParams` hook, detailing its signature, return value structure, and how it maps to various dynamic route configurations in Next.js. Includes examples of expected return values based on different route patterns.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-params.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
useParams()
  - Parameters: Does not take any parameters.

  - Returns: An object containing the current route's filled in dynamic parameters.
    - Each property in the object is an active dynamic segment.
    - The properties name is the segment's name, and the properties value is what the segment is filled in with.
    - The properties value will either be a `string` or array of `string`'s depending on the type of dynamic segment.
    - If the route contains no dynamic parameters, `useParams` returns an empty object.
    - If used in Pages Router, `useParams` will return `null` on the initial render and updates with properties following the rules above once the router is ready.

  - Examples of useParams() return values based on Route and URL:
    - Route: `app/shop/page.js`, URL: `/shop`, `useParams()`: `{}`
    - Route: `app/shop/[slug]/page.js`, URL: `/shop/1`, `useParams()`: `{ slug: '1' }`
    - Route: `app/shop/[tag]/[item]/page.js`, URL: `/shop/1/2`, `useParams()`: `{ tag: '1', item: '2' }`
    - Route: `app/shop/[...slug]/page.js`, URL: `/shop/1/2`, `useParams()`: `{ slug: ['1', '2'] }`
```

----------------------------------------

TITLE: Run Next.js Application in Development Mode
DESCRIPTION: Installs project dependencies and starts the Next.js development server, making the application accessible locally on port 3000. This allows for live development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn
yarn dev
```

----------------------------------------

TITLE: Continue routing with NextResponse.next
DESCRIPTION: Examples demonstrating the use of `NextResponse.next()` in Next.js Middleware to continue processing the request, including forwarding custom headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_12

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

return NextResponse.next()
```

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

// Given an incoming request...
const newHeaders = new Headers(request.headers)
// Add a new header
newHeaders.set('x-version', '123')
// And produce a response with the new headers
return NextResponse.next({
  request: {
    // New request headers
    headers: newHeaders,
  },
})
```

----------------------------------------

TITLE: Starting Temporal Worker Process
DESCRIPTION: This command starts the Temporal worker process, which is responsible for executing Workflow and Activity tasks. It connects to the Temporal Server and processes tasks from the configured task queue.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_7

LANGUAGE: Bash
CODE:
```
npm run start-worker
```

----------------------------------------

TITLE: Installing TypeScript Development Dependencies
DESCRIPTION: Installs the necessary development dependencies for TypeScript support in a Next.js project, including typescript itself and type definitions for React and Node.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install --save-dev typescript @types/react @types/node
```

----------------------------------------

TITLE: Initialize Next.js Project with Temporal Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Temporal example. This sets up the basic project structure using `create-next-app` via npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-temporal next-temporal-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-temporal next-temporal-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-temporal next-temporal-app
```

----------------------------------------

TITLE: Build and Start Next.js Production Server
DESCRIPTION: These commands build the Next.js application for production and then start the production server. They are compatible with `npm`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sass/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run build
npm run start
```

LANGUAGE: bash
CODE:
```
yarn build
yarn start
```

LANGUAGE: bash
CODE:
```
pnpm build
pnpm start
```

----------------------------------------

TITLE: Start Next.js Development Server
DESCRIPTION: Provides commands to launch the Next.js development server using various package managers like npm, yarn, pnpm, or bun. The server typically runs on http://localhost:3000 and supports hot-reloading.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-empty/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Bootstrap Next.js Sitefinity Example Application
DESCRIPTION: Commands to initialize a new Next.js application using the 'create-next-app' utility, pre-configured with the 'cms-sitefinity' example. This allows for quick setup using npx, yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-sitefinity cms-sitefinity-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-sitefinity cms-sitefinity-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-sitefinity cms-sitefinity-app
```

----------------------------------------

TITLE: Prisma Postgres CLI Output and Next Steps
DESCRIPTION: Detailed documentation of the output from `npx prisma init --db` and subsequent steps for integrating Prisma Postgres. This includes instructions for installing and using the Prisma Accelerate extension, applying migrations, and managing data with Prisma Studio.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Prisma Postgres Database Setup and Integration:

Database URL Format:
  prisma+postgres://accelerate.prisma-data.net/?api_key=ey...
  - Description: The connection string for your Prisma Postgres database, including the API key.

Install Prisma Accelerate Extension:
  npm install @prisma/extension-accelerate
  - Description: Installs the Prisma Accelerate extension, required for querying Prisma Postgres.

Integrate Accelerate with Prisma Client:
  import { withAccelerate } from ""@prisma/extension-accelerate""

  const prisma = new PrismaClient().$extends(withAccelerate())
  - Description: Code snippet to extend your Prisma Client instance with the Accelerate extension for enhanced query performance.

Apply Migrations:
  npx prisma migrate dev
  - Description: Command to create and apply database migrations based on your Prisma schema.

Manage Data with Prisma Studio:
  npx prisma studio
  - Description: Command to open Prisma Studio locally, allowing you to view and edit your database data. Alternatively, data can be managed online in the Prisma Console.
```

----------------------------------------

TITLE: Define Next.js Page/API Route Config as an Object
DESCRIPTION: Illustrates the requirement for `export const config` to be an object, not a primitive type, in Next.js pages or API routes. The 'Not Allowed' example shows an invalid string assignment, while the 'Allowed' example demonstrates the correct empty object initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_0

LANGUAGE: js
CODE:
```
// `config` should be an object
export const config = 'hello world'
```

LANGUAGE: js
CODE:
```
export const config = {}
```

----------------------------------------

TITLE: Initialize Next.js Umbraco Blog Project
DESCRIPTION: These commands bootstrap a new Next.js project pre-configured with the Umbraco CMS example, using different package managers. They create a directory named `umbraco-app` containing the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-umbraco umbraco-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-umbraco umbraco-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-umbraco umbraco-app
```

----------------------------------------

TITLE: Run Next.js Application in Development Mode
DESCRIPTION: Commands to install dependencies and start the Next.js development server for the Ghost CMS example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the local development server for the Next.js application. This also automatically initiates the Inngest dev server, making it accessible at http://localhost:8288.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: ReactDOM Resource Hint Methods for Next.js
DESCRIPTION: Documents the ReactDOM methods available for inserting resource hints (preload, preconnect, prefetchDNS) into the document's <head> in Next.js applications, along with their signatures and example HTML output.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_39

LANGUAGE: APIDOC
CODE:
```
ReactDOM.preload(href: string, options: { as: string })
  - Starts loading a resource early in the page rendering lifecycle.
  - Parameters:
    - href: The URL of the resource to preload.
    - options: An object containing preload options.
      - as: The type of content being preloaded (e.g., 'script', 'style', 'image').
  - Corresponding HTML output:
    <link rel=""preload"" href=""..."" as=""..."" />

ReactDOM.preconnect(href: string, options?: { crossOrigin?: string })
  - Establishes an early connection to a third-party origin.
  - Parameters:
    - href: The URL of the origin to preconnect.
    - options: Optional object containing connection options.
      - crossOrigin: Specifies how the element handles cross-origin requests.

ReactDOM.prefetchDNS(href: string)
  - Performs a DNS lookup for a given domain.
  - Parameters:
    - href: The URL of the domain for which to prefetch DNS.
```

----------------------------------------

TITLE: Copying Environment Variable Template File
DESCRIPTION: This command copies the example environment variable file (`.env.local.example`) to `.env.local`. The `.env.local` file is used to store sensitive API tokens and secrets locally and is ignored by Git, ensuring credentials are not committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Passport.js Example
DESCRIPTION: These commands initialize a new Next.js application pre-configured with the Passport.js authentication example. They use `create-next-app` with different package managers (npx, yarn, pnpm) to set up the project structure and dependencies, allowing users to quickly start developing with the provided authentication flow.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-passport with-passport-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-passport with-passport-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-passport with-passport-app
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Linaria Example
DESCRIPTION: These commands illustrate how to initialize a new Next.js project using the `create-next-app` utility, specifically pre-configured with the `with-linaria` example. Options are provided for npm, Yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-linaria/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-linaria with-linaria-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-linaria with-linaria-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-linaria with-linaria-app
```

----------------------------------------

TITLE: Install Umbraco Sample Blog Data NuGet Package
DESCRIPTION: This .NET CLI command adds the `Umbraco.Sample.Headless.Blog` NuGet package to the Umbraco project. This package provides pre-configured sample blog data, eliminating the need for manual data entry.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
dotnet add package Umbraco.Sample.Headless.Blog
```

----------------------------------------

TITLE: Copy .env.local.example for Next.js Contentful Setup
DESCRIPTION: This command copies the example environment variable file to the active .env.local file, which is ignored by Git. This is a prerequisite for configuring Contentful API keys and other secrets required by the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Install Dependencies and Run Next.js Development Server
DESCRIPTION: This snippet provides the necessary commands to install project dependencies using npm and then start the Next.js development server locally, typically accessible at localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-formspree/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
# Install dependencies
npm install

# Run next locally at localhost:3000
npm run dev
```

----------------------------------------

TITLE: Auth0 Application Configuration and Environment Variables
DESCRIPTION: Detailed instructions for configuring an Auth0 application in the dashboard and setting up the necessary environment variables in the Next.js application's `.env.local` file. These settings enable the application to communicate securely with Auth0.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Auth0 Application Settings:

  Allowed Callback URLs:
    - Description: URLs Auth0 can redirect to after successful authentication.
    - Local Example: http://localhost:3000/api/auth/callback
    - Production Example: https://myapp.com/api/auth/callback

  Allowed Logout URLs:
    - Description: URLs Auth0 can redirect to after user logout.
    - Local Example: http://localhost:3000/
    - Production Example: https://myapp.com/

Environment Variables (.env.local):

  AUTH0_ISSUER_BASE_URL:
    - Description: Your Auth0 tenant's base URL.
    - Type: string (URL)
    - Constraint: Must be prefixed with 'https://'
    - Source: Auth0 dashboard settings

  AUTH0_CLIENT_ID:
    - Description: Your Auth0 application's client ID.
    - Type: string
    - Source: Auth0 dashboard settings

  AUTH0_CLIENT_SECRET:
    - Description: Your Auth0 application's client secret.
    - Type: string
    - Source: Auth0 dashboard settings

  AUTH0_BASE_URL:
    - Description: The base URL of your Next.js application.
    - Type: string (URL)

  AUTH0_SECRET:
    - Description: A secret used for signing and encrypting session cookies.
    - Type: string
    - Constraint: Must be at least 32 characters long.
    - Recommendation: Use a generator like 'https://generate-secret.vercel.app/32'
```

----------------------------------------

TITLE: Copy Local Environment Example File
DESCRIPTION: Copies the `.env.local.example` file to `.env.local`. This is a standard practice to set up local environment variables, ensuring that sensitive information like API keys are kept out of version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-maps-embed/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Install Dependencies and Run Next.js Development Server
DESCRIPTION: This snippet demonstrates how to install project dependencies using Yarn and then start the Next.js development server. The application will be accessible locally, typically on port 3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Migrating Synchronous Next.js Request API Calls to Async
DESCRIPTION: Illustrates the necessary code changes to adapt to Next.js 15's asynchronous `cookies()` API. The 'Before' example shows synchronous usage that causes errors, while the 'After' example demonstrates the correct asynchronous pattern using `await`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-headers.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
// This function is sync and the codemod won't make it async
// because it doesn't know about every callsite that uses it.
export function getToken() {
  // @next-codemod-error ...
  return cookies().get('token')
}

import { getToken } from '.../token-utils'

export default function Page() {
  const token = getToken();
  validateToken(token)
  return ...
}
```

LANGUAGE: jsx
CODE:
```
export async function Page() {
  return (await cookies()).get(token)
}

import { getToken } from '.../token-utils'

export default async function Page() {
  const token = await getToken();
  validateToken(token)
  return ...
}
```

----------------------------------------

TITLE: Create Next.js App with graphql-react Example
DESCRIPTION: This snippet provides commands to bootstrap a new Next.js application pre-configured with the `with-graphql-react` example. It supports `npm`, `Yarn`, and `pnpm` for creating the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-react/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-graphql-react with-graphql-react-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-graphql-react with-graphql-react-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-graphql-react with-graphql-react-app
```

----------------------------------------

TITLE: Next.js Preview Mode API Endpoint
DESCRIPTION: Describes the API endpoint used to activate Next.js's preview mode. This endpoint requires a secret for authentication and a slug to identify the content to be previewed, allowing users to view unpublished content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
http://localhost:3000/api/preview?secret=<secret>&slug=<slug>
  - <secret>: The string configured for TAKESHAPE_PREVIEW_SECRET in .env.local.
  - <slug>: The unique identifier (slug attribute) of the post or content from TakeShape.
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Prepr CMS Example
DESCRIPTION: These commands initialize a new Next.js application using the `create-next-app` utility, specifically leveraging the `cms-prepr` example. This sets up the basic project structure and integrates with Prepr CMS for content management.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-prepr cms-prepr-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-prepr cms-prepr-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-prepr cms-prepr-app
```

----------------------------------------

TITLE: Copy Environment Variable Example File
DESCRIPTION: This command copies the example environment variable file (`.env.local.example`) to `.env.local`. The `.env.local` file is used to store sensitive configuration details like API keys and project aliases, which are typically ignored by Git for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Start Next.js Development Server
DESCRIPTION: These commands initiate the Next.js development server, making the application accessible locally. Examples are provided for npm, yarn, pnpm, and bun package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md#_snippet_10

LANGUAGE: npm
CODE:
```
npm run dev
```

LANGUAGE: yarn
CODE:
```
yarn dev
```

LANGUAGE: pnpm
CODE:
```
pnpm run dev
```

LANGUAGE: bun
CODE:
```
bun run dev
```

----------------------------------------

TITLE: Bootstrap Next.js App with Clerk Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using the `create-next-app` utility, specifically leveraging the `with-clerk` example. They provide options for `npx`, `yarn`, and `pnpm` to quickly set up an application integrated with Clerk for authentication and user management.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-clerk/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-clerk with-clerk-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-clerk with-clerk-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-clerk with-clerk-app
```

----------------------------------------

TITLE: Bootstrap Next.js HTTP2 example
DESCRIPTION: Commands to initialize a new Next.js project using `create-next-app` with the `with-http2` example, demonstrating usage with `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-http2/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-http2 with-http2-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-http2 with-http2-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-http2 with-http2-app
```

----------------------------------------

TITLE: Example of Unmigratable Case with Codemod Error
DESCRIPTION: This TypeScript snippet illustrates a scenario where the Next.js codemod cannot automatically migrate synchronous API access. It leaves a `@next-codemod-error` comment, indicating that manual intervention is required to make the function asynchronous and await the API call.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/sync-dynamic-apis.mdx#_snippet_4

LANGUAGE: ts
CODE:
```
export function MyCookiesComponent() {
  const c =
    /* @next-codemod-error Manually await this call and refactor the function to be async */
    cookies()
  return c.get('name')
}
```

----------------------------------------

TITLE: Initialize Next.js Project with MongoDB Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the `create-next-app` utility, specifically leveraging the `with-mongodb` example template. This sets up a pre-configured project structure for MongoDB integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mongodb with-mongodb-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mongodb with-mongodb-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mongodb with-mongodb-app
```

----------------------------------------

TITLE: Example .env.local Configuration for Next.js Contentful
DESCRIPTION: This snippet shows the structure of the .env.local file, which holds sensitive API keys and secrets for Contentful integration. These variables are crucial for the Next.js application to connect to the Contentful Space and manage content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
CONTENTFUL_SPACE_ID=...
CONTENTFUL_ACCESS_TOKEN=...
CONTENTFUL_PREVIEW_ACCESS_TOKEN=...
CONTENTFUL_PREVIEW_SECRET=...
CONTENTFUL_REVALIDATE_SECRET=...
```

----------------------------------------

TITLE: Directly Export Next.js Page/API Route Config
DESCRIPTION: Explains that `export const config` must be directly defined and exported within the page or API route file, disallowing re-exporting from another module. The 'Not Allowed' example shows an invalid re-export, while the 'Allowed' example demonstrates direct, empty object initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_3

LANGUAGE: js
CODE:
```
// Re-exported `config` is not allowed
export { config } from '../config'
```

LANGUAGE: js
CODE:
```
export const config = {}
```

----------------------------------------

TITLE: Bootstrap a Next.js Cloudinary Example App
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project based on the `with-cloudinary` example using different package managers: `npx` (npm), `yarn`, or `pnpm`. This sets up the project structure and dependencies required to run the image gallery application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cloudinary/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cloudinary with-cloudinary-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cloudinary with-cloudinary-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cloudinary with-cloudinary-app
```

----------------------------------------

TITLE: Initialize Next.js project with rbx and Bulma Pro example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the `create-next-app` utility with the `with-rbx-bulma-pro` example. It provides options for using npx, yarn, or pnpm to execute the command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rbx-bulma-pro/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-rbx-bulma-pro with-rbx-bulma-pro-app
```

----------------------------------------

TITLE: Perform a redirect with NextResponse
DESCRIPTION: Demonstrates how to use `NextResponse.redirect()` to redirect an incoming request to a new URL, including an example of modifying the URL before redirection.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_8

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

return NextResponse.redirect(new URL('/new', request.url))
```

LANGUAGE: typescript
CODE:
```
import { NextResponse } from 'next/server'

// Given an incoming request...
const loginUrl = new URL('/login', request.url)
// Add ?from=/incoming-url to the /login URL
loginUrl.searchParams.set('from', request.nextUrl.pathname)
// And redirect to the new URL
return NextResponse.redirect(loginUrl)
```

----------------------------------------

TITLE: Configure Builder.io Public API Key
DESCRIPTION: Sets the `BUILDER_PUBLIC_KEY` environment variable, which is essential for connecting the Next.js application to your Builder.io space. This key should be obtained after creating a Builder.io space.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
BUILDER_PUBLIC_KEY=...
```

----------------------------------------

TITLE: Configure Content Lists and Dynamic Page Lists in Agility CMS
DESCRIPTION: This section describes how to set up content lists and dynamic page lists in Agility CMS, linking them to previously defined content definitions. It covers the configuration for an 'Authors' content list and a 'Posts' dynamic page list.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Authors Content List:
  Type: Content List
  Content Definition: Author
  Display Name: Authors
  Reference Name: authors

Posts Dynamic Page List:
  Type: Dynamic Page List
  Content Definition: Post
  Display Name: Posts
  Reference Name: posts
```

----------------------------------------

TITLE: Bootstrap Next.js App with Tigris Example
DESCRIPTION: Commands to initialize a new Next.js project using the `create-next-app` utility with the `with-tigris` example. This allows for quick setup of a new application pre-configured with Tigris integration, supporting npm, Yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-tigris/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-tigris tigris-next-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-tigris tigris-next-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-tigris tigris-next-app
```

----------------------------------------

TITLE: Configure Ghost CMS API Environment Variables
DESCRIPTION: Example of environment variables required to connect the Next.js application to a Ghost CMS instance. These should be placed in a .env.local file.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-ghost/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
GHOST_API_URL=...
GHOST_API_KEY=...
```

----------------------------------------

TITLE: Run Next.js application in development mode
DESCRIPTION: Commands to install project dependencies and then start the Next.js development server. This allows local testing and development of the application, making it accessible via `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Define a Basic GET Route Handler in Next.js App Router
DESCRIPTION: Illustrates the basic convention for defining a GET request handler in a `route.ts` or `route.js` file within the Next.js `app` directory. This handler uses the Web Request API to process incoming requests, serving as the entry point for handling GET requests to the defined route.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/15-route-handlers-and-middleware.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export async function GET(request: Request) {}
```

LANGUAGE: JavaScript
CODE:
```
export async function GET(request) {}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: This snippet provides the commands to start the Next.js development server locally. Running this command will launch the application, typically accessible at `http://localhost:3000`, allowing developers to preview changes and interact with the blog during development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: create-next-app CLI Options Reference
DESCRIPTION: Comprehensive reference for command-line arguments and options available with `create-next-app` for non-interactive project setup. This includes flags for configuring TypeScript, JavaScript, Tailwind CSS, ESLint, App Router, source directory, Turbopack, import aliases, and specifying package managers or examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Usage: create-next-app [project-directory] [options]

Options:
  -V, --version                        output the version number
  --ts, --typescript                   Initialize as a TypeScript project. (default)
  --js, --javascript                   Initialize as a JavaScript project.
  --tailwind                           Initialize with Tailwind CSS config. (default)
  --eslint                             Initialize with ESLint config.
  --app                                Initialize as an App Router project.
  --src-dir                            Initialize inside a `src/` directory.
  --turbopack                          Enable Turbopack by default for development.
  --import-alias <alias-to-configure>  Specify import alias to use (default ""@/*"").
  --empty                              Initialize an empty project.
  --use-npm                            Explicitly tell the CLI to bootstrap the application using npm
  --use-pnpm                           Explicitly tell the CLI to bootstrap the application using pnpm
  --use-yarn                           Explicitly tell the CLI to bootstrap the application using Yarn
  --use-bun                            Explicitly tell the CLI to bootstrap the application using Bun
  -e, --example [name]|[github-url]    An example to bootstrap the app with. You can use an example name
                                       from the official Next.js repo or a GitHub URL. The URL can use
                                       any branch and/or subdirectory
  --example-path <path-to-example>     In a rare case, your GitHub URL might contain a branch name with
                                       a slash (e.g. bug/fix-1) and the path to the example (e.g. foo/bar).
                                       In this case, you must specify the path to the example separately:
                                       --example-path foo/bar
  --reset-preferences                  Explicitly tell the CLI to reset any stored preferences
  --skip-install                       Explicitly tell the CLI to skip installing packages
  --disable-git                        Explicitly tell the CLI to skip initializing a git repository.
  --yes                                Use previous preferences or defaults for all options that were not
                                       explicitly specified, without prompting.
  -h, --help                           display help for command
```

----------------------------------------

TITLE: Next.js API Route Request Object in Preview Mode
DESCRIPTION: Describes the `req` object properties (`preview`, `previewData`) available within Next.js API routes when preview mode is active, enabling conditional logic and data access based on the preview status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_14

LANGUAGE: APIDOC
CODE:
```
req: Object
  - preview: boolean
    - Description: Will be `true` if the API route is requested with preview mode cookies set.
  - previewData: any
    - Description: The same as the argument used for `setPreviewData`. Contains session information.
```

----------------------------------------

TITLE: Initialize Local Environment Variables File
DESCRIPTION: This `bash` command creates a local environment configuration file (`.env.local`) by copying an example template. This file is crucial for storing sensitive API keys and is automatically ignored by Git for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Example Sanity Next.js Environment Variables
DESCRIPTION: This snippet provides a complete example of the `.env.local` file after successful Sanity setup and token addition. It shows the typical structure and values for `NEXT_PUBLIC_SANITY_PROJECT_ID`, `NEXT_PUBLIC_SANITY_DATASET`, and `SANITY_API_READ_TOKEN`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
NEXT_PUBLIC_SANITY_PROJECT_ID=""r0z1eifg""
NEXT_PUBLIC_SANITY_DATASET=""blog-vercel""
SANITY_API_READ_TOKEN=""sk...""
```

----------------------------------------

TITLE: Bootstrap Next.js Electron TypeScript Example Project
DESCRIPTION: Commands to initialize a new project based on the Next.js Electron TypeScript example. Choose your preferred package manager: npx, yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-electron-typescript with-electron-typescript-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-electron-typescript with-electron-typescript-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-electron-typescript with-electron-typescript-app
```

----------------------------------------

TITLE: Generate Author URLs for WordPress API
DESCRIPTION: Generates a list of author URLs by fetching WordPress users based on provided input arguments. This function is intended to be part of a custom REST API endpoint for authors, providing their permalinks for use in a headless application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_10

LANGUAGE: php
CODE:
```
<?php
function wsra_generate_author_api()
{
  [$args] = wsra_get_user_inputs();
  $author_urls = array();
  $authors =  get_users($args);
  foreach ($authors as $author) {
    $fullUrl = esc_url(get_author_posts_url($author->ID));
```

----------------------------------------

TITLE: Run Temporal Next.js Application Locally
DESCRIPTION: Commands to start the necessary services for local development of the Temporal Next.js application. This includes bringing up the Temporal Server with Docker Compose and running the Next.js development server and Temporal worker processes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-temporal/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
docker compose up
```

LANGUAGE: Bash
CODE:
```
npm run dev
```

LANGUAGE: Bash
CODE:
```
npm run build-worker.watch
```

LANGUAGE: Bash
CODE:
```
npm run start-worker
```

----------------------------------------

TITLE: Bootstrap Next.js Sitecore XM Cloud Example Project
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the Sitecore XM Cloud example using different package managers. They leverage `create-next-app` to quickly set up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

----------------------------------------

TITLE: Run Next.js Application in Development Mode
DESCRIPTION: These commands install project dependencies and then start the Next.js development server. The application will be accessible locally, allowing for testing of the MongoDB connection and application functionality.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Copy Environment Variables File
DESCRIPTION: Copies the example environment variables file (`.env.local.example`) to a local `.env.local` file. This file is used to store sensitive configuration like API keys and project IDs, and is ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrap Next.js App with Portals Example
DESCRIPTION: Instructions to bootstrap a Next.js application pre-configured with the React Portals example using `create-next-app` via npx, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-portals with-portals-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-portals with-portals-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-portals with-portals-app
```

----------------------------------------

TITLE: Start Next.js Development Server
DESCRIPTION: Launch the Next.js application in development mode using npm, Yarn, or pnpm. The application will typically be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Initialize Next.js Project with Jest and Babel Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using `create-next-app` with the `with-jest-babel` example. This setup configures Jest to work with Babel, providing a starting point for testing Next.js projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest-babel/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-jest-babel with-jest-babel-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-jest-babel with-jest-babel-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-jest-babel with-jest-babel-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server in development mode, making the application accessible locally. This can be done using npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Create Next.js app with Slate.js example
DESCRIPTION: Instructions on how to bootstrap a Next.js application pre-configured with the Slate.js example using `create-next-app` via `npx`, `yarn`, or `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-slate/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-slate with-slate-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-slate with-slate-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-slate with-slate-app
```

----------------------------------------

TITLE: Running Next.js Development Server with pnpm
DESCRIPTION: This command first installs all project dependencies using pnpm, then starts the Next.js development server. This allows local development and live reloading of the application, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
pnpm install && pnpm dev
```

----------------------------------------

TITLE: Next.js API Route Response Helper Methods
DESCRIPTION: This section documents the Express.js-like helper methods available on the `res` (Server Response) object in Next.js API Routes. These methods simplify common response operations like setting status codes, sending JSON, redirecting, and revalidating pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_10

LANGUAGE: APIDOC
CODE:
```
res.status(code)
  - Sets the HTTP status code for the response.
  - Parameters:
    - code: A valid HTTP status code (e.g., 200, 404).
  - Returns: The `res` object for chaining.

res.json(body)
  - Sends a JSON response.
  - Parameters:
    - body: A serializable JavaScript object to be sent as JSON.
  - Returns: The `res` object.

res.send(body)
  - Sends the HTTP response.
  - Parameters:
    - body: The response body, which can be a `string`, an `object`, or a `Buffer`.
  - Returns: The `res` object.

res.redirect([status,] path)
  - Redirects the client to a specified path or URL.
  - Parameters:
    - status (optional): A valid HTTP status code for the redirect (defaults to 307 ""Temporary redirect"").
    - path: The URL or path to redirect to.
  - Returns: The `res` object.

res.revalidate(urlPath)
  - Triggers on-demand revalidation for a page using `getStaticProps`.
  - Parameters:
    - urlPath: A string representing the path of the page to revalidate.
  - Returns: The `res` object.
```

----------------------------------------

TITLE: Running Next.js Development Server with npm
DESCRIPTION: This command first installs all project dependencies using npm, then starts the Next.js development server. This allows local development and live reloading of the application, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_11

LANGUAGE: bash
CODE:
```
npm install && npm run dev
```

----------------------------------------

TITLE: Configure Environment Variables for ButterCMS API Key
DESCRIPTION: Copies the example environment file (`.env.local.example`) to a local environment file (`.env.local`). This file is used to set the `NEXT_PUBLIC_BUTTER_CMS_API_KEY` required for connecting to ButterCMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Ingest Blog Post Data to Enterspeed via cURL
DESCRIPTION: This cURL command sends a POST request to the Enterspeed Ingest API to create a 'blogPost' content type. It includes detailed properties like title, featured image, date, author, categories, excerpt, and full HTML content for a specific blog post, linking it to the 'blog' parent via `originParentId`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
curl --location --request POST 'https://api.enterspeed.com/ingest/v2/2' \
--header 'X-Api-Key: [YOUR DATA SOUCE API KEY]' \
--header 'Content-Type: application/json' \
--data-raw '{
  ""type"": ""blogPost"",
  ""url"": ""/preview-mode-for-static-generation"",
  ""originParentId"": ""1"",
  ""properties"": {
      ""title"": ""Preview Mode for Static Generation"",
      ""featuredImage"": ""https://res.cloudinary.com/enterspeed/image/upload/v1648804237/Next.js%20-%20Example%20With%20Enterspeed/cover5.webp"",
      ""date"": ""2022-04-01T01:07:42"",
      ""author"": {
          ""name"": ""Vercel Team"",
          ""avatar"": {
              ""url"": ""https://res.cloudinary.com/enterspeed/image/upload/v1648804719/Next.js%20-%20Example%20With%20Enterspeed/vercel-avatar.webp""
          }
      },
      ""categories"": [""Next.js"", ""Static Generation""],
      ""excerpt"": ""Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilisi morbi tempus."",
      ""content"": ""<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Praesent elementum facilisis leo vel fringilla est ullamcorper eget. At imperdiet dui accumsan sit amet nulla facilisi morbi tempus. Praesent elementum facilisis leo vel fringilla. Congue mauris rhoncus aenean vel. Egestas sed tempus urna et pharetra pharetra massa massa ultricies.</p><p>Venenatis cras sed felis eget velit. Consectetur libero id faucibus nisl tincidunt. Gravida in fermentum et sollicitudin ac orci phasellus egestas tellus. Volutpat consequat mauris nunc congue nisi vitae. Id aliquet risus feugiat in ante metus dictum at tempor. Sed blandit libero volutpat sed cras. Sed odio morbi quis commodo odio aenean sed adipiscing. Velit euismod in pellentesque massa placerat. Mi bibendum neque egestas congue quisque egestas diam in arcu. Nisi lacus sed viverra tellus in. Nibh cras pulvinar mattis nunc sed. Luctus accumsan tortor posuere ac ut consequat semper viverra. Fringilla ut morbi tincidunt augue interdum velit euismod.</p><h2>Lorem Ipsum</h2><p>Tristique senectus et netus et malesuada fames ac turpis. Ridiculus mus mauris vitae ultricies leo integer malesuada nunc vel. In mollis nunc sed id semper. Egestas tellus rutrum tellus pellentesque. Phasellus vestibulum lorem sed risus ultricies tristique nulla. Quis blandit turpis cursus in hac habitasse platea dictumst quisque. Eros donec ac odio tempor orci dapibus ultrices. Aliquam sem et tortor consequat id porta nibh. Adipiscing elit duis tristique sollicitudin nibh sit amet commodo nulla. Diam vulputate ut pharetra sit amet. Ut tellus elementum sagittis vitae et leo. Arcu non odio euismod lacinia at quis risus sed vulputate.</p>"",
      ""tags"": [""SSG"", ""Preview""]
  }
}'
```

----------------------------------------

TITLE: Initialize Next.js App with Mantine Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js project using the `create-next-app` utility, specifically leveraging the `with-mantine` example template. This sets up a pre-configured application showcasing the integration of the Mantine React component library, using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mantine/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mantine with-mantine-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mantine with-mantine-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mantine with-mantine-app
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Prismic Example
DESCRIPTION: This snippet demonstrates how to initialize a new Next.js project using the `create-next-app` CLI tool, specifically leveraging the Prismic CMS example. It provides commands for npm, Yarn, and pnpm to quickly set up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prismic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-prismic cms-prismic-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-prismic cms-prismic-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-prismic cms-prismic-app
```

----------------------------------------

TITLE: Bootstrap Next.js Blog Example with create-next-app
DESCRIPTION: This command demonstrates how to initialize a new Next.js project using the 'blog' example template. It supports various package managers like npm, Yarn, and pnpm, providing a quick way to set up a pre-configured blog application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example blog my-blog
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example blog my-blog
```

LANGUAGE: bash
CODE:
```
pnpm create-next-app --example blog my-blog
```

----------------------------------------

TITLE: Initialize Next.js Project with Webiny Example
DESCRIPTION: These commands bootstrap a new Next.js application pre-configured with the Webiny CMS example. Choose your preferred package manager (npm, Yarn, or pnpm) to create the project directory and download the necessary files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-webiny/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-webiny cms-webiny-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-webiny cms-webiny-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-webiny cms-webiny-app
```

----------------------------------------

TITLE: Copy Next.js Environment Variable Example File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`, which is used to store local environment variables for a Next.js application. This ensures that sensitive information like API keys are not committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Ingest Blog Collection Data to Enterspeed via cURL
DESCRIPTION: This cURL command sends a POST request to the Enterspeed Ingest API to create a 'blog' content type. This type acts as a collection or parent for individual blog posts, defining the base URL for the blog section within the Enterspeed data model.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
curl --location --request POST 'https://api.enterspeed.com/ingest/v2/1' \
--header 'X-Api-Key: [YOUR DATA SOUCE API KEY]' \
--header 'Content-Type: application/json' \
--data-raw '{
  ""type"": ""blog"",
  ""url"": ""/blog""
}'
```

----------------------------------------

TITLE: Create Next.js App with React-GA4 Example
DESCRIPTION: Instructions to bootstrap a new Next.js application pre-configured with the `with-react-ga4` example using `npx`, `yarn`, or `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-ga4/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-ga4 with-react-ga-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-ga4 with-react-ga-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-ga4 with-react-ga-app
```

----------------------------------------

TITLE: Handle Client Component Imports and Module Evaluation in Next.js
DESCRIPTION: This JavaScript snippet illustrates how Next.js imports and evaluates client components (`ClientComponent`, `MyModuleClientComponent`) within a server-side API route (`GET` function). It demonstrates the use of `NextResponse` for JSON responses and shows module re-export patterns, potentially related to build optimizations like Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_4

LANGUAGE: js
CODE:
```
import { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';
import { NextResponse } from 'next/server';
import { ClientComponent } from '../../ClientComponent';
import 'next/server';
import '../../ClientComponent';
import 'my-module/MyModuleClientComponent';
function GET() {
    return NextResponse.json({
        clientComponent: typeof ClientComponent,
        myModuleClientComponent: typeof MyModuleClientComponent
    });
}
export { GET };
export { GET as a } from ""__TURBOPACK_VAR__"" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Bootstrap Next.js App with Knex Example
DESCRIPTION: Use create-next-app with npm, Yarn, or pnpm to quickly set up a new Next.js project pre-configured with the Knex example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-knex with-knex-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-knex with-knex-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-knex with-knex-app
```

----------------------------------------

TITLE: Perform Redirects in Next.js API Routes
DESCRIPTION: Shows how to redirect a client to a specified path or URL from a Next.js API route, typically after a successful operation like form submission. The example uses `res.redirect()` with an HTTP status code (e.g., 307 Temporary Redirect) and includes error handling for failed operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_14

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const { name, message } = req.body

  try {
    await handleFormInputAsync({ name, message })
    res.redirect(307, '/')
  } catch (err) {
    res.status(500).send({ error: 'Failed to fetch data' })
  }
}
```

LANGUAGE: JavaScript
CODE:
```
export default async function handler(req, res) {
  const { name, message } = req.body

  try {
    await handleFormInputAsync({ name, message })
    res.redirect(307, '/')
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: This command executes the `dev` script defined in `package.json` using Yarn, starting the Next.js development server. It provides the same functionality as `npm run dev` but uses Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Initialize Next.js Project with Ably Example
DESCRIPTION: These commands demonstrate how to quickly set up a new Next.js project pre-configured with the Ably integration example using `create-next-app` via npm, Yarn, or pnpm. This provides a ready-to-run boilerplate for developing realtime applications with Ably.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ably/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-ably with-ably-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-ably with-ably-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-ably with-ably-app
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Firebase Hosting Example
DESCRIPTION: These commands use `create-next-app` to initialize a new Next.js project based on the `with-firebase-hosting` example. Users can choose their preferred package manager (npm, Yarn, or pnpm) to set up the project structure quickly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-firebase-hosting with-firebase-hosting-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-firebase-hosting with-firebase-hosting-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-firebase-hosting with-firebase-hosting-app
```

----------------------------------------

TITLE: Start Next.js Local Development Server
DESCRIPTION: This command initiates the Next.js local development server, making the application accessible in a web browser, typically at `http://localhost:3000/`. It enables features like hot-reloading and provides a development environment for building and testing the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

----------------------------------------

TITLE: Experimental NFT Plugin Configuration Options
DESCRIPTION: Detailed documentation for the configuration options available when using createNodeFileTrace. These options allow customization of the file tracing behavior, including working directories, additional paths, and logging verbosity.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/packages/turbo-tracing-next-plugin/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
cwd?: string
  - Default: process.cwd()
  - Description: Specifies the directory to run experimental nft. You can override it to specify another directory.
contextDirectory?: string
  - Default: . (relative to cwd)
  - Description: The directory where the `node_modules` directory is located. If in a monorepo, set to the monorepo's root. Default respects `PROJECT_CWD` and `npm_config_local_prefix` environment variables.
path?: string
  - Description: An additional path which will be appended into the `PATH` environment variable.
log?.all?: boolean
  - Default: false
  - Description: Whether to show all logs generated by the plugin.
log?.level?: string
  - Default: error
  - Description: The log level for messages. Controls the verbosity of output.
log?.detail?: boolean
  - Default: false
  - Description: Whether to expand the log details for more verbose information.
```

----------------------------------------

TITLE: Set Cache-Control Header in Next.js API Routes
DESCRIPTION: Demonstrates how to set the 'Cache-Control' header for an API Route response using 'res.setHeader' to control caching behavior. This example sets a 's-maxage' of 86400 seconds (1 day) for the response.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_10

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type ResponseData = {
  message: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<ResponseData>
) {
  res.setHeader('Cache-Control', 's-maxage=86400')
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

LANGUAGE: js
CODE:
```
export default function handler(req, res) {
  res.setHeader('Cache-Control', 's-maxage=86400')
  res.status(200).json({ message: 'Hello from Next.js!' })
}
```

----------------------------------------

TITLE: Install and Configure Firebase CLI Tools
DESCRIPTION: These commands guide the user through installing the Firebase CLI globally, logging into their Firebase account, and listing available projects to identify the project ID. This is a prerequisite for deploying Next.js applications to Firebase.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm i -g firebase-tools
```

LANGUAGE: bash
CODE:
```
firebase login
```

LANGUAGE: bash
CODE:
```
firebase projects:list
```

----------------------------------------

TITLE: Next.js useSearchParams Hook and URLSearchParams API Reference
DESCRIPTION: Detailed API documentation for the `useSearchParams` hook, including its signature, parameters, and the methods available on the returned read-only `URLSearchParams` interface for querying URL parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
useSearchParams()
  - Description: A Client Component hook that lets you read the current URL's query string.
  - Parameters: None.
  - Returns: A read-only version of the URLSearchParams interface.

URLSearchParams Interface Methods (returned by useSearchParams):

URLSearchParams.get(name: string)
  - Description: Returns the first value associated with the search parameter 'name'.
  - Parameters:
    - name: The name of the search parameter.
  - Returns: The first value as a string, or null if not found.
  - Examples:
    - URL: /dashboard?a=1, searchParams.get(""a"") -> '1'
    - URL: /dashboard?a=, searchParams.get(""a"") -> ''
    - URL: /dashboard?b=3, searchParams.get(""a"") -> null
    - URL: /dashboard?a=1&a=2, searchParams.get(""a"") -> '1' (use getAll() for all values)

URLSearchParams.has(name: string)
  - Description: Returns a boolean value indicating if the given parameter 'name' exists.
  - Parameters:
    - name: The name of the search parameter.
  - Returns: true if the parameter exists, false otherwise.
  - Examples:
    - URL: /dashboard?a=1, searchParams.has(""a"") -> true
    - URL: /dashboard?b=3, searchParams.has(""a"") -> false

Other read-only methods:
  - URLSearchParams.getAll(name: string)
  - URLSearchParams.keys()
  - URLSearchParams.values()
  - URLSearchParams.entries()
  - URLSearchParams.forEach(callback: Function)
  - URLSearchParams.toString()
```

----------------------------------------

TITLE: Complete Next.js API Route for Manual Draft Mode Testing
DESCRIPTION: This is a full example of a Next.js API route (`pages/api/draft.ts`) designed for manually testing Draft Mode activation. When accessed, it enables Draft Mode by setting the necessary cookie and sends a confirmation message, useful for verifying the setup in a browser.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/draft-mode.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
// simple example for testing it manually from your browser.
export default function handler(req, res) {
  res.setDraftMode({ enable: true })
  res.end('Draft mode is enabled')
}
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Joi Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the Joi validation example using different package managers: `npx`, `yarn`, or `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-joi/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-joi with-joi-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-joi with-joi-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-joi with-joi-app
```

----------------------------------------

TITLE: Initialize Next.js Project with Apollo and Redux Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the `create-next-app` utility, pre-configured with the Apollo and Redux integration example. Choose your preferred package manager (npm, Yarn, or pnpm) to execute the command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apollo-and-redux/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-apollo-and-redux with-apollo-and-redux-app
```

----------------------------------------

TITLE: Migrating Next.js headers API to Async Usage
DESCRIPTION: Illustrates the change in Next.js's `headers` API from synchronous to asynchronous. Includes examples for the recommended `await headers()` approach and a temporary synchronous fallback with type assertion.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import { headers } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = await headers()
const userAgent = headersList.get('user-agent')
```

LANGUAGE: tsx
CODE:
```
import { headers, type UnsafeUnwrappedHeaders } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = headers() as unknown as UnsafeUnwrappedHeaders
// will log a warning in dev
const userAgent = headersList.get('user-agent')
```

LANGUAGE: jsx
CODE:
```
import { headers } from 'next/headers'

// Before
const headersList = headers()
const userAgent = headersList.get('user-agent')

// After
const headersList = headers()
// will log a warning in dev
const userAgent = headersList.get('user-agent')
```

----------------------------------------

TITLE: Run Next.js Application in Development Mode
DESCRIPTION: Commands to install project dependencies and start the Next.js application in development mode. The application will typically be accessible at http://localhost:3000.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Define Basic Next.js GET Route Handler
DESCRIPTION: This snippet demonstrates how to create a basic Route Handler for `GET` requests in Next.js using the `route.ts` or `route.js` file convention. It handles incoming `GET` requests to the corresponding path (e.g., `/api`).

Note: The `request` object provides access to incoming HTTP request details.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
export function GET(request: Request) {}
```

LANGUAGE: js
CODE:
```
export function GET(request) {}
```

----------------------------------------

TITLE: Initialize Next.js Project with Inngest Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Inngest example. This uses `create-next-app` with the `--example inngest` flag, creating a directory named `inngest-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/inngest/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example inngest inngest-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example inngest inngest-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example inngest inngest-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example inngest inngest-app
```

----------------------------------------

TITLE: Running Next.js Application in Development Mode
DESCRIPTION: These commands install the necessary project dependencies and then start the Next.js development server. This allows you to view and interact with your application locally, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm install && npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install && yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm install && pnpm dev
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Plasmic Example
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the Plasmic CMS example using npm, Yarn, or pnpm. This sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-plasmic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-plasmic cms-plasmic-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-plasmic cms-plasmic-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-plasmic cms-plasmic-app
```

----------------------------------------

TITLE: Bootstrap Next.js Redis Example Project
DESCRIPTION: These commands initialize a new Next.js project named 'roadmap' using the 'with-redis' example template. This sets up a basic application demonstrating Redis integration for data storage, suitable for a roadmap voting application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-redis roadmap
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-redis roadmap
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-redis roadmap
```

----------------------------------------

TITLE: Configure Permissions-Policy Header in Next.js
DESCRIPTION: This header allows developers to control which browser features and APIs can be used by the document and its iframes. Formerly known as `Feature-Policy`, the example configuration explicitly disables access to the camera, microphone, geolocation, and browsing-topics APIs.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/headers.mdx#_snippet_16

LANGUAGE: js
CODE:
```
{
  key: 'Permissions-Policy',
  value: 'camera=(), microphone=(), geolocation=(), browsing-topics=()'
}
```

----------------------------------------

TITLE: Copy Environment Variables Configuration File
DESCRIPTION: Command to duplicate the example environment variables file (.env.local.example) to the active configuration file (.env.local). This file is crucial for setting up API URLs and will be ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitefinity/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Next.js API Route Built-in Request Helpers
DESCRIPTION: This entry documents the built-in request helpers provided by Next.js API Routes, which automatically parse incoming request data. It details `req.cookies`, `req.query`, and `req.body`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
API Routes provide built-in request helpers which parse the incoming request (`req`):
- req.cookies: An object containing the cookies sent by the request. Defaults to {}
- req.query: An object containing the query string. Defaults to {}
- req.body: An object containing the body parsed by content-type, or null if no body was sent
```

----------------------------------------

TITLE: Starting Redis Stack Server with Docker Compose
DESCRIPTION: This command starts the Redis Stack server in detached mode (`-d`) using Docker Compose. This is a prerequisite for the Next.js application to utilize Redis as its shared cache, typically used for local development environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
docker compose up -d
```

----------------------------------------

TITLE: Running Next.js and TinaCMS in Development Mode
DESCRIPTION: These commands install project dependencies and then start the Next.js application in development mode, along with the TinaCMS development server. This allows for local content editing and real-time preview of changes.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run tina-dev

# or

yarn install
yarn tina-dev
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with TinaCMS using pnpm
DESCRIPTION: This command initializes a new Next.js application using the `create-next-app` utility via pnpm, specifically bootstrapping it with the `cms-tina` example. It creates a new directory named `cms-tina-app` containing the project files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-tina cms-tina-app
```

----------------------------------------

TITLE: Deploy Next.js and Supabase Starter Kit to Vercel
DESCRIPTION: This HTML snippet provides a 'Deploy with Vercel' button that automates the deployment process of the Next.js and Supabase starter kit. Clicking this button clones the repository, sets up a new Vercel project, and configures necessary environment variables, optionally creating a new Supabase project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#_snippet_0

LANGUAGE: html
CODE:
```
<a href=""https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&project-name=nextjs-with-supabase&repository-name=nextjs-with-supabase&demo-title=nextjs-with-supabase&demo-description=This+starter+configures+Supabase+Auth+to+use+cookies%2C+making+the+user%27s+session+available+throughout+the+entire+Next.js+app+-+Client+Components%2C+Server+Components%2C+Route+Handlers%2C+Server+Actions+and+Middleware.&demo-url=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2F&external-id=https%3A%2F%2Fgithub.com%2Fvercel%2Fnext.js%2Ftree%2Fcanary%2Fexamples%2Fwith-supabase&demo-image=https%3A%2F%2Fdemo-nextjs-with-supabase.vercel.app%2Fopengraph-image.png""><img alt=""Deploy with Vercel"" src=""https://vercel.com/button""></a>
```

----------------------------------------

TITLE: Creating Next.js App with pnpm
DESCRIPTION: This command initializes a new Next.js project named 'hello-world-app' using `pnpm create` and the 'hello-world' example template. It sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example hello-world hello-world-app
```

----------------------------------------

TITLE: Bootstrap Next.js Application with urql Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using the `create-next-app` utility, pre-configured with the `with-urql` example. You can choose your preferred package manager among npm, Yarn, or pnpm to execute the command.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-urql/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-urql with-urql-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-urql with-urql-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-urql with-urql-app
```

----------------------------------------

TITLE: Start Redis Stack Server with Docker Compose
DESCRIPTION: This command starts the Redis Stack server in detached mode using Docker Compose. This provides the necessary Redis instance for the Next.js cache handler to connect to. Ensure Docker is installed and the `compose.yaml` file is present in your project directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker compose up -d
```

----------------------------------------

TITLE: Bootstrap Next.js App with styled-components Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `create-next-app` utility, specifically bootstrapping it with the `with-styled-components` example. This allows developers to quickly set up a project pre-configured for styled-components integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-components/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-styled-components with-styled-components-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-styled-components with-styled-components-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-styled-components with-styled-components-app
```

----------------------------------------

TITLE: Next.js Bundled Module Part 0 (GET Handler)
DESCRIPTION: Represents a bundled segment of a Next.js module, containing the `NextResponse` import, the `GET` API route handler, and various export declarations, including Turbopack-specific re-exports. This part is central to handling incoming GET requests in the application's server-side logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_4

LANGUAGE: javascript
CODE:
```
import { NextResponse } from ""next/server"";
import ""next/server"";
const GET = (req)=>{
    return NextResponse.json({
        pathname: req.nextUrl.pathname
    });
};
export { GET };
export { GET as a } from ""__TURBOPACK_VAR__"" assert {
    __turbopack_var__: true
};
export { };
```

----------------------------------------

TITLE: Bootstrap Next.js App with Kea Example
DESCRIPTION: This snippet provides commands to initialize a new Next.js project pre-configured with the Kea state management library. It demonstrates how to use `create-next-app` with `npx`, `yarn`, and `pnpm` to clone the `with-kea` example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-kea/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-kea with-kea-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-kea with-kea-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-kea with-kea-app
```

----------------------------------------

TITLE: Migrating Next.js cookies API to Async Usage
DESCRIPTION: Demonstrates the transition of the `cookies` API in Next.js from synchronous to asynchronous usage. Provides examples for both the recommended `await cookies()` pattern and a temporary synchronous workaround using type assertion.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
import { cookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = await cookies()
const token = cookieStore.get('token')
```

LANGUAGE: tsx
CODE:
```
import { cookies, type UnsafeUnwrappedCookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = cookies() as unknown as UnsafeUnwrappedCookies
// will log a warning in dev
const token = cookieStore.get('token')
```

LANGUAGE: jsx
CODE:
```
import { cookies } from 'next/headers'

// Before
const cookieStore = cookies()
const token = cookieStore.get('token')

// After
const cookieStore = cookies()
// will log a warning in dev
const token = cookieStore.get('token')
```

----------------------------------------

TITLE: Create Next.js App with styled-jsx Example
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js project pre-configured with the `styled-jsx` example. It uses `create-next-app` with different package managers (npm, Yarn, pnpm) to quickly set up the development environment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styled-jsx/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-styled-jsx with-styled-jsx-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-styled-jsx with-styled-jsx-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-styled-jsx with-styled-jsx-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: These commands start the Next.js application in development mode, making it accessible locally. The development server provides features like hot-reloading for efficient development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

----------------------------------------

TITLE: Adjust WordPress REST API Post Links for Headless Frontend
DESCRIPTION: Adjusts the `link` property in WordPress REST API responses for posts and pages. For drafts, it uses the custom preview link. For published posts, it replaces the WordPress `site_url()` with the `HEADLESS_URL` in the permalink, ensuring correct links are provided to the headless frontend.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_7

LANGUAGE: php
CODE:
```
<?php
add_filter( 'rest_prepare_page', 'set_headless_rest_preview_link', 10, 2 );
add_filter( 'rest_prepare_post', 'set_headless_rest_preview_link' , 10, 2 );
function set_headless_rest_preview_link( WP_REST_Response $response, WP_Post $post ): WP_REST_Response {
  // Check if the post status is 'draft' and set the preview link accordingly.
  if ( 'draft' === $post->post_status ) {
    $response->data['link'] = get_preview_post_link( $post );
    return $response;
  }

  // For published posts, modify the permalink to point to the frontend.
  if ( 'publish' === $post->post_status ) {

    // Get the post permalink.
    $permalink = get_permalink( $post );

    // Check if the permalink contains the site URL.
    if ( false !== stristr( $permalink, get_site_url() ) ) {

      $frontendUrl = HEADLESS_URL;

      // Replace the site URL with the frontend URL.
      $response->data['link'] = str_ireplace(
        get_site_url(),
        $frontendUrl,
        $permalink
      );
    }
  }

  return $response;
}
```

----------------------------------------

TITLE: Install Dependencies and Start Stencil Development Server
DESCRIPTION: These commands install the project's dependencies using npm and then start the development server, which typically watches for file changes and provides live reloading for easier development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/packages/test-component/readme.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm start
```

----------------------------------------

TITLE: Bootstrap Next.js application with Azure Cosmos DB example
DESCRIPTION: Commands to initialize a new Next.js project using the `create-next-app` utility, specifically bootstrapping it with the Azure Cosmos DB example. This sets up the basic project structure for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-azure-cosmos with-azure-cosmos-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-azure-cosmos with-azure-cosmos-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-azure-cosmos with-azure-cosmos-app
```

----------------------------------------

TITLE: Bootstrap Next.js application with GraphCMS example
DESCRIPTION: Commands to initialize a new Next.js project using the GraphCMS example template with npm, Yarn, or pnpm. This sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-graphcms cms-graphcms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-graphcms cms-graphcms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-graphcms cms-graphcms-app
```

----------------------------------------

TITLE: Create Next.js App with FingerprintJS Pro Example
DESCRIPTION: These commands bootstrap a new Next.js application pre-configured with the FingerprintJS Pro example, using `create-next-app` via npx, yarn, or pnpm. This sets up the project structure and dependencies required to run the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fingerprintjs-pro/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-fingerprintjs-pro with-fingerprintjs-pro-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Instructions to start the Next.js development server using various package managers. This command launches the application locally, typically accessible via http://localhost:3000, and enables hot-reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Run Next.js Development Server with npm or Yarn
DESCRIPTION: These commands install project dependencies and then start the Next.js development server. The application will typically be accessible at http://localhost:3000, allowing for local testing and development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Redirecting Users from Next.js API Routes
DESCRIPTION: This example demonstrates how to redirect a user to a different URL from a Next.js API route. After an asynchronous operation (e.g., `addPost()`), the `res.redirect()` method is used with an HTTP status code (307 for temporary redirect) and the target URL. This is useful for navigating the user after a form submission or data update.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_5

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const id = await addPost()
  res.redirect(307, `/post/${id}`)
}
```

LANGUAGE: JavaScript
CODE:
```
export default async function handler(req, res) {
  const id = await addPost()
  res.redirect(307, `/post/${id}`)
}
```

----------------------------------------

TITLE: Sitecore XM Cloud Environment Variables Configuration
DESCRIPTION: These environment variables are essential for connecting a Next.js application to Sitecore XM Cloud using the JSS SDK. They define the application name, API endpoints, authentication key, and data fetching method, enabling proper communication and data retrieval from Sitecore.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
JSS_APP_NAME: The name of the JSS app that is configured in XM Cloud.
GRAPH_QL_ENDPOINT: The GraphQL Edge endpoint. This is required for Sitecore Experience Edge.
SITECORE_API_KEY: The Sitecore API key is required to build the app.
SITECORE_API_HOST: The host of the Sitecore API.
FETCH_WITH: The fetch method to the Sitecore API. This can be either `GraphQL` or `REST`.
```

----------------------------------------

TITLE: Pre-rendering Pages with getStaticProps in Next.js
DESCRIPTION: This snippet demonstrates how to use `getStaticProps` in Next.js to pre-render a page at build time. It fetches data from a GitHub API endpoint and passes it as props to the page component. The example shows both TypeScript and JavaScript implementations, emphasizing that server-side code within `getStaticProps` is not bundled for the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-static-props.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

LANGUAGE: JavaScript
CODE:
```
export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Send Generic HTTP Response in Next.js API Routes
DESCRIPTION: Illustrates how to send a generic HTTP response from a Next.js API route, similar to JSON responses but allowing the response body to be a string, object, or Buffer. This example sets the HTTP status code to 200 (OK) for successful operations and 500 for errors, incorporating asynchronous handling.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_13

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  try {
    const result = await someAsyncOperation()
    res.status(200).send({ result })
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

LANGUAGE: JavaScript
CODE:
```
export default async function handler(req, res) {
  try {
    const result = await someAsyncOperation()
    res.status(200).send({ result })
  } catch (err) {
    res.status(500).send({ error: 'failed to fetch data' })
  }
}
```

----------------------------------------

TITLE: Configure Production Enterspeed API Key in .env.local
DESCRIPTION: This configuration snippet for `.env.local` sets up the `ENTERSPEED_PRODUCTION_ENVIRONMENT_API_KEY` required for the Next.js application to connect to the Enterspeed production environment. It also shows commented-out placeholders for optional preview mode keys.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
ENTERSPEED_PRODUCTION_ENVIRONMENT_API_KEY=

# Only required if you want to enable preview mode
# ENTERSPEED_PREVIEW_ENVIRONMENT_API_KEY=
# ENTERSPEED_PREVIEW_SECRET
```

----------------------------------------

TITLE: Bootstrap Next.js Auth0 Example Project
DESCRIPTION: Commands to initialize a new Next.js project using the Auth0 example template with different package managers (npx, Yarn, pnpm). This sets up the basic project structure with Auth0 integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example auth0 auth0-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example auth0 auth0-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example auth0 auth0-app
```

----------------------------------------

TITLE: Next.js Command Line Interface (CLI) Tools Reference
DESCRIPTION: Comprehensive documentation for the core command-line interface tools provided by Next.js, enabling developers to quickly scaffold new projects and manage application lifecycle stages from development to production.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/index.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
create-next-app:
  - Description: Quickly create a new Next.js application using the default template or an example from a public GitHub repository.
  - Usage: create-next-app <project-name> [options]
  - Parameters:
    - <project-name>: (Optional) The name of the directory for the new application.
    - --template <template-url|name>: (Optional) Specify a template or example to use (e.g., from GitHub).
  - Example: create-next-app my-app

next:
  - Description: The primary command for running the Next.js development server, building your application, and other essential operations.
  - Usage: next <command> [options]
  - Common Commands:
    - next dev: Starts the Next.js development server in development mode.
    - next build: Creates an optimized production build of your application.
    - next start: Starts the Next.js production server.
    - next export: Exports the application to static HTML for static site hosting.
  - Example: next dev
```

----------------------------------------

TITLE: Copy .env.local.example for Environment Variables
DESCRIPTION: Copies the example environment file to `.env.local` to set up local environment variables for the Next.js project. This file is typically ignored by Git to protect sensitive information.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-kontent-ai/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrap Next.js App with next-page-transitions Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the `with-next-page-transitions` example using `npx`, `yarn`, or `pnpm`. This sets up a project ready for animating page transitions.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-page-transitions/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-page-transitions with-next-page-transitions-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-page-transitions with-next-page-transitions-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-page-transitions with-next-page-transitions-app
```

----------------------------------------

TITLE: Create Next.js App with Reflexjs Example
DESCRIPTION: This command initializes a new Next.js application using the `with-reflexjs` example template. It demonstrates how to bootstrap a project that integrates Reflexjs for rapid UI development. Users can choose their preferred package manager: npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reflexjs/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-reflexjs with-reflexjs-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-reflexjs with-reflexjs-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-reflexjs with-reflexjs-app
```

----------------------------------------

TITLE: Running Next.js Development Server with Yarn
DESCRIPTION: This command first installs all project dependencies using Yarn, then starts the Next.js development server. This allows local development and live reloading of the application, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_12

LANGUAGE: bash
CODE:
```
yarn install && yarn dev
```

----------------------------------------

TITLE: Bootstrap Next.js App with React-Toolbox Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `with-react-toolbox` example. They utilize different package managers (npm, Yarn, pnpm) to create the project directory and set up the necessary files for a react-toolbox integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-toolbox/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-toolbox with-react-toolbox-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-toolbox with-react-toolbox-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-toolbox with-react-toolbox-app
```

----------------------------------------

TITLE: Modify WordPress REST API Root URL for Headless Setup
DESCRIPTION: Modifies the WordPress REST API root URL to use the `home_url()` as the base instead of `site_url()`. This is crucial for headless WordPress setups where the frontend URL differs from the WordPress installation URL, ensuring correct API endpoint resolution for the headless application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-wordpress/README.md#_snippet_5

LANGUAGE: php
CODE:
```
<?php
/**
 * Changes the REST API root URL to use the home URL as the base.
 *
 * @param string $url The complete URL including scheme and path.
 * @return string The REST API root URL.
 */
add_filter('rest_url', 'home_url_as_api_url');
function home_url_as_api_url($url)
{
  $url = str_replace(home_url(), site_url(), $url);
  return $url;
}
```

----------------------------------------

TITLE: Run Next.js application in development mode
DESCRIPTION: Commands to install project dependencies and start the Next.js development server. The application will be accessible locally, typically at `http://localhost:3000`, allowing for testing and development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Create Next.js App with Dynamic Import Example
DESCRIPTION: This snippet provides commands to bootstrap a Next.js application using the `with-dynamic-import` example. It includes options for `npx`, `yarn`, and `pnpm` to create the project directory and set up the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-dynamic-import/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-dynamic-import with-dynamic-import-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-dynamic-import with-dynamic-import-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-dynamic-import with-dynamic-import-app
```

----------------------------------------

TITLE: Setting CORS Headers for GET Requests in Next.js Route Handler (JavaScript)
DESCRIPTION: This snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) headers for a GET request in a Next.js Route Handler. It uses the standard Web API `Response` object to set `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` to enable cross-origin requests. This allows clients from any origin to make GET, POST, PUT, DELETE, and OPTIONS requests with specified headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_19

LANGUAGE: js
CODE:
```
export async function GET(request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Setting CORS Headers for GET Requests in Next.js Route Handler (TypeScript)
DESCRIPTION: This snippet demonstrates how to configure Cross-Origin Resource Sharing (CORS) headers for a GET request in a Next.js Route Handler. It uses the standard Web API `Response` object to set `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` to enable cross-origin requests. This allows clients from any origin to make GET, POST, PUT, DELETE, and OPTIONS requests with specified headers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_18

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization',
    },
  })
}
```

----------------------------------------

TITLE: Create Next.js App with Three.js Example
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application pre-configured with the Three.js example. It uses `create-next-app` and supports `npx`, `yarn`, and `pnpm` package managers to quickly set up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-three-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-three-js with-three-js-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-three-js with-three-js-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-three-js with-three-js-app
```

----------------------------------------

TITLE: Create Next.js HLS.js Example Application
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the HLS.js example using different package managers: npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-hls-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-hls-js with-hls-js-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-hls-js with-hls-js-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-hls-js with-hls-js-app
```

----------------------------------------

TITLE: Create Next.js App with WindiCSS Example
DESCRIPTION: Bootstraps a new Next.js application pre-configured with the WindiCSS example. This command utilizes `create-next-app` and supports different package managers for project initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-windicss/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-windicss with-windicss-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-windicss with-windicss-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-windicss with-windicss-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Instructions to start the Next.js development server using various package managers. This command launches the application locally, typically accessible via http://localhost:3000, and enables hot-reloading for development.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-api/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Fetching Data with getStaticProps in Next.js
DESCRIPTION: This example demonstrates how to use `getStaticProps` in Next.js to fetch data at build time from an external API (GitHub in this case) and pass it as props to a page component. It shows both TypeScript (TSX) and JavaScript (JSX) implementations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { InferGetStaticPropsType, GetStaticProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getStaticProps = (async (context) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}) satisfies GetStaticProps<{
  repo: Repo
}>

export default function Page({
  repo,
}: InferGetStaticPropsType<typeof getStaticProps>) {
  return repo.stargazers_count
}
```

LANGUAGE: javascript
CODE:
```
export async function getStaticProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  return { props: { repo } }
}

export default function Page({ repo }) {
  return repo.stargazers_count
}
```

----------------------------------------

TITLE: Creating a Redirect API Route in Next.js Pages Router (TypeScript/JavaScript)
DESCRIPTION: This API route handles dynamic URL redirects for the Next.js Pages Router. It expects a `pathname` query parameter, retrieves the corresponding redirect from `redirects.json`, and responds with the redirect entry or a 400 status for bad requests or missing redirects. This example provides both TypeScript and JavaScript implementations for the `handler` function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_16

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import redirects from '@/app/redirects/redirects.json'

type RedirectEntry = {
  destination: string
  permanent: boolean
}

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const pathname = req.query.pathname
  if (!pathname) {
    return res.status(400).json({ message: 'Bad Request' })
  }

  // Get the redirect entry from the redirects.json file
  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return res.status(400).json({ message: 'No redirect' })
  }

  // Return the redirect entry
  return res.json(redirect)
}
```

LANGUAGE: JavaScript
CODE:
```
import redirects from '@/app/redirects/redirects.json'

export default function handler(req, res) {
  const pathname = req.query.pathname
  if (!pathname) {
    return res.status(400).json({ message: 'Bad Request' })
  }

  // Get the redirect entry from the redirects.json file
  const redirect = redirects[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return res.status(400).json({ message: 'No redirect' })
  }

  // Return the redirect entry
  return res.json(redirect)
}
```

----------------------------------------

TITLE: onRequestError Function Parameters
DESCRIPTION: Detailed documentation for the parameters passed to the `onRequestError` function, including the error object, request details, and the context in which the error occurred.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/instrumentation.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
export function onRequestError(
  error: { digest: string } & Error,
  request: {
    path: string // resource path, e.g. /blog?name=foo
    method: string // request method. e.g. GET, POST, etc
    headers: { [key: string]: string }
  },
  context: {
    routerKind: 'Pages Router' | 'App Router' // the router type
    routePath: string // the route file path, e.g. /app/blog/[dynamic]
    routeType: 'render' | 'route' | 'action' | 'middleware' // the context in which the error occurred
    renderSource:
      | 'react-server-components'
      | 'react-server-components-payload'
      | 'server-rendering'
    revalidateReason: 'on-demand' | 'stale' | undefined // undefined is a normal request without revalidation
    renderType: 'dynamic' | 'dynamic-resume' // 'dynamic-resume' for PPR
  }
): void | Promise<void>

Parameters:
- error: The caught error itself (type is always `Error`), with a `digest` property which is the unique ID of the error.
- request: Read-only request information associated with the error.
  - path: The resource path (e.g., `/blog?name=foo`).
  - method: The request method (e.g., `GET`, `POST`).
  - headers: An object containing request headers.
- context: The context in which the error occurred.
  - routerKind: The type of router ('Pages Router' or 'App Router').
  - routePath: The route file path (e.g., `/app/blog/[dynamic]`).
  - routeType: The context type ('render' for Server Components, 'route' for Route Handlers, 'action' for Server Actions, or 'middleware').
  - renderSource: Indicates the source of rendering ('react-server-components', 'react-server-components-payload', or 'server-rendering').
  - revalidateReason: Reason for revalidation ('on-demand', 'stale', or `undefined` for normal requests).
  - renderType: Type of rendering ('dynamic' or 'dynamic-resume' for PPR).
```

----------------------------------------

TITLE: Upstash Redis Database Configuration
DESCRIPTION: Instructions for configuring the Upstash Redis database connection. This involves creating a database in the Upstash Console and retrieving the `REDIS_URL` for application use.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Upstash Environment Variables:

REDIS_URL:
  - Description: The connection URL for the Upstash Serverless Redis database.
  - Source: Found in the Upstash Console under database details (Redis Connect button).
```

----------------------------------------

TITLE: Start Next.js Development Server
DESCRIPTION: This command initiates the Next.js development server, making the application accessible locally, typically at http://localhost:3000. It supports various JavaScript package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw-empty/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

LANGUAGE: bash
CODE:
```
bun dev
```

----------------------------------------

TITLE: Vercel One-Click Deployment Configuration
DESCRIPTION: Defines the parameters used in a Vercel one-click deployment URL to clone a specific Next.js GraphCMS example repository and pre-configure essential environment variables. This simplifies the deployment process for new projects.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-graphcms/README.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Vercel Deployment URL Parameters:
  - repository-url: https://github.com/vercel/next.js/tree/canary/examples/cms-graphcms (string, required) - The GitHub repository URL to clone.
  - project-name: cms-graphcms (string, optional) - The default project name on Vercel.
  - repository-name: cms-graphcms (string, optional) - The default repository name on Vercel.
  - env: GRAPHCMS_PROJECT_API,GRAPHCMS_PROD_AUTH_TOKEN,GRAPHCMS_DEV_AUTH_TOKEN,GRAPHCMS_PREVIEW_SECRET (string, required) - Comma-separated list of environment variable names to prompt the user for.
  - envDescription: Required to connect the app with GraphCMS (string, optional) - A description for the environment variables.
  - envLink: https://vercel.link/cms-graphcms-env (string, optional) - A link providing more information about the environment variables.
  - Usage Example:
    https://vercel.com/new/clone?repository-url=https://github.com/vercel/next.js/tree/canary/examples/cms-graphcms&project-name=cms-graphcms&repository-name=cms-graphcms&env=GRAPHCMS_PROJECT_API,GRAPHCMS_PROD_AUTH_TOKEN,GRAPHCMS_DEV_AUTH_TOKEN,GRAPHCMS_PREVIEW_SECRET&envDescription=Required%20to%20connect%20the%20app%20with%20GraphCMS&envLink=https://vercel.link/cms-graphcms-env
```

----------------------------------------

TITLE: Initialize Next.js App with MySQL Example
DESCRIPTION: Bootstraps a new Next.js project using the 'create-next-app' utility, pre-configured with the 'with-mysql' example for database integration. Supports npm, Yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mysql/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mysql nextjs-mysql
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mysql nextjs-mysql
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mysql nextjs-mysql
```

----------------------------------------

TITLE: Type Next.js API Route Response Data
DESCRIPTION: Building upon basic API route typing, this example demonstrates how to explicitly define the shape of the JSON response data. By creating a type alias (e.g., `Data`) and passing it as a generic argument to `NextApiResponse`, you ensure that the data returned by your API route adheres to a specific type, improving maintainability and preventing runtime errors.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/02-typescript.mdx#_snippet_8

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

type Data = {
  name: string
}

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>
) {
  res.status(200).json({ name: 'John Doe' })
}
```

----------------------------------------

TITLE: Next.js Preview Mode Activation and Exit Endpoints
DESCRIPTION: These API endpoints control the Next.js Preview Mode, allowing users to view draft content before publication. The activation endpoint requires a secret key for authentication, while the exit endpoint disables preview mode, reverting to published content.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
Activate Preview Mode:
GET /api/preview?secret=<secret>
  - Description: Activates Next.js Preview Mode to display draft content.
  - Parameters:
    - secret (string, required): The value of ENTERSPEED_PREVIEW_SECRET configured in .env.local.
  - Returns: Redirects to the requested page with preview mode enabled.

Exit Preview Mode:
GET /api/exit-preview
  - Description: Deactivates Next.js Preview Mode, reverting to displaying published content.
  - Parameters: None
  - Returns: Redirects to the requested page with preview mode disabled.
```

----------------------------------------

TITLE: Initialize Next.js Project with EdgeDB Example
DESCRIPTION: Commands to bootstrap a new Next.js application using the provided EdgeDB example template with various package managers, and navigate into the created directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-edgedb with-edgedb-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-edgedb with-edgedb-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-edgedb with-edgedb-app
```

LANGUAGE: bash
CODE:
```
cd with-edgedb-app
```

----------------------------------------

TITLE: Run Umbraco CMS Locally
DESCRIPTION: This .NET CLI command starts the Umbraco CMS application locally. After execution, it typically launches a web server and redirects to the Umbraco setup wizard or backoffice.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
dotnet run
```

----------------------------------------

TITLE: Setting HTTP cookies in Next.js API Routes
DESCRIPTION: This example shows how to set an HTTP cookie in a Next.js API Route. It uses `res.setHeader('Set-Cookie', ...)` to add a `Set-Cookie` header to the response, including the cookie name, value, path, and `HttpOnly` flag for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_1

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')
  res.status(200).send('Cookie has been set.')
}
```

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  res.setHeader('Set-Cookie', 'username=lee; Path=/; HttpOnly')
  res.status(200).send('Cookie has been set.')
}
```

----------------------------------------

TITLE: Running Next.js in Development Mode
DESCRIPTION: These commands are used to install project dependencies and start the Next.js development server. Both `npm` and `yarn` package managers are supported for installing dependencies and running the application locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-datocms/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Configure Local Environment Variables for Stripe
DESCRIPTION: Instructions and commands to set up the local environment variables required for the Stripe integration. This involves copying the example `.env.local` file and populating it with your Stripe API keys.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_1

LANGUAGE: Bash
CODE:
```
cp .env.local.example .env.local
```

LANGUAGE: Bash
CODE:
```
NEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=<replace-with-your-publishable-key>
STRIPE_SECRET_KEY=<replace-with-your-secret-key>
```

----------------------------------------

TITLE: Bootstrap Next.js Sitemap Example Project
DESCRIPTION: Commands to initialize a new Next.js project based on the 'with-sitemap' example using different package managers. This sets up the basic project structure for sitemap generation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sitemap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-sitemap with-sitemap-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-sitemap with-sitemap-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-sitemap with-sitemap-app
```

----------------------------------------

TITLE: Bootstrap Next.js with Magic Example
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the Magic.link example using `create-next-app` via npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-magic with-magic-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-magic with-magic-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-magic with-magic-app
```

----------------------------------------

TITLE: Bootstrap Next.js Radix UI Example Project
DESCRIPTION: These commands initialize a new Next.js application pre-configured with the Radix UI example. Choose your preferred package manager (npm, Yarn, or pnpm) to set up the project directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/radix-ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example radix-ui radix-ui-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example radix-ui radix-ui-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example radix-ui radix-ui-app
```

----------------------------------------

TITLE: Create Next.js App with Plausible Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Plausible integration example using `create-next-app` via npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-plausible/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-plausible with-plausible-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-plausible with-plausible-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-plausible with-plausible-app
```

----------------------------------------

TITLE: Get a cookie value from NextResponse
DESCRIPTION: Illustrates how to retrieve the value of a specific cookie from a `NextResponse` object using the `cookies.get()` method.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_2

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
let response = NextResponse.next()
// { name: 'show-banner', value: 'false', Path: '/home' }
response.cookies.get('show-banner')
```

----------------------------------------

TITLE: Fetching Draft Data in Next.js getStaticProps with Preview Mode
DESCRIPTION: Illustrates how to conditionally modify an API endpoint URL based on `context.preview` within `getStaticProps` to fetch draft content from a headless CMS, enabling dynamic data retrieval for preview purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_5

LANGUAGE: js
CODE:
```
export async function getStaticProps(context) {
  // If context.preview is true, append ""/preview"" to the API endpoint
  // to request draft data instead of published data. This will vary
  // based on which headless CMS you're using.
  const res = await fetch(`https://.../${context.preview ? 'preview' : ''}`)
  // ...
}
```

----------------------------------------

TITLE: Deleting HTTP cookies in Next.js API Routes
DESCRIPTION: This example illustrates how to delete an HTTP cookie from the client's browser using a Next.js API Route. It sets the `Max-Age` attribute of the `Set-Cookie` header to `0` and provides an empty value for the cookie to effectively remove it from the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')
  res.status(200).send('Cookie has been deleted.')
}
```

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  res.setHeader('Set-Cookie', 'username=; Path=/; HttpOnly; Max-Age=0')
  res.status(200).send('Cookie has been deleted.')
}
```

----------------------------------------

TITLE: Create Reusable Preload Utility with React Cache
DESCRIPTION: Illustrates how to create a reusable data fetching utility using React's `cache` function and the `server-only` package. This approach caches the `getItem` function, ensuring it runs only on the server and optimizes subsequent calls for the same data, making the preloading mechanism more robust and efficient.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-fetching-data.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id: string) => {
  void getItem(id)
}

export const getItem = cache(async (id: string) => {
  // ...
})
```

LANGUAGE: js
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id) => {
  void getItem(id)
}

export const getItem = cache(async (id) => {
  // ...
})
```

----------------------------------------

TITLE: Bootstrap Next.js Example with Nhost
DESCRIPTION: Commands to initialize a new Next.js project based on the Nhost authentication and real-time GraphQL example, using various package managers. This sets up the initial project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-nhost-auth-realtime-graphql/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-nhost-auth-realtime-graphql nhost-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-nhost-auth-realtime-graphql nhost-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-nhost-auth-realtime-graphql nhost-app
```

----------------------------------------

TITLE: Run Next.js and TinaCMS in local development mode
DESCRIPTION: These commands install project dependencies and then start the Next.js application with TinaCMS in development mode, allowing for local content editing and previewing. Options are provided for both `npm` and `yarn`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
npm run tina-dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn tina-dev
```

----------------------------------------

TITLE: Fetch Data in Client Component using SWR Library
DESCRIPTION: This example illustrates client-side data fetching using the SWR library. It defines a `fetcher` function to retrieve JSON data from an API endpoint and uses the `useSWR` hook to manage the fetching state, including loading and error handling. This approach leverages SWR's caching and revalidation features for efficient data management.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-fetching-data.mdx#_snippet_4

LANGUAGE: tsx
CODE:
```
'use client'
import useSWR from 'swr'

const fetcher = (url) => fetch(url).then((r) => r.json())

export default function BlogPage() {
  const { data, error, isLoading } = useSWR(
    'https://api.vercel.app/blog',
    fetcher
  )

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <ul>
      {data.map((post: { id: string; title: string }) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import useSWR from 'swr'

const fetcher = (url) => fetch(url).then((r) => r.json())

export default function BlogPage() {
  const { data, error, isLoading } = useSWR(
    'https://api.vercel.app/blog',
    fetcher
  )

  if (isLoading) return <div>Loading...</div>
  if (error) return <div>Error: {error.message}</div>

  return (
    <ul>
      {data.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Type Basic Next.js API Routes with NextApiRequest/NextApiResponse
DESCRIPTION: This snippet illustrates the fundamental way to type a Next.js API route handler. By importing `NextApiRequest` and `NextApiResponse` from `next`, you can provide type annotations for the `req` (request) and `res` (response) parameters, ensuring type safety for incoming requests and outgoing responses in your API endpoints.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/02-typescript.mdx#_snippet_7

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  res.status(200).json({ name: 'John Doe' })
}
```

----------------------------------------

TITLE: Initialize Next.js App with Storybook Example
DESCRIPTION: This snippet provides commands to bootstrap a new Next.js application, pre-configured with the Storybook example. It supports `npx`, `yarn create`, and `pnpm create` for project initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-storybook/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-storybook with-storybook-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-storybook with-storybook-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-storybook with-storybook-app
```

----------------------------------------

TITLE: Example Umbraco Heartcore Environment Variables
DESCRIPTION: This snippet shows the structure of the `.env.local` file, which holds critical configuration for connecting the Next.js application to Umbraco Heartcore. It includes the project alias, API key, and a secret for Next.js Preview Mode, which must be populated with actual values.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
UMBRACO_PROJECT_ALIAS=...
UMBRACO_API_KEY=...
UMBRACO_PREVIEW_SECRET=...
```

----------------------------------------

TITLE: Set Custom Next.js API Route Response Size Limit
DESCRIPTION: This configuration snippet sets a custom response size limit for a Next.js API route. The `responseLimit` property can accept a numeric value in bytes or a string format (e.g., '500kb', '3mb'). This example demonstrates setting the limit to 8MB.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/api-routes-response-size-limit.mdx#_snippet_1

LANGUAGE: js
CODE:
```
export const config = {
  api: {
    responseLimit: '8mb',
  },
}
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with pnpm
DESCRIPTION: This command employs `pnpm create` to initialize a new Next.js project named 'roadmap' from the 'with-redis' example. It offers another package manager option for setting up the project, known for its efficient disk space usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-redis roadmap
```

----------------------------------------

TITLE: Available Build and Development Commands
DESCRIPTION: This snippet lists various `npm` or `yarn` script commands available for managing the Electron and Next.js application. It includes commands for building individual layers, building both, starting development, creating production builds, and type checking.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
""build-renderer"": build and transpile Next.js layer
""build-electron"": transpile electron layer
""build"": build both layers
""dev"": start dev version
""dist"": create production electron build
""type-check"": check TypeScript in project
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the local development server for a Next.js application. The server will typically be accessible at http://localhost:3000, and changes to source files will trigger automatic updates.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Get all cookies from NextResponse
DESCRIPTION: Shows how to retrieve all cookies, or all cookies matching a specific name, from a `NextResponse` object using the `cookies.getAll()` method.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-response.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
// Given incoming request /home
let response = NextResponse.next()
// [
//   { name: 'experiments', value: 'new-pricing-page', Path: '/home' },
//   { name: 'experiments', value: 'winter-launch', Path: '/home' },
// ]
response.cookies.getAll('experiments')
// Alternatively, get all cookies for the response
response.cookies.getAll()
```

----------------------------------------

TITLE: Create New Umbraco Project
DESCRIPTION: This .NET CLI command creates a new Umbraco project in the current directory using the previously installed Umbraco templates. This sets up the basic structure for the CMS.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
dotnet new umbraco
```

----------------------------------------

TITLE: Bootstrap Next.js application with Video.js example
DESCRIPTION: Commands to initialize a new Next.js project using the `with-videojs` example template. These commands demonstrate how to quickly set up the project using npx, yarn, or pnpm, providing a ready-to-use Video.js integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-videojs/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-videojs with-videojs-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-videojs with-videojs-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-videojs with-videojs-app
```

----------------------------------------

TITLE: Configure GraphQL Mesh for PetStore REST API
DESCRIPTION: This YAML configuration sets up GraphQL Mesh to expose the PetStore REST API as a GraphQL API. It specifies the base URL and the OpenAPI specification file for the PetStore API, enabling automatic schema generation from the REST API's Swagger/OpenAPI definition.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-graphql-gateway/README.md#_snippet_0

LANGUAGE: yaml
CODE:
```
sources:
  - name: PetStore
    handler:
      newOpenapi:
        baseUrl: https://petstore.swagger.io/v2/
        oasFilePath: https://petstore.swagger.io/v2/swagger.json
```

----------------------------------------

TITLE: Install Dependencies and Run Next.js Development Server
DESCRIPTION: Commands to install project dependencies and start the local development server for the Next.js application. This covers the common package managers: npm, yarn, and pnpm, for both installation and running the dev server.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-apivideo/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install
```

LANGUAGE: bash
CODE:
```
yarn install
```

LANGUAGE: bash
CODE:
```
pnpm install
```

LANGUAGE: bash
CODE:
```
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn dev
```

LANGUAGE: bash
CODE:
```
pnpm dev
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Quill.js Example
DESCRIPTION: These commands demonstrate how to quickly set up a new Next.js project pre-configured with the Quill.js integration example. You can choose your preferred package manager (npm, Yarn, or pnpm) to execute the `create-next-app` utility and clone the specified example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-quill-js/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-quill-js with-quill-js-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-quill-js with-quill-js-app
```

----------------------------------------

TITLE: Running Next.js Development Server Locally
DESCRIPTION: This command starts the Next.js development server, typically accessible at `http://localhost:3000`. It enables hot-reloading and provides a development environment for building and testing the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker/README.md#_snippet_8

LANGUAGE: bash
CODE:
```
npm run dev\n# or\nyarn dev
```

----------------------------------------

TITLE: Create Next.js App with Prisma Postgres Example
DESCRIPTION: Commands to initialize a new Next.js application using the 'prisma-postgres' example template with various package managers. This sets up the basic project structure ready for Prisma integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/prisma-postgres/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example prisma-postgres my-prisma-postgres-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example prisma-postgres my-prisma-postgres-app
```

LANGUAGE: bash
CODE:
```
pnpm create-next-app --example prisma-postgres my-prisma-postgres-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example prisma-postgres my-prisma-postgres-app
```

----------------------------------------

TITLE: Bootstrap Next.js Project with MobX State Tree Example
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the MobX State Tree example using `create-next-app` via npm, Yarn, or pnpm. This sets up the project structure and dependencies for the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mobx-state-tree/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mobx-state-tree with-mobx-state-tree-app
```

----------------------------------------

TITLE: Next.js Page Component Props: `searchParams` API Reference
DESCRIPTION: API reference for the `searchParams` prop available in Next.js page components. It's an optional promise resolving to an object containing the URL search parameters. Values must be accessed asynchronously. Using `searchParams` opts the page into dynamic rendering. It's a plain JavaScript object, not a `URLSearchParams` instance. Includes examples of how `searchParams` maps to different URL query strings.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
searchParams (optional)
  - Description: A promise that resolves to an object containing the search parameters of the current URL.
  - Type: Promise<{ [key: string]: string | string[] | undefined }>
  - Usage Notes:
    - Must use `async/await` or React's `use` function to access values.
    - In Next.js 14 and earlier, `searchParams` was synchronous. Synchronous access is deprecated in Next.js 15.
    - This is a Dynamic API; using it opts the page into dynamic rendering.
    - It is a plain JavaScript object, not a `URLSearchParams` instance.
  - Example Mapping:
    - `/shop?a=1` -> `Promise<{ a: '1' }>`
    - `/shop?a=1&b=2` -> `Promise<{ a: '1', b: '2' }>`
    - `/shop?a=1&a=2` -> `Promise<{ a: ['1', '2'] }>`
```

----------------------------------------

TITLE: Next.js API Route Handler Function Signature and Parameters
DESCRIPTION: This entry describes the signature of the Next.js API route handler function and details its `req` (request) and `res` (response) parameters, including their underlying Node.js types.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
export default function handler(req: NextApiRequest, res: NextApiResponse)
  - req: An instance of http.IncomingMessage
  - res: An instance of http.ServerResponse
```

----------------------------------------

TITLE: Configure Next.js Environment Variables for Prepr CMS
DESCRIPTION: This configuration block defines the environment variables required for a Next.js application to connect with Prepr CMS. It includes the GraphQL API endpoint, production and preview access tokens, and a secret for enabling Next.js preview mode.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
PREPRIO_API=https://graphql.prepr.io/graphql
PREPRIO_PRODUCTION_TOKEN='your Production access token'
PREPRIO_PREVIEW_TOKEN='your Preview access token'
PREPRIO_PREVIEW_SECRET='your secret id'
```

----------------------------------------

TITLE: Install Builder.io CLI Globally
DESCRIPTION: Installs the Builder.io command-line interface globally using npm, enabling interaction with Builder.io services from the terminal for tasks like space creation and management.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-builder-io/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npm install @builder.io/cli -g
```

----------------------------------------

TITLE: Running Next.js Development Server
DESCRIPTION: This snippet provides various commands to start the Next.js development server locally. It supports npm, yarn, pnpm, and bun package managers, allowing developers to choose their preferred tool for project execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Bootstrap Next.js App with Google Tag Manager Example
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the Google Tag Manager example, using npx, yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-tag-manager/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-google-tag-manager with-google-tag-manager-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-google-tag-manager with-google-tag-manager-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-google-tag-manager with-google-tag-manager-app
```

----------------------------------------

TITLE: Copying Environment Variable Example File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is used to store sensitive environment variables like Mux API tokens and is ignored by Git for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with Yarn
DESCRIPTION: This command uses `yarn create` to bootstrap a new Next.js project named `cms-dotcms-app` from the `cms-dotcms` example. It provides an alternative method for setting up the project for users who prefer Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn create next-app --example cms-dotcms cms-dotcms-app
```

----------------------------------------

TITLE: useSelectedLayoutSegments Hook API Reference
DESCRIPTION: Comprehensive API documentation for the `useSelectedLayoutSegments` hook, detailing its signature, parameters, and return values. It explains how the hook reads active route segments, its optional `parallelRoutesKey` for specific parallel routes, and provides examples of the returned segments based on different layout and URL combinations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-selected-layout-segments.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
useSelectedLayoutSegments(parallelRoutesKey?: string)
  - Description: A Client Component hook that reads the active route segments below the Layout it is called from. It is useful for creating UI in parent Layouts that need knowledge of active child segments such as breadcrumbs.
  - Parameters:
    - parallelRoutesKey?: string (optional): An optional key that allows you to read the active route segment within a specific parallel route slot.
  - Returns: An array of strings. This array contains the active segments one level down from the layout the hook was called from. Returns an empty array if no segments exist.
  - Behavior Notes:
    - Since it's a Client Component hook, it's usually called via a Client Component imported into a Layout (as Layouts are Server Components by default).
    - The returned segments include Route Groups (e.g., `(group)`), which can be filtered out using array methods like `filter`.
  - Examples of Returned Segments:
    - Layout: `app/layout.js`, Visited URL: `/`, Returned Segments: `[]`
    - Layout: `app/layout.js`, Visited URL: `/dashboard`, Returned Segments: `['dashboard']`
    - Layout: `app/layout.js`, Visited URL: `/dashboard/settings`, Returned Segments: `['dashboard', 'settings']`
    - Layout: `app/dashboard/layout.js`, Visited URL: `/dashboard`, Returned Segments: `[]`
    - Layout: `app/dashboard/layout.js`, Visited URL: `/dashboard/settings`, Returned Segments: `['settings']`
```

----------------------------------------

TITLE: Installing Node.js Dependencies with Yarn
DESCRIPTION: This command installs all project dependencies using Yarn, based on the `package.json` file. It serves the same purpose as `npm install` but uses Yarn as the package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_6

LANGUAGE: bash
CODE:
```
yarn install
```

----------------------------------------

TITLE: Bootstrap Next.js Application with MongoDB and Mongoose Example
DESCRIPTION: Commands to initialize a new Next.js project using the `with-mongodb-mongoose` example template. This sets up the basic project structure and dependencies for a MongoDB and Mongoose integrated application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-mongodb-mongoose with-mongodb-mongoose-app
```

----------------------------------------

TITLE: Bootstrap Next.js App with Google Analytics Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the Google Analytics 4 example. You can choose your preferred package manager: npm, Yarn, or pnpm. The commands create a new directory named 'with-google-analytics-app' containing the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-google-analytics/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-google-analytics with-google-analytics-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-google-analytics with-google-analytics-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-google-analytics with-google-analytics-app
```

----------------------------------------

TITLE: Fetch Data with getServerSideProps in Next.js
DESCRIPTION: This example demonstrates how to use `getServerSideProps` in a Next.js Page Component to fetch data from an external API (GitHub) at request time and pass it as props to the page. It includes both TypeScript (TSX) and JavaScript (JSX) versions, showing how to define types for the fetched data in TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-get-server-side-props.mdx#_snippet_0

LANGUAGE: typescript
CODE:
```
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getServerSideProps = (async () => {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo: Repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}) satisfies GetServerSideProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

LANGUAGE: javascript
CODE:
```
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}

export default function Page({ repo }) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Bootstrap Next.js App with React Native Web Example
DESCRIPTION: Instructions to initialize a new Next.js project pre-configured with the `with-react-native-web` example. This command sets up the project structure and dependencies for cross-platform development using `react-native-web`, supporting various package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-native-web/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-native-web with-react-native-web-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-native-web with-react-native-web-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-native-web with-react-native-web-app
```

----------------------------------------

TITLE: Run Next.js Development Server with npm or Yarn
DESCRIPTION: These commands are used to install project dependencies and then start the Next.js development server. Developers can choose between `npm` or `yarn` package managers to set up and run the application locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: ImageResponse Constructor API Reference
DESCRIPTION: Defines the constructor signature and available options for `ImageResponse`, used to generate dynamic images from React elements. It details parameters for image dimensions, emoji styles, custom fonts, and HTTP response configurations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/image-response.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ImageResponse constructor:

new ImageResponse(element: ReactElement, options: object)
  - element: A ReactElement to be rendered into the image.
  - options: An object containing configuration for the image generation and HTTP response.
    - width?: number = 1200: The width of the generated image in pixels.
    - height?: number = 630: The height of the generated image in pixels.
    - emoji?: 'twemoji' | 'blobmoji' | 'noto' | 'openmoji' = 'twemoji': Specifies the emoji style to use for rendering emojis.
    - fonts?: Array<{name: string, data: ArrayBuffer, weight: number, style: 'normal' | 'italic'}>: An array of font objects to be used in the image.
      - name: The font family name.
      - data: The font data as an ArrayBuffer.
      - weight: The font weight.
      - style: The font style ('normal' or 'italic').
    - debug?: boolean = false: If true, enables debug mode for image generation.
    - status?: number = 200: HTTP status code for the response.
    - statusText?: string: HTTP status text for the response.
    - headers?: Record<string, string>: Custom HTTP headers for the response.
```

----------------------------------------

TITLE: Bootstrap Next.js Application with NextUI Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the NextUI example, using `create-next-app` via `npx`, `yarn`, or `pnpm`. This sets up the basic project structure and integrates NextUI.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-ui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-ui with-next-ui-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-ui with-next-ui-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-ui with-next-ui-app
```

----------------------------------------

TITLE: Initialize Next.js App with Sentry Example
DESCRIPTION: Provides commands for creating a new Next.js application pre-configured with the Sentry integration example. These commands use different package managers (`npx`, `yarn`, `pnpm`) to scaffold the project and install dependencies, offering a quick start for Sentry setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sentry/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-sentry nextjs-sentry-example
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-sentry nextjs-sentry-example
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-sentry nextjs-sentry-example
```

----------------------------------------

TITLE: Initialize Next.js Project with Comment Example
DESCRIPTION: This command uses `create-next-app` to bootstrap a new Next.js project, pre-configured with the 'blog-with-comment' example, setting up the initial project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-with-comment/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example blog-with-comment blog-with-comment-app
```

----------------------------------------

TITLE: Initialize Next.js App with Supabase Template
DESCRIPTION: These commands demonstrate how to create a new Next.js application pre-configured with the Supabase starter template using different Node.js package managers. This sets up the basic project structure and dependencies for a Supabase-integrated Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supabase/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-supabase with-supabase-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-supabase with-supabase-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-supabase with-supabase-app
```

----------------------------------------

TITLE: Next.js E2E Test with Fetch API for Response Object
DESCRIPTION: Explains how to test a Next.js application by making a `fetch` request to get the raw response object. This is ideal for inspecting HTTP headers, status codes, or the raw response body before parsing.
SOURCE: https://github.com/vercel/next.js/blob/canary/test/e2e/example.txt#_snippet_4

LANGUAGE: javascript
CODE:
```
  // In case you need to test the response object
  it('should work with fetch', async () => {
    const res = await next.fetch('/')
    const html = await res.text()
    expect(html).toContain('hello world')
  })
})

```

----------------------------------------

TITLE: Bootstrap Next.js Sanity Blog Example
DESCRIPTION: Commands to initialize a new Next.js project using the Sanity CMS example. This sets up a statically generated blog with Sanity for content management, providing options for npm, Yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-sanity next-sanity-blog
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-sanity next-sanity-blog
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-sanity next-sanity-blog
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Cloudflare Turnstile Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using `create-next-app` and the `cloudflare-turnstile` example. Choose your preferred package manager (npm, Yarn, or pnpm) to set up the project quickly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cloudflare-turnstile/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cloudflare-turnstile cloudflare-turnstile-app
```

----------------------------------------

TITLE: Run Next.js Development Server with npm or Yarn
DESCRIPTION: These commands install project dependencies and then start the Next.js development server. The application will be accessible locally, typically at http://localhost:3000, allowing for real-time development and testing of the Elasticsearch integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: bash
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Initialize Next.js App with SuperTokens Example using create-next-app
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application pre-configured with SuperTokens using the `create-next-app` utility. It provides commands for npm, Yarn, and pnpm to create the project from an example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-supertokens/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-supertokens with-supertokens-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-supertokens with-supertokens-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-supertokens with-supertokens-app
```

----------------------------------------

TITLE: Next.js Docs Optional Page Metadata Configuration
DESCRIPTION: Illustrates the optional metadata fields available for Next.js documentation pages, providing additional control over presentation and content. These fields include `nav_title` for navigation overrides, `source` for content reuse, `related` for linking to other pages, and `version` to indicate development status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_3

LANGUAGE: yaml
CODE:
```
---
nav_title: Nav Item Title
source: app/building-your-application/optimizing/images
related:
  description: See the image component API reference.
  links:
    - app/api-reference/components/image
version: experimental
---
```

----------------------------------------

TITLE: Create Next.js App with next-seo Example
DESCRIPTION: Commands to bootstrap a Next.js application pre-configured with the `with-next-seo` example using different package managers (npm, Yarn, pnpm). This sets up a new project ready for SEO management.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-seo/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-seo next-seo-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-seo next-seo-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-seo next-seo-app
```

----------------------------------------

TITLE: Create a basic Next.js Draft Mode Route Handler
DESCRIPTION: This snippet demonstrates how to create a basic Route Handler in Next.js for Draft Mode. It defines an asynchronous GET function that returns an empty Response object, serving as the initial setup for the draft mode API endpoint.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/draft-mode.mdx#_snippet_0

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {
  return new Response('')
}
```

LANGUAGE: js
CODE:
```
export async function GET() {
  return new Response('')
}
```

----------------------------------------

TITLE: Configure Related Links in Next.js MDX Metadata
DESCRIPTION: This YAML snippet demonstrates how to define related links within the frontmatter of an MDX page in Next.js. It uses the `related` field to provide a description for the link section and a list of relative paths to other documentation pages, guiding users to logical next steps.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_16

LANGUAGE: yaml
CODE:
```
---
related:
  description: Learn how to quickly get started with your first application.
  links:
    - app/building-your-application/routing/defining-routes
    - app/building-your-application/data-fetching
    - app/api-reference/file-conventions/page
---
```

----------------------------------------

TITLE: Example Usage of notFound() in Next.js Page
DESCRIPTION: Illustrates how to import and use the `notFound()` function from `next/navigation` within an `async` Next.js page component (`app/user/[id]/page.js`) to handle cases where fetched data (e.g., user data) is not found, leading to the display of the configured not-found page.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/not-found.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import { notFound } from 'next/navigation'

async function fetchUser(id) {
  const res = await fetch('https://...')
  if (!res.ok) return undefined
  return res.json()
}

export default async function Profile({ params }) {
  const { id } = await params
  const user = await fetchUser(id)

  if (!user) {
    notFound()
  }

  // ...
}
```

----------------------------------------

TITLE: Bootstrap Next.js Firebase Example with pnpm
DESCRIPTION: This command uses `pnpm` to quickly set up a new Next.js project pre-configured with the Firebase example, creating a directory named `with-firebase-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-firebase with-firebase-app
```

----------------------------------------

TITLE: Fixing Synchronous Request Access in Next.js Route Handlers
DESCRIPTION: Illustrates the necessary modification to Next.js GET route handlers to correctly access request information dynamically. The 'Before' example shows the problematic synchronous access, while the 'After' example demonstrates the fix using `await connection()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/next-prerender-sync-request.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export default function GET(request) {
  const requestHeaders = request.headers
  return ...
}
```

LANGUAGE: jsx
CODE:
```
import { connection } from 'next/server'

export default async function GET(request) {
  await connection()
  const requestHeaders = request.headers
  return ...
}
```

----------------------------------------

TITLE: Create Next.js App with Markdoc Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Markdoc example, using different package managers (npm, Yarn, pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/markdoc/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example markdoc markdoc-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example markdoc markdoc-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example markdoc markdoc-app
```

----------------------------------------

TITLE: Basic Next.js Preview API Route Handler
DESCRIPTION: This JavaScript snippet demonstrates the fundamental usage of `res.setPreviewData({})` within a Next.js API route handler. Calling this function sets specific cookies in the browser, which signals Next.js to activate Preview Mode for subsequent requests to statically generated pages.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_0

LANGUAGE: javascript
CODE:
```
export default function handler(req, res) {
  // ...
  res.setPreviewData({})
  // ...
}
```

----------------------------------------

TITLE: Bootstrap Next.js project with basic CSS example
DESCRIPTION: Use `create-next-app` with `npx`, `yarn`, or `pnpm` to quickly set up a new Next.js application pre-configured with the basic CSS example. This command fetches the specified example from the Next.js repository, creating a new directory named `basic-css-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/basic-css/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example basic-css basic-css-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example basic-css basic-css-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example basic-css basic-css-app
```

----------------------------------------

TITLE: Run Next.js E2E Tests in Production Mode
DESCRIPTION: Executes end-to-end tests against a Next.js application running in production mode (simulating `next build` and `next start`). It sets up an isolated environment, builds the application, starts a server, and runs the specified test suite. The browser window is hidden by default during execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/contributing/core/testing.md#_snippet_1

LANGUAGE: sh
CODE:
```
pnpm test-start test/e2e/app-dir/app/
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with pnpm
DESCRIPTION: This command uses `pnpm create` to bootstrap a new Next.js project named `cms-dotcms-app` from the `cms-dotcms` example. It offers another alternative for project setup, catering to users who prefer pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-dotcms/README.md#_snippet_3

LANGUAGE: Shell
CODE:
```
pnpm create next-app --example cms-dotcms cms-dotcms-app
```

----------------------------------------

TITLE: Next.js `cookies` API Reference
DESCRIPTION: Comprehensive API documentation for the `cookies` function, detailing its available methods for cookie manipulation (get, getAll, has, set, delete, clear, toString) and the various options supported when setting cookies (name, value, expires, maxAge, domain, path, secure, httpOnly, sameSite, priority, encode, partitioned).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/cookies.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
cookies API Reference:

Methods:
  get(name: string): Object
    - Description: Accepts a cookie name and returns an object with the name and value.
  getAll(): Array<Object>
    - Description: Returns a list of all the cookies with a matching name.
  has(name: string): Boolean
    - Description: Accepts a cookie name and returns a boolean based on if the cookie exists.
  set(name: string, value: string, options?: Object): void
    - Description: Accepts a cookie name, value, and options and sets the outgoing request cookie.
    - Options:
      - name: String - Specifies the name of the cookie.
      - value: String - Specifies the value to be stored in the cookie.
      - expires: Date - Defines the exact date when the cookie will expire.
      - maxAge: Number - Sets the cookie’s lifespan in seconds.
      - domain: String - Specifies the domain where the cookie is available.
      - path: String, default: '/' - Limits the cookie's scope to a specific path within the domain.
      - secure: Boolean - Ensures the cookie is sent only over HTTPS connections for added security.
      - httpOnly: Boolean - Restricts the cookie to HTTP requests, preventing client-side access.
      - sameSite: Boolean | 'lax' | 'strict' | 'none' - Controls the cookie's cross-site request behavior.
      - priority: 'low' | 'medium' | 'high' - Specifies the cookie's priority.
      - encode(value: string): Function - Specifies a function that will be used to encode a cookie's value.
      - partitioned: Boolean - Indicates whether the cookie is partitioned.
  delete(name: string): void
    - Description: Accepts a cookie name and deletes the cookie.
  clear(): void
    - Description: Deletes all cookies.
  toString(): String
    - Description: Returns a string representation of the cookies.
```

----------------------------------------

TITLE: Bootstrap Next.js App with Rebass Example
DESCRIPTION: These commands initialize a new Next.js project using the `create-next-app` utility, specifically bootstrapping it with the 'with-rebass' example template. They demonstrate usage with `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rebass/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rebass with-rebass-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-rebass with-rebass-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-rebass with-rebass-app
```

----------------------------------------

TITLE: Bootstrap Next.js Agility CMS Project
DESCRIPTION: This snippet provides commands to quickly set up a new Next.js project pre-configured with the Agility CMS example. It leverages `create-next-app` and supports npm, Yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-agilitycms cms-agilitycms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-agilitycms cms-agilitycms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-agilitycms cms-agilitycms-app
```

----------------------------------------

TITLE: Generate Type-Safe GraphQL Queries with `npm run codegen`
DESCRIPTION: This command executes the `codegen` script defined in the project's `package.json`, typically used to watch for changes in GraphQL queries and automatically generate corresponding TypeScript types. This ensures type safety when interacting with the GraphQL API.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npm run codegen
```

----------------------------------------

TITLE: Error Handling: Passing Entire Tainted Object to Client Component
DESCRIPTION: This example illustrates the error that occurs when an attempt is made to pass an entire object that has been tainted with `experimental_taintObjectReference` directly to a Client Component. React throws an error to enforce the boundary protection, highlighting the effectiveness of the taint API in preventing sensitive data leakage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/taint.mdx#_snippet_3

LANGUAGE: TSX
CODE:
```
export async function ContactPage({
  params,
}: {
  params: Promise<{ id: string }>
}) {
  const userDetails = await getUserDetails(id)

  // Throws an error
  return <UserCard user={userDetails} />
}
```

LANGUAGE: JSX
CODE:
```
export async function ContactPage({ params }) {
  const id = await params
  const userDetails = await getUserDetails(id)

  // Throws an error
  return <UserCard user={userDetails} />
}
```

----------------------------------------

TITLE: Creating Next.js App with Yarn
DESCRIPTION: This command initializes a new Next.js project named 'hello-world-app' using `yarn create` and the 'hello-world' example template. It sets up the basic project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/hello-world/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example hello-world hello-world-app
```

----------------------------------------

TITLE: Initialize Next.js Project with Makeswift Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Makeswift CMS example. This uses `create-next-app` and supports npm, Yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-makeswift/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-makeswift cms-makeswift-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-makeswift cms-makeswift-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-makeswift cms-makeswift-app
```

----------------------------------------

TITLE: Fetch data in Next.js Server Components using `fetch` API
DESCRIPTION: Demonstrates how to fetch data asynchronously in a Next.js Server Component using the native `fetch` API. The component is defined as an `async` function, and the `fetch` call is awaited to retrieve and parse JSON data, which is then rendered as a list of blog posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server locally. It supports common Node.js package managers like npm, yarn, pnpm, and bun, enabling developers to choose their preferred tool.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Create Next.js App with Goober Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the 'with-goober' example, demonstrating how to set up the project using different Node.js package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-goober/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-goober with-goober-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-goober with-goober-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-goober with-goober-app
```

----------------------------------------

TITLE: Bootstrap Next.js app with Facebook Pixel example
DESCRIPTION: Commands to initialize a new Next.js application using the `with-facebook-pixel` example, supporting `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-facebook-pixel with-facebook-pixel-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-facebook-pixel with-facebook-pixel-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-facebook-pixel with-facebook-pixel-app
```

----------------------------------------

TITLE: Bootstrap Next.js Stripe Example Project
DESCRIPTION: Commands to initialize a new Next.js project using the `with-stripe-typescript` example template. This sets up the basic project structure and dependencies for the Stripe integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-stripe-typescript with-stripe-typescript-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-stripe-typescript with-stripe-typescript-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-stripe-typescript with-stripe-typescript-app
```

----------------------------------------

TITLE: Next.js NextResponse API Capabilities
DESCRIPTION: Overview of the `NextResponse` API in Next.js, detailing its core functionalities for manipulating HTTP responses within Middleware and other server-side contexts. It enables redirection, URL rewriting, and setting various HTTP headers and cookies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/middleware.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
NextResponse API:
  - redirect(url: string, status?: number): Redirects the incoming request to a different URL.
  - rewrite(url: string): Rewrites the response by displaying content from a given URL.
  - setRequestHeaders(headers: Headers): Sets request headers for API Routes, getServerSideProps, and rewrite destinations.
  - setResponseCookies(cookies: Cookies): Sets response cookies.
  - setResponseHeaders(headers: Headers): Sets response headers.
```

----------------------------------------

TITLE: Bootstrap Next.js project with Emotion example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the Emotion.js example using `create-next-app`. Choose the command corresponding to your preferred package manager (npm, Yarn, or pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-emotion/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-emotion-swc with-emotion-swc-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-emotion-swc with-emotion-swc-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-emotion-swc with-emotion-swc-app
```

----------------------------------------

TITLE: Create Next.js App with Flow Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Flow example, using `create-next-app` with different package managers (npm, Yarn, or pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-flow/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-flow with-flow-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-flow with-flow-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-flow with-flow-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: This snippet provides various command-line options to start the Next.js development server locally. It supports common Node.js package managers like npm, yarn, pnpm, and bun, enabling developers to choose their preferred tool.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Bootstrap Next.js Blog Starter Project
DESCRIPTION: Instructions to initialize a new Next.js project based on the 'blog-starter' example using different package managers (npm, Yarn, or pnpm). This command sets up the project structure and dependencies, making the blog ready to run locally.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog-starter/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example blog-starter blog-starter-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example blog-starter blog-starter-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example blog-starter blog-starter-app
```

----------------------------------------

TITLE: Run Next.js Application in Development Mode
DESCRIPTION: These commands facilitate the setup and execution of the Next.js application in a local development environment. `npm install` or `yarn install` fetches dependencies, while `npm run dev` or `yarn dev` starts the development server, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_7

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Initialize Next.js Project with ReactMD and TypeScript
DESCRIPTION: This snippet demonstrates how to bootstrap a new Next.js application pre-configured with ReactMD and TypeScript using `create-next-app`. It provides commands for npm, Yarn, and pnpm, allowing users to quickly set up the example project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-md-typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-md-typescript with-react-md-typescript-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-md-typescript with-react-md-typescript-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-md-typescript with-react-md-typescript-app
```

----------------------------------------

TITLE: Next.js Docs Required Page Metadata Configuration
DESCRIPTION: Demonstrates the essential metadata fields required for every Next.js documentation page. The `title` field defines the page's `<h1>` and is used for SEO and Open Graph images, while the `description` field populates the `<meta name=""description"">` tag, also crucial for SEO.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_2

LANGUAGE: yaml
CODE:
```
---
title: Page Title
description: Page Description
---
```

----------------------------------------

TITLE: Turso Database Management CLI Commands
DESCRIPTION: Essential Turso CLI commands for creating databases, accessing the shell to execute SQL, retrieving database URLs, and generating authentication tokens for deployment.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turso/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
turso db create [database-name]
  - Creates a new Turso database.
  - Parameters:
    - [database-name]: The desired name for the new database.

turso db shell <database-name>
  - Connects to the Turso database shell for executing SQL commands.
  - Parameters:
    - <database-name>: The name of the database to connect to.

CREATE TABLE todos(id INTEGER PRIMARY KEY AUTOINCREMENT, description TEXT NOT NULL)
  - SQL command to create a 'todos' table within the connected Turso database.
  - Columns:
    - id: INTEGER PRIMARY KEY AUTOINCREMENT
    - description: TEXT NOT NULL

turso db show <database-name> --url
  - Retrieves the URL for a specified Turso database.
  - Parameters:
    - <database-name>: The name of the database.
  - Returns: The database URL.

turso db tokens create <database-name>
  - Generates an access token for a specified Turso database, used for authentication during deployment.
  - Parameters:
    - <database-name>: The name of the database for which to create a token.
  - Returns: An authentication token.
```

----------------------------------------

TITLE: Bootstrapping Next.js App with FCM Example using pnpm (Bash)
DESCRIPTION: This command initializes a new Next.js project named `with-firebase-cloud-messaging-app` using `pnpm`. It employs the `create next-app` utility to clone and set up the `with-firebase-cloud-messaging` example, providing a ready-to-use template for integrating Firebase Cloud Messaging.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

----------------------------------------

TITLE: Configure Contentful Webhook for Next.js On-Demand Revalidation
DESCRIPTION: Detailed configuration steps for setting up a Contentful webhook to call the Next.js revalidation API endpoint. This includes specifying the POST URL, adding a secret header for authentication, setting the content type, and defining triggers for content changes within Contentful.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
Contentful Webhook Configuration:
  Name: User-defined webhook name (e.g., 'Next.js Revalidation')
  Activate: true
  POST URL: https://<YOUR_VERCEL_DEPLOYMENT_URL>/api/revalidate
    - Description: The target endpoint on your Vercel deployment that handles revalidation requests.
    - Parameters:
      - <YOUR_VERCEL_DEPLOYMENT_URL>: The base URL of your Vercel deployment, obtained from the Vercel dashboard.
  Triggers:
    - Publishing of Entries and Assets
    - Unpublishing of Entries and Assets
    - (Can be configured for specific events or all events)
  Secret Header:
    - Name: x-vercel-reval-key
    - Value: CONTENTFUL_REVALIDATE_SECRET (value from your Vercel environment variables)
    - Description: A shared secret used to authenticate the webhook request, ensuring only authorized calls trigger revalidation.
  Content Type: application/json
  Verification: Check Contentful webhook request logs for a 200 status code or monitor Vercel function logs for successful revalidation.
```

----------------------------------------

TITLE: Bootstrap Next.js App with Rosetta i18n Example
DESCRIPTION: Instructions to quickly set up a new Next.js application pre-configured with the 'with-i18n-rosetta' example. This can be done using `create-next-app` with npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-i18n-rosetta/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-i18n-rosetta with-i18n-rosetta-app
```

----------------------------------------

TITLE: Initialize Next.js Authentication Example Project
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the 'auth' example, demonstrating NextAuth.js integration. These commands use various package managers (npm, Yarn, pnpm, Bun) to create the project directory 'auth-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example auth auth-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example auth auth-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example auth auth-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example auth auth-app
```

----------------------------------------

TITLE: Initialize Next.js project with OpenTelemetry example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application pre-configured with the OpenTelemetry example using different package managers. This sets up the necessary project structure and dependencies for OpenTelemetry integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-opentelemetry/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-opentelemetry with-opentelemetry-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-opentelemetry with-opentelemetry-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-opentelemetry with-opentelemetry-app
```

----------------------------------------

TITLE: Using revalidatePath in a Next.js Route Handler
DESCRIPTION: Provides examples of using `revalidatePath` within Next.js Route Handlers (API routes) to programmatically revalidate a specified path based on a query parameter.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/revalidatePath.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
import { revalidatePath } from 'next/cache'
import type { NextRequest } from 'next/server'

export async function GET(request: NextRequest) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate'
  })
}
```

LANGUAGE: JavaScript
CODE:
```
import { revalidatePath } from 'next/cache'

export async function GET(request) {
  const path = request.nextUrl.searchParams.get('path')

  if (path) {
    revalidatePath(path)
    return Response.json({ revalidated: true, now: Date.now() })
  }

  return Response.json({
    revalidated: false,
    now: Date.now(),
    message: 'Missing path to revalidate'
  })
}
```

----------------------------------------

TITLE: Install Next.js ButterCMS Starter via GitHub and NPM/Yarn
DESCRIPTION: Clones the Next.js ButterCMS starter repository from GitHub, navigates into the project directory, and installs project dependencies using either npm or yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
git clone https://github.com/ButterCMS/nextjs-starter-buttercms.git
cd nextjs-starter-buttercms
npm install # or yarn install
```

----------------------------------------

TITLE: Fetch GraphQL Data with Apollo Client in Next.js
DESCRIPTION: This snippet demonstrates how to use Apollo Client's `useQuery` hook to fetch GraphQL data within a React component in a Next.js application. It leverages TypeScript and `graphql-codegen` for type-safe data access, ensuring the `viewer` object is strongly typed based on the GraphQL schema.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript-graphql/README.md#_snippet_0

LANGUAGE: tsx
CODE:
```
import { useQuery } from ""@apollo/client"";
import { ViewerDocument } from ""lib/graphql-operations"";

const News = () => {
  // Typed already️⚡️
  const {
    data: { viewer },
  } = useQuery(ViewerDocument);

  return <div>{viewer.name}</div>;
};
```

----------------------------------------

TITLE: Use Static Runtime Values in Next.js Config
DESCRIPTION: Shows that the `runtime` property within the Next.js `config` object must be a static string literal, disallowing dynamic expressions like template literals with concatenation. The 'Not Allowed' example uses a dynamic template literal, while 'Allowed' examples use static string values.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_2

LANGUAGE: js
CODE:
```
// `config.runtime` contains a dynamic expression
export const config = {
  runtime: `node${'js'}`, 
}
```

LANGUAGE: js
CODE:
```
export const config = {
  runtime: 'nodejs',
}
export const config = {
  runtime: `edge`,
}
```

----------------------------------------

TITLE: Create Next.js App from Official Example
DESCRIPTION: Illustrates how to bootstrap a Next.js application using a pre-defined official example from the Next.js repository. This method is useful for quickly setting up projects with specific features or configurations provided by the Next.js team.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app@latest --example [example-name] [your-project-name]
```

----------------------------------------

TITLE: Handle Mutations with Next.js Server Actions (Good Example)
DESCRIPTION: This example demonstrates the recommended approach for handling mutations in Next.js by using Server Actions. Instead of performing mutations directly in the render method, a form submits to a dedicated Server Action (`logout`), ensuring mutations are handled safely and preventing accidental side-effects from GET requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/data-security.mdx#_snippet_17

LANGUAGE: tsx
CODE:
```
// GOOD: Using Server Actions to handle mutations
import { logout } from './actions'

export default function Page() {
  return (
    <>
      <UserProfile />
      <form action={logout}>
        <button type=""submit"">Logout</button>
      </form>
    </>
  )
}
```

----------------------------------------

TITLE: Bootstrap Next.js Relay Modern Example Project
DESCRIPTION: Commands to initialize a new Next.js project with the Relay Modern example, using npx, yarn, or pnpm for package management.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-relay-modern/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-relay-modern with-relay-modern-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-relay-modern with-relay-modern-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-relay-modern with-relay-modern-app
```

----------------------------------------

TITLE: Bootstrap Next.js Firebase Example with npx
DESCRIPTION: This command uses `npx` to quickly set up a new Next.js project pre-configured with the Firebase example, creating a directory named `with-firebase-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-firebase with-firebase-app
```

----------------------------------------

TITLE: Install TypeScript Dependencies for Next.js Project
DESCRIPTION: This command installs the necessary development dependencies for using TypeScript in a Next.js project. It includes TypeScript itself, along with type definitions for React and Node.js, enabling type-safe development.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-hosting/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install --save-dev typescript @types/react @types/node
```

----------------------------------------

TITLE: Copy Environment Variables File
DESCRIPTION: This command creates a local environment file from an example template. The .env.local file is crucial for storing sensitive database connection details, ensuring they are not committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Avoid Dynamic Modification and Expressions in Next.js Config
DESCRIPTION: Demonstrates that the `config` object in Next.js pages/API routes must be initialized directly with static constant literals and cannot be modified dynamically after export or contain dynamic expressions. The 'Not Allowed' examples show post-export modification and a dynamic expression, while 'Allowed' examples show static boolean assignments.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/invalid-page-config.mdx#_snippet_1

LANGUAGE: js
CODE:
```
export const config = {}
// `config.amp` is defined after `config` is exported
config.amp = true

// `config.amp` contains a dynamic expression
export const config = {
  amp: 1 + 1 > 2,
}
```

LANGUAGE: js
CODE:
```
export const config = {
  amp: true,
}

export const config = {
  amp: false,
}
```

----------------------------------------

TITLE: Load Movie Graph Data into Neo4j
DESCRIPTION: This command is used within the Neo4j browser or shell to load the predefined movie graph dataset. This dataset is essential for the Next.js example to function correctly, providing sample data for queries.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-neo4j/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
:play movie-graph
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the local development server for a Next.js application. This allows you to view and test your application in a browser, with hot-reloading enabled for development purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-tw-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Bootstrap a new Next.js project with Expo and TypeScript
DESCRIPTION: Commands to initialize a new Next.js project using the `create-next-app` utility with the `with-expo-typescript` example, supporting npm, Yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-expo-typescript/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-expo-typescript with-expo-typescript-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-expo-typescript with-expo-typescript-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-expo-typescript with-expo-typescript-app
```

----------------------------------------

TITLE: Bootstrap Next.js with react-bootstrap example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with the `with-react-bootstrap` example using different package managers (`npm`, `Yarn`, or `pnpm`). They leverage `create-next-app` to quickly set up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-bootstrap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-bootstrap with-react-bootstrap-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-bootstrap with-react-bootstrap-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-bootstrap with-react-bootstrap-app
```

----------------------------------------

TITLE: Next.js `redirect` Function API Reference
DESCRIPTION: Detailed API reference for the `redirect` function in Next.js, including its parameters, types, descriptions, return behavior, and important usage considerations across different contexts like Server Components, Route Handlers, and Server Actions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/redirect.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
redirect(path, type)
  - path: string
    - Description: The URL to redirect to. Can be a relative or absolute path.
  - type: 'replace' (default) or 'push' (default in Server Actions)
    - Description: The type of redirect to perform.
    - Default behavior: 'push' in Server Actions, 'replace' everywhere else.
    - Override: Can be overridden by specifying the type parameter.
    - Effect: No effect in Server Components.

Returns: Does not return a value (throws an error).

Behavioral Notes:
  - In streaming contexts, inserts a meta tag for client-side redirect.
  - In Server Actions, serves a 303 HTTP redirect response.
  - Otherwise, serves a 307 HTTP redirect response.
  - Throws a `NEXT_REDIRECT` error, terminating rendering of the route segment.
  - Should be called outside `try` blocks when using `try/catch` statements.
  - For permanent redirects (308), use `permanentRedirect` function.
  - Can be called in Client Components during rendering, but not in event handlers (use `useRouter` hook instead).
  - Accepts absolute URLs for external links.
  - For redirects before render, use `next.config.js` or Middleware.
```

----------------------------------------

TITLE: Initialize Next.js Rematch Project with create-next-app
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js project pre-configured with the Rematch example using `create-next-app`. Choose your preferred package manager: npm, Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rematch/README.md#_snippet_0

LANGUAGE: Bash
CODE:
```
npx create-next-app --example with-rematch with-rematch-app
```

LANGUAGE: Bash
CODE:
```
yarn create next-app --example with-rematch with-rematch-app
```

LANGUAGE: Bash
CODE:
```
pnpm create next-app --example with-rematch with-rematch-app
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Redis Cache Example
DESCRIPTION: These commands initialize a new Next.js project pre-configured with the Redis cache handler example. Choose the command corresponding to your preferred package manager (npm, Yarn, or pnpm) to quickly set up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cache-handler-redis/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cache-handler-redis cache-handler-redis-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cache-handler-redis cache-handler-redis-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cache-handler-redis cache-handler-redis-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the local development server for a Next.js application. This allows you to view and test your application in a browser, with hot-reloading enabled for development purposes.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/app-empty/js/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Copy Environment Variable Template File
DESCRIPTION: Command to copy the example environment variable file (`.env.local.example`) to a local, Git-ignored version (`.env.local`). This file will then be populated with Auth0 application settings.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Initializing Next.js Project with Jest Example (pnpm)
DESCRIPTION: This command initializes a new Next.js project using `create-next-app` and specifically pulls the `with-jest` example. It uses `pnpm` for execution, offering another alternative package manager for efficient project setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-jest/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-jest with-jest-app
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Installs project dependencies and starts the Next.js development server. This allows local testing and development of the application, typically accessible at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm install
npm run dev

# or

yarn install
yarn dev
```

----------------------------------------

TITLE: Bootstrap Next.js Enterspeed Example Application
DESCRIPTION: These commands bootstrap a new Next.js application pre-configured with the Enterspeed CMS example. Choose your preferred package manager (npm, Yarn, or pnpm) to execute the `create-next-app` command, which sets up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-enterspeed/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-enterspeed enterspeed-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-enterspeed enterspeed-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app -- --example cms-enterspeed enterspeed-app
```

----------------------------------------

TITLE: Fetch data in Next.js Server Components using `fetch` API
DESCRIPTION: This snippet demonstrates how to fetch data in a Next.js Server Component using the native `fetch` API. The component is defined as an asynchronous function, allowing it to `await` the `fetch` call. It then processes the JSON response to render a dynamic list of posts.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/09-fetching-data.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Bootstrap Next.js Application with tsParticles Example
DESCRIPTION: Commands to initialize a new Next.js project pre-configured with the tsParticles example. These commands use different package managers (npx, yarn, pnpm) to create the application directory and set up the project structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-particles/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-particles with-particles-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-particles with-particles-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app -- --example with-particles with-particles-app
```

----------------------------------------

TITLE: Next.js NextRequest Cookies API
DESCRIPTION: API reference for managing cookies within Next.js `NextRequest` objects. `NextRequest` extends the standard Web Request API with additional convenience methods for reading and mutating the `Set-Cookie` header.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/next-request.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
NextRequest.cookies:
  Description: Read or mutate the Set-Cookie header of the request.

  NextRequest.cookies.set(name: string, value: string): void
    Description: Given a name, set a cookie with the given value on the request.
    Parameters:
      name: The name of the cookie.
      value: The value to set for the cookie.
    Example:
      request.cookies.set('show-banner', 'false')
      // request will have a `Set-Cookie:show-banner=false;path=/home` header

  NextRequest.cookies.get(name: string): { name: string, value: string, Path: string } | undefined
    Description: Given a cookie name, return the value of the cookie. If the cookie is not found, undefined is returned. If multiple cookies are found, the first one is returned.
    Parameters:
      name: The name of the cookie to retrieve.
    Returns: An object containing cookie details (name, value, Path) or undefined.
    Example:
      request.cookies.get('show-banner')
      // Returns: { name: 'show-banner', value: 'false', Path: '/home' }

  NextRequest.cookies.getAll(name?: string): Array<{ name: string, value: string, Path: string }>
    Description: Given a cookie name, return the values of the cookie. If no name is given, return all cookies on the request.
    Parameters:
      name (optional): The name of the cookie to retrieve all values for.
    Returns: An array of objects, each containing cookie details (name, value, Path).
    Example:
      request.cookies.getAll('experiments')
      // Returns: [ { name: 'experiments', value: 'new-pricing-page', Path: '/home' }, { name: 'experiments', value: 'winter-launch', Path: '/home' } ]
      request.cookies.getAll()
      // Returns all cookies for the request

  NextRequest.cookies.delete(name: string): boolean
    Description: Given a cookie name, delete the cookie from the request.
    Parameters:
      name: The name of the cookie to delete.
    Returns: `true` if the cookie was deleted, `false` if nothing was deleted.
    Example:
      request.cookies.delete('experiments')

  NextRequest.cookies.has(name: string): boolean
    Description: Given a cookie name, return `true` if the cookie exists on the request.
    Parameters:
      name: The name of the cookie to check for.
    Returns: `true` if the cookie exists, `false` otherwise.
    Example:
      request.cookies.has('experiments')

  NextRequest.cookies.clear(): void
    Description: Remove the Set-Cookie header from the request.
    Example:
      request.cookies.clear()
```

----------------------------------------

TITLE: Configure Umbraco Next.js Environment Variables
DESCRIPTION: This snippet shows the required environment variables for a Next.js application integrating with Umbraco CMS. It includes settings for the Umbraco server URL, API key, preview secret, and a Node.js TLS bypass for local development. The TLS bypass is for local development only and should not be used in production.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
NODE_TLS_REJECT_UNAUTHORIZED=0
UMBRACO_SERVER_URL = 'https://localhost:12345'
UMBRACO_DELIVERY_API_KEY = 'my-secret-api-key'
UMBRACO_PREVIEW_SECRET = 'my-preview-secret'
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Cloudinary using pnpm
DESCRIPTION: This command initializes a new Next.js project named 'with-cloudinary-app' using `create-next-app` and pre-configures it with the 'with-cloudinary' example. It uses `pnpm create`, pnpm's command for scaffolding projects, to set up the application efficiently.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cloudinary/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cloudinary with-cloudinary-app
```

----------------------------------------

TITLE: Reading and Setting Headers in Next.js Route Handlers using next/headers
DESCRIPTION: This example demonstrates how to read incoming HTTP headers using the `headers` function from `next/headers` and set outgoing headers in a Next.js Route Handler. The `GET` function retrieves the 'referer' header and then includes it in the response, showcasing header manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_9

LANGUAGE: TypeScript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request: Request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

LANGUAGE: JavaScript
CODE:
```
import { headers } from 'next/headers'

export async function GET(request) {
  const headersList = await headers()
  const referer = headersList.get('referer')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { referer: referer },
  })
}
```

----------------------------------------

TITLE: API Reference for useMDXComponents Function
DESCRIPTION: Comprehensive API documentation for the `useMDXComponents` function, detailing its signature, parameters, and return values. This function is crucial for customizing MDX rendering in Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/mdx-components.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
useMDXComponents function:
  Signature:
    TypeScript: export function useMDXComponents(components: MDXComponents): MDXComponents
    JavaScript: export function useMDXComponents(components)
  Parameters:
    components: MDXComponents
      - Description: An object where keys are the names of HTML elements to override, and values are the components to render instead.
      - Type: MDXComponents (from 'mdx/types' in TypeScript)
      - Note: It's important to pass through all other components (i.e. ...components) that are not being overridden to ensure default rendering for uncustomized elements.
  Returns:
    MDXComponents: The merged object of MDX components, including both default and custom overrides.
```

----------------------------------------

TITLE: Bootstrap Next.js Application with Stencil Example
DESCRIPTION: These commands illustrate how to initialize a new Next.js application pre-configured with the Stencil.js example. They leverage `create-next-app` with different package managers (npm, Yarn, pnpm) to quickly set up the project structure, including the `web-app` and `test-component` workspaces.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stencil/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-stencil with-stencil-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-stencil with-stencil-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-stencil with-stencil-app
```

----------------------------------------

TITLE: Bootstrap Next.js app with Couchbase example
DESCRIPTION: Commands to initialize a new Next.js project using the `with-couchbase` example template via npx, yarn, or pnpm. This sets up the basic project structure and dependencies for a Couchbase-integrated application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-couchbase/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-couchbase with-couchbase-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-couchbase with-couchbase-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-couchbase with-couchbase-app
```

----------------------------------------

TITLE: Handle Form Submission with Next.js API Route
DESCRIPTION: This code defines a Next.js API route (`/api/submit`) that processes incoming form data from the request body. It demonstrates how to extract data, perform an operation (e.g., `createItem`), and return a JSON response with a status code. This route runs on the server, allowing secure handling of sensitive operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_0

LANGUAGE: TypeScript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const data = req.body
  const id = await createItem(data)
  res.status(200).json({ id })
}
```

LANGUAGE: JavaScript
CODE:
```
export default function handler(req, res) {
  const data = req.body
  // call your database, etc.
  // const id = await createItem(data)
  // ...
  res.status(200).json({ data })
}
```

----------------------------------------

TITLE: Wrap useSearchParams Component with Suspense for Static Rendering
DESCRIPTION: This example shows how to integrate a component that uses `useSearchParams` (like the `SearchBar`) within a `Suspense` boundary. This allows the surrounding page to be statically rendered while the dynamic part (the `SearchBar`) is client-side rendered, improving initial HTML delivery. A `SearchBarFallback` component is provided for the initial render before hydration.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_3

LANGUAGE: tsx
CODE:
```
import { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}
```

LANGUAGE: jsx
CODE:
```
import { Suspense } from 'react'\nimport SearchBar from './search-bar'\n\n// This component passed as a fallback to the Suspense boundary\n// will be rendered in place of the search bar in the initial HTML.\n// When the value is available during React hydration the fallback\n// will be replaced with the `<SearchBar>` component.\nfunction SearchBarFallback() {\n  return <>placeholder</>\n}\n\nexport default function Page() {\n  return (\n    <>\n      <nav>\n        <Suspense fallback={<SearchBarFallback />}>\n          <SearchBar />\n        </Suspense>\n      </nav>\n      <h1>Dashboard</h1>\n    </>\n  )\n}
```

----------------------------------------

TITLE: Secure Next.js Preview API Route with Token and Slug Validation
DESCRIPTION: This comprehensive JavaScript API route handler implements a secure Next.js Preview Mode. It validates a secret token and a slug parameter, fetches content from a headless CMS, enables preview mode by setting cookies, and then redirects the user to the specified content, incorporating safeguards against open redirect vulnerabilities.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_3

LANGUAGE: javascript
CODE:
```
export default async (req, res) => {
  // Check the secret and next parameters
  // This secret should only be known to this API route and the CMS
  if (req.query.secret !== 'MY_SECRET_TOKEN' || !req.query.slug) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  // Fetch the headless CMS to check if the provided `slug` exists
  // getPostBySlug would implement the required fetching logic to the headless CMS
  const post = await getPostBySlug(req.query.slug)

  // If the slug doesn't exist prevent preview mode from being enabled
  if (!post) {
    return res.status(401).json({ message: 'Invalid slug' })
  }

  // Enable Preview Mode by setting the cookies
  res.setPreviewData({})

  // Redirect to the path from the fetched post
  // We don't redirect to req.query.slug as that might lead to open redirect vulnerabilities
  res.redirect(post.slug)
}
```

----------------------------------------

TITLE: Next.js generateMetadata Function API Reference
DESCRIPTION: Documents the `generateMetadata` function, detailing its `props` parameter (including `params` for dynamic routes and `searchParams` for URL query parameters) and the `parent` promise. It also specifies that the function returns a `Metadata` object.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-metadata.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
generateMetadata(props: object, parent: Promise<Metadata>): Metadata
  - Description: Asynchronously generates metadata for a route segment.
  - Parameters:
    - props: object
      - Description: An object containing the parameters of the current route.
      - params: object
        - Description: Dynamic route parameters from the root segment down to the segment `generateMetadata` is called from.
        - Examples:
          - Route: app/shop/[slug]/page.js, URL: /shop/1, params: { slug: '1' }
          - Route: app/shop/[tag]/[item]/page.js, URL: /shop/1/2, params: { tag: '1', item: '2' }
          - Route: app/shop/[...slug]/page.js, URL: /shop/1/2, params: { slug: ['1', '2'] }
      - searchParams: object
        - Description: An object containing the current URL's search parameters.
        - Examples:
          - URL: /shop?a=1, searchParams: { a: '1' }
          - URL: /shop?a=1&b=2, searchParams: { a: '1', b: '2' }
          - URL: /shop?a=1&a=2, searchParams: { a: ['1', '2'] }
    - parent: Promise<Metadata>
      - Description: A promise of the resolved metadata from parent route segments.
  - Returns: Metadata object
    - Description: A `Metadata` object containing one or more metadata fields.
```

----------------------------------------

TITLE: Next.js Page Component Props: `params` API Reference
DESCRIPTION: API reference for the `params` prop available in Next.js page components. It's an optional promise resolving to an object containing dynamic route parameters from the root segment down to the page. Values must be accessed asynchronously using `async/await` or React's `use` hook. Includes examples of how `params` maps to different dynamic route patterns.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/page.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
params (optional)
  - Description: A promise that resolves to an object containing the dynamic route parameters from the root segment down to that page.
  - Type: Promise<{ [key: string]: string | string[] }>
  - Usage Notes:
    - Must use `async/await` or React's `use` function to access values.
    - In Next.js 14 and earlier, `params` was synchronous. Synchronous access is deprecated in Next.js 15.
  - Example Mapping:
    - `app/shop/[slug]/page.js` with `/shop/1` -> `Promise<{ slug: '1' }>`
    - `app/shop/[category]/[item]/page.js` with `/shop/1/2` -> `Promise<{ category: '1', item: '2' }>`
    - `app/shop/[...slug]/page.js` with `/shop/1/2` -> `Promise<{ slug: ['1', '2'] }>`
```

----------------------------------------

TITLE: Bootstrap Next.js YouTube Embed Example Application
DESCRIPTION: These commands illustrate how to initialize a new Next.js application pre-configured with the YouTube embed example. Users can choose their preferred package manager: npm, Yarn, or pnpm, to create the project directory and set up the example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-youtube-embed/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-youtube-embed with-youtube-embed-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-youtube-embed with-youtube-embed-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-youtube-embed with-youtube-embed-app
```

----------------------------------------

TITLE: Handle User Signup and Session Creation in Next.js Server Action
DESCRIPTION: This example illustrates integrating the `createSession` function within a Next.js Server Action, typically after successful user authentication or registration. It demonstrates the workflow of creating a user session and subsequently redirecting the user to a protected route using the `redirect()` API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/authentication.mdx#_snippet_13

LANGUAGE: ts
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state: FormState, formData: FormData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

LANGUAGE: js
CODE:
```
import { createSession } from '@/app/lib/session'

export async function signup(state, formData) {
  // Previous steps:
  // 1. Validate form fields
  // 2. Prepare data for insertion into database
  // 3. Insert the user into the database or call an Library API

  // Current steps:
  // 4. Create user session
  await createSession(user.id)
  // 5. Redirect user
  redirect('/profile')
}
```

----------------------------------------

TITLE: Fetch and Process External API Data in Next.js Route Handlers
DESCRIPTION: Shows how a Next.js Route Handler can act as a backend for data manipulation. It fetches data from an external weather API based on parameters received in the POST request body, constructs URL search parameters, handles the API response, and transforms the data before returning it. Includes error handling for API calls.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_7

LANGUAGE: typescript
CODE:
```
import { parseWeatherData } from '@/lib/weather'

export async function POST(request: Request) {
  const body = await request.json()
  const searchParams = new URLSearchParams({ lat: body.lat, lng: body.lng })

  try {
    const weatherResponse = await fetch(`${weatherEndpoint}?${searchParams}`)

    if (!weatherResponse.ok) {
      /* handle error */
    }

    const weatherData = await weatherResponse.text()
    const payload = parseWeatherData.asJSON(weatherData)

    return new Response(payload, { status: 200 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

LANGUAGE: javascript
CODE:
```
import { parseWeatherData } from '@/lib/weather'

export async function POST(request) {
  const body = await request.json()
  const searchParams = new URLSearchParams({ lat: body.lat, lng: body.lng })

  try {
    const weatherResponse = await fetch(`${weatherEndpoint}?${searchParams}`)

    if (!weatherResponse.ok) {
      /* handle error */
    }

    const weatherData = await weatherResponse.text()
    const payload = parseWeatherData.asJSON(weatherData)

    return new Response(payload, { status: 200 })
  } catch (reason) {
    const message =
      reason instanceof Error ? reason.message : 'Unexpected exception'

    return new Response(message, { status: 500 })
  }
}
```

----------------------------------------

TITLE: Next.js `headers` Function API Reference
DESCRIPTION: Comprehensive API documentation for the `headers` function in Next.js, detailing its parameters, return value (a read-only Web Headers object), and the available methods on the returned Headers object for accessing header information. It also includes important notes on its asynchronous nature and impact on dynamic rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/headers.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
headers()
  - Description: An asynchronous function that allows you to read the HTTP incoming request headers from a Server Component.
  - Parameters: None
  - Returns: A read-only Web Headers object (https://developer.mozilla.org/docs/Web/API/Headers).
  - Important Notes:
    - Asynchronous: `headers` is an asynchronous function that returns a promise. You must use `async/await` or React's `use` function.
    - Read-only: The returned Headers object is read-only; you cannot `set` or `delete` outgoing request headers.
    - Dynamic API: Using `headers` will opt a route into dynamic rendering, as its returned values cannot be known ahead of time.
  - Methods available on the returned Web Headers object:
    - Headers.entries(): Returns an iterator allowing to go through all key/value pairs contained in this object.
    - Headers.forEach(callbackFn: Function): Executes a provided function once for each key/value pair in this `Headers` object.
    - Headers.get(name: string): Returns a String sequence of all the values of a header within a `Headers` object with a given name.
    - Headers.has(name: string): Returns a boolean stating whether a `Headers` object contains a certain header.
    - Headers.keys(): Returns an iterator allowing you to go through all keys of the key/value pairs contained in this object.
    - Headers.values(): Returns an iterator allowing you to go through all values of the key/value pairs contained in this object.
```

----------------------------------------

TITLE: Bootstrap Next.js App with Lingui Example
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the Lingui internationalization example. Choose your preferred package manager (npm, Yarn, or pnpm) to set up the project quickly.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-lingui/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-lingui with-lingui-app
```

LANGUAGE: bash
CODE:
```
pnpm create-next-app --example with-lingui with-lingui-app
```

----------------------------------------

TITLE: Initialize Next.js Project with reactstrap Example
DESCRIPTION: These commands bootstrap a new Next.js application using the `with-reactstrap` example template. Choose the command corresponding to your preferred package manager (npm, Yarn, or pnpm) to quickly set up a project with reactstrap integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-reactstrap/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-reactstrap with-reactstrap-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-reactstrap with-reactstrap-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-reactstrap with-reactstrap-app
```

----------------------------------------

TITLE: Bootstrap Next.js app with React Intl example
DESCRIPTION: This snippet shows how to initialize a new Next.js project using `create-next-app` with the `with-react-intl` example. It provides commands for npm, Yarn, and pnpm package managers to quickly set up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-react-intl/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-react-intl with-react-intl-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-react-intl with-react-intl-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-react-intl with-react-intl-app
```

----------------------------------------

TITLE: Initialize Next.js App with Default Template
DESCRIPTION: Shows how to start a new Next.js project using the default template. Running this command without additional arguments will prompt the user for various configuration choices, guiding them through the setup process.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_2

LANGUAGE: bash
CODE:
```
npx create-next-app@latest
```

LANGUAGE: txt
CODE:
```
What is your project named?  my-app
Would you like to use TypeScript?  No / Yes
Would you like to use ESLint?  No / Yes
Would you like to use Tailwind CSS?  No / Yes
Would you like your code inside a `src/` directory?  No / Yes
Would you like to use App Router? (recommended)  No / Yes
Would you like to use Turbopack for `next dev`?  No / Yes
Would you like to customize the import alias (`@/*` by default)?  No / Yes
```

----------------------------------------

TITLE: Bootstrap Next.js MDX Example App
DESCRIPTION: Commands to initialize a new Next.js project using the MDX example, demonstrating usage with npx, yarn, pnpm, and bunx.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example mdx mdx-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example mdx mdx-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example mdx mdx-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example mdx mdx-app
```

----------------------------------------

TITLE: Bootstrap Next.js Firebase Example with Yarn
DESCRIPTION: This command uses `yarn` to quickly set up a new Next.js project pre-configured with the Firebase example, creating a directory named `with-firebase-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-firebase with-firebase-app
```

----------------------------------------

TITLE: Next.js Extended `fetch()` API Options
DESCRIPTION: Reference for the extended options available with Next.js's `fetch()` API, which configure caching, revalidation, and tagging behavior for server-side requests interacting with the Data Cache.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
fetch(url, options)
  - Extends the Web `fetch()` API.
  - Parameters:
    - `url`: The URL to fetch.
    - `options`: An object containing standard `fetch` options plus Next.js specific extensions.

options.cache
  - Type: `'force-cache' | 'no-store' | 'auto no cache'`
  - Description: Configures how the request interacts with the Next.js Data Cache.
  - Values:
    - `'auto no cache'` (default): Next.js fetches the resource from the remote server on every request in development, but will fetch once during `next build` because the route will be statically prerendered. If Dynamic APIs are detected on the route, Next.js will fetch the resource on every request.
    - `'no-store'`: Next.js fetches the resource from the remote server on every request, even if Dynamic APIs are not detected on the route.
    - `'force-cache'`: Next.js looks for a matching request in its Data Cache. If there is a match and it is fresh, it will be returned from the cache. If there is no match or a stale match, Next.js will fetch the resource from the remote server and update the cache with the downloaded resource.
  - Example: `fetch(`https://...`, { cache: 'force-cache' | 'no-store' })`

options.next.revalidate
  - Type: `false | 0 | number` (seconds)
  - Description: Sets the cache lifetime of a resource in the Data Cache.
  - Values:
    - `false`: Cache the resource indefinitely. Semantically equivalent to `revalidate: Infinity`.
    - `0`: Prevent the resource from being cached.
    - `number`: Specify the resource should have a cache lifetime of at most `n` seconds.
  - Notes:
    - If an individual `fetch()` request sets a `revalidate` number lower than the default `revalidate` of a route, the whole route revalidation interval will be decreased.
    - If two fetch requests with the same URL in the same route have different `revalidate` values, the lower value will be used.
    - Conflicting options such as `{ revalidate: 3600, cache: 'no-store' }` are not allowed, both will be ignored, and in development mode a warning will be printed to the terminal.
  - Example: `fetch(`https://...`, { next: { revalidate: false | 0 | number } })`

options.next.tags
  - Type: `string[]`
  - Description: Sets cache tags for a resource. Data can then be revalidated on-demand using `revalidateTag`. The max length for a custom tag is 256 characters and the max tag items is 128.
  - Example: `fetch(`https://...`, { next: { tags: ['collection'] } })`
```

----------------------------------------

TITLE: Initialize Next.js AMP Project
DESCRIPTION: Commands to bootstrap a new Next.js application configured with the AMP example, using various package managers like npm (via npx), Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/amp/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example amp amp-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example amp amp-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example amp amp-app
```

----------------------------------------

TITLE: Reading and Setting Cookies in Next.js Route Handlers using next/headers
DESCRIPTION: This example shows how to read and set HTTP cookies within a Next.js Route Handler using the `cookies` function from `next/headers`. The `GET` function retrieves a 'token' cookie and then sets it back in the response headers, demonstrating server-side cookie manipulation.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_7

LANGUAGE: TypeScript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request: Request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token.value}` },
  })
}
```

LANGUAGE: JavaScript
CODE:
```
import { cookies } from 'next/headers'

export async function GET(request) {
  const cookieStore = await cookies()
  const token = cookieStore.get('token')

  return new Response('Hello, Next.js!', {
    status: 200,
    headers: { 'Set-Cookie': `token=${token}` },
  })
}
```

----------------------------------------

TITLE: Bootstrap Next.js project with XState example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `create-next-app` utility, specifically leveraging the `with-xstate` example template. This sets up a pre-configured project structure for XState integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-xstate/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-xstate with-xstate-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-xstate with-xstate-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-xstate with-xstate-app
```

----------------------------------------

TITLE: Bootstrap Next.js active-class-name example project
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using `create-next-app` and bootstrap it with the `active-class-name` example. This allows users to quickly set up a working environment to explore the `activeClassName` replication.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/active-class-name/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example active-class-name active-class-name-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example active-class-name active-class-name-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example active-class-name active-class-name-app
```

----------------------------------------

TITLE: Generate EdgeQL Query Builder for TypeScript
DESCRIPTION: Command to generate the TypeScript EdgeQL query builder, enabling type-safe database interactions, and an example of how to import it.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-edgedb/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npx edgeql-js
```

LANGUAGE: typescript
CODE:
```
import e from ""./dbschema/edgeql-js"";
```

----------------------------------------

TITLE: Bootstrap Next.js example with Realm-Web SDK
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the Realm-Web SDK example. These commands use different package managers (npx, yarn, or pnpm) to bootstrap the project from the official Next.js examples.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-realm-web/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-realm-web with-realm-web-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-realm-web with-realm-web-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-realm-web with-realm-web-app
```

----------------------------------------

TITLE: Conditionally Generate Static Paths with getStaticPaths in Next.js
DESCRIPTION: This Next.js example demonstrates how to implement `getStaticPaths` to define which pages are pre-rendered at build time. It includes conditional logic to skip static generation in preview environments (for faster builds) and fetches data from an external API to determine paths for production builds, optimizing initial page load performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/02-get-static-paths.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
export async function getStaticPaths() {
  // When this is true (in preview environments) don't
  // prerender any static pages
  // (faster builds, but slower initial page load)
  if (process.env.SKIP_BUILD_STATIC_GENERATION) {
    return {
      paths: [],
      fallback: 'blocking',
    }
  }

  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // Get the paths we want to prerender based on posts
  // In production environments, prerender all pages
  // (slower builds, but faster initial page load)
  const paths = posts.map((post) => ({
    params: { id: post.id },
  }))

  // { fallback: false } means other routes should 404
  return { paths, fallback: false }
}
```

----------------------------------------

TITLE: Bootstrapping Next.js App with FCM Example using Yarn (Bash)
DESCRIPTION: This command initializes a new Next.js project named `with-firebase-cloud-messaging-app` using `yarn`. It utilizes the `create next-app` utility to clone and set up the `with-firebase-cloud-messaging` example, providing a ready-to-use template for integrating Firebase Cloud Messaging.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-firebase-cloud-messaging/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-firebase-cloud-messaging with-firebase-cloud-messaging-app
```

----------------------------------------

TITLE: Configuring Regex Negative Lookahead Matcher in Next.js Middleware (JavaScript)
DESCRIPTION: This snippet illustrates using a regular expression with a negative lookahead in the `matcher` to exclude specific paths from Middleware execution. It ensures the middleware runs on all paths except those starting with `api`, `_next/static`, `_next/image`, or specific metadata files like `favicon.ico`, `sitemap.xml`, and `robots.txt`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/14-middleware.mdx#_snippet_4

LANGUAGE: JavaScript
CODE:
```
export const config = {
  matcher: [
    /*
     * Match all request paths except for the ones starting with:
     * - api (API routes)
     * - _next/static (static files)
     * - _next/image (image optimization files)
     * - favicon.ico, sitemap.xml, robots.txt (metadata files)
     */
    '/((?!api|_next/static|_next/image|favicon.ico|sitemap.xml|robots.txt).*)/'
  ]
}
```

----------------------------------------

TITLE: Bootstrap Next.js Custom Server Example
DESCRIPTION: These commands initialize a new Next.js application using the 'custom-server' example template. They set up a project directory named 'custom-server-app' with the necessary files for a custom server setup, using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/custom-server/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example custom-server custom-server-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example custom-server custom-server-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example custom-server custom-server-app
```

----------------------------------------

TITLE: Bootstrap Next.js SSR Portals Example with create-next-app
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js project using the `with-portals-ssr` example. They utilize `create-next-app` with different package managers: `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-portals-ssr/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-portals-ssr with-portals-ssr-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-portals-ssr with-portals-ssr-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-portals-ssr with-portals-ssr-app
```

----------------------------------------

TITLE: Configure Local Environment Variables
DESCRIPTION: Copy the example environment file to .env.local and set the PG_URI variable to your Postgres database connection string. This file will be ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-knex/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Initialize Next.js project with TinaCMS example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application pre-configured with the TinaCMS example boilerplate using different package managers (`npx`, `yarn`, or `pnpm`). Each command creates a new project directory named `cms-tina-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-tina/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-tina cms-tina-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-tina cms-tina-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-tina cms-tina-app
```

----------------------------------------

TITLE: Create Next.js App with Fela Example
DESCRIPTION: Commands to bootstrap a new Next.js application using the 'with-fela' example, demonstrating how to set up Fela for styling. This can be done using `npx` (npm), `yarn`, or `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-fela/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-fela with-fela-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-fela with-fela-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-fela with-fela-app
```

----------------------------------------

TITLE: Bootstrap Next.js Yarn Workspaces Example
DESCRIPTION: Provides commands to initialize a new Next.js application pre-configured with the Yarn workspaces example, using different package managers like npm, Yarn, and pnpm. This allows users to quickly set up the project and explore the monorepo structure.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-yarn-workspaces/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-yarn-workspaces with-yarn-workspaces-app
```

----------------------------------------

TITLE: Deprecated Next.js Middleware Response Body Patterns
DESCRIPTION: This code block lists patterns for creating responses with bodies that are no longer supported in Next.js Middleware. Attempting to use these will result in a runtime error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_3

LANGUAGE: JavaScript
CODE:
```
new Response('a text value')
new Response(streamOrBuffer)
new Response(JSON.stringify(obj), { headers: 'application/json' })
NextResponse.json()
```

----------------------------------------

TITLE: Generate a Basic robots.txt File Dynamically
DESCRIPTION: Illustrates how to dynamically generate a `robots.txt` file using `robots.js` or `robots.ts` by returning a `Robots` object with general rules for user agents and sitemap location. This approach allows for programmatic control over the `robots.txt` content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_1

LANGUAGE: ts
CODE:
```
import type { MetadataRoute } from 'next'

export default function robots(): MetadataRoute.Robots {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
      disallow: '/private/',
    },
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

LANGUAGE: js
CODE:
```
export default function robots() {
  return {
    rules: {
      userAgent: '*',
      allow: '/',
      disallow: '/private/',
    },
    sitemap: 'https://acme.com/sitemap.xml',
  }
}
```

----------------------------------------

TITLE: Implement Server-side Rendering with getServerSideProps in Next.js
DESCRIPTION: This example demonstrates how to use `getServerSideProps` in a Next.js page. It fetches data from an external API on every request and passes it as props to the page component, enabling dynamic content rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/02-rendering/01-server-side-rendering.mdx#_snippet_0

LANGUAGE: jsx
CODE:
```
export default function Page({ data }) {
  // Render data...
}

// This gets called on every request
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch(`https://.../data`)
  const data = await res.json()

  // Pass data to the page via props
  return { props: { data } }
}
```

----------------------------------------

TITLE: Creating Next.js App with Turbopack using pnpm (Bash)
DESCRIPTION: This command initializes a new Next.js project named `with-turbopack-app` using `pnpm create next-app`. It utilizes the `with-turbopack` example, offering a pnpm-specific approach to quickly set up a Next.js application with Turbopack.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-turbopack with-turbopack-app
```

----------------------------------------

TITLE: Bootstrap Next.js App with Docker Compose Example
DESCRIPTION: Commands to initialize a new Next.js application using the `with-docker-compose` example. This sets up the project structure ready for Docker Compose integration, offering options for `npx`, `yarn`, and `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-docker-compose/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-docker-compose with-docker-compose-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-docker-compose with-docker-compose-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-docker-compose with-docker-compose-app
```

----------------------------------------

TITLE: Copy example environment variables file
DESCRIPTION: Command to copy the `.env.local.example` file to `.env.local`. This file is used to store sensitive environment variables like database connection strings and is typically ignored by version control systems.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-azure-cosmos/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrap Next.js App with Passport and next-connect Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the 'with-passport-and-next-connect' example. You can choose between npm (npx), Yarn, or pnpm to create the project directory and set up the initial files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-passport-and-next-connect/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-passport-and-next-connect with-passport-and-next-connect-app
```

----------------------------------------

TITLE: Bootstrap Next.js Contentful Blog Project
DESCRIPTION: Commands to initialize a new Next.js project pre-configured with the Contentful CMS example. These commands use different package managers (npm, Yarn, pnpm) to create the project directory and set up the necessary files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-contentful/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-contentful cms-contentful-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-contentful cms-contentful-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-contentful cms-contentful-app
```

----------------------------------------

TITLE: Clearing Next.js Preview Mode Cookies
DESCRIPTION: Demonstrates a basic API route implementation to manually clear Next.js preview mode cookies using `res.clearPreviewData({})`, effectively ending the preview session for the user.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/preview-mode.mdx#_snippet_8

LANGUAGE: js
CODE:
```
export default function handler(req, res) {
  res.clearPreviewData({})
}
```

----------------------------------------

TITLE: Bootstrap Next.js Payload CMS Example Application
DESCRIPTION: Commands to initialize a new Next.js application with the `cms-payload` example, demonstrating usage with `npx`, `yarn`, and `pnpm` for different package manager preferences.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-payload/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-payload cms-payload-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-payload cms-payload-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-payload cms-payload-app
```

----------------------------------------

TITLE: Bootstrap Next.js app with cxs example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the 'with-cxs' example, using different package managers like npm (via npx), Yarn, or pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cxs/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cxs with-cxs-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cxs with-cxs-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cxs with-cxs-app
```

----------------------------------------

TITLE: Bootstrap Next.js App with Redux Toolkit Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the Redux Toolkit example using different package managers (npm, Yarn, pnpm). This sets up the project with the necessary Redux Toolkit integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redux/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-redux with-redux-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-redux with-redux-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-redux with-redux-app
```

----------------------------------------

TITLE: Creating Reusable Data Preloading and Caching Utilities
DESCRIPTION: This utility demonstrates how to create a reusable data fetching and preloading function using React's `cache` API and the `server-only` package. The `cache` function memoizes the result of `getItem`, ensuring that the data fetching logic is executed only once on the server, while the `preload` function eagerly initiates the cached data fetch.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/07-fetching-data.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id: string) => {
  void getItem(id)
}

export const getItem = cache(async (id: string) => {
  // ...
})
```

LANGUAGE: js
CODE:
```
import { cache } from 'react'
import 'server-only'
import { getItem } from '@/lib/data'

export const preload = (id) => {
  void getItem(id)
}

export const getItem = cache(async (id) => {
  // ...
})
```

----------------------------------------

TITLE: Initializing Next.js Project with Vitest Example using pnpm
DESCRIPTION: This command initializes a new Next.js application using `create-next-app` via `pnpm`. It specifically clones the `with-vitest` example, setting up a project pre-configured for Vitest integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-vitest with-vitest-app
```

----------------------------------------

TITLE: Bootstrap Next.js App with Ant Design Example
DESCRIPTION: This snippet provides commands to initialize a new Next.js application pre-configured with the Ant Design example. It covers usage with `npx`, `yarn`, and `pnpm` to quickly set up a project integrated with Ant Design.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-ant-design/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-ant-design with-ant-design-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-ant-design with-ant-design-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-ant-design with-ant-design-app
```

----------------------------------------

TITLE: Bootstrap Next.js Storyblok Blog Example
DESCRIPTION: These commands bootstrap a new Next.js application pre-configured with the Storyblok CMS example. Choose your preferred package manager (npm, Yarn, or pnpm) to initialize the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-storyblok/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example cms-storyblok cms-storyblok-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example cms-storyblok cms-storyblok-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-storyblok cms-storyblok-app
```

----------------------------------------

TITLE: Revalidating Cached Data with Next.js Route Handlers
DESCRIPTION: This snippet demonstrates how to revalidate cached data using Incremental Static Regeneration (ISR) in a Next.js Route Handler. The `revalidate` export configures the cache lifetime, and the `GET` function fetches data from an external API, returning it as JSON. This allows for automatic data revalidation at specified intervals.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/01-routing/13-route-handlers.mdx#_snippet_6

LANGUAGE: TypeScript
CODE:
```
export const revalidate = 60

export async function GET() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()

  return Response.json(posts)
}
```

LANGUAGE: JavaScript
CODE:
```
export const revalidate = 60

export async function GET() {
  const data = await fetch('https://api.vercel.app/blog')
  const posts = await data.json()

  return Response.json(posts)
}
```

----------------------------------------

TITLE: Bootstrap Next.js ESLint Example Application
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using the `with-eslint` example. Choose your preferred package manager (npm, Yarn, or pnpm) to quickly set up a Next.js application with integrated ESLint configuration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-eslint/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-eslint with-eslint-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-eslint with-eslint-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-eslint with-eslint-app
```

----------------------------------------

TITLE: Initialize Next.js App with Panda CSS Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the pre-configured 'panda-css' example template. They cover initialization with npx, Yarn, pnpm, and Bun, creating a project directory named 'panda-css-app'.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/panda-css/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example panda-css panda-css-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example panda-css panda-css-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example panda-css panda-css-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example panda-css panda-css-app
```

----------------------------------------

TITLE: Redirecting User After Server Action Completion (Next.js)
DESCRIPTION: This code shows how to redirect a user to a new route (`/post/${id}`) after a Server Action completes, using the `redirect` API from `next/navigation`. It's crucial to call `redirect` outside of any `try/catch` blocks. The example also combines this with `revalidateTag` to ensure related cached data is updated before redirection.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-building-your-application/02-data-fetching/03-server-actions-and-mutations.mdx#_snippet_14

LANGUAGE: ts
CODE:
```
'use server'

import { redirect } from 'next/navigation'
import { revalidateTag } from 'next/cache'

export async function createPost(id: string) {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts') // Update cached posts
  redirect(`/post/${id}`) // Navigate to the new post page
}
```

LANGUAGE: js
CODE:
```
'use server'

import { redirect } from 'next/navigation'
import { revalidateTag } from 'next/cache'

export async function createPost(id) {
  try {
    // ...
  } catch (error) {
    // ...
  }

  revalidateTag('posts') // Update cached posts
  redirect(`/post/${id}`) // Navigate to the new post page
}
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server, making the application accessible locally. This snippet provides options for various package managers including npm, yarn, pnpm, and bun.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default-tw/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Next.js userAgent Helper Properties Reference
DESCRIPTION: Detailed documentation for the properties available on the object returned by the `userAgent` helper in Next.js, providing comprehensive information about the client's browser, device, operating system, CPU, and bot status.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/userAgent.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
`isBot`
  - Type: `boolean`
  - Description: A boolean indicating whether the request comes from a known bot.

`browser`
  - Type: `object`
  - Description: An object containing information about the browser used in the request.
  - Properties:
    - `name`: `string | undefined` - The browser's name.
    - `version`: `string | undefined` - The browser's version.

`device`
  - Type: `object`
  - Description: An object containing information about the device used in the request.
  - Properties:
    - `model`: `string | undefined` - The model of the device.
    - `type`: `string | undefined` - The type of the device (e.g., `console`, `mobile`, `tablet`, `smarttv`, `wearable`, `embedded`).
    - `vendor`: `string | undefined` - The vendor of the device.

`engine`
  - Type: `object`
  - Description: An object containing information about the browser's engine.
  - Properties:
    - `name`: `string | undefined` - The engine's name (e.g., `Amaya`, `Blink`, `EdgeHTML`, `Gecko`, `WebKit`).
    - `version`: `string | undefined` - The engine's version.

`os`
  - Type: `object`
  - Description: An object containing information about the operating system.
  - Properties:
    - `name`: `string | undefined` - The name of the OS.
    - `version`: `string | undefined` - The version of the OS.

`cpu`
  - Type: `object`
  - Description: An object containing information about the CPU architecture.
  - Properties:
    - `architecture`: `string | undefined` - The architecture of the CPU (e.g., `amd64`, `arm`, `ia32`, `mips`).
```

----------------------------------------

TITLE: Initialize Next.js App with Orbit-Components Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Orbit-components example. These commands use different package managers (npx, yarn, or pnpm) to create the project directory and set up the initial files.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-orbit-components/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-orbit-components with-orbit-components-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-orbit-components with-orbit-components-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-orbit-components with-orbit-components-app
```

----------------------------------------

TITLE: Bootstrap Next.js Project with cookies-next Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `with-cookies-next` example template. You can choose your preferred package manager: `npx` (npm), `yarn`, or `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cookies-next/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-cookies-next with-cookies-next-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cookies-next with-cookies-next-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-cookies-next with-cookies-next-app
```

----------------------------------------

TITLE: Populating Grafbase Backend with Post Entries (GraphQL)
DESCRIPTION: This GraphQL mutation creates a new `Post` entry in the Grafbase backend, including a title, slug, and an associated comment. It's used to populate the local development database with sample data for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#_snippet_3

LANGUAGE: graphql
CODE:
```
mutation {
  postCreate(
    input: {
      title: ""I love Next.js!""
      slug: ""i-love-nextjs""
      comments: [{ create: { message: ""me too!"" } }]
    }
  ) {
    post {
      id
      slug
    }
  }
}
```

----------------------------------------

TITLE: Next.js not-found.js Component API Reference
DESCRIPTION: API reference for the `not-found.js` file in Next.js, which serves as a custom UI for 404 errors or unmatched URLs. It details the component's interface, behavior, and how it handles different HTTP response statuses.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/not-found.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
not-found.js Component:
  Purpose: Renders custom UI for 404 errors or when `notFound()` is thrown within a route segment.
  Props: None. The component does not accept any props.
  Behavior:
    - Returns `200` HTTP status code for streamed responses.
    - Returns `404` HTTP status code for non-streamed responses.
    - The root `app/not-found.js` file also handles any unmatched URLs for the entire application.
  Usage: Export a default React component from `not-found.js` or `not-found.tsx` in your `app` directory.
```

----------------------------------------

TITLE: Create Shared Data Fetching Utility for Next.js
DESCRIPTION: Illustrates how to define a reusable data fetching function within a `lib/` directory. This pattern allows the same server-side logic to be shared efficiently between `getStaticProps` and API routes, centralizing data access and improving application performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/01-get-static-props.mdx#_snippet_2

LANGUAGE: js
CODE:
```
// The following function is shared
// with getStaticProps and API routes
// from a `lib/` directory
export async function loadPosts() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts/')
  const data = await res.json()

  return data
}
```

----------------------------------------

TITLE: Embed Icon Components in Next.js MDX
DESCRIPTION: Demonstrates how to embed predefined icon components, such as <Check> and <Cross>, directly into MDX documentation files. These components can be used to add visual cues and enhance readability without using emojis.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_13

LANGUAGE: mdx
CODE:
```
<Check size={18} />
<Cross size={18} />
```

----------------------------------------

TITLE: Embed Google Maps in Next.js with GoogleMapsEmbed
DESCRIPTION: This example illustrates the usage of the `GoogleMapsEmbed` component to integrate a Google Map into a Next.js page. It supports various parameters like API key, dimensions, mode, and query, and defaults to lazy-loading for performance.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/third-parties/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import { GoogleMapsEmbed } from '@next/third-parties/google'

export default function Page() {
  return (
    <GoogleMapsEmbed
      apiKey=""XYZ""
      height={200}
      width=""100%""
      mode=""place""
      q=""Brooklyn+Bridge,New+York,NY""
    />
  )
}
```

----------------------------------------

TITLE: Next.js Image Component Properties
DESCRIPTION: Detailed documentation for various properties of the Next.js `<Image />` component, including layout, loading behavior, placeholders, and callback functions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
objectPosition: string
  - Defines how the image is positioned within its parent element when using `layout=""fill""`.
  - Value is passed to the `object-position` CSS property.

onLoadingComplete: (info: { naturalWidth: number; naturalHeight: number }) => void
  - A callback function invoked once the image is completely loaded and the placeholder has been removed.
  - Parameters:
    - naturalWidth: The intrinsic width of the image in pixels.
    - naturalHeight: The intrinsic height of the image in pixels.

loading: 'lazy' | 'eager'
  - The loading behavior of the image.
  - Defaults to 'lazy': Defers loading until the image reaches a calculated distance from the viewport.
  - 'eager': Loads the image immediately.

blurDataURL: string (Data URL)
  - A Data URL used as a placeholder image before the `src` image loads.
  - Only takes effect with `placeholder=""blur""`.
  - Must be a base64-encoded image; small images (10px or less) are recommended for performance.

lazyBoundary: string
  - A string (similar to CSS margin property syntax) that acts as the bounding box for detecting viewport intersection to trigger lazy loading.
  - Defaults to ""200px"".
  - Requires `lazyRoot` if the image is nested in a scrollable parent other than the root document.

lazyRoot: React.RefObject<HTMLElement> | null
  - A React Ref pointing to the scrollable parent element for lazy loading.
  - Defaults to `null` (the document viewport).
  - The Ref must point to a DOM element or a React component that forwards the Ref.

unoptimized: boolean
  - When true, the source image is served as-is from `src` without changing quality, size, or format.
  - Defaults to `false`.
  - Useful for small images (<1KB), vector images (SVG), or animated images (GIF).
  - Can be assigned to all images via `next.config.js`.

Other Props:
  - All other properties on the `<Image />` component are passed to the underlying `img` element, with the following exceptions:
    - srcSet: Use Device Sizes instead.
    - ref: Use onLoadingComplete instead.
    - decoding: It is always ""async"".
```

----------------------------------------

TITLE: Run Next.js Development Server
DESCRIPTION: Commands to start the Next.js development server, making the application accessible locally. This snippet provides options for various package managers including npm, yarn, pnpm, and bun.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/templates/default/ts/README-template.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

----------------------------------------

TITLE: Initialize Next.js App with Styletron Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the 'with-styletron' example template. They utilize different package managers (npm, Yarn, or pnpm) to create a pre-configured project with Styletron integrated for styling.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-styletron/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-styletron with-styletron-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-styletron with-styletron-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-styletron with-styletron-app
```

----------------------------------------

TITLE: Initialize Next.js App with Algolia React InstantSearch Example
DESCRIPTION: These commands bootstrap a new Next.js application pre-configured with the Algolia React InstantSearch example. They use different package managers (npm, Yarn, pnpm, Bun) to execute `create-next-app` and set up the project directory with the necessary dependencies for Algolia integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-algolia-react-instantsearch/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example with-algolia-react-instantsearch with-algolia-react-instantsearch-app
```

----------------------------------------

TITLE: Bootstrapping Next.js Electron App with pnpm
DESCRIPTION: This command uses `pnpm create` to initialize a new Next.js project based on the `with-electron-typescript` example. It sets up the project structure and dependencies for an Electron application integrated with Next.js.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron-typescript/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-electron-typescript with-electron-typescript-app
```

----------------------------------------

TITLE: Bootstrap Next.js app with babel-macros example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `create-next-app` utility, specifically bootstrapping it with the `with-babel-macros` example. This allows developers to quickly set up a project pre-configured to use `babel-macros` for build-time code transformations.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-babel-macros/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-babel-macros with-babel-macros-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-babel-macros with-babel-macros-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-babel-macros with-babel-macros-app
```

----------------------------------------

TITLE: Invoke Server Functions from Client Components
DESCRIPTION: Demonstrates how a Client Component can import and invoke a Server Function defined in a separate 'use server' file. The example uses the `formAction` prop on a button to trigger the server function.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/11-updating-data.mdx#_snippet_3

LANGUAGE: TypeScript
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

LANGUAGE: JavaScript
CODE:
```
'use client'

import { createPost } from '@/app/actions'

export function Button() {
  return <button formAction={createPost}>Create</button>
}
```

----------------------------------------

TITLE: Bootstrapping Next.js Project with yarn
DESCRIPTION: This command uses `yarn create` to set up a new Next.js project called 'roadmap' based on the 'with-redis' example. It's an alternative method for users who prefer Yarn as their package manager for project initialization.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-redis/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-redis roadmap
```

----------------------------------------

TITLE: Example Output of Image Sitemap XML
DESCRIPTION: This XML snippet shows the structure of an image sitemap generated in Next.js, including the `image:image` and `image:loc` tags as specified by Google Developer Docs for image sitemaps, ensuring proper indexing of images.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/sitemap.mdx#_snippet_4

LANGUAGE: xml
CODE:
```
<?xml version=""1.0"" encoding=""UTF-8""?>
<urlset
  xmlns=""http://www.sitemaps.org/schemas/sitemap/0.9""
  xmlns:image=""http://www.google.com/schemas/sitemap-image/1.1""
>
  <url>
    <loc>https://example.com</loc>
    <image:image>
      <image:loc>https://example.com/image.jpg</image:loc>
    </image:image>
    <lastmod>2021-01-01</lastmod>
    <changefreq>weekly</changefreq>
    <priority>0.5</priority>
  </url>
</urlset>
```

----------------------------------------

TITLE: Bootstrap Next.js App with Polyfills Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `with-polyfills` example. You can choose your preferred package manager: `npx` (npm), `yarn`, or `pnpm`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-polyfills/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-polyfills with-polyfills-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-polyfills with-polyfills-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-polyfills with-polyfills-app
```

----------------------------------------

TITLE: Submit Form Data from Client to Next.js API Route
DESCRIPTION: This React component renders a simple HTML form. The `onSubmit` event handler prevents default form submission, creates a `FormData` object from the form, and sends it to the `/api/submit` API route using the `fetch` API with a POST request. It then handles the JSON response from the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/02-guides/forms.mdx#_snippet_1

LANGUAGE: TSX
CODE:
```
import { FormEvent } from 'react'

export default function Page() {
  async function onSubmit(event: FormEvent<HTMLFormElement>) {
    event.preventDefault()

    const formData = new FormData(event.currentTarget)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type=""text"" name=""name"" />
      <button type=""submit"">Submit</button>
    </form>
  )
}
```

LANGUAGE: JSX
CODE:
```
export default function Page() {
  async function onSubmit(event) {
    event.preventDefault()

    const formData = new FormData(event.target)
    const response = await fetch('/api/submit', {
      method: 'POST',
      body: formData,
    })

    // Handle response if necessary
    const data = await response.json()
    // ...
  }

  return (
    <form onSubmit={onSubmit}>
      <input type=""text"" name=""name"" />
      <button type=""submit"">Submit</button>
    </form>
  )
}
```

----------------------------------------

TITLE: Bootstrap Next.js Userbase Project
DESCRIPTION: This snippet demonstrates how to initialize a new Next.js project pre-configured with the Userbase example. It provides commands for `npx`, `yarn`, and `pnpm` to quickly set up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-userbase/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-userbase next-userbase-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-userbase next-userbase-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-userbase next-userbase-app
```

----------------------------------------

TITLE: Bootstrap Next.js App with Shallow Routing Example
DESCRIPTION: These commands initialize a new Next.js application using the `with-shallow-routing` example. They demonstrate how to quickly set up a project that utilizes Next.js shallow routing functionality, using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-shallow-routing/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-shallow-routing with-shallow-routing-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-shallow-routing with-shallow-routing-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-shallow-routing with-shallow-routing-app
```

----------------------------------------

TITLE: Accessing Non-Tainted Properties of a Tainted Object
DESCRIPTION: This example shows that even when a specific value within an object has been tainted, other properties of that same object that are not tainted can still be safely accessed and passed to client components. This highlights the granular nature of the tainting mechanism.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/taint.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
export async function Dashboard() {
  const systemConfig = await getSystemConfig()

  return <ClientDashboard version={systemConfig.SERVICE_API_VERSION} />
}
```

----------------------------------------

TITLE: Next.js `after` Function API Reference
DESCRIPTION: Detailed API documentation for the `after` function in Next.js, which allows scheduling work to run after a response or prerender is complete. It covers parameters, execution duration, and important considerations for its usage across different Next.js environments.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/after.mdx#_snippet_0

LANGUAGE: APIDOC
CODE:
```
after(callback: () => void | Promise<void>)

Parameters:
- callback: A function (sync or async) that will be executed after the response (or prerender) is finished.

Duration:
- The callback will run for the platform's default or configured max duration of your route.
- Can be configured using `maxDuration` route segment config.

Behavior and Considerations:
- Executes even if the response didn't complete successfully (e.g., error thrown, notFound, redirect called).
- Supports nesting `after` calls.
- Request APIs (like `cookies`, `headers`) can be used inside `after` in Server Actions and Route Handlers for post-mutation logging.
- Request APIs cannot be used inside `after` in Server Components due to Partial Prerendering requirements.
- `after` is not a Dynamic API; calling it does not cause a route to become dynamic.
- If used within a static page, the callback executes at build time or on revalidation.
- React `cache` can be used to deduplicate functions called inside `after`.
```

----------------------------------------

TITLE: Bootstrap Next.js with Convex Example
DESCRIPTION: These commands initialize a new Next.js project named 'convex-app' using the 'create-next-app' utility. They pull the 'convex' example, providing a pre-configured setup for integrating with the Convex backend platform, demonstrating usage with npm, Yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/convex/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example convex convex-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example convex convex-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example convex convex-app
```

----------------------------------------

TITLE: Updating Route Handlers for Asynchronous Params with `await` (JavaScript)
DESCRIPTION: This example demonstrates how to modify Next.js Route Handlers (e.g., `GET` functions) to correctly handle `params` as Promises by using `await`. It provides 'Before' and 'After' versions for JavaScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_14

LANGUAGE: js
CODE:
```
// Before
export async function GET(request, segmentData) {
  const params = segmentData.params
  const slug = params.slug
}

// After
export async function GET(request, segmentData) {
  const params = await segmentData.params
  const slug = params.slug
}
```

----------------------------------------

TITLE: Format Dynamic API Accesses for Debugging in Next.js
DESCRIPTION: This function formats the recorded dynamic API accesses into a human-readable string, primarily for debugging purposes. It filters out internal Next.js and Node.js stack frames to provide a cleaner stack trace indicating where the dynamic API was used in user code.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_12

LANGUAGE: js
CODE:
```
export function formatDynamicAPIAccesses(prerenderState) {
    return prerenderState.dynamicAccesses.filter((access)=>typeof access.stack === 'string' && access.stack.length > 0).map(({ expression, stack })=>{
        stack = stack.split('\n').slice(4).filter((line)=>{
            if (line.includes('node_modules/next/')) {
                return false;
            }
            if (line.includes(' (<anonymous>)')) {
                return false;
            }
            if (line.includes(' (node:')) {
                return false;
            }
            return true;
        }).join('\n');
        return `Dynamic API Usage Debug - ${expression}:\n${stack}`;
    });
}
```

----------------------------------------

TITLE: Next.js CLI Commands Reference
DESCRIPTION: Comprehensive reference for all available Next.js CLI commands, detailing their purpose and primary function for development, building, starting, and managing Next.js applications.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/next.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
dev
  Description: Starts Next.js in development mode with Hot Module Reloading, error reporting, and more.

build
  Description: Creates an optimized production build of your application. Displaying information about each route.

start
  Description: Starts Next.js in production mode. The application should be compiled with `next build` first.

info
  Description: Prints relevant details about the current system which can be used to report Next.js bugs.

lint
  Description: Runs ESLint for all files in the `/src`, `/app`, `/pages`, `/components`, and `/lib` directories. It also provides a guided setup to install any required dependencies if ESLint it is not already configured in your application.

telemetry
  Description: Allows you to enable or disable Next.js' completely anonymous telemetry collection.
```

----------------------------------------

TITLE: unstable_cache Function API Reference
DESCRIPTION: Comprehensive API documentation for the `unstable_cache` function, detailing its signature, parameters (`fetchData`, `keyParts`, and `options` with `tags` and `revalidate` properties), and the structure of its return value. It explains how each parameter influences caching behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unstable_cache.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
unstable_cache(fetchData, keyParts, options)
  - fetchData: An asynchronous function that fetches the data to be cached. It must return a Promise.
  - keyParts: An optional array of keys that adds identification to the cache. Useful when external variables are used without being passed as parameters.
  - options: An object controlling cache behavior.
    - tags: An array of strings (e.g., 'users') used for cache invalidation.
    - revalidate: The number of seconds after which the cache should be revalidated. Omit or pass 'false' for indefinite caching.
  - Returns: A function that, when invoked, returns a Promise resolving to the cached data. If the data is not in the cache, 'fetchData' is executed, its result cached, and then returned.
```

----------------------------------------

TITLE: Bootstrap Next.js Project with next-translate Example
DESCRIPTION: These commands illustrate how to initialize a new Next.js application pre-configured with the 'with-next-translate' example. Users can choose their preferred package manager (npm, Yarn, or pnpm) to quickly set up a project with internationalization support.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-next-translate/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-next-translate with-next-translate-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-next-translate with-next-translate-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-next-translate with-next-translate-app
```

----------------------------------------

TITLE: Updating Route Handlers for Asynchronous Params with `await` (TypeScript)
DESCRIPTION: This example shows how to modify Next.js Route Handlers (e.g., `GET` functions) to correctly handle `params` as Promises by using `await`. It provides 'Before' and 'After' versions for TypeScript.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_13

LANGUAGE: tsx
CODE:
```
// Before
type Params = { slug: string }

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = segmentData.params
  const slug = params.slug
}

// After
type Params = Promise<{ slug: string }>

export async function GET(request: Request, segmentData: { params: Params }) {
  const params = await segmentData.params
  const slug = params.slug
}
```

----------------------------------------

TITLE: Format Multi-Line 'Good to know' Notes in MDX
DESCRIPTION: Demonstrates the markdown syntax for creating multi-line 'Good to know' notes, potentially with bullet points, in Next.js MDX documentation. This format is suitable for conveying more extensive or structured supplementary information.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_15

LANGUAGE: mdx
CODE:
```
> **Good to know**:
>
> - We also use this format for multi-line notes.
> - There are sometimes multiple items worth knowing or keeping in mind.
```

----------------------------------------

TITLE: Create Next.js App with Rspack Example
DESCRIPTION: These commands demonstrate how to bootstrap a new Next.js application using the `with-rspack` example. They utilize `create-next-app` with `npm`, `Yarn`, or `pnpm` to set up the project directory and initial configuration for Rspack integration.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-rspack/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-rspack with-rspack-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-rspack with-rspack-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-rspack with-rspack-app
```

----------------------------------------

TITLE: Bootstrap Next.js project with Segment Analytics example
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the Segment Analytics example, using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-segment-analytics/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-segment-analytics with-segment-analytics-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-segment-analytics with-segment-analytics-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-segment-analytics with-segment-analytics-app
```

----------------------------------------

TITLE: Next.js getStaticProps for Content Pre-rendering
DESCRIPTION: Demonstrates how to use `getStaticProps` in Next.js to fetch data at build time for a page. This asynchronous function calls an external API, processes the response, and returns the data via the `props` object, making it available to the page component for static pre-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/blog/pages/posts/pages.md#_snippet_2

LANGUAGE: javascript
CODE:
```
function Blog({ posts }) {
  // Render posts...
}

// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts
  const res = await fetch('https://.../posts')
  const posts = await res.json()

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      posts
    }
  }
}

export default Blog
```

----------------------------------------

TITLE: Create Next.js WebWorker App
DESCRIPTION: Commands to bootstrap a Next.js application using the `with-web-worker` example, demonstrating how to set up a project that utilizes WebWorkers with webpack 5. Includes options for npm, Yarn, and pnpm.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-web-worker/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-web-worker with-web-worker-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-web-worker with-web-worker-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-web-worker with-web-worker-app
```

----------------------------------------

TITLE: Initializing Next.js Project with pnpm for GitHub Pages
DESCRIPTION: This command uses `pnpm create` to scaffold a new Next.js application from the `github-pages` example. It prepares the project for static export and deployment to GitHub Pages, creating a directory named `github-pages-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example github-pages github-pages-app
```

----------------------------------------

TITLE: Bootstrap Next.js MDX Remote Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project using `create-next-app` with the `mdx-remote` example template, supporting various package managers like npm, Yarn, pnpm, and Bun.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-remote/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example mdx-remote mdx-remote-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example mdx-remote mdx-remote-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example mdx-remote mdx-remote-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example mdx-remote mdx-remote-app
```

----------------------------------------

TITLE: Bootstrap Next.js Example with create-next-app (pnpm)
DESCRIPTION: Use pnpm to bootstrap the Next.js example project 'with-absolute-imports' using the `create-next-app` utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-absolute-imports with-absolute-imports-app
```

----------------------------------------

TITLE: Next.js Link Component Version History and API Changes
DESCRIPTION: This section documents the significant API changes and feature introductions for the `next/link` component across various Next.js versions. It highlights updates such as new API additions (`onNavigate`), changes in required child elements, and improvements in `href` resolution and prefetching behavior.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/link.mdx#_snippet_30

LANGUAGE: APIDOC
CODE:
```
`next/link` Component Version History:

- `v15.4.0`: Added `auto` as an alias to the default `prefetch` behavior.
- `v15.3.0`: Added `onNavigate` API.
- `v13.0.0`: No longer requires a child `<a>` tag. A codemod is provided to automatically update your codebase.
- `v10.0.0`: `href` props pointing to a dynamic route are automatically resolved and no longer require an `as` prop.
- `v8.0.0`: Improved prefetching performance.
- `v1.0.0`: `next/link` component introduced.
```

----------------------------------------

TITLE: Running Neo4j Docker Container for Graph Database
DESCRIPTION: This command starts a Neo4j database instance as a Docker container, exposing its HTTP (7474) and Bolt (7687) ports. It mounts a local volume (`$HOME/neo4j/data`) to persist the database data, allowing the `graph.cypherl` file generated by `turbo-static` to be loaded and queried.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbo-static/readme.md#_snippet_1

LANGUAGE: bash
CODE:
```
docker run \
    --publish=7474:7474 --publish=7687:7687 \
    --volume=$HOME/neo4j/data:/data \
    neo4j
```

----------------------------------------

TITLE: Create Next.js App with Contentlayer Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js project pre-configured with Contentlayer integration. Users can choose their preferred package manager (npm, Yarn, or pnpm) to bootstrap the application from the official Next.js examples repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-contentlayer/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-contentlayer with-contentlayer-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-contentlayer with-contentlayer-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-contentlayer with-contentlayer-app
```

----------------------------------------

TITLE: Bootstrap Next.js with Mocha Example Application
DESCRIPTION: These commands initialize a new Next.js application named 'with-mocha-app' using the 'with-mocha' example template. They set up a project configured with Mocha for testing, demonstrating different package managers for the same task.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mocha/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mocha with-mocha-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mocha with-mocha-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mocha with-mocha-app
```

----------------------------------------

TITLE: Correct Next.js Link Usage with Single Child
DESCRIPTION: This example illustrates the correct way to use `next/link` by ensuring that only a single child element (in this case, an `<a>` tag) is provided. This adheres to the component's API and resolves the 'multiple children' error.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/link-multiple-children.mdx#_snippet_1

LANGUAGE: jsx
CODE:
```
import Link from 'next/link'

export default function Home() {
  return (
    <Link href=""/about"">
      <a>To About</a>
    </Link>
  )
}
```

----------------------------------------

TITLE: Next.js 15 Async Request APIs: cookies, headers, draftMode, and params/searchParams
DESCRIPTION: Details the breaking change in Next.js 15 where previously synchronous Dynamic APIs (`cookies`, `headers`, `draftMode`, `params`, `searchParams`) are now asynchronous. Provides guidance on recommended async usage and temporary synchronous workarounds.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/upgrading/version-15.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Async Request APIs (Breaking change in Next.js 15):
  - Previously synchronous Dynamic APIs are now asynchronous.
  - Affected APIs:
    - cookies
    - headers
    - draftMode
    - params (in layout.js, page.js, route.js, default.js, opengraph-image, twitter-image, icon, apple-icon)
    - searchParams (in page.js)
  - A codemod is available for migration: /docs/app/guides/upgrading/codemods#150
  - Temporary synchronous access is possible with warnings.
```

----------------------------------------

TITLE: Creating Next.js App with Turbopack using Yarn (Bash)
DESCRIPTION: This command initializes a new Next.js project named `with-turbopack-app` using `yarn create next-app`. It leverages the `with-turbopack` example, providing an alternative method to set up a Next.js application with Turbopack using Yarn.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-turbopack with-turbopack-app
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Cloudinary using Yarn
DESCRIPTION: This command initializes a new Next.js project named 'with-cloudinary-app' using `create-next-app` and pre-configures it with the 'with-cloudinary' example. It uses `yarn create`, Yarn's equivalent to `npx`, to bootstrap the application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-cloudinary/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-cloudinary with-cloudinary-app
```

----------------------------------------

TITLE: Initialize Next.js Application with Grafbase Example
DESCRIPTION: These commands initialize a new Next.js project using `create-next-app` and pre-configure it with the `with-grafbase` example. They set up the basic project structure and dependencies required for Grafbase integration using different package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-grafbase/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-grafbase with-grafbase-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-grafbase with-grafbase-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-grafbase with-grafbase-app
```

----------------------------------------

TITLE: Highlight Multiple Non-Contiguous Lines in TSX
DESCRIPTION: Illustrates how to highlight multiple specific, non-contiguous lines within a TSX code block in Next.js documentation. This is done by providing a comma-separated list of line numbers to the `highlight` prop (e.g., `highlight={1,3}`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_11

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href=""/about"">About</Link>
}
```

----------------------------------------

TITLE: Install Dependencies and Start Development Server
DESCRIPTION: This snippet provides the command-line instructions to initialize a Next.js project. `yarn install` fetches all necessary project dependencies, and `yarn dev` starts the local development server, making the application accessible, typically at `http://localhost:3000`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-buttercms/README.md#_snippet_4

LANGUAGE: Shell
CODE:
```
yarn install
yarn dev
```

----------------------------------------

TITLE: Highlight Range of Lines in TSX Code Block
DESCRIPTION: Shows how to highlight a continuous range of lines within a TSX code block in Next.js documentation. This is achieved by specifying a line range using a hyphen with the `highlight` prop (e.g., `highlight={1-5}`).
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_12

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href=""/about"">About</Link>
}
```

----------------------------------------

TITLE: Proxy API Requests with Next.js Rewrites
DESCRIPTION: Illustrates how to set up API request proxying in Next.js using the `rewrites` function in `next.config.ts`, similar to CRA's `proxy` field in `package.json`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/from-create-react-app.mdx#_snippet_18

LANGUAGE: ts
CODE:
```
import { NextConfig } from 'next'

const nextConfig: NextConfig = {
  async rewrites() {
    return [
      {
        source: '/api/:path*',
        destination: 'https://your-backend.com/:path*'
      }
    ]
  }
}
```

----------------------------------------

TITLE: Initialize Next.js App with Forms Example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the forms example using different package managers (npm, Yarn, or pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/next-forms/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example next-forms next-forms-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example next-forms next-forms-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example next-forms next-forms-app
```

----------------------------------------

TITLE: Configure CORS Headers in Next.js Route Handlers
DESCRIPTION: Illustrates how to set Cross-Origin Resource Sharing (CORS) headers for a Next.js Route Handler using standard Web API `Response` objects. It includes examples for `Access-Control-Allow-Origin`, `Access-Control-Allow-Methods`, and `Access-Control-Allow-Headers` to control cross-origin access.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_19

LANGUAGE: ts
CODE:
```
export async function GET(request: Request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    }
  })
}
```

LANGUAGE: js
CODE:
```
export async function GET(request) {
  return new Response('Hello, Next.js!', {
    status: 200,
    headers: {
      'Access-Control-Allow-Origin': '*',
      'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
      'Access-Control-Allow-Headers': 'Content-Type, Authorization'
    }
  })
}
```

----------------------------------------

TITLE: Next.js Script Component Props Reference
DESCRIPTION: Detailed documentation for all available properties of the `next/script` component, including required and optional props, their types, examples, and loading strategies.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/02-components/script.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Script Component Props:

- src:
    Type: String
    Required: Yes (unless inline script is used)
    Example: src=""http://example.com/script""
    Description: A path string specifying the URL of an external script. This can be either an absolute external URL or an internal path. The `src` property is required unless an inline script is used.

- strategy:
    Type: String
    Required: No
    Example: strategy=""lazyOnload""
    Description: The loading strategy of the script.
    Options:
      - beforeInteractive: Load before any Next.js code and before any page hydration occurs.
      - afterInteractive: (default) Load early but after some hydration on the page occurs.
      - lazyOnload: Load during browser idle time.
      - worker: (experimental) Load in a web worker.

- onLoad:
    Type: Function
    Required: No
    Example: onLoad={onLoadFunc}
    Description: Callback function invoked when the script has successfully loaded.

- onReady:
    Type: Function
    Required: No
    Example: onReady={onReadyFunc}
    Description: Callback function invoked when the script has loaded and is ready to be executed.

- onError:
    Type: Function
    Required: No
    Example: onError={onErrorFunc}
    Description: Callback function invoked if the script fails to load.
```

----------------------------------------

TITLE: Example Implementation of `after` with `AsyncLocalStorage`
DESCRIPTION: This example illustrates a practical implementation of the `after` functionality using Node.js `AsyncLocalStorage`. It shows how to define and inject the `RequestContext` accessor into `globalThis` and how to run a Next.js handler within a specific context value, providing the `waitUntil` function for asynchronous task management.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/after.mdx#_snippet_5

LANGUAGE: TSX
CODE:
```
import { AsyncLocalStorage } from 'node:async_hooks'

const RequestContextStorage = new AsyncLocalStorage<NextRequestContextValue>()

// Define and inject the accessor that next.js will use
const RequestContext: NextRequestContext = {
  get() {
    return RequestContextStorage.getStore()
  },
}
globalThis[Symbol.for('@next/request-context')] = RequestContext

const handler = (req, res) => {
  const contextValue = { waitUntil: YOUR_WAITUNTIL }
  // Provide the value
  return RequestContextStorage.run(contextValue, () => nextJsHandler(req, res))
}
```

----------------------------------------

TITLE: Bootstrap Next.js Overmind Example Application
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application pre-configured with the Overmind example, using different Node.js package managers (npx, yarn, or pnpm). This sets up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-overmind/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-overmind with-overmind-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-overmind with-overmind-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-overmind with-overmind-app
```

----------------------------------------

TITLE: Next.js Viewport Configuration API Reference
DESCRIPTION: Comprehensive API reference for configuring the page viewport in Next.js, including the static `viewport` object, the dynamic `generateViewport` function, and various supported viewport fields with their types and usage.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/generate-viewport.mdx#_snippet_6

LANGUAGE: APIDOC
CODE:
```
generateViewport({ params }): Viewport
  - Purpose: Dynamically configure the initial page viewport based on runtime information.
  - Parameters:
    - params: object - An object containing route parameters.
  - Returns: Viewport - An object conforming to the Viewport type.
  - Usage: Export this function from a `layout.tsx` or `page.tsx` file. Only supported in Server Components.
  - Note: If viewport doesn't depend on runtime information, use the static `viewport` object instead.

Viewport Object (static export): Viewport
  - Purpose: Statically configure the initial page viewport.
  - Usage: Export a `const viewport: Viewport = { ... }` object from a `layout.tsx` or `page.tsx` file. Only supported in Server Components.
  - Note: Cannot export both `viewport` object and `generateViewport` function from the same route segment.

Viewport Type Definition:
  import type { Viewport } from 'next'
  - Purpose: Provides type safety for the `viewport` object and `generateViewport` return value.

Viewport Fields (Properties of the Viewport object):

  themeColor: string | { media: string, color: string }[]
    - Purpose: Defines the color of the browser's theme elements (e.g., address bar).
    - Type: string (single color) or array of objects for media-specific colors.
    - Example (single): 'black'
    - Example (media-specific): [{ media: '(prefers-color-scheme: light)', color: 'cyan' }, { media: '(prefers-color-scheme: dark)', color: 'black' }]
    - HTML Output: <meta name=""theme-color"" content=""black"" /> or multiple <meta name=""theme-color"" media=""..."" content=""..."" />

  width: string
    - Purpose: Sets the width of the viewport.
    - Type: string (e.g., 'device-width').
    - HTML Output: Part of <meta name=""viewport"" content=""width=..."" />

  initialScale: number
    - Purpose: Sets the initial zoom level when the page is first loaded.
    - Type: number (e.g., 1).
    - HTML Output: Part of <meta name=""viewport"" content=""..., initial-scale=..."" />

  maximumScale: number
    - Purpose: Sets the maximum zoom level allowed.
    - Type: number (e.g., 1).
    - HTML Output: Part of <meta name=""viewport"" content=""..., maximum-scale=..."" />

  userScalable: boolean
    - Purpose: Determines if the user can zoom in or out on the page.
    - Type: boolean (e.g., false).
    - HTML Output: Part of <meta name=""viewport"" content=""..., user-scalable=..."" />

  colorScheme: string
    - Purpose: Specifies the preferred color scheme for the page (e.g., 'dark', 'light').
    - Type: string.
    - Example: 'dark'
    - HTML Output: <meta name=""color-scheme"" content=""dark"" />

  interactiveWidget: string (less commonly used)
    - Purpose: Controls the behavior of interactive widgets within the viewport.
    - Type: string (e.g., 'resizes-visual').
    - HTML Output: Part of <meta name=""viewport"" content=""..., interactive-widget=..."" />
```

----------------------------------------

TITLE: Fetch Data in Next.js Server Component
DESCRIPTION: Demonstrates how to use the extended `fetch` API within a Next.js Server Component to retrieve and display data from an external API. The component fetches blog posts and renders them as a list.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/fetch.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

LANGUAGE: jsx
CODE:
```
export default async function Page() {
  let data = await fetch('https://api.vercel.app/blog')
  let posts = await data.json()
  return (
    <ul>
      {posts.map((post) => (
        <li key={post.id}>{post.title}</li>
      ))}
    </ul>
  )
}
```

----------------------------------------

TITLE: Turbopack Development Entrypoints Configuration
DESCRIPTION: Defines the entrypoints and exports for the development build, mapping export names to their corresponding module part IDs and indicating the main module evaluation point. This configuration guides how the bundled application starts and exposes its public interfaces.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/complex/output.md#_snippet_14

LANGUAGE: json
CODE:
```
{
    ModuleEvaluation: 2,
    Export(
        ""cat"",
    ): 6,
    Export(
        ""dogRef"",
    ): 2,
    Export(
        ""getChimera"",
    ): 5,
    Export(
        ""initialCat"",
    ): 4,
    Exports: 7,
}
```

----------------------------------------

TITLE: Define Module Structures in Agility CMS
DESCRIPTION: This section outlines the definition of various module types within Agility CMS, including 'Intro', 'Hero Post', and 'More Stories' modules. It specifies their titles, descriptions, and any associated fields, which control their behavior and output.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-agilitycms/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Intro Module Definition:
  Title: Intro
  Description: Displays an intro message.
  Fields: None (content hard-coded in template)

Hero Post Module Definition:
  Title: Hero Post
  Description: Displays the latest Post.
  Fields: None (data associated with the post itself)

More Stories Module Definition:
  Title: More Stories
  Description: Displays a listing of Posts.
  Fields:
    - Title:
        Field Type: Text
```

----------------------------------------

TITLE: YouTubeEmbed Component API Reference
DESCRIPTION: This section details the configurable properties for the `YouTubeEmbed` component. It includes required and optional parameters such as `videoid`, `width`, `height`, `playlabel`, `params` (for YouTube player parameters), and `style` for custom styling, providing a complete overview of its API.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_12

LANGUAGE: APIDOC
CODE:
```
YouTubeEmbed Component Options:

videoid: string (Required)
  - Description: YouTube video id.

width: string (Optional)
  - Description: Width of the video container. Defaults to 'auto'.

height: string (Optional)
  - Description: Height of the video container. Defaults to 'auto'.

playlabel: string (Optional)
  - Description: A visually hidden label for the play button for accessibility.

params: string (Optional)
  - Description: The video player parameters defined by YouTube.
  - Example: ""controls=0&start=10&end=30""

style: object (Optional)
  - Description: Used to apply styles to the video container.
```

----------------------------------------

TITLE: Bootstrap Next.js Multi-Zone Application Example
DESCRIPTION: Demonstrates how to initialize a new Next.js project configured for multi-zone applications using `create-next-app` with npm, Yarn, or pnpm. This command fetches the 'with-zones' example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-zones/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-zones with-zones-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-zones with-zones-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-zones with-zones-app
```

----------------------------------------

TITLE: Copy Environment Variables File
DESCRIPTION: Command to copy the example environment variables file (`.env.local.example`) to `.env.local` for local development configuration. This file will be ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-magic/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrap Next.js Static Export Example Project
DESCRIPTION: Use `create-next-app` with npm, Yarn, or pnpm to quickly set up a new Next.js project configured for static export. This command fetches the `with-static-export` example from the Next.js repository.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-static-export/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-static-export with-static-export-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-static-export with-static-export-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-static-export with-static-export-app
```

----------------------------------------

TITLE: Configure local environment for Next.js app
DESCRIPTION: Command to copy the example environment file (`.env.local.example`) to `.env.local` for local configuration, which is ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-facebook-pixel/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrap Next.js App with Mux Video Example
DESCRIPTION: These commands use `create-next-app` with various package managers (npm, Yarn, pnpm, Bun) to initialize a new Next.js project based on the `with-mux-video` example, setting up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-mux-video with-mux-video-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-mux-video with-mux-video-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mux-video with-mux-video-app
```

LANGUAGE: bash
CODE:
```
bunx create-next-app --example with-mux-video with-mux-video-app
```

----------------------------------------

TITLE: Next.js Module Imports for Server and Client Components
DESCRIPTION: This snippet demonstrates essential import statements used in a Next.js application. It includes importing `NextResponse` from `next/server` for API route handling, a local `ClientComponent`, and a `MyModuleClientComponent` from a third-party module, showcasing typical dependency declarations.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_0

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server';
import { ClientComponent } from '../../ClientComponent';
import { MyModuleClientComponent } from 'my-module/MyModuleClientComponent';
```

----------------------------------------

TITLE: Bootstrap Next.js Project with Vitest Example
DESCRIPTION: Commands to initialize a new Next.js application pre-configured with the Vitest example, using npx, yarn, or pnpm. This sets up the project structure and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-vitest/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-vitest with-vitest-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-vitest with-vitest-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-vitest with-vitest-app
```

----------------------------------------

TITLE: Implement Redirects with Next.js Pages Router API Route
DESCRIPTION: Shows how to create an API Route in Next.js Pages Router to handle redirects. It fetches a `pathname` query parameter, looks up the corresponding redirect in `redirects.json`, and returns the redirect data or an error for invalid requests or missing entries. Includes both TypeScript and JavaScript versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_11

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'
import redirects from '@/app/redirects/redirects.json'

type RedirectEntry = {
  destination: string
  permanent: boolean
}

export default function handler(req: NextApiRequest, res: NextApiResponse) {
  const pathname = req.query.pathname
  if (!pathname) {
    return res.status(400).json({ message: 'Bad Request' })
  }

  // Get the redirect entry from the redirects.json file
  const redirect = (redirects as Record<string, RedirectEntry>)[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return res.status(400).json({ message: 'No redirect' })
  }

  // Return the redirect entry
  return res.json(redirect)
}
```

LANGUAGE: javascript
CODE:
```
import redirects from '@/app/redirects/redirects.json'

export default function handler(req, res) {
  const pathname = req.query.pathname
  if (!pathname) {
    return res.status(400).json({ message: 'Bad Request' })
  }

  // Get the redirect entry from the redirects.json file
  const redirect = redirects[pathname]

  // Account for bloom filter false positives
  if (!redirect) {
    return res.status(400).json({ message: 'No redirect' })
  }

  // Return the redirect entry
  return res.json(redirect)
}
```

----------------------------------------

TITLE: Examples of Dynamic Module and Resource Access Patterns
DESCRIPTION: This section presents various dynamic patterns for module loading and resource access, including `require()`, `import()`, a generic `readFileSync()`, and `new URL()` with `import.meta.url`, all of which involve runtime-determined paths or values.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-tests/tests/snapshot/dynamic-request/very-dynamic/issues/__l___lint TP1004__ fs.readFileSync(FreeVar(Math)[-2af706.txt#_snippet_1

LANGUAGE: JavaScript
CODE:
```
require(unknown)
```

LANGUAGE: JavaScript
CODE:
```
import(unknown)
```

LANGUAGE: JavaScript
CODE:
```
readFileSync(unknown)
```

LANGUAGE: JavaScript
CODE:
```
new URL(unknown, import.meta.url)
```

----------------------------------------

TITLE: Implementing getInitialProps for Data Fetching in Next.js
DESCRIPTION: Demonstrates how to implement the `getInitialProps` async function in a Next.js page component to fetch data (e.g., from a GitHub API) on the server-side or client-side during page transitions. The fetched data is then returned and passed as props to the React component.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-initial-props.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import { NextPageContext } from 'next'

Page.getInitialProps = async (ctx: NextPageContext) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const json = await res.json()
  return { stars: json.stargazers_count }
}

export default function Page({ stars }: { stars: number }) {
  return stars
}
```

LANGUAGE: jsx
CODE:
```
Page.getInitialProps = async (ctx) => {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const json = await res.json()
  return { stars: json.stargazers_count }
}

export default function Page({ stars }) {
  return stars
}
```

----------------------------------------

TITLE: Reuse Next.js built-in Error component with getServerSideProps
DESCRIPTION: This example demonstrates how to import and reuse the default `next/error` component within a page. It fetches data using `getServerSideProps` and conditionally renders the built-in error page based on the API response status, passing the `statusCode` for display.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/08-custom-error.mdx#_snippet_3

LANGUAGE: jsx
CODE:
```
import Error from 'next/error'

export async function getServerSideProps() {
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const errorCode = res.ok ? false : res.status
  const json = await res.json()

  return {
    props: { errorCode, stars: json.stargazers_count },
  }
}

export default function Page({ errorCode, stars }) {
  if (errorCode) {
    return <Error statusCode={errorCode} />
  }

  return <div>Next stars: {stars}</div>
}
```

----------------------------------------

TITLE: Format Single-Line 'Good to know' Notes in MDX
DESCRIPTION: Illustrates the correct markdown syntax for creating concise, single-line 'Good to know' notes in Next.js MDX documentation. These notes are useful for providing important but non-critical information without disrupting the main content flow.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_14

LANGUAGE: mdx
CODE:
```
> **Good to know**: This is a single line note.
```

----------------------------------------

TITLE: Initialize Next.js project with Playwright example
DESCRIPTION: Commands to bootstrap a new Next.js application pre-configured with the Playwright example using different package managers (npm, Yarn, pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-playwright/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-playwright with-playwright-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-playwright with-playwright-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-playwright with-playwright-app
```

----------------------------------------

TITLE: Next.js Preview Mode API Endpoint Usage
DESCRIPTION: This API endpoint is used to activate the Next.js preview mode. It requires a secret for authentication and a slug to identify the content to preview. The `<secret>` should match the `STRAPI_PREVIEW_SECRET` configured in your application, and the `<slug>` corresponds to the post's URL or identifier.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-umbraco-heartcore/README.md#_snippet_4

LANGUAGE: HTTP
CODE:
```
http://localhost:3000/api/preview?secret=<secret>&slug=<slug>
```

----------------------------------------

TITLE: Stream Responses from Next.js API Route
DESCRIPTION: Shows how to implement server-sent events (SSE) or streaming responses from a Next.js API route. It configures the response headers for `text/event-stream` and uses `res.write` to send incremental data, simulating a real-time data stream before closing the connection with `res.end`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/07-api-routes.mdx#_snippet_19

LANGUAGE: JavaScript
CODE:
```
import { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  res.writeHead(200, {
    'Content-Type': 'text/event-stream',
    'Cache-Control': ""no-store""
  })
  let i = 0
  while (i < 10) {
    res.write(`data: ${i}\n\n`)
    i++
    await new Promise((resolve) => setTimeout(resolve, 1000))
  }
  res.end()
}
```

----------------------------------------

TITLE: Install Dependencies and Start Next.js Development Server
DESCRIPTION: These commands install the necessary project dependencies and then launch the Next.js development server, utilizing Turbopack for faster compilation. Choose the set of commands corresponding to your preferred package manager (npm, Yarn, or pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install
npm run dev
```

LANGUAGE: sh
CODE:
```
yarn
yarn dev
```

LANGUAGE: sh
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Handling Redirect API Requests in Next.js Route Handler with JavaScript
DESCRIPTION: This JavaScript snippet defines a Next.js Route Handler (GET method) responsible for serving redirect data. It receives a pathname query parameter, looks up the corresponding redirect entry in a redirects.json file, and returns the redirect details as JSON. It also handles cases where the pathname is not found or is invalid, accounting for Bloom filter false positives.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/redirecting.mdx#_snippet_14

LANGUAGE: JavaScript
CODE:
```
import { NextResponse } from 'next/server'
import redirects from '@/app/redirects/redirects.json'

export function GET(request) {
  const pathname = request.nextUrl.searchParams.get('pathname')
  if (!pathname) {
    return new Response('Bad Request', { status: 400 })
  }

```

----------------------------------------

TITLE: Bootstrap Next.js Project with Turbopack Loaders Example
DESCRIPTION: These commands use `create-next-app` to initialize a new Next.js project, pre-configured with the 'with-turbopack-loaders' example. Select the command based on your package manager (npx for npm, yarn, or pnpm) to quickly set up the project.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack-loaders/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-turbopack-loaders with-turbopack-loaders-app
```

----------------------------------------

TITLE: Copying Environment Variable Example File
DESCRIPTION: This command copies the `.env.local.example` file to `.env.local`. The `.env.local` file is used to store sensitive environment variables for local development and is typically ignored by Git, ensuring credentials are not committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/auth0/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Highlight Single Line in TSX Code Block
DESCRIPTION: Demonstrates how to highlight a specific single line within a TSX code block in Next.js documentation. This is achieved by passing the line number to the `highlight` prop (e.g., `highlight={1}`), drawing attention to a particular part of the code.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_10

LANGUAGE: tsx
CODE:
```
import Link from 'next/link'

export default function Page() {
  return <Link href=""/about"">About</Link>
}
```

----------------------------------------

TITLE: Next.js Middleware with Conditional Path Logic
DESCRIPTION: While `config.matcher` is preferred, this snippet shows an alternative approach using conditional statements within the Middleware function itself to apply logic based on the request's pathname. This allows for explicit ordering of Middleware execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import type { NextRequest } from 'next/server'

export function middleware(request: NextRequest) {
  if (request.nextUrl.pathname.startsWith('/about')) {
    // This logic is only applied to /about
  }

  if (request.nextUrl.pathname.startsWith('/dashboard')) {
    // This logic is only applied to /dashboard
  }
}
```

----------------------------------------

TITLE: Next.js Static Generation Configuration Options
DESCRIPTION: Documentation for experimental configuration options related to static generation in Next.js, allowing fine-tuning of build behavior for improved performance and reliability.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/staticGeneration.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
staticGenerationRetryCount: number
  - Description: The number of times to retry a failed page generation before failing the build.
  - Default: 1

staticGenerationMaxConcurrency: number
  - Description: The maximum number of pages to be processed per worker.
  - Default: 8

staticGenerationMinPagesPerWorker: number
  - Description: The minimum number of pages to be processed before starting a new worker.
  - Default: 25
```

----------------------------------------

TITLE: Configure Next.js for MDX (Pages Directory)
DESCRIPTION: Examples for setting up `next.config.js` to enable MDX support in Next.js projects using the 'pages' directory. This includes basic setup, adding MDX plugins, integrating custom Next.js configurations, and handling `.md` file extensions.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/next-mdx/readme.md#_snippet_1

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')()
module.exports = withMDX()
```

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')({
  options: {
    remarkPlugins: [],
    rehypePlugins: [],
  },
})
module.exports = withMDX()
```

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')()
module.exports = withMDX({
  webpack(config, options) {
    return config
  },
})
```

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')({
  extension: /\.(md|mdx)$/,
})
module.exports = withMDX()
```

LANGUAGE: javascript
CODE:
```
// next.config.js
const withMDX = require('@next/mdx')({
  extension: /\.mdx?$/,
})
module.exports = withMDX({
  pageExtensions: ['js', 'jsx', 'ts', 'tsx', 'md', 'mdx'],
})
```

----------------------------------------

TITLE: Bootstrap Next.js Example with create-next-app (Yarn)
DESCRIPTION: Use Yarn to bootstrap the Next.js example project 'with-absolute-imports' using the `create-next-app` utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-absolute-imports with-absolute-imports-app
```

----------------------------------------

TITLE: Configure Environment Variables for Next.js Application
DESCRIPTION: This command copies the example environment file to create a local configuration file. The '.env.local' file is used to store sensitive information like Elasticsearch connection details (ESS_CLOUD_ID, ESS_CLOUD_USERNAME, ESS_CLOUD_PASSWORD), which are ignored by Git for security.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-elasticsearch/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Handling Next.js Requests and Responses with NextRequest and NextResponse
DESCRIPTION: This example illustrates the use of `NextRequest` and `NextResponse` in a Next.js Route Handler. It demonstrates how to access `nextUrl` for parsing request details like search parameters, and showcases `NextResponse.redirect`, `NextResponse.rewrite`, and `NextResponse.json` for common response operations.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_9

LANGUAGE: ts
CODE:
```
import { type NextRequest, NextResponse } from 'next/server'

export async function GET(request: NextRequest) {
  const nextUrl = request.nextUrl

  if (nextUrl.searchParams.get('redirect')) {
    return NextResponse.redirect(new URL('/', request.url))
  }

  if (nextUrl.searchParams.get('rewrite')) {
    return NextResponse.rewrite(new URL('/', request.url))
  }

  return NextResponse.json({ pathname: nextUrl.pathname })
}
```

LANGUAGE: js
CODE:
```
import { NextResponse } from 'next/server'

export async function GET(request) {
  const nextUrl = request.nextUrl

  if (nextUrl.searchParams.get('redirect')) {
    return NextResponse.redirect(new URL('/', request.url))
  }

  if (nextUrl.searchParams.get('rewrite')) {
    return NextResponse.rewrite(new URL('/', request.url))
  }

  return NextResponse.json({ pathname: nextUrl.pathname })
}
```

----------------------------------------

TITLE: Running Sanity Project Setup Command
DESCRIPTION: These commands execute the Sanity setup script, guiding you through configuring your Sanity project and dataset, and automatically populating relevant environment variables in your `.env.local` file. It supports npm, yarn, and pnpm package managers.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_4

LANGUAGE: bash
CODE:
```
npm run setup
```

LANGUAGE: bash
CODE:
```
yarn setup
```

LANGUAGE: bash
CODE:
```
pnpm run setup
```

----------------------------------------

TITLE: create-next-app CLI Options Reference
DESCRIPTION: Comprehensive reference for all available command-line options when using `create-next-app` to customize project initialization. These options allow users to configure aspects like TypeScript, ESLint, Tailwind CSS, App Router, and package managers directly from the command line.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/06-cli/create-next-app.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
npx create-next-app@latest [project-name] [options]

Options:
  -h, --help: Show all available options
  -v, --version: Output the version number
  --no-*: Negate default options. E.g. --no-eslint
  --ts, --typescript: Initialize as a TypeScript project (default)
  --js, --javascript: Initialize as a JavaScript project
  --tailwind: Initialize with Tailwind CSS config (default)
  --eslint: Initialize with ESLint config
  --app: Initialize as an App Router project
  --api: Initialize a project with only route handlers
  --src-dir: Initialize inside a `src/` directory
  --turbopack: Enable Turbopack by default for development
  --import-alias <alias-to-configure>: Specify import alias to use (default ""@/*"")
  --empty: Initialize an empty project
  --use-npm: Explicitly tell the CLI to bootstrap the application using npm
  --use-pnpm: Explicitly tell the CLI to bootstrap the application using pnpm
  --use-yarn: Explicitly tell the CLI to bootstrap the application using Yarn
  --use-bun: Explicitly tell the CLI to bootstrap the application using Bun
  -e, --example [name] [github-url]: An example to bootstrap the app with
  --example-path <path-to-example>: Specify the path to the example separately
  --reset-preferences: Explicitly tell the CLI to reset any stored preferences
  --skip-install: Explicitly tell the CLI to skip installing packages
  --disable-git: Explicitly tell the CLI to disable git initialization
  --yes: Use previous preferences or defaults for all options
```

----------------------------------------

TITLE: Define a Static robots.txt File
DESCRIPTION: Demonstrates how to create a static `robots.txt` file in the `app` directory to control search engine crawling. This file is directly served by Next.js and specifies allowed/disallowed paths and sitemap location.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/01-metadata/robots.mdx#_snippet_0

LANGUAGE: txt
CODE:
```
User-Agent: *
Allow: /
Disallow: /private/

Sitemap: https://acme.com/sitemap.xml
```

----------------------------------------

TITLE: Reuse Remote Environment Variables from Vercel
DESCRIPTION: Commands to link a local project to a Vercel project and pull remote environment variables. This is useful for developers who started by deploying their project via Vercel and want to continue local development with the same environment setup.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
npx vercel link
```

LANGUAGE: bash
CODE:
```
npx vercel env pull
```

----------------------------------------

TITLE: Implement getServerSideProps for Server-Side Rendering in Next.js
DESCRIPTION: Demonstrates how to export `getServerSideProps` from a Next.js page to pre-render content on each request. This example fetches data from a public GitHub API and passes it as props to the page component, suitable for frequently changing data. Imports within `getServerSideProps` are server-side only and not bundled for the client.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-server-side-props.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
import type { InferGetServerSidePropsType, GetServerSideProps } from 'next'

type Repo = {
  name: string
  stargazers_count: number
}

export const getServerSideProps = (async () => {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo: Repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}) satisfies GetServerSideProps<{ repo: Repo }>

export default function Page({
  repo,
}: InferGetServerSidePropsType<typeof getServerSideProps>) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
export async function getServerSideProps() {
  // Fetch data from external API
  const res = await fetch('https://api.github.com/repos/vercel/next.js')
  const repo = await res.json()
  // Pass data to the page via props
  return { props: { repo } }
}

export default function Page({ repo }) {
  return (
    <main>
      <p>{repo.stargazers_count}</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Configure VSCode for MDX Markdown Preview
DESCRIPTION: This configuration snippet for VSCode's `settings.json` associates `.mdx` files with the built-in markdown language mode. This enables the markdown previewer for MDX content, allowing developers to see formatted changes locally before submitting a pull request.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""files.associations"": {
    ""*.mdx"": ""markdown""
  }
}
```

----------------------------------------

TITLE: Fuzzponent Command Line Interface Options
DESCRIPTION: Comprehensive documentation for the `fuzzponent` command-line tool's available options. This includes parameters for controlling component hierarchy depth, pseudo-random number generator (PRNG) seed, output directory, component name length constraints, number of children per component, and the file extension for generated components.
SOURCE: https://github.com/vercel/next.js/blob/canary/bench/fuzzponent/readme.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
fuzzponent [options]
  --help
    Description: Show help.
    Type: boolean
  --version
    Description: Show version number.
    Type: boolean
  -d, --depth
    Description: Component hierarchy depth.
    Type: number
    Required: true
  -s, --seed
    Description: PRNG seed.
    Type: number
    Required: true
  -o, --outdir
    Description: The directory where components should be written.
    Type: string
    Default: ""/Users/timneutkens/projects/next.js/bench/nested-deps""
  --minLen
    Description: The smallest acceptable component name length.
    Type: number
    Default: 18
  --maxLen
    Description: The largest acceptable component name length.
    Type: number
    Default: 24
  --minChild
    Description: The smallest number of acceptable component children.
    Type: number
    Default: 4
  --maxChild
    Description: The largest number of acceptable component children.
    Type: number
    Default: 80
  --extension
    Description: Extension to use for generated components.
    Type: string
    Default: ""jsx""
```

----------------------------------------

TITLE: Initializing Next.js Project with pnpm
DESCRIPTION: This command uses `pnpm create` to bootstrap a new Next.js application named `cms-sitecore-xmcloud-app` from the `cms-sitecore-xmcloud` example. It employs `pnpm` as the package manager for project creation.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sitecore-xmcloud/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example cms-sitecore-xmcloud cms-sitecore-xmcloud-app
```

----------------------------------------

TITLE: Copying Environment Variables for Sanity Setup
DESCRIPTION: This command initiates the setup process by copying the example environment file to `.env.local`, which is crucial for storing sensitive configuration details for the Next.js application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
cp -i .env.local.example .env.local
```

----------------------------------------

TITLE: Log User Activity After Mutation in Next.js Route Handler
DESCRIPTION: This example illustrates how to use the `after` function within a Next.js Route Handler to log user activity, such as user agent and session ID, after a data mutation has been performed. It leverages `cookies` and `headers` APIs, which are accessible within `after` in Server Actions and Route Handlers.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/after.mdx#_snippet_2

LANGUAGE: ts
CODE:
```
import { after } from 'next/server'
import { cookies, headers } from 'next/headers'
import { logUserAction } from '@/app/utils'

export async function POST(request: Request) {
  // Perform mutation
  // ...

  // Log user activity for analytics
  after(async () => {
    const userAgent = (await headers().get('user-agent')) || 'unknown'
    const sessionCookie =
      (await cookies().get('session-id'))?.value || 'anonymous'

    logUserAction({ sessionCookie, userAgent })
  })

  return new Response(JSON.stringify({ status: 'success' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  })
}
```

LANGUAGE: js
CODE:
```
import { after } from 'next/server'
import { cookies, headers } from 'next/headers'
import { logUserAction } from '@/app/utils'

export async function POST(request) {
  // Perform mutation
  // ...

  // Log user activity for analytics
  after(async () => {
    const userAgent = (await headers().get('user-agent')) || 'unknown'
    const sessionCookie =
      (await cookies().get('session-id'))?.value || 'anonymous'

    logUserAction({ sessionCookie, userAgent })
  })

  return new Response(JSON.stringify({ status: 'success' }), {
    status: 200,
    headers: { 'Content-Type': 'application/json' }
  })
}
```

----------------------------------------

TITLE: Configure Local Environment Variables for MongoDB
DESCRIPTION: This command copies the example environment file to `.env.local`, which is used by Next.js to load environment variables. It's crucial for securely storing sensitive information like the MongoDB connection string.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Bootstrap Next.js Example with create-next-app (npm)
DESCRIPTION: Use npx to bootstrap the Next.js example project 'with-absolute-imports' using the `create-next-app` utility.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-absolute-imports/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-absolute-imports with-absolute-imports-app
```

----------------------------------------

TITLE: Bootstrapping Next.js Electron App with pnpm
DESCRIPTION: This command uses `pnpm create` to initialize a new Next.js project from the `with-electron` example. It creates a directory named `with-electron-app` containing the bootstrapped application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-electron with-electron-app
```

----------------------------------------

TITLE: Next.js Route Handler Parameters Reference
DESCRIPTION: Detailed reference for parameters available in Next.js Route Handlers, including the `request` object (NextRequest) and the `context` object for dynamic route parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/route.mdx#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Route Handler Parameters:

1. request (optional)
   - Type: NextRequest (extension of Web Request API)
   - Description: Provides further control over incoming requests, including access to `cookies` and an extended, parsed URL object (`nextUrl`).

2. context (optional)
   - Type: Object
   - Properties:
     - params: Promise<Object>
       - Description: A promise that resolves to an object containing dynamic route parameters for the current route.
       - Example Structure:
         - For `app/dashboard/[team]/route.js` with URL `/dashboard/1`: `Promise<{ team: '1' }>`
         - For `app/shop/[tag]/[item]/route.js` with URL `/shop/1/2`: `Promise<{ tag: '1', item: '2' }>`
         - For `app/blog/[...slug]/route.js` with URL `/blog/1/2`: `Promise<{ slug: ['1', '2'] }>`
```

----------------------------------------

TITLE: Define Router-Specific Content in Next.js MDX
DESCRIPTION: Demonstrates how to use <AppOnly> and <PagesOnly> components within MDX files to conditionally display content based on whether the user is viewing App Router or Pages Router documentation in Next.js. This ensures content relevance for different routing paradigms.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_6

LANGUAGE: mdx
CODE:
```
This content is shared between App and Pages.

<PagesOnly>

This content will only be shown on the Pages docs.

</PagesOnly>

This content is shared between App and Pages.
```

----------------------------------------

TITLE: Implement Next.js Middleware for API Authentication
DESCRIPTION: This snippet demonstrates how to use Next.js middleware to protect API routes by checking a user's authentication status. If the user is not authenticated, it returns a 401 Unauthorized JSON response. The `config.matcher` is used to specify which paths the middleware should apply to.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/backend-for-frontend.mdx#_snippet_13

LANGUAGE: typescript
CODE:
```
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request: Request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

LANGUAGE: javascript
CODE:
```
import { isAuthenticated } from '@lib/auth'

export const config = {
  matcher: '/api/:function*',
}

export function middleware(request) {
  if (!isAuthenticated(request)) {
    return Response.json(
      { success: false, message: 'authentication failed' },
      { status: 401 }
    )
  }
}
```

----------------------------------------

TITLE: Sanity CLI Setup Interactive Output Example
DESCRIPTION: This snippet illustrates a typical interactive session with the Sanity CLI setup command, showing the prompts for installing packages, selecting a project, choosing a dataset, and confirming configuration file additions. It highlights the expected responses during the setup process.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-sanity/README.md#_snippet_5

LANGUAGE: bash
CODE:
```
Need to install the following packages:
sanity@3.30.1
Ok to proceed? (y) y
You're setting up a new project!
We'll make sure you have an account with Sanity.io.
Press ctrl + C at any time to quit.

Prefer web interfaces to terminals?
You can also set up best practice Sanity projects with
your favorite frontends on https://www.sanity.io/templates

Looks like you already have a Sanity-account. Sweet!

✔ Fetching existing projects
? Select project to use Templates [r0z1eifg]
? Select dataset to use blog-vercel
? Would you like to add configuration files for a Sanity project in this Next.js folder? No

Detected framework Next.js, using prefix 'NEXT_PUBLIC_'
Found existing NEXT_PUBLIC_SANITY_PROJECT_ID, replacing value.
Found existing NEXT_PUBLIC_SANITY_DATASET, replacing value.
```

----------------------------------------

TITLE: Create Custom OpenTelemetry Span for Async Function
DESCRIPTION: Demonstrates how to create a custom OpenTelemetry span named 'fetchGithubStars' around an asynchronous operation. It uses the OpenTelemetry API to start and end the span, ensuring the operation's execution is tracked within the tracing system for performance analysis.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/open-telemetry.mdx#_snippet_6

LANGUAGE: ts
CODE:
```
import { trace } from '@opentelemetry/api'

export async function fetchGithubStars() {
  return await trace
    .getTracer('nextjs-example')
    .startActiveSpan('fetchGithubStars', async (span) => {
      try {
        return await getValue()
      } finally {
        span.end()
      }
    })
}
```

----------------------------------------

TITLE: Next.js `connection()` Function API Reference
DESCRIPTION: This entry provides a comprehensive API reference for the `connection()` function in Next.js, detailing its signature, parameters, and return type. It clarifies that the function takes no arguments and returns a `void` Promise, primarily used for its side effect of pausing rendering to ensure dynamic execution.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/connection.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
function connection(): Promise<void>
  - Description: Indicates rendering should wait for an incoming user request before continuing, forcing dynamic rendering.
  - Parameters:
    - None
  - Returns:
    - A void Promise. It is not meant to be consumed directly, but rather for its side effect of pausing rendering.
```

----------------------------------------

TITLE: Embed Google Maps in Next.js
DESCRIPTION: Demonstrates how to integrate a Google Maps embed into a Next.js application using the `GoogleMapsEmbed` component from `@next/third-parties/google`. This example shows the component's usage with an API key, dimensions, mode, and query for a specific location, applicable for both App Router and Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/third-party-libraries.mdx#_snippet_9

LANGUAGE: jsx
CODE:
```
import { GoogleMapsEmbed } from '@next/third-parties/google'

export default function Page() {
  return (
    <GoogleMapsEmbed
      apiKey=""XYZ""
      height={200}
      width=""100%""
      mode=""place""
      q=""Brooklyn+Bridge,New+York,NY""
    />
  )
}
```

LANGUAGE: jsx
CODE:
```
import { GoogleMapsEmbed } from '@next/third-parties/google'

export default function Page() {
  return (
    <GoogleMapsEmbed
      apiKey=""XYZ""
      height={200}
      width=""100%""
      mode=""place""
      q=""Brooklyn+Bridge,New+York,NY""
    />
  )
}
```

----------------------------------------

TITLE: Read URL Search Parameters with Next.js useSearchParams Hook
DESCRIPTION: This example demonstrates how to use the `useSearchParams` hook in Next.js Client Components to access and read values from the URL's query string. It shows how to import the hook from 'next/navigation' and retrieve a specific parameter using `searchParams.get()`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_0

LANGUAGE: tsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // URL -> `/dashboard?search=my-project`
  // `search` -> 'my-project'
  return <>Search: {search}</>
}
```

LANGUAGE: jsx
CODE:
```
'use client'

import { useSearchParams } from 'next/navigation'

export default function SearchBar() {
  const searchParams = useSearchParams()

  const search = searchParams.get('search')

  // URL -> `/dashboard?search=my-project`
  // `search` -> 'my-project'
  return <>Search: {search}</>
}
```

----------------------------------------

TITLE: Define Server-Only Data Fetching Function with Environment Variables in Next.js
DESCRIPTION: Defines an asynchronous function `getData` that fetches data from an external service using an `API_KEY` from environment variables. This example highlights the risk of exposing sensitive server-only environment variables if the module is accidentally imported into a client bundle.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/08-server-and-client-components.mdx#_snippet_12

LANGUAGE: ts
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

LANGUAGE: js
CODE:
```
export async function getData() {
  const res = await fetch('https://external-service.com/data', {
    headers: {
      authorization: process.env.API_KEY,
    },
  })

  return res.json()
}
```

----------------------------------------

TITLE: Copy Environment Variable Example File
DESCRIPTION: Command to copy the example environment variable file (`.env.local.example`) to the active environment file (`.env.local`). The `.env.local` file is used to store sensitive configuration like the MongoDB URI and is ignored by Git.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mongodb-mongoose/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Implementing On-Demand Revalidation with `res.revalidate` in Next.js Pages Router
DESCRIPTION: Provides an example of an API Route in the Next.js Pages Router that uses `res.revalidate()` to trigger on-demand revalidation of a specific page path. It includes a secret token check to prevent unauthorized revalidation requests.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_8

LANGUAGE: ts
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  // Check for secret to confirm this is a valid request
  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  try {
    // This should be the actual path not a rewritten path
    // e.g. for ""/posts/[id]"" this should be ""/posts/1""
    await res.revalidate('/posts/1')
    return res.json({ revalidated: true })
  } catch (err) {
    // If there was an error, Next.js will continue
    // to show the last successfully generated page
    return res.status(500).send('Error revalidating')
  }
}
```

LANGUAGE: js
CODE:
```
export default async function handler(req, res) {
  // Check for secret to confirm this is a valid request
  if (req.query.secret !== process.env.MY_SECRET_TOKEN) {
    return res.status(401).json({ message: 'Invalid token' })
  }

  try {
    // This should be the actual path not a rewritten path
    // e.g. for ""/posts/[id]"" this should be ""/posts/1""
    await res.revalidate('/posts/1')
    return res.json({ revalidated: true })
  } catch (err) {
    // If there was an error, Next.js will continue
    // to show the last successfully generated page
    return res.status(500).send('Error revalidating')
  }
}
```

----------------------------------------

TITLE: Importing NextResponse for Next.js API Routes
DESCRIPTION: Imports the `NextResponse` class from `next/server`, essential for constructing HTTP responses in Next.js API routes or middleware functions. This import enables server-side response manipulation and is a fundamental dependency for server-side logic.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/route-handler/output.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { NextResponse } from ""next/server"";
```

----------------------------------------

TITLE: Specify Code Block Language and Filename in MDX
DESCRIPTION: Illustrates the syntax for adding a language and filename header to code blocks within MDX documentation. The `filename` prop is used to render a special Terminal icon, helping users understand where to input commands like `npx create-next-app`.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/04-community/01-contribution-guide.mdx#_snippet_8

LANGUAGE: mdx
CODE:
```
```bash filename=""Terminal""
npx create-next-app
```
```

----------------------------------------

TITLE: Bootstrap a Next.js Biome project with create-next-app
DESCRIPTION: Demonstrates how to initialize a new Next.js application pre-configured with Biome using `create-next-app` across different package managers (npx, yarn, pnpm). This command clones the example repository and sets up a new project directory.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-biome/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-biome with-biome-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-biome with-biome-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-biome with-biome-app
```

----------------------------------------

TITLE: Generate Dynamic Images in Next.js Route Handlers
DESCRIPTION: Demonstrates how to use `ImageResponse` within a Next.js Route Handler to dynamically generate and return an image (e.g., for Open Graph) based on a GET request. The example includes basic styling for the image content and robust error handling for image generation failures.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/image-response.mdx#_snippet_1

LANGUAGE: js
CODE:
```
import { ImageResponse } from 'next/og'

export async function GET() {
  try {
    return new ImageResponse(
      (
        <div
          style={{
            height: '100%',
            width: '100%',
            display: 'flex',
            flexDirection: 'column',
            alignItems: 'center',
            justifyContent: 'center',
            backgroundColor: 'white',
            padding: '40px',
          }}
        >
          <div
            style={{
              fontSize: 60,
              fontWeight: 'bold',
              color: 'black',
              textAlign: 'center',
            }}
          >
            Welcome to My Site
          </div>
          <div
            style={{
              fontSize: 30,
              color: '#666',
              marginTop: '20px',
            }}
          >
            Generated with Next.js ImageResponse
          </div>
        </div>
      ),
      {
        width: 1200,
        height: 630,
      }
    )
  } catch (e) {
    console.log(`${e.message}`)
    return new Response(`Failed to generate the image`, {
      status: 500,
    })
  }
}
```

----------------------------------------

TITLE: Next.js SEO File Conventions
DESCRIPTION: Defines the file naming conventions for managing SEO-related files like sitemaps and robots.txt in Next.js applications, supporting both static and programmatically generated versions.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/01-getting-started/02-project-structure.mdx#_snippet_5

LANGUAGE: APIDOC
CODE:
```
SEO File Conventions:

sitemap.xml
  - Type: Static Sitemap File
  - Description: XML file for sitemap definition.

sitemap.js / sitemap.ts
  - Type: Generated Sitemap File
  - Description: JavaScript/TypeScript file to programmatically generate a sitemap.

robots.txt
  - Type: Static Robots File
  - Description: Text file for robots exclusion protocol.

robots.js / robots.ts
  - Type: Generated Robots File
  - Description: JavaScript/TypeScript file to programmatically generate a robots.txt file.
```

----------------------------------------

TITLE: Bootstrap Next.js MDX App with create-next-app
DESCRIPTION: This snippet demonstrates how to initialize a new Next.js application using the `mdx-pages` example template. It provides commands for npm, Yarn, and pnpm to set up the project structure and dependencies for an MDX-powered Next.js app.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/mdx-pages/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example mdx-pages mdx-pages-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example mdx-pages mdx-pages-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example mdx-pages mdx-pages-app
```

----------------------------------------

TITLE: useReportWebVitals Metric Object API Reference
DESCRIPTION: Comprehensive API reference for the `metric` object, which is passed as an argument to the callback function of the `useReportWebVitals` hook. This section details each property of the `metric` object, including its type, purpose, and possible values, providing a complete understanding of the data available for Web Vitals reporting.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-report-web-vitals.mdx#_snippet_3

LANGUAGE: APIDOC
CODE:
```
metric object properties:

- id: string
  Unique identifier for the metric in the context of the current page load.

- name: string
  The name of the performance metric. Possible values include names of Web Vitals metrics (TTFB, FCP, LCP, FID, CLS) specific to a web application.

- delta: number
  The difference between the current value and the previous value of the metric. The value is typically in milliseconds and represents the change in the metric's value over time.

- entries: array of PerformanceEntry
  An array of Performance Entries associated with the metric. These entries provide detailed information about the performance events related to the metric.

- navigationType: string
  Indicates the type of navigation that triggered the metric collection. Possible values include ""navigate"", ""reload"", ""back_forward"", and ""prerender"".

- rating: string
  A qualitative rating of the metric value, providing an assessment of the performance. Possible values are ""good"", ""needs-improvement"", and ""poor"". The rating is typically determined by comparing the metric value against predefined thresholds that indicate acceptable or suboptimal performance.

- value: number
  The actual value or duration of the performance entry, typically in milliseconds. The value provides a quantitative measure of the performance aspect being tracked by the metric. The source of the value depends on the specific metric being measured and can come from various Performance APIs.
```

----------------------------------------

TITLE: Next.js App Directory Routing Hooks API Reference
DESCRIPTION: Comprehensive API documentation for the new routing hooks (`useRouter`, `usePathname`, `useSearchParams`) introduced for the Next.js `app` directory. This includes their purpose, differences from `pages` directory hooks, and details on removed or replaced properties, along with compatibility options.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/migrating/app-router-migration.mdx#_snippet_14

LANGUAGE: APIDOC
CODE:
```
Next.js App Directory Routing Hooks:

1. useRouter() (from 'next/navigation')
   - Purpose: Provides programmatic navigation (e.g., push, replace, refresh) for the 'app' directory.
   - Usage: `const router = useRouter()`
   - Limitations: Only supported in Client Components.
   - Differences from 'next/router' useRouter:
     - Does not return `pathname` (use `usePathname()` instead).
     - Does not return `query` object (use `useSearchParams()` and `useParams()` instead).
     - Removed Properties:
       - `isFallback`: Removed (due to `fallback` replacement).
       - `locale`, `locales`, `defaultLocales`, `domainLocales`: Removed (built-in i18n no longer necessary).
       - `basePath`: Removed (alternative not yet implemented).
       - `asPath`: Removed (concept of `as` removed).
       - `isReady`: Removed (no longer necessary; components using `useSearchParams()` skip prerendering).
       - `route`: Removed (use `usePathname()` or `useSelectedLayoutSegments()` instead).

2. usePathname() (from 'next/navigation')
   - Purpose: Returns the current URL's pathname string.
   - Usage: `const pathname = usePathname()`
   - Returns: `string`
   - Limitations: Only supported in Client Components.

3. useSearchParams() (from 'next/navigation')
   - Purpose: Returns a read-only `URLSearchParams` object for the current URL's query string.
   - Usage: `const searchParams = useSearchParams()`
   - Returns: `URLSearchParams` object
   - Limitations: Only supported in Client Components.

4. useParams() (from 'next/navigation')
   - Purpose: Returns an object containing the current route's dynamic parameters.
   - Usage: `const params = useParams()`
   - Limitations: Only supported in Client Components.

5. useSelectedLayoutSegments() (from 'next/navigation')
   - Purpose: Provides an alternative to the removed `route` property for accessing layout segments.
   - Usage: `const segments = useSelectedLayoutSegments()`
   - Limitations: Only supported in Client Components.

Compatibility Hooks:

1. useRouter() (from 'next/router')
   - Purpose: The original router hook for the 'pages' directory.
   - Support: Not supported in the 'app' directory, but continues to be used in 'pages'.

2. useRouter() (from 'next/compat/router')
   - Purpose: Enables sharing components between 'pages' and 'app' routers by providing the 'pages' directory's `useRouter` behavior.
   - Usage: Intended for transitional use during migration.
   - Recommendation: Update to `next/navigation`'s `useRouter` once fully on the 'app' router.
```

----------------------------------------

TITLE: Bootstrap Next.js App with TypeScript
DESCRIPTION: Commands to initialize a new Next.js project configured with TypeScript using different package managers (npx, yarn, pnpm). These commands create a new directory with the specified app name and copy the 'with-typescript' example.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-typescript/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-typescript with-typescript-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-typescript with-typescript-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-typescript with-typescript-app
```

----------------------------------------

TITLE: Bootstrapping Next.js App with SFCC using pnpm
DESCRIPTION: This command initializes a new Next.js project named 'nextjs-sfcc-app' using `create-next-app` via `pnpm`. It specifically pulls the 'with-sfcc' example, setting up a headless e-commerce application integrated with Salesforce Commerce Cloud.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-sfcc/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-sfcc nextjs-sfcc-app
```

----------------------------------------

TITLE: Install Dependencies and Start Next.js Development Server
DESCRIPTION: Commands to install all necessary project dependencies and then start the Next.js development server. This prepares the application for local development and testing.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-stripe-typescript/README.md#_snippet_2

LANGUAGE: Bash
CODE:
```
npm install
npm run dev
```

LANGUAGE: Bash
CODE:
```
yarn
yarn dev
```

LANGUAGE: Bash
CODE:
```
pnpm install
pnpm dev
```

----------------------------------------

TITLE: Accessing Browser APIs in Client Component (JSX)
DESCRIPTION: This JSX snippet demonstrates how to safely access browser-specific APIs (like `window`) within a Next.js Client Component. By using the `useEffect` hook, the code ensures that these APIs are only accessed after the component has mounted in the browser environment, preventing errors during server-side pre-rendering.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/static-exports.mdx#_snippet_11

LANGUAGE: JSX
CODE:
```
'use client';

import { useEffect } from 'react';

export default function ClientComponent() {
  useEffect(() => {
    // You now have access to `window`
    console.log(window.innerHeight);
  }, [])

  return ...;
}
```

----------------------------------------

TITLE: Next.js Module Entrypoints Configuration
DESCRIPTION: This JSON snippet outlines the entrypoint configuration for a Next.js module. It specifies `ModuleEvaluation` as the primary entrypoint and explicitly lists `Export(""GET"",)` as an exported function, indicating its availability for external consumption within the module graph.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/typeof-1/output.md#_snippet_2

LANGUAGE: json
CODE:
```
{
    ""ModuleEvaluation"": 0,
    ""Export(\""GET\"",)"": 0,
    ""Exports"": 1
}
```

----------------------------------------

TITLE: Example GitHub Pages Deployment URL Structure
DESCRIPTION: This snippet illustrates the typical URL format for a Next.js application hosted on GitHub Pages. The URL is constructed using the GitHub username and the repository name, following the pattern `https://<github-user-name>.github.io/<github-project-name>/`.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/github-pages/README.md#_snippet_3

LANGUAGE: bash
CODE:
```
https://<github-user-name>.github.io/<github-project-name>/
```

----------------------------------------

TITLE: Next.js Data Revalidation API Reference
DESCRIPTION: Comprehensive reference for Next.js API functions and configuration options related to data caching and revalidation in both the App Router and Pages Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/02-guides/incremental-static-regeneration.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Route Segment Config (App Router):

revalidate: number | false
  - Purpose: Defines the cache revalidation period for a page or layout.
  - Parameters:
    - number: Seconds after which a cached page is considered stale (e.g., 3600 for 1 hour).
    - false: Never revalidate (cache indefinitely).
  - Example: export const revalidate = 3600;

dynamicParams: boolean
  - Purpose: Controls the behavior of dynamic segments when a requested params value is not generated by generateStaticParams.
  - Parameters:
    - true: Allow dynamic params (default, will generate on demand).
    - false: Return 404 for ungenerated params.
  - Example: export const dynamicParams = true;

Functions (App Router):

revalidatePath(path: string, type?: 'page' | 'layout'): void
  - Purpose: Invalidates the cache for a specific data path or route segment.
  - Parameters:
    - path: The route path to revalidate (e.g., '/posts').
    - type (optional): 'page' (default) or 'layout', specifies the type of segment to revalidate.
  - Returns: void

revalidateTag(tag: string): void
  - Purpose: Invalidates the cache for data fetched with a specific cache tag.
  - Parameters:
    - tag: The cache tag string to revalidate.
  - Returns: void

Functions (Pages Router):

getStaticProps(context: GetStaticPropsContext): Promise<GetStaticPropsResult<Props>>
  - Purpose: Fetches data at build time for static generation of a page.
  - Parameters:
    - context: An object containing params, preview, previewData, locale, locales, defaultLocale.
  - Returns: An object with 'props' (data passed to page), 'revalidate' (ISR time), or 'notFound' (404).

res.revalidate(urlPath: string, opts?: { unstable_onlyGenerated?: boolean }): Promise<void>
  - Purpose: Programmatically revalidates a specific page from an API Route.
  - Parameters:
    - urlPath: The path of the page to revalidate (e.g., '/blog/1').
    - opts (optional): An object with 'unstable_onlyGenerated' (boolean, revalidate only if already generated).
  - Returns: Promise<void>
```

----------------------------------------

TITLE: Next.js loading.js Component API Reference
DESCRIPTION: This section provides a comprehensive API reference for the `loading.js` special file in Next.js, detailing its interface, behavior, and interactions with navigation, SEO, and status codes. It clarifies that `loading.js` components, designed for displaying instant loading states with React Suspense, do not accept any parameters.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/03-file-conventions/loading.mdx#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Parameters:
  - `loading.js` components do not accept any parameters.

Behavior:
  Navigation:
    - Prefetching: The Fallback UI is prefetched, making navigation immediate unless prefetching hasn't completed.
    - Interruptibility: Navigation is interruptible; changing routes does not need to wait for the content of the route to fully load.
    - Interactivity: Shared layouts remain interactive while new route segments load.

  Instant Loading States:
    - Definition: Fallback UI that is shown immediately upon navigation.
    - Purpose: Pre-render loading indicators (skeletons, spinners) or meaningful parts of future screens.
    - Implementation: Achieved by adding a `loading.js` file inside a route segment folder.

  SEO Considerations:
    - Metadata: Next.js waits for data fetching inside `generateMetadata` to complete before streaming UI, ensuring `<head>` tags are included.
    - Impact: Streaming is server-rendered and does not negatively impact SEO.

  Status Codes:
    - Default: A `200` status code is returned during streaming.
    - Error Handling: Errors (e.g., `redirect`, `notFound`) are communicated within streamed content; response status code cannot be updated after headers are sent.

  Browser Limits:
    - Buffering: Some browsers buffer streaming responses, potentially delaying display until response size exceeds 1024 bytes.
```

----------------------------------------

TITLE: Protect Server Actions with `unauthorized` in Next.js
DESCRIPTION: This example demonstrates how to use the `unauthorized` function within a Next.js Server Action (`app/actions/update-profile.ts` or `.js`) to prevent unauthenticated users from performing mutations. By checking the user's session at the beginning of the action, it ensures that sensitive operations are only executed by authorized individuals.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unauthorized.mdx#_snippet_3

LANGUAGE: typescript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data: FormData) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

LANGUAGE: javascript
CODE:
```
'use server'

import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'
import db from '@/app/lib/db'

export async function updateProfile(data) {
  const session = await verifySession()

  // If the user is not authenticated, return a 401
  if (!session) {
    unauthorized()
  }

  // Proceed with mutation
  // ...
}
```

----------------------------------------

TITLE: Bootstrapping Next.js App with Mux Video Example (pnpm)
DESCRIPTION: This command uses `pnpm create` to set up a new Next.js application based on the `with-mux-video` example. It's suitable for users preferring pnpm as their package manager.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-mux-video/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-mux-video with-mux-video-app
```

----------------------------------------

TITLE: Bootstrapping Next.js Electron App with Yarn
DESCRIPTION: This command uses `yarn create` to initialize a new Next.js project from the `with-electron` example. It creates a directory named `with-electron-app` containing the bootstrapped application.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-electron/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-electron with-electron-app
```

----------------------------------------

TITLE: Visualize Initial Module Dependencies (Mermaid)
DESCRIPTION: Illustrates the initial dependency graph of module items using Mermaid syntax. This diagram shows declared variables and their corresponding export items before full dependency resolution.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/simple-vars-1/output.md#_snippet_2

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item2;
    Item3;
    Item3[""export a""];
    Item4;
    Item4[""export b""];
```

----------------------------------------

TITLE: Copy Example Environment Variables File
DESCRIPTION: Copies the `.env.local.example` file to `.env.local`. This new file will contain sensitive environment variables and is configured to be ignored by Git, ensuring credentials are not committed to version control.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-takeshape/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Interactive TypeScript prompt for create-next-app
DESCRIPTION: Example of the interactive prompt displayed by `create-next-app` when setting up a new project, specifically asking whether to enable TypeScript. Selecting 'Yes' installs necessary types and dependencies.
SOURCE: https://github.com/vercel/next.js/blob/canary/packages/create-next-app/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
✔ Would you like to use TypeScript? … No / Yes
```

----------------------------------------

TITLE: Configure Next.js Image Optimization Formats (WebP)
DESCRIPTION: This configuration in `next.config.js` defines the acceptable image formats for the Image Optimization API. The browser's `Accept` header determines the best output format, with the first match in the array being used. This example configures WebP as the preferred format, which is generally recommended for most use cases.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/01-components/image-legacy.mdx#_snippet_16

LANGUAGE: js
CODE:
```
module.exports = {
  images: {
    formats: ['image/webp'],
  },
}
```

----------------------------------------

TITLE: getInitialProps Context Object API Reference
DESCRIPTION: Defines the properties available within the `context` object, which is passed as the sole argument to the `getInitialProps` function. This object provides access to request details, query parameters, and error information, with some properties being server-only.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/04-api-reference/03-functions/get-initial-props.mdx#_snippet_1

LANGUAGE: APIDOC
CODE:
```
getInitialProps(context: object):
  context: object
    pathname: string
      Description: Current route, the path of the page in `/pages`
    query: object
      Description: Query string of the URL, parsed as an object
    asPath: string
      Description: String of the actual path (including the query) shown in the browser
    req: object (http.IncomingMessage)
      Description: HTTP request object (server only)
    res: object (http.ServerResponse)
      Description: HTTP response object (server only)
    err: object (Error)
      Description: Error object if any error is encountered during the rendering
```

----------------------------------------

TITLE: Phase 3 Next.js Dynamic API Tracking Flow
DESCRIPTION: This Mermaid graph illustrates the dependencies and relationships between various internal components and exported functions related to dynamic API tracking and prerendering within Next.js during 'Phase 3'. It shows how functions like `createPrerenderState`, `markCurrentScopeAsDynamic`, and `trackDynamicDataAccessed` depend on or are related to other internal items.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_15

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item5;
    Item2;
    Item6;
    Item3;
    Item7;
    Item4;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item15;
    Item16;
    Item17;
    Item18;
    Item19;
    Item20;
    Item20[""export createPrerenderState""];
    Item21;
    Item21[""export markCurrentScopeAsDynamic""];
    Item22;
    Item22[""export trackDynamicDataAccessed""];
    Item23;
    Item23[""export Postpone""];
    Item24;
    Item24[""export trackDynamicFetch""];
    Item25;
    Item25[""export usedDynamicAPIs""];
    Item26;
    Item26[""export formatDynamicAPIAccesses""];
    Item27;
    Item27[""export createPostponedAbortSignal""];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item9 --> Item5;
    Item9 --> Item4;
    Item9 -.-> Item8;
    Item9 -.-> Item7;
    Item9 -.-> Item15;
    Item9 -.-> Item6;
    Item9 -.-> Item18;
    Item20 --> Item10;
    Item21 --> Item11;
    Item22 --> Item12;
    Item23 --> Item13;
    Item24 --> Item14;
    Item25 --> Item16;
    Item26 --> Item17;
    Item27 --> Item19;
    Item11 --> Item8;
    Item11 --> Item7;
    Item11 --> Item15;
    Item11 --> Item6;
    Item12 --> Item8;
    Item12 --> Item7;
    Item12 --> Item15;
    Item12 --> Item6;
    Item13 --> Item15;
    Item14 --> Item15;
    Item15 --> Item18;
    Item15 --> Item9;
    Item15 --> Item5;
    Item18 --> Item9;
    Item19 --> Item18;
    Item19 --> Item9;
    Item19 --> Item5;
```

----------------------------------------

TITLE: Reading Cookies in Next.js API Route (JavaScript)
DESCRIPTION: This snippet demonstrates how to read cookies from the incoming request using `req.cookies` within a Next.js API Route. It accesses the `authorization` cookie for further processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_5

LANGUAGE: javascript
CODE:
```
export default async function handler(req, res) {
  const auth = req.cookies.authorization
  // ...
}
```

----------------------------------------

TITLE: Handle unauthorized access in Next.js Server Component
DESCRIPTION: This example illustrates how to use the `unauthorized` function within a Next.js Server Component (`app/dashboard/page.tsx` or `.js`) to redirect unauthenticated users to a 401 error page. It checks for a valid user session and invokes `unauthorized()` if the session is not found, preventing access to protected content.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/unauthorized.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  // Render the dashboard for authenticated users
  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

LANGUAGE: jsx
CODE:
```
import { verifySession } from '@/app/lib/dal'
import { unauthorized } from 'next/navigation'

export default async function DashboardPage() {
  const session = await verifySession()

  if (!session) {
    unauthorized()
  }

  // Render the dashboard for authenticated users
  return (
    <main>
      <h1>Welcome to the Dashboard</h1>
      <p>Hi, {session.user.name}.</p>
    </main>
  )
}
```

----------------------------------------

TITLE: Migrate to Next.js Middleware User-Agent Helper
DESCRIPTION: This snippet illustrates the transition from accessing user agent information directly via `request.ua` to using the new `userAgent` helper imported from `next/server`. This change helps reduce Middleware bundle size by making user agent parsing an opt-in feature.
SOURCE: https://github.com/vercel/next.js/blob/canary/errors/middleware-upgrade-guide.mdx#_snippet_9

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const viewport = request.ua.device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

LANGUAGE: typescript
CODE:
```
import { NextRequest, NextResponse, userAgent } from 'next/server'

export function middleware(request: NextRequest) {
  const url = request.nextUrl
  const { device } = userAgent(request)
  const viewport = device.type === 'mobile' ? 'mobile' : 'desktop'
  url.searchParams.set('viewport', viewport)
  return NextResponse.rewrite(url)
}
```

----------------------------------------

TITLE: Copy Next.js Local Environment File
DESCRIPTION: This command copies the example environment variable file to `.env.local`, which is used by Next.js to load configuration variables. This file is typically ignored by Git for security reasons.
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/cms-prepr/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
cp .env.local.example .env.local
```

----------------------------------------

TITLE: Reading Cookies in Next.js API Route (TypeScript)
DESCRIPTION: This snippet demonstrates how to read cookies from the incoming request using `req.cookies` within a Next.js API Route. It accesses the `authorization` cookie for further processing.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/03-data-fetching/03-forms-and-mutations.mdx#_snippet_4

LANGUAGE: typescript
CODE:
```
import type { NextApiRequest, NextApiResponse } from 'next'

export default async function handler(
  req: NextApiRequest,
  res: NextApiResponse
) {
  const auth = req.cookies.authorization
  // ...
}
```

----------------------------------------

TITLE: Forcing Dynamic Rendering in Next.js Server Pages
DESCRIPTION: This example illustrates how to configure a Next.js Server Component page to force dynamic rendering using `export const dynamic = 'force-dynamic'`. This ensures that the page is rendered on demand for each request, which is necessary for Client Components within it to access `useSearchParams` on the server during the initial render.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/04-functions/use-search-params.mdx#_snippet_5

LANGUAGE: tsx
CODE:
```
import SearchBar from './search-bar'

export const dynamic = 'force-dynamic'

export default function Page() {
  return (
    <>
      <nav>
        <SearchBar />
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

LANGUAGE: jsx
CODE:
```
import SearchBar from './search-bar'

export const dynamic = 'force-dynamic'

export default function Page() {
  return (
    <>
      <nav>
        <SearchBar />
      </nav>
      <h1>Dashboard</h1>
    </>
  )
}
```

----------------------------------------

TITLE: Taint Object Reference to Prevent Server-Client Boundary Crossing
DESCRIPTION: This example shows how to use `experimental_taintObjectReference` from React to mark an entire object as tainted. When `getUserDetails` fetches user data, the `user` object reference is tainted, preventing it from being passed directly across the Server-Client boundary, while still allowing access to its individual properties on the server.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/01-app/03-api-reference/05-config/01-next-config-js/taint.mdx#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { experimental_taintObjectReference } from 'react'

function getUserDetails(id: string): UserDetails {
  const user = await db.queryUserById(id)

  experimental_taintObjectReference(
    'Do not use the entire user info object. Instead, select only the fields you need.',
    user
  )

  return user
}
```

LANGUAGE: JavaScript
CODE:
```
import { experimental_taintObjectReference } from 'react'

function getUserDetails(id) {
  const user = await db.queryUserById(id)

  experimental_taintObjectReference(
    'Do not use the entire user info object. Instead, select only the fields you need.',
    user
  )

  return user
}
```

----------------------------------------

TITLE: Bootstrap Next.js App with Turbopack Example
DESCRIPTION: These commands demonstrate how to initialize a new Next.js application using the `create-next-app` utility, specifically leveraging the `with-turbopack` example. Choose the command corresponding to your preferred package manager (npm, Yarn, or pnpm).
SOURCE: https://github.com/vercel/next.js/blob/canary/examples/with-turbopack/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npx create-next-app --example with-turbopack with-turbopack-app
```

LANGUAGE: bash
CODE:
```
yarn create next-app --example with-turbopack with-turbopack-app
```

LANGUAGE: bash
CODE:
```
pnpm create next-app --example with-turbopack with-turbopack-app
```

----------------------------------------

TITLE: Custom Next.js App Component with getInitialProps
DESCRIPTION: This example shows how to use `getInitialProps` within a custom Next.js `App` component to fetch initial data. While it allows injecting additional data (e.g., 'example') into all pages, it disables Automatic Static Optimization for pages without `getStaticProps`. The documentation advises against this pattern in favor of the App Router.
SOURCE: https://github.com/vercel/next.js/blob/canary/docs/02-pages/03-building-your-application/01-routing/05-custom-app.mdx#_snippet_1

LANGUAGE: tsx
CODE:
```
import App, { AppContext, AppInitialProps, AppProps } from 'next/app'

type AppOwnProps = { example: string }

export default function MyApp({
  Component,
  pageProps,
  example,
}: AppProps & AppOwnProps) {
  return (
    <>
      <p>Data: {example}</p>
      <Component {...pageProps} />
    </>
  )
}

MyApp.getInitialProps = async (
  context: AppContext
): Promise<AppOwnProps & AppInitialProps> => {
  const ctx = await App.getInitialProps(context)

  return { ...ctx, example: 'data' }
}
```

LANGUAGE: jsx
CODE:
```
import App from 'next/app'

export default function MyApp({ Component, pageProps, example }) {
  return (
    <>
      <p>Data: {example}</p>
      <Component {...pageProps} />
    </>
  )
}

MyApp.getInitialProps = async (context) => {
  const ctx = await App.getInitialProps(context)

  return { ...ctx, example: 'data' }
}
```

----------------------------------------

TITLE: Phase 4 Next.js Dynamic API Tracking Flow
DESCRIPTION: This Mermaid graph depicts the flow and dependencies of dynamic API tracking and prerendering components in Next.js during 'Phase 4'. It appears to be identical to Phase 3, suggesting a stable or repeated state of the system's dependencies at this stage.
SOURCE: https://github.com/vercel/next.js/blob/canary/turbopack/crates/turbopack-ecmascript/tests/tree-shaker/analyzer/failed-2/output.md#_snippet_16

LANGUAGE: mermaid
CODE:
```
graph TD
    Item1;
    Item5;
    Item2;
    Item6;
    Item3;
    Item7;
    Item4;
    Item8;
    Item9;
    Item10;
    Item11;
    Item12;
    Item13;
    Item14;
    Item15;
    Item16;
    Item17;
    Item18;
    Item19;
    Item20;
    Item20[""export createPrerenderState""];
    Item21;
    Item21[""export markCurrentScopeAsDynamic""];
    Item22;
    Item22[""export trackDynamicDataAccessed""];
    Item23;
    Item23[""export Postpone""];
    Item24;
    Item24[""export trackDynamicFetch""];
    Item25;
    Item25[""export usedDynamicAPIs""];
    Item26;
    Item26[""export formatDynamicAPIAccesses""];
    Item27;
    Item27[""export createPostponedAbortSignal""];
    Item2 --> Item1;
    Item3 --> Item2;
    Item4 --> Item3;
    Item9 --> Item5;
    Item9 --> Item4;
    Item9 -.-> Item8;
    Item9 -.-> Item7;
    Item9 -.-> Item15;
    Item9 -.-> Item6;
    Item9 -.-> Item18;
    Item20 --> Item10;
    Item21 --> Item11;
    Item22 --> Item12;
    Item23 --> Item13;
    Item24 --> Item14;
    Item25 --> Item16;
    Item26 --> Item17;
    Item27 --> Item19;
    Item11 --> Item8;
    Item11 --> Item7;
    Item11 --> Item15;
    Item11 --> Item6;
    Item12 --> Item8;
    Item12 --> Item7;
    Item12 --> Item15;
    Item12 --> Item6;
    Item13 --> Item15;
    Item14 --> Item15;
    Item15 --> Item18;
    Item15 --> Item9;
    Item15 --> Item5;
    Item18 --> Item9;
    Item19 --> Item18;
    Item19 --> Item9;
    Item19 --> Item5;
```","nextjs",""