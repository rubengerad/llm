"react js","TITLE: Install React JSON View Component
DESCRIPTION: Installs the `@uiw/react-json-view` package using npm. This is the first step to include the component in your project.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @uiw/react-json-view
```

----------------------------------------

TITLE: Install react-json-view with npm
DESCRIPTION: Installs the `@uiw/react-json-view` package using npm, making the component available for use in a project.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install @uiw/react-json-view
```

----------------------------------------

TITLE: Render React JSON View Component with Data
DESCRIPTION: Demonstrates how to use the `JsonView` component by passing a complex JavaScript object as the `value` prop. The example object includes various data types to showcase the component's rendering capabilities. This snippet shows the basic usage for displaying data.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_2

LANGUAGE: jsx
CODE:
```
import JsonView from '@uiw/react-json-view';

const avatar = 'https://i.imgur.com/MK3eW3As.jpg';
const longArray = new Array(1000).fill(1);
const example = {
  avatar,
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  bigint: 10086n,
  null: null,
  undefined,
  timer: 0,
  date: new Date('Tue Sep 13 2022 14:07:44 GMT-0500 (Central Daylight Time)'),
  array: [19, 100.86, 'test', NaN, Infinity],
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  longArray,
  string_number: '1234',
};

<JsonView value={example} />
```

----------------------------------------

TITLE: Basic Usage of react-json-view Component
DESCRIPTION: Demonstrates how to import the `JsonView` component and render it with a complex JavaScript object containing various data types, including nested objects and arrays, to display the JSON structure.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_2

LANGUAGE: jsx
CODE:
```
import JsonView from '@uiw/react-json-view';

const avatar = 'https://i.imgur.com/MK3eW3As.jpg';
const longArray = new Array(1000).fill(1);
const example = {
  avatar,
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  bigint: 10086n,
  null: null,
  undefined,
  timer: 0,
  date: new Date('Tue Sep 13 2022 14:07:44 GMT-0500 (Central Daylight Time)'),
  array: [19, 100.86, 'test', NaN, Infinity],
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  longArray,
  string_number: '1234'
};

<JsonView value={example} />
```

----------------------------------------

TITLE: Import React JSON View Components
DESCRIPTION: Imports the main `JsonView` component, the editor variant, and various theme and arrow components from the `@uiw/react-json-view` package. These imports are necessary to use the component and its features in a React application.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_1

LANGUAGE: jsx
CODE:
```
import JsonView from '@uiw/react-json-view';
import JsonViewEditor from '@uiw/react-json-view/editor';
import { lightTheme } from '@uiw/react-json-view/light';
import { darkTheme } from '@uiw/react-json-view/dark';
import { TriangleArrow } from '@uiw/react-json-view/triangle-arrow';
import { TriangleSolidArrow } from '@uiw/react-json-view/triangle-solid-arrow';
```

----------------------------------------

TITLE: Importing react-json-view Components and Themes
DESCRIPTION: Imports the main `JsonView` component, the `JsonViewEditor`, and various theme and arrow components from the `@uiw/react-json-view` package for use in a React application.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_1

LANGUAGE: jsx
CODE:
```
import JsonView from '@uiw/react-json-view';
import JsonViewEditor from '@uiw/react-json-view/editor';
import { lightTheme } from '@uiw/react-json-view/light';
import { darkTheme } from '@uiw/react-json-view/dark';
import { TriangleArrow } from '@uiw/react-json-view/triangle-arrow';
import { TriangleSolidArrow } from '@uiw/react-json-view/triangle-solid-arrow';
```

----------------------------------------

TITLE: Defining Component Props - react-json-view - TypeScript
DESCRIPTION: This TypeScript interface defines the properties accepted by the `JsonView` component. It includes various options for controlling the display, behavior, and interactivity of the JSON viewer, such as value, key name, sorting, indentation, and callback functions.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_22

LANGUAGE: ts
CODE:
```
export interface JsonViewProps<T extends object> extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
  /** This property contains your input JSON */
  value?: T;
  /** Define the root node name. @default undefined */
  keyName?: string | number;
  /** Whether sort keys through `String.prototype.localeCompare()` @default false */
  objectSortKeys?: boolean | ((keyA: string, keyB: string, valueA: T, valueB: T) => number);
  /** Set the indent-width for nested objects @default 15 */
  indentWidth?: number;
  /** When set to `true`, `objects` and `arrays` are labeled with size @default true */
  displayObjectSize?: boolean;
  /** When set to `true`, data type labels prefix values @default true */
  displayDataTypes?: boolean;
  /** The user can copy objects and arrays to clipboard by clicking on the clipboard icon. @default true */
  enableClipboard?: boolean;
  /** When set to true, all nodes will be collapsed by default. Use an integer value to collapse at a particular depth. @default false */
  collapsed?: boolean | number;
  /** Determine whether the node should be expanded on the first render, or you can use collapsed to control the level of expansion (by default, the root is expanded). */
  shouldExpandNodeInitially?: (
    isExpanded: boolean,
    props: { value?: T; keys: (number | string)[]; level: number },
  ) => boolean;
  /** Whether to highlight updates. @default true */
  highlightUpdates?: boolean;
  /** Shorten long JSON strings, Set to `0` to disable this feature @default 30 */
  shortenTextAfterLength?: number;
  /** When the text exceeds the length, `...` will be displayed. Currently, this `...` can be customized. @default ""..."" */
  stringEllipsis?: number;
  /** Callback function for when a treeNode is expanded or collapsed */
  onExpand?: (props: { expand: boolean; value?: T; keyid: string; keyName?: string | number }) => void;
  /** Fires event when you copy */
  onCopied?: (text: string, value?: T) => void;
}
```

----------------------------------------

TITLE: Defining JsonViewProps Interface (TypeScript)
DESCRIPTION: This TypeScript snippet defines the JsonViewProps interface for the react-json-view component (v2), listing available properties such as 'value', 'keyName', 'indentWidth', 'collapsed', and various display/behavior options.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_22

LANGUAGE: typescript
CODE:
```
export interface JsonViewProps<T extends object> extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
  /** This property contains your input JSON */
  value?: T;
  /** Define the root node name. @default undefined */
  keyName?: string | number;
  /** Whether sort keys through `String.prototype.localeCompare()` @default false */
  objectSortKeys?: boolean | ((keyA: string, keyB: string, valueA: T, valueB: T) => number);
  /** Set the indent-width for nested objects @default 15 */
  indentWidth?: number;
  /** When set to `true`, `objects` and `arrays` are labeled with size @default true */
  displayObjectSize?: boolean;
  /** When set to `true`, data type labels prefix values @default true */
  displayDataTypes?: boolean;
  /** The user can copy objects and arrays to clipboard by clicking on the clipboard icon. @default true */
  enableClipboard?: boolean;
  /** When set to true, all nodes will be collapsed by default. Use an integer value to collapse at a particular depth. @default false */
  collapsed?: boolean | number;
  /** Determine whether the node should be expanded on the first render, or you can use collapsed to control the level of expansion (by default, the root is expanded). */
  shouldExpandNodeInitially?: (
    isExpanded: boolean,
    props: { value?: T; keys: (number | string)[]; level: number },
  ) => boolean;
  /** Whether to highlight updates. @default true */
  highlightUpdates?: boolean;
  /** Shorten long JSON strings, Set to `0` to disable this feature @default 30 */
  shortenTextAfterLength?: number;
  /** When the text exceeds the length, `...` will be displayed. Currently, this `...` can be customized. @default ""..."" */
  stringEllipsis?: number;
  /** Callback function for when a treeNode is expanded or collapsed */
  onExpand?: (props: { expand: boolean; value?: T; keyid: string; keyName?: string | number }) => void;
  /** Fires event when you copy */
  onCopied?: (text: string, value?: T) => void;
}
```

----------------------------------------

TITLE: Basic JsonView Usage with Custom Renderers (React/TSX)
DESCRIPTION: Demonstrates rendering a JSON object using JsonView, applying a custom theme, disabling clipboard and data types, and providing custom render functions for Ellipsis, Quote, BraceLeft, BraceRight, and CountInfo to alter their appearance or behavior.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_13

LANGUAGE: tsx
CODE:
```
export default function Demo() {
  return (
    <JsonView
      value={object}
      style={customTheme}
      enableClipboard={false}
      displayDataTypes={false}
    >
      <Ellipsis
        render={({ 'data-expanded': isExpanded, className, ...props }, { value }) => {
          if (Array.isArray(value) && isExpanded) {
            console.log('props:',value, isExpanded, props)
            return (
              <span className={className}>
                {Array.from({ length: value.length }, () => 'Object').join(', ')}
              </span>
            )
          }
          return <span />;
        }}
      />
      <Quote>
        <span />
      </Quote>
      <BraceLeft>
        <span />
      </BraceLeft>
      <BraceRight>
        <span />
      </BraceRight>
      <CountInfo
        render={({ 'data-length': length, ...props }, { value }) => {
          const isArray = Array.isArray(value);
          if (isArray) return <span />;
          return (
            <span {...props}>Object</span>
          );
        }}
      />
    </JsonView>
  );
}
```

----------------------------------------

TITLE: Basic React JSON View Usage with Custom Rendering
DESCRIPTION: Demonstrates rendering a JSON object using JsonView, applying a custom theme, disabling clipboard and data types, and providing custom render functions for specific elements like Ellipsis, Quote, BraceLeft, BraceRight, and CountInfo.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_13

LANGUAGE: tsx
CODE:
```
export default function Demo() {
  return (
    <JsonView
      value={object}
      style={customTheme}
      enableClipboard={false}
      displayDataTypes={false}
    >
      <Ellipsis
        render={({ 'data-expanded': isExpanded, className, ...props }, { value }) => {
          if (Array.isArray(value) && isExpanded) {
            console.log('props:',value, isExpanded, props)
            return (
              <span className={className}>
                {Array.from({ length: value.length }, () => 'Object').join(', ')}
              </span>
            )
          }
          return <span />;
        }}
      />
      <Quote>
        <span />
      </Quote>
      <BraceLeft>
        <span />
      </BraceLeft>
      <BraceRight>
        <span />
      </BraceRight>
      <CountInfo
        render={({ 'data-length': length, ...props }, { value }) => {
          const isArray = Array.isArray(value);
          if (isArray) return <span />;
          return (
            <span {...props}>Object</span>
          );
        }}
      />
    </JsonView>
  );
}
```

----------------------------------------

TITLE: Control Default Collapse/Expand in React JSON View (TSX)
DESCRIPTION: Shows how to control the initial collapse/expand state of nodes in the @uiw/react-json-view component using the `collapsed` prop and the `shouldExpandNodeInitially` function.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_18

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
}
export default function Demo() {
  return (
    <JsonView
      value={object}
      collapsed={2}
      shouldExpandNodeInitially={(isExpanded, { value, keys, level }) => {
        if (keys.length > 0 && keys[0] == ""object"") {
          return true
        }
        return isExpanded
      }}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Control Default Collapse/Expand State in React JSON View
DESCRIPTION: Shows how to use the `collapsed` prop and the `shouldExpandNodeInitially` function prop to manage the initial collapse and expansion state of nodes in `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_18

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
}
export default function Demo() {
  return (
    <JsonView
      value={object}
      collapsed={2}
      shouldExpandNodeInitially={(isExpanded, { value, keys, level }) => {
        if (keys.length > 0 && keys[0] == ""object"") {
          return true
        }
        return isExpanded
      }}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Highlighting Value Updates in JsonView (React/TSX)
DESCRIPTION: Illustrates how to use the `JsonView` component to display data that updates over time, specifically showing how the component automatically highlights changed values (like the `timer` property) and how to customize the highlight color using CSS variables.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_16

LANGUAGE: tsx
CODE:
```
import React, { useState, useEffect } from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  timer: 0,
  object: { 'first-child': true, 'second-child': false, 'last-child': null },
}
export default function Demo() {
  const [src, setSrc] = useState({ ...object })
  useEffect(() => {
    const loop = () => {
      setSrc(src => ({
        ...src,
        timer: src.timer + 1
      }))
    }
    const id = setInterval(loop, 1000)
    return () => clearInterval(id)
  }, []);

  return (
    <JsonView
      value={src}
      keyName=""root""
      style={{
        '--w-rjv-background-color': '#ffffff',
        '--w-rjv-border-left': '1px dashed #ebebeb',
        // ✅ Change default update background color ✅
        '--w-rjv-update-color': '#ff6ffd',
      }}
    />
  )
}
```

----------------------------------------

TITLE: Highlighting Updates in React JSON View
DESCRIPTION: Demonstrates how to dynamically update the JSON data displayed in JsonView and configure the component to highlight the changes using the '--w-rjv-update-color' CSS variable. Includes a timer that increments a value in the data.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_16

LANGUAGE: tsx
CODE:
```
import React, { useState, useEffect } from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  timer: 0,
  object: { 'first-child': true, 'second-child': false, 'last-child': null }
}
export default function Demo() {
  const [src, setSrc] = useState({ ...object })
  useEffect(() => {
    const loop = () => {
      setSrc(src => ({
        ...src,
        timer: src.timer + 1
      }))
    }
    const id = setInterval(loop, 1000)
    return () => clearInterval(id)
  }, []);

  return (
    <JsonView
      value={src}
      keyName=""root""
      style={{
        '--w-rjv-background-color': '#ffffff',
        '--w-rjv-border-left': '1px dashed #ebebeb',
        // ✅ Change default update background color ✅
        '--w-rjv-update-color': '#ff6ffd'
      }}
    />
  )
}
```

----------------------------------------

TITLE: Applying Built-in Themes to JsonView (TSX)
DESCRIPTION: This snippet demonstrates how to import and apply various built-in themes like darkTheme, lightTheme, nordTheme, etc., to the JsonView component. It renders the same JSON object multiple times, each with a different theme applied via the `style` prop, showcasing the visual differences.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
import { lightTheme } from '@uiw/react-json-view/light';
import { darkTheme } from '@uiw/react-json-view/dark';
import { nordTheme } from '@uiw/react-json-view/nord';
import { githubLightTheme } from '@uiw/react-json-view/githubLight';
import { githubDarkTheme } from '@uiw/react-json-view/githubDark';
import { vscodeTheme } from '@uiw/react-json-view/vscode';
import { gruvboxTheme } from '@uiw/react-json-view/gruvbox';
import { monokaiTheme } from '@uiw/react-json-view/monokai';
import { basicTheme } from '@uiw/react-json-view/basic';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  boolean: true,
  null: null,
  nan: NaN,
  url: new URL('https://example.com'),
}

const style = { display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))' };

export default function Demo() {
  return (
    <div style={style}>
      <JsonView value={object} style={darkTheme} />
      <JsonView value={object} style={lightTheme} />
      <JsonView value={object} style={nordTheme} />
      <JsonView value={object} style={githubLightTheme} />
      <JsonView value={object} style={githubDarkTheme} />
      <JsonView value={object} style={gruvboxTheme} />
      <JsonView value={object} style={vscodeTheme} />
      <JsonView value={object} style={monokaiTheme} />
      <JsonView value={object} style={basicTheme} />
    </div>
  );
}
```

----------------------------------------

TITLE: Defining a Custom Theme for JsonView (React/TSX)
DESCRIPTION: Defines a custom theme object using CSS variables to override the default styling of the JsonView component, allowing for visual customization.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_11

LANGUAGE: tsx
CODE:
```
const customTheme = {
  '--w-rjv-background-color': '#fff',
  '--w-rjv-border-left-width': 0,
  '--w-rjv-color': '#881391',
  '--w-rjv-type-int-color': '#881391',
  '--w-rjv-key-number': '#881391',
  '--w-rjv-key-string': '#881391',
};
```

----------------------------------------

TITLE: Defining Custom Theme for React JSON View
DESCRIPTION: Defines a custom theme object using CSS variable names to override the default styling of the JsonView component.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
const customTheme = {
  '--w-rjv-background-color': '#fff',
  '--w-rjv-border-left-width': 0,
  '--w-rjv-color': '#881391',
  '--w-rjv-type-int-color': '#881391',
  '--w-rjv-key-number': '#881391',
  '--w-rjv-key-string': '#881391'
};
```

----------------------------------------

TITLE: Applying Custom Theme to JsonView (TSX)
DESCRIPTION: This snippet illustrates how to define a custom theme for the JsonView component by providing a style object containing CSS variables (prefixed with `--w-rjv-`). This custom theme is then passed to the `style` prop of the JsonView component, allowing fine-grained control over the appearance.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
}
const customTheme = {
  '--w-rjv-font-family': 'monospace',
  '--w-rjv-color': '#9cdcfe',
  '--w-rjv-key-number': '#268bd2',
  '--w-rjv-key-string': '#9cdcfe',
  '--w-rjv-background-color': '#1e1e1e',
  '--w-rjv-line-color': '#36334280',
  '--w-rjv-arrow-color': '#838383',
  '--w-rjv-edit-color': 'var(--w-rjv-color)',
  '--w-rjv-info-color': '#9c9c9c7a',
  '--w-rjv-update-color': '#9cdcfe',
  '--w-rjv-copied-color': '#9cdcfe',
  '--w-rjv-copied-success-color': '#28a745',

  '--w-rjv-curlybraces-color': '#d4d4d4',
  '--w-rjv-colon-color': '#d4d4d4',
  '--w-rjv-brackets-color': '#d4d4d4',
  '--w-rjv-ellipsis-color': '#cb4b16',
  '--w-rjv-quotes-color': 'var(--w-rjv-key-string)',
  '--w-rjv-quotes-string-color': 'var(--w-rjv-type-string-color)',

  '--w-rjv-type-string-color': '#ce9178',
  '--w-rjv-type-int-color': '#b5cea8',
  '--w-rjv-type-float-color': '#b5cea8',
  '--w-rjv-type-bigint-color': '#b5cea8',
  '--w-rjv-type-boolean-color': '#569cd6',
  '--w-rjv-type-date-color': '#b5cea8',
  '--w-rjv-type-url-color': '#3b89cf',
  '--w-rjv-type-null-color': '#569cd6',
  '--w-rjv-type-nan-color': '#859900',
  '--w-rjv-type-undefined-color': '#569cd6',
};

export default function Demo() {
  return (
    <JsonView value={object} keyName=""root"" style={customTheme} />
  )
}
```

----------------------------------------

TITLE: Applying Custom Theme with React JsonView TSX
DESCRIPTION: Shows how to define a custom theme object using CSS variables (`--w-rjv-*`) and pass it to the `style` prop of the JsonView component. Illustrates customizing colors for various elements like font, keys, background, lines, etc.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_4

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
}
const customTheme = {
  '--w-rjv-font-family': 'monospace',
  '--w-rjv-color': '#9cdcfe',
  '--w-rjv-key-number': '#268bd2',
  '--w-rjv-key-string': '#9cdcfe',
  '--w-rjv-background-color': '#1e1e1e',
  '--w-rjv-line-color': '#36334280',
  '--w-rjv-arrow-color': '#838383',
  '--w-rjv-edit-color': 'var(--w-rjv-color)',
  '--w-rjv-info-color': '#9c9c9c7a',
  '--w-rjv-update-color': '#9cdcfe',
  '--w-rjv-copied-color': '#9cdcfe',
  '--w-rjv-copied-success-color': '#28a745',

  '--w-rjv-curlybraces-color': '#d4d4d4',
  '--w-rjv-colon-color': '#d4d4d4',
  '--w-rjv-brackets-color': '#d4d4d4',
  '--w-rjv-ellipsis-color': '#cb4b16',
  '--w-rjv-quotes-color': 'var(--w-rjv-key-string)',
  '--w-rjv-quotes-string-color': 'var(--w-rjv-type-string-color)',

  '--w-rjv-type-string-color': '#ce9178',
  '--w-rjv-type-int-color': '#b5cea8',
  '--w-rjv-type-float-color': '#b5cea8',
  '--w-rjv-type-bigint-color': '#b5cea8',
  '--w-rjv-type-boolean-color': '#569cd6',
  '--w-rjv-type-date-color': '#b5cea8',
  '--w-rjv-type-url-color': '#3b89cf',
  '--w-rjv-type-null-color': '#569cd6',
  '--w-rjv-type-nan-color': '#859900',
  '--w-rjv-type-undefined-color': '#569cd6',
};

export default function Demo() {
  return (
    <JsonView value={object} keyName=""root"" style={customTheme} />
  )
}
```

----------------------------------------

TITLE: Adding Click Event to React JSON View Rows
DESCRIPTION: Illustrates how to use the JsonView.Row component with a custom render function to add an onClick event handler to each data row, logging the key name, value, and parent value when clicked.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_15

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

export default function Demo() {
  return (
    <JsonView
      style={{
        '--w-rjv-background-color': '#ffffff'
      }}
      value={{
        name: 'John',
        age: 30,
        hobbies: ['reading', 'coding', 'swimming'],
        address: {
            street: '123 Main St',
            city: 'New York',
            country: {
                name: 'Main ',
                codex: '123'
            }
        }
      }}
    >
      <JsonView.Row
        as=""div""
        render={(props, { keyName, value, parentValue }) => {
          return (
            <div
              {...props}
              onClick={() => {
                console.log(""keyName"", keyName)
                console.log(""value"", value)
                console.log(""parentValue"", parentValue)
              }}
            />
          )
        }}
      />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Adding Click Event to JsonView Rows (React/TSX)
DESCRIPTION: Demonstrates how to use the `JsonView.Row` component with a custom render function and the `as` prop to wrap each data row in a `div` and attach an `onClick` event handler, logging row details when clicked.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_15

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

export default function Demo() {
  return (
    <JsonView
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
      value={{
        name: 'John',
        age: 30,
        hobbies: ['reading', 'coding', 'swimming'],
        address: {
            street: '123 Main St',
            city: 'New York',
            country: {
                name: 'Main ',
                codex: '123'
            }
        }
      }}
    >
      <JsonView.Row
        as=""div""
        render={(props, { keyName, value, parentValue }) => {
          return (
            <div
              {...props}
              onClick={() => {
                console.log(""keyName"", keyName)
                console.log(""value"", value)
                console.log(""parentValue"", parentValue)
              }}
            />
          )
        }}
      />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Applying Built-in Themes with React JsonView TSX
DESCRIPTION: Demonstrates how to import and apply different predefined themes like dark, light, nord, github, vscode, gruvbox, monokai, and basic to the JsonView component using the `style` prop. Shows rendering multiple JsonView instances with different themes.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_3

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
import { lightTheme } from '@uiw/react-json-view/light';
import { darkTheme } from '@uiw/react-json-view/dark';
import { nordTheme } from '@uiw/react-json-view/nord';
import { githubLightTheme } from '@uiw/react-json-view/githubLight';
import { githubDarkTheme } from '@uiw/react-json-view/githubDark';
import { vscodeTheme } from '@uiw/react-json-view/vscode';
import { gruvboxTheme } from '@uiw/react-json-view/gruvbox';
import { monokaiTheme } from '@uiw/react-json-view/monokai';
import { basicTheme } from '@uiw/react-json-view/basic';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  boolean: true,
  null: null,
  nan: NaN,
  url: new URL('https://example.com'),
}

const style = { display: 'grid', gap: '1rem', gridTemplateColumns: 'repeat(auto-fill, minmax(250px, 1fr))' };

export default function Demo() {
  return (
    <div style={style}>
      <JsonView value={object} style={darkTheme} />
      <JsonView value={object} style={lightTheme} />
      <JsonView value={object} style={nordTheme} />
      <JsonView value={object} style={githubLightTheme} />
      <JsonView value={object} style={githubDarkTheme} />
      <JsonView value={object} style={gruvboxTheme} />
      <JsonView value={object} style={vscodeTheme} />
      <JsonView value={object} style={monokaiTheme} />
      <JsonView value={object} style={basicTheme} />
    </div>
  );
}
```

----------------------------------------

TITLE: Customizing String and Colon Components in React JsonView
DESCRIPTION: Demonstrates how to customize the rendering of string values (specifically to display images for URLs) and the colon separator using sub-components like `<JsonView.String>` and `<JsonView.Colon>` within the `JsonView` component. Requires `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_6

LANGUAGE: TSX
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  avatar: 'https://i.imgur.com/MK3eW3As.jpg',
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
}

export default function Demo() {
  return (
    <JsonView
      value={object}
      keyName=""root""
      displayObjectSize={false}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
      <JsonView.String
        render={({ children, ...reset }, { type, value, keyName }) => {
          const isImg = /^https?.*\.(jpg|png)$/i.test(value)
          if (type === 'type' && isImg) {
            return <span />
          }
          if (type === 'value' && isImg) {
            return <img {...reset} height=""26"" src={value} />
          }
        }}
      />
      <JsonView.Colon> -&gt; </JsonView.Colon>
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Customizing String and Colon Rendering in React JsonView
DESCRIPTION: Demonstrates how to customize the rendering of string values (specifically for images) and the colon separator using JsonView.String and JsonView.Colon components. It shows conditional rendering based on value type and content.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_6

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  avatar: 'https://i.imgur.com/MK3eW3As.jpg',
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
}

export default function Demo() {
  return (
    <JsonView
      value={object}
      keyName=""root""
      displayObjectSize={false}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
      <JsonView.String
        render={({ children, ...reset }, { type, value, keyName }) => {
          const isImg = /^https?.*\.(jpg|png)$/i.test(value)
          if (type === 'type' && isImg) {
            return <span />
          }
          if (type === 'value' && isImg) {
            return <img {...reset} height=""26"" src={value} />
          }
        }}
      />
      <JsonView.Colon> -&gt; </JsonView.Colon>
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Advanced Customization of Value Rendering in React JsonView
DESCRIPTION: Provides an example of more in-depth customization by overriding the rendering of quotes, specific string values (like ObjectId), Date types, and Integer types. Demonstrates hiding the type label for these values. Requires `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_9

LANGUAGE: TSX
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  _id: ""ObjectId('13212hakjdhajksd')"",
  uid: ""test1"",
  attival_time: new Date('Tue Sep 13 2022 14:07:44 GMT-0500 (Central Daylight Time)'),
  __v: 0
}

export default function Demo() {
  return (
    <JsonView
      value={object}
      // keyName=""root""
      displayObjectSize={false}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
      <JsonView.Quote render={() => <span />}/>
      <JsonView.String
        render={({ children, ...reset }, { type, value, keyName }) => {
          if (type === 'type') {
            return <span />
          }
          if (type === 'value' && /ObjectId\(['""](.*?)['""]\)/.test(value)) {
            return <span {...reset}>{children}</span>
          }
        }}
      />
      <JsonView.Date
        render={({ children, ...reset }, { type, value, keyName }) => {
          if (type === 'type') {
            return <span />
          }
        }}
      />
      <JsonView.Int
        render={({ children, ...reset }, { type, value, keyName }) => {
          if (type === 'type') {
            return <span />
          }
        }}
      />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Customizing Multiple Value Types in React JsonView
DESCRIPTION: Provides an example of customizing the rendering of Quote, String, Date, and Int types by providing custom render functions to their respective sub-components, often used to hide default rendering or apply specific formatting.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_9

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = {
  _id: ""ObjectId('13212hakjdhajksd')"",
  uid: ""test1"",
  attival_time: new Date('Tue Sep 13 2022 14:07:44 GMT-0500 (Central Daylight Time)'),
  __v: 0
}

export default function Demo() {
  return (
    <JsonView
      value={object}
      // keyName=""root""
      displayObjectSize={false}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
      <JsonView.Quote render={() => <span />}/>
      <JsonView.String
        render={({ children, ...reset }, { type, value, keyName }) => {
          if (type === 'type') {
            return <span />
          }
          if (type === 'value' && /ObjectId\(['""](.*?)['""]\)/.test(value)) {
            return <span {...reset}>{children}</span>
          }
        }}
      />
      <JsonView.Date
        render={({ children, ...reset }, { type, value, keyName }) => {
          if (type === 'type') {
            return <span />
          }
        }}
      />
      <JsonView.Int
        render={({ children, ...reset }, { type, value, keyName }) => {
          if (type === 'type') {
            return <span />
          }
        }}
      />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: React JSON View - Online Editing Theme Demo (TSX)
DESCRIPTION: This React component renders a JsonView instance with a custom theme defined by CSS variables. It includes a color picker to dynamically change the values of these variables and updates a timer property in the displayed JSON data every second. It also provides the theme configuration as a JSON string.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_5

LANGUAGE: tsx
CODE:
```
import React, { useState, useEffect } from 'react';
import Colorful from '@uiw/react-color-colorful';
import JsonView from '@uiw/react-json-view';

const object = {
  avatar: 'https://i.imgur.com/MK3eW3As.jpg',
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  bigint: 10086n,
  null: null,
  undefined,
  timer: 0,
  nan: NaN,
  url: new URL('https://example.com'),
  date: new Date('Tue Sep 13 2022 14:07:44 GMT-0500 (Central Daylight Time)'),
  array: [19, 100.86, 'test', NaN, Infinity],
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  string_number: '1234',
}
const customTheme = {
  '--w-rjv-color': '#9cdcfe',
  '--w-rjv-key-number': '#268bd2',
  '--w-rjv-key-string': '#9cdcfe',
  '--w-rjv-background-color': '#1e1e1e',
  '--w-rjv-line-color': '#36334280',
  '--w-rjv-arrow-color': '#838383',
  '--w-rjv-edit-color': '#9cdcfe',
  '--w-rjv-info-color': '#9c9c9c7a',
  '--w-rjv-update-color': '#9cdcfe',
  '--w-rjv-copied-color': '#9cdcfe',
  '--w-rjv-copied-success-color': '#28a745',

  '--w-rjv-curlybraces-color': '#d4d4d4',
  '--w-rjv-colon-color': '#d4d4d4',
  '--w-rjv-brackets-color': '#d4d4d4',
  '--w-rjv-ellipsis-color': '#cb4b16',
  '--w-rjv-quotes-color': '#9cdcfe',
  '--w-rjv-quotes-string-color': '#ce9178',

  '--w-rjv-type-string-color': '#ce9178',
  '--w-rjv-type-int-color': '#b5cea8',
  '--w-rjv-type-float-color': '#b5cea8',
  '--w-rjv-type-bigint-color': '#b5cea8',
  '--w-rjv-type-boolean-color': '#569cd6',
  '--w-rjv-type-date-color': '#b5cea8',
  '--w-rjv-type-url-color': '#3b89cf',
  '--w-rjv-type-null-color': '#569cd6',
  '--w-rjv-type-nan-color': '#859900',
  '--w-rjv-type-undefined-color': '#569cd6',
};

export default function Demo() {
  const [cssvar, setCssvar] = useState('--w-rjv-background-color');
  const [hex, setHex] = useState(""#1e1e1e"");
  const [editable, setEditable] = useState(false);
  const [theme, setTheme] = useState(customTheme);
  const onChange = ({ hexa }) => {
    setHex(hexa);
    setTheme({ ...theme, [cssvar]: hexa });
  };

  const [src, setSrc] = useState({ ...object })
  useEffect(() => {
    const loop = () => {
      setSrc(src => ({
        ...src,
        timer: src.timer + 1
      }))
    }
    const id = setInterval(loop, 1000)
    return () => clearInterval(id)
  }, []);

  const changeEditable = (evn) => setEditable(evn.target.checked);
  return (
    <React.Fragment>
      <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>
        <JsonView
          // editable={editable}
          value={src}
          keyName=""root""
          style={{ flex: 1, overflow: 'auto', ...theme }}
        />
        <div>
          <Colorful color={hex} onChange={onChange} />
          <div style={{ display: 'flex', gap: '0.4rem', flexDirection: 'column', ...customTheme }}>
            {Object.keys(customTheme).map((varname, idx) => {
              const click = () => {
                setCssvar(varname);
                setHex(customTheme[varname]);
              };
              const active = cssvar === varname ? '#a8a8a8' : '';
              return (
                <button key={idx}
                  style={{ background: active, border: 0,boxShadow: 'inset 0px 0px 1px #000', display: 'flex', alignItems: 'center', gap: 5, padding: '1px 3px' }}
                  onClick={click}
                >
                  <span style={{ display: 'inline-block', width: 12, height: 12, background: `var(${varname})` }}></span>
                  {varname}
                </button>
              )
            })}
          </div>
        </div>
      </div>
      <div>
        Copy the theme configuration below into your project.
      </div>
      <pre style={{ padding: 10 }}>
        {JSON.stringify(theme, null, 2)}
      </pre>
    </React.Fragment>
  );
}
```

----------------------------------------

TITLE: Customize Theme with Color Picker - React JSON View (TSX)
DESCRIPTION: This React component demonstrates interactive theme customization for the `JsonView` component. It displays a sample JSON object, allows users to select a CSS variable from a predefined theme and change its color using a color picker, dynamically updating the `JsonView`'s appearance. It also includes a timer that updates a value in the displayed JSON. Requires `@uiw/react-json-view` and `@uiw/react-color-colorful`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_5

LANGUAGE: tsx
CODE:
```
import React, { useState, useEffect } from 'react';
import Colorful from '@uiw/react-color-colorful';
import JsonView from '@uiw/react-json-view';

const object = {
  avatar: 'https://i.imgur.com/MK3eW3As.jpg',
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  bigint: 10086n,
  null: null,
  undefined,
  timer: 0,
  nan: NaN,
  url: new URL('https://example.com'),
  date: new Date('Tue Sep 13 2022 14:07:44 GMT-0500 (Central Daylight Time)'),
  array: [19, 100.86, 'test', NaN, Infinity],
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  string_number: '1234',
}
const customTheme = {
  '--w-rjv-color': '#9cdcfe',
  '--w-rjv-key-number': '#268bd2',
  '--w-rjv-key-string': '#9cdcfe',
  '--w-rjv-background-color': '#1e1e1e',
  '--w-rjv-line-color': '#36334280',
  '--w-rjv-arrow-color': '#838383',
  '--w-rjv-edit-color': '#9cdcfe',
  '--w-rjv-info-color': '#9c9c9c7a',
  '--w-rjv-update-color': '#9cdcfe',
  '--w-rjv-copied-color': '#9cdcfe',
  '--w-rjv-copied-success-color': '#28a745',

  '--w-rjv-curlybraces-color': '#d4d4d4',
  '--w-rjv-colon-color': '#d4d4d4',
  '--w-rjv-brackets-color': '#d4d4d4',
  '--w-rjv-ellipsis-color': '#cb4b16',
  '--w-rjv-quotes-color': '#9cdcfe',
  '--w-rjv-quotes-string-color': '#ce9178',

  '--w-rjv-type-string-color': '#ce9178',
  '--w-rjv-type-int-color': '#b5cea8',
  '--w-rjv-type-float-color': '#b5cea8',
  '--w-rjv-type-bigint-color': '#b5cea8',
  '--w-rjv-type-boolean-color': '#569cd6',
  '--w-rjv-type-date-color': '#b5cea8',
  '--w-rjv-type-url-color': '#3b89cf',
  '--w-rjv-type-null-color': '#569cd6',
  '--w-rjv-type-nan-color': '#859900',
  '--w-rjv-type-undefined-color': '#569cd6',
};

export default function Demo() {
  const [cssvar, setCssvar] = useState('--w-rjv-background-color');
  const [hex, setHex] = useState(""#1e1e1e"");
  const [editable, setEditable] = useState(false);
  const [theme, setTheme] = useState(customTheme);
  const onChange = ({ hexa }) => {
    setHex(hexa);
    setTheme({ ...theme, [cssvar]: hexa });
  };

  const [src, setSrc] = useState({ ...object })
  useEffect(() => {
    const loop = () => {
      setSrc(src => ({
        ...src,
        timer: src.timer + 1
      }))
    }
    const id = setInterval(loop, 1000)
    return () => clearInterval(id)
  }, []);

  const changeEditable = (evn) => setEditable(evn.target.checked);
  return (
    <React.Fragment>
      <div style={{ display: 'flex', gap: '1rem', alignItems: 'flex-start' }}>
        <JsonView
          // editable={editable}
          value={src}
          keyName=""root""
          style={{ flex: 1, overflow: 'auto', ...theme }}
        />
        <div>
          <Colorful color={hex} onChange={onChange} />
          <div style={{ display: 'flex', gap: '0.4rem', flexDirection: 'column', ...customTheme }}>
            {Object.keys(customTheme).map((varname, idx) => {
              const click = () => {
                setCssvar(varname);
                setHex(customTheme[varname]);
              };
              const active = cssvar === varname ? '#a8a8a8' : '';
              return (
                <button key={idx}
                  style={{ background: active, border: 0,boxShadow: 'inset 0px 0px 1px #000', display: 'flex', alignItems: 'center', gap: 5, padding: '1px 3px' }}
                  onClick={click}
                >
                  <span style={{ display: 'inline-block', width: 12, height: 12, background: `var(${varname})` }}></span>
                  {varname}
                </button>
              )
            })}
          </div>
        </div>
      </div>
      <div>
        Copy the theme configuration below into your project.
      </div>
      <pre style={{ padding: 10 }}>
        {JSON.stringify(theme, null, 2)}
      </pre>
    </React.Fragment>
  );
}
```

----------------------------------------

TITLE: Rendering URL Objects in React JsonView
DESCRIPTION: Shows how to render JavaScript URL objects directly within the JsonView component. It highlights the component's built-in support for the URL API.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_7

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

export default function Demo() {
  return (
    <JsonView
      value={{
        url: new URL('https://example.com?t=12'),
        urlStr: ""https://example.com"",
        github: ""https://example.com"",
      }}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    />
  )
}
```

----------------------------------------

TITLE: Displaying URL Objects in React JsonView
DESCRIPTION: Shows how to render an object containing a JavaScript `URL` object alongside string URLs in the `JsonView` component. Highlights the component's support for the native URL API. Requires `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_7

LANGUAGE: TSX
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

export default function Demo() {
  return (
    <JsonView
      value={{
        url: new URL('https://example.com?t=12'),
        urlStr: ""https://example.com"",
        github: ""https://example.com"",
      }}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    />
  )
}
```

----------------------------------------

TITLE: Customizing Copied and URL Rendering in React JsonView
DESCRIPTION: Illustrates advanced customization by replacing the default copy button with a custom component (JsonView.Copied) and providing a custom render function for URL values using JsonView.Url.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_8

LANGUAGE: tsx
CODE:
```
import React, { Fragment } from 'react';
import JsonView, { ValueQuote } from '@uiw/react-json-view';

const Copied = JsonView.Copied;

export default function Demo() {
  return (
    <JsonView
      value={{
        url: new URL('https://example.com?t=12'),
        urlStr: ""https://example.com"",
        github: ""https://example.com"",
      }}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
      <Copied
        render={({ 'data-copied': copied, style, onClick, ...props }, { value }) => {
          const styl = { whiteSpace: 'nowrap' }
          if (copied) {
            return <span style={{ ...style, ...styl }}>复制成功</span>
          }
          return <span style={{ ...style, ...styl }} onClick={onClick}>复制</span>
        }}
      />
      <JsonView.Url
        render={(props, { type, value }) => {
          if (type === 'type' && value instanceof URL) {
            return <span />
          }
          if (type === 'value' && value instanceof URL) {
            return (
              <Fragment>
                <a href={value.href} target=""_blank"" {...props}>
                  <ValueQuote />
                  {value.href}
                  <ValueQuote />
                </a>
                Open URL
              </Fragment>
            );
          }
        }}
      />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Customizing Copied and URL Components in React JsonView
DESCRIPTION: Illustrates advanced customization by rendering custom components for the copy functionality (`<Copied>`) and the display of URL values (`<JsonView.Url>`). Shows how to modify the copy text and link URL values. Requires `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_8

LANGUAGE: TSX
CODE:
```
import React, { Fragment } from 'react';
import JsonView, { ValueQuote } from '@uiw/react-json-view';

const Copied = JsonView.Copied;

export default function Demo() {
  return (
    <JsonView
      value={{
        url: new URL('https://example.com?t=12'),
        urlStr: ""https://example.com"",
        github: ""https://example.com"",
      }}
      style={{
        '--w-rjv-background-color': '#ffffff',
      }}
    >
      <Copied
        render={({ 'data-copied': copied, style, onClick, ...props }, { value }) => {
          const styl = { whiteSpace: 'nowrap' }
          if (copied) {
            return <span style={{ ...style, ...styl }}>复制成功</span>
          } else {
            return <span style={{ ...style, ...styl }} onClick={onClick}>复制</span>
          }
        }}
      />
      <JsonView.Url
        render={(props, { type, value }) => {
          if (type === 'type' && value instanceof URL) {
            return <span />
          }
          if (type === 'value' && value instanceof URL) {
            return (
              <Fragment>
                <a href={value.href} target=""_blank"" {...props}>
                  <ValueQuote />
                  {value.href}
                  <ValueQuote />
                </a>
                Open URL
              </Fragment>
            );
          }
        }}
      />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Hide Array Index in React JSON View (TSX)
DESCRIPTION: Demonstrates how to hide the array index display in the @uiw/react-json-view component by overriding the default rendering for Colon and KeyName components when the parent is an array.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_17

LANGUAGE: tsx
CODE:
```
import React, { Fragment } from 'react';
import JsonView from '@uiw/react-json-view';

export default function Demo() {
  const value = { data: [""123"", 23] }
  return (
    <JsonView value={value} style={{ '--w-rjv-background-color': '#ffffff' }}>
        <JsonView.Colon render={(props, { parentValue, value, keyName }) => {
            if (Array.isArray(parentValue) && props.children == "":"") {
              return <span />
            }
            return <span {...props} />
        }}/>
        <JsonView.KeyName 
          render={({ ...props }, { type, parentValue, value, keyName }) => {
            if (Array.isArray(parentValue) && Number.isFinite( props.children)) {
              return <span />
            }
            return <span {...props} />
          }}
        />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Customize Array Index Display in React JSON View
DESCRIPTION: Demonstrates how to use the `JsonView.Colon` and `JsonView.KeyName` components to hide array indices when rendering JSON data with `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_17

LANGUAGE: tsx
CODE:
```
import React, { Fragment } from 'react';
import JsonView from '@uiw/react-json-view';

export default function Demo() {
  const value = { data: [""123"", 23] }
  return (
    <JsonView value={value} style={{ '--w-rjv-background-color': '#ffffff' }}>
        <JsonView.Colon render={(props, { parentValue, value, keyName }) => {
            if (Array.isArray(parentValue) && props.children == "":"") {
              return <span />
            }
            return <span {...props} />
        }}/>
        <JsonView.KeyName 
          render={({ ...props }, { type, parentValue, value, keyName }) => {
            if (Array.isArray(parentValue) && Number.isFinite( props.children)) {
              return <span />
            }
            return <span {...props} />
          }}
        />
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Custom Rendering with 'as' Prop in React JSON View
DESCRIPTION: Shows how to use the 'as' prop on a JsonView sub-component (CountInfo) to render it as a specific HTML element ('del') and apply conditional rendering based on the value and key name.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_14

LANGUAGE: tsx
CODE:
```
<JsonView.CountInfo
  as=""del""
  render={(props, { value, keyName }) => {
    if (keyName === 'integer' && typeof value === 'number' && value > 10) {
      console.log('value:',  value, props)
      return <del {...props}>{keyName}</del>;
    }
  }}
/>
```

----------------------------------------

TITLE: Customizing CountInfo Tag and Rendering (React/TSX)
DESCRIPTION: Shows how to use the `as` prop to change the HTML tag for the CountInfo component and provide a custom render function to conditionally display content based on the value and key name.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_14

LANGUAGE: tsx
CODE:
```
<JsonView.CountInfo
  as=""del""
  render={(props, { value, keyName }) => {
    if (keyName === 'integer' && typeof value === 'number' && value > 10) {
      console.log('value:',  value, props)
      return <del {...props}>{keyName}</del>;
    }
  }}
/>
```

----------------------------------------

TITLE: Rendering Array of Objects in React JsonView
DESCRIPTION: Shows a basic example of rendering an array of objects using the JsonView component, demonstrating its ability to display complex data structures. Note: The provided snippet is incomplete.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_10

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = [
  {
    ""_id"": ""56dcf573b09c217d39fd7621"",
    ""name"": ""Howard Christensen"",
    ""email"": ""howardchristensen@gmail.com"",
    ""phone"": ""+1 (830) 529-3176"",
    ""address"": ""511 Royce Street, Hilltop, Tennessee, 9712""
  },
  {

```

----------------------------------------

TITLE: Displaying Array Data in React JsonView (Incomplete)
DESCRIPTION: Shows the beginning of an example demonstrating how to render an array of objects using the `JsonView` component, typically for displaying structured data like search results or database records. The provided snippet is incomplete. Requires `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_10

LANGUAGE: TSX
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';

const object = [
  {
    ""_id"": ""56dcf573b09c217d39fd7621"",
    ""name"": ""Howard Christensen"",
    ""email"": ""howardchristensen@gmail.com"",
    ""phone"": ""+1 (830) 529-3176"",
    ""address"": ""511 Royce Street, Hilltop, Tennessee, 9712""
  },
  {
```

----------------------------------------

TITLE: Use Built-in Icons for Arrows in React JSON View
DESCRIPTION: Illustrates how to replace the default expand/collapse arrows with built-in alternative icons like `TriangleSolidArrow` using the `JsonView.Arrow` component in `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_19

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
import { TriangleArrow } from '@uiw/react-json-view/triangle-arrow';
import { TriangleSolidArrow } from '@uiw/react-json-view/triangle-solid-arrow';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
}
export default function Demo() {
  return (
    <JsonView
      value={object}
      keyName=""root""
      style={{
        '--w-rjv-background-color': '#ffffff',
        '--w-rjv-border-left': '1px dashed #ebebeb',
      }}
    >
      <JsonView.Arrow>
        <TriangleSolidArrow />
      </JsonView.Arrow>
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Use Built-in Icons in React JSON View (TSX)
DESCRIPTION: Demonstrates how to modify the default collapse/expand icons in the @uiw/react-json-view component by using built-in icon components like `TriangleSolidArrow`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_19

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
import { TriangleArrow } from '@uiw/react-json-view/triangle-arrow';
import { TriangleSolidArrow } from '@uiw/react-json-view/triangle-solid-arrow';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
}
export default function Demo() {
  return (
    <JsonView
      value={object}
      keyName=""root""
      style={{
        '--w-rjv-background-color': '#ffffff',
        '--w-rjv-border-left': '1px dashed #ebebeb',
      }}
    >
      <JsonView.Arrow>
        <TriangleSolidArrow />
      </JsonView.Arrow>
    </JsonView>
  )
}
```

----------------------------------------

TITLE: Use Custom SVG Icons for Arrows in React JSON View
DESCRIPTION: Provides an example of rendering custom SVG icons for the expand/collapse arrows by using the `render` prop on the `JsonView.Arrow` component in `@uiw/react-json-view`.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_20

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
import { TriangleArrow } from '@uiw/react-json-view/triangle-arrow';
import { TriangleSolidArrow } from '@uiw/react-json-view/triangle-solid-arrow';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
}
export default function Demo() {
  return (
    <JsonView
      value={object}
      keyName=""root""
      style={{
        '--w-rjv-background-color': '#ffffff',
        '--w-rjv-border-left': '1px dashed #ebebeb',
      }}
    >
      <JsonView.Arrow
        render={({ 'data-expanded': isExpanded, ...props }) => {
          const svgProps = {
            style: {
              cursor: 'pointer', height: '1em', width: '1em', marginRight: 5, userSelect: 'none'
            },
            fill: ""var(--w-rjv-arrow-color, currentColor)""
          }
          if (!isExpanded) {
            return (
              <svg viewBox=""0 0 24 24"" {...svgProps}>
                <path d=""M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z"" />
              </svg>
            );
          }
          return (
            <svg viewBox=""0 0 24 24"" {...svgProps}>
              <path d=""M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7"" />
            </svg>
          );
        }}
      />
    </JsonView>
  );
}
```

----------------------------------------

TITLE: Use Custom SVG Icons in React JSON View (TSX)
DESCRIPTION: Illustrates how to use custom SVG components as collapse/expand icons in the @uiw/react-json-view component by providing a render function to the `JsonView.Arrow` component.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_20

LANGUAGE: tsx
CODE:
```
import React from 'react';
import JsonView from '@uiw/react-json-view';
import { TriangleArrow } from '@uiw/react-json-view/triangle-arrow';
import { TriangleSolidArrow } from '@uiw/react-json-view/triangle-solid-arrow';

const object = {
  string: 'Lorem ipsum dolor sit amet',
  integer: 42,
  float: 114.514,
  object: {
    'first-child': true,
    'second-child': false,
    'last-child': null,
  },
  nestedArray: [
    [1, 2],
    [3, 4],
  ],
}
export default function Demo() {
  return (
    <JsonView
      value={object}
      keyName=""root""
      style={{
        '--w-rjv-background-color': '#ffffff',
        '--w-rjv-border-left': '1px dashed #ebebeb',
      }}
    >
      <JsonView.Arrow
        render={({ 'data-expanded': isExpanded, ...props }) => {
          const svgProps = {
            style: {
              cursor: 'pointer', height: '1em', width: '1em', marginRight: 5, userSelect: 'none'
            },
            fill: ""var(--w-rjv-arrow-color, currentColor)""
          }
          if (!isExpanded) {
            return (
              <svg viewBox=""0 0 24 24"" {...svgProps}>
                <path d=""M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M13,7H11V11H7V13H11V17H13V13H17V11H13V7Z"" />
              </svg>
            );
          }
          return (
            <svg viewBox=""0 0 24 24"" {...svgProps}>
              <path d=""M12,20C7.59,20 4,16.41 4,12C4,7.59 7.59,4 12,4C16.41,4 20,7.59 20,12C20,16.41 16.41,20 12,20M12,2A10,10 0 0,0 2,12A10,10 0 0,0 12,22A10,10 0 0,0 22,12A10,10 0 0,0 12,2M7,13H17V11H7"" />
              </svg>
            );
          }}
        />
    </JsonView>
  );
}
```

----------------------------------------

TITLE: Referencing React JSON View Sub-Components
DESCRIPTION: Imports specific sub-components from the JsonView library for custom rendering or manipulation.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const Quote = JsonView.Quote;
const BraceLeft = JsonView.BraceLeft;
const BraceRight = JsonView.BraceRight;
const CountInfo = JsonView.CountInfo;
const Ellipsis = JsonView.Ellipsis;
const CountInfoExtra = JsonView.CountInfoExtra;
```

----------------------------------------

TITLE: Accessing JsonView Sub-Components (React/TSX)
DESCRIPTION: Extracts specific sub-components like Quote, BraceLeft, etc., from the JsonView component for potential custom rendering or manipulation within the main component structure.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_12

LANGUAGE: tsx
CODE:
```
const Quote = JsonView.Quote;
const BraceLeft = JsonView.BraceLeft;
const BraceRight = JsonView.BraceRight;
const CountInfo = JsonView.CountInfo;
const Ellipsis = JsonView.Ellipsis;
const CountInfoExtra = JsonView.CountInfoExtra;
```

----------------------------------------

TITLE: Migrating Props from v1 to v2 (diff)
DESCRIPTION: This diff snippet illustrates the removal of the 'quotes' and 'components' props from the JsonViewProps interface in version 2 of the react-json-view library.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_21

LANGUAGE: diff
CODE:
```
export interface JsonViewProps<T extends object> extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
-  quotes?: ""'"" | '""' | '';
-  components?: {};
}
```

----------------------------------------

TITLE: Migrating Props - react-json-view v2 - Diff
DESCRIPTION: This diff snippet illustrates the changes in the `JsonViewProps` interface when migrating from version 1 to version 2 of `react-json-view`. It specifically highlights the removal of the `quotes` and `components` properties.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_21

LANGUAGE: diff
CODE:
```
export interface JsonViewProps<T extends object> extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLDivElement>, HTMLDivElement> {
-  quotes?: ""'"" | '""' | '';
-  components?: {};
}
```

----------------------------------------

TITLE: Running Development Mode for react-json-view (Bash)
DESCRIPTION: These commands initiate the development environment for the react-json-view project. The first command watches for component changes and compiles them, while the second starts the preview website instance.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_24

LANGUAGE: bash
CODE:
```
# Step 1, run first, listen to the component compile and output the .js file
# listen for compilation output type .d.ts file
npm run watch
# Step 2, development mode, listen to compile preview website instance
npm run start
```

----------------------------------------

TITLE: Exporting JsonView Component and Sub-components (TypeScript)
DESCRIPTION: This TypeScript snippet shows the imports for various symbol, type, and section components used internally by react-json-view and defines the JsonViewComponent type, which includes these sub-components as static properties, finally exporting the main JsonView component.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_23

LANGUAGE: typescript
CODE:
```
import { BraceLeft } from './symbol/BraceLeft';
import { BraceRight } from './symbol/BraceRight';
import { BracketsLeft } from './symbol/BracketsLeft';
import { BracketsRight } from './symbol/BracketsRight';
import { Arrow } from './symbol/Arrow';
import { Colon } from './symbol/Colon';
import { Quote } from './symbol/Quote';
import { ValueQuote } from './symbol/ValueQuote';

import { Bigint } from './types/Bigint';
import { Date } from './types/Date';
import { False } from './types/False';
import { Float } from './types/Float';
import { Int } from './types/Int';
import { Map } from './types/Map';
import { Nan } from './types/Nan';
import { Null } from './types/Null';
import { Set } from './types/Set';
import { StringText } from './types/String';
import { True } from './types/True';
import { Undefined } from './types/Undefined';
import { Url } from './types/Url';

import { Copied } from './section/Copied';
import { CountInfo } from './section/CountInfo';
import { CountInfoExtra } from './section/CountInfoExtra';
import { Ellipsis } from './section/Ellipsis';
import { KeyName } from './section/KeyName';
import { Row } from './section/Row';

type JsonViewComponent = React.FC<React.PropsWithRef<JsonViewProps<object>>> & {
  BraceLeft: typeof BraceLeft;
  BraceRight: typeof BraceRight;
  BracketsLeft: typeof BracketsLeft;
  BracketsRight: typeof BracketsRight;
  Arrow: typeof Arrow;
  Colon: typeof Colon;
  Quote: typeof Quote;
  ValueQuote: typeof ValueQuote;

  Bigint: typeof Bigint;
  Date: typeof Date;
  False: typeof False;
  Float: typeof Float;
  Int: typeof Int;
  Map: typeof Map;
  Nan: typeof Nan;
  Null: typeof Null;
  Set: typeof Set;
  String: typeof StringText;
  True: typeof True;
  Undefined: typeof Undefined;
  Url: typeof Url;

  Copied: typeof Copied;
  CountInfo: typeof CountInfo;
  CountInfoExtra: typeof CountInfoExtra;
  Ellipsis: typeof Ellipsis;
  KeyName: typeof KeyName;
  Row: typeof Row;
};
declare const JsonView: JsonViewComponent;
export default JsonView;
}
```

----------------------------------------

TITLE: Defining Component Structure - react-json-view - TypeScript
DESCRIPTION: This TypeScript code defines the `JsonViewComponent` type, which is a React functional component extended with various nested components representing symbols, data types, and sections used internally by the JSON viewer. It then declares and exports the main `JsonView` component with this type.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_23

LANGUAGE: ts
CODE:
```
import { BraceLeft } from './symbol/BraceLeft';
import { BraceRight } from './symbol/BraceRight';
import { BracketsLeft } from './symbol/BracketsLeft';
import { BracketsRight } from './symbol/BracketsRight';
import { Arrow } from './symbol/Arrow';
import { Colon } from './symbol/Colon';
import { Quote } from './symbol/Quote';
import { ValueQuote } from './symbol/ValueQuote';

import { Bigint } from './types/Bigint';
import { Date } from './types/Date';
import { False } from './types/False';
import { Float } from './types/Float';
import { Int } from './types/Int';
import { Map } from './types/Map';
import { Nan } from './types/Nan';
import { Null } from './types/Null';
import { Set } from './types/Set';
import { StringText } from './types/String';
import { True } from './types/True';
import { Undefined } from './types/Undefined';
import { Url } from './types/Url';

import { Copied } from './section/Copied';
import { CountInfo } from './section/CountInfo';
import { CountInfoExtra } from './section/CountInfoExtra';
import { Ellipsis } from './section/Ellipsis';
import { KeyName } from './section/KeyName';
import { Row } from './section/Row';

type JsonViewComponent = React.FC<React.PropsWithRef<JsonViewProps<object>>> & {
  BraceLeft: typeof BraceLeft;
  BraceRight: typeof BraceRight;
  BracketsLeft: typeof BracketsLeft;
  BracketsRight: typeof BracketsRight;
  Arrow: typeof Arrow;
  Colon: typeof Colon;
  Quote: typeof Quote;
  ValueQuote: typeof ValueQuote;

  Bigint: typeof Bigint;
  Date: typeof Date;
  False: typeof False;
  Float: typeof Float;
  Int: typeof Int;
  Map: typeof Map;
  Nan: typeof Nan;
  Null: typeof Null;
  Set: typeof Set;
  String: typeof StringText;
  True: typeof True;
  Undefined: typeof Undefined;
  Url: typeof Url;

  Copied: typeof Copied;
  CountInfo: typeof CountInfo;
  CountInfoExtra: typeof CountInfoExtra;
  Ellipsis: typeof Ellipsis;
  KeyName: typeof KeyName;
  Row: typeof Row;
};
declare const JsonView: JsonViewComponent;
export default JsonView;
}
```

----------------------------------------

TITLE: Run React JSON View in Development Mode (Bash)
DESCRIPTION: These commands are used to run the react-json-view project in development mode. The first command watches for component compilation and outputs JavaScript and TypeScript definition files. The second command starts the development server to preview the website instance.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_24

LANGUAGE: bash
CODE:
```
# Step 1, run first, listen to the component compile and output the .js file
# listen for compilation output type .d.ts file
npm run watch
# Step 2, development mode, listen to compile preview website instance
npm run start
```

----------------------------------------

TITLE: Build React JSON View for Production (Bash)
DESCRIPTION: This command builds the react-json-view project for production deployment. It creates a 'build' folder containing minified files with hashed filenames, ready for deployment.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/core/README.md#_snippet_25

LANGUAGE: bash
CODE:
```
npm run build
```

----------------------------------------

TITLE: Building Production App for react-json-view (Bash)
DESCRIPTION: This command builds the react-json-view application for production. The output is placed in the 'build' folder, minified, and includes hashed filenames.
SOURCE: https://github.com/uiwjs/react-json-view/blob/main/README.md#_snippet_25

LANGUAGE: bash
CODE:
```
npm run build
```","react js",""