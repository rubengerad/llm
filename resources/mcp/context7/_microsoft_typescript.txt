"typescript","TITLE: TypeScript Compiler API Core Functions
DESCRIPTION: This entry groups fundamental functions used within the TypeScript Compiler API for program creation, diagnostics, and file handling. It covers essential building blocks for custom compiler tools.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
ts.createProgram(fileNames: string[], options: ts.CompilerOptions, host?: CompilerHost): Program
  - Creates a Program instance, representing the entire compilation.
  - Parameters:
    - fileNames: An array of root file names to compile.
    - options: Compiler options.
    - host: Optional compiler host; if not provided, a default host is created.
  - Returns: A Program object.

ts.getPreEmitDiagnostics(program: Program, cancellationToken?: CancellationToken): Diagnostic[]
  - Gets diagnostics for the program before emitting files. Includes syntax, semantic, and other errors.
  - Parameters:
    - program: The Program instance.
    - cancellationToken: Optional token to cancel the operation.
  - Returns: An array of Diagnostic objects.

ts.flattenDiagnosticMessageText(diag: string | DiagnosticMessageChain, newLine: string): string
  - Formats a diagnostic message chain into a single string.
  - Parameters:
    - diag: The diagnostic message text or chain.
    - newLine: The newline character to use for formatting.
  - Returns: A formatted string.

ts.getLineAndCharacterOfPosition(sourceFile: SourceFile, position: number): LineAndCharacter
  - Gets the line and character position for a given character offset in a SourceFile.
  - Parameters:
    - sourceFile: The SourceFile object.
    - position: The character offset.
  - Returns: An object with line and character properties.

ts.createCompilerHost(options?: CompilerOptions, setParentNodes?: boolean): CompilerHost
  - Creates a default CompilerHost that uses the file system to read files and check directories.
  - Parameters:
    - options: Compiler options.
    - setParentNodes: Whether to set parent nodes on the AST.
  - Returns: A CompilerHost instance.

CompilerHost.writeFile(fileName: string, data: string, writeByteOrderMark?: boolean, onError?: (message: string) => void, sourceFiles?: SourceFile[]): void
  - Method on CompilerHost to write output files. Can be overridden for custom behavior (e.g., in-memory writing).

CompilerHost.readFile(fileName: string): string | undefined
  - Method on CompilerHost to read file content. Can be overridden.

ts.transpileModule(input: string, compilerOptions: TranspileOptions): TranspileOutput
  - Transpiles a single TypeScript module string to JavaScript.
  - Parameters:
    - input: The TypeScript code as a string.
    - compilerOptions: Options for transpilation.
  - Returns: An object containing the transpiled output and diagnostics.
```

----------------------------------------

TITLE: Example TypeScript Class for Documentation
DESCRIPTION: This is an example of a TypeScript class with JSDoc comments for the class itself and its constructor parameters. This input demonstrates the structure expected by the documentation generator script.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_15

LANGUAGE: typescript
CODE:
```
/**
 * Documentation for C
 */
class C {
    /**
     * constructor documentation
     * @param a my parameter documentation
     * @param b another parameter documentation
     */
    constructor(a: string, b: C) { }
}

```

----------------------------------------

TITLE: TypeScript Type Checker API Overview
DESCRIPTION: Provides an overview of TypeScript's Type Checker APIs, which are used to retrieve and reason about the types of syntax tree nodes. It explains the concepts of Symbols and Types and lists common methods for type analysis.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_12

LANGUAGE: APIDOC
CODE:
```
TypeChecker APIs:

Purpose: Provides methods for retrieving and reasoning about the types of syntax tree nodes within a TypeScript program.

Key Concepts:
- Symbol: Describes how the type system views a declared entity (e.g., class, function, variable). It contains information about the entity's declaration.
- Type: Describes the backing type that entities may be declared as. Often has a backing Symbol pointing to its declaration(s).

Retrieving the Type Checker:
- The type checker can be retrieved from a program object: `program.getTypeChecker()`

Commonly Used APIs:
- `getSymbolAtLocation(node)`:
  - Description: Retrieves the Symbol associated with a given AST node.
  - Parameters:
    - node: The AST node to inspect.
  - Returns: The Symbol associated with the node, or undefined.

- `getTypeAtLocation(node)`:
  - Description: Retrieves the Type associated with a given AST node.
  - Parameters:
    - node: The AST node to inspect.
  - Returns: The Type associated with the node, or undefined.

- `getTypeOfSymbolAtLocation(symbol, node)`:
  - Description: Retrieves the Type associated with a symbol at a specific AST node's context.
  - Parameters:
    - symbol: The Symbol to get the type for.
    - node: The AST node providing context.
  - Returns: The Type of the symbol at the given location.

- `typeToString(type)`:
  - Description: Prints a type to a human-readable string.
  - Parameters:
    - type: The Type object to convert to a string.
  - Returns: A string representation of the type.

Note on Symbols:
- TypeScript's `Symbol` is a type system concept, distinct from JavaScript's runtime primitive `Symbol` used for unique identifiers.
```

----------------------------------------

TITLE: Create and Use an Incremental Program Watcher
DESCRIPTION: This example demonstrates how to use the TypeScript compiler API to create a file watcher that leverages builder programs for incremental recompilation. It shows how to find a tsconfig.json, set up a watch compiler host, customize program creation and post-creation hooks, and handle diagnostic reporting.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_8

LANGUAGE: typescript
CODE:
```
import ts = require(""typescript"");

const formatHost: ts.FormatDiagnosticsHost = {
  getCanonicalFileName: path => path,
  getCurrentDirectory: ts.sys.getCurrentDirectory,
  getNewLine: () => ts.sys.newLine
};

function watchMain() {
  const configPath = ts.findConfigFile(
    /*searchPath*/ ""./"",
    ts.sys.fileExists,
    ""tsconfig.json""
  );
  if (!configPath) {
    throw new Error(""Could not find a valid 'tsconfig.json'."");
  }

  // TypeScript can use several different program creation ""strategies"":
  //  * ts.createEmitAndSemanticDiagnosticsBuilderProgram,
  //  * ts.createSemanticDiagnosticsBuilderProgram
  //  * ts.createAbstractBuilder
  // The first two produce ""builder programs"". These use an incremental strategy
  // to only re-check and emit files whose contents may have changed, or whose
  // dependencies may have changes which may impact change the result of prior
  // type-check and emit.
  // The last uses an ordinary program which does a full type check after every
  // change.
  // Between `createEmitAndSemanticDiagnosticsBuilderProgram` and
  // `createSemanticDiagnosticsBuilderProgram`, the only difference is emit.
  // For pure type-checking scenarios, or when another tool/process handles emit,
  // using `createSemanticDiagnosticsBuilderProgram` may be more desirable.
  const createProgram = ts.createSemanticDiagnosticsBuilderProgram;

  // Note that there is another overload for `createWatchCompilerHost` that takes
  // a set of root files.
  const host = ts.createWatchCompilerHost(
    configPath,
    {},
    ts.sys,
    createProgram,
    reportDiagnostic,
    reportWatchStatusChanged
  );

  // You can technically override any given hook on the host, though you probably
  // don't need to.
  // Note that we're assuming `origCreateProgram` and `origPostProgramCreate`
  // doesn't use `this` at all.
  const origCreateProgram = host.createProgram;
  host.createProgram = (rootNames: ReadonlyArray<string>, options, host, oldProgram) => {
    console.log(""** We're about to create the program! **"");
    return origCreateProgram(rootNames, options, host, oldProgram);
  };
  const origPostProgramCreate = host.afterProgramCreate;

  host.afterProgramCreate = program => {
    console.log(""** We finished making the program! **"");
    origPostProgramCreate!(program);
  };

  // `createWatchProgram` creates an initial program, watches files, and updates
  // the program over time.
  ts.createWatchProgram(host);
}

function reportDiagnostic(diagnostic: ts.Diagnostic) {
  console.error(""Error"", diagnostic.code, "":"", ts.flattenDiagnosticMessageText( diagnostic.messageText, formatHost.getNewLine()));
}

/**
 * Prints a diagnostic every time the watch status changes.
 * This is mainly for messages like ""Starting compilation"" or ""Compilation completed"".
 */
function reportWatchStatusChanged(diagnostic: ts.Diagnostic) {
  console.info(ts.formatDiagnostic(diagnostic, formatHost));
}

watchMain();

```

----------------------------------------

TITLE: Example JSON Output from Doc Generator
DESCRIPTION: This JSON structure represents the output generated by the TypeScript documentation tool. It details class information, including documentation, type, constructors, parameters, and their types, as parsed from the input TypeScript code.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_16

LANGUAGE: json
CODE:
```
[
    {
        ""name"": ""C"",
        ""documentation"": ""Documentation for C "",
        ""type"": ""typeof C"",
        ""constructors"": [
            {
                ""parameters"": [
                    {
                        ""name"": ""a"",
                        ""documentation"": ""my parameter documentation"",
                        ""type"": ""string""
                    },
                    {
                        ""name"": ""b"",
                        ""documentation"": ""another parameter documentation"",
                        ""type"": ""C""
                    }
                ],
                ""returnType"": ""C"",
                ""documentation"": ""constructor documentation""
            }
        ]
    }
]

```

----------------------------------------

TITLE: Install Node.js Declaration Files
DESCRIPTION: Installs the TypeScript declaration files for Node.js, which are necessary for using Node.js APIs in TypeScript projects and examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_1

LANGUAGE: sh
CODE:
```
npm install -D @types/node
```

----------------------------------------

TITLE: Promise.try Usage Examples
DESCRIPTION: Demonstrates the usage of the Promise.try static method for executing a function and returning a Promise.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bluebirdStaticThis.errors.txt#_snippet_4

LANGUAGE: APIDOC
CODE:
```
Promise.try:
  Promise.try(Promise, () => { return foo; })
    - Executes a function synchronously and returns a Promise that resolves with the function's return value.

  Promise.try(Promise, () => { return foo; }, arr)
    - Executes a function with provided arguments and returns a Promise.

  Promise.try(Promise, () => { return foo; }, arr, x)
    - Executes a function with provided arguments and returns a Promise.
```

----------------------------------------

TITLE: Intl.Locale Constructor and Methods
DESCRIPTION: Demonstrates the Intl.Locale constructor for creating locale objects and accessing their properties. Includes examples of creating a Locale object and using resolvedOptions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#_snippet_4

LANGUAGE: APIDOC
CODE:
```
new Intl.Locale(tag?: string, options?: LocaleOptions)
  Creates a new Locale object.
  Parameters:
    tag: A string representing a BCP 47 language tag.
    options: An object with properties to customize the locale.

  resolvedOptions(): ResolvedLocaleOptions
    Returns an object with the canonicalized locale properties.

Example Usage:
// Creating a Locale object
const locale = new Intl.Locale('en-US');
console.log(locale.language); // ""en""
console.log(locale.region);   // ""US""

// Using resolvedOptions
const localesArg = [""es-ES"", new Intl.Locale(""en-US"")];
console.log((new Intl.DisplayNames(localesArg, {type: 'language'})).resolvedOptions().locale); // ""es-ES""
```

----------------------------------------

TITLE: Create and Print TypeScript AST
DESCRIPTION: Demonstrates using TypeScript's factory functions to create AST nodes for a factorial function and then using the printer API to convert the AST into a string representation. This showcases programmatic code generation.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_11

LANGUAGE: ts
CODE:
```
import ts = require(""typescript"");

function makeFactorialFunction() {
  const functionName = ts.factory.createIdentifier(""factorial"");
  const paramName = ts.factory.createIdentifier(""n"");
  const parameter = ts.factory.createParameterDeclaration(
    /*decorators*/ undefined,
    /*modifiers*/ undefined,
    /*dotDotDotToken*/ undefined,
    paramName
  );

  const condition = ts.factory.createBinaryExpression(paramName, ts.SyntaxKind.LessThanEqualsToken, ts.factory.createNumericLiteral(1));
  const ifBody = ts.factory.createBlock([ts.factory.createReturnStatement(ts.factory.createNumericLiteral(1))], /*multiline*/ true);

  const decrementedArg = ts.factory.createBinaryExpression(paramName, ts.SyntaxKind.MinusToken, ts.factory.createNumericLiteral(1));
  const recurse = ts.factory.createBinaryExpression(paramName, ts.SyntaxKind.AsteriskToken, ts.factory.createCallExpression(functionName, /*typeArgs*/ undefined, [decrementedArg]));
  const statements = [ts.factory.createIfStatement(condition, ifBody), ts.factory.createReturnStatement(recurse)];

  return ts.factory.createFunctionDeclaration(
    /*decorators*/ undefined,
    /*modifiers*/ [ts.factory.createToken(ts.SyntaxKind.ExportKeyword)],
    /*asteriskToken*/ undefined,
    functionName,
    /*typeParameters*/ undefined,
    [parameter],
    /*returnType*/ ts.factory.createKeywordTypeNode(ts.SyntaxKind.NumberKeyword),
    ts.factory.createBlock(statements, /*multiline*/ true)
  );
}

const resultFile = ts.createSourceFile(""someFileName.ts"", """", ts.ScriptTarget.Latest, /*setParentNodes*/ false, ts.ScriptKind.TS);
const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });

const result = printer.printNode(ts.EmitHint.Unspecified, makeFactorialFunction(), resultFile);
console.log(result);
```

----------------------------------------

TITLE: Intl DisplayNames API
DESCRIPTION: Demonstrates the Intl.DisplayNames API for getting human-readable names for locales, regions, scripts, and languages. Includes examples of creating DisplayNames instances and using the 'of' method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Intl.DisplayNames(locales?: string | string[], options?: DisplayNamesOptions)
  Provides human-readable names for BCP 47 language tags.
  Parameters:
    locales: A string with a BCP 47 language tag, or an array of such tags.
    options: An object with properties like 'type' (e.g., 'region', 'language', 'script', 'currency') and 'style'.

  of(code: string): string | undefined
    Returns the display name for a given code.
    Parameters:
      code: The code (e.g., 'US', 'en', 'Latn') to look up.

Example Usage:
const regionNamesInEnglish = new Intl.DisplayNames(['en'], { type: 'region' });
console.log(regionNamesInEnglish.of('US')); // Expected: ""United States""

const regionNamesInTraditionalChinese = new Intl.DisplayNames(['zh-Hant'], { type: 'region' });
console.log(regionNamesInTraditionalChinese.of('US')); // Expected: ""美國""

// Example with type 'language'
console.log((new Intl.DisplayNames(undefined, {type: 'language'})).of('en-GB')); // Expected: ""British English""
```

----------------------------------------

TITLE: TypeScript WrappedDictionary Methods API
DESCRIPTION: Details the methods available for manipulating dictionaries (objects), providing functional programming paradigms for object iteration and transformation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_29

LANGUAGE: APIDOC
CODE:
```
WrappedDictionary<T> Methods:

each(iterator: Iterator_<T, void>, context?: any): void;
  - Iterates over the dictionary's values, executing an iterator for each.
forEach(iterator: Iterator_<T, void>, context?: any): void;
  - Alias for each().

map<U>(iterator: Iterator_<T, U>, context?: any): U[];
  - Creates a new array by mapping each value in the dictionary to the result of the iterator.
collect<U>(iterator: Iterator_<T, U>, context?: any): U[];
  - Alias for map().

reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
  - Reduces the dictionary's values to a single value, by iterating from left to right.
foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
  - Alias for reduce().
inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
  - Alias for reduce().

reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
  - Reduces the dictionary's values to a single value, by iterating from right to left.
foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): U;
  - Alias for reduceRight().

find(iterator: Iterator_<T, boolean>, context?: any): T;
  - Returns the first value in the dictionary that satisfies the truth test.
detect(iterator: Iterator_<T, boolean>, context?: any): T;
  - Alias for find().

filter(iterator: Iterator_<T, boolean>, context?: any): T[];
  - Creates a new dictionary with all values that satisfy the truth test.
select(iterator: Iterator_<T, boolean>, context?: any): T[];
  - Alias for filter().

where(properties: Object): T[];
  - Creates a new dictionary with all values that match the properties object.
findWhere(properties: Object): T;
  - Returns the first value in the dictionary that matches the properties object.

reject(iterator: Iterator_<T, boolean>, context?: any): T[];
  - Creates a new dictionary with all values that do not satisfy the truth test.

every(iterator?: Iterator_<T, boolean>, context?: any): boolean;
  - Checks if all values in the dictionary pass the truth test.
all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
  - Alias for every().

some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
  - Checks if any value in the dictionary passes the truth test.
any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
  - Alias for some().

contains(value: T): boolean;
  - Checks if the dictionary contains a specific value.
include(value: T): boolean;
  - Alias for contains().

invoke(methodName: string, ...args: any[]): any[];
  - Invokes a method named methodName on each value in the dictionary.

```

----------------------------------------

TITLE: Puppeteer API Definitions
DESCRIPTION: Provides the API documentation for the Puppeteer library, including its namespace, the Keyboard interface, and the connect function. This defines the structure and usage of these components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocReferenceGlobalTypeInCommonJs.errors.txt#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Puppeteer Namespace:
  export as namespace Puppeteer;

Keyboard Interface:
  interface Keyboard {
    key: string
  }

Connect Function:
  export function connect(name: string): void;
    - Connects to a browser instance.
    - Parameters:
      - name: The name or identifier for the connection.
```

----------------------------------------

TITLE: TypeScript WrappedArray Methods API
DESCRIPTION: Details the methods available for manipulating arrays, providing functional programming paradigms. These methods extend standard JavaScript Array functionality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_28

LANGUAGE: APIDOC
CODE:
```
WrappedArray<T> Methods:

all(iterator?: Iterator_<T, boolean>, context?: any): boolean;
  - Checks if all elements in the collection pass the truth test.

some(iterator?: Iterator_<T, boolean>, context?: any): boolean;
  - Checks if any element in the collection passes the truth test.

any(iterator?: Iterator_<T, boolean>, context?: any): boolean;
  - Alias for some().

contains(value: T): boolean;
  - Checks if the collection contains a specific value.

include(value: T): boolean;
  - Alias for contains().

invoke(methodName: string, ...args: any[]): any[];
  - Invokes a method named methodName on each element of the collection.

pluck(propertyName: string): any[];
  - Extracts the property named propertyName from each element in the collection.

max(iterator?: Iterator_<T, any>, context?: any): T;
  - Finds the maximum element in the collection, optionally using an iterator.

min(iterator?: Iterator_<T, any>, context?: any): T;
  - Finds the minimum element in the collection, optionally using an iterator.

sortBy(iterator: Iterator_<T, any>, context?: any): T[];
  - Sorts the collection by the results of running each element through an iterator.
sortBy(propertyName: string): T[];
  - Sorts the collection by the specified property name.

groupBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
  - Groups elements into a dictionary based on the result of an iterator.
groupBy(propertyName: string): Dictionary<T[]>;
  - Groups elements into a dictionary based on the specified property name.

countBy(iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
  - Counts elements in the collection by the result of an iterator.
countBy(propertyName: string): Dictionary<number>;
  - Counts elements in the collection by the specified property name.

shuffle(): T[];
  - Shuffles the elements in the collection.

toSArray(): T[];
  - Converts the collection to a plain JavaScript array.

size(): number;
  - Returns the size of the collection.

first(): T;
  - Returns the first element of the collection.
first(count: number): T[];
  - Returns the first 'count' elements of the collection.

head(): T;
  - Alias for first().
head(count: number): T[];
  - Alias for first(count).

take(): T;
  - Alias for first().
take(count: number): T[];
  - Alias for first(count).

initial(): T;
  - Returns all but the last element of the collection.
initial(count: number): T[];
  - Returns all but the last 'count' elements of the collection.

last(): T;
  - Returns the last element of the collection.
last(count: number): T[];
  - Returns the last 'count' elements of the collection.

rest(index?: number): T[];
  - Returns the elements of the collection from the specified index onwards.

compact(): T[];
  - Removes all falsy values from the collection.

flatten<U>(shallow?: boolean): U[];
  - Flattens the collection into a single level, optionally shallowly.

without(...values: T[]): T[];
  - Creates a new collection excluding all given values.

union(...arrays: T[][]): T[];
  - Creates a new collection with unique values from all provided arrays.

intersection(...arrays: T[][]): T[];
  - Creates a new collection with values common to all provided arrays.

difference(...others: T[][]): T[];
  - Creates a new collection with values in the first array but not in any of the others.

uniq(isSorted?: boolean): T[];
  - Creates a new collection with unique elements.
uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
  - Creates a new collection with unique elements, using an iterator for comparison.

unique(isSorted?: boolean): T[];
  - Alias for uniq().
unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
  - Alias for uniq(isSorted, iterator).

zip(...arrays: any[][]): any[][];
  - Zips together multiple collections into an array of arrays.

object(): any;
  - Creates an object from a list of key-value pairs.
object(values: any[]): any;
  - Creates an object from a list of keys and a list of values.

indexOf(value: T, isSorted?: boolean): number;
  - Returns the index at which a given value is found in the collection, or -1 if it is not present.

lastIndexOf(value: T, fromIndex?: number): number;
  - Returns the index at which a given value is found in the collection, starting from the end.

sortedIndex(obj: T, propertyName: string): number;
  - Uses a binary search to determine the index at which to insert an object into a sorted array.
sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): number;
  - Uses a binary search to determine the index at which to insert an object into a sorted array, using an iterator.

// Standard Array Methods:
concat(...items: T[]): T[];
  - Concatenates two or more arrays.
join(separator?: string): string;
  - Joins all elements of an array into a string.
pop(): T;
  - Removes the last element from an array and returns that element.
push(...items: T[]): number;
  - Adds one or more elements to the end of an array.
reverse(): T[];
  - Reverses the order of the elements in an array.
shift(): T;
  - Removes the first element from an array and returns that element.
slice(start: number, end?: number): T[];
  - Returns a shallow copy of a portion of an array into a new array object.
sort(compareFn?: (a: T, b: T) => number): T[];
  - Sorts the elements of an array in place.
splice(start: number): T[];
  - Removes elements from an array and/or adds new elements.
splice(start: number, deleteCount: number, ...items: T[]): T[];
  - Removes elements from an array and/or adds new elements.
unshift(...items: T[]): number;
  - Adds one or more elements to the beginning of an array.
```

----------------------------------------

TITLE: Compile and Run TypeScript Doc Generator
DESCRIPTION: This shell command sequence shows how to compile the TypeScript documentation generator using `tsc` and then execute it with `node`, passing a target TypeScript file as an argument. This is the command-line interface for using the script.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_14

LANGUAGE: shell
CODE:
```
tsc docGenerator.ts --m commonjs
node docGenerator.js test.ts
```

----------------------------------------

TITLE: TypeScript AST Traversal Linter Example
DESCRIPTION: This example demonstrates traversing a TypeScript Abstract Syntax Tree (AST) using the `forEachChild` function to implement a minimal linter. It checks for curly braces around loop/if/else bodies and enforces strict equality operators (`===`/`!==`). It requires the `typescript` package and `fs` for file reading.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_7

LANGUAGE: typescript
CODE:
```
import { readFileSync } from ""fs"";
import * as ts from ""typescript"";

export function delint(sourceFile: ts.SourceFile) {
  delintNode(sourceFile);

  function delintNode(node: ts.Node) {
    switch (node.kind) {
      case ts.SyntaxKind.ForStatement:
      case ts.SyntaxKind.ForInStatement:
      case ts.SyntaxKind.WhileStatement:
      case ts.SyntaxKind.DoStatement:
        if ((node as ts.IterationStatement).statement.kind !== ts.SyntaxKind.Block) {
          report(
            node,
            'A looping statement\'s contents should be wrapped in a block body.'
          );
        }
        break;

      case ts.SyntaxKind.IfStatement:
        const ifStatement = node as ts.IfStatement;
        if (ifStatement.thenStatement.kind !== ts.SyntaxKind.Block) {
          report(ifStatement.thenStatement, 'An if statement\'s contents should be wrapped in a block body.');
        }
        if (
          ifStatement.elseStatement &&
          ifStatement.elseStatement.kind !== ts.SyntaxKind.Block &&
          ifStatement.elseStatement.kind !== ts.SyntaxKind.IfStatement
        ) {
          report(
            ifStatement.elseStatement,
            'An else statement\'s contents should be wrapped in a block body.'
          );
        }
        break;

      case ts.SyntaxKind.BinaryExpression:
        const op = (node as ts.BinaryExpression).operatorToken.kind;
        if (op === ts.SyntaxKind.EqualsEqualsToken || op === ts.SyntaxKind.ExclamationEqualsToken) {
          report(node, 'Use \'===\' and \'!==\'.');
        }
        break;
    }

    ts.forEachChild(node, delintNode);
  }

  function report(node: ts.Node, message: string) {
    const { line, character } = sourceFile.getLineAndCharacterOfPosition(node.getStart());
    console.log(`${sourceFile.fileName} (${line + 1},${character + 1}): ${message}`);
  }
}

const fileNames = process.argv.slice(2);
fileNames.forEach(fileName => {
  // Parse a file
  const sourceFile = ts.createSourceFile(
    fileName,
    readFileSync(fileName).toString(),
    ts.ScriptTarget.ES2015,
    /*setParentNodes */ true
  );

  // delint it
  delint(sourceFile);
});

```

----------------------------------------

TITLE: Compile TypeScript String to JavaScript
DESCRIPTION: Demonstrates how to create a TypeScript Program and compile code using the Compiler API. It utilizes `createCompilerHost` for default file system interactions and `createTypeChecker` to retrieve diagnostics.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API-(TypeScript-1.4).md#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path=""typings/node/node.d.ts"" />
/// <reference path=""typings/typescript/typescript.d.ts"" />

import ts = require(""typescript"");

export function compile(filenames: string[], options: ts.CompilerOptions): void {
    var host = ts.createCompilerHost(options);
    var program = ts.createProgram(filenames, options, host);
    var checker = ts.createTypeChecker(program, /*produceDiagnostics*/ true);
    var result = checker.emitFiles();

    var allDiagnostics = program.getDiagnostics()
        .concat(checker.getDiagnostics())
        .concat(result.diagnostics);

    allDiagnostics.forEach(diagnostic => {
        var lineChar = diagnostic.file.getLineAndCharacterFromPosition(diagnostic.start);
        console.log(`${diagnostic.file.filename} (${lineChar.line},${lineChar.character}): ${diagnostic.messageText}`);
    });

    console.log(`Process exiting with code '${result.emitResultStatus}'.`);
    process.exit(result.emitResultStatus);
}

compile(process.argv.slice(2), { noEmitOnError: true, noImplicitAny: true,
                                 target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS });
```

----------------------------------------

TITLE: API Call Simulation with Generic Functions
DESCRIPTION: Shows how to create a generic `callApi` function that wraps other functions (simulating API calls) using variadic tuples. It demonstrates passing functions like `getUser` and `getOrgUser` to this generic wrapper.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variadicTuples1.errors.txt#_snippet_23

LANGUAGE: typescript
CODE:
```
// Repro from #39607

declare function getUser(id: string, options?: { x?: string }): string;

declare function getOrgUser(id: string, orgId: number, options?: { y?: number, z?: boolean }): void;

function callApi<T extends unknown[] = [], U = void>(method: (...args: [...T, object]) => U) {
    return (...args: [...T]) => method(...args, {});
}

callApi(getUser);
callApi(getOrgUser);
```

----------------------------------------

TITLE: Incremental Build with TypeScript Language Service
DESCRIPTION: This snippet demonstrates creating a TypeScript Language Service to perform incremental builds. It sets up a LanguageServiceHost to manage file versions and snapshots, watches files for changes using Node.js's fs module, and emits only the updated output files, logging any errors encountered during the process.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_9

LANGUAGE: typescript
CODE:
```
import * as fs from ""fs"";
import * as ts from ""typescript"";

function watch(rootFileNames: string[], options: ts.CompilerOptions) {
  const files: ts.MapLike<{ version: number }> = {};

  // initialize the list of files
  rootFileNames.forEach(fileName => {
    files[fileName] = { version: 0 };
  });

  // Create the language service host to allow the LS to communicate with the host
  const servicesHost: ts.LanguageServiceHost = {
    getScriptFileNames: () => rootFileNames,
    getScriptVersion: fileName =>
      files[fileName] && files[fileName].version.toString(),
    getScriptSnapshot: fileName => {
      if (!fs.existsSync(fileName)) {
        return undefined;
      }

      return ts.ScriptSnapshot.fromString(fs.readFileSync(fileName).toString());
    },
    getCurrentDirectory: () => process.cwd(),
    getCompilationSettings: () => options,
    getDefaultLibFileName: options => ts.getDefaultLibFilePath(options),
    fileExists: ts.sys.fileExists,
    readFile: ts.sys.readFile,
    readDirectory: ts.sys.readDirectory,
    directoryExists: ts.sys.directoryExists,
    getDirectories: ts.sys.getDirectories,
  };

  // Create the language service files
  const services = ts.createLanguageService(servicesHost, ts.createDocumentRegistry());

  // Now let's watch the files
  rootFileNames.forEach(fileName => {
    // First time around, emit all files
    emitFile(fileName);

    // Add a watch on the file to handle next change
    fs.watchFile(fileName, { persistent: true, interval: 250 }, (curr, prev) => {
      // Check timestamp
      if (+curr.mtime <= +prev.mtime) {
        return;
      }

      // Update the version to signal a change in the file
      files[fileName].version++;

      // write the changes to disk
      emitFile(fileName);
    });
  });

  function emitFile(fileName: string) {
    let output = services.getEmitOutput(fileName);

    if (!output.emitSkipped) {
      console.log(`Emitting ${fileName}`);
    } else {
      console.log(`Emitting ${fileName} failed`);
      logErrors(fileName);
    }

    output.outputFiles.forEach(o => {
      fs.writeFileSync(o.name, o.text, ""utf8"");
    });
  }

  function logErrors(fileName: string) {
    let allDiagnostics = services
      .getCompilerOptionsDiagnostics()
      .concat(services.getSyntacticDiagnostics(fileName))
      .concat(services.getSemanticDiagnostics(fileName));

    allDiagnostics.forEach(diagnostic => {
      let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, ""\n"");
      if (diagnostic.file) {
        let { line, character } = diagnostic.file.getLineAndCharacterOfPosition(
          diagnostic.start! 
        );
        console.log(`  Error ${diagnostic.file.fileName} (${line + 1},${character +1}): ${message}`);
      } else {
        console.log(`  Error: ${message}`);
      }
    });
  }
}

// Initialize files constituting the program as all .ts files in the current directory
const currentDirectoryFiles = fs
  .readdirSync(process.cwd())
  .filter(fileName => fileName.length >= 3 && fileName.substr(fileName.length - 3, 3) === "".ts"");

// Start the watcher
watch(currentDirectoryFiles, { module: ts.ModuleKind.CommonJS });

```

----------------------------------------

TITLE: Intl Formatting: DateTimeFormat and NumberFormat
DESCRIPTION: Demonstrates locale-aware formatting of dates and numbers using Intl.DateTimeFormat and Intl.NumberFormat. Shows how to create formatters for specific locales and use them to format date and count variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Intl.DateTimeFormat(locales?: string | string[], options?: DateTimeFormatOptions)
  Formats dates according to locale-specific conventions.
  Parameters:
    locales: A string with a BCP 47 language tag, or an array of such tags.
    options: An object with properties to control formatting.

Intl.NumberFormat(locales?: string | string[], options?: NumberFormatOptions)
  Formats numbers according to locale-specific conventions.
  Parameters:
    locales: A string with a BCP 47 language tag, or an array of such tags.
    options: An object with properties to control formatting.

Example Usage:
const count = 26254.39;
const date = new Date(""2012-05-24"");

function log(locale: string) {
  console.log(
    `${new Intl.DateTimeFormat(locale).format(date)} ${new Intl.NumberFormat(locale).format(count)}`
  );
}

log(""en-US""); // Expected: 5/24/2012 26,254.39
log(""de-DE""); // Expected: 24.5.2012 26.254,39
```

----------------------------------------

TITLE: Intl RelativeTimeFormat
DESCRIPTION: Provides examples for using Intl.RelativeTimeFormat to format relative time differences, such as 'in 3 quarters' or '1 day ago'. Demonstrates different styles and numeric options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Intl.RelativeTimeFormat(locales?: string | string[], options?: RelativeTimeFormatOptions)
  Formats relative time differences.
  Parameters:
    locales: A string with a BCP 47 language tag, or an array of such tags.
    options: An object with properties like 'style' (e.g., 'narrow', 'short', 'long') and 'numeric' (e.g., 'always', 'auto').

  format(value: number, unit: RelativeTimeUnit)
    Formats the given value and unit.
    Parameters:
      value: The numeric value representing the time difference.
      unit: The unit of time (e.g., 'year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second').

Example Usage:
const rtf1 = new Intl.RelativeTimeFormat('en', { style: 'narrow' });
console.log(rtf1.format(3, 'quarter')); // Expected: ""in 3 qtrs.""
console.log(rtf1.format(-1, 'day'));     // Expected: ""1 day ago""

const rtf2 = new Intl.RelativeTimeFormat('es', { numeric: 'auto' });
console.log(rtf2.format(2, 'day'));      // Expected: ""pasado mañana""
```

----------------------------------------

TITLE: Minimal TypeScript Compiler Program
DESCRIPTION: A basic TypeScript compiler implementation that takes a list of file names and compiler options, creates a Program, emits JavaScript, and reports diagnostics. It demonstrates the core `ts.createProgram` and `program.emit` workflow.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_2

LANGUAGE: typescript
CODE:
```
import * as ts from ""typescript"";

function compile(fileNames: string[], options: ts.CompilerOptions): void {
  let program = ts.createProgram(fileNames, options);
  let emitResult = program.emit();

  let allDiagnostics = ts
    .getPreEmitDiagnostics(program)
    .concat(emitResult.diagnostics);

  allDiagnostics.forEach(diagnostic => {
    if (diagnostic.file) {
      let { line, character } = ts.getLineAndCharacterOfPosition(diagnostic.file, diagnostic.start!); 
      let message = ts.flattenDiagnosticMessageText(diagnostic.messageText, ""\n"");
      console.log(`${diagnostic.file.fileName} (${line + 1},${character + 1}): ${message}`);
    } else {
      console.log(ts.flattenDiagnosticMessageText(diagnostic.messageText, ""\n""));
    }
  });

  let exitCode = emitResult.emitSkipped ? 1 : 0;
  console.log(`Process exiting with code '${exitCode}'.`);
  process.exit(exitCode);
}

compile(process.argv.slice(2), {
  noEmitOnError: true,
  noImplicitAny: true,
  target: ts.ScriptTarget.ES5,
  module: ts.ModuleKind.CommonJS
});
```

----------------------------------------

TITLE: Generate TypeScript Class Documentation with Type Checker
DESCRIPTION: This TypeScript code demonstrates how to use the `typescript` package to walk an Abstract Syntax Tree (AST), leverage the type checker for symbol and type information, and extract JSDoc comments. It serializes exported classes, their constructors, and parameters into a JSON file.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_13

LANGUAGE: typescript
CODE:
```
import * as ts from ""typescript"";
import * as fs from ""fs"";

interface DocEntry {
  name?: string;
  fileName?: string;
  documentation?: string;
  type?: string;
  constructors?: DocEntry[];
  parameters?: DocEntry[];
  returnType?: string;
}

/** Generate documentation for all classes in a set of .ts files */
function generateDocumentation(
  fileNames: string[],
  options: ts.CompilerOptions
): void {
  // Build a program using the set of root file names in fileNames
  let program = ts.createProgram(fileNames, options);

  // Get the checker, we will use it to find more about classes
  let checker = program.getTypeChecker();
  let output: DocEntry[] = [];

  // Visit every sourceFile in the program
  for (const sourceFile of program.getSourceFiles()) {
    if (!sourceFile.isDeclarationFile) {
      // Walk the tree to search for classes
      ts.forEachChild(sourceFile, visit);
    }
  }

  // print out the doc
  fs.writeFileSync(""classes.json"", JSON.stringify(output, undefined, 4));

  return;

  /** visit nodes finding exported classes */
  function visit(node: ts.Node) {
    // Only consider exported nodes
    if (!isNodeExported(node)) {
      return;
    }

    if (ts.isClassDeclaration(node) && node.name) {
      // This is a top level class, get its symbol
      let symbol = checker.getSymbolAtLocation(node.name);
      if (symbol) {
        output.push(serializeClass(symbol));
      }
      // No need to walk any further, class expressions/inner declarations
      // cannot be exported
    } else if (ts.isModuleDeclaration(node)) {
      // This is a namespace, visit its children
      ts.forEachChild(node, visit);
    }
  }

  /** Serialize a symbol into a json object */
  function serializeSymbol(symbol: ts.Symbol): DocEntry {
    return {
      name: symbol.getName(),
      documentation: ts.displayPartsToString(symbol.getDocumentationComment(checker)),
      type: checker.typeToString(
        checker.getTypeOfSymbolAtLocation(symbol, symbol.valueDeclaration!)
      )
    };
  }

  /** Serialize a class symbol information */
  function serializeClass(symbol: ts.Symbol) {
    let details = serializeSymbol(symbol);

    // Get the construct signatures
    let constructorType = checker.getTypeOfSymbolAtLocation(
      symbol,
      symbol.valueDeclaration!
    );
    details.constructors = constructorType
      .getConstructSignatures()
      .map(serializeSignature);
    return details;
  }

  /** Serialize a signature (call or construct) */
  function serializeSignature(signature: ts.Signature) {
    return {
      parameters: signature.parameters.map(serializeSymbol),
      returnType: checker.typeToString(signature.getReturnType()),
      documentation: ts.displayPartsToString(signature.getDocumentationComment(checker))
    };
  }

  /** True if this is visible outside this file, false otherwise */
  function isNodeExported(node: ts.Node): boolean {
    return (
      (ts.getCombinedModifierFlags(node as ts.Declaration) & ts.ModifierFlags.Export) !== 0 ||
      (!!node.parent && node.parent.kind === ts.SyntaxKind.SourceFile)
    );
  }
}

generateDocumentation(process.argv.slice(2), {
  target: ts.ScriptTarget.ES5,
  module: ts.ModuleKind.CommonJS
});

```

----------------------------------------

TITLE: TypeScript: Incremental Build Watcher
DESCRIPTION: This TypeScript code snippet demonstrates how to create an incremental build system. It sets up a file watcher using Node.js's `fs` module and the TypeScript Language Service to detect file changes, update file versions, and re-emit compiled outputs. The example includes error handling for compilation diagnostics.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API-(TypeScript-1.4).md#_snippet_4

LANGUAGE: TypeScript
CODE:
```
/// <reference path=""typings/node/node.d.ts"" />
/// <reference path=""typings/typescript/typescript.d.ts"" />

import fs = require(""fs"");
import ts = require(""typescript"");
import path = require(""path"");


function watch(filenames: string[], options: ts.CompilerOptions) {
    var files: ts.Map<{ version: number; text: string; }> = {};
    
    // Add the default library file
    filenames.unshift(path.join(path.dirname(require.resolve('typescript')), 'lib.d.ts'));

    // initialize the list of files
    filenames.forEach(filename => {
        files[filename] = { version: 0, text: fs.readFileSync(filename).toString() };
    });

    // Create the language service host to allow the LS to communicate with the host
    var servicesHost: ts.LanguageServiceHost = {
        getScriptFileNames: () => filenames,
        getScriptVersion: (filename) => files[filename] && files[filename].version.toString(),
        getScriptSnapshot: (filename) => {
            var file = files[filename];
            return {
                getText: (start, end) => file.text.substring(start, end),
                getLength: () => file.text.length,
                getLineStartPositions: () => [],
                getChangeRange: (oldSnapshot) => undefined
            };
        },
        getCurrentDirectory: () => process.cwd(),
        getScriptIsOpen: () => true,
        getCompilationSettings: () => options,
        getDefaultLibFilename:(options) => 'lib.d.ts',
        log: (message) => console.log(message)
    };

    // Create the language service files
    var services = ts.createLanguageService(servicesHost, ts.createDocumentRegistry())

    // Now let's watch the files
    filenames.forEach(filename => {
        // First time around, emit all files
        emitFile(filename);

        // Add a watch on the file to handle next change
        fs.watchFile(filename, 
            { persistent: true, interval: 250 }, 
            (curr, prev) => {
                // Check timestamp
                if (+curr.mtime <= +prev.mtime) {
                    return;
                }

                var file = files[filename];

                // Update the version to signal a change in the file
                file.version++;

                // Clear the text to force a new read
                file.text = fs.readFileSync(filename).toString();

                // write the changes to disk
                emitFile(filename);
            });
    });


    function emitFile(filename: string) {
        var output = services.getEmitOutput(filename);

        if (output.emitOutputStatus === ts.EmitReturnStatus.Succeeded) {
            console.log(`Emitting ${filename}`);
        }
        else {
            console.log(`Emitting ${filename} failed`);
            var allDiagnostics = services.getCompilerOptionsDiagnostics()
                .concat(services.getSyntacticDiagnostics(filename))
                .concat(services.getSemanticDiagnostics(filename));

            allDiagnostics.forEach(diagnostic => {
                var lineChar = diagnostic.file.getLineAndCharacterFromPosition(diagnostic.start);
                console.log(`  ${diagnostic.file && diagnostic.file.filename} (${lineChar.line},${lineChar.character}): ${diagnostic.messageText}`);
            });
        }

        output.outputFiles.forEach(o => {
            fs.writeFileSync(o.name, o.text, ""utf8"");
        });
    }
}

// Initialize files constituting the program as all .ts files in the current directory
var currentDirectoryFiles = fs.readdirSync(process.cwd()).
    filter(filename=> filename.length >= 3 && filename.substr(filename.length - 3, 3) === "".ts"");
    //map(filename => path.join(process.cwd(), filename));

// Start the watcher
watch(currentDirectoryFiles, { target: ts.ScriptTarget.ES5, module: ts.ModuleKind.CommonJS });

```

----------------------------------------

TITLE: TypeScript: Accessing Bun File API
DESCRIPTION: This TypeScript code snippet demonstrates accessing the `Bun.file()` API to create a file object. It requires type definitions for Bun to resolve the 'Bun' global object. The provided example shows the usage that triggers a TypeScript compilation error if types are not installed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typingsSuggestionBun2.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
const file = Bun.file(""/a.ts"");

```

----------------------------------------

TITLE: Run a Node.js Container
DESCRIPTION: Starts an interactive, pseudo-TTY session in a new Node.js container. The container is automatically removed upon exit. This is a basic command to get a running Node.js environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_0

LANGUAGE: docker
CODE:
```
docker run -it --rm node
```

----------------------------------------

TITLE: TypeScript Event Emitter API
DESCRIPTION: Defines an event emitter pattern for a Client class, specifying event types and listener signatures. Includes an example of attaching event listeners for different events.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/dependentDestructuredVariables.errors.txt#_snippet_16

LANGUAGE: APIDOC
CODE:
```
interface ClientEvents {
    warn: [message: string];
    shardDisconnect: [closeEvent: CloseEvent, shardId: number];
}
  
declare class Client {
    public on<K extends keyof ClientEvents>(event: K, listener: (...args: ClientEvents[K]) => void): void;
}

// Usage Example:
const bot = new Client();
bot.on(""shardDisconnect"", (event, shard) => console.log(`Shard ${shard} disconnected (${event.code},${event.wasClean}): ${event.reason}`));
bot.on(""shardDisconnect"", event => console.log(`${event.code} ${event.wasClean} ${event.reason}`));

// Note: CloseEvent is a standard browser API, assumed to be available.
// Example CloseEvent structure (for context):
// interface CloseEvent {
//   code: number;
//   wasClean: boolean;
//   reason: string;
//   // ... other properties
// }
```

----------------------------------------

TITLE: API Wrapper Class (TypeScript)
DESCRIPTION: Provides a basic API class that utilizes the `HttpClient` for making requests. The `Api` class is designed to wrap HTTP client functionality, allowing for typed request methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitPrivatePromiseLikeInterface.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
import { HttpClient } from ""./http-client"";

export class Api<SecurityDataType = unknown> {
    constructor(private http: HttpClient<SecurityDataType>) { }

    abc1 = () => this.http.request();
    abc2 = () => this.http.request();
    abc3 = () => this.http.request();
}
```

----------------------------------------

TITLE: Install and Link TypeScript Globally
DESCRIPTION: Installs the TypeScript compiler globally using npm and links it to the local project environment. This is a prerequisite for using TypeScript from the command line or programmatically.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install -g typescript
npm link typescript
```

----------------------------------------

TITLE: TypeScript: Contribution Feedback Guidelines
DESCRIPTION: Guidelines for providing constructive and actionable feedback on TypeScript issues, focusing on code examples, library comparisons, and explaining workarounds. It also advises against time-based comments.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/FAQ.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
ContributionFeedback:
  Purpose: To provide actionable insights for feature development and issue resolution.

  ConstructiveFeedback:
    Requirements:
      - Code examples demonstrating feature usage or problem reproduction.
      - Examples of third-party libraries using similar patterns.
      - Description of where existing workarounds fall short.
    Avoid:
      - Generic statements like ""I need this feature"" or ""I need this"".
      - Comments solely noting the age of an issue or feature request.

  UnconstructiveComments:
    Description:
      - Comments noting how long an suggestion has been open, what year it is, etc.
      - Comments that do not add new information or context.
    Impact:
      - Do not clarify priority relative to other suggestions.
      - Make it harder to find useful content in threads.
      - Add noise to search results.
      - Increase the number of times users must click ""Show More"".

  IssueClaiming:
    Milestone: ""Backlog""
      - Indicates that a contributor can work on the issue.
    Label: ""Help Wanted""
      - May indicate an issue is open for contribution, but the ""Backlog"" milestone is authoritative.
    OtherMilestones:
      - PRs may not be reviewed or accepted if an issue is not in the ""Backlog"" milestone.
```

----------------------------------------

TITLE: TypeScript Array Utility Functions
DESCRIPTION: Provides a comprehensive set of functions for manipulating arrays, including getting sizes, extracting elements, filtering, transforming, and combining arrays. Many functions support generic types and overloads for different use cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_45

LANGUAGE: APIDOC
CODE:
```
Array Utilities:

size<T>(list: T[]): number;
size<T>(list: Dictionary<T>): number;
  - Returns the number of elements in an array or dictionary.

first<T>(list: T[]): T;
first<T>(list: T[], count: number): T[];
head<T>(list: T[]): T;
head<T>(list: T[], count: number): T[];
take<T>(list: T[]): T;
take<T>(list: T[], count: number): T[];
  - Retrieves the first element or the first 'count' elements from an array.
  - 'head' and 'take' are aliases for 'first'.

initial<T>(list: T[]): T;
initial<T>(list: T[], count: number): T[];
  - Retrieves all elements except the last one, or the first 'count' elements from the end.

last<T>(list: T[]): T;
last<T>(list: T[], count: number): T[];
  - Retrieves the last element or the last 'count' elements from an array.

rest<T>(list: T[], index?: number): T[];
  - Retrieves all elements from a specified index onwards.

compact<T>(list: T[]): T[];
  - Removes all falsy values from an array.

flatten<T>(list: T[][]): T[];
flatten<T>(array: any[], shallow?: boolean): T[];
  - Flattens a nested array into a single-level array.
  - Supports shallow flattening if 'shallow' is true.

without<T>(list: T[], ...values: T[]): T[];
  - Creates an array excluding all given values.

union<T>(...arrays: T[][]): T[];
  - Creates an array of unique values, in order, from all given arrays.

intersection<T>(...arrays: T[][]): T[];
  - Creates an array of unique values that are included in all given arrays.

difference<T>(list: T[], ...others: T[][]): T[];
  - Creates an array of values not included in any of the other given arrays.

uniq<T>(list: T[], isSorted?: boolean): T[];
uniq<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
unique<T>(list: T[], isSorted?: boolean): T[];
unique<T, U>(list: T[], isSorted: boolean, iterator: Iterator_<T, U>, context?: any): U[];
  - Creates a duplicate-free version of an array, using strict equality for comparisons.
  - Can optionally use a custom iterator for comparison.
  - 'unique' is an alias for 'uniq'.

zip<T0, T1>(a0: T0[], a1: T1[]): Tuple2<T0, T1>[];
zip<T0, T1, T2>(a0: T0[], a1: T1[], a2: T2[]): Tuple3<T0, T1, T2>[];
zip<T0, T1, T2, T3>(a0: T0[], a1: T1[], a2: T2[], a3: T3[]): Tuple4<T0, T1, T2, T3>[];
zip(...arrays: any[][]): any[][];
  - Zips together arrays into an array of arrays, where the first inner array contains the first elements of all input arrays, the second inner array contains the second elements, and so on.

object(list: any[][]): any;
object(keys: string[], values: any[]): any;
  - Creates an object from a list of key-value pairs or from separate key and value arrays.

indexOf<T>(list: T[], value: T, isSorted?: boolean): number;
  - Gets the index at which the first occurrence of a value is found in an array.
  - Can be optimized if the array is sorted.

lastIndexOf<T>(list: T[], value: T, fromIndex?: number): number;
  - Gets the index at which the last occurrence of a value is found in an array.

sortedIndex<T>(list: T[], obj: T, propertyName: string): number;
sortedIndex<T>(list: T[], obj: T, iterator?: Iterator_<T, any>, context?: any): number;
  - Uses a binary search to determine the index at which a value should be inserted into an array in order to maintain its sort order.

range(stop: number): number[];
range(start: number, stop: number, step?: number): number[];
  - Creates an array of numbers within a specified range.
  - Supports start, stop, and optional step values.
```

LANGUAGE: APIDOC
CODE:
```
Object Utilities:

keys(object: any): string[];
  - Gets the own enumerable property names of an object.

values(object: any): any[];
  - Gets the own enumerable property values of an object.

pairs(object: any): any[][];
  - Creates an array of an object's own enumerable string keyed property [key, value] pairs.

invert(object: any): any;
  - Creates an object composed of the own enumerable property keyed by a mapped value.

functions(object: any): string[];
methods(object: any): string[];
  - Gets the names of all direct properties of an object that are functions.
  - 'methods' is an alias for 'functions'.

extend<T>(destination: T, ...sources: any[]): T;
  - Copies own enumerable properties from one or more source objects to a destination object.

pick<T>(object: T, ...keys: string[]): T;
  - Creates an object with own enumerable string keyed properties of object that are in the specified keys.

omit<T>(object: T, ...keys: string[]): T;
  - Creates an object with own enumerable string keyed properties of object that are not in the specified keys.

defaults<T>(object: T, ...defaults: any[]): T;
  - Fills 'object' with default values. Properties that are already set on 'object' are not overwritten.

clone<T>(object: T): T;
  - Creates a shallow clone of an object.

tap<T>(object: T, interceptor: (object: T) => void): T;
  - Invokes 'interceptor' with the 'object' and returns 'object' for chaining.

has(object: any, key: string): boolean;
  - Checks if 'key' is a direct property of 'object'.
```

LANGUAGE: APIDOC
CODE:
```
Comparison Utilities:

isEqual<T>(object: T, other: T): boolean;
  - Performs a deep comparison between two values to determine if they are equivalent.

isEmpty(object: any): boolean;
  - Checks if 'value' is an empty object, collection, map, or set.

isElement(object: any): boolean;
  - Checks if 'value' is a DOM element.

isArray(object: any): boolean;
  - Checks if 'value' is classified as an Array.

isObject(value: any): boolean;
  - Checks if 'value' is the language type of Object.

isArguments(object: any): boolean;
  - Checks if 'value' is classified as an Arguments object.

isFunction(object: any): boolean;
  - Checks if 'value' is classified as a Function.

isString(object: any): boolean;
  - Checks if 'value' is classified as a String primitive or object.

isNumber(object: any): boolean;
  - Checks if 'value' is classified as a Number primitive or object.

isFinite(object: any): boolean;
  - Checks if 'value' is finite.

isBoolean(object: any): boolean;
  - Checks if 'value' is classified as a boolean primitive or object.

isDate(object: any): boolean;
  - Checks if 'value' is classified as a Date object.

isRegExp(object: any): boolean;
  - Checks if 'value' is classified as a RegExp literal or constructor.

isNaN(object: any): boolean;
  - Checks if 'value' is `NaN`.

isNull(object: any): boolean;
  - Checks if 'value' is `null`.

isUndefined(value: any): boolean;
  - Checks if 'value' is `undefined`.
```

LANGUAGE: APIDOC
CODE:
```
Function Utilities:

bind<T extends Function>(func: T, object: any): T;
bind(func: Function, object: any, ...args: any[]): Function;
  - Creates a new function that, when called, has its `this` binding set to `object`.
  - Supports pre-filled arguments.

bindAll<T>(object: T, ...methodNames: string[]): T;
  - Binds methods of an object to the object itself, overwriting the original methods.

partial(func: Function, ...args: any[]): Function;
  - Creates a function that invokes `func` with `partial` applied to the beginning of its arguments.

memoize<T extends Function>(func: T, hashFunction?: Function): T;
  - Creates a function that memoizes the result of `func`. If `hashFunction` is provided, it's used to determine the cache key for storing the result.

delay(func: Function, wait: number, ...args: any[]): number;
  - Invokes `func` after `wait` milliseconds. Any additional arguments are provided to `func` when it is invoked.

defer(func: Function, ...args: any[]): number;
  - Defers invoking the `func` until the current run loop is cleared.

throttle<T extends Function>(func: T, wait: number): T;
  - Creates and returns a new throttled function that only invokes `func` at most once per every `wait` milliseconds.

debounce<T extends Function>(func: T, wait: number, immediate?: boolean): T;
  - Creates and returns a new debounced function that delays invoking `func` until after `wait` milliseconds have elapsed since the last time the debounced function was invoked.
  - If `immediate` is true, `func` is invoked immediately on the first call.

once<T extends Function>(func: T): T;
  - Creates a function that is restricted to invoking `func` once. Repeat calls to the function return the value of the first invocation.

after<T extends Function>(count: number, func: T): T;
  - Creates a function that invokes `func` only after being called `count` times.

wrap<T extends Function>(func: T, wrapper: (func: T, ...args: any[]) => any): T;
  - Creates a function that is a functional composition of `func` and `wrapper`.

compose(...funcs: Function[]): Function;
  - Creates a function that is the composition of the provided functions, where each successive invocation is supplied the return value of the previous invocation.
```

LANGUAGE: APIDOC
CODE:
```
Miscellaneous Utilities:

noConflict(): Static;
  - Releases the global variable, returning the library's root namespace.

identity<T>(value: T): T;
  - Returns the value itself.

times<U>(n: number, iterator: Iterator_<number, U>, context?: any): U[];
  - Invokes `iterator` `n` times, creating a list of the results.

random(max: number): number;
random(min: number, max: number): number;
  - Creates a random number between `min` and `max` (inclusive).

mixin(object: any): void;
  - Adds all own enumerable properties of `object` to the prototype of the library's objects.
```

----------------------------------------

TITLE: Intl.DisplayNames Constructor Error Cases
DESCRIPTION: Illustrates common errors when constructing Intl.DisplayNames objects without required arguments or with incorrect types, highlighting the need for valid locale and options.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#_snippet_5

LANGUAGE: APIDOC
CODE:
```
new Intl.DisplayNames()
  // Error: Expected 2 arguments, but got 0.
  // Related: lib.es2020.intl.d.ts:--:--: An argument for 'locales' was not provided.

new Intl.DisplayNames('en')
  // Error: Expected 2 arguments, but got 1.
  // Related: lib.es2020.intl.d.ts:--:--: An argument for 'options' was not provided.

new Intl.DisplayNames('en', {})
  // Error: Argument of type '{}' is not assignable to parameter of type 'DisplayNamesOptions'.
  // Error: Property 'type' is missing in type '{}' but required in type 'DisplayNamesOptions'.
  // Related: lib.es2020.intl.d.ts:--:--: 'type' is declared here.
```

----------------------------------------

TITLE: Custom CompilerHost for Module Resolution
DESCRIPTION: Demonstrates creating a custom TypeScript CompilerHost to override the default module resolution behavior. It includes a fallback mechanism for resolving modules and shows how to integrate this custom host into the compilation process.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_10

LANGUAGE: typescript
CODE:
```
import * as ts from ""typescript"";
import * as path from ""path"";

function createCompilerHost(options: ts.CompilerOptions, moduleSearchLocations: string[]): ts.CompilerHost {
  return {
    getSourceFile,
    getDefaultLibFileName: () => ""lib.d.ts"",
    writeFile: (fileName, content) => ts.sys.writeFile(fileName, content),
    getCurrentDirectory: () => ts.sys.getCurrentDirectory(),
    getDirectories: path => ts.sys.getDirectories(path),
    getCanonicalFileName: fileName =>
      ts.sys.useCaseSensitiveFileNames ? fileName : fileName.toLowerCase(),
    getNewLine: () => ts.sys.newLine,
    useCaseSensitiveFileNames: () => ts.sys.useCaseSensitiveFileNames,
    fileExists,
    readFile,
    resolveModuleNames
  };

  function fileExists(fileName: string): boolean {
    return ts.sys.fileExists(fileName);
  }

  function readFile(fileName: string): string | undefined {
    return ts.sys.readFile(fileName);
  }

  function getSourceFile(fileName: string, languageVersion: ts.ScriptTarget, onError?: (message: string) => void) {
    const sourceText = ts.sys.readFile(fileName);
    return sourceText !== undefined
      ? ts.createSourceFile(fileName, sourceText, languageVersion)
      : undefined;
  }

  function resolveModuleNames(
    moduleNames: string[],
    containingFile: string
  ): ts.ResolvedModule[] {
    const resolvedModules: ts.ResolvedModule[] = [];
    for (const moduleName of moduleNames) {
      // try to use standard resolution
      let result = ts.resolveModuleName(moduleName, containingFile, options, {
        fileExists,
        readFile
      });
      if (result.resolvedModule) {
        resolvedModules.push(result.resolvedModule);
      } else {
        // check fallback locations, for simplicity assume that module at location
        // should be represented by '.d.ts' file
        for (const location of moduleSearchLocations) {
          const modulePath = path.join(location, moduleName + "".d.ts"");
          if (fileExists(modulePath)) {
            resolvedModules.push({ resolvedFileName: modulePath });
          }
        }
      }
    }
    return resolvedModules;
  }
}

function compile(sourceFiles: string[], moduleSearchLocations: string[]): void {
  const options: ts.CompilerOptions = {
    module: ts.ModuleKind.AMD,
    target: ts.ScriptTarget.ES5
  };
  const host = createCompilerHost(options, moduleSearchLocations);
  const program = ts.createProgram(sourceFiles, options, host);

  /// do something with program...
}

```

----------------------------------------

TITLE: Intl.DisplayNames.supportedLocalesOf
DESCRIPTION: Shows how to use the static method Intl.DisplayNames.supportedLocalesOf to find which locales from a given list are supported by the implementation for a specific DisplayNames configuration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/es2020IntlAPIs.errors.txt#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Intl.DisplayNames.supportedLocalesOf(locales?: string[] | Intl.Locale[], options?: Intl.DisplayNamesOptions): string[]
  Returns an array of strings representing the locales from the provided list that are supported.
  Parameters:
    locales: An array of locale identifiers or Intl.Locale objects.
    options: An object with properties to filter supported locales (e.g., 'localeMatcher').

Example Usage:
const locales1 = ['ban', 'id-u-co-pinyin', 'de-ID'];
const options1 = { localeMatcher: 'lookup' } as const;
console.log(Intl.DisplayNames.supportedLocalesOf(locales1, options1).join(', ')); // Example output: ""ban, de-ID""

const localesArg = [""es-ES"", new Intl.Locale(""en-US"")];
console.log(Intl.DisplayNames.supportedLocalesOf(localesArg)); // Example output: [""es-ES"", ""en-US""]
console.log(Intl.DisplayNames.supportedLocalesOf()); // Example output: []
console.log(Intl.DisplayNames.supportedLocalesOf(localesArg, {})); // Example output: [""es-ES"", ""en-US""]
```

----------------------------------------

TITLE: TypeScript: Common Feature Requests
DESCRIPTION: Lists frequently requested features for TypeScript, such as safe navigation operators, minification support, extension methods, and partial classes, with links to relevant GitHub issues for discussion.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/FAQ.md#_snippet_44

LANGUAGE: APIDOC
CODE:
```
Feature Requests:

- Safe navigation operator (e.g., `?.`):
  - Description: Similar to CoffeeScript's null conditional or C#'s `?.` operator.
  - GitHub Issue: #16

- Minification support:
  - Description: Built-in or improved support for code minification.
  - GitHub Issue: #8

- Extension methods:
  - Description: Ability to add methods to existing types without modifying their original definition.
  - GitHub Issue: #9

- Partial classes:
  - Description: Allows a class definition to be split into multiple files.
  - GitHub Issue: #563

- `this` keyword behavior:
  - Description: Enhancements or clarifications regarding the `this` keyword's context and usage.
  - GitHub Issue: #513

- Strong typing for `Function` members (`call`/`bind`/`apply`):
  - Description: Improved type safety for methods used to invoke functions.
  - GitHub Issue: #212

- Runtime function overloading:
  - Description: Support for overloading functions at runtime, not just compile time.
  - GitHub Issue: #3442
```

----------------------------------------

TITLE: TypeScript Bot Command Example
DESCRIPTION: Demonstrates how to invoke the TypeScript bot by issuing a command within a GitHub comment. This is a user-facing interaction example.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Tooling-On-The-Compiler-Repo.md#_snippet_0

LANGUAGE: markdown
CODE:
```
@typescript-bot pack this
```

----------------------------------------

TITLE: JSX Fragment with Invalid Start Character
DESCRIPTION: Shows a syntax error where a JSX fragment starts with an unexpected character.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/linkedEditingJsxTag10.linkedEditing.txt#_snippet_12

LANGUAGE: typescript
CODE:
```
const jsx = > </>;

```

----------------------------------------

TITLE: TypeScript Project Import Example
DESCRIPTION: An example of importing React and createStore from Redux within a TypeScript file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAtTypesPriority.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
import React from ""react"";
import { createStore } from ""redux"";
```

----------------------------------------

TITLE: TypeScript: Get Accessor Cannot Have Parameters or Must Return Value
DESCRIPTION: This snippet illustrates TypeScript errors TS1054 and TS2378. TS1054 indicates that a 'get' accessor in a class cannot accept parameters. TS2378 signifies that a 'get' accessor must always return a value, which is not satisfied in the example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserMemberAccessorDeclaration12.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
   get Foo(a: number) { }
       ~~~
!!! error TS1054: A 'get' accessor cannot have parameters.
       ~~~
!!! error TS2378: A 'get' accessor must return a value.
}

```

----------------------------------------

TITLE: Extract and Print TypeScript File Sections
DESCRIPTION: Parses a TypeScript file to extract and print specific top-level declarations (like functions, variables, interfaces) based on provided identifiers. It uses the TypeScript compiler API to create an AST, traverse nodes, and then uses a printer to output the selected code sections. Dependencies include the 'typescript' package.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_6

LANGUAGE: ts
CODE:
```
import * as ts from ""typescript"";

/**
 * Prints out particular nodes from a source file
 * 
 * @param file a path to a file
 * @param identifiers top level identifiers available
 */
function extract(file: string, identifiers: string[]): void {
  // Create a Program to represent the project, then pull out the
  // source file to parse its AST.
  let program = ts.createProgram([file], { allowJs: true });
  const sourceFile = program.getSourceFile(file);
  
  // To print the AST, we'll use TypeScript's printer
  const printer = ts.createPrinter({ newLine: ts.NewLineKind.LineFeed });

  // To give constructive error messages, keep track of found and un-found identifiers
  const unfoundNodes = [], foundNodes = [];

  // Loop through the root AST nodes of the file
  ts.forEachChild(sourceFile, node => {
    let name = """";
    
    // This is an incomplete set of AST nodes which could have a top level identifier
    // it's left to you to expand this list, which you can do by using
    // https://ts-ast-viewer.com/ to see the AST of a file then use the same patterns
    // as below
    if (ts.isFunctionDeclaration(node)) {
      name = node.name.text;
      // Hide the method body when printing
      node.body = undefined;
    } else if (ts.isVariableStatement(node)) {
      name = node.declarationList.declarations[0].name.getText(sourceFile);
    } else if (ts.isInterfaceDeclaration(node)){
      name = node.name.text;
    }

    const container = identifiers.includes(name) ? foundNodes : unfoundNodes;
    container.push([name, node]);
  });

  // Either print the found nodes, or offer a list of what identifiers were found
  if (!foundNodes.length) {
    console.log(`Could not find any of ${identifiers.join("", "")} in ${file}, found: ${unfoundNodes.filter(f => f[0]).map(f => f[0]).join("", "")}.`);
    process.exitCode = 1;
  } else {
    foundNodes.map(f => {
      const [name, node] = f;
      console.log(""### "" + name + ""\n"");
      console.log(printer.printNode(ts.EmitHint.Unspecified, node, sourceFile)) + ""\n"";
    });
  }
}

// Run the extract function with the script's arguments
extract(process.argv[2], process.argv.slice(3));

```

----------------------------------------

TITLE: Transpile TypeScript String to JavaScript
DESCRIPTION: Utilizes `ts.transpileModule` for a concise string-to-string transformation of TypeScript code into JavaScript. This is ideal for quick transpilation without setting up a full compiler program.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_3

LANGUAGE: typescript
CODE:
```
import * as ts from ""typescript"";

const source = ""let x: string  = 'string'"";

let result = ts.transpileModule(source, { compilerOptions: { module: ts.ModuleKind.CommonJS }});

console.log(JSON.stringify(result));
```

----------------------------------------

TITLE: @trpc/server Core API Definitions
DESCRIPTION: This section provides API documentation for key types and interfaces within the @trpc/server library, including configuration, error formatting, middleware, and the main TRPC builder. It outlines the structure and purpose of these components.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitIsolatedDeclarationErrorNotEmittedForNonEmittedFile.errors.txt#_snippet_1

LANGUAGE: APIDOC
CODE:
```
TRPC Server Core Definitions:

RootConfig<T>:
  Interface for root configuration.
  Parameters:
    - T: Type parameter for configuration details.

ErrorFormatterShape<T={}>:
  Interface for shaping error formats.
  Parameters:
    - T: Type parameter for the error shape, defaults to an empty object.

PickFirstDefined<TType, TPick>:
  Utility type to pick the first defined type between TType and TPick.
  Parameters:
    - TType: The first type to check.
    - TPick: The second type to check.
  Returns: The defined type, or never if both are undefined.

ErrorFormatter<T={}, U={}>:
  Interface for error formatting functions.
  Parameters:
    - T: Type parameter for the first context, defaults to empty object.
    - U: Type parameter for the second context, defaults to empty object.

DefaultErrorShape<T={}>:
  Interface for the default error shape.
  Parameters:
    - T: Type parameter for the error shape, defaults to an empty object.

MiddlewareFunction<T={}, U={}>:
  Interface for middleware functions.
  Parameters:
    - T: Type parameter for input context, defaults to empty object.
    - U: Type parameter for output context, defaults to empty object.

MiddlewareBuilder<T={}, U={}>:
  Interface for middleware builders.
  Parameters:
    - T: Type parameter for input context, defaults to empty object.
    - U: Type parameter for output context, defaults to empty object.

TRPCBuilder<TParams>:
  Class for building TRPC instances.
  Methods:
    - create<TOptions extends Record<string, any>>(): {
        procedure: {};
        middleware: <TNewParams extends Record<string, any>>(
          fn: import(""./middleware"").MiddlewareFunction<{
            _config: RootConfig<{
              errorShape: ErrorFormatterShape<PickFirstDefined<TOptions[""errorFormatter""], ErrorFormatter<TParams[""ctx""] extends object ? TParams[""ctx""] : object, DefaultErrorShape>>>;
            }>;
          }, TNewParams>
        ) => import(""./middleware"").MiddlewareBuilder<{
          _config: RootConfig<{
            errorShape: ErrorFormatterShape<PickFirstDefined<TOptions[""errorFormatter""], ErrorFormatter<TParams[""ctx""] extends object ? TParams[""ctx""] : object, DefaultErrorShape>>>;
          }>;
        }, TNewParams>;
        router: {};
      };

initTRPC:
  Instance of TRPCBuilder<object>.
  Usage:
    const trpc = initTRPC.create();

```

----------------------------------------

TITLE: Install and Link TypeScript Globally
DESCRIPTION: Installs the TypeScript compiler globally using npm and links it to the project's environment. This is a prerequisite for using the TypeScript compiler API.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API-(TypeScript-1.4).md#_snippet_0

LANGUAGE: bash
CODE:
```
npm install -g typescript
npm link typescript
```

----------------------------------------

TITLE: TypeScript Generic Function `f1` API and Usage
DESCRIPTION: Defines and demonstrates a generic TypeScript function `f1` that infers types based on its arguments. Includes examples showing successful inference and a specific error case (TS2345) when an incompatible enum type is provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeArgumentInferenceWithObjectLiteral.errors.txt#_snippet_1

LANGUAGE: APIDOC
CODE:
```
declare function f1<T, U>(a: { w: (x: T) => U; r: () => T; }, b: T): U
  - Generic function that infers types T and U.
  - Parameters:
    - a: An object with two methods: `w` (takes T, returns U) and `r` (returns T).
    - b: A value of type T.
  - Returns: A value of type U.
  - Usage Examples:
    - var v1: number;
      v1 = f1({ w: x => x, r: () => 0 }, 0);
    - v1 = f1({ w: x => x, r: () => 0 }, E1.X);
    - v1 = f1({ w: x => x, r: () => E1.X }, 0);
    - var v2: E1;
      v2 = f1({ w: x => x, r: () => E1.X }, E1.X);
  - Error Condition:
    - var v3 = f1({ w: x => x, r: () => E1.X }, E2.X); // Error TS2345: Argument of type 'E2' is not assignable to parameter of type 'E1'.
```

----------------------------------------

TITLE: JavaScript Example with Docker GUI Reference
DESCRIPTION: This snippet demonstrates a JavaScript string concatenation, referencing the availability of a Docker GUI for Windows users. It's a simple example illustrating how JavaScript might be used in conjunction with Docker concepts.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_12

LANGUAGE: javascript
CODE:
```
const orGUI =
  ""Or, as long as you're a gui-dependent windows user,""
  + ""just use the docker gui..."";

console.log(orGUI);
```

----------------------------------------

TITLE: Renderer API Declarations
DESCRIPTION: Defines the core JSX factory functions ('h', 'jsx') and the 'Fragment' component used in JSX compilation. This declaration file sets up the global namespace for JSX intrinsic elements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inlineJsxAndJsxFragPragma.errors.txt#_snippet_0

LANGUAGE: APIDOC
CODE:
```
declare global {
    namespace JSX {
        interface IntrinsicElements {
            [e: string]: any;
        }
    }
}
export function h(): void;
export function jsx(): void;
export function Fragment(): void;
```

----------------------------------------

TITLE: TypeScript: Calling Get Accessors
DESCRIPTION: Demonstrates TypeScript error TS6234 where a 'get' accessor is incorrectly called as a function. This occurs when trying to invoke a property that is defined with a getter, leading to a 'not callable' error. The examples show this in both non-generic and generic class contexts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/instancePropertyInClassType.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
module NonGeneric {
    class C {
        x: string;
        get y() {
            return 1;
        }
        set y(v) { }
        fn() { return this; }
        constructor(public a: number, private b: number) { }
    }

    var c = new C(1, 2);
    var r = c.fn();
    var r2 = r.x;
    var r3 = r.y;
    r.y = 4;
    var r6 = c.y(); // error
               ~
```

LANGUAGE: typescript
CODE:
```
module Generic {
    class C<T,U> {
        x: T;
        get y() {
            return null;
        }
        set y(v: U) { }
        fn() { return this; }
        constructor(public a: T, private b: U) { }
    }

    var c = new C(1, '');
    var r = c.fn();
    var r2 = r.x;
    var r3 = r.y;
    r.y = '';
    var r6 = c.y(); // error
               ~
```

----------------------------------------

TITLE: TypeScript typeof on Classes and Instances
DESCRIPTION: Illustrates how 'typeof' can be applied to classes to get their constructor type and to instances to get their object type. This helps in typing variables that hold class constructors or instances.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofAnExportedType.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export class C {
    foo: string;
}
export var c: C;
var c2: C;

export var r3: typeof C;
export var r4: typeof c;
export var r4b: typeof c2;
```

----------------------------------------

TITLE: TypeScript 1.5 TextChange and SourceFile API Updates
DESCRIPTION: In TypeScript 1.5, the `TextChange` interface properties `start` and `length` transitioned from methods to properties. Additionally, the `SourceFile.getLineAndCharacterFromPosition` method was renamed to `SourceFile.getLineAndCharacterOfPosition`.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_29

LANGUAGE: APIDOC
CODE:
```
TypeScript 1.5 API Changes:

`TextChange` Interface:
- `TextChange.start` and `TextChange.length` are now properties instead of methods.

`SourceFile` Method Renaming:
- `SourceFile.getLineAndCharacterFromPosition` has been renamed to `SourceFile.getLineAndCharacterOfPosition`.
```

----------------------------------------

TITLE: TypeScript Function with Rest Parameters
DESCRIPTION: Defines a TypeScript function 'foo2' that accepts a 'greeting' parameter and uses rest parameters ('...restGreetings') to capture any additional string arguments. This illustrates handling variable numbers of arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
function foo2(greeting: string, ...restGreetings: string[]) {
    // Function body would go here
}
```

----------------------------------------

TITLE: Install Latest TypeScript Version
DESCRIPTION: Installs the latest version of TypeScript using npm. This is a prerequisite for using the `--generateTrace` feature, which was introduced in TypeScript 4.1.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Performance-Tracing.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm install typescript@latest
```

----------------------------------------

TITLE: TypeScript Greeter Class and Functions
DESCRIPTION: Demonstrates a TypeScript Greeter class with a constructor and a greet method. Includes example functions `foo` and `foo2` to create and use Greeter instances, showcasing class instantiation and array manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_19

LANGUAGE: TypeScript
CODE:
```
""use strict"";

class Greeter {
    constructor(public greeting: string) {
    }

    greet() {
        return ""<h1>"" + this.greeting + ""</h1>"";
    }
}

function foo(greeting: string): Foo.Bar.Greeter {
    return new Greeter(greeting);
}

var greeter = new Greeter(""Hello, world!"");
var str = greeter.greet();

function foo2(greeting: string, ...restGreetings: string[]) {
    var greeters: Greeter[] = [];
    greeters[0] = new Greeter(greeting);
    for (var i = 0; i < restGreetings.length; i++) {
        greeters.push(new Greeter(restGreetings[i]));
    }

    return greeters;
}

var b = foo2(""Hello"", ""World"", ""!"");
for (var j = 0; j < b.length; j++) {
    b[j].greet();
}
```

----------------------------------------

TITLE: Underscore.js Static Methods and Properties
DESCRIPTION: This entry documents the core static methods and properties provided by the Underscore.js library, accessible via the global '_' object. It covers utilities for generating unique IDs, string manipulation, accessing object properties, and templating.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_46

LANGUAGE: APIDOC
CODE:
```
Underscore.js Static API

This section details the static methods and properties available on the global Underscore.js object (_).

Methods:

uniqueId(): number
  Generates a unique ID.
  Parameters: None
  Returns: A unique number.

uniqueId(prefix: string): string
  Generates a unique ID with a prefix.
  Parameters:
    - prefix: A string to prepend to the unique ID.
  Returns: A unique string ID.

escape(s: string): string
  Escapes characters in a string that are sensitive in HTML.
  Parameters:
    - s: The string to escape.
  Returns: The escaped string.

unescape(s: string): string
  Unescapes characters in a string that were escaped by escape().
  Parameters:
    - s: The string to unescape.
  Returns: The unescaped string.

result(object: any, property: string): any
  Retrieves the value of a property from an object. If the property is a function, it's invoked and its return value is returned.
  Parameters:
    - object: The object to query.
    - property: The name of the property to retrieve or the function to call.
  Returns: The value of the property or the result of the function call.

template(templateString: string): (data: any) => string
  Compiles a template string into a reusable function. This overload returns a function that can be called later with data.
  Parameters:
    - templateString: The template string to compile.
  Returns: A function that takes data and returns the rendered template.

template(templateString: string, data: any, settings?: TemplateSettings): string
  Compiles and renders a template string in one step.
  Parameters:
    - templateString: The template string to compile and render.
    - data: The data to interpolate into the template.
    - settings: Optional template settings.
  Returns: The rendered template string.

Properties:

templateSettings: TemplateSettings
  Provides access to and allows modification of the default template settings used by the template() function.
  Type: TemplateSettings
  Description: An object containing settings like interpolate, escape, and evaluate regex patterns.
```

----------------------------------------

TITLE: TypeScript Main Program Execution
DESCRIPTION: Represents a call to the Main method within the Program class of TypeScriptAllInOne, typically used to start application execution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorWithIncompleteTypeAnnotation.errors.txt#_snippet_15

LANGUAGE: TypeScript
CODE:
```
TypeScriptAllInOne.Program.Main();
```

----------------------------------------

TITLE: Promise Static Methods: reduce and filter
DESCRIPTION: Documentation for static utility methods on the Promise object, including reduce for accumulating values and filter for selecting elements based on a predicate.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bluebirdStaticThis.errors.txt#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Promise:
  static reduce<R, U>(dit: typeof Promise, values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>
    - Reduces a collection of values to a single accumulated value.
    - Parameters:
      - dit: The Promise constructor or module.
      - values: An array of values to iterate over.
      - reducer: A function to execute on each value in the array, taking the accumulator, current value, index, and array length.
      - initialValue: An optional initial value for the accumulator.
    - Returns: A Promise that resolves with the accumulated value.

  static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>
  static filter<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>
  static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>
  static filter<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>
  static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>
  static filter<R>(dit: typeof Promise, values: Promise.Thenable<R>[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>
  static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => Promise.Thenable<boolean>): Promise<R[]>
  static filter<R>(dit: typeof Promise, values: R[], filterer: (item: R, index: number, arrayLength: number) => boolean): Promise<R[]>
    - Filters a collection of values based on a predicate function.
    - Parameters:
      - dit: The Promise constructor or module.
      - values: An array or Thenable of values to filter.
      - filterer: A function that returns true to keep an element or false to discard it. Can return a Promise resolving to a boolean.
    - Returns: A Promise that resolves with an array containing only the elements for which the filterer returned true.
```

----------------------------------------

TITLE: JSX Fragment Opening Tag
DESCRIPTION: Demonstrates the basic syntax for an opening JSX fragment tag in TypeScript. This snippet shows a common starting point for JSX structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/linkedEditingJsxTag10.linkedEditing.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
const jsx = <>

```

----------------------------------------

TITLE: TypeScript Language Service API Updates
DESCRIPTION: Highlights the removal of deprecated methods in the TypeScript Language Service, recommending the use of newer alternatives for obtaining document highlights.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Language Service Methods:

- Removed: `Occurrences` request handling on `tsserver` and `LanguageService.getOccurrencesAtPosition`.
- Recommended Alternative: Use the `documentHighlights` request on `tsserver` and `LanguageService.getDocumentHighlights` instead.

Reasoning: The `getOccurrencesAtPosition` method was deprecated for a long time.
```

----------------------------------------

TITLE: TypeScript typeof on Enums
DESCRIPTION: Explains how to use the 'typeof' operator with enums to get the type of the enum itself (which is an object at runtime) and its members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeofAnExportedType.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
export enum E {
    A
}
export var r10: typeof E;
export var r11: typeof E.A;
```

----------------------------------------

TITLE: Executing Commands in a Running Docker Container
DESCRIPTION: This example shows how to start an interactive bash shell within a running Docker container. First, you use `docker ps` to find the container ID, then `docker exec -it <container-id> bash` to enter the container's environment.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_14

LANGUAGE: shell
CODE:
```
C:\> docker ps
... node id ...
C:\> docker exec -it 123 bash
```

----------------------------------------

TITLE: TypeScript `BuilderProgramHost` API Change
DESCRIPTION: Notes a simplification in the `BuilderProgramHost` interface, where the `useCaseSensitiveFileNames` method is no longer a required parameter as it is now sourced directly from the `program` object.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
BuilderProgramHost API:

- Removed Requirement: `BuilderProgramHost` no longer requires the `useCaseSensitiveFileNames` method.
- Reason: This information is now obtained directly from the `program` object.
```

----------------------------------------

TITLE: Generate DTS from JavaScript Files (TS 3.7+)
DESCRIPTION: Demonstrates generating TypeScript declaration files (`.d.ts`) from JavaScript source files. It uses an in-memory compiler host to capture emitted declaration files, requiring TypeScript 3.7 or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API.md#_snippet_4

LANGUAGE: typescript
CODE:
```
import * as ts from ""typescript"";

function compile(fileNames: string[], options: ts.CompilerOptions): void {
  const createdFiles = {}
  const host = ts.createCompilerHost(options);
  host.writeFile = (fileName: string, contents: string) => createdFiles[fileName] = contents
  
  const program = ts.createProgram(fileNames, options, host);
  program.emit();

  fileNames.forEach(file => {
    console.log(""### JavaScript\n"")
    console.log(host.readFile(file))

    console.log(""### Type Definition\n"")
    const dts = file.replace("".js"", "".d.ts"")
    console.log(createdFiles[dts])
  })
}

compile(process.argv.slice(2), {
  allowJs: true,
  declaration: true,
  emitDeclarationOnly: true,
});
```

----------------------------------------

TITLE: TypeScript Generator and Accessor Error Example
DESCRIPTION: This snippet demonstrates a TypeScript compilation error where a 'yield' expression is used within a 'get' accessor, which is not permitted. The TypeScript compiler flags this as an error because 'get' accessors are not generator functions and must return a value, not yield one. This highlights the strict rules for generator functions and class accessors in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/YieldExpression17_es6.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var v = { get foo() { yield foo; } }
```

----------------------------------------

TITLE: ChainedDictionary Methods
DESCRIPTION: Provides utility methods for dictionary-like structures, enabling functional operations like iteration, mapping, and reduction on key-value pairs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_33

LANGUAGE: APIDOC
CODE:
```
ChainedDictionary<T>:
  each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
  forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>;
    Description: Iterates over the dictionary's values, executing an iterator function for each.
    Parameters:
      - iterator: The function to execute for each value.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedObject representing the completion of the iteration.

  map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
    Description: Creates a new array by mapping each value in the dictionary to a new value using an iterator function.
    Parameters:
      - iterator: The function to transform each value.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedArray containing the transformed values.

  collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
    Description: Alias for `map()`. Creates a new array by mapping each value in the dictionary.
    Parameters:
      - iterator: The function to transform each value.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedArray containing the transformed values.

  reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
  reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
    Description: Reduces the dictionary's values to a single value by applying an iterator function.
    Parameters:
      - iterator: The function to execute for each value, taking accumulator and current value.
      - initialValue: The initial value for the accumulator.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedObject containing the reduced value.

  foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
  foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
    Description: Alias for `reduce()`. Reduces the dictionary's values from left to right.
    Parameters:
      - iterator: The function to execute for each value.
      - initialValue: The initial value for the accumulator.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedObject containing the reduced value.

  inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
  inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
    Description: Alias for `reduce()`. Reduces the dictionary's values to a single value.
    Parameters:
      - iterator: The function to execute for each value.
      - initialValue: The initial value for the accumulator.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedObject containing the reduced value.

  reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
  reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
    Description: Reduces the dictionary's values from right to left.
    Parameters:
      - iterator: The function to execute for each value.
      - initialValue: The initial value for the accumulator.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedObject containing the reduced value.

  foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>;
  foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>;
    Description: Alias for `reduceRight()`. Reduces the dictionary's values from right to left.
    Parameters:
      - iterator: The function to execute for each value.
      - initialValue: The initial value for the accumulator.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedObject containing the reduced value.

  find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
    Description: Finds the first value in the dictionary that satisfies the condition specified by an iterator function.
    Parameters:
      - iterator: The function to test each value.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedObject containing the first value that satisfies the condition, or undefined if none is found.

```

----------------------------------------

TITLE: TypeScript createSlice reducer signature example
DESCRIPTION: Demonstrates a usage pattern for a generic `createSlice` function, showing how reducers are defined. This example highlights a potential type mismatch or simplification in the reducer signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTypeFunctionObjectPropertyIntersection.errors.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
declare function createSlice<T>(
  reducers: { [K: string]: (state: string) => void } & {
    [K in keyof T]: object;
  }
): void;

createSlice({
  f(a) {},
});
```

----------------------------------------

TITLE: TypeScript for loop with missing initialization
DESCRIPTION: Presents a 'for' loop in TypeScript where the initialization statement is omitted. The loop variable must be declared and initialized before the loop starts.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/for.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
for (; i < 10;) { // ok
    i++;
}
```

LANGUAGE: typescript
CODE:
```
for (; i > 1; i--) { // ok
}
```

----------------------------------------

TITLE: Bluebird Promise Static Methods
DESCRIPTION: Provides signatures for static methods of the Bluebird Promise API, including methods for handling multiple promises like `settle`, `any`, `race`, `some`, `join`, `map`, and `reduce`. These signatures detail parameter types and return values for asynchronous operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bluebirdStaticThis.errors.txt#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Promise.settle<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<Promise.Inspection<R>[]>;
Promise.settle<R>(dit: typeof Promise, values: R[]): Promise<Promise.Inspection<R>[]>;

Promise.any<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>;
Promise.any<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R>;
Promise.any<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R>;
Promise.any<R>(dit: typeof Promise, values: R[]): Promise<R>;

Promise.race<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>): Promise<R>;
Promise.race<R>(dit: typeof Promise, values: Promise.Thenable<R[]>): Promise<R>;
Promise.race<R>(dit: typeof Promise, values: Promise.Thenable<R>[]): Promise<R>;
Promise.race<R>(dit: typeof Promise, values: R[]): Promise<R>;

Promise.some<R>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, count: number): Promise<R[]>;
Promise.some<R>(dit: typeof Promise, values: Promise.Thenable<R[]>, count: number): Promise<R[]>;
Promise.some<R>(dit: typeof Promise, values: Promise.Thenable<R>[], count: number): Promise<R[]>;
Promise.some<R>(dit: typeof Promise, values: R[], count: number): Promise<R[]>;

Promise.join<R>(dit: typeof Promise, ...values: Promise.Thenable<R>[]): Promise<R[]>;
Promise.join<R>(dit: typeof Promise, ...values: R[]): Promise<R[]>;

Promise.map<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
Promise.map<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
Promise.map<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
Promise.map<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
Promise.map<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
Promise.map<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;
Promise.map<R, U>(dit: typeof Promise, values: R[], mapper: (item: R, index: number, arrayLength: number) => Promise.Thenable<U>): Promise<U[]>;
Promise.map<R, U>(dit: typeof Promise, values: R[], mapper: (item: R, index: number, arrayLength: number) => U): Promise<U[]>;

Promise.reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
Promise.reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<Promise.Thenable<R>[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
Promise.reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
Promise.reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R[]>, reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
Promise.reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
Promise.reduce<R, U>(dit: typeof Promise, values: Promise.Thenable<R>[], reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;
Promise.reduce<R, U>(dit: typeof Promise, values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => Promise.Thenable<U>, initialValue?: U): Promise<U>;
Promise.reduce<R, U>(dit: typeof Promise, values: R[], reducer: (total: U, current: R, index: number, arrayLength: number) => U, initialValue?: U): Promise<U>;

```

----------------------------------------

TITLE: TypeScript Class Member Completion Example
DESCRIPTION: Illustrates a typical method declaration used as an example for class member completion suggestions. This shows the expected format for `insertText` when suggesting a new method.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/codebase/services/Codebase-Services-Completions.md#_snippet_3

LANGUAGE: typescript
CODE:
```
foo(x: string): number {
    // empty implementation
}
```

----------------------------------------

TITLE: TypeScript: Valid Promise Chaining Examples
DESCRIPTION: Provides examples of correctly chained `Promise.then` calls in TypeScript, demonstrating scenarios where type compatibility is maintained. These examples serve as a contrast to the error-producing snippets, showing valid usage patterns for promise resolution and callback signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/promisePermutations.errors.txt#_snippet_22

LANGUAGE: typescript
CODE:
```
var r12 = testFunction12(x => x);
    var r12a = r12.then(testFunction12, testFunction12, testFunction12); // ok
    var s12 = testFunction12(x => x);
    var s12a = s12.then(testFunction12, testFunction12, testFunction12); // ok
    var s12b = s12.then(testFunction12P, testFunction12P, testFunction12P); // ok
    var s12c = s12.then(testFunction12P, testFunction12, testFunction12); // ok
```

----------------------------------------

TITLE: Hereby Build and Task Commands
DESCRIPTION: Commonly used hereby commands for building, testing, and managing the TypeScript compiler and infrastructure. These commands facilitate local development and contribution workflows.
SOURCE: https://github.com/microsoft/typescript/blob/main/CONTRIBUTING.md#_snippet_7

LANGUAGE: shell
CODE:
```
hereby --tasks
  # Provides a full listing of available hereby tasks.
```

LANGUAGE: shell
CODE:
```
hereby local
  # Builds the compiler into the built/local directory.
```

LANGUAGE: shell
CODE:
```
hereby clean
  # Deletes the built compiler artifacts.
```

LANGUAGE: shell
CODE:
```
hereby LKG
  # Replaces the last known good build with the current built one. Used during bootstrapping.
```

LANGUAGE: shell
CODE:
```
hereby tests
  # Builds the test infrastructure using the built compiler.
```

LANGUAGE: shell
CODE:
```
hereby runtests
  # Runs tests using the built compiler and test infrastructure.
  # Options:
  #   --tests=<testPath>: Specify a particular test file or directory.
  #   --runner=<runnerName>: Specify a specific test suite runner (e.g., conformance, compiler, fourslash, project).
```

LANGUAGE: shell
CODE:
```
hereby runtests-parallel
  # Runs tests in parallel across multiple threads, defaulting to the system's core count.
  # Options:
  #   --workers=<number>: Manually set the number of worker threads.
```

LANGUAGE: shell
CODE:
```
hereby baseline-accept
  # Replaces the baseline test results with the current results obtained from 'hereby runtests'.
```

LANGUAGE: shell
CODE:
```
hereby lint
  # Runs ESLint on the TypeScript source code for code quality checks.
```

LANGUAGE: shell
CODE:
```
hereby help
  # Displays a list of available hereby commands.
```

----------------------------------------

TITLE: TypeScript Greeter Class and Functions
DESCRIPTION: This snippet demonstrates a TypeScript class 'Greeter' with a constructor and a 'greet' method. It also includes utility functions 'foo' and 'foo2' for creating and managing Greeter instances. This code is intended to be compiled into JavaScript, with source maps generated to link back to the original TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
namespace Foo {
    export namespace Bar {
        export class Greeter {
            constructor(public greeting: string) {
            }

            greet() {
                return ""<h1>"" + this.greeting + ""</h1>"";
            }
        }

        function foo(greeting: string): Foo.Bar.Greeter {
            return new Greeter(greeting);
        }

        var greeter = new Greeter(""Hello, world!"");
        var str = greeter.greet();

        function foo2(greeting: string, ...restGreetings: string[]) {
            var greeters: Greeter[] = [];
            greeters[0] = new Greeter(greeting);
            for (var i = 0; i < restGreetings.length; i++) {
                greeters.push(new Greeter(restGreetings[i]));
            }

            return greeters;
        }

        var b = foo2(""Hello"", ""World"", ""!"");
        for (var j = 0; j < b.length; j++) {
            b[j].greet();
        }
    }
}
```

----------------------------------------

TITLE: TypeScript Module Definition Example
DESCRIPTION: Illustrates a basic TypeScript module declaration using 'export ='. This pattern is used for exporting a single entity, such as a function, from a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocReferenceGlobalTypeInCommonJs.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
declare function f(): string;
export = f;
```

----------------------------------------

TITLE: Generic Function with `get${T}` Mapped Type in TypeScript
DESCRIPTION: This example highlights a TypeScript error (TS2322) in a generic function where a mapped type with a template literal key (`get${RemappedT}`) is used to access a property. The error indicates that the retrieved value type is not assignable to the generic type parameter `T` due to potential type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/mappedTypeConstraints2.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
type Foo<T extends string> = {
    [RemappedT in T as `get${RemappedT}`]: RemappedT;
};

const get = <T extends string>(t: T, foo: Foo<T>): T => foo[`get${t}`];  // Type 'Foo<T>[`get${T}`]' is not assignable to type 'T'

// Error details:
// mappedTypeConstraints2.ts(82,57): error TS2322: Type 'Foo<T>[`get${T}`]' is not assignable to type 'T'.
//   'T' could be instantiated with an arbitrary type which could be unrelated to 'Foo<T>[`get${T}`]'.
```

----------------------------------------

TITLE: TypeScript Emitter API: Printer and Emission Functions
DESCRIPTION: Details on creating a printer instance and emitting AST nodes using pipeline functions. Includes `createPrinter`, `print`, and `pipelineEmitWithHint` for AST traversal and code generation.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/codebase/compiler/Codebase-Compiler-Emitter.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
createPrinter(): Printer
  - Description: Initializes and returns a new printer object for emitting TypeScript AST nodes.
  - Returns: A Printer object.

print(node: ASTNode, printer: Printer): string
  - Description: Emits the given AST node to a string using the provided printer instance.
  - Parameters:
    - node: The AST node to print.
    - printer: The Printer instance to use for emission.
  - Returns: The emitted string representation of the AST node.

pipelineEmitWithHint(node: ASTNode, hint: EmitHint): string
  - Description: Emits an AST node through the internal pipeline, potentially using a hint to influence the emission type or format.
  - Parameters:
    - node: The AST node to emit.
    - hint: An EmitHint value to guide the emission process.
  - Returns: The resulting emitted string.
```

----------------------------------------

TITLE: TypeScript Module Reference Example
DESCRIPTION: Illustrates how to use a module reference comment (`/// <reference path='...'/>`) to include code from another TypeScript file. This example defines a class and a function, then references an external module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootSourceRootWithNoSourceMapOption/amd/mapRootSourceRootWithNoSourceMapOption.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: TypeScript: Basic Exports in a.ts
DESCRIPTION: Demonstrates basic value, type, and class exports in TypeScript. This file serves as a reference for other examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/verbatimModuleSyntaxNoElisionESM.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 0;
export type A = typeof a;
export class AClass {}

```

----------------------------------------

TITLE: TypeScript Class Usage Guidelines
DESCRIPTION: Provides guidance on the use of classes within the TypeScript compiler pipeline, recommending alternatives for core compiler logic.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Coding-guidelines.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
TypeScript Class Usage:

- Core Compiler Pipeline: Do not use classes in the core compiler pipeline. Use function closures instead for consistency.
```

----------------------------------------

TITLE: Declare Variable in TypeScript
DESCRIPTION: This snippet shows the original TypeScript code for declaring a variable 'x' and assigning it the value '1'. It is the source code that gets compiled.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedModulesSourceMap.sourcemap.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
export var x = 1;
```

----------------------------------------

TITLE: Generated JavaScript for Rest Parameter Binding Pattern
DESCRIPTION: The compiled JavaScript output for the TypeScript rest parameter example. It shows how the rest parameters and binding pattern are translated into standard JavaScript, including argument handling and destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restParameterWithBindingPattern1.sourcemap.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
function a() {
    var _a = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        _a[_i] = arguments[_i];
    }
    var a = _a.a, b = _a.b;
}
```

----------------------------------------

TITLE: TypeScript Getter Returning String
DESCRIPTION: A valid TypeScript `get` accessor example that successfully returns a string value. This demonstrates a standard use case for getters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionsMissingReturnStatementsAndExpressions.errors.txt#_snippet_12

LANGUAGE: typescript
CODE:
```
class C {
    public get m3() {
        return ""Okay, because this is a return expression."";
    }
}
```

----------------------------------------

TITLE: Format Code with TypeScript LS Formatter
DESCRIPTION: This snippet demonstrates how to format TypeScript code using the `ts.formatting.formatDocument` API, which was part of the TypeScript 1.4 package. It includes helper functions for setting default formatting options, applying text changes, and fixing parent references in the AST. Note that the formatting interfaces were not publicly exposed in `typescript.d.ts` at the time of this code's creation.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API-(TypeScript-1.4).md#_snippet_5

LANGUAGE: TypeScript
CODE:
```
/// <reference path=""typings/node/node.d.ts"" />
/// <reference path=""typings/typescript/typescript.d.ts"" />

import ts = require(""typescript"");

// Note: this uses ts.formatting which is part of the typescript 1.4 package but is not currently 
//       exposed in the public typescript.d.ts. The typings should be exposed in the next release. 
function format(text: string) {
    var options = getDefaultOptions();

    // Parse the source text
    var sourceFile = ts.createSourceFile(""file.ts"", text, ts.ScriptTarget.Latest, ""0"");
    fixupParentReferences(sourceFile);

    // Get the formatting edits on the input sources
    var edits = (<any>ts).formatting.formatDocument(sourceFile, getRuleProvider(options), options);

    // Apply the edits on the input code
    return applyEdits(text, edits);

    function getRuleProvider(options: ts.FormatCodeOptions) {
        // Share this between multiple formatters using the same options.
        // This represents the bulk of the space the formatter uses.
        var ruleProvider = new (<any>ts).formatting.RulesProvider();
        ruleProvider.ensureUpToDate(options);
        return ruleProvider;
    }

    function applyEdits(text: string, edits: ts.TextChange[]): string {
        // Apply edits in reverse on the existing text
        var result = text;
        for (var i = edits.length - 1; i >= 0; i--) {
            var change = edits[i];
            var head = result.slice(0, change.span.start());
            var tail = result.slice(change.span.start() + change.span.length());
            result = head + change.newText + tail;
        }
        return result;
    }

    function getDefaultOptions(): ts.FormatCodeOptions {
        return {
            IndentSize: 4,
            TabSize: 4,
            NewLineCharacter: '\r\n',
            ConvertTabsToSpaces: true,
            InsertSpaceAfterCommaDelimiter: true,
            InsertSpaceAfterSemicolonInForStatements: true,
            InsertSpaceBeforeAndAfterBinaryOperators: true,
            InsertSpaceAfterKeywordsInControlFlowStatements: true,
            InsertSpaceAfterFunctionKeywordForAnonymousFunctions: false,
            InsertSpaceAfterOpeningAndBeforeClosingNonemptyParenthesis: false,
            PlaceOpenBraceOnNewLineForFunctions: false,
            PlaceOpenBraceOnNewLineForControlBlocks: false,
        };
    }

    function fixupParentReferences(sourceFile: ts.SourceFile) {
        var parent: ts.Node = sourceFile;
        function walk(n: ts.Node): void {
            n.parent = parent;

            var saveParent = parent;
            parent = n;
            ts.forEachChild(n, walk);
            parent = saveParent;
        }
        ts.forEachChild(sourceFile, walk);
    }
}


var code = ""var a=function(v:number){return 0+1+2+3;\n}"";
var result = format(code);
console.log(result);

```

----------------------------------------

TITLE: TypeScript Class Instantiation and Method Call
DESCRIPTION: Demonstrates the instantiation of a 'Greeter' class with a string argument and calling its 'greet' method. This snippet showcases basic object-oriented usage in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
class Greeter {
    greeting: string;
    constructor(message: string) {
        this.greeting = message;
    }
    greet() {
        return ""Hello, "" + this.greeting;
    }
}

var greeter = new Greeter(""Hello, world!"");
var str = greeter.greet();
```

----------------------------------------

TITLE: JavaScript Map File Example
DESCRIPTION: An example of a JavaScript file with a .js.map extension, typically used for source maps.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithInlineSourceMap.errors.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
function foo() {
}

```

----------------------------------------

TITLE: TypeScript Module Reference Example
DESCRIPTION: Illustrates how to use a module reference comment (`/// <reference path='...'/>`) to include code from another TypeScript file. This example defines a class and a function, then references an external module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootSourceRootWithNoSourceMapOption/node/mapRootSourceRootWithNoSourceMapOption.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: TypeScript General Constructs and Iteration
DESCRIPTION: Recommends preferred constructs over certain JavaScript features, such as using `ts.forEach` over `for..in` loops and functional array methods.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Coding-guidelines.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
TypeScript General Constructs:

- `for..in` statements: Avoid. Use `ts.forEach`, `ts.forEachKey`, and `ts.forEachValue` instead.
- Loops: Prefer `ts.forEach`, `ts.map`, and `ts.filter` over traditional loops when convenient.
```

----------------------------------------

TITLE: TypeScript Greeter Class and Usage
DESCRIPTION: Defines a Greeter class with a constructor and a greet method. It also shows how to instantiate the class, call its method, and includes a helper function within a namespace. The code demonstrates basic TypeScript syntax for classes, methods, functions, and variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_16

LANGUAGE: typescript
CODE:
```
""use strict"";

class Greeter {
    constructor(public greeting: string) {
    }

    greet() {
        return ""<h1>"" + this.greeting + ""</h1>"";
    }
}

function foo(greeting: string): Foo.Bar.Greeter {
    return new Greeter(greeting);
}

var greeter = new Greeter(""Hello, world!"");
var str = greeter.greet();

function foo2(greeting: string, ...restGreetings: string[]) {
    var greeters: Greeter[] = [];
    greeters[0] = new Greeter(greeting);
    for (var i = 0; i < restGreetings.length; i++) {
    }
}
```

----------------------------------------

TITLE: TypeScript: Demonstrate Object.values and Object.entries
DESCRIPTION: This snippet shows how to use `Object.values()` to get an array of a given object's own enumerable property values and `Object.entries()` to get an array of a given object's own enumerable string-keyed property [key, value] pairs. The provided code encounters TS2550 errors, indicating that the target library in the TypeScript configuration needs to be updated to 'es2017' or later for these methods to be recognized.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/useObjectValuesAndEntries3.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var o = { a: 1, b: 2 };

for (var x of Object.values(o)) {
    let y = x;
}

var entries = Object.entries(o);
```

----------------------------------------

TITLE: Immutable.js API Reference
DESCRIPTION: Provides API documentation for the Immutable.js library, covering core utility functions for JavaScript interoperability and immutability checks. It also details the methods available on the List interface for persistent data manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Immutable Module Functions:
  fromJS(jsValue: any, reviver?: (key: string | number, sequence: Collection.Keyed<string, any> | Collection.Indexed<any>, path?: Array<string | number>) => any): any
    - Converts a JavaScript value (plain objects, arrays) to a Immutable data structure.
    - Parameters:
      - jsValue: The JavaScript value to convert.
      - reviver: An optional function to transform values during conversion.
    - Returns: An Immutable data structure.

  is(first: any, second: any): boolean
    - Checks for referential identity or structural equality between two values.
    - Parameters:
      - first: The first value to compare.
      - second: The second value to compare.
    - Returns: True if the values are considered equal, false otherwise.

  hash(value: any): number
    - Computes a hash for a given value.
    - Parameters:
      - value: The value to hash.
    - Returns: A number representing the hash.

  isImmutable(maybeImmutable: any): maybeImmutable is Collection<any, any>
    - Checks if a value is an Immutable data structure.
    - Parameters:
      - maybeImmutable: The value to check.
    - Returns: True if the value is Immutable, false otherwise.

  isCollection(maybeCollection: any): maybeCollection is Collection<any, any>
    - Checks if a value is an Immutable Collection.
    - Parameters:
      - maybeCollection: The value to check.
    - Returns: True if the value is an Immutable Collection, false otherwise.

  isKeyed(maybeKeyed: any): maybeKeyed is Collection.Keyed<any, any>
    - Checks if a value is an Immutable Keyed Collection.
    - Parameters:
      - maybeKeyed: The value to check.
    - Returns: True if the value is an Immutable Keyed Collection, false otherwise.

  isIndexed(maybeIndexed: any): maybeIndexed is Collection.Indexed<any>
    - Checks if a value is an Immutable Indexed Collection.
    - Parameters:
      - maybeIndexed: The value to check.
    - Returns: True if the value is an Immutable Indexed Collection, false otherwise.

  isAssociative(maybeAssociative: any): maybeAssociative is Collection.Keyed<any, any> | Collection.Indexed<any>
    - Checks if a value is an Immutable Keyed or Indexed Collection.
    - Parameters:
      - maybeAssociative: The value to check.
    - Returns: True if the value is an Immutable Associative Collection, false otherwise.

  isOrdered(maybeOrdered: any): boolean
    - Checks if a value is an Immutable Ordered Collection.
    - Parameters:
      - maybeOrdered: The value to check.
    - Returns: True if the value is an Immutable Ordered Collection, false otherwise.

  isValueObject(maybeValue: any): maybeValue is ValueObject
    - Checks if a value conforms to the ValueObject interface.
    - Parameters:
      - maybeValue: The value to check.
    - Returns: True if the value is a ValueObject, false otherwise.

ValueObject Interface:
  equals(other: any): boolean
    - Compares this ValueObject with another object for equality.
    - Parameters:
      - other: The object to compare with.
    - Returns: True if equal, false otherwise.
  hashCode(): number
    - Returns the hash code for this ValueObject.
    - Returns: The hash code.

List Module Functions:
  isList(maybeList: any): maybeList is List<any>
    - Checks if a value is an Immutable List.
    - Parameters:
      - maybeList: The value to check.
    - Returns: True if the value is an Immutable List, false otherwise.

  of<T>(...values: Array<T>): List<T>
    - Creates a List from a sequence of values.
    - Parameters:
      - values: The values to include in the List.
    - Returns: A new Immutable List.

List Interface Methods:
  set(index: number, value: T): List<T>
    - Returns a new List with the value at the specified index updated.
    - Parameters:
      - index: The index to update.
      - value: The new value.
    - Returns: A new List with the updated value.

  delete(index: number): List<T>
    - Returns a new List with the value at the specified index removed.
    - Parameters:
      - index: The index of the value to remove.
    - Returns: A new List with the value removed.

  remove(index: number): List<T>
    - Alias for delete.
    - Parameters:
      - index: The index of the value to remove.
    - Returns: A new List with the value removed.

  insert(index: number, value: T): List<T>
    - Returns a new List with the value inserted at the specified index.
    - Parameters:
      - index: The index at which to insert.
      - value: The value to insert.
    - Returns: A new List with the value inserted.

  clear(): List<T>
    - Returns an empty List.
    - Returns: An empty Immutable List.

  push(...values: Array<T>): List<T>
    - Returns a new List with values appended to the end.
    - Parameters:
      - values: The values to append.
    - Returns: A new List with appended values.

  pop(): List<T>
    - Returns a new List with the last value removed.
    - Returns: A new List with the last value removed.

  unshift(...values: Array<T>): List<T>
    - Returns a new List with values prepended to the beginning.
    - Parameters:
      - values: The values to prepend.
    - Returns: A new List with prepended values.

  shift(): List<T>
    - Returns a new List with the first value removed.
    - Returns: A new List with the first value removed.

  update(index: number, notSetValue: T, updater: (value: T) => T): this
    - Updates the value at the specified index using an updater function.
    - Parameters:
      - index: The index to update.
      - notSetValue: The value to use if the index is not set.
      - updater: The function to compute the new value.
    - Returns: The updated List.

  update(index: number, updater: (value: T) => T): this
    - Updates the value at the specified index using an updater function.
    - Parameters:
      - index: The index to update.
      - updater: The function to compute the new value.
    - Returns: The updated List.

  update<R>(updater: (value: this) => R): R
    - Updates the entire List using an updater function.
    - Parameters:
      - updater: The function to compute the new value.
    - Returns: The result of the updater function.

  merge(...collections: Array<Collection.Indexed<T> | Array<T>>): this
    - Merges multiple collections into this List.
    - Parameters:
      - collections: The collections to merge.
    - Returns: A new List with merged values.

  mergeWith(merger: (oldVal: T, newVal: T, key: number) => T, ...collections: Array<Collection.Indexed<T> | Array<T>>): this
    - Merges multiple collections with a custom merger function.
    - Parameters:
      - merger: Function to resolve conflicts.
      - collections: The collections to merge.
    - Returns: A new List with merged values resolved by the merger.

  mergeDeep(...collections: Array<Collection.Indexed<T> | Array<T>>): this
    - Deeply merges multiple collections into this List.
    - Parameters:
      - collections: The collections to merge.
    - Returns: A new List with deeply merged values.
```

----------------------------------------

TITLE: Collection Property Matching Utilities (where, findWhere)
DESCRIPTION: Filters collections based on matching properties or finds the first element matching specific properties. Accepts an object of properties to match against.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_39

LANGUAGE: APIDOC
CODE:
```
where<T>(list: T[], properties: Object): T[];
where<T>(list: Dictionary<T>, properties: Object): T[];

findWhere<T>(list: T[], properties: Object): T;
findWhere<T>(list: Dictionary<T>, properties: Object): T;
```

----------------------------------------

TITLE: JSDoc for Deeply Nested Object Array Parameters
DESCRIPTION: Illustrates documenting complex, multi-level nested structures within an array of objects using JSDoc. This example shows how to navigate and document deeply nested properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParamTagTypeLiteral.errors.txt#_snippet_5

LANGUAGE: TypeScript
CODE:
```
/**
 * @param {object[]} opts5 - Let's test out some multiple nesting levels
 * @param {string} opts5[].help - (This one is just normal)
 * @param {object} opts5[].what - Look at us go! Here's the first nest!
 * @param {string} opts5[].what.a - (Another normal one)
 * @param {Object[]} opts5[].what.bad - Now we're nesting inside a nested type
 * @param {string} opts5[].what.bad[].idea - I don't think you can get back out of this level...
 * @param {boolean} opts5[].what.bad[].oh - Oh ... that's how you do it.
 * @param {number} opts5[].unnest - Here we are almost all the way back at the beginning.
 */
function foo5(opts5) {
    opts5[0].what.bad[0].idea;
    opts5[0].unnest;
}

foo5([{ help: ""help"", what: { a: 'a', bad: [{ idea: 'idea', oh: false }] }, unnest: 1 }]);
```

----------------------------------------

TITLE: TypeScript Class Accessor Errors: 'declare' and Return Value
DESCRIPTION: This snippet demonstrates two common TypeScript compiler errors. TS1031 indicates that the 'declare' modifier is misused on a class element like a getter. TS2378 specifies that a 'get' accessor must always return a value. The example shows a class 'C' with a 'declare get Foo()' which violates these rules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserMemberAccessorDeclaration11.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
    declare get Foo() { }
    
}
```

----------------------------------------

TITLE: TypeScript Arity Variance: Array forEach Example
DESCRIPTION: Demonstrates the common pattern of using Array.prototype.forEach with a callback that only uses a subset of the provided arguments (e.g., only the element). This is accepted by TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/FAQ.md#_snippet_10

LANGUAGE: TypeScript
CODE:
```
let items = [1, 2, 3];
items.forEach(arg => console.log(arg));
```

----------------------------------------

TITLE: TypeScript Getter Error: Missing Return Value
DESCRIPTION: This snippet shows a TypeScript object with a 'get' accessor that fails to return a value. TypeScript's static analysis detects this and reports error TS2378, indicating that a 'get' accessor must return a value. The code provided is the minimal example that reproduces this specific compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserES3Accessors3.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var v = { get Foo() { } };
```

----------------------------------------

TITLE: TypeScript Plugin: Full Example
DESCRIPTION: A comprehensive example of a TypeScript plugin that integrates configuration from tsconfig.json to filter completion entries and includes diagnostic logging. It sets up a proxy for the Language Service and modifies completion results.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Writing-a-Language-Service-Plugin.md#_snippet_8

LANGUAGE: ts
CODE:
```
function init(modules: { typescript: typeof import(""typescript/lib/tsserverlibrary"") }) {
  const ts = modules.typescript;

  function create(info: ts.server.PluginCreateInfo) {
    // Get a list of things to remove from the completion list from the config object.
    // If nothing was specified, we'll just remove 'caller'
    const whatToRemove: string[] = info.config.remove || [""caller""];

    // Diagnostic logging
    info.project.projectService.logger.info(
      ""I'm getting set up now! Check the log for this message.""
    );

    // Set up decorator object
    const proxy: ts.LanguageService = Object.create(null);
    for (let k of Object.keys(info.languageService) as Array<keyof ts.LanguageService>) {
      const x = info.languageService[k]!;
      // @ts-expect-error - JS runtime trickery which is tricky to type tersely
      proxy[k] = (...args: Array<{}>) => x.apply(info.languageService, args);
    }

    // Remove specified entries from completion list
    proxy.getCompletionsAtPosition = (fileName, position, options) => {
      const prior = info.languageService.getCompletionsAtPosition(fileName, position, options);
      if (!prior) return

      const oldLength = prior.entries.length;
      prior.entries = prior.entries.filter(e => whatToRemove.indexOf(e.name) < 0);

      // Sample logging for diagnostic purposes
      if (oldLength !== prior.entries.length) {
        const entriesRemoved = oldLength - prior.entries.length;
        info.project.projectService.logger.info(
          `Removed ${entriesRemoved} entries from the completion list`
        );
      }

      return prior;
    };

    return proxy;
  }

  return { create };
}

export = init;
```

----------------------------------------

TITLE: ChainedArray Methods
DESCRIPTION: Provides a comprehensive list of utility methods for array manipulation and transformation, allowing for chained operations on array-like structures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_32

LANGUAGE: APIDOC
CODE:
```
ChainedArray<T>:
  sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
  sortBy(propertyName: string): ChainedArray<T>;
    Description: Sorts the array based on the result of an iterator function or a specified property name.
    Parameters:
      - iterator: A function to execute for each element or a string property name.
      - context: The context (`this`) to bind to the iterator function.
    Returns: A new ChainedArray containing the sorted elements.

  groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
  groupBy(propertyName: string): ChainedDictionary<any[]>;
    Description: Groups elements into a dictionary based on the result of an iterator function or a property name.
    Parameters:
      - iterator: A function to execute for each element or a string property name (optional).
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedDictionary where keys are group identifiers and values are arrays of elements.

  countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
  countBy(propertyName: string): ChainedDictionary<number>;
    Description: Counts the occurrences of elements based on the result of an iterator function or a property name.
    Parameters:
      - iterator: A function to execute for each element or a string property name (optional).
      - context: The context (`this`) to bind to the iterator function.
    Returns: A ChainedDictionary mapping group identifiers to their counts.

  shuffle(): ChainedArray<T>;
    Description: Randomly shuffles the order of elements in the array.
    Returns: A new ChainedArray with elements in a random order.

  toArray(): ChainedArray<T>;
    Description: Converts the chained object back into a standard array.
    Returns: A standard JavaScript array.

  size(): ChainedObject<number>;
    Description: Returns the number of elements in the array.
    Returns: A ChainedObject containing the size (number).

  first(): ChainedObject<T>;
  first(count: number): ChainedArray<T>;
    Description: Retrieves the first element or the first 'count' elements from the array.
    Parameters:
      - count: The number of elements to retrieve (optional).
    Returns: The first element or a ChainedArray of the first 'count' elements.

  head(): ChainedObject<T>;
  head(count: number): ChainedArray<T>;
    Description: Alias for `first()`. Retrieves the first element or the first 'count' elements.
    Parameters:
      - count: The number of elements to retrieve (optional).
    Returns: The first element or a ChainedArray of the first 'count' elements.

  take(): ChainedObject<T>;
  take(count: number): ChainedArray<T>;
    Description: Alias for `first()`. Retrieves the first element or the first 'count' elements.
    Parameters:
      - count: The number of elements to retrieve (optional).
    Returns: The first element or a ChainedArray of the first 'count' elements.

  initial(): ChainedObject<T>;
  initial(count: number): ChainedArray<T>;
    Description: Retrieves all elements except the last one, or all elements except the last 'count' elements.
    Parameters:
      - count: The number of elements to exclude from the end (optional).
    Returns: A ChainedArray containing elements excluding the last one(s).

  last(): ChainedObject<T>;
  last(count: number): ChainedArray<T>;
    Description: Retrieves the last element or the last 'count' elements from the array.
    Parameters:
      - count: The number of elements to retrieve from the end (optional).
    Returns: The last element or a ChainedArray of the last 'count' elements.

  rest(index?: number): ChainedArray<T>;
    Description: Retrieves all elements from a specified index onwards.
    Parameters:
      - index: The starting index (optional, defaults to 1).
    Returns: A ChainedArray containing elements from the specified index.

  compact(): ChainedArray<T>;
    Description: Removes all falsy values (false, null, 0, """", undefined, NaN) from the array.
    Returns: A new ChainedArray with falsy values removed.

  flatten<U>(shallow?: boolean): ChainedArray<U>;
    Description: Flattens the array into a single level. If `shallow` is true, only flattens one level.
    Parameters:
      - shallow: If true, flattens only the first level of nested arrays (optional).
    Returns: A new ChainedArray with flattened elements.

  without(...values: T[]): ChainedArray<T>;
    Description: Creates a new array excluding all given values.
    Parameters:
      - values: The values to exclude from the array.
    Returns: A new ChainedArray with specified values removed.

  union(...arrays: T[][]): ChainedArray<T>;
    Description: Computes the union of the array and other arrays, returning unique values.
    Parameters:
      - arrays: Other arrays to compute the union with.
    Returns: A new ChainedArray containing unique elements from all input arrays.

  intersection(...arrays: T[][]): ChainedArray<T>;
    Description: Computes the intersection of the array and other arrays, returning common unique values.
    Parameters:
      - arrays: Other arrays to compute the intersection with.
    Returns: A new ChainedArray containing unique elements present in all input arrays.

  difference(...others: T[][]): ChainedArray<T>;
    Description: Computes the difference between the array and other arrays, returning elements present only in the first array.
    Parameters:
      - others: Other arrays to compute the difference with.
    Returns: A new ChainedArray containing elements unique to the first array.

  uniq(isSorted?: boolean): ChainedArray<T>;
  uniq<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
    Description: Creates a duplicate-free version of the array. If `isSorted` is true, assumes the array is sorted for efficiency. An optional iterator can be used for custom uniqueness checks.
    Parameters:
      - isSorted: Flag indicating if the array is sorted (optional).
      - iterator: A function to generate the criterion for uniqueness (optional).
      - context: The context (`this`) to bind to the iterator function.
    Returns: A new ChainedArray with duplicate elements removed.

  unique(isSorted?: boolean): ChainedArray<T>;
  unique<U>(isSorted: boolean, iterator: Iterator_<T, U>, context?: any): ChainedArray<U>;
    Description: Alias for `uniq()`. Creates a duplicate-free version of the array.
    Parameters:
      - isSorted: Flag indicating if the array is sorted (optional).
      - iterator: A function to generate the criterion for uniqueness (optional).
      - context: The context (`this`) to bind to the iterator function.
    Returns: A new ChainedArray with duplicate elements removed.

  zip(...arrays: any[][]): ChainedArray<any[]>;
    Description: Creates an array of grouped elements, the first of which contains the first elements of the given arrays, the second of which contains the second elements, and so on.
    Parameters:
      - arrays: The arrays to zip together.
    Returns: A new ChainedArray where each element is an array of corresponding elements from the input arrays.

  object(): ChainedObject<any>;
  object(values: any[]): ChainedObject<any>;
    Description: Creates an object from a list of key-value pairs or from two arrays (keys and values).
    Parameters:
      - values: An array of values to pair with keys (optional).
    Returns: A ChainedObject representing the created object.

  indexOf(value: T, isSorted?: boolean): ChainedObject<number>;
    Description: Returns the index at which a given element can be found in the array, or -1 if it is not present. If `isSorted` is true, uses a binary search.
    Parameters:
      - value: The value to search for.
      - isSorted: Flag indicating if the array is sorted (optional).
    Returns: The index of the element or -1.

  lastIndexOf(value: T, fromIndex?: number): ChainedObject<number>;
    Description: Returns the index of the last occurrence of a given element in the array, or -1 if it is not present. Search starts from `fromIndex`.
    Parameters:
      - value: The value to search for.
      - fromIndex: The index to start the search from (optional).
    Returns: The index of the last occurrence of the element or -1.

  sortedIndex(obj: T, propertyName: string): ChainedObject<number>;
  sortedIndex(obj: T, iterator?: Iterator_<T, any>, context?: any): ChainedObject<number>;
    Description: Returns the index at which a given element should be inserted into a sorted array to maintain order. Can use a property name or an iterator function for comparison.
    Parameters:
      - obj: The value to search for.
      - propertyName: The property name to use for sorting (if applicable).
      - iterator: A function to generate the criterion for sorting (optional).
      - context: The context (`this`) to bind to the iterator function.
    Returns: The index where the element should be inserted.

  // Methods from Array
  concat(...items: T[]): ChainedArray<T>;
    Description: Concatenates the array with other arrays or values.
    Parameters:
      - items: The values or arrays to concatenate.
    Returns: A new ChainedArray with concatenated elements.

  join(separator?: string): ChainedObject<string>;
    Description: Joins all elements of the array into a string, separated by a specified separator.
    Parameters:
      - separator: The string to use as a separator (optional, defaults to ',').
    Returns: A ChainedObject containing the joined string.

  pop(): ChainedObject<T>;
    Description: Removes and returns the last element of the array.
    Returns: A ChainedObject containing the removed last element.

  push(...items: T[]): ChainedObject<number>;
    Description: Adds one or more elements to the end of the array.
    Parameters:
      - items: The elements to add.
    Returns: A ChainedObject containing the new length of the array.

  reverse(): ChainedArray<T>;
    Description: Reverses the order of elements in the array in place.
    Returns: The reversed ChainedArray.

  shift(): ChainedObject<T>;
    Description: Removes and returns the first element of the array.
    Returns: A ChainedObject containing the removed first element.

  slice(start: number, end?: number): ChainedArray<T>;
    Description: Returns a shallow copy of a portion of the array into a new array object.
    Parameters:
      - start: The beginning index of the slice.
      - end: The end index of the slice (exclusive).
    Returns: A new ChainedArray containing the sliced elements.

  sort(compareFn?: (a: T, b: T) => number): ChainedArray<T>;
    Description: Sorts the elements of the array in place. A compare function can be provided.
    Parameters:
      - compareFn: A function that defines the sort order.
    Returns: The sorted ChainedArray.

  splice(start: number): ChainedArray<T>;
  splice(start: number, deleteCount: number, ...items: T[]): ChainedArray<T>;
    Description: Changes the contents of an array by removing or replacing existing elements and/or adding new elements in place.
    Parameters:
      - start: The index at which to start changing the array.
      - deleteCount: The number of elements to remove.
      - items: The elements to add to the array.
    Returns: A ChainedArray containing the deleted elements.

  unshift(...items: T[]): ChainedObject<number>;
    Description: Adds one or more elements to the beginning of the array.
    Parameters:
      - items: The elements to add.
    Returns: A ChainedObject containing the new length of the array.

  // Methods from ChainedObject with promoted return types
  extend(...sources: any[]): ChainedArray<T>;
    Description: Merges properties from one or more source objects into the current array-like object.
    Parameters:
      - sources: The source objects to merge properties from.
    Returns: A new ChainedArray with extended properties.

  pick(...keys: string[]): ChainedArray<T>;
    Description: Creates a new array containing only the elements corresponding to the specified keys.
    Parameters:
      - keys: The keys of the elements to pick.
    Returns: A new ChainedArray with picked elements.

  omit(...keys: string[]): ChainedArray<T>;
    Description: Creates a new array excluding the elements corresponding to the specified keys.
    Parameters:
      - keys: The keys of the elements to omit.
    Returns: A new ChainedArray with omitted elements.

  defaults(...defaults: any[]): ChainedArray<T>;
    Description: Fills in unspecified properties of the array-like object with values from the default objects.
    Parameters:
      - defaults: The default objects to use.
    Returns: A new ChainedArray with default properties applied.

  clone(): ChainedArray<T>;
    Description: Creates a shallow clone of the array.
    Returns: A new ChainedArray that is a clone of the original.

  tap(interceptor: (object: T[]) => void): ChainedArray<T>;
    Description: Invokes `interceptor` with the array and returns the array itself. Useful for performing side effects.
    Parameters:
      - interceptor: A function to execute with the array as an argument.
    Returns: The original ChainedArray.

```

----------------------------------------

TITLE: Run Container as Specific User and Directory
DESCRIPTION: Starts an interactive `bash` session in a Node.js container, running as the `node` user and setting the working directory to `/home/node`. This is useful for simulating user-specific environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_3

LANGUAGE: docker
CODE:
```
docker run -it --rm -u node -w /home/node node bash
```

----------------------------------------

TITLE: TypeScript Collection Interface Methods
DESCRIPTION: This documentation outlines the methods provided by a TypeScript collection interface, enabling operations such as getting, setting, converting, filtering, mapping, and reducing collection data. It covers basic accessors, deep value retrieval, persistent updates, conversions to JavaScript types and other collection types, iteration, sequence algorithms, side effects, subset creation, combination, reduction, and searching.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_21

LANGUAGE: APIDOC
CODE:
```
Collection Interface Methods:

// Basic Accessors
get(key: K): V | undefined;
  - Retrieves a value by its key.
  - Parameters:
    - key: The key of the element to retrieve.
  - Returns: The value associated with the key, or undefined if not found.

has(key: K): boolean;
  - Checks if a key exists in the collection.
  - Parameters:
    - key: The key to check for.
  - Returns: True if the key exists, false otherwise.

includes(value: V): boolean;
  - Checks if a value exists in the collection.
  - Parameters:
    - value: The value to search for.
  - Returns: True if the value exists, false otherwise.

contains(value: V): boolean;
  - Alias for includes.
  - Parameters:
    - value: The value to search for.
  - Returns: True if the value exists, false otherwise.

first(): V | undefined;
  - Retrieves the first value in the collection.
  - Returns: The first value, or undefined if the collection is empty.

last(): V | undefined;
  - Retrieves the last value in the collection.
  - Returns: The last value, or undefined if the collection is empty.

// Reading deep values
getIn(searchKeyPath: Iterable<any>, notSetValue?: any): any;
  - Retrieves a value from a nested structure using a path.
  - Parameters:
    - searchKeyPath: An iterable representing the path to the value.
    - notSetValue: The value to return if the path is not found (optional).
  - Returns: The value at the specified path, or notSetValue.

hasIn(searchKeyPath: Iterable<any>): boolean;
  - Checks if a value exists at a nested path.
  - Parameters:
    - searchKeyPath: An iterable representing the path to check.
  - Returns: True if the path exists, false otherwise.

// Persistent changes
update<R>(updater: (value: this) => R): R;
  - Applies an update function to the collection and returns the result.
  - Parameters:
    - updater: A function that receives the current collection and returns a new value or collection.
  - Returns: The result of the updater function.

// Conversion to JavaScript types
toJS(): Array<any> | { [key: string]: any };
  - Converts the collection to a plain JavaScript Array or Object.
  - Returns: A plain JavaScript Array or Object representation.

toJSON(): Array<V> | { [key: string]: V };
  - Converts the collection to a JSON-serializable format.
  - Returns: A JSON-serializable Array or Object.

toArray(): Array<V>;
  - Converts the collection to a JavaScript Array.
  - Returns: A JavaScript Array of the collection's values.

toObject(): { [key: string]: V };
  - Converts the collection to a JavaScript Object (key-value pairs).
  - Returns: A JavaScript Object.

// Conversion to Collections
toSortedMap(): Map<K, V>;
  - Converts the collection to a Map.
  - Returns: A Map.

toOrderedMap(): OrderedMap<K, V>;
  - Converts the collection to an OrderedMap.
  - Returns: An OrderedMap.

toSet(): Set<V>;
  - Converts the collection to a Set.
  - Returns: A Set.

toOrderedSet(): OrderedSet<V>;
  - Converts the collection to an OrderedSet.
  - Returns: An OrderedSet.

toList(): List<V>;
  - Converts the collection to a List.
  - Returns: A List.

toStack(): Stack<V>;
  - Converts the collection to a Stack.
  - Returns: A Stack.

// Conversion to Seq
toSeq(): this;
  - Converts the collection to a Seq.
  - Returns: A Seq representation of the collection.

toKeyedSeq(): Seq.Keyed<K, V>;
  - Converts the collection to a Keyed Seq.
  - Returns: A Keyed Seq.

toIndexedSeq(): Seq.Indexed<V>;
  - Converts the collection to an Indexed Seq.
  - Returns: An Indexed Seq.

toSetSeq(): Seq.Set<V>;
  - Converts the collection to a Set Seq.
  - Returns: A Set Seq.

// Iterators
keys(): IterableIterator<K>;
  - Returns an iterator for the collection's keys.
  - Returns: An IterableIterator of keys.

values(): IterableIterator<V>;
  - Returns an iterator for the collection's values.
  - Returns: An IterableIterator of values.

entries(): IterableIterator<[K, V]>;
  - Returns an iterator for the collection's key-value pairs.
  - Returns: An IterableIterator of [key, value] tuples.

// Collections (Seq)
keySeq(): Seq.Indexed<K>;
  - Returns a Seq of the collection's keys.
  - Returns: An Indexed Seq of keys.

valueSeq(): Seq.Indexed<V>;
  - Returns a Seq of the collection's values.
  - Returns: An Indexed Seq of values.

entrySeq(): Seq.Indexed<[K, V]>;
  - Returns a Seq of the collection's key-value pairs.
  - Returns: An Indexed Seq of [key, value] tuples.

// Sequence algorithms
map<M>(mapper: (value: V, key: K, iter: this) => M, context?: any): Collection<K, M>;
  - Transforms each element of the collection using a mapping function.
  - Parameters:
    - mapper: A function that transforms a value, key, and the collection itself.
    - context: An optional context for the mapper function.
  - Returns: A new collection with transformed values.

filter<F extends V>(predicate: (value: V, key: K, iter: this) => value is F, context?: any): Collection<K, F>;
filter(predicate: (value: V, key: K, iter: this) => any, context?: any): this;
  - Creates a new collection containing only elements that satisfy the predicate.
  - Parameters:
    - predicate: A function that returns true for elements to keep.
    - context: An optional context for the predicate function.
  - Returns: A new collection with filtered elements.

filterNot(predicate: (value: V, key: K, iter: this) => boolean, context?: any): this;
  - Creates a new collection containing only elements that do NOT satisfy the predicate.
  - Parameters:
    - predicate: A function that returns true for elements to exclude.
    - context: An optional context for the predicate function.
  - Returns: A new collection with filtered elements.

reverse(): this;
  - Reverses the order of elements in the collection.
  - Returns: The collection with elements reversed.

sort(comparator?: (valueA: V, valueB: V) => number): this;
  - Sorts the collection using an optional comparator function.
  - Parameters:
    - comparator: A function to compare two values.
  - Returns: The collection with elements sorted.

sortBy<C>(comparatorValueMapper: (value: V, key: K, iter: this) => C, comparator?: (valueA: C, valueB: C) => number): this;
  - Sorts the collection based on a mapped value using an optional comparator.
  - Parameters:
    - comparatorValueMapper: A function to map values for comparison.
    - comparator: A function to compare the mapped values.
  - Returns: The collection with elements sorted.

groupBy<G>(grouper: (value: V, key: K, iter: this) => G, context?: any): /*Map*/Seq.Keyed<G, /*this*/Collection<K, V>>;
  - Groups elements of the collection based on a grouper function.
  - Parameters:
    - grouper: A function that returns the group key for each element.
    - context: An optional context for the grouper function.
  - Returns: A keyed sequence where keys are group identifiers and values are collections of elements.

// Side effects
forEach(sideEffect: (value: V, key: K, iter: this) => any, context?: any): number;
  - Executes a side effect function for each element in the collection.
  - Parameters:
    - sideEffect: The function to execute for each element.
    - context: An optional context for the side effect function.
  - Returns: The number of elements iterated over.

// Creating subsets
slice(begin?: number, end?: number): this;
  - Creates a shallow copy of a portion of the collection.
  - Parameters:
    - begin: The index to start slicing from (inclusive).
    - end: The index to end slicing at (exclusive).
  - Returns: A new collection representing the slice.

rest(): this;
  - Returns a new collection containing all elements except the first.
  - Returns: A new collection.

butLast(): this;
  - Returns a new collection containing all elements except the last.
  - Returns: A new collection.

skip(amount: number): this;
  - Returns a new collection skipping the first 'amount' elements.
  - Parameters:
    - amount: The number of elements to skip.
  - Returns: A new collection.

skipLast(amount: number): this;
  - Returns a new collection skipping the last 'amount' elements.
  - Parameters:
    - amount: The number of elements to skip from the end.
  - Returns: A new collection.

skipWhile(predicate: (value: V, key: K, iter: this) => boolean, context?: any): this;
  - Returns a new collection skipping elements from the beginning while the predicate is true.
  - Parameters:
    - predicate: The condition to check for skipping.
    - context: An optional context for the predicate.
  - Returns: A new collection.

skipUntil(predicate: (value: V, key: K, iter: this) => boolean, context?: any): this;
  - Returns a new collection skipping elements from the beginning until the predicate is true.
  - Parameters:
    - predicate: The condition to stop skipping.
    - context: An optional context for the predicate.
  - Returns: A new collection.

take(amount: number): this;
  - Returns a new collection containing the first 'amount' elements.
  - Parameters:
    - amount: The number of elements to take.
  - Returns: A new collection.

takeLast(amount: number): this;
  - Returns a new collection containing the last 'amount' elements.
  - Parameters:
    - amount: The number of elements to take from the end.
  - Returns: A new collection.

takeWhile(predicate: (value: V, key: K, iter: this) => boolean, context?: any): this;
  - Returns a new collection taking elements from the beginning while the predicate is true.
  - Parameters:
    - predicate: The condition to check for taking.
    - context: An optional context for the predicate.
  - Returns: A new collection.

takeUntil(predicate: (value: V, key: K, iter: this) => boolean, context?: any): this;
  - Returns a new collection taking elements from the beginning until the predicate is true.
  - Parameters:
    - predicate: The condition to stop taking.
    - context: An optional context for the predicate.
  - Returns: A new collection.

// Combination
concat(...valuesOrCollections: Array<any>): Collection<any, any>;
  - Concatenates the collection with other values or collections.
  - Parameters:
    - valuesOrCollections: Values or collections to concatenate.
  - Returns: A new collection containing all concatenated elements.

flatten(depth?: number): Collection<any, any>;
flatten(shallow?: boolean): Collection<any, any>;
  - Flattens the collection to a specified depth or shallowly.
  - Parameters:
    - depth: The depth to flatten (optional).
    - shallow: Boolean indicating shallow flattening (optional).
  - Returns: A new, flattened collection.

flatMap<M>(mapper: (value: V, key: K, iter: this) => Iterable<M>, context?: any): Collection<K, M>;
  - Maps each element to an iterable and then flattens the result.
  - Parameters:
    - mapper: A function that maps an element to an iterable.
    - context: An optional context for the mapper.
  - Returns: A new collection with mapped and flattened elements.

// Reducing a value
reduce<R>(reducer: (reduction: R, value: V, key: K, iter: this) => R, initialReduction: R, context?: any): R;
reduce<R>(reducer: (reduction: V | R, value: V, key: K, iter: this) => R): R;
  - Reduces the collection to a single value by applying a reducer function.
  - Parameters:
    - reducer: The function to apply for reduction.
    - initialReduction: The initial value for the reduction.
    - context: An optional context for the reducer.
  - Returns: The final reduced value.

reduceRight<R>(reducer: (reduction: R, value: V, key: K, iter: this) => R, initialReduction: R, context?: any): R;
reduceRight<R>(reducer: (reduction: V | R, value: V, key: K, iter: this) => R): R;
  - Reduces the collection from right to left.
  - Parameters:
    - reducer: The function to apply for reduction.
    - initialReduction: The initial value for the reduction.
    - context: An optional context for the reducer.
  - Returns: The final reduced value.

every(predicate: (value: V, key: K, iter: this) => boolean, context?: any): boolean;
  - Checks if all elements in the collection satisfy the predicate.
  - Parameters:
    - predicate: The condition to check.
    - context: An optional context for the predicate.
  - Returns: True if all elements satisfy the predicate, false otherwise.

some(predicate: (value: V, key: K, iter: this) => boolean, context?: any): boolean;
  - Checks if at least one element in the collection satisfies the predicate.
  - Parameters:
    - predicate: The condition to check.
    - context: An optional context for the predicate.
  - Returns: True if at least one element satisfies the predicate, false otherwise.

join(separator?: string): string;
  - Joins all elements of the collection into a string, separated by a separator.
  - Parameters:
    - separator: The string to use as a separator (optional).
  - Returns: A string representation of the joined elements.

isEmpty(): boolean;
  - Checks if the collection is empty.
  - Returns: True if the collection is empty, false otherwise.

count(): number;
count(predicate: (value: V, key: K, iter: this) => boolean, context?: any): number;
  - Returns the number of elements in the collection, optionally filtered by a predicate.
  - Parameters:
    - predicate: An optional function to count only elements that satisfy it.
    - context: An optional context for the predicate.
  - Returns: The count of elements.

countBy<G>(grouper: (value: V, key: K, iter: this) => G, context?: any): Map<G, number>;
  - Counts the occurrences of elements grouped by a grouper function.
  - Parameters:
    - grouper: A function that returns the group key for each element.
    - context: An optional context for the grouper.
  - Returns: A Map where keys are group identifiers and values are counts.

// Search for value
find(predicate: (value: V, key: K, iter: this) => boolean, context?: any, notSetValue?: V): V | undefined;
  - Finds the first element that satisfies the predicate.
  - Parameters:
    - predicate: The condition to find.
    - context: An optional context for the predicate.
    - notSetValue: The value to return if no element is found (optional).
  - Returns: The first matching element, or notSetValue.

findLast(predicate: (value: V, key: K, iter: this) => boolean, context?: any, notSetValue?: V): V | undefined;
  - Finds the last element that satisfies the predicate.
  - Parameters:
    - predicate: The condition to find.
    - context: An optional context for the predicate.
    - notSetValue: The value to return if no element is found (optional).
  - Returns: The last matching element, or notSetValue.

findEntry(predicate: (value: V, key: K, iter: this) => boolean, context?: any, notSetValue?: V): [K, V] | undefined;
  - Finds the key-value pair of the first element that satisfies the predicate.
  - Parameters:
    - predicate: The condition to find.
    - context: An optional context for the predicate.
    - notSetValue: The value to return if no element is found (optional).
  - Returns: The [key, value] pair of the first matching element, or notSetValue.

findLastEntry(predicate: (value: V, key: K, iter: this) => boolean, context?: any, notSetValue?: V): [K, V] | undefined;
  - Finds the key-value pair of the last element that satisfies the predicate.
  - Parameters:
    - predicate: The condition to find.
    - context: An optional context for the predicate.
    - notSetValue: The value to return if no element is found (optional).
  - Returns: The [key, value] pair of the last matching element, or notSetValue.

findKey(predicate: (value: V, key: K, iter: this) => boolean, context?: any): K | undefined;
  - Finds the key of the first element that satisfies the predicate.
  - Parameters:
    - predicate: The condition to find.
    - context: An optional context for the predicate.
  - Returns: The key of the first matching element, or undefined.

findLastKey(predicate: (value: V, key: K, iter: this) => boolean, context?: any): K | undefined;
  - Finds the key of the last element that satisfies the predicate.
  - Parameters:
    - predicate: The condition to find.
    - context: An optional context for the predicate.
  - Returns: The key of the last matching element, or undefined.

keyOf(searchValue: V): K | undefined;
  - Finds the key associated with a given value.
  - Parameters:
    - searchValue: The value to search for.
  - Returns: The key of the value, or undefined if not found.
```

----------------------------------------

TITLE: Completion Service Workflow
DESCRIPTION: Describes the high-level steps taken by the TypeScript language service to generate code completions. It involves fetching data, transforming it, and constructing the final completion information.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/codebase/services/Codebase-Services-Completions.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Completions Workflow:

1.  `getCompletionsAtPosition(sourceFile, position)`: Entry point, returns `CompletionInfo`.
2.  `getCompletionData(sourceFile, position)`: Gathers raw completion data, including symbols.
    -   Identifies a `contextToken` (preceding token) to determine relevant suggestions.
    -   Dives into preceding identifiers to find the responsible item (`node`).
3.  Transforms `CompletionData` based on its kind:
    -   `JSDoc`: Calls `jsdocCompletionInfo`.
    -   `Keywords`: Calls `specificKeywordCompletionInfo`.
    -   `Data` (general): Calls `completionInfoFromData`.
4.  `completionInfoFromData`: Constructs `CompletionEntry` objects from symbols using `getCompletionEntriesFromSymbols`.
```

----------------------------------------

TITLE: TypeScript AST Visitor API Changes
DESCRIPTION: Explains modifications to public AST visitor APIs due to the compiler's adoption of `strictFunctionTypes`. This includes changes to `VisitResult` and how visitors should handle potential `undefined` return values.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
AST Visitor API:

- Compiler Strictness: The TypeScript compiler is now compiled with `strictFunctionTypes`.
- Visitor API Modifications: Public AST visitor APIs have been adjusted to better reflect underlying guarantees and improve compatibility with `strict` mode.
- `VisitResult` Type: No longer `undefined` by default. Visitors returning `undefined` may need to be explicitly typed as `VisitResult<Node | undefined>`.
- Return Type Handling: Visitor-using APIs now correctly reflect output types, including type guard results and potential `undefined` values. Users may need to add explicit checks for `undefined` or modify visitors to return more specific types.

Example:
```typescript
// Old (potentially): VisitResult<Node>
// New (if undefined is possible): VisitResult<Node | undefined>
```
```

----------------------------------------

TITLE: JavaScript Map File Example
DESCRIPTION: An example of a JavaScript file with a .js.map extension, typically used for source maps.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJs.errors.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
function foo() {
}

```

----------------------------------------

TITLE: Run Container with Custom Command
DESCRIPTION: Starts an interactive session in a Node.js container and overrides the default entrypoint to launch a `bash` shell. This allows executing custom commands within the container before it exits.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_2

LANGUAGE: docker
CODE:
```
docker run -it --rm node bash
```

----------------------------------------

TITLE: Static Utility Functions
DESCRIPTION: Provides static methods for creating chained objects and performing common collection operations. These functions serve as entry points for utility operations on arrays, objects, and functions, offering a functional programming approach to data manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_35

LANGUAGE: APIDOC
CODE:
```
Static Interface:

<T>(list: T[]): WrappedArray<T>;
<T>(list: Dictionary<T>): WrappedDictionary<T>;
<T extends Function>(func: T): WrappedFunction<T>;
<T>(obj: T): WrappedObject<T>;
  - Creates a wrapped object that provides chaining capabilities for various data types.

chain<T>(list: T[]): ChainedArray<T>;
chain<T>(list: Dictionary<T>): ChainedDictionary<T>;
chain<T>(obj: T): ChainedObject<T>;
  - Explicitly wraps an object for chaining.

each<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
each<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
forEach<T>(list: T[], iterator: Iterator_<T, void>, context?: any): void;
forEach<T>(list: Dictionary<T>, iterator: Iterator_<T, void>, context?: any): void;
  - Iterates over elements of a collection, executing an iterator function for each element.

map<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
map<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
collect<T, U>(list: T[], iterator: Iterator_<T, U>, context?: any): U[];
collect<T, U>(list: Dictionary<T>, iterator: Iterator_<T, U>, context?: any): U[];
  - Creates an array of values by running each element of the collection through the iterator.

reduce<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
reduce<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
reduce<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
reduce<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
foldl<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
foldl<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
foldl<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
foldl<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
inject<T>(list: T[], iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
inject<T, U>(list: T[], iterator: Reducer<T, U>, initialValue: U, context?: any): U;
inject<T>(list: Dictionary<T>, iterator: Reducer<T, T>, initialValue?: T, context?: any): T;
inject<T, U>(list: Dictionary<T>, iterator: Reducer<T, U>, initialValue: U, context?: any): U;
  - Reduces the collection to a value which is the accumulated result of running each element through an iterator.

```

----------------------------------------

TITLE: TypeScript Class Constructors with Callback Function Parameters
DESCRIPTION: Demonstrates TypeScript class constructors taking a function parameter that accepts an array of 'Base' and returns any.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_34

LANGUAGE: typescript
CODE:
```
class x95 { constructor(parm: (s: Base[]) => any = n => { var n: Base[]; return null; }) { } }
class x107 { constructor(public parm: (s: Base[]) => any = n => { var n: Base[]; return null; }) { } }
class x119 { constructor(private parm: (s: Base[]) => any = n => { var n: Base[]; return null; }) { } }
```

----------------------------------------

TITLE: TypeScript Contextual Typing: Type Annotated Expression
DESCRIPTION: Demonstrates contextual typing applied to expressions using type assertions (angle-bracket syntax). The asserted type guides the type checking of the expression.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.errors.txt#_snippet_11

LANGUAGE: typescript
CODE:
```
interface IFoo {
    n: number;
    s: string;
    f(i: number, s: string): string;
    a: number[];
}

interface IBar {
    foo: IFoo;
}

// CONTEXT: Type annotated expression
var c12t1 = <(s: string) => string> (function(s) { return s });
var c12t2 = <IFoo> ({ n: 1 });
var c12t3 = <number[]> []
```

----------------------------------------

TITLE: TypeScript: async generator get accessor error
DESCRIPTION: Illustrates a TypeScript syntax error (TS1005) when defining a getter accessor with the 'async *' modifier. Async generator syntax is not permitted for accessors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parser.asyncGenerators.classMethods.es2018.errors.txt#_snippet_22

LANGUAGE: typescript
CODE:
```
class C23 {
    async * get x() {
                ~
!!! error TS1005: '(' expected.
        return 1;
    }
}
```

----------------------------------------

TITLE: TypeScript Entry Point Changes
DESCRIPTION: Details changes to the main entry points for the TypeScript package, recommending migration from `tsserverlibrary.js` to `typescript.js` for broader compatibility and modern usage.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Entry Points:

- typescript.js: The recommended entry point for the npm package.
- tsserverlibrary.js: Now a thin wrapper around typescript.js. Previously supported loading in non-CJS contexts, but this is no longer supported.

Migration Recommendation:
Switch to using `typescript.js` where possible. If `tsserverlibrary.js` was used as a browser global, it will now throw an error due to inability to load scripts generically. Use `typescript.js` instead.
```

----------------------------------------

TITLE: Project Dependency Structure Example
DESCRIPTION: Illustrates a project setup with nested node_modules and symlinks, which can lead to type resolution issues in TypeScript when inferring types across different dependency versions.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/FAQ.md#_snippet_28

LANGUAGE: text
CODE:
```
|- /my_package_1
|-- /node_modules
|---- /other_package <- direct dependency
|------ index.d.ts
|------ /node_modules
|-------- /sub_dep <- symlink!
|---------- index.d.ts
|-- /src
|---- tsconfig.json  <- project root
|---- foo.ts         <- a source file that imports the above file
```

----------------------------------------

TITLE: Docker Port Forwarding for Debugging
DESCRIPTION: Starts a Docker container and forwards port 9242 from the container to port 9229 on the host. This is crucial for attaching a debugger from the host machine to the process running inside the container.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_7

LANGUAGE: bash
CODE:
```
docker run ...same... -p 9229:9242 node bash
```

----------------------------------------

TITLE: Immutable.js Record API
DESCRIPTION: Documentation for the Record module, providing interfaces and methods for creating and managing immutable record data structures with named fields.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_11

LANGUAGE: APIDOC
CODE:
```
Record.Class<T>
  // Constructor for creating Record instances
  (values?: Partial<T> | Iterable<[string, any]>): Instance<T> & Readonly<T>;
  new (values?: Partial<T> | Iterable<[string, any]>): Instance<T> & Readonly<T>;

Record.Instance<T>
  readonly size: number;
  // Reading values
  has(key: string): boolean;
  get<K extends keyof T>(key: K): T[K];
  // Reading deep values
  hasIn(keyPath: Iterable<any>): boolean;
  getIn(keyPath: Iterable<any>): any;
  // Value equality
  equals(other: any): boolean;
  hashCode(): number;
  // Persistent changes
  set<K extends keyof T>(key: K, value: T[K]): this;
  update<K extends keyof T>(key: K, updater: (value: T[K]) => T[K]): this;
  merge(...collections: Array<Partial<T> | Iterable<[string, any]>>): this;
  mergeDeep(...collections: Array<Partial<T> | Iterable<[string, any]>>): this;
  mergeWith(merger: (oldVal: any, newVal: any, key: keyof T) => any, ...collections: Array<Partial<T> | Iterable<[string, any]>>): this;
  mergeDeepWith(merger: (oldVal: any, newVal: any, key: any) => any, ...collections: Array<Partial<T> | Iterable<[string, any]>>): this;
  delete<K extends keyof T>(key: K): this;
  remove<K extends keyof T>(key: K): this;
  clear(): this;
  // Deep persistent changes
  setIn(keyPath: Iterable<any>, value: any): this;
  updateIn(keyPath: Iterable<any>, updater: (value: any) => any): this;
  mergeIn(keyPath: Iterable<any>, ...collections: Array<any>): this;
  mergeDeepIn(keyPath: Iterable<any>, ...collections: Array<any>): this;
  deleteIn(keyPath: Iterable<any>): this;
  removeIn(keyPath: Iterable<any>): this;
  // Conversion to JavaScript types
  toJS(): { [K in keyof T]: any };
  toJSON(): T;
  toObject(): T;
  // Transient changes
  withMutations(mutator: (mutable: this) => any): this;
  asMutable(): this;
  asImmutable(): this;
  // Sequence algorithms
  toSeq(): Seq.Keyed<keyof T, T[keyof T]>;
  [Symbol.iterator](): IterableIterator<[keyof T, T[keyof T]]>;

// Helper functions for Records
export function Record<T>(defaultValues: T, name?: string): Record.Class<T>;
export function isRecord(maybeRecord: any): maybeRecord is Record.Instance<any>;
export function getDescriptiveName(record: Instance<any>): string;

```

----------------------------------------

TITLE: Run a Specific Node.js Version Container
DESCRIPTION: Starts an interactive session in a Node.js container, specifically using the `12` tag for the image. If no tag is specified, `:latest` is used by default. The container is removed after use.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_1

LANGUAGE: docker
CODE:
```
docker run -it --rm node:12
```

----------------------------------------

TITLE: Sample Project package.json
DESCRIPTION: Defines the dependencies for a sample project used to test a local TypeScript plugin. It includes a 'file:' dependency to link the plugin directly from its source directory.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Writing-a-Language-Service-Plugin.md#_snippet_9

LANGUAGE: json
CODE:
```
{
    ""name"": ""sample_project"",
    ""dependencies"": {
        ""your_plugin"": ""file:.."",
        ""typescript"": ""^4.4.3""
    }
}
```

----------------------------------------

TITLE: Function to Get Multi-Robots in TypeScript
DESCRIPTION: Starts the definition of a TypeScript function named 'getMultiRobots'. The function is intended to return or process the collection of multi-skilled robots.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#_snippet_11

LANGUAGE: TypeScript
CODE:
```
function getMultiRobots() {
```

----------------------------------------

TITLE: TypeScript Class Definition Example
DESCRIPTION: A basic example of a TypeScript class definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithJsEmitPathSameAsInput.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
class c {
    }
    
```

----------------------------------------

TITLE: TypeScript For Loop with Condition and Increment
DESCRIPTION: Shows a for loop in TypeScript that iterates based on a condition. It starts with an existing variable 'k', continues as long as 'k' is less than 10, and increments 'k' in each iteration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationFor.sourcemap.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
for (; k < 10; k++) {
}
```

----------------------------------------

TITLE: TypeScript Rest Parameter with Binding Pattern
DESCRIPTION: Demonstrates the use of rest parameters in TypeScript to capture all arguments into an array, which is then destructured using a binding pattern. This snippet showcases how TypeScript handles function arguments and destructuring.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restParameterWithBindingPattern1.sourcemap.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
function a(...{a, b}: any[]) {
    
}
```

----------------------------------------

TITLE: Run Container with Mounted Volume
DESCRIPTION: Starts an interactive `bash` session in a Node.js container, mounting the host's `c:\foo` directory to `/work` inside the container. Changes made in `/work` will persist on the host.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_4

LANGUAGE: docker
CODE:
```
docker run -it --rm -v c:\foo:/work node bash
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlSubfolderSpecifyOutputFile/node/maprootUrlsourcerootUrlSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Underscore Iteration Functions (each, map, reduce)
DESCRIPTION: Demonstrates the use of Underscore.js functions for iterating over collections (arrays and objects) and transforming them. Includes examples for each, map, reduce, and reduceRight.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
/// <reference path=""underscoreTest1_underscore.ts"" />

declare var $;
declare function alert(x: string): void;

_.each([1, 2, 3], (num) => alert(num.toString()));
_.each({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => alert(value.toString()));

_.map([1, 2, 3], (num) => num * 3);
_.map({ one: 1, two: 2, three: 3 }, (value: number, key?: string) => value * 3);

var sum = _.reduce([1, 2, 3], (memo, num) => memo + num, 0);

var list = [[0, 1], [2, 3], [4, 5]];
var flat = _.reduceRight(list, (a, b) => a.concat(b), []);
```

----------------------------------------

TITLE: TypeScript tsconfig.json Configuration
DESCRIPTION: Configuration file for the TypeScript compiler. This example sets 'allowJs' to true to permit JavaScript files in the project and specifies the maximum depth for Node.js module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/node/nodeModulesMaxDepthIncreased.errors.txt#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""compilerOptions"": {
    ""allowJs"": true,
    ""maxNodeModuleJsDepth"": 3
  }
}
```

----------------------------------------

TITLE: Generic Indexed Access with Null Checks
DESCRIPTION: Shows a generic function 'get' that accesses properties of an object 'A' using a key. It includes a null check for the retrieved value and returns a default if null.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/controlFlowGenericTypes.errors.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
interface A {
    a: number | null;
};

function get<K extends keyof A>(key: K, obj: A): number {
    const value = obj[key];
    if (value !== null) {
        // TypeScript correctly infers 'value' is not null here.
        // If 'A' had other properties, like 'b: string | null', and K was 'b', this would be 'string'.
        // However, the return type is 'number', so this function is specific to properties that are 'number | null'.
        // For a truly generic return, the function signature would need adjustment.
        // Assuming 'A.a' is the primary target for this example:
        if (key === 'a' && typeof value === 'number') {
            return value;
        }
    }
    return 0;
};
```

----------------------------------------

TITLE: Basic TypeScript Import Example
DESCRIPTION: A simple TypeScript file demonstrating how to import a module. This snippet shows the basic syntax for importing external modules, which is fundamental for organizing code in TypeScript projects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathsValidation5.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
import 'someModule';
```

----------------------------------------

TITLE: Example Usage: Machine without Provided Actors
DESCRIPTION: Shows a basic example of creating a machine using `setup` when no specific actors are provided, demonstrating the flexibility of the system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferenceExactOptionalProperties2.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
// no provided actors, `assign` should still work
setup().createMachine({
  entry: assign(() => ({})),
});

```

----------------------------------------

TITLE: JSDoc for Array of Objects with Options
DESCRIPTION: Provides an example of documenting an array of objects, including optional properties and default values for those properties. This pattern is common for configuration arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParamTagTypeLiteral.errors.txt#_snippet_4

LANGUAGE: TypeScript
CODE:
```
/**
 * @param {object[]} opts4
 * @param {string} opts4[].x
 * @param {string=} opts4[].y
 * @param {string} [opts4[].z]
 * @param {string} [opts4[].w=""hi""]
 */
function foo4(opts4) {
    opts4[0].x;
}

foo4([{ x: 'hi' }]);
```

----------------------------------------

TITLE: TypeScript: Async Class Methods
DESCRIPTION: Illustrates how to define asynchronous methods within classes. This includes instance methods that can be called on class instances.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es5.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
class C {
	async m1() { }
	async m2(): Promise<void> { }
	async m3(): MyPromise<void> { }
}
```

----------------------------------------

TITLE: TypeScript: Get Function Length
DESCRIPTION: A utility function that safely retrieves the `.length` property of a method from an object. It checks if the property is indeed a function before accessing its length, returning 0 if it's not a function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexedAccessConstraints.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export function methodFnLength<T extends {}, K extends keyof T>(obj: T, methodKey: K): number {
    const fn = obj[methodKey];
    if (typeof fn !== 'function') {
        return 0;
    }
    return fn.length;
}
```

----------------------------------------

TITLE: Example Usage of Foo Class in TypeScript
DESCRIPTION: Provides an example of how to use the imported 'Foo' class. It instantiates 'Foo' via its static 'make' method, calls the 'doThing' method with a sample object, and assigns the result to an exported variable 'x'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationMapsOutFile.sourcemap.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
// Assuming 'a' and 'index' modules are correctly set up

// In a file that imports 'index'
import { c, Foo, x } from ""index"";

// Example usage:
c.doThing({ a: 42 }); // This line is implied by the structure but not directly shown as executable code in the input
x = c.doThing({ a: 12 });

// To make this runnable, you'd need the actual 'a' module implementation
// For demonstration, let's assume a basic implementation:

// --- Mock implementation for context ---
// declare module ""a"" {
//     export class Foo {
//         doThing(x: { a: number; }): { b: number; };
//         static make(): Foo;
//     }
// }

// class MockFoo implements Foo {
//     doThing(x: { a: number; }): { b: number; } {
//         return { b: x.a };
//     }
//     static make(): Foo {
//         return new MockFoo();
//     }
// }

// declare module ""index"" {
//     import { Foo } from ""a"";
//     export const c: Foo = MockFoo.make();
//     export let x: { b: number; } = c.doThing({ a: 12 });
//     export { c, Foo };
// }
// --- End Mock implementation ---

console.log(x.b); // Expected output: 12
```

----------------------------------------

TITLE: TypeScript Type Assertions with keyof and string
DESCRIPTION: Shows examples of type assertions in TypeScript, specifically casting between 'keyof T' and 'string'. This is often used when interacting with JavaScript APIs or when type information is lost.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/keyofAndIndexedAccess.errors.txt#_snippet_4

LANGUAGE: TypeScript
CODE:
```
function f50<T>(k: keyof T, s: string) {
    const x1 = s as keyof T;
    const x2 = k as string;
}

function f51<T, K extends keyof T>(k: K, s: string) {
    const x1 = s as keyof T;
    const x2 = k as string;
}
```

----------------------------------------

TITLE: JSON: Package Configuration
DESCRIPTION: The package.json file used in the examples, defining the project as a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributes(module=nodenext).errors.txt#_snippet_3

LANGUAGE: json
CODE:
```
{
    ""name"": ""pkg"",
    ""private"": true,
    ""type"": ""module""
}
```

----------------------------------------

TITLE: TypeScript Type and Namespace Usage
DESCRIPTION: Rules for exporting types and functions, managing the global namespace, and organizing shared type definitions to maintain code clarity and prevent pollution.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Coding-guidelines.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
TypeScript Type Usage:

- Exporting: Only export types/functions if they are needed across multiple components.
- Global Namespace: Do not introduce new types/values to the global namespace.
- Shared Types: Define shared types in `types.ts`.
- Type Definition Order: Within a file, type definitions should precede other code.
```

----------------------------------------

TITLE: Define Private Accessor in TypeScript
DESCRIPTION: Demonstrates the declaration of a private accessor in TypeScript. Accessors provide a way to get and set properties, often used to encapsulate private fields.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2022).sourcemap.txt#_snippet_31

LANGUAGE: typescript
CODE:
```
class MyClass {
    accessor z;
}
```

----------------------------------------

TITLE: TypeScript File and Component Structure
DESCRIPTION: Guidelines for organizing code into files and components, emphasizing one logical component per file and specifying conventions for auto-generated files.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Coding-guidelines.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
TypeScript File Structure:

- File per component: Each file should represent one logical component (e.g., parser, scanner).
- Auto-generated files: Files with `.generated.*` suffix are auto-generated and should not be hand-edited.
```

----------------------------------------

TITLE: Contextual Signature Instantiation Examples
DESCRIPTION: Demonstrates how TypeScript infers types in function calls based on the context, particularly with generic functions and overloaded signatures. Includes examples of type mismatches and their resolutions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualSignatureInstantiation.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// TypeScript Spec, section 4.12.2:
// If e is an expression of a function type that contains exactly one generic call signature and no other members,
// and T is a function type with exactly one non - generic call signature and no other members, then any inferences
// made for type parameters referenced by the parameters of T's call signature are fixed, and e's type is changed
// to a function type with e's call signature instantiated in the context of T's call signature (section 3.8.5).

declare function foo<T>(cb: (x: number, y: string) => T): T;
declare function bar<T, U, V>(x: T, y: U, cb: (x: T, y: U) => V): V;
declare function baz<T, U>(x: T, y: T, cb: (x: T, y: T) => U): U;

declare function g<T>(x: T, y: T): T;
declare function h<T, U>(x: T, y: U): T[] | U[];

var a: number;
var a = bar(1, 1, g);      // Should be number
var a = baz(1, 1, g);      // Should be number

var b: number | string;
var b = foo(g);            // Error, number and string are disjoint types
    // !!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'b' must be of type 'string | number', but here has type 'unknown'.
    // !!! related TS6203 contextualSignatureInstantiation.ts:18:5: 'b' was also declared here.
    // !!! error TS2345: Argument of type '<T>(x: T, y: T) => T' is not assignable to parameter of type '(x: number, y: string) => number'.
    // !!! error TS2345:   Types of parameters 'y' and 'y' are incompatible.
    // !!! error TS2345:     Type 'string' is not assignable to type 'number'.
var b = bar(1, ""one"", g);  // Error, number and string are disjoint types
    // !!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'b' must be of type 'string | number', but here has type 'unknown'.
    // !!! related TS6203 contextualSignatureInstantiation.ts:18:5: 'b' was also declared here.
    // !!! error TS2345: Argument of type '<T>(x: T, y: T) => T' is not assignable to parameter of type '(x: number, y: string) => number'.
    // !!! error TS2345:   Types of parameters 'y' and 'y' are incompatible.
    // !!! error TS2345:     Type 'string' is not assignable to type 'number'.
var b = bar(""one"", 1, g);  // Error, number and string are disjoint types
    // !!! error TS2403: Subsequent variable declarations must have the same type.  Variable 'b' must be of type 'string | number', but here has type 'unknown'.
    // !!! related TS6203 contextualSignatureInstantiation.ts:18:5: 'b' was also declared here.
    // !!! error TS2345: Argument of type '<T>(x: T, y: T) => T' is not assignable to parameter of type '(x: string, y: number) => string'.
    // !!! error TS2345:   Types of parameters 'y' and 'y' are incompatible.
    // !!! error TS2345:     Type 'number' is not assignable to type 'string'.
var b = baz(b, b, g);      // Should be number | string

var d: number[] | string[];
var d = foo(h);            // Should be number[] | string[]
var d = bar(1, ""one"", h);  // Should be number[] | string[]
var d = bar(""one"", 1, h);  // Should be number[] | string[]
var d = baz(d, d, g);      // Should be number[] | string[]

```

----------------------------------------

TITLE: TypeScript Generic Function with Options Interface
DESCRIPTION: Illustrates creating a higher-order function that accepts an options object with generic types for parameters, return data, and mapped data. Shows how to define and use such a function with different parameter types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intraExpressionInferences.errors.txt#_snippet_8

LANGUAGE: typescript
CODE:
```
interface Opts<TParams, TDone, TMapped> {
    fetch: (params: TParams, foo: number) => TDone,
    map: (data: TDone) => TMapped
}

function example<TParams, TDone, TMapped>(options: Opts<TParams, TDone, TMapped>) {
    return (params: TParams) => {
        const data = options.fetch(params, 123)
        return options.map(data)
    }
}

interface Params {
    one: number
    two: string
}

example({
    fetch: (params: Params) => 123,
    map: (number) => String(number)
});

example({
    fetch: (params: Params, foo: number) => 123,
    map: (number) => String(number)
});

example({
    fetch: (params: Params, foo) => 123,
    map: (number) => String(number)
});
```

----------------------------------------

TITLE: Docker Setup for Tsserverfuzzer
DESCRIPTION: Clones the tsserverfuzzer repository and starts a Docker container. It mounts the current directory as /fuzzer, sets the working directory, and runs as the 'node' user. Supports Windows %cd% and PowerShell $pwd for directory mounting.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Docker-Quickstart.md#_snippet_5

LANGUAGE: bash
CODE:
```
c:\> cd work
C:\work> git clone ...tsserverfuzzer...
C:\work> cd tsserverfuzzer
C:\work\tsserverfuzzer> docker run -it --rm -v %cd%:/fuzzer -w /fuzzer -u node node bash
```

LANGUAGE: powershell
CODE:
```
PS C:\work> cd work
PS C:\work> git clone ...tsserverfuzzer...
PS C:\work> cd tsserverfuzzer
PS C:\work\tsserverfuzzer> docker run -it --rm -v $pwd:/fuzzer -w /fuzzer -u node node bash
```

----------------------------------------

TITLE: TypeScript Compiler Diagnostics and Mapping
DESCRIPTION: Detailed diagnostics from the TypeScript compiler, illustrating the mapping between emitted code locations and original source code locations. This is crucial for debugging and understanding source maps.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionsSourcemapInlineSourcesSourceRoot.sourcemap.txt#_snippet_2

LANGUAGE: APIDOC
CODE:
```
JsFile: optionsSourcemapInlineSourcesSourceRoot.js
mapUrl: optionsSourcemapInlineSourcesSourceRoot.js.map
sourceRoot: local/
sources: optionsSourcemapInlineSourcesSourceRoot.ts
sourcesContent: [""var a = 10;""]
emittedFile:optionsSourcemapInlineSourcesSourceRoot.js
sourceFile:optionsSourcemapInlineSourcesSourceRoot.ts

>>>var a = 10;
1 >
2 >^^^^
3 >    ^
4 >     ^^^
5 >        ^^
6 >          ^
7 >           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^->
1 >
2 >var 
3 >    a
4 >      =
5 >        10
6 >          ;
1 >Emitted(1, 1) Source(1, 1) + SourceIndex(0)
2 >Emitted(1, 5) Source(1, 5) + SourceIndex(0)
3 >Emitted(1, 6) Source(1, 6) + SourceIndex(0)
4 >Emitted(1, 9) Source(1, 9) + SourceIndex(0)
5 >Emitted(1, 11) Source(1, 11) + SourceIndex(0)
6 >Emitted(1, 12) Source(1, 12) + SourceIndex(0)
```

----------------------------------------

TITLE: TypeScript Flip Function Example
DESCRIPTION: Demonstrates a generic `flip` function that reverses the order of arguments for another function. Includes an example with `zip` to create tuples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#_snippet_5

LANGUAGE: TypeScript
CODE:
```
function flip<a, b, c>(f: (a: a, b: b) => c): (b: b, a: a) => c {
  return (b: b, a: a) => f(a, b);
}
function zip<T, U>(x: T, y: U): [T, U] {
  return [x, y];
}

var expected: <T, U>(y: U, x: T) => [T, U] = flip(zip);
var actual = flip(zip);
```

----------------------------------------

TITLE: Chained Array and Object Methods
DESCRIPTION: Provides a comprehensive set of utility methods for manipulating collections (arrays and objects) in a chained manner. These methods allow for fluent, sequential operations on data structures, enhancing readability and maintainability. Includes methods for filtering, mapping, reducing, grouping, and transforming data, as well as object manipulation like extending and cloning.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_34

LANGUAGE: APIDOC
CODE:
```
ChainedArray Methods:

detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>;
  - Iterates over elements, returning the first element that the iterator returns true for.

filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
  - Creates an array of all elements that the iterator returns true for.

select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
  - Alias for filter.

where(properties: Object): ChainedArray<T>;
  - Creates an array of all elements that pass a truth test implemented by the properties.

findWhere(properties: Object): ChainedObject<T>;
  - Returns the first element that passes a truth test implemented by the properties.

reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>;
  - Creates an array of all elements that the iterator returns false for.

every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
  - Checks if all elements in the collection pass the truth test.

all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
  - Alias for every.

some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
  - Checks if any element in the collection passes the truth test.

any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>;
  - Alias for some.

contains(value: T): ChainedObject<boolean>;
  - Returns true if the collection contains the given value.

include(value: T): ChainedObject<boolean>;
  - Alias for contains.

invoke(methodName: string, ...args: any[]): ChainedArray<any>;
  - Invokes a method named by methodName on each element of the collection.

pluck(propertyName: string): ChainedArray<any>;
  - Extracts the property named propertyName from each element of the collection.

max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
  - Returns the maximum element in the collection, or the maximum value returned by the iterator.

min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>;
  - Returns the minimum element in the collection, or the minimum value returned by the iterator.

sortBy(iterator: Iterator_<T, any>, context?: any): ChainedArray<T>;
  - Sorts the collection by the results of running each element through the iterator.

sortBy(propertyName: string): ChainedArray<T>;
  - Sorts the collection by the specified property name.

groupBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<any[]>;
  - Splits the collection into sets of a predicate.

groupBy(propertyName: string): ChainedDictionary<any[]>;
  - Splits the collection into sets based on the specified property name.

countBy(iterator?: Iterator_<T, any>, context?: any): ChainedDictionary<number>;
  - Counts the occurrences of elements in the collection based on the iterator's return value.

countBy(propertyName: string): ChainedDictionary<number>;
  - Counts the occurrences of elements based on the specified property name.

shuffle(): ChainedArray<T>;
  - Shuffles the elements of the collection.

toArray(): ChainedArray<T>;
  - Converts the collection to an array.

size(): ChainedObject<number>;
  - Returns the number of elements in the collection.

// Methods from ChainedObject with promoted return types:
extend(...sources: any[]): ChainedDictionary<T>;
  - Merges properties from source objects into the current object.

pick(...keys: string[]): ChainedDictionary<T>;
  - Creates an object composed of the picked object properties.

omit(...keys: string[]): ChainedDictionary<T>;
  - Creates an object composed of the object's own enumerable string keyed properties that are not in the keys.

defaults(...defaults: any[]): ChainedDictionary<T>;
  - Fills in unspecified properties of an object with values from the default objects.

clone(): ChainedDictionary<T>;
  - Creates a shallow clone of the object.

tap(interceptor: (object: Dictionary<T>) => void): ChainedDictionary<T>;
  - Invokes interceptor with the object and returns the object. Useful for debugging.

```

----------------------------------------

TITLE: Test UTF-16BE Invalid Surrogate Head - TypeScript
DESCRIPTION: Tests a UTF-16BE encoded file with an invalid surrogate head, expecting an error indicating the byte sequence starts with a trail surrogate. It initializes a FileBuffer with the specified file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/duplicateLocalVariable1.errors.txt#_snippet_23

LANGUAGE: TypeScript
CODE:
```
testRunner.addTest(new TestCase(""Test UTF-16BE with invalid surrogate head fails"",
            function () {
                var filename = TestFileDir + ""\\UTF16BEInvalidSurrogate.txt"";
                var fb = new FileManager.FileBuffer(filename);
                return true;
            }, ""Byte sequence starts with a trail surrogate""));
```

----------------------------------------

TITLE: Generate TypeScript Trace Data
DESCRIPTION: Compiles your project with the `--generateTrace` flag to output detailed performance trace data. It is recommended to disable incremental builds (`--incremental false`) for more accurate and complete trace results.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Performance-Tracing.md#_snippet_1

LANGUAGE: sh
CODE:
```
tsc -p some_directory --generateTrace some_directory --incremental false
```

----------------------------------------

TITLE: JavaScript Module Exports Example
DESCRIPTION: Exports properties including a number, a string, and an object from a JavaScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthExceeded/node/nodeModulesMaxDepthExceeded.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
var m3 = require(""m3"");

module.exports = {
	""a"": 42,
	""b"": ""hello, world"",
	""person"": m3.person
};
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlSubfolderSpecifyOutputFile/node/maprootUrlSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Analyze TypeScript Trace with analyze-trace
DESCRIPTION: Installs and executes the `@typescript/analyze-trace` package to provide a quick summary of potential performance issues identified in the generated trace files. The `some_directory` argument should point to the directory where trace files were generated.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Performance-Tracing.md#_snippet_2

LANGUAGE: sh
CODE:
```
npm install @typescript/analyze-trace
npx analyze-trace some_directory
```

----------------------------------------

TITLE: TypeScript Function Parameter Destructuring with Rest
DESCRIPTION: Example of using object destructuring with rest properties within function parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectRest.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
var noContextualType = ({ aNumber = 12, ...notEmptyObject }) => aNumber + notEmptyObject.anythingGoes;
```

----------------------------------------

TITLE: TypeScript: Using Object.values and Object.entries
DESCRIPTION: This snippet demonstrates how to use `Object.values()` to get an array of a given object's own enumerable property values and `Object.entries()` to get an array of a given object's own enumerable string-keyed property [key, value] pairs. The provided code includes compiler errors (TS2550) that occur when the target library in the TypeScript configuration does not support these ECMAScript features, suggesting an update to 'es2017' or later.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/useObjectValuesAndEntries2.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var o = { a: 1, b: 2 };
    
    for (var x of Object.values(o)) {
        let y = x;
    }
    
    var entries = Object.entries(o);
```

----------------------------------------

TITLE: Intl.NumberFormat with BigInt
DESCRIPTION: Demonstrates the usage of Intl.NumberFormat with BigInt values, showing how the method handles BigInt arguments for formatting numbers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bigintWithLib.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
// Test Intl methods with new parameter type
new Intl.NumberFormat(""fr"").format(3000n);

let bigintVal: bigint = 5000n;
new Intl.NumberFormat(""fr"").format(bigintVal);
```

----------------------------------------

TITLE: TypeScript: Using Reflect.set
DESCRIPTION: An example showcasing Reflect.set, a method from the ES2015 Reflect API. TypeScript errors (TS2583) for this method typically mean the 'lib' compiler option needs to be set to 'es2015' or a later version.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#_snippet_13

LANGUAGE: JavaScript
CODE:
```
const testReflectSet = Reflect.set({}, """", 0);
```

----------------------------------------

TITLE: JavaScript Module Exports Example
DESCRIPTION: Exports properties including a number, a string, and an object from a JavaScript module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthExceeded/amd/nodeModulesMaxDepthExceeded.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
var m3 = require(""m3"");

module.exports = {
	""a"": 42,
	""b"": ""hello, world"",
	""person"": m3.person
};
```

----------------------------------------

TITLE: TypeScript Array of Functions
DESCRIPTION: Demonstrates an array containing functions. Each function accepts a number and a string, returning the string. Includes both a basic and a type-annotated version.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#_snippet_14

LANGUAGE: typescript
CODE:
```
var c3t11 = [function (n, s) { return s; }];
```

LANGUAGE: typescript
CODE:
```
var c3t11: {(n: number, s: string): string;}[] = [
 function( n , s ) { return s; }
];
```

----------------------------------------

TITLE: TypeScript Template Literal Type: RequiresLeadingSlash
DESCRIPTION: Demonstrates a template literal type `RequiresLeadingSlash` that enforces a string starting with a '/'. Includes examples of valid and invalid assignments, highlighting TypeScript's type checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateLiteralTypesPatterns.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
type RequiresLeadingSlash = `/${string}`;

// ok
const a: RequiresLeadingSlash = ""/bin"";

// not ok
const b: RequiresLeadingSlash = ""no slash"";
      ~
!!! error TS2322: Type ""no slash"" is not assignable to type `/${string}`.
```

----------------------------------------

TITLE: TypeScript Import Example
DESCRIPTION: Demonstrates importing a function from a local module in a TypeScript file.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerDirectoryModule(module=node18,moduleresolution=bundler).errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from '../lib';

```

----------------------------------------

TITLE: TypeScript tsconfig.json Configuration
DESCRIPTION: Configuration file for the TypeScript compiler. This example sets 'allowJs' to true to permit JavaScript files in the project and specifies the maximum depth for Node.js module resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/amd/nodeModulesMaxDepthIncreased.errors.txt#_snippet_0

LANGUAGE: json
CODE:
```
{
  ""compilerOptions"": {
    ""allowJs"": true,
    ""maxNodeModuleJsDepth"": 3
  }
}
```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlModuleSubfolderSpecifyOutputFile/node/maprootUrlsourcerootUrlModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript: Variadic Tuple Type with Leading/Trailing Numbers
DESCRIPTION: Illustrates a variadic tuple type that starts with a number, followed by a variable number of strings, and ends with another number. Shows examples of assignments and the resulting type errors when constraints are violated.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variadicTuples2.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
declare let tt2: [number, ...string[], number];
tt2 = [0];  // Error

tt2 = [0, 1];
tt2 = [0, 1, 2];  // Error

tt2 = [0, 'abc', 1];
tt2 = [0, 'abc', 'def', 1];
tt2 = [0, 'abc', 1, 'def'];  // Error

tt2 = [true, 'abc', 'def', 1];  // Error

tt2 = [0, 'abc', 'def', true];  // Error
```

----------------------------------------

TITLE: TypeScript Class Definition
DESCRIPTION: A basic example of a class definition in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithInlineSourceMap.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
class c {
}

```

----------------------------------------

TITLE: TypeScript: Using Reflect.isExtensible
DESCRIPTION: Shows an example of Reflect.isExtensible, a method from the ES2015 Reflect API. The associated TypeScript error (TS2583) points to a missing library definition, advising to include 'es2015' or newer in the 'lib' compiler option.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/doYouNeedToChangeYourTargetLibraryES2015.errors.txt#_snippet_10

LANGUAGE: JavaScript
CODE:
```
const testReflectIsExtensible = Reflect.isExtensible({});
```

----------------------------------------

TITLE: Collection Transformation and Extraction (invoke, pluck)
DESCRIPTION: Executes a specified method on each element of a collection or extracts a property value from each element. Returns a new array with the results.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_41

LANGUAGE: APIDOC
CODE:
```
invoke(list: any[], methodName: string, ...args: any[]): any[];
invoke(list: Dictionary<any>, methodName: string, ...args: any[]): any[];

pluck(list: any[], propertyName: string): any[];
pluck(list: Dictionary<any>, propertyName: string): any[];
```

----------------------------------------

TITLE: TypeScript Module Import Example
DESCRIPTION: Demonstrates importing JavaScript and TypeScript modules in a TypeScript file. It shows how to import default exports from different file types using relative paths.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/extensionLoadingPriority(moduleresolution=node16).errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
import a from ""./a.js"";
import dir from ""./dir"";
```

----------------------------------------

TITLE: GitHub Actions: Twoslash Repro Action
DESCRIPTION: This action runs `tsrepro` and performs bisecting for TypeScript reproducible examples. It helps in identifying regressions or issues in code examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/All-The-Bots.md#_snippet_2

LANGUAGE: yaml
CODE:
```
name: Twoslash Repro Action

# This workflow uses the Twoslash Repro Action to run and bisect reproducible examples.

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  run_tsrepro:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install

      - name: Run tsrepro and bisect
        # This step assumes 'tsrepro' is installed or available in the PATH
        # and configured to run tests/examples.
        run: | 
          echo ""Running tsrepro and bisecting...""
          # Example command, actual command might differ:
          # npx tsrepro --bisect
          echo ""tsrepro execution complete.""

```

----------------------------------------

TITLE: TypeScript Testing Framework API
DESCRIPTION: Defines functions for structuring and running tests within a TypeScript environment. `describe` is used to group related tests, `it` defines individual test cases, and `run` executes the entire test suite.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserharness.errors.txt#_snippet_67

LANGUAGE: TypeScript
CODE:
```
// Describe/it definitions
export function describe(description: string, block: () => any) {
    var newScenario = new Scenario(description, block);

    if (Runnable.currentStack.length === 0) {
        Runnable.currentStack.push(currentRun);
    }

    Runnable.currentStack[Runnable.currentStack.length - 1].addChild(newScenario);
}
export function it(description: string, block: () => void ) {
    var testCase = new TestCase(description, block);
    Runnable.currentStack[Runnable.currentStack.length - 1].addChild(testCase);
}

export function run() {
    if (typeof process !== ""undefined"") {
        process.on('uncaughtException', Runnable.handleError);
    }

    Baseline.reset();
    currentRun.run();
}
```

----------------------------------------

TITLE: Custom TypeScript Code Linking Syntax
DESCRIPTION: Demonstrates a custom syntax for creating links to specific lines or functions within TypeScript source files. These links are resolved at deploy time, providing direct references to code.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
Custom Link Syntax:

link to [`runFourSlashTest`][0]

[0]: <src/harness/fourslash.ts - function runFourSlashTest(>

Description:
This syntax allows referencing specific code locations within the TypeScript repository. The format `<filepath - identifier>` points to a file and an identifier (like a function name or line marker) within that file. These links are processed during the wiki build to generate direct URLs to the source code on GitHub.
```

----------------------------------------

TITLE: JSON: Package Configuration
DESCRIPTION: The package.json file used in the examples, defining the project as a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributes(module=node20).errors.txt#_snippet_3

LANGUAGE: json
CODE:
```
{
    ""name"": ""pkg"",
    ""private"": true,
    ""type"": ""module""
}
```

----------------------------------------

TITLE: TypeScript: Get Field with Nullable Return
DESCRIPTION: A function that safely retrieves a field from an object, handling cases where the object itself might be null. It returns the field's value or null if the object is null, resulting in a nullable return type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/indexedAccessConstraints.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
function getField<T extends object>(x: T | null, k: keyof T) {
    const result = x ? x[k] : null;
    return result;  // T[keyof T] | null
}
```

----------------------------------------

TITLE: TypeScript: Function Returning Function (Accepting Array)
DESCRIPTION: Shows functions that return another function, which accepts an array of 'Base' elements as an argument. Includes arrow functions and module exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_48

LANGUAGE: typescript
CODE:
```
function x155(): (s: Base[]) => any { return n => { var n: Base[]; return null; }; }
var x167: () => (s: Base[]) => any = () => { return n => { var n: Base[]; return null; }; };
var x179: () => (s: Base[]) => any = function() { return n => { var n: Base[]; return null; }; };
module x191 { var t: (s: Base[]) => any = n => { var n: Base[]; return null; }; }
module x203 { export var t: (s: Base[]) => any = n => { var n: Base[]; return null; }; }
```

----------------------------------------

TITLE: WinJS.Promise API
DESCRIPTION: Defines the WinJS Promise API for asynchronous operations. It includes static methods for promise creation and manipulation (e.g., `join`, `timeout`) and instance methods for chaining (`then`) and cancellation (`cancel`).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variableDeclaratorResolvedDuringContextualTyping.errors.txt#_snippet_0

LANGUAGE: APIDOC
CODE:
```
module WinJS {
    export interface ValueCallback {
        (value: any): any;
    }

    export interface EventCallback {
        (value: any): void;
    }

    export interface ErrorCallback {
        (error: any): any;
    }

    export interface ProgressCallback {
        (progress: any): any;
    }

    export declare class Promise {
        constructor(init: (complete: ValueCallback, error: ErrorCallback, progress: ProgressCallback) => void, oncancel?: any);

        static as(value: any): Promise;
        static join(promises: { [name: string]: Promise; }): Promise;
        static join(promises: Promise[]): Promise;
        static any(promises: Promise[]): Promise;
        static timeout(delay: number): Promise;
        static wrapError(error: any): Promise;
        static is(value: any): boolean;
        static addEventListener(type: string, fn: EventCallback);

        public then(success?: ValueCallback, error?: ErrorCallback, progress?: ProgressCallback): Promise;
        public done(success?: ValueCallback, error?: ErrorCallback, progress?: ProgressCallback): void;
        public cancel(): void;
    }
}
```

----------------------------------------

TITLE: TypeScript: Function Returning Function (Returning Array)
DESCRIPTION: Illustrates functions that return another function, which in turn returns an array of 'Base' elements. Includes various syntaxes for nested functions and modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_46

LANGUAGE: typescript
CODE:
```
function x150(): { (): Base[]; } { return function named() { return [d1, d2] }; }
var x157: () => () => Base[] = () => { return () => [d1, d2]; };
var x158: () => () => Base[] = () => { return function() { return [d1, d2] }; };
var x159: () => () => Base[] = () => { return function named() { return [d1, d2] }; };
var x160: () => { (): Base[]; } = () => { return () => [d1, d2]; };
var x161: () => { (): Base[]; } = () => { return function() { return [d1, d2] }; };
var x162: () => { (): Base[]; } = () => { return function named() { return [d1, d2] }; };
var x169: () => () => Base[] = function() { return () => [d1, d2]; };
var x170: () => () => Base[] = function() { return function() { return [d1, d2] }; };
var x171: () => () => Base[] = function() { return function named() { return [d1, d2] }; };
var x172: () => { (): Base[]; } = function() { return () => [d1, d2]; };
var x173: () => { (): Base[]; } = function() { return function() { return [d1, d2] }; };
var x174: () => { (): Base[]; } = function() { return function named() { return [d1, d2] }; };
module x181 { var t: () => Base[] = () => [d1, d2]; }
module x184 { var t: { (): Base[]; } = () => [d1, d2]; }
module x185 { var t: { (): Base[]; } = function() { return [d1, d2] }; }
module x186 { var t: { (): Base[]; } = function named() { return [d1, d2] }; }
var x207 = <() => Base[]>function named() { return [d1, d2] };
var x209 = <{ (): Base[]; }>function() { return [d1, d2] };
var x210 = <{ (): Base[]; }>function named() { return [d1, d2] };
```

----------------------------------------

TITLE: TypeScript TS1160: Unterminated Template Literal Example
DESCRIPTION: This snippet demonstrates an unterminated template literal in TypeScript. The error TS1160 is raised because the backtick character (`) used to start the template literal is not closed, leading to a syntax error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/templateStringUnterminated4.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
`\
     
```

----------------------------------------

TITLE: TypeScript Example: Test Module Import
DESCRIPTION: An example TypeScript file demonstrating how to import a module ('m1') and use its exported members. It also defines its own exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlModuleSimpleSpecifyOutputFile/node/maprootUrlsourcerootUrlModuleSimpleSpecifyOutputFile.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import m1 = require(""m1"");
    export var a1 = 10;
    export class c1 {
        public p1: number;
    }
    
    export var instance1 = new c1();
    export function f1() {
        return instance1;
    }
    
    export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: TypeScript Destructuring Error: Implicit 'any[]'
DESCRIPTION: Highlights a TypeScript error (TS7031) where a destructured binding implicitly gets an 'any[]' type when the source property is optional and lacks explicit typing. This example shows the problematic syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/destructuringParameterDeclaration9(strict=true).errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export function prepareConfigWithoutAnnotation({
    additionalFiles: {
        json = []
        // ~~~~
        // !!! error TS7031: Binding element 'json' implicitly has an 'any[]' type.
    } = {}
} = {}) {
    json
}

```

----------------------------------------

TITLE: Underscore Collection Utilities
DESCRIPTION: Demonstrates core collection manipulation functions like creating objects from arrays, finding element indices, and generating ranges.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_5

LANGUAGE: JavaScript
CODE:
```
_.object([['moe', 30], ['larry', 40], ['curly', 50]]);
_.indexOf([1, 2, 3], 2);
_.lastIndexOf([1, 2, 3, 1, 2, 3], 2);
_.sortedIndex([10, 20, 30, 40, 50], 35);
_.range(10);
_.range(1, 11);
_.range(0, 30, 5);
_.range(0);
```

----------------------------------------

TITLE: Process and Downsample Trace Files
DESCRIPTION: Utilizes the `process-tracing` script to manage large trace files. The `--sample` flag allows downsampling to reduce file size, while `--close` can fix unterminated events. The output can also be gzipped for easier handling.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Performance-Tracing.md#_snippet_3

LANGUAGE: sh
CODE:
```
process-tracing --sample=5 --close trace.1.json trace.1.json.gz
```

----------------------------------------

TITLE: TypeScript Tooling: Analyze Trace
DESCRIPTION: Information about the `@typescript/analyze-trace` tool for analyzing TypeScript compiler performance traces.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
TypeScript Tooling:

Release of `@typescript/analyze-trace`:
  The `@typescript/analyze-trace` package provides tools for analyzing performance traces generated by the TypeScript compiler. This helps in diagnosing and optimizing compilation speed.
```

----------------------------------------

TITLE: TypeScript Type Data for Performance Debugging
DESCRIPTION: This JSON data provides details about TypeScript type representations, including symbol names, recursion IDs, and declaration paths. It is used to analyze performance issues by correlating type information with compiler behavior, as found in `types.json`.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Performance-Tracing.md#_snippet_4

LANGUAGE: JSON
CODE:
```
[\n  {\n    ""id"":20440,\n    ""symbolName"":""NamedExoticComponent"",\n    ""recursionId"":30,\n    ""instantiatedType"":146,\n    ""typeArguments"":[20437],\n    ""firstDeclaration"":{\n      ""path"":""PROJECT_ROOT/node_modules/@types/react/index.d.ts"",\n      ""start"":{\n        ""line"":359,\n        ""character"":6\n      },\n      ""end"":{\n        ""line"":363,\n        ""character"":6\n      }\n    },\n    ""flags"":[""524288""]\n  },\n  {\n    ""id"":20441,\n    ""symbolName"":""NamedExoticComponent"",\n    ""recursionId"":30,\n    ""instantiatedType"":146,\n    ""typeArguments"":[20434],\n    ""firstDeclaration"":{\n      ""path"":""PROJECT_ROOT/node_modules/@types/react/index.d.ts"",\n      ""start"":{\n        ""line"":359,\n        ""character"":6\n      },\n      ""end"":{\n        ""line"":363,\n        ""character"":6\n      }\n    },\n    ""flags"":[""524288""]\n  }\n]
```

----------------------------------------

TITLE: TypeScript Error: Cannot find name 'window'
DESCRIPTION: This snippet illustrates a TypeScript compilation error (TS2304) that occurs when the 'window' object is not available in the current scope. This often happens when the DOM library is not correctly referenced or is overridden, preventing TypeScript from recognizing global DOM APIs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/libTypeScriptOverrideSimple.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
/// <reference lib=""dom"" />
const a: ABC = { abc: ""Hello"" }

// This should fail because libdom has been replaced
// by the module above ^
window.localStorage
```

----------------------------------------

TITLE: TypeScript Basic Object Rest/Spread
DESCRIPTION: Demonstrates the fundamental usage of object rest and spread syntax for cloning objects and extracting properties into new variables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectRest.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var o = { a: 1, b: 'no' }
var { ...clone } = o;
var { a, ...justB } = o;
var { a, b: renamed, ...empty } = o;
var { ['b']: renamed, ...justA } = o;
var { 'b': renamed, ...justA } = o;
var { b: { '0': n, '1': oooo }, ...justA } = o;
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlSubfolderSpecifyOutputFile/node/sourcerootUrlSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript: Private Static Accessor with Decorators
DESCRIPTION: Defines a private static accessor property in a TypeScript class, enhanced with decorators. Accessors provide a way to define custom logic for getting and setting private static properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-sourceMap(target=es2015).sourcemap.txt#_snippet_36

LANGUAGE: TypeScript
CODE:
```
declare var dec: any;

class C {
    @dec
    @dec
    static accessor #z = 1;
}
```

----------------------------------------

TITLE: TS1517: Range Out of Order in Regex Character Class
DESCRIPTION: This error occurs when the character ranges within a regex character class (e.g., `[a-z]`) are specified incorrectly, with the starting character being greater than the ending character. The examples highlight such invalid range specifications.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/regularExpressionScanning(target=esnext).errors.txt#_snippet_13

LANGUAGE: TypeScript
CODE:
```
/[-A-Za-z-z-aZ-A\d_-\d-.-.\r-\n\w-\W]/,
             ~~~
```

LANGUAGE: TypeScript
CODE:
```
/\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/,
                                 ~~~~~
```

LANGUAGE: TypeScript
CODE:
```
/\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/u,
                                  ~~~~~~~
```

LANGUAGE: TypeScript
CODE:
```
/\p{L}\p{gc=L}\p{ASCII}\p{Invalid}[\p{L}\p{gc=L}\P{ASCII}\p{Invalid}]/v,
                                  ~~~~~~~
```

----------------------------------------

TITLE: TypeScript Functions Returning Callback Types
DESCRIPTION: Shows standalone TypeScript functions that return a function type which accepts an array of 'Base' and returns any.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_40

LANGUAGE: typescript
CODE:
```
function x143(): (s: Base[]) => any { return n => { var n: Base[]; return null; }; }
```

----------------------------------------

TITLE: TypeScript Parameter Type Annotation Requirement
DESCRIPTION: Illustrates a TypeScript compiler error (TS9011) related to missing explicit type annotations for parameters when using the `--isolatedDeclarations` flag. The error message and related suggestion (TS9028) guide developers to add type annotations for parameters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationsAddUndefined.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export function foo(p = (ip = 10, v: number): void => {}): void{
}
    type T = number
    export function foo2(p = (ip = 10 as T, v: number): void => {}): void{}
                                         ~
!!! error TS9011: Parameter must have an explicit type annotation with --isolatedDeclarations.
!!! related TS9028 file2.ts:4:27: Add a type annotation to the parameter ip.
    export class Bar2 {
        readonly r = 1;
        f = 2;
    }
```

----------------------------------------

TITLE: TypeScript 1.9 LanguageService API Change
DESCRIPTION: In TypeScript 1.9, the `LanguageService.getSourceFile` method was removed. Developers should now use `LanguageService.getProgram().getSourceFile` to retrieve source files.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_25

LANGUAGE: APIDOC
CODE:
```
TypeScript 1.9 API Changes:

`LanguageService.getSourceFile` Removal:
- The method `LanguageService.getSourceFile` has been removed.
- Replacement: Use `LanguageService.getProgram().getSourceFile` instead.
```

----------------------------------------

TITLE: TypeScript bind, call, apply with Class Methods
DESCRIPTION: Demonstrates the usage of `bind`, `call`, and `apply` on methods within a TypeScript class. This section shows how `this` context and method signatures affect the correct application of these methods, along with common type errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictBindCallApply1.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
class C {
        constructor(a: number, b: string) {}
        foo(this: this, a: number, b: string): string { return """" }
        overloaded(s: string): number;
        overloaded(n: number): string;
        overloaded(x: any): any { return <any>undefined }
        generic<T>(x: T): T { return x }
    }
    
    declare let c: C;
    declare let obj: {};
    
    let f10 = c.foo.bind(c);
    let f11 = c.foo.bind(c, 10);
    let f12 = c.foo.bind(c, 10, ""hello"");
    let f13 = c.foo.bind(c, 10, 20);  // Error
                                ~~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
    let f14 = c.foo.bind(undefined);  // Error
                         ~~~~~~~~~
!!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 1 of 2, '(this: (this: C, a: number, b: string) => string, thisArg: C): (a: number, b: string) => string', gave the following error.
!!! error TS2769:     Argument of type 'undefined' is not assignable to parameter of type 'C'.
!!! error TS2769:   Overload 2 of 2, '(this: (this: C, a: number, b: string) => string, thisArg: C): (a: number, b: string) => string', gave the following error.
!!! error TS2769:     Argument of type 'undefined' is not assignable to parameter of type 'C'.
    
    let f15 = c.overloaded.bind(c);  // typeof C.prototype.overloaded
    let f16 = c.generic.bind(c);  // typeof C.prototype.generic
    
    let c10 = c.foo.call(c, 10, ""hello"");
    let c11 = c.foo.call(c, 10);  // Error
                    ~~~~
!!! error TS2554: Expected 3 arguments, but got 2.
    let c12 = c.foo.call(c, 10, 20);  // Error
                                ~~
!!! error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
    let c13 = c.foo.call(c, 10, ""hello"", 30);  // Error
                                         ~~
!!! error TS2554: Expected 3 arguments, but got 4.
    let c14 = c.foo.call(undefined, 10, ""hello"");  // Error
                         ~~~~~~~~~
!!! error TS2345: Argument of type 'undefined' is not assignable to parameter of type 'C'.
    
    let a10 = c.foo.apply(c, [10, ""hello""]);
    let a11 = c.foo.apply(c, [10]);  // Error
                             ~~~~
!!! error TS2345: Argument of type '[number]' is not assignable to parameter of type '[a: number, b: string]'.
!!! error TS2345:   Source has 1 element(s) but target requires 2.
    let a12 = c.foo.apply(c, [10, 20]);  // Error
                                  ~~
!!! error TS2322: Type 'number' is not assignable to type 'string'.
    let a13 = c.foo.apply(c, [10, ""hello"", 30]);  // Error
                             ~~~~~~~~~~~~~~~~~~

```

----------------------------------------

TITLE: TypeScript Async Getter Error Example
DESCRIPTION: Demonstrates a common TypeScript error where the 'async' modifier is incorrectly used with a 'get' accessor. This snippet highlights the compiler errors TS1042 and TS2378, indicating that async is not permitted in this context and that a getter must return a value. The code is intended to illustrate invalid TypeScript syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncGetter_es5.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
  async get foo() {
  }
}
```

----------------------------------------

TITLE: TypeScript Generic Function Calls
DESCRIPTION: Shows examples of calling a generic function `foo2` with different argument types and default type parameters, highlighting TypeScript's type inference capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#_snippet_10

LANGUAGE: TypeScript
CODE:
```
declare function foo2<T, U = T>(fn: T, a?: U, b?: U): [T, U];

foo2(() => {});
foo2(identity);
foo2(identity, 1);
```

----------------------------------------

TITLE: TypeScript 'let' in Loops and Closures
DESCRIPTION: Illustrates how 'let' declarations within loops create block-scoped variables. Each iteration of the loop gets a new binding for 'let' variables, which is crucial when used inside closures. This example covers various loop types like for, for...in, for...of, while, and do...while.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
declare function use(a: any);

//====let
function foo0(x) {
    for (let x of []) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }

    use(v);
}

function foo00(x) {
    for (let x in []) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == ""1"") {
            return;
        }
    }

    use(v);
}

function foo1(x) {
    for (let x = 0; x < 1; ++x) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }

    use(v);
}

function foo2(x) {
    while (1 === 1) {
        let x = 1;
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}

function foo3(x) {
    do {
        let x;
        var v;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    } while (1 === 1)
    
    use(v);
}

function foo4(x) {
    for (let y = 0; y < 1; ++y) {
        var v = y;
        let x = 1;
        (function() { return x + v });
        (() => x + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}

function foo5(x) {
    for (let x = 0, y = 1; x < 1; ++x) {
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}


function foo6(x) {
    while (1 === 1) {
        let x, y;
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    };
    
    use(v)
}

function foo7(x) {
    do {
        let x, y;
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    } while (1 === 1);
    
    use(v);
}


function foo8(x) {
    for (let y = 0; y < 1; ++y) {
        let x = 1;
        var v = x;
        (function() { return x + y + v });
        (() => x + y + v);
        if (x == 1) {
            return;
        }
    }
    
    use(v);
}
```

----------------------------------------

TITLE: TypeScript: Underscore.js WrappedArray Methods
DESCRIPTION: Defines the TypeScript interface for `WrappedArray<T>`, extending `WrappedObject` with array-specific utility methods such as `each`, `map`, `reduce`, `filter`, `find`, `reject`, `every`, `some`, `contains`, `invoke`, `pluck`, `max`, `min`, `sortBy`, `groupBy`, `shuffle`, `toArray`, `size`, `sample`, `first`, `initial`, `last`, `rest`, `without`, `union`, `intersection`, `difference`, `uniq`, `zip`, `indexOf`, `lastIndexOf`, `isEmpty`, `flatten`, `without`, `xor`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `shuffle`, `sample`, `take`, `drop`, `compact`, `flatten`, `difference`, `union`, `intersection`, `xor`, `zip`, `unzip`, `object`, `range`, `
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_27



----------------------------------------

TITLE: JSON: Package Configuration
DESCRIPTION: The package.json file used in the examples, defining the project as a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesImportAttributes(module=node18).errors.txt#_snippet_3

LANGUAGE: json
CODE:
```
{
    ""name"": ""pkg"",
    ""private"": true,
    ""type"": ""module""
}
```

----------------------------------------

TITLE: TypeScript: Async Module Export
DESCRIPTION: Demonstrates exporting an asynchronous function from a TypeScript module. This allows other modules to import and use the async functionality.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es5.errors.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
module M {
	export async function f1() { }
}
```

----------------------------------------

TITLE: Basic TypeScript Async Function (package2/index.ts)
DESCRIPTION: A simple example of an asynchronous function declaration in TypeScript, demonstrating valid syntax for defining functions that return Promises.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/tslibMissingHelper.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
export {};
async function foo(): Promise<void> {}
```

----------------------------------------

TITLE: TypeScript Function with Rest Parameters
DESCRIPTION: Illustrates a TypeScript function 'foo2' that accepts a mandatory greeting parameter and uses rest parameters ('...restGreetings') to capture any additional arguments as an array of strings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClasses.sourcemap.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
function foo2(greeting: string, ...restGreetings: string[]) {
    var restGreetings /* more greeting */ = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        restGreetings[_i - 1] = arguments[_i];
    }
    // Function body would go here
}
```

----------------------------------------

TITLE: TypeScript Function and Method Call Hierarchy
DESCRIPTION: This snippet details the call hierarchy starting from a function 'f'. It shows how 'f' is called by a static method 'sameName' in class 'A', which is then called by 'B.sameName', a getter 'Obj.sameName', a function 'Foo.sameName', a class 'Foo.C', and finally a constant 'Bar.sameName'. This illustrates nested calls across different scopes and types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyContainerName.callHierarchy.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
function f() {}

class A {
  static sameName() {
    f();
  }
}

class B {
  sameName() {
    A.sameName();
  }
}

class Obj {
  get sameName() {
    return new B().sameName;
  }
}

namespace Foo {
  export function sameName() {
    return Obj.sameName;
  }

  export class C {
    constructor() {
      Foo.sameName();
    }
  }
}

namespace Bar {
  const sameName = () => new Foo.C();
}
```

----------------------------------------

TITLE: TypeScript: Assigning Function Types to Variables
DESCRIPTION: Demonstrates assigning different function syntaxes (arrow functions, named functions) to variables with explicit function type annotations. Includes examples of functions returning arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_51

LANGUAGE: typescript
CODE:
```
var x225: () => Base[]; x225 = n => { var n: Base[]; return null; };
```

LANGUAGE: typescript
CODE:
```
var x226: () => Base[]; x226 = function() { return [d1, d2] };
```

LANGUAGE: typescript
CODE:
```
var x227: () => Base[]; x227 = function named() { return [d1, d2] };
```

LANGUAGE: typescript
CODE:
```
var x237: { n: () => Base[]; } = { n: () => [d1, d2] };
```

LANGUAGE: typescript
CODE:
```
var x238: { n: () => Base[]; } = { n: function() { return [d1, d2] } };
```

LANGUAGE: typescript
CODE:
```
var x239: { n: () => Base[]; } = { n: function named() { return [d1, d2] } };
```

----------------------------------------

TITLE: JSDoc for Simple Object Parameter
DESCRIPTION: Demonstrates documenting properties of a simple object parameter in JSDoc. This example covers required properties of an object passed as a function argument.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParamTagTypeLiteral.errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
/**
 * @param {object} opts3
 * @param {string} opts3.x
 */
function foo3(opts3) {
    opts3.x;
}
foo3({x: 'abc'});
```

----------------------------------------

TITLE: TypeScript Greeter Class and Functions
DESCRIPTION: This snippet demonstrates a TypeScript `Greeter` class with a constructor and a `greet` method. It also includes utility functions for creating and managing `Greeter` instances, showcasing basic class instantiation, method calls, and array manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClasses.sourcemap.txt#_snippet_20

LANGUAGE: typescript
CODE:
```
class Greeter {
    constructor(public greeting: string) {
    }

    greet() {
        return ""<h1>"" + this.greeting + ""</h1>"";
    }
}


function foo(greeting: string): Greeter {
    return new Greeter(greeting);
}

var greeter = new Greeter(""Hello, world!"");
var str = greeter.greet();

function foo2(greeting: string, ...restGreetings /* more greeting */: string[]) {
    var greeters: Greeter[] = []; /* inline block comment */
    greeters[0] = new Greeter(greeting);
    for (var i = 0; i < restGreetings.length; i++) {
        greeters.push(new Greeter(restGreetings[i]));
    }

    return greeters;
}

var b = foo2(""Hello"", ""World"", ""!"");
// This is simple signle line comment
for (var j = 0; j < b.length; j++) {
    b[j].greet();
}
```

----------------------------------------

TITLE: Source Map Metadata and Mappings
DESCRIPTION: Details about the source map, including the map URL, source root, original sources, and content. It also includes the generated code's position mappings back to the original source.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionsSourcemapInlineSourcesMapRoot.sourcemap.txt#_snippet_3

LANGUAGE: json
CODE:
```
{
  ""version"": 3,
  ""file"": ""optionsSourcemapInlineSourcesMapRoot.js"",
  ""sourceRoot"": """",
  ""sources"": [""../optionsSourcemapInlineSourcesMapRoot.ts""],
  ""sourcesContent"": [""var a = 10;""],
  ""mappings"": ""AAAA,IAAI,EAAE,EAAE,CAAC""
}
```

----------------------------------------

TITLE: TypeScript Function Call Example
DESCRIPTION: A simple example of calling a function named `f`. This snippet represents a basic function invocation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyContainerName.callHierarchy.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
f();
```

----------------------------------------

TITLE: TypeScript Indexing with Type Lacking Index Signature
DESCRIPTION: This example shows the TS7052 error, which arises when trying to access a property on an object that does not have an index signature defined, and the key type is not a direct property. The `MyMap` interface in `m.prop` does not have an index signature, leading TypeScript to suggest calling a method like `get` instead of direct indexing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyStringIndexerOnObject.errors.txt#_snippet_23

LANGUAGE: TypeScript
CODE:
```
interface MyMap<K, T> {
  get(key: K): T;
  set(key: K, value: T): void;
}

interface I {
  prop: MyMap<string, string>
}
declare const m: I;
m.prop['a'];
// !!! error TS7052: Element implicitly has an 'any' type because type 'MyMap<string, string>' has no index signature. Did you mean to call 'm.prop.get'?
```

----------------------------------------

TITLE: JSON Data for TypeScript Import
DESCRIPTION: This JSON file provides data that is imported into the TypeScript example. It contains properties 'a' (boolean) and 'b' (string), which are accessed by the TypeScript code to demonstrate module interoperability.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requireOfJsonFileWithoutExtension.errors.txt#_snippet_1

LANGUAGE: json
CODE:
```
{
    ""a"": true,
    ""b"": ""hello""
}
```

----------------------------------------

TITLE: TypeScript Example: Module m1
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file serves as a module that can be imported by other TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlModuleSimpleSpecifyOutputFile/node/maprootUrlsourcerootUrlModuleSimpleSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export var m1_a1 = 10;
    export class m1_c1 {
        public m1_c1_p1: number;
    }
    
    export var m1_instance1 = new m1_c1();
    export function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: TypeScript Call Hierarchy: static {} -> foo -> bar -> baz, quxx
DESCRIPTION: Analyzes the call hierarchy starting from a static block in a TypeScript class. It traces the execution flow from the static block to the `foo` function, then to the `bar` function, and finally to the `baz` and `quxx` functions called within `bar`. This snippet illustrates how function calls are nested and executed.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/callHierarchyClassStaticBlock2.callHierarchy.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
static {
    function foo() {
        bar();
    }

    function bar() {
        baz();
        quxx();
        baz();
    }

    foo();
}

function baz() {
}

function quxx() {
}
```

----------------------------------------

TITLE: TypeScript Code Style - Variable Declarations and Else
DESCRIPTION: Outlines best practices for variable declaration statements and the placement of `else` clauses.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Coding-guidelines.md#_snippet_11

LANGUAGE: APIDOC
CODE:
```
TypeScript Code Style - Variables and Else:

- Variable Declarations: Use a single declaration per variable statement (e.g., `var x = 1; var y = 2;` over `var x = 1, y = 2;`).
- `else` Clause: Place `else` on a separate line from the closing curly brace.
```

----------------------------------------

TITLE: TypeScript ESM Module Example
DESCRIPTION: Presents a clean example of an ES Module (ESM) file in TypeScript. It demonstrates the correct usage of export statements for variables, classes, and functions, contrasting with the error-prone CommonJS syntax shown in other examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesGeneratedNameCollisions(module=nodenext).errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
// esm format file
function require() {}
const exports = {};
class Object {}
export const __esModule = false;
export {require, exports, Object};
```

----------------------------------------

TITLE: Stack Module and Interface API
DESCRIPTION: Defines static methods for creating Stacks and the Stack interface, including methods for reading values and performing persistent changes like push, pop, shift, and unshift.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_9

LANGUAGE: APIDOC
CODE:
```
module Stack {
  function isStack(maybeStack: any): maybeStack is Stack<any>;
  function of<T>(...values: Array<T>): Stack<T>;
}

export function Stack(): Stack<any>;
export function Stack<T>(): Stack<T>;
export function Stack<T>(collection: Iterable<T>): Stack<T>;

interface Stack<T> extends Collection.Indexed<T> {
  // Reading values
  peek(): T | undefined;
  // Persistent changes
  clear(): Stack<T>;
  unshift(...values: Array<T>): Stack<T>;
  unshiftAll(iter: Iterable<T>): Stack<T>;
  shift(): Stack<T>;
  push(...values: Array<T>): Stack<T>;
  pushAll(iter: Iterable<T>): Stack<T>;
  pop(): Stack<T>;
  // Transient changes
}
```

----------------------------------------

TITLE: TypeScript Module Structure Example
DESCRIPTION: A foundational example demonstrating the structure of nested modules in TypeScript, including the declaration of sub-modules and their contained classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
    export module TopLevelModule1 {
                                export module SubModule1 {
                                    export module SubSubModule1 {
                                        export class ClassA {
                                            public AisIn1_1_1() {
                                                // Try all qualified names of this type
                                                var a1: ClassA; a1.AisIn1_1_1();
                                                var a2: SubSubModule1.ClassA; a2.AisIn1_1_1();
                                                var a3: SubModule1.SubSubModule1.ClassA; a3.AisIn1_1_1();
                                                var a4: TopLevelModule1.SubModule1.SubSubModule1.ClassA; a4.AisIn1_1_1();
                                                
                                                // Two variants of qualifying a peer type
                                                var b1: ClassB; b1.BisIn1_1_1();
                                                var b2: TopLevelModule1.SubModule1.SubSubModule1.ClassB; b2.BisIn1_1_1();
                                                
                                                // Type only accessible from the root
                                                var c1: TopLevelModule1.SubModule2.SubSubModule2.ClassA; c1.AisIn1_2_2();
                                                
                                                // Interface reference
                                                var d1: InterfaceX; d1.XisIn1_1_1();
                                            }
                                        }
                                        export class ClassB { public BisIn1_1_1() { } }
                                        export class ClassC { public CisIn1_1_1() { } }
                                        export interface InterfaceX { XisIn1_1_1(); }
                                        interface NonExportedInterfaceQ { }
                                    }
                                }
                            }
```

----------------------------------------

TITLE: TypeScript Module Export Example
DESCRIPTION: Demonstrates exporting a constant value and a default export from a TypeScript module. This is a fundamental pattern for sharing code between files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportClausesToMergeWithTypes.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
export const zzz = 123;
export default zzz;
```

----------------------------------------

TITLE: TypeScript Loop Iteration and Method Call
DESCRIPTION: Shows a typical JavaScript/TypeScript loop structure iterating over an array 'b' and calling a 'greet' method on each element. This snippet is often generated by compilers or used in runtime code.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_18

LANGUAGE: typescript
CODE:
```
for (var j = 0; j < b.length; j++) {
    b[j].greet();
}
```

----------------------------------------

TITLE: TypeScript TypeFactory Class Definition
DESCRIPTION: Defines the TypeFactory class which provides methods to get type information from TypeScript code snippets. It initializes common types and uses the TypeScript compiler API to parse and analyze code, identifying types based on identifiers or positions. Note: The provided snippet contains compilation errors related to the 'TypeScript' namespace.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserharness.errors.txt#_snippet_33

LANGUAGE: TypeScript
CODE:
```
export class TypeFactory {
    public any: Type;
    public number: Type;
    public string: Type;
    public boolean: Type;

    constructor() {
        this.any = this.get('var x : any', 'x');
        this.number = this.get('var x : number', 'x');
        this.string = this.get('var x : string', 'x');
        this.boolean = this.get('var x : boolean', 'x');
    }

    public get (code: string, target: any) {
        var targetIdentifier = '';
        var targetPosition = -1;
        if (typeof target === ""string"") {
            targetIdentifier = target;
        }
        else if (typeof target === ""number"") {
            targetPosition = target;
        }
        else {
            throw new Error(""Expected string or number not "" + (typeof target));
        }

        var errors = null;
        compileString(code, 'test.ts', function (compilerResult) {
            errors = compilerResult.errors;
        })

        if (errors.length > 0)
            throw new Error(""Type definition contains errors: "" + errors.join("",""));

        var matchingIdentifiers: Type[] = [];

        if (!usePull) {
            // This will find the requested identifier in the first script where it's present, a naive search of each member in each script,
            // which means this won't play nicely if the same identifier is used in multiple units, but it will enable this to work on multi-file tests.
            // m = 1 because the first script will always be lib.d.ts which we don't want to search.
            for (var m = 1; m < compiler.scripts.members.length; m++) {
                var script = compiler.scripts.members[m];
                var enclosingScopeContext = TypeScript.findEnclosingScopeAt(new TypeScript.NullLogger(), <TypeScript.Script>script, new TypeScript.StringSourceText(code), 0, false);
                                            ~~~~~~~~~~
!!! error TS2304: Cannot find name 'TypeScript'.
                                                                                ~~~~~~~~~~
!!! error TS2304: Cannot find name 'TypeScript'.
                                                                                                          ~~~~~~~~~~
!!! error TS2503: Cannot find namespace 'TypeScript'.
                                                                                                                                                        ~~~~~~~~~~
!!! error TS2304: Cannot find name 'TypeScript'.
                var entries = new TypeScript.ScopeTraversal(compiler).getScopeEntries(enclosingScopeContext);
                                  ~~~~~~~~~~
!!! error TS2304: Cannot find name 'TypeScript'.

                for (var i = 0; i < entries.length; i++) {
                    if (entries[i].name === targetIdentifier) {
                        matchingIdentifiers.push(new Type(entries[i].type, code, targetIdentifier));
                    }
                }
            }
        }
        else {
            for (var m = 0; m < compiler.scripts.members.length; m++) {
                var script2 = <TypeScript.Script>compiler.scripts.members[m];
                                               ~~~~~~~~~~
!!! error TS2503: Cannot find namespace 'TypeScript'.
                if (script2.locationInfo.filename !== 'lib.d.ts') {
                    if (targetPosition > -1) {
                        var tyInfo = compiler.pullGetTypeInfoAtPosition(targetPosition, script2);
                        var name = this.getTypeInfoName(tyInfo.ast);
                        var foundValue = new Type(tyInfo.typeInfo, code, name);
                        if (!matchingIdentifiers.some(value => (value.identifier === foundValue.identifier) && (value.code === foundValue.code) && (value.type === foundValue.type))) {
                            matchingIdentifiers.push(foundValue);
                        }
                    }
                    else {
                        for (var pos = 0; pos < code.length; pos++) {
                            var tyInfo = compiler.pullGetTypeInfoAtPosition(pos, script2);

```

----------------------------------------

TITLE: TypeScript Greeter Instantiation and Usage
DESCRIPTION: Demonstrates how to create an instance of the Greeter class and call its 'greet' method. The result of the greet method is stored in a variable.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationClasses.sourcemap.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
var greeter = new Greeter(""world!"");
var str = greeter.greet();
```

----------------------------------------

TITLE: CJS Module Example (subfolder2/index.ts)
DESCRIPTION: Another example of a CommonJS module export within a TypeScript file, similar to the subfolder example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: TypeScript 4.0: Node Factory API and Type Node Changes
DESCRIPTION: Details changes in the TypeScript 4.0 compiler API, including the deprecation of older node factory functions in favor of a new API, renaming of `TupleTypeNode.elementTypes` to `elements`, and modifications to `KeywordTypeNode` and `TypeChecker.typeToTypeNode` behavior for specific types.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
TypeScript 4.0 API Changes:

- Node Factory Functions:
  Older factory functions for producing syntax tree nodes are deprecated in favor of a new node factory API.

- TupleTypeNode Renaming:
  `TupleTypeNode.elementTypes` has been renamed to `TupleTypeNode.elements`.

- KeywordTypeNode Updates:
  `KeywordTypeNode` is no longer used for `this` and `null` types. `null` now uses `LiteralTypeNode`, and `this` uses `ThisTypeNode`.

- TypeChecker.typeToTypeNode Behavior:
  `TypeChecker.typeToTypeNode` now correctly produces `LiteralTypeNode` for `true` and `false` types, aligning with parser behavior.
```

----------------------------------------

TITLE: CJS Module Example (subfolder2/index.ts)
DESCRIPTION: Another example of a CommonJS module export within a TypeScript file, similar to the subfolder example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: Collection Filtering Utilities (filter, select, reject)
DESCRIPTION: Creates new collections containing elements that pass or fail a test implemented by the provided function. Supports arrays and dictionaries.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_38

LANGUAGE: APIDOC
CODE:
```
filter<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
filter<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];

select<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
select<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];

reject<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T[];
reject<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T[];

// Iterator_<T, boolean> type definition (assumed):
// type Iterator_<T, boolean> = (value: T, index: number, collection: any) => boolean;
```

----------------------------------------

TITLE: Basic TypeScript Syntax and Module Referencing
DESCRIPTION: This snippet demonstrates fundamental TypeScript syntax, including variable declarations, class definitions with properties, and function definitions. It also shows how to use module references (`/// <reference path='...'/>`) to include code from other files, illustrating basic project structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlSimpleSpecifyOutputFile/node/maprootUrlsourcerootUrlSimpleSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
==== m1.ts ====
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

LANGUAGE: typescript
CODE:
```
==== test.ts ====
    /// <reference path='m1.ts'/>
    var a1 = 10;
    class c1 {
        public p1: number;
    }
    
    var instance1 = new c1();
    function f1() {
        return instance1;
    }
```

----------------------------------------

TITLE: TypeScript Language Features: Private Fields and Syntax
DESCRIPTION: Details on syntax and binding error handling for JavaScript files and private class field access.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
TypeScript Language Features:

Syntax and Binding Errors in JavaScript Files:
  Enables the TypeScript compiler to report syntax and binding errors in JavaScript files, providing a more consistent development experience across JS and TS.

Relaxed Checks on Code Before `super()`:
  Allows more flexibility in code execution before calling `super()` in class constructors, aligning with JavaScript's evolving class syntax.

Improved Recursion Depth Checks:
  Enhances the compiler's checks for recursion depth in type definitions and operations, preventing stack overflows in complex scenarios.
```

----------------------------------------

TITLE: JavaScript Function Definition Example
DESCRIPTION: A basic example of a JavaScript function definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithJsEmitPathSameAsInput.errors.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
function foo() {
    }
    
```

----------------------------------------

TITLE: TypeScript Function Call Spread Syntax
DESCRIPTION: Demonstrates using the spread syntax (`...`) to pass array elements as individual arguments to functions in TypeScript. Includes examples of how spread syntax can lead to type errors if the number of arguments doesn't match the function signature, such as the `action.run` example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/arraySpreadInCall.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
declare function f1(a: number, b: number, c: number, d: number, e: number, f: number): void;
f1(1, 2, 3, 4, ...[5, 6]);
f1(...[1], 2, 3, 4, 5, 6);
f1(1, 2, ...[3, 4], 5, 6);
f1(1, 2, ...[3], 4, ...[5, 6]);
f1(...[1, 2], ...[3, 4], ...[5, 6]);
f1(...(([1, 2])), ...(((([3, 4])))), ...([5, 6]));

interface IAction {
    run(event?: unknown): unknown;
}
declare const action: IAction
action.run(...[100, 'foo']) // error
```

----------------------------------------

TITLE: TypeScript Configuration File
DESCRIPTION: The tsconfig.json file specifies compiler options and files to include in a TypeScript project. This example includes a single file 'a.ts'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typingsLookup3.errors.txt#_snippet_0

LANGUAGE: json
CODE:
```
{ ""files"": ""a.ts"" }
```

----------------------------------------

TITLE: Set Module and Interface API
DESCRIPTION: Provides static methods for creating and manipulating Sets, along with the Set interface definition including persistent and transient changes, and sequence algorithms.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_7

LANGUAGE: APIDOC
CODE:
```
module Set {
  function isSet(maybeSet: any): maybeSet is Set<any>;
  function of<T>(...values: Array<T>): Set<T>;
  function fromKeys<T>(iter: Collection<T, any>): Set<T>;
  function fromKeys(obj: {[key: string]: any}): Set<string>;
  function intersect<T>(sets: Iterable<Iterable<T>>): Set<T>;
  function union<T>(sets: Iterable<Iterable<T>>): Set<T>;
}

export function Set(): Set<any>;
export function Set<T>(): Set<T>;
export function Set<T>(collection: Iterable<T>): Set<T>;

interface Set<T> extends Collection.Set<T> {
  // Persistent changes
  add(value: T): this;
  delete(value: T): this;
  remove(value: T): this;
  clear(): this;
  union(...collections: Array<Collection<any, T> | Array<T>>): this;
  merge(...collections: Array<Collection<any, T> | Array<T>>): this;
  intersect(...collections: Array<Collection<any, T> | Array<T>>): this;
  subtract(...collections: Array<Collection<any, T> | Array<T>>): this;
  // Transient changes
  withMutations(mutator: (mutable: this) => any): this;
  asMutable(): this;
  asImmutable(): this;
  // Sequence algorithms
  concat<C>(...valuesOrCollections: Array<Iterable<C> | C>): Set<T | C>;
  map<M>(mapper: (value: T, key: never, iter: this) => M, context?: any): Set<M>;
  flatMap<M>(mapper: (value: T, key: never, iter: this) => Iterable<M>, context?: any): Set<M>;
  filter<F extends T>(predicate: (value: T, key: never, iter: this) => value is F, context?: any): Set<F>;
  filter(predicate: (value: T, key: never, iter: this) => any, context?: any): this;
}
```

----------------------------------------

TITLE: TypeScript: CJS Export Example
DESCRIPTION: A simple example of a CommonJS (CJS) formatted file exporting a variable. This is provided as context for the import examples in other snippets.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node16).errors.txt#_snippet_25

LANGUAGE: typescript
CODE:
```
// cjs format file
    const x = 1;
    export {x};

```

----------------------------------------

TITLE: TypeScript: CJS Export Example
DESCRIPTION: A simple example of a CommonJS (CJS) formatted file exporting a variable. This is provided as context for the import examples in other snippets.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesAllowJs1(module=node18).errors.txt#_snippet_25

LANGUAGE: typescript
CODE:
```
// cjs format file
    const x = 1;
    export {x};

```

----------------------------------------

TITLE: OrderedSet Module and Interface API
DESCRIPTION: Defines static methods for creating OrderedSets and the OrderedSet interface, extending Set with additional sequence algorithms like zip and zipWith.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_8

LANGUAGE: APIDOC
CODE:
```
module OrderedSet {
  function isOrderedSet(maybeOrderedSet: any): boolean;
  function of<T>(...values: Array<T>): OrderedSet<T>;
  function fromKeys<T>(iter: Collection<T, any>): OrderedSet<T>;
  function fromKeys(obj: {[key: string]: any}): OrderedSet<string>;
}

export function OrderedSet(): OrderedSet<any>;
export function OrderedSet<T>(): OrderedSet<T>;
export function OrderedSet<T>(collection: Iterable<T>): OrderedSet<T>;

interface OrderedSet<T> extends Set<T> {
  // Sequence algorithms
  concat<C>(...valuesOrCollections: Array<Iterable<C> | C>): OrderedSet<T | C>;
  map<M>(mapper: (value: T, key: never, iter: this) => M, context?: any): OrderedSet<M>;
  flatMap<M>(mapper: (value: T, key: never, iter: this) => Iterable<M>, context?: any): OrderedSet<M>;
  filter<F extends T>(predicate: (value: T, key: never, iter: this) => value is F, context?: any): OrderedSet<F>;
  filter(predicate: (value: T, key: never, iter: this) => any, context?: any): this;
  zip(...collections: Array<Collection<any, any>>): OrderedSet<any>;
  zipWith<U, Z>(zipper: (value: T, otherValue: U) => Z, otherCollection: Collection<any, U>): OrderedSet<Z>;
  zipWith<U, V, Z>(zipper: (value: T, otherValue: U, thirdValue: V) => Z, otherCollection: Collection<any, U>, thirdCollection: Collection<any, V>): OrderedSet<Z>;
  zipWith<Z>(zipper: (...any: Array<any>) => Z, ...collections: Array<Collection<any, any>>): OrderedSet<Z>;
}
```

----------------------------------------

TITLE: TypeScript Generic Function Signatures and Calls
DESCRIPTION: Demonstrates defining and calling functions with generic types, comparing object literal parameter passing with direct argument passing. Shows variations in how generic type parameters are inferred and used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intraExpressionInferences.errors.txt#_snippet_7

LANGUAGE: typescript
CODE:
```
function simplified<T>(props: { generator: () => T, receiver: (t: T) => any }) {}

function whatIWant<T>(props: { generator: (bob: any) => T, receiver: (t: T) => any }) {}

function nonObject<T>(generator: (bob: any) => T, receiver: (t: T) => any) {}

simplified({ generator: () => 123, receiver: (t) => console.log(t + 2) })
whatIWant({ generator: (bob) => bob ? 1 : 2, receiver: (t) => console.log(t + 2) })
nonObject((bob) => bob ? 1 : 2, (t) => console.log(t + 2))
```

----------------------------------------

TITLE: TypeScript SetLike Type Incompatibility: Contravariant Parameter
DESCRIPTION: Examines type assignment errors (TS2322) with a 'SetLike' interface that includes both a contravariant 'set' method and a covariant 'get' method. The example shows how a mismatch in the 'set' method's parameter type ('unknown' vs. 'string') causes an assignment error when assigning a type with a more specific parameter to one expecting a broader type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/covariantCallbacks.errors.txt#_snippet_12

LANGUAGE: typescript
CODE:
```
type SetLike1<T> = { set(value: T): void, get(): T }

declare let sx: SetLike1<(x: unknown) => void>;
declare let sy: SetLike1<(x: string) => void>;
sx = sy;  // Error: Type 'SetLike1<(x: string) => void>' is not assignable to type 'SetLike1<(x: unknown) => void>'.
// Error details: Type '(x: string) => void' is not assignable to type '(x: unknown) => void'.
// Type 'unknown' is not assignable to type 'string'.
sy = sx;
```

----------------------------------------

TITLE: Async/Await with Custom MaybePromise Type
DESCRIPTION: Shows an example of using `async/await` with `Promise.all` in conjunction with a custom `MaybePromise` type. This demonstrates how to handle values that might be promises or direct values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/awaitedTypeStrictNull.errors.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
type MaybePromise<T> = T | Promise<T> | PromiseLike<T>
    declare function MaybePromise<T>(value: T): MaybePromise<T>;
    
    async function main() {
        let aaa: number;
        let bbb: string;
        [
            aaa,
            bbb,
        ] = await Promise.all([
            MaybePromise(1),
            MaybePromise('2'),
            MaybePromise(true),
        ])
    }
```

----------------------------------------

TITLE: APIDOC: TypeScript Parameters Utility Type
DESCRIPTION: The Parameters<T> utility type constructs a tuple type from the parameter types of a function type T. It extracts the argument types from a function signature.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parameterListAsTupleType.errors.txt#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Parameters<T>
  - Extracts the parameter types of a function type T into a tuple type.
  - Example:
    function foo(a: number, b: string) {}
    type FooParams = Parameters<typeof foo>; // Type is [number, string]

  - Limitations:
    - T must be a function type or a generic type that resolves to a function type.
    - Does not work directly with overloaded functions; it infers the type from the last overload signature.
```

----------------------------------------

TITLE: TypeScript Import Example
DESCRIPTION: This snippet demonstrates how to import a function exported from another TypeScript module. It imports the `abc` function from './bug24934' and then calls it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conflictingCommonJSES2015Exports.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { abc } from './bug24934';
abc(1, 2, 3);
```

----------------------------------------

TITLE: TypeScript: Generic FoldLeft Function Example
DESCRIPTION: Illustrates a generic `foldLeft` function signature and a usage example that results in a TypeScript error (TS2345) due to type incompatibility in the accumulator function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferFromGenericFunctionReturnTypes3.errors.txt#_snippet_12

LANGUAGE: typescript
CODE:
```
declare function foldLeft<U>(z: U, f: (acc: U, t: boolean) => U): U;
let res: boolean = foldLeft(true, (acc, t) => acc && t);  // Error TS2345
```

----------------------------------------

TITLE: TypeScript Module Export Example
DESCRIPTION: A basic TypeScript file demonstrating how to export a value using 'export ='. This is a CommonJS-style export mechanism in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/augmentExportEquals1.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
var x = 1;
export = x;
```

----------------------------------------

TITLE: ChainedObject Methods
DESCRIPTION: Provides methods for manipulating objects in a chained manner, including utility functions, property access, and type checks. These methods operate on the underlying object and return a new ChainedObject instance for further chaining.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_30

LANGUAGE: APIDOC
CODE:
```
ChainedObject<T>:
  keys(): ChainedArray<string>
    Returns an array of the object's own enumerable property names.
  values(): ChainedArray<any>
    Returns an array of the object's own enumerable property values.
  pairs(): ChainedArray<any[]>
    Returns an array of the object's own enumerable string keyed property [key, value] pairs.
  invert(): ChainedObject<any>
    Creates an object composed of the own enumerable property keyed by a property of the object.
  functions(): ChainedArray<string>
    Gets the names of the object's own enumerable string keyed function properties.
  methods(): ChainedArray<string>
    Alias for functions.
  extend(...sources: any[]): ChainedObject<T>
    Copies own enumerable string keyed properties of one or more source objects to the destination object.
  pick(...keys: string[]): ChainedObject<T>
    Creates an object composed of the own and inherited enumerable string keyed properties of object that predicates true.
  omit(...keys: string[]): ChainedObject<T>
    Creates an object composed of the own and inherited enumerable string keyed properties of object that predicate false.
  defaults(...defaults: any[]): ChainedObject<T>
    Assigns properties of source objects to the destination object for all ""missing"" properties.
  clone(): ChainedObject<T>
    Creates a shallow clone of the object.
  tap(interceptor: (object: T) => void): ChainedObject<T>
    Invokes interceptor with the chained object and returns it.
  has(key: string): ChainedObject<boolean>
    Checks if the object has a given property.
  isEqual(other: T): ChainedObject<boolean>
    Performs a deep comparison between two values to determine if they are equivalent.
  isEmpty(): ChainedObject<boolean>
    Checks if `value` is an empty object, collection, map, or set.
  isElement(): ChainedObject<boolean>
    Checks if `value` is a DOM element.
  isArray(): ChainedObject<boolean>
    Checks if `value` is classified as an `Array` object.
  isObject(): ChainedObject<boolean>
    Checks if `value` is the language type of `Object`.
  isArguments(): ChainedObject<boolean>
    Checks if `value` is classified as an `arguments` object.
  isFunction(): ChainedObject<boolean>
    Checks if `value` is classified as a `Function` object.
  isString(): ChainedObject<boolean>
    Checks if `value` is classified as a `String` primitive or object.
  isNumber(): ChainedObject<boolean>
    Checks if `value` is classified as a `Number` primitive or object.
  isFinite(): ChainedObject<boolean>
    Checks if `value` is a finite number.
  isBoolean(): ChainedObject<boolean>
    Checks if `value` is classified as a `Boolean` primitive or object.
  isDate(): ChainedObject<boolean>
    Checks if `value` is classified as a `Date` object.
  isRegExp(): ChainedObject<boolean>
    Checks if `value` is classified as a `RegExp` object.
  isNaN(): ChainedObject<boolean>
    Checks if `value` is `NaN`.
  isNull(): ChainedObject<boolean>
    Checks if `value` is `null`.
  isUndefined(): ChainedObject<boolean>
    Checks if `value` is `undefined`.
  value(): T
    Unwraps the chained object's value.
```

----------------------------------------

TITLE: TypeScript Module Declaration Example
DESCRIPTION: An example of a TypeScript module declaration file (`.d.ts` or within a module) defining an interface. This is relevant context for understanding how types are exposed and imported in TypeScript projects.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ambientDeclarationsPatterns_merging3.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
declare module ""*.foo"" {
  export interface OhNo { star: string }
}
```

----------------------------------------

TITLE: TypeScript Basic Class, Instance, and Function
DESCRIPTION: This snippet showcases a fundamental TypeScript class definition with a public property, instantiation of that class, and a function that returns the class instance. It serves as a basic example of object-oriented programming in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlSingleFileSpecifyOutputFile/node/maprootUrlsourcerootUrlSingleFileSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: TypeScript Module Chaining
DESCRIPTION: An example of how one TypeScript file can import and thus indirectly include other modules, demonstrating module resolution and dependency chaining within a project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsDeclarationsExportFormsErr.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
import ""./bar"";
import ""./bin"";
import ""./globalNs"";

```

----------------------------------------

TITLE: TypeScript Import Statement
DESCRIPTION: An example of importing a module in TypeScript. This snippet shows how to import a named export from a module aliased via tsconfig.json. The example highlights a potential error if the module or its types are not found.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathMappingBasedModuleResolution_withExtension_failedLookup.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
import { foo } from ""foo"";
```

----------------------------------------

TITLE: TypeScript Greeter Instantiation Function
DESCRIPTION: A TypeScript function that creates and returns an instance of the Greeter class. It takes a greeting string as an argument and returns a Greeter object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
function foo(greeting: string): Greeter {
    return new Greeter(greeting);
}
```

----------------------------------------

TITLE: TypeScript Satisfies Operator Example
DESCRIPTION: Demonstrates the use of the TypeScript 'satisfies' operator to check if an object conforms to an interface. Includes an example of a type error when the object is missing required properties and a valid example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeSatisfactionWithDefaultExport.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
==== ./a.ts (1 errors) ====
    interface Foo {
        a: number;
    }
    export default {} satisfies Foo;
                      ~~~~~~~~~
```

LANGUAGE: typescript
CODE:
```
==== ./b.ts (0 errors) ====
    interface Foo {
        a: number;
    }
    export default { a: 1 } satisfies Foo;
```

----------------------------------------

TITLE: TypeScript Type Parameter Constraint Examples
DESCRIPTION: This snippet illustrates various scenarios of using type parameters in TypeScript classes, interfaces, and functions, focusing on how constraints affect scope and demonstrating common errors when type parameters are used incorrectly or are out of scope. It includes examples of nested generic functions and type aliases.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeParameterUsedAsTypeParameterConstraint4.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
// Type parameters are in scope in their own and other type parameter lists
    // Some negative cases
    
    class C<T, U extends T, V extends U> {
        z: W; // error
           
        foo<W extends V>(x: W): T {
            var r: T;
            return x;
        }
    }
    
    interface I<T, U extends T, V extends U> {
        x: T;
        y: U;
        z: W; // error
           
        foo<W extends V>(x: W): T;
    }
    
    function foo<T, U extends T>(x: T, y: U): V { // error
                                              
        function bar<V extends T, W extends U>(): X { // error
                                                  
            function baz<X extends W, Y extends V>(a: X, b: Y): T {
                x = y;
                return y;
            }
        }
    }
    
    function foo2<U extends T, T>(x: T, y: U): W { // error
                                               
        function bar<V extends T, W extends U>(): Y { // error
                                                  
            function baz<X extends W, Y extends V>(a: X, b: Y): T {
                x = y;
                return y;
            }
        }
    }
    
    var f3 = <T, U extends T>(x: T, y: U) => {
        function bar<V extends T, W extends U>(r: X, s: Y) { // error
                                                  
                                                        
            var g = <X extends W, Y extends V>(a: X, b: Y): T => {
                x = y;
                return y;
            }
        }
    }
    
    var f4 = <U extends T, T>(x: V, y: X) => { // error
                                 
                                       
        function bar<V extends T, W extends U>() {
            var g = <X extends W, Y extends V>(a: X, b: Y): T => {
                x = y;
                return y;
            }
        }
    }
```

----------------------------------------

TITLE: JavaScript Function Example
DESCRIPTION: A simple JavaScript function definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithInlineSourceMap.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
function bar() {
}

```

----------------------------------------

TITLE: TypeScript Functions with Function Type Parameters
DESCRIPTION: Shows standalone TypeScript functions with parameters defined as various function types, including callbacks and functions returning arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_36

LANGUAGE: typescript
CODE:
```
function x121(parm: () => Base[] = () => [d1, d2]) { } 
function x122(parm: () => Base[] = function() { return [d1, d2] }) { } 
function x123(parm: () => Base[] = function named() { return [d1, d2] }) { } 
function x124(parm: { (): Base[]; } = () => [d1, d2]) { } 
function x125(parm: { (): Base[]; } = function() { return [d1, d2] }) { } 
function x126(parm: { (): Base[]; } = function named() { return [d1, d2] }) { } 
function x131(parm: (s: Base[]) => any = n => { var n: Base[]; return null; }) { } 
function x132(parm: Genric<Base> = { func: n => { return [d1, d2]; } }) { } 
```

----------------------------------------

TITLE: JavaScript Function Example
DESCRIPTION: A simple JavaScript function definition.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJs.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
function bar() {
}

```

----------------------------------------

TITLE: TypeScript Reference Example (test.ts)
DESCRIPTION: Shows how to use a reference path to include another TypeScript file, demonstrating basic syntax and external module referencing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlsourcerootUrlSubfolderSpecifyOutputFile/node/maprootUrlsourcerootUrlSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='ref/m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: TypeScript Interface Overload Demonstration
DESCRIPTION: Demonstrates TypeScript interface method overloading with various signatures. Includes examples of correct usage and common errors related to type assignment, argument count, and overload resolution.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/overload1.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
module O {
    export class A {

    }

    export class B extends A {
    }

    export class C extends B {

    }

    export interface I {
        f(s:string):number;
        f(n:number):string;
        g(n1:number,n2:number):number;
        g(n:number):string;
        g(a:A):C;
        g(c:C):string;
        h(s1:string,s2:number):string;
        h(s1:number,s2:string):number;
    }
}

declare var x:O.I;

var e:string=x.g(new O.A()); // matches overload but bad assignment
    // ~ !!! error TS2322: Type 'C' is not assignable to type 'string'.
var y:string=x.f(3); // good
y=x.f(""nope""); // can't assign number to string
    // ~ !!! error TS2322: Type 'number' is not assignable to type 'string'.
var z:string=x.g(x.g(3,3)); // good
z=x.g(2,2,2); // no match
              // ~ !!! error TS2554: Expected 1-2 arguments, but got 3.
z=x.g(); // no match
        // ~ !!! error TS2554: Expected 1-2 arguments, but got 0.
!!! related TS6210 overload1.ts:17:11: An argument for 'n' was not provided.
z=x.g(new O.B()); // ambiguous (up and down conversion)
    // ~ !!! error TS2322: Type 'C' is not assignable to type 'string'.
z=x.h(2,2); // no match
        // ~ !!! error TS2769: No overload matches this call.
!!! error TS2769:   Overload 1 of 2, '(s1: string, s2: number): string', gave the following error.
!!! error TS2769:     Argument of type 'number' is not assignable to parameter of type 'string'.
!!! error TS2769:   Overload 2 of 2, '(s1: number, s2: string): number', gave the following error.
!!! error TS2769:     Argument of type 'number' is not assignable to parameter of type 'string'.
z=x.h(""hello"",0); // good

var v=x.g;

```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlModuleSubfolderSpecifyOutputFile/node/sourcerootUrlModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Literal Types and Usage Examples
DESCRIPTION: Provides examples of correctly declared and used literals in TypeScript, including boolean, number, string, and regular expression types. Demonstrates valid syntax for various literal forms.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/literals.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
    var b: boolean;
    var b = true;
    var b = false;
    
    var n: number;
    var n = 1;
    var n = 1.0;
    var n = 1e4;
    var n = 0x1;
    var n = -1;
    var n = -1.0;
    var n = -1e-4;
    var n = -0x1;
    
    var s: string;
    var s = '';
    var s = """";
    var s = 'foo\
        bar';
    var s = ""foo\
        bar"";
    
    var r: RegExp;
    var r = /what/;
    var r = /\\/;
```

----------------------------------------

TITLE: TypeScript: While Loop Example (foo6_c)
DESCRIPTION: Illustrates a TypeScript 'while' loop with a constant condition (1 === 1). The loop body contains variable declarations and an inner function/arrow function, similar to other examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5_ES6.errors.txt#_snippet_18

LANGUAGE: typescript
CODE:
```
function foo6_c(x) {
        while (1 === 1) {
            const x = 1, y = 1;
            var v = x;
            (function() { return x + y + v });
            (() => x + y + v);
            if (x == 1) {
                return;
            }
        }
        
        use(v)
    }
```

----------------------------------------

TITLE: TypeScript 1.5 Program Interface and Diagnostics API
DESCRIPTION: TypeScript 1.5 brought significant changes to the `Program` interface and how diagnostics are accessed. `TypeChecker.emitFiles` was replaced by `Program.emit`, and diagnostics are now centralized on the `Program` object.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_28

LANGUAGE: APIDOC
CODE:
```
TypeScript 1.5 API Changes:

`Program` Interface Updates:
- `TypeChecker.emitFiles` is deprecated; use `Program.emit` instead.

Diagnostics Access:
- Diagnostics are now centralized on the `Program` object.
- Syntactic Diagnostics (single file): `Program.getSyntacticDiagnostics(sourceFile)`
- Syntactic Diagnostics (all files): `Program.getSyntacticDiagnostics()`
- Semantic Diagnostics (single file): `Program.getSemanticDiagnostics(sourceFile)`
- Semantic Diagnostics (all files): `Program.getSemanticDiagnostics()`
- Global Diagnostics: `Program.getGlobalDiagnostics()`
- Combined Diagnostics: Use `ts.getPreEmitDiagnostics(program)` for syntactic, semantic, and global diagnostics for all files.

Parameter Renaming:
- All usages of 'filename' and 'Filename' have been changed to 'fileName' and 'FileName'.
  - Examples:
    - `CompilerHost.getDefaultLibFilename` => `CompilerHost.getDefaultLibFileName`
    - `SourceFile.filename` => `SourceFile.fileName`
    - `FileReference.filename` => `FileReference.fileName`
    - `LanguageServiceHost.getDefaultLibFilename` => `LanguageServiceHost.getDefaultLibFileName`
    - `LanguageServiceShimHost.getDefaultLibFilename` => `LanguageServiceShimHost.getDefaultLibFileName`

`Classifier.getClassificationsForLine` Parameter Change:
- The `syntacticClassifierAbsent` parameter is now required.
```

----------------------------------------

TITLE: TypeScript JSX Usage Example
DESCRIPTION: Demonstrates the usage of JSX elements in a TypeScript file, importing a previously defined Element type and rendering components with attributes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsxFactoryAndReactNamespace.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
import { Element} from './Element';

let c: {
	a?: {
		b: string
	}
};

class A {
	view() {
		return [
			<meta content=""helloworld""></meta>,
			<meta content={c.a!.b}></meta>
		];
	}
}
```

----------------------------------------

TITLE: TypeScript Type Inference with callIt Function
DESCRIPTION: Demonstrates type inference with a generic `callIt` function that accepts an object with `produce` and `consume` methods. Shows how type mismatches in these methods can lead to errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intraExpressionInferences.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
// Repros from #47599

declare function callIt<T>(obj: {
    produce: (n: number) => T,
    consume: (x: T) => void
}): void;

callIt({
    produce: () => 0,
    consume: n => n.toFixed()
});

callIt({
    produce: _a => 0,
    consume: n => n.toFixed(),
});

callIt({
    produce() {
        return 0;
    },
    consume: n => n.toFixed()
});

```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootAbsolutePathModuleSubfolderSpecifyOutputFile/node/sourceRootAbsolutePathModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: JSDoc for Array of Objects Parameters
DESCRIPTION: Illustrates documenting properties of elements within an array parameter using bracket notation in JSDoc. This example includes documenting required and optional properties of objects inside an array.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParamTagTypeLiteral.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
/**
 * @param {Object[]} opts2
 * @param {string} opts2[].anotherX
 * @param {string=} opts2[].anotherY
 */
function foo2(/** @param opts2 bad idea theatre! */opts2) {
    opts2[0].anotherX;
}

foo2([{anotherX: ""world""}]);
```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathModuleSubfolderSpecifyOutputFile/node/mapRootRelativePathModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Function Signature with Rest Parameters
DESCRIPTION: Demonstrates defining TypeScript functions with rest parameters, including scenarios with specific types for the rest arguments. This snippet explores type safety with variable arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkJsdocSatisfiesTag15.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
/** @satisfies {(a: string, ...args: never) => void} */
export const fn2 = (a, b) => {};

/** 
 * @satisfies {(a: string, ...args: never) => void}
 * @param {string} a
 */
export const fn3 = (a, b) => {};

/** 
 * @satisfies {(a: string, ...args: number[]) => void}
 * @param {string} a
 * @param {number} b
 */
export const fn4 = (a, b) => {};

/** 
 * @satisfies {(a: string, ...args: number[]) => void}
 * @param {string} a
 * @param {string | number} b
 */
export const fn6 = (a, b) => {};
```

----------------------------------------

TITLE: JSON File Content
DESCRIPTION: Simple JSON files used as data sources in the import examples. These files demonstrate the structure of data being imported.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesJson(module=node20).errors.txt#_snippet_4

LANGUAGE: json
CODE:
```
{}
```

----------------------------------------

TITLE: TypeScript Object Property Assignment Example
DESCRIPTION: A basic TypeScript example showing assignment to an object property. Comments suggest that behavior related to widening propagation might differ across TypeScript versions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/literalFreshnessPropagationOnNarrowing.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
function f1() {
    let b = true;
    let obj = { b };
    // Desired: OK
    // 3.0: OK
    // 3.1 as-is: OK
    // 3.1 minus widening propagation: error
    obj.b = false;
}
```

----------------------------------------

TITLE: TypeScript Functions with Array Parameters
DESCRIPTION: Demonstrates standalone TypeScript functions accepting array types as parameters, including standard array and Array<T> syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_37

LANGUAGE: typescript
CODE:
```
function x127(parm: Base[] = [d1, d2]) { } 
function x128(parm: Array<Base> = [d1, d2]) { } 
function x129(parm: { [n: number]: Base; } = [d1, d2]) { } 
function x130(parm: {n: Base[]; }  = { n: [d1, d2] }) { } 
```

----------------------------------------

TITLE: TypeScript Example: Test Module Import
DESCRIPTION: An example TypeScript file demonstrating how to import a module ('m1') and use its exported members. It also defines its own exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlModuleSimpleSpecifyOutputFile/node/maprootUrlModuleSimpleSpecifyOutputFile.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import m1 = require(""m1"");
    export var a1 = 10;
    export class c1 {
        public p1: number;
    }
    
    export var instance1 = new c1();
    export function f1() {
        return instance1;
    }
    
    export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathModuleSubfolderSpecifyOutputFile/node/mapRootAbsolutePathModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Basic TypeScript Export Example
DESCRIPTION: Demonstrates simple variable exports in TypeScript. This file serves as a base for imports in other examples and shows valid syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importAttributes1(module=commonjs).errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
export const a = 1;
export const b = 2;

```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapModuleSubfolderSpecifyOutputFile/node/sourcemapModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Language Features: Type Inference and Narrowing
DESCRIPTION: Documentation for advanced type inference and narrowing capabilities in TypeScript, including improvements for generics, intersection types, and discriminated unions.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
TypeScript Language Features:

Improved Narrowing on Generics and Intersection Reduction:
  Enhances type narrowing when working with generic types and complex intersection types, leading to more precise type checking.

Improved Inference for `infer` Types in Template String Types:
  Better inference capabilities for `infer` type variables within template string literal types, allowing for more flexible string manipulation type definitions.

Narrowing for Variables Destructured from Discriminated Unions:
  Improves type narrowing when destructuring variables from discriminated union types, ensuring correct type safety within conditional blocks.

Improved Inference from Binding Patterns:
  Enhances type inference when using destructuring assignment (binding patterns) for variables and function parameters.

`extends` Constraints on `infer` Type Variables:
  Allows specifying constraints on `infer` type variables using `extends`, enabling more controlled conditional type inference.

Template String Discriminants:
  Leverages template string literal types for creating discriminated unions, allowing for more expressive and type-safe state management.

`in` Checks on `#private` Fields:
  Supports using the `in` operator to check for the existence of private class fields (`#private`), improving runtime type checking within classes.
```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootRelativePathModuleSubfolderSpecifyOutputFile/node/sourceRootRelativePathModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Global This Capture Example
DESCRIPTION: Demonstrates how to trigger the global 'this' capture in TypeScript by using an immediately invoked lambda expression. This pattern is useful for ensuring 'this' context is correctly handled, especially in module environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/prologueEmit/node/prologueEmit.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
// Add a lambda to ensure global 'this' capture is triggered
(()=>this.window);
```

----------------------------------------

TITLE: ChainedArray Methods
DESCRIPTION: Extends ChainedObject with methods specifically for array manipulation, including iteration, transformation, filtering, and aggregation. These methods operate on the underlying array and return a new ChainedArray or ChainedObject instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_31

LANGUAGE: APIDOC
CODE:
```
ChainedArray<T> extends ChainedObject<Array<T>>:
  each(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>
    Iterates over elements of a collection, executing `iteratee` for each element.
  forEach(iterator: Iterator_<T, void>, context?: any): ChainedObject<void>
    Alias for `each`.
  map<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>
    Creates an array of values by running each element of collection thru `iteratee`.
  collect<U>(iterator: Iterator_<T, U>, context?: any): ChainedArray<U>
    Alias for `map`.
  reduce(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>
    Reduces `collection` to a value which is the accumulated result of running each element thru an `iteratee`.
  reduce<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>
    Reduces `collection` to a value which is the accumulated result of running each element thru an `iteratee`.
  foldl(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>
    Alias for `reduce` (left-associative).
  foldl<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>
    Alias for `reduce` (left-associative).
  inject(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>
    Alias for `reduce`.
  inject<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>
    Alias for `reduce`.
  reduceRight(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>
    Reduces `collection` to a value which is the accumulated result of running each element thru an `iteratee` from right to left.
  reduceRight<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>
    Reduces `collection` to a value which is the accumulated result of running each element thru an `iteratee` from right to left.
  foldr(iterator: Reducer<T, T>, initialValue?: T, context?: any): ChainedObject<T>
    Alias for `reduceRight` (right-associative).
  foldr<U>(iterator: Reducer<T, U>, initialValue: U, context?: any): ChainedObject<U>
    Alias for `reduceRight` (right-associative).
  find(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>
    Retrieves the first element of `collection` that the `predicate` returns truthy for.
  detect(iterator: Iterator_<T, boolean>, context?: any): ChainedObject<T>
    Alias for `find`.
  filter(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>
    Creates an array of elements filtered by `predicate`.
  select(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>
    Alias for `filter`.
  where(properties: Object): ChainedArray<T>
    Creates an array of elements that `predicate` returns truthy for.
  findWhere(properties: Object): ChainedObject<T>
    The inverse of `where`.
  reject(iterator: Iterator_<T, boolean>, context?: any): ChainedArray<T>
    Creates an array of elements that `predicate` returns falsy for.
  every(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>
    Checks if `predicate` returns truthy for all elements of `collection`.
  all(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>
    Alias for `every`.
  some(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>
    Checks if `predicate` returns truthy for any element of `collection`.
  any(iterator?: Iterator_<T, boolean>, context?: any): ChainedObject<boolean>
    Alias for `some`.
  contains(value: T): ChainedObject<boolean>
    Checks if `collection` contains `value`.
  include(value: T): ChainedObject<boolean>
    Alias for `contains`.
  invoke(methodName: string, ...args: any[]): ChainedArray<any>
    Invokes the method at `propertyName` on each element in `collection` returning an array of the results.
  pluck(propertyName: string): ChainedArray<any>
    Creates an array of property values by `propertyName` from each element in `collection`.
  max(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>
    Gets the maximum value of `collection`.
  min(iterator?: Iterator_<T, any>, context?: any): ChainedObject<T>
    Gets the minimum value of `collection`.
```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlModuleSubfolderSpecifyOutputFile/node/maprootUrlModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Function with Callback Type
DESCRIPTION: Illustrates passing a function as an argument, specifying its `this` context and parameter/return types using JSDoc. The example shows how a function expecting a specific callback signature is used.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocFunctionType.errors.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
/**
 * @param {function(this: string, number): number} c is just passing on through
 * @return {function(this: string, number): number}
 */
function id1(c) {
    return c
}

var x = id1(function (n) { return this.length + n });
```

----------------------------------------

TITLE: TypeScript: Async Arrow Functions
DESCRIPTION: Demonstrates the use of async arrow functions, a concise syntax for defining asynchronous operations. Covers basic arrow functions and those with explicit return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es5.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
let f7 = async () => { };
let f8 = async (): Promise<void> => { };
let f9 = async (): MyPromise<void> => { };
```

----------------------------------------

TITLE: TypeScript Module Example: m1.ts
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file demonstrates basic module exports, including a class instance and a function returning that instance.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outModuleSubfolderSpecifyOutputFile/node/outModuleSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export var m1_a1 = 10;
export class m1_c1 {
    public m1_c1_p1: number;
}

export var m1_instance1 = new m1_c1();
export function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Module Reference Example
DESCRIPTION: Demonstrates how to define a class and function in one TypeScript file (m1.ts) and reference it in another (test.ts) using a triple-slash directive. This showcases basic module dependency management in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootWithNoSourceMapOption/node/mapRootWithNoSourceMapOption.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
==== m1.ts (0 errors) ====
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

LANGUAGE: typescript
CODE:
```
==== test.ts (0 errors) ====
    /// <reference path='m1.ts'/>
    var a1 = 10;
    class c1 {
        public p1: number;
    }
    
    var instance1 = new c1();
    function f1() {
        return instance1;
    }
```

----------------------------------------

TITLE: TypeScript Compiler Performance and File Watching
DESCRIPTION: Information on performance optimizations for the TypeScript compiler, including build processes, file watching, and trace analysis tools.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_6

LANGUAGE: APIDOC
CODE:
```
TypeScript Compiler Performance:

`--build`, `--watch`, and `--incremental` Performance Improvements:
  Significant performance gains in build, watch, and incremental compilation modes, reducing build times and improving developer experience.

Resilient File-Watching During Large File Changes:
  Enhances the file watching mechanism to remain stable and responsive even when dealing with large numbers of file changes or large files.

Find-All-References Performance Improvements:
  Optimizes the 'Find All References' feature for faster and more efficient symbol searching across the codebase.

Speed Improvements on Windows/Mac via `realpathSync.native`:
  Leverages native `realpathSync` implementation on Windows and macOS to accelerate file path resolution and improve overall performance.
```

----------------------------------------

TITLE: TypeScript Errors in example.js
DESCRIPTION: This snippet shows TypeScript errors encountered in an example JavaScript file. It highlights issues with function type annotations and undefined names, demonstrating common type-checking problems.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParameterParsingInfiniteLoop.errors.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
// @ts-check
    /**
     * @type {function(@foo)}
              ~~~~~~~~~~~~~~
!!! error TS7014: Function type, which lacks return-type annotation, implicitly has an 'any' return type.
                       ~
!!! error TS1110: Type expected.
                        ~~~
!!! error TS2304: Cannot find name 'foo'.
     */
    let x;
```

----------------------------------------

TITLE: Fix TypeScript Error: Get Accessor Must Return Value
DESCRIPTION: This snippet addresses the TypeScript error TS2378, which indicates that a 'get' accessor within a class must always return a value. To resolve this, ensure the 'get' accessor includes a return statement that provides a value of the expected type. Failure to do so results in a compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserAccessors1.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    get Foo() { }
}

```

----------------------------------------

TITLE: TypeScript Rest Properties with Classes and Interfaces
DESCRIPTION: Demonstrates the use of object rest syntax when destructuring properties from class instances and interface implementations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectRest.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
class Removable {
    private x: number;
    protected y: number;
    set z(value: number) { }
    get both(): number { return 12 }
    set both(value: number) { }
    m() { }
    removed: string;
    remainder: string;
}
interface I {
    m(): void;
    removed: string;
    remainder: string;
}
var removable = new Removable();
var { removed, ...removableRest } = removable;
var i: I = removable;
var { removed, ...removableRest2 } = i;
```

----------------------------------------

TITLE: TypeScript Module Property Example with Errors
DESCRIPTION: This snippet showcases TypeScript module declaration and property visibility. It includes examples of common compiler errors: TS1128 (Declaration or statement expected) and TS2304 (Cannot find name).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleProperty1.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
module moduleProperty1 {
    module M {
        var x=10;  // variable local to this module body
        var y=x;  // property visible only in module
        export var z=y;  // property visible to any code
    }
    
    module M2 {
        var x = 10;  // variable local to this module body
        private y = x;  // can't use private in modules
        ~~~~~~~
!!! error TS1128: Declaration or statement expected.
                ~
!!! error TS2304: Cannot find name 'y'.
        export var z = y;  // property visible to any code
                       ~
!!! error TS2304: Cannot find name 'y'.
    }
}
```

----------------------------------------

TITLE: Underscore Function Binding and Memoization
DESCRIPTION: Illustrates how to bind functions to specific contexts, manage function execution with `bindAll`, and optimize recursive functions using `memoize`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_6

LANGUAGE: JavaScript
CODE:
```
var func = function (greeting) { return greeting + ': ' + this.name };
var func2 = _.bind(func, { name: 'moe' }, 'hi');
func2();

var buttonView = {
    label: 'underscore',
    onClick: function () { alert('clicked: ' + this.label); },
    onHover: function () { alert('hovering: ' + this.label); }
};
_.bindAll(buttonView);
$('#underscore_button').bind('click', buttonView.onClick);

var fibonacci = _.memoize(function (n) {
    return n < 2 ? n : fibonacci(n - 1) + fibonacci(n - 2);
});
```

----------------------------------------

TITLE: TypeScript Module Declaration Example
DESCRIPTION: This snippet defines a TypeScript module 'm2' with interfaces and exports a module object. It serves as an example of module structure in TypeScript, which can be relevant when discussing compiler options like 'declarationMap'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationMapsWithoutDeclaration.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
module m2 {
    export interface connectModule {
        (res, req, next): void;
    }
    export interface connectExport {
        use: (mod: connectModule) => connectExport;
        listen: (port: number) => void;
    }

}

var m2: {
    (): m2.connectExport;
    test1: m2.connectModule;
    test2(): m2.connectModule;
};

export = m2;
```

----------------------------------------

TITLE: TypeScript Fixed Module Import Example
DESCRIPTION: This is a corrected version of the module import example. It explicitly uses the 'type' keyword for importing types, which is a modern TypeScript practice and aligns with the 'verbatimModuleSyntax' recommendation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_mixedImports.errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import { Component, type ComponentProps } from ""./exports.js"";
```

----------------------------------------

TITLE: TypeScript Example: Test Module Import
DESCRIPTION: An example TypeScript file demonstrating how to import a module ('m1') and use its exported members. It also defines its own exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlModuleSimpleSpecifyOutputFile/node/sourcerootUrlModuleSimpleSpecifyOutputFile.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import m1 = require(""m1"");
    export var a1 = 10;
    export class c1 {
        public p1: number;
    }
    
    export var instance1 = new c1();
    export function f1() {
        return instance1;
    }
    
    export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: TypeScript Auto-import Preferences
DESCRIPTION: Configuration settings that control the behavior of TypeScript's auto-import feature, including module specifier formatting, ending preferences, and the inclusion of package.json dependencies.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/FAQ.md#_snippet_16

LANGUAGE: APIDOC
CODE:
```
typescript.preferences.importModuleSpecifier: string
  Description: Controls how auto-import chooses how to refer to a module.
  Possible values: ""shortest"", ""project-relative"", ""relative-to-module"", ""legacy"" (default: ""shortest"")
```

LANGUAGE: APIDOC
CODE:
```
typescript.preferences.importModuleSpecifierEnding: string
  Description: Controls the file extension used for module specifiers in auto-imports.
  Possible values: ""auto"", ""js"", ""jsx"", ""ts"", ""tsx"", ""dts"" (default: ""auto"")
```

LANGUAGE: APIDOC
CODE:
```
typescript.preferences.includePackageJsonAutoImports: ""auto"" | ""on"" | ""off""
  Description: Controls whether auto-import scans package.json dependencies. ""auto"" (default) scans up to 25 packages. ""on"" scans all dependencies. ""off"" disables scanning.
  Default: ""auto""
```

----------------------------------------

TITLE: TypeScript Module Reference Example
DESCRIPTION: Demonstrates how to define a class and function in one TypeScript file (m1.ts) and reference it in another (test.ts) using a triple-slash directive. This showcases basic module dependency management in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootWithNoSourceMapOption/amd/mapRootWithNoSourceMapOption.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
==== m1.ts (0 errors) ====
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

LANGUAGE: typescript
CODE:
```
==== test.ts (0 errors) ====
    /// <reference path='m1.ts'/>
    var a1 = 10;
    class c1 {
        public p1: number;
    }
    
    var instance1 = new c1();
    function f1() {
        return instance1;
    }
```

----------------------------------------

TITLE: Recursive Type Inference Example
DESCRIPTION: Defines a recursive type `Deep` that allows properties to be either their original type or a deeply nested version of that type. The example shows its application with a function `baz` that processes such types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unionTypeInference.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
type Deep<T> = { [K in keyof T]: T[K] | Deep<T[K]> };

declare function baz<T>(dp: Deep<T>): T;
declare let xx: { a: string | undefined };

baz(xx);
```

----------------------------------------

TITLE: TypeScript Compiler API References
DESCRIPTION: A collection of references to key functions and interfaces within the TypeScript compiler, useful for understanding internal workings and debugging.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/codebase/compiler/Codebase-Compiler-Checker.md#_snippet_8

LANGUAGE: APIDOC
CODE:
```
getDiagnosticsProducingTypeChecker: function in src/compiler/program.ts
  - Related to: getDiagnosticsWorker, checkSourceFileWorker

getDiagnosticsWorker: function in src/compiler/checker.ts
  - Related to: getDiagnosticsProducingTypeChecker, checkSourceFileWorker

checkSourceFileWorker: function in src/compiler/checker.ts
  - Related to: getDiagnosticsProducingTypeChecker, getDiagnosticsWorker

NodeLinks: interface in src/compiler/types.ts

checkSourceElementWorker: function in src/compiler/checker.ts

checkReturnStatement: function in src/compiler/checker.ts

getContainingFunction: function in src/compiler/checker.ts

isFunctionLikeKind: function in src/compiler/utilities.ts

grammarErrorOnFirstToken: function in src/compiler/checker.ts

createFileDiagnostic: export function in src/compiler/utilities.ts
  - Signature: createFileDiagnostic(file: SourceFile, start: number, length: number, message: DiagnosticMessage): DiagnosticWithLocation
  - Description: Creates a diagnostic with location information.

checkTruthinessExpression: function in src/compiler/checker.ts

checkExpression: function in src/compiler/checker.ts

checkIfStatement: function in src/compiler/checker.ts

checkBinaryLikeExpression: function in src/compiler/checker.ts

isTypeRelatedTo: function in src/compiler/checker.ts

isSimpleTypeRelatedTo: function in src/compiler/checker.ts

checkTypeRelatedTo: function in src/compiler/checker.ts
  - Also known as: isRelatedTo

TypeFlags: enum in src/compiler/types.ts

isIdenticalTo: function in src/compiler/checker.ts

recursiveTypeRelatedTo: function in src/compiler/checker.ts
  - Related to: eachTypeRelatedToSomeType, structuredTypeRelatedTo

eachTypeRelatedToSomeType: function in src/compiler/checker.ts
  - Related to: recursiveTypeRelatedTo, structuredTypeRelatedTo

structuredTypeRelatedTo: function in src/compiler/checker.ts
  - Related to: recursiveTypeRelatedTo, eachTypeRelatedToSomeType

GLOSSARY.md#statements: Link to glossary
GLOSSARY.md#structural-type-system: Link to glossary
```

----------------------------------------

TITLE: TypeScript Class Definition
DESCRIPTION: A basic example of a class definition in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJs.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
class c {
}

```

----------------------------------------

TITLE: TypeScript 2.6: Language Service Method Parameter Updates
DESCRIPTION: Notes that in TypeScript 2.6, certain language service methods (`getCompletionEntryDetails` and `getCompletionEntrySymbols`) gained additional parameters. Plugins wrapping the language service must pass these new parameters to the original implementation.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_20

LANGUAGE: APIDOC
CODE:
```
TypeScript 2.6 API Changes:

- Language Service Method Parameters:
  Methods like `getCompletionEntryDetails` and `getCompletionEntrySymbols` now include additional parameters. Language service wrappers must pass these parameters to the underlying implementation.
```

----------------------------------------

TITLE: TypeScript Import/Declaration Conflict Example
DESCRIPTION: Illustrates a TypeScript import declaration conflict and a block-scoped variable used before declaration. This example highlights issues with merging declarations and variable scope in TypeScript, showing specific error codes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportAssignmentImportMergeNoCrash.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
import Obj from ""./assignment"";
           ~~~
!!! error TS2395: Individual declarations in merged declaration 'Obj' must be all exported or all local.
           ~~~
!!! error TS2440: Import declaration conflicts with local declaration of 'Obj'.
    
    export const Obj = void Obj;
                 ~~~
!!! error TS2395: Individual declarations in merged declaration 'Obj' must be all exported or all local.
                            ~~~
!!! error TS2448: Block-scoped variable 'Obj' used before its declaration.
!!! related TS2728 user.ts:3:14: 'Obj' is declared here.
```

----------------------------------------

TITLE: TypeScript Basic Switch Statement Examples
DESCRIPTION: Provides simple examples of TypeScript switch statements with basic literal types. These cases cover string, number, boolean, null, and undefined values, demonstrating fundamental usage patterns.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/switchStatements.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
switch ('') { }
switch (12) { }
switch (true) { }
switch (null) { }
switch (undefined) { }
```

----------------------------------------

TITLE: TypeScript ECMAScript Target and Node.js Requirements
DESCRIPTION: Summarizes the evolution of the TypeScript package's ECMAScript target and Node.js version requirements across different releases, noting the shift from ES5 to ES2020.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
ECMAScript Target and Node.js Requirements:

- TypeScript 5.1:
  - Targets: ES2020.
  - Requires: Node.js 14.17 or newer (Note: Node 14 is EOL April 2023).

- TypeScript 5.0:
  - Targets: ES2018.
  - Requires: Node.js 12.20 or newer.
  - Prior to 5.0: Targeted ES5 syntax and ES2015 library.
```

----------------------------------------

TITLE: TypeScript Console Log Example
DESCRIPTION: An example of logging a variable to the console in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForObjectBindingPattern.sourcemap.txt#_snippet_18

LANGUAGE: typescript
CODE:
```
console.log(primaryA);
```

----------------------------------------

TITLE: TypeScript Main Method Demonstration
DESCRIPTION: Demonstrates the main execution flow of a TypeScript application, including calls to BasicFeatures methods. This snippet highlights various syntax and type errors encountered during compilation, illustrating common pitfalls.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constructorWithIncompleteTypeAnnotation.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
static Main(...args: string[]) {
    try {
        var bfs = new BasicFeatures();
        var retValue: number = 0;

        retValue = bfs.VARIABLES();
        if (retValue != 0) {
            return 1;
        }

        retValue = bfs.TYPES();
        if (retValue != 0) {
            return 1;
        }

        retValue = bfs.OPERATOR();
        if (retValue != 0) {
            return 1;
        }
    }
    catch (e) {
        console.log(e);
    }
    finally {

    }

    console.log('Done');

    return 0;

}
```

----------------------------------------

TITLE: Block Start
DESCRIPTION: Indicates the start of a code block.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/unicodeEscapesInNames02(target=es5).sourcemap.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
{
```

----------------------------------------

TITLE: JSON Data Example
DESCRIPTION: A sample JSON file intended to be imported into a TypeScript project. This file's content is straightforward JSON data.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/requireOfJsonFileWithModuleNodeResolutionEmitNone.errors.txt#_snippet_1

LANGUAGE: json
CODE:
```
{
    ""a"": true,
    ""b"": ""hello""
}
```

----------------------------------------

TITLE: Underscore Set Operations and Pairing
DESCRIPTION: Illustrates Underscore.js functions for performing set-like operations on arrays and creating objects from arrays. Includes union, intersection, difference, zip, and object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_4

LANGUAGE: TypeScript
CODE:
```
/// <reference path=""underscoreTest1_underscore.ts"" />

_.union([1, 2, 3], [101, 2, 1, 10], [2, 1]);
_.intersection([1, 2, 3], [101, 2, 1, 10], [2, 1]);
_.difference([1, 2, 3, 4, 5], [5, 2, 10]);
_.zip(['moe', 'larry', 'curly'], [30, 40, 50], [true, false, false]);
_.object(['moe', 'larry', 'curly'], [30, 40, 50]);
```

----------------------------------------

TITLE: TypeScript Export Assignment (CommonJS Style)
DESCRIPTION: Provides an example of an export assignment, which is typically used in CommonJS modules but can cause errors if the project targets ES modules. This specific example triggers TS1203.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=true).errors.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
export = {};
```

----------------------------------------

TITLE: TypeScript Export Assignment (CommonJS Style)
DESCRIPTION: Provides an example of an export assignment, which is typically used in CommonJS modules but can cause errors if the project targets ES modules. This specific example triggers TS1203.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports(isolatedmodules=false).errors.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
export = {};
```

----------------------------------------

TITLE: TypeScript Foo2 Invariant Variance Example
DESCRIPTION: Illustrates TypeScript's invariant variance measurement for a recursive interface `Foo2`. This example shows how nested structures with function types affect variance analysis, leading to type incompatibilities and errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/varianceMeasurement.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
// The type below is invariant in T and is measured as such.

interface Foo2<T> {
  x: T;
  y: { x: (arg: T) => void, y: Foo2<(arg: T) => void>; }
}

declare const f20: Foo2<string>;
const f21: Foo2<'a'> = f20;
      ~~~
!!! error TS2322: Type 'Foo2<string>' is not assignable to type 'Foo2<""a"">'.
!!! error TS2322:   Types of property 'x' are incompatible.
!!! error TS2322:     Type 'string' is not assignable to type '""a""'.
const f22: Foo2<unknown> = f20;
      ~~~
!!! error TS2322: Type 'Foo2<string>' is not assignable to type 'Foo2<unknown>'.
!!! error TS2322:   The types of 'y.x' are incompatible between these types.
!!! error TS2322:     Type '(arg: string) => void' is not assignable to type '(arg: unknown) => void'.
!!! error TS2322:       Types of parameters 'arg' and 'arg' are incompatible.
!!! error TS2322:         Type 'unknown' is not assignable to type 'string'.
```

----------------------------------------

TITLE: Install and Run Gollum Wiki
DESCRIPTION: Instructions to install Gollum, a static site generator, and start the local wiki server. This allows for local development and testing of wiki content.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
# Install the deps
gem install gollum

# Start the server
gollum
```

----------------------------------------

TITLE: TypeScript Basic Class, Instance, and Function
DESCRIPTION: This snippet showcases a fundamental TypeScript class definition with a public property, instantiation of that class, and a function that returns the class instance. It serves as a basic example of object-oriented programming in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlSingleFileSpecifyOutputFile/node/maprootUrlSingleFileSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootAbsolutePathSubfolderSpecifyOutputFile/node/mapRootAbsolutePathSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Nested Object Rest/Spread
DESCRIPTION: Illustrates how to apply object rest and spread syntax within nested object structures for more complex data manipulation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectRest.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
let o2 = { c: 'terrible idea?', d: 'yes' };
var { d: renamed, ...d } = o2;

let nestedrest: { x: number, n1: { y: number, n2: { z: number, n3: { n4: number } } }, rest: number, restrest: number };
var { x, n1: { y, n2: { z, n3: { ...nr } } }, ...restrest } = nestedrest;
```

----------------------------------------

TITLE: TypeScript Transform Function with Custom CompilerHost
DESCRIPTION: This snippet shows a TypeScript function `transform` that utilizes the TypeScript compiler API to process source code. It implements a custom `CompilerHost` to manage file reading and writing in memory, enabling transformations without touching the file system. The function takes source code, library definitions, and compiler options, returning generated JavaScript outputs and any compilation errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Compiler-API-(TypeScript-1.4).md#_snippet_2

LANGUAGE: TypeScript
CODE:
```
/// <reference path=""typings/node/node.d.ts"" />
/// <reference path=""typings/typescript/typescript.d.ts"" />

import ts = require(""typescript"");
import fs = require(""fs"");
import path = require(""path"");

function transform(contents: string, libSource: string, compilerOptions: ts.CompilerOptions = {}) {
    // Generated outputs
    var outputs = [];
    // Create a compilerHost object to allow the compiler to read and write files
    var compilerHost = {
        getSourceFile: function (filename, languageVersion) {
            if (filename === ""file.ts"")
                return ts.createSourceFile(filename, contents, compilerOptions.target, ""0"");
            if (filename === ""lib.d.ts"")
                return ts.createSourceFile(filename, libSource, compilerOptions.target, ""0"");
            return undefined;
        },
        writeFile: function (name, text, writeByteOrderMark) {
            outputs.push({ name: name, text: text, writeByteOrderMark: writeByteOrderMark });
        },
        getDefaultLibFilename: function () { return ""lib.d.ts""; },
        useCaseSensitiveFileNames: function () { return false; },
        getCanonicalFileName: function (filename) { return filename; },
        getCurrentDirectory: function () { return """"; },
        getNewLine: function () { return ""\n""; }
    };
    // Create a program from inputs
    var program = ts.createProgram([""file.ts""], compilerOptions, compilerHost);
    // Query for early errors
    var errors = program.getDiagnostics();
    // Do not generate code in the presence of early errors
    if (!errors.length) {
        // Type check and get semantic errors
        var checker = program.getTypeChecker(true);
        errors = checker.getDiagnostics();
        // Generate output
        checker.emitFiles();
    }
    return {
        outputs: outputs,
        errors: errors.map(function (e) { return e.file.filename + ""("" + e.file.getLineAndCharacterFromPosition(e.start).line + ""): "" + e.messageText; })
    };
}

// Calling our transform function using a simple TypeScript variable declarations, 
// and loading the default library like:
var source = ""var x: number  = 'string'"";
var libSource = fs.readFileSync(path.join(path.dirname(require.resolve('typescript')), 'lib.d.ts')).toString();
var result = transform(source, libSource);

console.log(JSON.stringify(result));

```

LANGUAGE: JSON
CODE:
```
{
    ""outputs"": [
        {
            ""name"": ""file.js"",
            ""text"": ""var x = 'string';\n""
        }
    ],
    ""errors"": [
        ""file.ts(1): Type 'string' is not assignable to type 'number'.""
    ]
}

```

----------------------------------------

TITLE: TypeScript Inferred Guards in Methods and Classes
DESCRIPTION: Demonstrates how TypeScript can infer type guards within class methods and interfaces. It shows an example of an interface defining a type guard method.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inferTypePredicates.errors.txt#_snippet_9

LANGUAGE: typescript
CODE:
```
// could infer a type guard here but it doesn't seem that helpful.
const booleanIdentity = (x: boolean) => x;

// we infer ""x is number | true"" which is accurate but of debatable utility.
const numOrBoolean = (x: number | boolean) => typeof x === 'number' || x;

// inferred guards in methods
interface NumberInferrer {
  isNumber(x: number | string): x is number;
}
class Inferrer implements NumberInferrer {

```

----------------------------------------

TITLE: Dual Package Exports (API)
DESCRIPTION: Defines the structure and exports of the 'dual' package, which supports both ES Module and CommonJS formats. This outlines the intended API for consumers.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerNodeModules1(module=esnext).errors.txt#_snippet_0

LANGUAGE: json
CODE:
```
package.json:
{
  ""name"": ""dual"",
  ""version"": ""1.0.0"",
  ""type"": ""module"",
  ""main"": ""index.cjs"",
  ""types"": ""index.d.cts"",
  ""exports"": {
    ""."": {
      ""import"": ""./index.js"",
      ""require"": ""./index.cjs""
    }
  }
}
```

LANGUAGE: javascript
CODE:
```
index.js (ESM):
export const esm = 0;
```

LANGUAGE: javascript
CODE:
```
index.cjs (CommonJS):
exports.cjs = 0;
```

LANGUAGE: typescript
CODE:
```
index.d.ts (ESM Types):
export const esm: number;
```

LANGUAGE: typescript
CODE:
```
index.d.cts (CommonJS Types):
export const cjs: number;
```

----------------------------------------

TITLE: TypeScript Truthy Expression Error Example
DESCRIPTION: This example highlights a TypeScript compilation error (TS2872) where an expression involving the logical OR operator ('||') is always truthy. It shows a common pitfall in JavaScript/TypeScript when combining values that might not be evaluated as expected.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationEmitInferredTypeAlias3.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
var x = ""hi"" || 5;
        ~~~~ 
!!! error TS2872: This kind of expression is always truthy.
    export default x;
```

----------------------------------------

TITLE: TypeScript Generator: Yield Expression Type Inference
DESCRIPTION: Demonstrates how TypeScript infers the yielded value type in generator functions. Includes examples with single yields, multiple yields, and yielding iterables.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorReturnTypeInference.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
declare const iterableIterator: IterableIterator<number>;

// Generator<undefined, void, unknown>
function* g001() {
    yield;
}

// Generator<number, void, unknown>
function* g002() {
    yield 1;
}

// Generator<never, void, undefined>
function* g003() {
    yield* [];
}

// Generator<number, void, undefined>
function* g004() {
    yield* iterableIterator;
}
```

----------------------------------------

TITLE: TypeScript Basic Class and Function
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instantiation, and function definition. This snippet showcases fundamental object-oriented and procedural patterns in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootSourceRootWithNoSourceMapOption/amd/mapRootSourceRootWithNoSourceMapOption.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript Boolean Logic Examples (Not, And, Or)
DESCRIPTION: Provides concrete examples of using the previously defined `Not`, `And`, and `Or` utility types. These examples illustrate how boolean logic operates on literal boolean types and the `boolean` type itself within TypeScript's type system.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/conditionalTypes1.errors.txt#_snippet_24

LANGUAGE: typescript
CODE:
```
type N1 = Not<false>;  // true
type N2 = Not<true>;  // false
type N3 = Not<boolean>;  // boolean

type A1 = And<false, false>;  // false
type A2 = And<false, true>;  // false
type A3 = And<true, false>;  // false
type A4 = And<true, true>;  // true
type A5 = And<boolean, false>;  // false
type A6 = And<false, boolean>;  // false
type A7 = And<boolean, true>;  // boolean
type A8 = And<true, boolean>;  // boolean
type A9 = And<boolean, boolean>;  // boolean

type O1 = Or<false, false>;  // false
type O2 = Or<false, true>;  // true
type O3 = Or<true, false>;  // true
type O4 = Or<true, true>;  // true
type O5 = Or<boolean, false>;  // boolean
type O6 = Or<false, boolean>;  // boolean
type O7 = Or<boolean, true>;  // true
type O8 = Or<true, boolean>;  // true
type O9 = Or<boolean, boolean>;  // boolean
```

----------------------------------------

TITLE: TypeScript Transpile API
DESCRIPTION: The `ts.transpile` API allows developers to transpile TypeScript code to JavaScript programmatically without needing a full `tsconfig.json` or compiler invocation. It's useful for quick transformations or integrating TypeScript compilation into custom build tools.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_14

LANGUAGE: APIDOC
CODE:
```
ts.transpile(input: string, compilerOptions?: CompilerOptions, fileName?: string, supportDiagnostics?: boolean, moduleName?: string): string

  - input: The TypeScript code string to transpile.
  - compilerOptions: Optional compiler options to apply during transpilation.
  - fileName: Optional name of the file being transpiled, used for error reporting.
  - supportDiagnostics: Optional boolean to enable diagnostic reporting.
  - moduleName: Optional module name for transpilation context.

  Returns: The transpiled JavaScript code string.
```

----------------------------------------

TITLE: TypeScript Comment Example
DESCRIPTION: A basic single-line comment in TypeScript, used here to denote an interface reference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#_snippet_54

LANGUAGE: typescript
CODE:
```
// Interface reference
```

----------------------------------------

TITLE: TypeScript Namespace and Import Example
DESCRIPTION: This snippet demonstrates how to define a TypeScript namespace with exported members and how to import a type from it. It highlights a common scenario where an incorrect import path can lead to errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importEqualsError45874.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
namespace globals {
  export type Foo = {};
  export const Bar = {};
}

import Foo = globals.toString.Blah;
```

----------------------------------------

TITLE: TypeScript: Async Arrow Functions Returning Promises
DESCRIPTION: Provides examples of async arrow functions that explicitly return Promises or custom promise types. This pattern is common for asynchronous data fetching or operations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/asyncAwaitIsolatedModules_es5.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
declare var p: Promise<number>;
declare var mp: MyPromise<number>;

let f10 = async () => p;
let f11 = async () => mp;
let f12 = async (): Promise<number> => mp;
let f13 = async (): MyPromise<number> => p;
```

----------------------------------------

TITLE: JSX Fragment with Self-Closing Element
DESCRIPTION: An example of a JSX fragment containing a self-closing JSX element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/linkedEditingJsxTag10.linkedEditing.txt#_snippet_13

LANGUAGE: typescript
CODE:
```
const jsx = <> />; 

```

----------------------------------------

TITLE: TypeScript: Handle Missing Arguments and Count Mismatch
DESCRIPTION: Illustrates TypeScript errors when calling functions with an incorrect number of arguments or omitting required parameters. Shows how to fix these issues by providing the correct arguments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionCall12.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(a:string, b?:number, c?:string){}

// Example 1: Missing required argument 'a'
// foo(); // Error TS2554: Expected 1-3 arguments, but got 0.
// Error TS6210: An argument for 'a' was not provided.

// Example 2: Correct usage
// foo('foo', 1, 'bar');

// Example 3: Optional arguments
// foo('foo', 1);
// foo('foo');
```

----------------------------------------

TITLE: TypeScript Function Return Type Examples
DESCRIPTION: Provides examples of asynchronous functions and their return type annotations in TypeScript. It shows cases where return values are optional (Promise<void>) and where they are mandatory.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/reachabilityChecks7.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
// async function without return type annotation - error
    async function f1() {
    }
    
    let x = async function() {
    }
    
    // async function with which promised type is void - return can be omitted
    async function f2(): Promise<void> {
        
    }
    
    function voidFunc(): void {
    }
    
    function calltoVoidFunc(x) {
        if (x) return voidFunc();
    }
    
    declare function use(s: string): void;
    let x1 = () => { use(""Test""); }
```

----------------------------------------

TITLE: TypeScript noImplicitAny Parameter Examples
DESCRIPTION: Demonstrates various scenarios in TypeScript where parameters and rest parameters implicitly receive the 'any' type due to the `noImplicitAny` compiler option. Includes examples of function declarations, overloads, and arrow functions, highlighting the specific errors generated.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInModule.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
module M {
    // No implicit-'any' errors.
    function m_f1(): void { }

    // Implicit-'any' error for x.
    function m_f2(x): void { }
                  ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.

    // No implicit-'any' errors.
    function m_f3(x: any): void { }

    // Implicit-'any' errors for x, y, and z.
    function m_f4(x, y, z): void { }
                  ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
                     ~
!!! error TS7006: Parameter 'y' implicitly has an 'any' type.
                        ~
!!! error TS7006: Parameter 'z' implicitly has an 'any' type.

    // Implicit-'any' errors for x and z.
    function m_f5(x, y: any, z): void { }
                  ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
                             ~
!!! error TS7006: Parameter 'z' implicitly has an 'any' type.

    // Implicit-'any[]' error for r.
    function m_f6(...r): void { }
                  ~~~~
!!! error TS7019: Rest parameter 'r' implicitly has an 'any[]' type.

    // Implicit-'any'/'any[]' errors for x and r.
    function m_f7(x, ...r): void { }
                  ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
                     ~~~~
!!! error TS7019: Rest parameter 'r' implicitly has an 'any[]' type.

    // Implicit-'any' errors for x1, y2, x3, and y3.
    function m_f8(x1, y1: number): any;
                  ~~
!!! error TS7006: Parameter 'x1' implicitly has an 'any' type.
    function m_f8(x2: string, y2): any;
                              ~~
!!! error TS7006: Parameter 'y2' implicitly has an 'any' type.
    function m_f8(x3, y3): any { }
                  ~~
!!! error TS7006: Parameter 'x3' implicitly has an 'any' type.
                          ~~
!!! error TS7006: Parameter 'y3' implicitly has an 'any' type.

    // No implicit-'any' errors.
    var m_f9 = () => """";

    // Implicit-'any' error for x.
    var m_f10 = (x) => """";
                 ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.

    // Implicit-'any' errors for x, y, and z.
    var m_f11 = (x, y, z) => """";
                 ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
                    ~
!!! error TS7006: Parameter 'y' implicitly has an 'any' type.
                       ~
!!! error TS7006: Parameter 'z' implicitly has an 'any' type.

}
```

----------------------------------------

TITLE: TypeScript Example: Test Module Import
DESCRIPTION: An example TypeScript file demonstrating how to import a module ('m1') and use its exported members. It also defines its own exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapModuleSimpleSpecifyOutputFile/node/sourcemapModuleSimpleSpecifyOutputFile.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import m1 = require(""m1"");
    export var a1 = 10;
    export class c1 {
        public p1: number;
    }
    
    export var instance1 = new c1();
    export function f1() {
        return instance1;
    }
    
    export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: TypeScript Object Type Annotation and Method Call
DESCRIPTION: Illustrates declaring a variable 'x' with an object type annotation and calling a method 'doThing' on a previously declared object 'c'. This showcases type annotations and object method invocation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/declarationMapsWithSourceMap.sourcemap.txt#_snippet_7

LANGUAGE: typescript
CODE:
```
declare let x: {
    b: number;
};

c.doThing({a: 42});
```

----------------------------------------

TITLE: TypeScript Example: Module m1
DESCRIPTION: An example TypeScript file defining exported variables, classes, and functions. This file serves as a module that can be imported by other TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlModuleSimpleSpecifyOutputFile/node/maprootUrlModuleSimpleSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export var m1_a1 = 10;
    export class m1_c1 {
        public m1_c1_p1: number;
    }
    
    export var m1_instance1 = new m1_c1();
    export function m1_f1() {
        return m1_instance1;
    }
```

----------------------------------------

TITLE: JavaScript Module Import Examples
DESCRIPTION: Shows JavaScript module import syntax, including dynamic imports and commonjs require, within a JavaScript file context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emit(jsx=react).errors.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
// Rewrite
    import {} from ""./foo.ts"";
    import {} from ""../foo.mts"";
    import {} from ""../../foo.cts"";
    import {} from ""./foo.tsx"";
    import ""./foo.ts"";
    export * from ""./foo.ts"";
    // Shim
    import(""./foo.ts"");
    import(""./foo.ts"", { with: { attr: ""value"" } });
    require(""./foo.ts"");
    {
      require(""./foo.ts"");
      require(getPath());
    }
    
    // No rewrite or shim
```

----------------------------------------

TITLE: TypeScript Example: Test Module Import
DESCRIPTION: An example TypeScript file demonstrating how to import a module ('m1') and use its exported members. It also defines its own exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathModuleSimpleSpecifyOutputFile/node/mapRootRelativePathModuleSimpleSpecifyOutputFile.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
import m1 = require(""m1"");
    export var a1 = 10;
    export class c1 {
        public p1: number;
    }
    
    export var instance1 = new c1();
    export function f1() {
        return instance1;
    }
    
    export var a2 = m1.m1_c1;
```

----------------------------------------

TITLE: TypeScript DOM Library Definition (Example)
DESCRIPTION: This is an example of a TypeScript declaration file (.d.ts) that might be used to define DOM interfaces. In the context of the error, this file or a similar one might be incorrectly included or prioritized, leading to the exclusion of the standard DOM library.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/libTypeScriptOverrideSimple.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
interface ABC { abc: string }
```

----------------------------------------

TITLE: CommonJS Exports in .cjs File
DESCRIPTION: Demonstrates how to export values from a CommonJS module (`.cjs`) using `exports` syntax, which is standard for Node.js environments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/modulePreserve4.errors.txt#_snippet_5

LANGUAGE: javascript
CODE:
```
exports.x = require(""./g"");
```

----------------------------------------

TITLE: TypeScript ScriptSnapshot from String
DESCRIPTION: Provides a ScriptSnapshot instance from a given string. This is an alternative for users who do not wish to opt into incremental parsing mechanisms.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Using-the-Language-Service-API.md#_snippet_0

LANGUAGE: TypeScript
CODE:
```
ts.ScriptSnapshot.fromString(text: string): ts.IScriptSnapshot
```

----------------------------------------

TITLE: TypeScript Private Constructor with Overload
DESCRIPTION: This example illustrates a TypeScript class 'C2' with an overloaded private constructor. Similar to the previous example, attempting to instantiate 'C2' directly results in a TS2673 error because the constructor is private. The code also shows accessing the constructor type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typesWithPrivateConstructor.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
class C2 {
    private constructor(x: number);
    private constructor(x: any) { }
}

var c2 = new C2(); // error C2 is private
         ~~~~~~~~~
!!! error TS2673: Constructor of class 'C2' is private and only accessible within the class declaration.
var r2: (x: number) => void = c2.constructor;
```

----------------------------------------

TITLE: Use TypeScript Class and Namespace
DESCRIPTION: Shows how to instantiate a class defined within a namespace and access members from a potentially merged namespace. This example tests the interaction between `class.ts` and `module.ts`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ClassAndModuleWithSameNameAndCommonRoot.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
//var cl: { x: number; y: number; }
var cl = new X.Y.Point(1,1);
var cl = X.Y.Point.Origin; // error not expected here same as bug 83996 ?
```

----------------------------------------

TITLE: TypeScript Core API and Type Removals
DESCRIPTION: Details the removal of several built-in types and collections from the TypeScript core API, such as `ts.Map`, `ts.Set`, `ts.Collection`, and `ts.Push`, encouraging the use of native JavaScript equivalents.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Core API Type Removals:

- Removed Collections:
  - `ts.Map`, `ts.Set`, `ts.ESMap`, `ts.Iterator`, and associated types.
  - Replacement: Use native JavaScript `Map`, `Set`, `Iterator`, and associated types.

- Removed Collection Types:
  - `ts.Collection` and `ts.ReadonlyCollection`.
  - These were unused in the public API and relied on older Map/Set types.

- Removed Utility Type:
  - `ts.Push`.
  - Replaced with standard array usage for consistency.
```

----------------------------------------

TITLE: TypeScript Constraint Error Example
DESCRIPTION: This snippet demonstrates a TypeScript generic constraint. It defines interfaces 'A' and 'B', and a generic interface 'C' that requires its type parameter 'T' to extend 'A'. The example shows a type error when 'C' is instantiated with 'B', as 'B' lacks the required property 'a' from 'A'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/constraints0.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
interface A {
	a: number;
}

interface B {
	b: string;
}

interface C<T extends A> {
    x: T;
}

var v1: C<A>; // should work
var v2: C<B>; // should not work
          ~
!!! error TS2344: Type 'B' does not satisfy the constraint 'A'.
!!! error TS2344:   Property 'a' is missing in type 'B' but required in type 'A'.
!!! related TS2728 constraints0.ts:2:2: 'a' is declared here.

var y = v1.x.a; // 'a' should be of type 'number'
```

----------------------------------------

TITLE: TypeScript: Type Relationships with {} and Record
DESCRIPTION: Demonstrates how TypeScript infers types when checking against `{}` and `Record<string, unknown>` or `Record<string, any>`. Covers type supertyping and narrowing scenarios using type guard functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/narrowingMutualSubtypes.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
declare function isObject1(value: unknown): value is Record<string, unknown>;

function gg1(x: {}) {
    if (isObject1(x)) {
        x;  // Record<string, unknown>
    }
    else {
        x;  // {}
    }
    x;  // {}
}

declare function isObject2(value: unknown): value is {};

function gg2(x: Record<string, unknown>) {
    if (isObject2(x)) {
        x;  // Record<string, unknown>
    }
    else {
        x;  // never
    }
    x;  // Record<string, unknown>
}

// Check that {} is a strict supertype of Record<string, any>

declare function isObject3(value: unknown): value is Record<string, any>;

function gg3(x: {}) {
    if (isObject3(x)) {
        x;  // Record<string, any>
    }
    else {
        x;  // {}
    }
    x;  // {}
}

declare function isObject4(value: unknown): value is {};

function gg4(x: Record<string, any>) {
    if (isObject4(x)) {
        x;  // Record<string, any>
    }
    else {
        x;  // never
    }
    x;  // Record<string, any>
}
```

----------------------------------------

TITLE: TypeScript Optional Parameter Function Calls
DESCRIPTION: Illustrates TypeScript function calls with optional parameters, highlighting scenarios that trigger compiler errors (TS2554) due to incorrect argument counts. Includes examples of valid and invalid invocations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionsWithOptionalParameters2.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface Utils {
   fold<T, S>(c: Array<T>, folder?: (s: S, t: T) => T, init?: S): T;
}

var utils: Utils;
```

LANGUAGE: TypeScript
CODE:
```
utils.fold(); // error
```

LANGUAGE: TypeScript
CODE:
```
utils.fold(null); // no error
```

LANGUAGE: TypeScript
CODE:
```
utils.fold(null, null); // no error
```

LANGUAGE: TypeScript
CODE:
```
utils.fold(null, null, null); // error: Unable to invoke type with no call signatures
```

----------------------------------------

TITLE: Underscore Object and Property Utilities
DESCRIPTION: Demonstrates functions for extracting keys, values, and key-value pairs from objects, as well as inverting objects and extending properties.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_11

LANGUAGE: JavaScript
CODE:
```
_.keys({ one: 1, two: 2, three: 3 });
_.values({ one: 1, two: 2, three: 3 });
_.pairs({ one: 1, two: 2, three: 3 });
_.invert({ Moe: ""Moses"", Larry: ""Louis"", Curly: ""Jerome"" });
_.functions(_);
_.extend({ name: 'moe' }, { age: 50 });
_.pick({ name: 'moe', age: 50, userid: 'moe1' }, 'name', 'age');
_.omit({ name: 'moe', age: 50, userid: 'moe1' }, 'userid');

var iceCream = { flavor: ""chocolate"" };
_.defaults(iceCream, { flavor: ""vanilla"", sprinkles: ""lots"" });

_.clone({ name: 'moe' });
```

----------------------------------------

TITLE: FullCalendar Usage Example
DESCRIPTION: A basic example of importing FullCalendar components and types in a TypeScript React project.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkerInitializationCrash.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
==== /index.tsx (0 errors) ====
    import FullCalendar from ""@fullcalendar/react"";
    import { EventInput } from ""@fullcalendar/core"";
    
```

----------------------------------------

TITLE: TypeScript Generator: Generic Type Inference
DESCRIPTION: Demonstrates type inference in generic generator functions, showing how types are inferred based on generic parameters for yield, return, and next values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorReturnTypeInference.errors.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
// Generator<number, T, T>
function* g307<T>() {
    const a: T = yield 0;
    return a;
}

// Generator<T, T, T>
function* g308<T>(x: T) {
    const a: T = yield x;
    return a;
}

// Generator<T, U, V>
function* g309<T, U, V>(x: T, y: U) {
    const a: V = yield x;
    return y;
}
```

----------------------------------------

TITLE: TypeScript Greeter Class Definition
DESCRIPTION: Defines a Greeter class in TypeScript with a constructor that accepts a greeting string and a method to return an HTML-formatted greeting. The class is structured using modern TypeScript syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
class Greeter {
    constructor(public greeting: string) {
    }

    greet() {
        return ""<h1>"" + this.greeting + ""</h1>"";
    }
}
```

----------------------------------------

TITLE: TypeScript Function Return Types with Intersections
DESCRIPTION: Shows examples of function return types that involve intersection types. The examples demonstrate how TypeScript infers or enforces return types, particularly when the intersection within the return type might resolve to 'never' or a specific literal type.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intersectionReductionStrict.errors.txt#_snippet_5

LANGUAGE: ts
CODE:
```
const f1 = (t: ""a"" | (""b"" & ""c"")): ""a"" => t;

type Container<Type extends string> = {
    type: Type;
}

const f2 = (t: Container<""a""> | (Container<""b""> & Container<""c"">)): Container<""a""> => t;
const f3 = (t: Container<""a""> | (Container<""b""> & { dataB: boolean } & Container<""a"">)): Container<""a""> => t;
const f4 = (t: number | (Container<""b""> & { dataB: boolean } & Container<""a"">)): number => t;
```

----------------------------------------

TITLE: TypeScript List API
DESCRIPTION: Defines the interface for an immutable List, offering methods for persistent updates, deep merging, transient mutations, and sequence algorithms like map, filter, and concat.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_3

LANGUAGE: APIDOC
CODE:
```
interface List<T> extends Collection.Indexed<T> {
  // Persistent changes
  setSize(size: number): List<T>;
  // Deep persistent changes
  setIn(keyPath: Iterable<any>, value: any): this;
  deleteIn(keyPath: Iterable<any>): this;
  removeIn(keyPath: Iterable<any>): this;
  updateIn(keyPath: Iterable<any>, notSetValue: any, updater: (value: any) => any): this;
  updateIn(keyPath: Iterable<any>, updater: (value: any) => any): this;
  mergeIn(keyPath: Iterable<any>, ...collections: Array<any>): this;
  mergeDeepIn(keyPath: Iterable<any>, ...collections: Array<any>): this;
  // Transient changes
  withMutations(mutator: (mutable: this) => any): this;
  asMutable(): this;
  asImmutable(): this;
  // Sequence algorithms
  concat<C>(...valuesOrCollections: Array<Iterable<C> | C>): List<T | C>;
  map<M>(mapper: (value: T, key: number, iter: this) => M, context?: any): List<M>;
  flatMap<M>(mapper: (value: T, key: number, iter: this) => Iterable<M>, context?: any): List<M>;
  filter<F extends T>(predicate: (value: T, index: number, iter: this) => value is F, context?: any): List<F>;
  filter(predicate: (value: T, index: number, iter: this) => any, context?: any): this;
}
```

----------------------------------------

TITLE: TypeScript Module Class Members
DESCRIPTION: Demonstrates the declaration of class members within a TypeScript module. This example mirrors the structure of a standalone class, including public/private properties, methods, and getter/setter pairs. It highlights potential 'Duplicate identifier' errors, similar to the standalone class example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/giant.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
module M {
    var V;
    function F() { };
    class C {
        constructor () { }
        public pV;
        private rV;
        public pF() { }
        private rF() { }
        public pgF() { }
        public get pgF() {}
        public psF(param:any) { }
        public set psF(param:any) {}
    }
}
```

----------------------------------------

TITLE: TypeScript Arrow Function Basics
DESCRIPTION: Illustrates basic arrow function syntax with a single parameter, demonstrating how to pass arguments. This is a fundamental pattern for concise function definitions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextuallyTypedIifeStrict.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
// arrow
(jake => { })(""build"");
```

----------------------------------------

TITLE: Add Greeter Instance to Array (TypeScript)
DESCRIPTION: This snippet demonstrates adding a new instance of a 'Greeter' class to an array named 'greeters'. It iterates through 'restGreetings' and creates a new Greeter object for each element.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_12

LANGUAGE: typescript
CODE:
```
greeters.push(new Greeter(restGreetings[i]));
```

----------------------------------------

TITLE: JSX Fragment with Content
DESCRIPTION: An example of a JSX fragment containing other JSX elements or text. This showcases nesting within fragments.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/linkedEditingJsxTag10.linkedEditing.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
const jsx = <div> </>;

```

----------------------------------------

TITLE: TypeScript 4.8 Decorator Syntax and Modifier Handling
DESCRIPTION: Explains the shift in decorator placement in TypeScript 4.8, moving from before keywords to after, and details the API changes for managing modifiers and decorators in syntax trees. It introduces `ModifierLike` and new accessor functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_9

LANGUAGE: APIDOC
CODE:
```
TypeScript 4.8 Decorator and Modifier API Changes:

ModifierLike Type Alias:
  export type ModifierLike = Modifier | Decorator;
  - Defines a union type that can represent either a Modifier or a Decorator.

Syntax Tree Field Changes:
  - The `modifiers` field in syntax tree nodes has been updated from `NodeArray<Modifier>` to `NodeArray<ModifierLike>`.
  - The `decorators` field has been deprecated and changed to `undefined`.

New Predicate and Accessor Functions:
  - `canHaveModifiers(node: Node): node is HasModifiers`
    - Checks if a Node can have modifiers.
  - `getModifiers(node: HasModifiers): readonly Modifier[] | undefined`
    - Retrieves the modifiers from a Node that supports them.
  - `canHaveDecorators(node: Node): node is HasDecorators`
    - Checks if a Node can have decorators.
  - `getDecorators(node: HasDecorators): readonly Decorator[] | undefined`
    - Retrieves the decorators from a Node that supports them.

Usage Example:
  const modifiers = canHaveModifiers(myNode) ? getModifiers(myNode) : undefined;
  // Note: Calls to getModifiers and getDecorators may allocate new arrays.

Related Changes:
  - Restructuring of tree nodes (PR #49089)
  - Deprecations (PR #50343)
  - Exposing predicate functions (PR #50399)
```

----------------------------------------

TITLE: Example JavaScript File (b.js)
DESCRIPTION: A standard JavaScript file defining a function 'bar'. This file is included in the example context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithOutDir.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
function bar() {
}

```

----------------------------------------

TITLE: TypeScript Reference Example (test.ts)
DESCRIPTION: Shows how to use a reference path to include another TypeScript file, demonstrating basic syntax and external module referencing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlSubfolderSpecifyOutputFile/node/maprootUrlSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='ref/m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Using Global THREE Object
DESCRIPTION: A simple example of how a global 'THREE' object, once correctly declared, can be used in other TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/checkMergedGlobalUMDSymbol.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
const m = THREE
```

----------------------------------------

TITLE: TypeScript: Variable Declaration Errors and Examples
DESCRIPTION: This snippet showcases TypeScript code that triggers specific compilation errors related to variable declarations. It highlights issues like empty declaration lists and incorrect syntax, alongside examples of correctly declared and exported variables within modules and namespaces.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/NonInitializedExportInInternalModule.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
module Inner {
        var;
           
!!! error TS1123: Variable declaration list cannot be empty.
        let;
        ~~~ 
!!! error TS2304: Cannot find name 'let'.
        const;
             
!!! error TS1123: Variable declaration list cannot be empty.
        
        export var a;
        export let b;
        export var c: string;
        export let d: number;
        class A {}
        export var e: A;
        export let f: A;
        
        namespace B {
            export let a = 1, b, c = 2;
            export let x, y, z;
        }
        
        module C {
            export var a = 1, b, c = 2;
            export var x, y, z;
        }
        
        // Shouldn't be filtered
        export var a1 = 1;
        export let b1 = 1;
        export var c1: string = 'a';
        export let d1: number = 1;
        class D {}
        export var e1 = new D;
        export let f1 = new D;
        export var g1: D = new D;
        export let h1: D = new D;
    }
```

----------------------------------------

TITLE: TypeScript Method Invocation
DESCRIPTION: Shows how to call a method named 'AisIn1_1_1' on variables previously declared, demonstrating basic object interaction in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#_snippet_52

LANGUAGE: typescript
CODE:
```
a2.AisIn1_1_1();
a3.AisIn1_1_1();
a4.AisIn1_1_1();
```

----------------------------------------

TITLE: TypeScript Mirror Function and Identity Example
DESCRIPTION: Demonstrates a simple 'mirror' utility function that returns the input function, and its usage with an 'identity' function to show how it preserves type information.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
function mirror<A, B>(f: (a: A) => B): (a: A) => B { return f; }
var identityM = mirror(identity);

var x = 1;
var y = identity(x);
var z = identityM(x);
```

----------------------------------------

TITLE: TypeScript: Basic Console Log Example
DESCRIPTION: A simple TypeScript file demonstrating basic variable declaration and console output. This snippet is part of a larger context that might involve compiler configurations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inlineSourceMap2.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
// configuration errors

var x = 0;
console.log(x);

```

----------------------------------------

TITLE: Function Examples with NaN
DESCRIPTION: Provides examples of functions where direct comparison with a parameter named `NaN` is valid because it refers to the parameter, not the global `NaN` value. This highlights a potential source of confusion.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nanEquality.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
function t1(value: number, NaN: number) {
    return value === NaN; // ok, compares 'value' with the 'NaN' parameter
}

function t2(value: number, NaN: number) {
    return NaN == value; // ok, compares the 'NaN' parameter with 'value'
}

function t3(NaN: number) {
    return NaN === NaN; // ok, compares the 'NaN' parameter with itself
}
```

----------------------------------------

TITLE: TypeScript Module and Type Referencing Example
DESCRIPTION: This snippet showcases how to reference classes and interfaces from different module scopes in TypeScript. It covers direct referencing, qualified names through nested modules, and referencing peer types. The examples highlight the flexibility in accessing types based on their export status and module structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
                                                 // Try all qualified names of this type
                                                 var a1: ClassA; a1.AisIn1_1_1();
                                                 var a2: SubSubModule1.ClassA; a2.AisIn1_1_1();
                                                 var a3: SubModule1.SubSubModule1.ClassA; a3.AisIn1_1_1();
                                                 var a4: TopLevelModule1.SubModule1.SubSubModule1.ClassA; a4.AisIn1_1_1();
                                                 
                                                 // Two variants of qualifying a peer type
                                                 var b1: ClassB; b1.BisIn1_1_1();
                                                 var b2: TopLevelModule1.SubModule1.SubSubModule1.ClassB; b2.BisIn1_1_1();
                                                 
                                                 // Type only accessible from the root
                                                 var c1: TopLevelModule1.SubModule2.SubSubModule2.ClassA; c1.AisIn1_2_2();
                                                 
                                                 // Interface reference
                                                 var d1: InterfaceX; d1.XisIn1_1_1();
                                                 var d2: SubSubModule1.InterfaceX; d2.XisIn1_1_1();
                                             }
                                         }
                                         export class ClassB {
                                             public BisIn1_1_1() {
                                                 /** Exactly the same as above in AisIn1_1_1 **/                                                 
                                                 // Try all qualified names of this type
                                                 var a1: ClassA; a1.AisIn1_1_1();
                                                 var a2: SubSubModule1.ClassA; a2.AisIn1_1_1();
                                                 var a3: SubModule1.SubSubModule1.ClassA; a3.AisIn1_1_1();
                                                 var a4: TopLevelModule1.SubModule1.SubSubModule1.ClassA; a4.AisIn1_1_1();
                                                 
                                                 // Two variants of qualifying a peer type
                                                 var b1: ClassB; b1.BisIn1_1_1();
                                                 var b2: TopLevelModule1.SubModule1.SubSubModule1.ClassB; b2.BisIn1_1_1();
                                                 
                                                 // Type only accessible from the root
                                                 var c1: TopLevelModule1.SubModule2.SubSubModule2.ClassA; c1.AisIn1_2_2();
                                                 var c2: TopLevelModule2.SubModule3.ClassA; c2.AisIn2_3();
                                                 
                                                 // Interface reference
                                                 var d1: InterfaceX; d1.XisIn1_1_1();
                                                 var d2: SubSubModule1.InterfaceX; d2.XisIn1_1_1();
                                             }
                                         }
                                         export interface InterfaceX { XisIn1_1_1(); }
                                         class NonExportedClassQ {
                                             constructor() {
                                                 function QQ() {
                                                     /* Sampling of stuff from AisIn1_1_1 */
                                                     var a4: TopLevelModule1.SubModule1.SubSubModule1.ClassA; a4.AisIn1_1_1();
                                                     var c1: TopLevelModule1.SubModule2.SubSubModule2.ClassA; c1.AisIn1_2_2();
                                                     var d1: InterfaceX; d1.XisIn1_1_1();
                                                     var c2: TopLevelModule2.SubModule3.ClassA; c2.AisIn2_3();
                                                 }
                                             }
                                         }
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outSubfolderSpecifyOutputFile/node/outSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Export ClassB in ModuleB
DESCRIPTION: Defines and exports a simple class named ClassB in TypeScript. This module serves as a dependency for other modules in the example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType4.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
class ClassB { }
export = ClassB;
```

----------------------------------------

TITLE: JavaScript File Example
DESCRIPTION: A simple JavaScript file example, demonstrating a valid JavaScript export statement. This is included to show context for projects that might mix JavaScript and TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/isolatedDeclarationsAllowJs.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
export var y;
```

----------------------------------------

TITLE: TypeScript transpileModule API
DESCRIPTION: The transpileModule API allows for transpiling a single TypeScript file into JavaScript, often used by build tools to achieve isolated module compilation. It supports various compiler options.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Performance.md#_snippet_18

LANGUAGE: apidoc
CODE:
```
transpileModule(input: string, compilerOptions?: TranspileOptions): TranspileOutput

  input: The TypeScript code to transpile.
  compilerOptions: Optional configuration object for transpilation.
    - compilerOptions.compilerOptions: Standard TypeScript compiler options (e.g., target, module).
    - compilerOptions.fileName: The name of the file being transpiled (for diagnostics).
    - compilerOptions.reportDiagnostics: If true, diagnostics will be reported.
    - compilerOptions.moduleName: The name of the module (if not inferrable from fileName).

  Returns: An object containing the transpiled JavaScript code and any reported diagnostics.
    - outputText: The transpiled JavaScript code.
    - diagnostics: An array of diagnostic messages if reportDiagnostics is true.
    - sourceMapText: The generated source map, if applicable.

Example Usage:

import * as ts from 'typescript';

const tsCode = `function greet(name: string) {
  console.log(`Hello, ${name}!`);
}`;

const result = ts.transpileModule(tsCode, {
  compilerOptions: { module: ts.ModuleKind.CommonJS, target: ts.ScriptTarget.ES5 },
  reportDiagnostics: true
});

console.log(result.outputText);
// Output: ""function greet(name) {\n  console.log(`Hello, ${name}!`);\n}""

// Related API: ts.transpile (simpler, less configurable version)
```

----------------------------------------

TITLE: Basic TypeScript Syntax and Module Referencing
DESCRIPTION: This snippet demonstrates fundamental TypeScript syntax, including variable declarations, class definitions with properties, and function definitions. It also shows how to use module references (`/// <reference path='...'/>`) to include code from other files, illustrating basic project structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/maprootUrlSimpleSpecifyOutputFile/node/maprootUrlSimpleSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
==== m1.ts ====
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

LANGUAGE: typescript
CODE:
```
==== test.ts ====
    /// <reference path='m1.ts'/>
    var a1 = 10;
    class c1 {
        public p1: number;
    }
    
    var instance1 = new c1();
    function f1() {
        return instance1;
    }
```

----------------------------------------

TITLE: Anonymous Function Definition
DESCRIPTION: An example of an anonymous function definition in TypeScript. This function takes two arguments and returns the second argument.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#_snippet_59

LANGUAGE: typescript
CODE:
```
function(i, s) {
  return s;
}
```

----------------------------------------

TITLE: TypeScript Implicit Any and Any[] for Parameters and Rest Parameters
DESCRIPTION: Demonstrates scenarios where both regular parameters and rest parameters in a function signature are implicitly typed, resulting in 'any' and 'any[]' errors respectively.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInInterface.errors.txt#_snippet_5

LANGUAGE: TypeScript
CODE:
```
// Implicit-'any' errors for x, r.
f14: (x, ...r) => string;
      ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
                 ~~~~ 
!!! error TS7019: Rest parameter 'r' implicitly has an 'any[]' type.
```

----------------------------------------

TITLE: ECMAScript Module Declaration
DESCRIPTION: An empty ECMAScript module file. This serves as the target for imports in other examples, demonstrating the interaction between module types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSResolvingToESM3_modulePackageJson.errors.txt#_snippet_1

LANGUAGE: typescript.module
CODE:
```
export {};
```

----------------------------------------

TITLE: TypeScript Bot Release Commands
DESCRIPTION: Commands used to manage TypeScript releases via the @typescript-bot. These commands automate branch creation, synchronization, version bumping, and cherry-picking of commits.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/TypeScript's-Release-Process.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
APIDOC:
  @typescript-bot create release-X.Y
    Description: Creates a new release branch (e.g., release-4.9) from main.
    Parameters:
      release-X.Y: The target release branch name.
    Usage: Used when initially preparing a beta release.

  @typescript-bot sync release-X.Y
    Description: Synchronizes changes from the main branch into a specified release branch.
    Parameters:
      release-X.Y: The target release branch name.
    Usage: Used to bring the latest changes into an existing release branch, often before an RC or patch.

  @typescript-bot bump release-X.Y
    Description: Updates the version number and Last Known Good (LKG) commit for a release branch.
    Parameters:
      release-X.Y: The target release branch name.
    Usage: Used to prepare an RC or stable release after syncing or cherry-picking.

  @typescript-bot cherry-pick this to release-X.Y
    Description: Cherry-picks the current PR's commit to a specified release branch.
    Parameters:
      release-X.Y: The target release branch name.
    Usage: Used on PRs intended for a specific release branch.

  @typescript-bot cherry-pick this to release-X.Y and LKG
    Description: Cherry-picks the current PR's commit to a specified release branch and updates the LKG.
    Parameters:
      release-X.Y: The target release branch name.
    Usage: Used for combined cherry-pick and LKG updates when new PRs arrive after initial release preparation.
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapSubfolderSpecifyOutputFile/node/sourcemapSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Define TypeScript Function foo
DESCRIPTION: Defines a TypeScript function named 'foo' that accepts a string and a number as parameters and returns void. This snippet illustrates a basic function signature and structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMap-Comments2.sourcemap.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
function foo(str: string, num: number): void {
    return;
}
```

----------------------------------------

TITLE: OrderedMap API
DESCRIPTION: Defines methods for manipulating and transforming OrderedMap collections, including concatenation, mapping, filtering, and flat-mapping.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/complexRecursiveCollections.errors.txt#_snippet_6

LANGUAGE: APIDOC
CODE:
```
interface OrderedMap<K, V> {
  concat<KC, VC>(...collections: Array<Iterable<[KC, VC]>>): OrderedMap<K | KC, V | VC>;
  concat<C>(...collections: Array<{[key: string]: C}>): OrderedMap<K | string, V | C>;
  map<M>(mapper: (value: V, key: K, iter: this) => M, context?: any): OrderedMap<K, M>;
  mapKeys<M>(mapper: (key: K, value: V, iter: this) => M, context?: any): OrderedMap<M, V>;
  mapEntries<KM, VM>(mapper: (entry: [K, V], index: number, iter: this) => [KM, VM], context?: any): OrderedMap<KM, VM>;
  flatMap<M>(mapper: (value: V, key: K, iter: this) => Iterable<M>, context?: any): OrderedMap<any, any>;
  filter<F extends V>(predicate: (value: V, key: K, iter: this) => value is F, context?: any): OrderedMap<K, F>;
  filter(predicate: (value: V, key: K, iter: this) => any, context?: any): this;
}
```

----------------------------------------

TITLE: TypeScript Pipe with Function Composition
DESCRIPTION: Demonstrates using the `pipe` function for composing different types of functions. Examples include arithmetic operations, promise handling, and optional value transformations.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#_snippet_9

LANGUAGE: TypeScript
CODE:
```
const fn20 = pipe((_a?: {}) => 1);

type Fn = (n: number) => number;
const fn30: Fn = pipe(
    x => x + 1,
    x => x * 2,
);

const promise = Promise.resolve(1);
promise.then(
    pipe(
        x => x + 1,
        x => x * 2,
    ),
);

declare const getString: () => string;
declare const orUndefined: (name: string) => string | undefined;
declare const identity: <T>(value: T) => T;

const fn40 = pipe(
    getString,
    string => orUndefined(string),
    identity,
);

declare const getArray: () => string[];
declare const first: <T>(ts: T[]) => T;

const fn60 = pipe(
    getArray,
    x => x,
    first,
);

const fn61 = pipe(
    getArray,
    identity,
    first,
);

const fn62 = pipe(
    getArray,
    x => x,
    x => first(x),
);
```

----------------------------------------

TITLE: TypeScript: Basic Module Exports
DESCRIPTION: A simple TypeScript file demonstrating default and named exports, used as a reference for other examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/grammarErrors.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
export default class A {}
export class B {}
export class C {}
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourceRootAbsolutePathSubfolderSpecifyOutputFile/node/sourceRootAbsolutePathSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Example TypeScript File
DESCRIPTION: A simple TypeScript file defining a class 'c'. This file is part of the example context for the compilation error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithOutDir.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
class c {
}

```

----------------------------------------

TITLE: JavaScript Module Import Examples
DESCRIPTION: Shows JavaScript module import syntax, including dynamic imports and commonjs require, within a JavaScript file context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emit(jsx=preserve).errors.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
// Rewrite
    import {} from ""./foo.ts"";
    import {} from ""../foo.mts"";
    import {} from ""../../foo.cts"";
    import {} from ""./foo.tsx"";
    import ""./foo.ts"";
    export * from ""./foo.ts"";
    // Shim
    import(""./foo.ts"");
    import(""./foo.ts"", { with: { attr: ""value"" } });
    require(""./foo.ts"");
    {
      require(""./foo.ts"");
      require(getPath());
    }
    
    // No rewrite or shim
```

----------------------------------------

TITLE: TypeScript: Get Accessor Error (TS2378) & Unresolved Name (TS2304)
DESCRIPTION: This snippet demonstrates two TypeScript compilation errors. The first, TS2378, occurs because a 'get' accessor is defined without returning any value. The second, TS2304, arises from using an undeclared identifier 'e' as a computed property name.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserComputedPropertyName4.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var v = { get [e]() { } };
```

----------------------------------------

TITLE: TypeScript Interface and Function Overload Examples
DESCRIPTION: Demonstrates TypeScript's structural typing with interfaces and function overloads. It shows how type compatibility is checked and where errors can occur due to duplicate overloads or incompatible types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/objectTypesIdentityWithCallSignatures3.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
// object types are identical structurally

interface I {
    (x: string): string;
}

interface I2<T> {
    (x: T): T;
}

var a: { (x: string): string }

function foo2(x: I);
function foo2(x: I); // error
function foo2(x: any) { }

function foo3(x: typeof a);
function foo3(x: typeof a); // error
function foo3(x: any) { }

function foo4(x: typeof b);
// !!! error TS2304: Cannot find name 'b'.
function foo4(x: typeof b); // error
// !!! error TS2304: Cannot find name 'b'.
function foo4(x: any) { }

function foo13(x: I);
function foo13(x: typeof a); // error
function foo13(x: any) { }

function foo14(x: I);
function foo14(x: I2<string>); // error
function foo14(x: any) { }

function foo14b(x: typeof a);
function foo14b(x: I2<string>); // error
function foo14b(x: any) { }

function foo15(x: I);
function foo15(x: I2<number>); // ok
function foo15(x: any) { }
```

----------------------------------------

TITLE: Example package.json for Module
DESCRIPTION: This is an example package.json file for a module that might cause the TypeScript TS7016 error if its types are not provided.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/untypedModuleImport_noImplicitAny_scoped.errors.txt#_snippet_1

LANGUAGE: json
CODE:
```
{ ""name"": ""@foo/bar"", ""version"": ""1.2.3"" }
```

----------------------------------------

TITLE: Return Array (TypeScript)
DESCRIPTION: This snippet shows a TypeScript statement that returns the 'greeters' array. This is commonly used at the end of a function that collects or generates a list of greeters.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_14

LANGUAGE: typescript
CODE:
```
return greeters;
```

----------------------------------------

TITLE: TypeScript: Structural Typing Explanation
DESCRIPTION: Explains TypeScript's structural typing system, contrasting it with nominal typing found in languages like Java or C#. It emphasizes that type compatibility is based on structure (members) rather than names or explicit inheritance.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/FAQ.md#_snippet_45

LANGUAGE: APIDOC
CODE:
```
Structural Typing:

- Definition: TypeScript uses structural typing, meaning two types are compatible if they have the same members with compatible types, regardless of their names or explicit inheritance.

- Contrast with Nominal Typing:
  - Nominal typing (e.g., Java, C#) requires types to have the same name or explicit inheritance relationship to be compatible.
  - Structural typing focuses on the 'shape' or 'structure' of the data.

- Example:
  - In a nominal system, `class MyPoint { x: number; y: number; }` and `class YourPoint { x: number; y: number; }` are distinct.
  - In TypeScript's structural system, an object `{ x: number; y: number; }` is compatible with both `MyPoint` and `YourPoint` if they define these members.

- Subtyping:
  - A type `A` is a subtype of `B` if `A` has at least all the members of `B` with compatible types.
  - Explicit inheritance is not required for subtyping in TypeScript.

- Implications:
  - Can lead to surprising behavior for developers accustomed to nominal systems.
  - Enables flexible data structures and easier integration between different code modules.
```

----------------------------------------

TITLE: TypeScript Parameters Utility Type Example
DESCRIPTION: Demonstrates the usage of the TypeScript Parameters utility type to infer the parameter types of a function. This example shows how to use it to define the type for a function argument.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/circularReferenceInReturnType.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
// https://github.com/microsoft/TypeScript/issues/58616

function foo(arg: Parameters<typeof bar>[0]) {
    return arg;
}

function bar(arg: string) {
    return foo(arg);
}
```

----------------------------------------

TITLE: CJS Module Example (subfolder2/index.cts)
DESCRIPTION: An example of a CommonJS module export using the .cts extension, explicitly marking it as CommonJS.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: TypeScript String and Comment Formatting
DESCRIPTION: Details the conventions for using quotes in strings and formatting JSDoc comments for functions, interfaces, enums, and classes.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Coding-guidelines.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
TypeScript String and Comment Formatting:

- String Quotes: Use double quotes for strings.
- Localization: All user-visible strings must be localized (entry in diagnosticMessages.json).
- Comments: Use JSDoc style comments for functions, interfaces, enums, and classes.
```

----------------------------------------

TITLE: CJS Module Example (subfolder2/another/index.cts)
DESCRIPTION: An example of a CommonJS module export using the .cts extension, explicitly marking it as CommonJS.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#_snippet_9

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: TypeScript null and undefined Handling
DESCRIPTION: Specifies the preferred way to handle the absence of a value in TypeScript, favoring `undefined` over `null` for consistency.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Coding-guidelines.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
TypeScript null/undefined Handling:

- Preference: Use `undefined`. Do not use `null`.
```

----------------------------------------

TITLE: ESM Module Example (subfolder2/index.mts)
DESCRIPTION: An example of an ECMAScript Module export using the .mts extension, indicating an ES Module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: TypeScript: noImplicitAny Function Parameter Examples
DESCRIPTION: Demonstrates various TypeScript function and arrow function syntaxes that lead to implicit 'any' type errors for parameters when the `noImplicitAny` compiler option is enabled. Includes examples of single parameters, multiple parameters, and rest parameters, along with the corresponding TypeScript compiler error codes (TS7006, TS7019).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noImplicitAnyParametersInBareFunctions.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
// No implicit-'any' errors.
function f1(): void { }

// Implicit-'any' error for x.
function f2(x): void { }
            ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.

// No implicit-'any' errors.
function f3(x: any): void { }

// Implicit-'any' errors for x, y, and z.
function f4(x, y, z): void { }
            ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
               ~
!!! error TS7006: Parameter 'y' implicitly has an 'any' type.
                  ~
!!! error TS7006: Parameter 'z' implicitly has an 'any' type.

// Implicit-'any' errors for x, and z.
function f5(x, y: any, z): void { }
            ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
                         ~
!!! error TS7006: Parameter 'z' implicitly has an 'any' type.

// Implicit-'any[]' error for r.
function f6(...r): void { }
            ~~~~
!!! error TS7019: Rest parameter 'r' implicitly has an 'any[]' type.

// Implicit-'any'/'any[]' errors for x, r.
function f7(x, ...r): void { }
            ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
               ~~~~
!!! error TS7019: Rest parameter 'r' implicitly has an 'any[]' type.

// Implicit-'any' errors for x1, y2, x3, and y3.
function f8(x1, y1: number): any;
            ~~
!!! error TS7006: Parameter 'x1' implicitly has an 'any' type.
function f8(x2: string, y2): any;
                            ~~
!!! error TS7006: Parameter 'y2' implicitly has an 'any' type.
function f8(x3, y3): any { }
            ~~
!!! error TS7006: Parameter 'x3' implicitly has an 'any' type.
                ~~
!!! error TS7006: Parameter 'y3' implicitly has an 'any' type.

// No implicit-'any' errors.
var f9 = () => """";

// Implicit-'any' errors for x.
var f10 = (x) => """";
           ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.

// Implicit-'any' errors for x, y, and z.
var f11 = (x, y, z) => """";
           ~
!!! error TS7006: Parameter 'x' implicitly has an 'any' type.
              ~
!!! error TS7006: Parameter 'y' implicitly has an 'any' type.
                 ~
!!! error TS7006: Parameter 'z' implicitly has an 'any' type.

// Implicit-'any' errors for x and z.
var f12 = (x, y: any, z) => """";

```

----------------------------------------

TITLE: TypeScript Type Export
DESCRIPTION: Demonstrates the basic export of a type alias in TypeScript. This serves as a foundational example for module exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/exportNamespace9.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
export type A = number;
```

----------------------------------------

TITLE: Underscore Wrapping and Composition
DESCRIPTION: Shows how to wrap a function with additional logic using `_.wrap` and how to combine multiple functions into a single callable unit with `_.compose`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_10

LANGUAGE: JavaScript
CODE:
```
var hello = function (name) { return ""hello: "" + name; };
hello = _.wrap(hello, (func, arg) => { return ""before, "" + func(arg) + "", after""; });
hello(""moe"");

var greet = function (name) { return ""hi: "" + name; };
var exclaim = function (statement) { return statement + ""!""; };
var welcome = _.compose(exclaim, greet);
welcome('moe');
```

----------------------------------------

TITLE: ESM Module Example (subfolder2/index.mts)
DESCRIPTION: An example of an ECMAScript Module export using the .mts extension, indicating an ES Module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: TypeScript NoInfer in Function Parameters
DESCRIPTION: Demonstrates how `NoInfer<T>` affects type inference when used in function parameter types. Shows examples where explicit types are required or where type mismatches lead to errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/noInfer.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
declare function foo1<T extends string>(a: T, b: NoInfer<T>): void
declare function foo2<T extends string>(a: T, b: NoInfer<T>[]): void
declare function foo3<T extends string>(a: T, b: NoInfer<T[]>): void
declare function foo4<T extends string>(a: T, b: { x: NoInfer<T> }): void
declare function foo5<T extends string>(a: T, b: NoInfer<{ x: T }>): void

foo1('foo', 'foo') // ok
foo1('foo', 'bar') // error
                ~~~~~
// error TS2345: Argument of type '""bar""' is not assignable to parameter of type '""foo""'.

foo2('foo', ['bar']) // error
             ~~~~~
// error TS2322: Type '""bar""' is not assignable to type '""foo""'.

foo3('foo', ['bar']) // error
             ~~~~~
// error TS2322: Type '""bar""' is not assignable to type '""foo""'.

foo4('foo', { x: 'bar' }) // error
              ~
// error TS2322: Type '""bar""' is not assignable to type '""foo""'.
// related TS6500 noInfer.ts:31:52: The expected type comes from property 'x' which is declared here on type '{ x: ""foo""; }'

foo5('foo', { x: 'bar' }) // error
              ~
// error TS2322: Type '""bar""' is not assignable to type '""foo""'.
// related TS6500 noInfer.ts:32:60: The expected type comes from the return type of this signature.
```

----------------------------------------

TITLE: TypeScript Interface Definition
DESCRIPTION: Defines the 'IPoint' interface, specifying a single method 'getDist' that should return a number. This serves as a contract for classes implementing it.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMap-FileWithComments.sourcemap.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
interface IPoint {
    getDist(): number;
}
```

----------------------------------------

TITLE: CJS Module Example (subfolder2/index.cts)
DESCRIPTION: An example of a CommonJS module export using the .cts extension, explicitly marking it as CommonJS.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: TypeScript Basic Class, Instance, and Function
DESCRIPTION: This snippet showcases a fundamental TypeScript class definition with a public property, instantiation of that class, and a function that returns the class instance. It serves as a basic example of object-oriented programming in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlSingleFileSpecifyOutputFile/node/sourcerootUrlSingleFileSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: CJS Module Example (subfolder2/another/index.cts)
DESCRIPTION: An example of a CommonJS module export using the .cts extension, explicitly marking it as CommonJS.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#_snippet_9

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: JavaScript Module Export with Function and Import
DESCRIPTION: Exports a function 'f1' that accepts a string parameter and returns a number, and also exports another module 'm2' as 'f2'. Includes JSDoc for parameter typing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/node/nodeModulesMaxDepthIncreased.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
var m2 = require('m2');

/**
 * @param {string} p1 The first param
 */
exports.f1 = function(p1) {
	return 42;
};

exports.f2 = m2;
```

----------------------------------------

TITLE: TypeScript Unterminated String Literal (Newline)
DESCRIPTION: This example shows a string literal that is incorrectly terminated by a newline character, resulting in a TS1002 error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/scannerStringLiterals.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
/*
!!! error TS1002: Unterminated string literal.
*/
""Should error because of newline.
                                     
    ""
```

----------------------------------------

TITLE: JavaScript Module Export (ESM)
DESCRIPTION: Example of exporting a function from a JavaScript module using ES Module syntax.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerDirectoryModule(module=node18,moduleresolution=bundler).errors.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
export function test() {}

```

----------------------------------------

TITLE: TypeScript: Assigning to Rest Parameter Array
DESCRIPTION: Demonstrates the assignment of an argument to an element within a rest parameter array in TypeScript. This often occurs during function execution or compilation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_8

LANGUAGE: typescript
CODE:
```
restGreetings[_i - 1] = arguments[_i];
...restGreetings: string[]
```

----------------------------------------

TITLE: TypeScript Basic Class and Function
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instantiation, and function definition. This snippet showcases fundamental object-oriented and procedural patterns in TypeScript.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootSourceRootWithNoSourceMapOption/node/mapRootSourceRootWithNoSourceMapOption.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: Assign to Array Element
DESCRIPTION: Shows how to assign a value to a specific index within an array. This example includes a type assertion for the assigned object.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/contextualTyping.sourcemap.txt#_snippet_22

LANGUAGE: typescript
CODE:
```
c7t2[0] = ({ n: 1 });
```

----------------------------------------

TITLE: TypeScript Recursive Function Return Type Inference
DESCRIPTION: Illustrates return type inference for mutually recursive functions. Shows how TypeScript handles cases with and without explicit return type annotations on the functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/functionImplementations.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
// Two mutually recursive function implementations with no return type annotations
function rec1() {
    return rec2();
}
function rec2() {
    return rec1();
}
var a = rec1();
var a = rec2();

// Two mutually recursive function implementations with return type annotation in one
function rec3(): number {
    return rec4();
}
function rec4() {
    return rec3();
}
var n: number;
var n = rec3();
var n = rec4();
```

----------------------------------------

TITLE: TypeScript Import Statement
DESCRIPTION: An example of an import statement in a TypeScript file, referencing a module from a local library.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/bundlerDirectoryModule(module=nodenext,moduleresolution=bundler).errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
import { test } from '../lib';
```

----------------------------------------

TITLE: Import TypeScript Module and Encounter Error
DESCRIPTION: Demonstrates an attempt to import a function from another TypeScript module. The provided example contains a syntax error, highlighting common issues when using import statements.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importCallExpressionIncorrect2.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
var x = import { foo } from './0';
        ~~~~~~
!!! error TS1109: Expression expected.
```

----------------------------------------

TITLE: JSDoc for Nested Object Parameters
DESCRIPTION: Shows how to document properties of a nested object parameter using dot notation in JSDoc. This example covers required and optional properties, as well as properties with default values.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsdocParamTagTypeLiteral.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
/**
 * @param {Object} opts1 doc1
 * @param {string} opts1.x doc2
 * @param {string=} opts1.y doc3
 * @param {string} [opts1.z] doc4
 * @param {string} [opts1.w=""hi""] doc5
 */
function foo1(opts1) {
    opts1.x;
}

foo1({x: 'abc'});
```

----------------------------------------

TITLE: TypeScript Module Exporter Example
DESCRIPTION: An example module demonstrating how to export a default class and a type alias using 'export type'. This file is referenced by the importer files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esmModuleExports3.errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
export default class Foo {}
export type { Foo as ""module.exports"" }
```

----------------------------------------

TITLE: JSX Element with Unclosed Tag
DESCRIPTION: An example of a JSX element tag that is not properly closed, potentially missing a closing angle bracket or slash.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/linkedEditingJsxTag10.linkedEditing.txt#_snippet_8

LANGUAGE: typescript
CODE:
```
const jsx = <div </div>;

```

----------------------------------------

TITLE: TypeScript Function Source Map Mapping
DESCRIPTION: Illustrates how TypeScript code, including function declarations, comments, and variable assignments, is mapped to its corresponding emitted JavaScript code via source maps. This example highlights the precision of source map generation for debugging purposes.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapForFunctionWithCommentPrecedingStatement01.sourcemap.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
function P() {
    // Test this
    var a = 1;
}
```

LANGUAGE: javascript
CODE:
```
function P() {
    // Test this
    var a = 1;
}
```

LANGUAGE: sourcemap-mapping
CODE:
```
Emitted(1, 1) Source(1, 1) + SourceIndex(0)
Emitted(1, 10) Source(1, 10) + SourceIndex(0)
Emitted(1, 11) Source(1, 11) + SourceIndex(0)
Emitted(2, 5) Source(2, 5) + SourceIndex(0)
Emitted(2, 17) Source(2, 17) + SourceIndex(0)
Emitted(3, 5) Source(3, 5) + SourceIndex(0)
Emitted(3, 9) Source(3, 9) + SourceIndex(0)
Emitted(3, 10) Source(3, 10) + SourceIndex(0)
Emitted(3, 13) Source(3, 13) + SourceIndex(0)
Emitted(3, 14) Source(3, 14) + SourceIndex(0)
Emitted(3, 15) Source(3, 15) + SourceIndex(0)
Emitted(4, 1) Source(4, 1) + SourceIndex(0)
Emitted(4, 2) Source(4, 2) + SourceIndex(0)
```

----------------------------------------

TITLE: TypeScript Source Map Generation Example
DESCRIPTION: Demonstrates the mapping between TypeScript source code and the generated JavaScript output, including line and column number correspondences. This helps in debugging JavaScript code by referencing the original TypeScript source.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inlineSourceMap.sourcemap.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var x = 0;
```

LANGUAGE: JavaScript
CODE:
```
var x = 0;
```

----------------------------------------

TITLE: TypeScript: Declaring and Initializing an Array
DESCRIPTION: Illustrates the declaration and initialization of an array variable in TypeScript. This snippet shows the syntax for creating an empty array with a specific type annotation.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_9

LANGUAGE: typescript
CODE:
```
var greeters: Greeter[] = [];
```

----------------------------------------

TITLE: TypeScript Type Assignment and Compatibility Errors
DESCRIPTION: This TypeScript code demonstrates common type errors encountered during development. It includes examples of assigning incompatible types to variables, incorrect property assignments in object literals, and mismatches in function parameter and return types. These examples are useful for understanding TypeScript's type checking capabilities.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/everyTypeWithAnnotationAndInvalidInitializer.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I {
    id: number;
}

class C implements I {
    id: number;
}

class D<T>{
    source: T;
    recurse: D<T>;
    wrapped: D<D<T>>
}

function F(x: string): number { return 42; }
function F2(x: number): boolean { return x < 42; }

module M {
    export class A {
        name: string;
    }

    export function F2(x: number): string { return x.toString(); }
}

module N {
    export class A {
        id: number;
    }

    export function F2(x: number): string { return x.toString(); }
}

var aNumber: number = 'this is a string';
    var aString: string = 9.9;
    var aDate: Date = 9.9;
    
    var aVoid: void = 9.9;
    
    var anInterface: I = new D();
    var aClass: C = new D();
    var aGenericClass: D<string> = new C();
    var anObjectLiteral: I = { id: 'a string' };
    var anOtherObjectLiteral: { id: string } = new C();
```

----------------------------------------

TITLE: Basic Class Definitions
DESCRIPTION: Provides the foundational class definitions used in the error examples. These snippets define the types that are later augmented or referenced.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleAugmentationImportsAndExports2.errors.txt#_snippet_3

LANGUAGE: typescript
CODE:
```
// f1.ts
export class A {}

```

LANGUAGE: typescript
CODE:
```
// f2.ts
export class B {
    n: number;
}

```

----------------------------------------

TITLE: JavaScript Module Export with Function and Import
DESCRIPTION: Exports a function 'f1' that accepts a string parameter and returns a number, and also exports another module 'm2' as 'f2'. Includes JSDoc for parameter typing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/nodeModulesMaxDepthIncreased/amd/nodeModulesMaxDepthIncreased.errors.txt#_snippet_3

LANGUAGE: javascript
CODE:
```
var m2 = require('m2');

/**
 * @param {string} p1 The first param
 */
exports.f1 = function(p1) {
	return 42;
};

exports.f2 = m2;
```

----------------------------------------

TITLE: TypeScript Enum Value Usage
DESCRIPTION: Shows direct usage of an imported enum value and its members. This example verifies that enums can be imported and accessed correctly.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importsNotUsedAsValues_error.errors.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
==== /g.ts (0 errors) ====
    import { C } from './a';
    let c: C;
    let d: C.Two;
    console.log(c, d);
```

----------------------------------------

TITLE: TypeScript Module and Class Definition
DESCRIPTION: Defines a TypeScript module 'Shapes' containing an exported class 'Point'. The class implements the 'IPoint' interface and includes a constructor, an instance method 'getDist', and a static member 'origin'. It also shows module-level variables and functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMap-FileWithComments.sourcemap.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
module Shapes {
    // Class
    export class Point implements IPoint {
        // Constructor
        constructor(public x: number, public y: number) { }

        // Instance member
        getDist() { return Math.sqrt(this.x * this.x + this.y * this.y); }

        // Static member
        static origin = new Point(0, 0);
    }

    // Variable comment after class
    var a = 10;

    export function foo() {
    }

    /**  comment after function
    * this is another comment 
    */
    var b = 10;
}
```

----------------------------------------

TITLE: TypeScript Object Destructuring Example
DESCRIPTION: Shows object destructuring in TypeScript. This example demonstrates extracting properties from an object into variables with matching names.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPatternDefaultValues.sourcemap.txt#_snippet_47

LANGUAGE: typescript
CODE:
```
const skillData = {
  primarySkillA: ""primary"",
  secondarySkillA: ""secondary""
};
const { primarySkillA, secondarySkillA } = skillData;
```

----------------------------------------

TITLE: TypeScript Type Qualification Example
DESCRIPTION: Demonstrates two variants of qualifying a peer type in TypeScript. This snippet highlights how types can be accessed through module paths.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#_snippet_24

LANGUAGE: typescript
CODE:
```
// Two variants of qualifying a peer type

// Two variants of qualifying a peer type
```

----------------------------------------

TITLE: TypeScript Source Code
DESCRIPTION: The original TypeScript source code file used in the compilation example. This snippet shows a simple variable declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/optionsSourcemapInlineSourcesSourceRoot.sourcemap.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
var a = 10;
```

----------------------------------------

TITLE: ESM Module Example (subfolder2/another/index.mts)
DESCRIPTION: An example of an ECMAScript Module export using the .mts extension, explicitly marking it as an ES Module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node18).errors.txt#_snippet_8

LANGUAGE: typescript
CODE:
```
// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: JavaScript: Underscore.js Custom Template Settings
DESCRIPTION: Demonstrates how to customize Underscore.js template delimiters using `_.templateSettings`. This example changes the interpolation syntax from `<%= ... %>` to `{{ ... }}`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_22

LANGUAGE: JavaScript
CODE:
```
_.templateSettings = {
    interpolate: /\{\{(.+?)\}\}/g
};
var template2 = _.template(""Hello {{ name }}!"");
template2({ name: ""Mustache"" });
```

----------------------------------------

TITLE: Define TypeScript Interfaces
DESCRIPTION: Provides examples of defining TypeScript interfaces. Includes an exported interface `InterfaceY` with a method signature and a non-exported interface `NonExportedInterfaceQ`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#_snippet_70

LANGUAGE: TypeScript
CODE:
```
export interface InterfaceY { YisIn1_2_2(); }
interface NonExportedInterfaceQ { }
```

----------------------------------------

TITLE: TypeScript Generator: Mixed Yield and Return Type Inference
DESCRIPTION: Illustrates type inference in generators that combine both `yield` and `return` statements, showing how the yielded and returned types are inferred.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatorReturnTypeInference.errors.txt#_snippet_4

LANGUAGE: typescript
CODE:
```
// Generator<undefined, void, unknown>
function* g301() {
    yield;
    return;
}

// Generator<number, void, unknown>
function* g302() {
    yield 1;
    return;
}

// Generator<undefined, string, unknown>
function* g303() {
    yield;
    return ""a"";
}

// Generator<number, string, unknown>
function* g304() {
    yield 1;
    return ""a"";
}

// Generator<1 | 2, ""a"" | ""b"", unknown>
function* g305() {
    if (Math.random()) yield 1;
    yield 2;
    if (Math.random()) return ""a"";
    return ""b"";
}

// Generator<number, boolean, ""hi"">
function* g306() {
    const a: ""hi"" = yield 1;
    return true;
}
```

----------------------------------------

TITLE: Assertion Function Usage and Errors
DESCRIPTION: Shows examples of using assertion functions within other functions and class properties, highlighting errors related to the assertion target's type annotation and call context.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionTypePredicates1.errors.txt#_snippet_5

LANGUAGE: TypeScript
CODE:
```
function f20(x: unknown) {
    const assert = (value: unknown): asserts value => {}
    assert(typeof x === ""string"");  // Error
    // ~~~~~~
// !!! error TS2775: Assertions require every name in the call target to be declared with an explicit type annotation.
// !!! related TS2782 assertionTypePredicates1.ts:169:11: 'assert' needs an explicit type annotation.
    const a = [assert];
    a[0](typeof x === ""string"");  // Error
    // ~~~~
// !!! error TS2776: Assertions require the call target to be an identifier or qualified name.
    const t1 = new Test();
    t1.assert(typeof x === ""string"");  // Error
    // ~~~~~~~~~
// !!! error TS2775: Assertions require every name in the call target to be declared with an explicit type annotation.
// !!! related TS2782 assertionTypePredicates1.ts:173:11: 't1' needs an explicit type annotation.
    const t2: Test = new Test();
    t2.assert(typeof x === ""string"");
}

class TestPropertyDeclaration1 {
  assert = (value: unknown): asserts value => {};
  other(x: unknown) {
    this.assert(x); // error
    // ~~~~~~~~~~ 
// !!! error TS2775: Assertions require every name in the call target to be declared with an explicit type annotation.
// !!! related TS2782 assertionTypePredicates1.ts:198:3: 'assert' needs an explicit type annotation.
    x;
  }
}

class TestPropertyDeclaration2 {
  assert: (v: unknown) => asserts v = (value) => {};
  other(x: unknown) {
    this.assert(x); // ok
    x;
  }
}
```

----------------------------------------

TITLE: ESM Module Example (subfolder2/another/index.mts)
DESCRIPTION: An example of an ECMAScript Module export using the .mts extension, explicitly marking it as an ES Module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node16).errors.txt#_snippet_8

LANGUAGE: typescript
CODE:
```
// esm format file
const x = 1;
export {x};
```

----------------------------------------

TITLE: TypeScript Generic Function with Options Object
DESCRIPTION: Demonstrates type inference for a generic `foo` function that takes an options object with properties `a` and `b`. Shows inference for different function syntaxes used for property `a`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/intraExpressionInferences.errors.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
// Repro from #38845

declare function foo<A>(options: { a: A, b: (a: A) => void }): void;

foo({
    a: () => { return 42 },
    b(a) {},
});

foo({
    a: function () { return 42 },
    b(a) {},
});

foo({
    a() { return 42 },
    b(a) {},
});

```

----------------------------------------

TITLE: TypeScript Import Examples
DESCRIPTION: Demonstrates various import syntaxes in TypeScript, including importing from JavaScript (.js), TypeScript (.ts), declaration files (.d.ts), and JSX files (.tsx, .jsx). It shows how to import modules and types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportingTsExtensions(moduleresolution=node10).errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
import {} from ""./ts.js"";
import {} from ""./ts.ts"";
import type {} from ""./ts.d.ts"";

import {} from ""./tsx.js"";
import {} from ""./tsx.jsx"";
import {} from ""./tsx.ts"";
import {} from ""./tsx.tsx"";
import type {} from ""./tsx.d.ts"";

import {} from ""./dts.js"";
import {} from ""./dts.ts"";
import type {} from ""./dts.d.ts"";
```

----------------------------------------

TITLE: FileService Upload Snippet
DESCRIPTION: Demonstrates a `FileService` class that utilizes `Services.IRequestService` to upload data. It shows how `WinJS.TPromise` is used for asynchronous operations and how `requestService.getRequestUrl` is called.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/variableDeclaratorResolvedDuringContextualTyping.errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
module Services {
    export interface IRequestService {
        getRequestUrl(service: string, path?: string): string;
        getRequestUrl(service: string, path?: string, absolute?: boolean): string;
        makeRequest(options: WinJS.IXHROptions): WinJS.Promise;
    }
}

module Files {
    export interface IUploadResult {
        stat: string;
        isNew: boolean;
    }
}

class FileService {
    private requestService: Services.IRequestService;
    public uploadData(): WinJS.TPromise<Files.IUploadResult> {
        var path = """";
        return this.requestService.makeRequest({
            url: this.requestService.getRequestUrl('root', path)
        });
    }
}
```

----------------------------------------

TITLE: MobileDetect Constructor API
DESCRIPTION: API documentation for the MobileDetect constructor. It initializes the object with a user-agent string and an optional maximum phone width for device classification.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/fixSignatureCaching.errors.txt#_snippet_83

LANGUAGE: APIDOC
CODE:
```
MobileDetect(userAgent, maxPhoneWidth)
  - Constructor for MobileDetect object.
  - Keeps a reference to the given user-agent string and caches detection queries.
  - Parameters:
    - userAgent: {string} Typically taken from window.navigator.userAgent or http_header['User-Agent'].
    - maxPhoneWidth: {number} [optional, default=600] For browsers, specifies the maximum width of the smallest device side (in logical ""CSS"" pixels) until a device detected as mobile will be handled as a phone. If a value < 0 is provided, this check is disabled.
  - Example:
    var md = new MobileDetect(window.navigator.userAgent);
    if (md.mobile()) {
        location.href = (md.mobileGrade() === 'A') ? '/mobile/' : '/lynx/';
    }
```

----------------------------------------

TITLE: TypeScript Module Example (m1.ts)
DESCRIPTION: Demonstrates basic TypeScript syntax including variable declaration, class definition, instance creation, and function definition within a module.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/mapRootRelativePathSubfolderSpecifyOutputFile/node/mapRootRelativePathSubfolderSpecifyOutputFile.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
var m1_a1 = 10;
class m1_c1 {
    public m1_c1_p1: number;
}

var m1_instance1 = new m1_c1();
function m1_f1() {
    return m1_instance1;
}
```

----------------------------------------

TITLE: TypeScript: `const` in `for...in` loop
DESCRIPTION: Shows `const` declaration within a `for...in` loop in TypeScript. Includes a type comparison error example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/capturedLetConstInLoop5_ES6.errors.txt#_snippet_11

LANGUAGE: typescript
CODE:
```
declare function use(a: any);

function foo00_c(x) {
    for (const x in []) {
        var v = x;
        (function() { return x + v });
        (() => x + v);
        if (x == ""1"") {
            return;
        }
    }

    use(v);
}
```

----------------------------------------

TITLE: TypeScript Module Imports and Type Assertions (TypeScript)
DESCRIPTION: Shows how to import modules using `import()` and assert types. This example also highlights common TypeScript errors related to module resolution and exported members.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importTypeLocalMissing.errors.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
export const x: import(""./fo"") = { x: 0, y: 0 };
    export let y: import(""./fo2"").Bar.I = { a: """", b: 0 };
    export let z: import(""./foo2"").Bar.Q = { a: """", b: 0 };
    
    export class Bar2 {
        item: {a: string, b: number, c: object};
        constructor(input?: any) {}
    }
    
    export let shim: typeof import(""./fo2"") = {
        Bar: Bar2
    };
```

----------------------------------------

TITLE: TypeScript: Assigning Arrays of Arrays or Index Signatures
DESCRIPTION: Shows examples of declaring and assigning multi-dimensional arrays or arrays conforming to index signature types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_58

LANGUAGE: typescript
CODE:
```
var x255: Base[][] = [[d1, d2]];
```

LANGUAGE: typescript
CODE:
```
var x256: Array<Base>[] = [[d1, d2]];
```

LANGUAGE: typescript
CODE:
```
var x257: { [n: number]: Base; }[] = [[d1, d2]];
```

----------------------------------------

TITLE: TypeScript ECMAScript Module Import Examples
DESCRIPTION: A comprehensive set of examples showing various ECMAScript module import statements in TypeScript, including imports with different file extensions (.js, .mjs, .cjs), directory imports, and imports missing extensions. These examples highlight the errors encountered under specific module resolution settings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=node20).errors.txt#_snippet_14

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};

// index.ts (demonstrating various imports)
import * as m1 from ""./index.js"";
import * as m2 from ""./index.mjs"";
import * as m3 from ""./index.cjs"";
import * as m4 from ""./subfolder/index.js"";
import * as m5 from ""./subfolder/index.mjs"";
import * as m6 from ""./subfolder/index.cjs"";
import * as m7 from ""./subfolder2/index.js"";
import * as m8 from ""./subfolder2/index.mjs"";
import * as m9 from ""./subfolder2/index.cjs"";
import * as m10 from ""./subfolder2/another/index.js"";
import * as m11 from ""./subfolder2/another/index.mjs"";
import * as m12 from ""./subfolder2/another/index.cjs"";

// Imports that may fail or require specific resolution:
import * as m13 from ""./""; // TS2307: Cannot find module './' or its corresponding type declarations.
import * as m14 from ""./index""; // TS2835: Relative import paths need explicit file extensions...
import * as m15 from ""./subfolder""; // TS2835: Relative import paths need explicit file extensions...
import * as m16 from ""./subfolder/""; // TS2834: Relative import paths need explicit file extensions...
import * as m17 from ""./subfolder/index""; // TS2834: Relative import paths need explicit file extensions...
import * as m18 from ""./subfolder2""; // TS2835: Relative import paths need explicit file extensions...
import * as m19 from ""./subfolder2/""; // TS2834: Relative import paths need explicit file extensions...
import * as m20 from ""./subfolder2/index""; // TS2834: Relative import paths need explicit file extensions...
import * as m21 from ""./subfolder2/another""; // TS2835: Relative import paths need explicit file extensions...
import * as m22 from ""./subfolder2/another/""; // TS2834: Relative import paths need explicit file extensions...
import * as m23 from ""./subfolder2/another/index""; // TS2834: Relative import paths need explicit file extensions...

// Voiding imports to prevent unused variable errors
void m1;
void m2;
void m3;
void m4;
void m5;
void m6;
void m7;
void m8;
void m9;
void m10;
void m11;
void m12;
void m13;
void m14;
void m15;
void m16;
void m17;
void m18;
void m19;
void m20;
void m21;
void m22;
void m23;
```

----------------------------------------

TITLE: TypeScript Reference Example (test.ts)
DESCRIPTION: Shows how to use a reference path to include another TypeScript file, demonstrating basic syntax and external module referencing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/outSubfolderSpecifyOutputFile/node/outSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='ref/m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: Constructor Overload Mismatch Error Details
DESCRIPTION: Provides the specific TypeScript error message and its explanation for the overload mismatch scenario, highlighting the expected versus provided constructor signatures.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericCallWithOverloadedConstructorTypedArguments2.errors.txt#_snippet_3

LANGUAGE: APIDOC
CODE:
```
TS2345: Argument of type 'new <T>(x: T, y: T) => string' is not assignable to parameter of type '{ new (x: unknown): string; new (x: unknown, y?: unknown): string; }'.
  Target signature provides too few arguments. Expected 2 or more, but got 1.

This error occurs when a constructor function `b` (defined as `new <T>(x: T, y: T): string`) is passed to `foo6`, which expects a constructor that can be called with one or two arguments of type `T` (specifically `new(x: T): string` and `new(x: T, y?: T): string`). The provided constructor `b` only matches a signature that requires two arguments (`x: T, y: T`), failing to satisfy the single-argument requirement of `foo6`'s first overload.
```

----------------------------------------

TITLE: TypeScript ECMAScript Module Import Examples
DESCRIPTION: A comprehensive set of examples showing various ECMAScript module import statements in TypeScript, including imports with different file extensions (.js, .mjs, .cjs), directory imports, and imports missing extensions. These examples highlight the errors encountered under specific module resolution settings.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModules1(module=nodenext).errors.txt#_snippet_14

LANGUAGE: typescript
CODE:
```
// cjs format file
const x = 1;
export {x};

// index.ts (demonstrating various imports)
import * as m1 from ""./index.js"";
import * as m2 from ""./index.mjs"";
import * as m3 from ""./index.cjs"";
import * as m4 from ""./subfolder/index.js"";
import * as m5 from ""./subfolder/index.mjs"";
import * as m6 from ""./subfolder/index.cjs"";
import * as m7 from ""./subfolder2/index.js"";
import * as m8 from ""./subfolder2/index.mjs"";
import * as m9 from ""./subfolder2/index.cjs"";
import * as m10 from ""./subfolder2/another/index.js"";
import * as m11 from ""./subfolder2/another/index.mjs"";
import * as m12 from ""./subfolder2/another/index.cjs"";

// Imports that may fail or require specific resolution:
import * as m13 from ""./""; // TS2307: Cannot find module './' or its corresponding type declarations.
import * as m14 from ""./index""; // TS2835: Relative import paths need explicit file extensions...
import * as m15 from ""./subfolder""; // TS2835: Relative import paths need explicit file extensions...
import * as m16 from ""./subfolder/""; // TS2834: Relative import paths need explicit file extensions...
import * as m17 from ""./subfolder/index""; // TS2834: Relative import paths need explicit file extensions...
import * as m18 from ""./subfolder2""; // TS2835: Relative import paths need explicit file extensions...
import * as m19 from ""./subfolder2/""; // TS2834: Relative import paths need explicit file extensions...
import * as m20 from ""./subfolder2/index""; // TS2834: Relative import paths need explicit file extensions...
import * as m21 from ""./subfolder2/another""; // TS2835: Relative import paths need explicit file extensions...
import * as m22 from ""./subfolder2/another/""; // TS2834: Relative import paths need explicit file extensions...
import * as m23 from ""./subfolder2/another/index""; // TS2834: Relative import paths need explicit file extensions...

// Voiding imports to prevent unused variable errors
void m1;
void m2;
void m3;
void m4;
void m5;
void m6;
void m7;
void m8;
void m9;
void m10;
void m11;
void m12;
void m13;
void m14;
void m15;
void m16;
void m17;
void m18;
void m19;
void m20;
void m21;
void m22;
void m23;
```

----------------------------------------

TITLE: TypeScript Type Parameter Constraint Examples
DESCRIPTION: This snippet showcases TypeScript code designed to test the behavior of generic type parameters when they have constraints (e.g., `extends Foo`). It includes examples of class inheritance and property assignments that trigger specific TypeScript compiler errors (TS2411, TS2416) related to type safety and subtype compatibility.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/subtypesOfTypeParameterWithConstraints4.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
// checking whether other types are subtypes of type parameters with constraints
    
    class Foo { foo: number; }
    function f<T extends Foo, U extends Foo, V>(t: T, u: U, v: V) {
        // ok
        var r = true ? t : u;
        var r = true ? u : t;
    
        // ok
        var r2 = true ? t : v;
        var r2 = true ? v : t;
    
        // ok
        var r3 = true ? v : u;
        var r3 = true ? u : v;
    
        // ok
        var r4 = true ? t : new Foo();
        var r4 = true ? new Foo() : t;
    
        // ok
        var r5 = true ? u : new Foo();
        var r5 = true ? new Foo() : u;
    
        // ok
        var r6 = true ? v : new Foo();
        var r6 = true ? new Foo() : v;
    
    }
    
    class B1<T> {
        foo: T;
    }
    
    class D1<T extends Foo, U extends Foo, V> extends B1<Foo> {
        [x: string]: Foo;
        foo: T; // ok
    }
    
    class D2<T extends Foo, U extends Foo, V> extends B1<Foo> {
        [x: string]: Foo;
        foo: U; // ok
    }
    
    class D3<T extends Foo, U extends Foo, V> extends B1<Foo> {
        [x: string]: Foo;
        foo: V; // error
        
    }
    
    class D4<T extends Foo, U extends Foo, V> extends B1<T> {
        [x: string]: T;
        foo: T; // ok
    }
    
    class D5<T extends Foo, U extends Foo, V> extends B1<T> {
        [x: string]: T;
        foo: U; // error
        
    }
    
    class D6<T extends Foo, U extends Foo, V> extends B1<T> {
        [x: string]: T;
        foo: V; // error
        
    }
    
    class D7<T extends Foo, U extends Foo, V> extends B1<U> {
        [x: string]: U;
        foo: T; // error
    }
    
    class D8<T extends Foo, U extends Foo, V> extends B1<U> {
        [x: string]: U;
        foo: U; // ok
    }
    
    class D9<T extends Foo, U extends Foo, V> extends B1<U> {
        [x: string]: U;
        foo: V; // error
    }
```

----------------------------------------

TITLE: Class Methods with Assertion Signatures
DESCRIPTION: Demonstrates how to define class methods that use the `asserts` keyword to narrow down the type of `this` or a parameter within the method's scope. Includes examples of successful assertions and potential errors.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/assertionTypePredicates1.errors.txt#_snippet_3

LANGUAGE: TypeScript
CODE:
```
class Test {
    assert(value: unknown): asserts value {
        if (!value) throw new Error();
    }
    isTest2(): this is Test2 {
        return this instanceof Test2;
    }
    assertIsTest2(): asserts this is Test2 {
        if (this instanceof Test2) return;
        throw new Error();
    }
    assertThis(): asserts this {
        if (!this) return;
        throw new Error();
    }
    bar() {
        this.assertThis();
        this;
    }
    foo(x: unknown) {
        this.assert(typeof x === ""string"");
        x.length;
        if (this.isTest2()) {
            this.z;
        }
        this.assertIsTest2();
        this.z;
    }
    baz(x: number) {
        this.assert(false);
        x;  // Unreachable
    }
}

class Test2 extends Test {
    z = 0;
}

class Derived extends Test {
    foo(x: unknown) {
        super.assert(typeof x === ""string"");
        x.length;
    }
    baz(x: number) {
        super.assert(false);
        x;  // Unreachable
    }
}

function f11(items: Test[]) {
    for (let item of items) {
        if (item.isTest2()) {
            item.z;
        }
        item.assertIsTest2();
        item.z;
    }
}
```

----------------------------------------

TITLE: TypeScript Module A Usage Example
DESCRIPTION: Module A imports modules C and B, demonstrating how they are used in a larger context. It declares a variable 'b' typed as ClassB.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType5.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
import moduleC = require(""recursiveExportAssignmentAndFindAliasedType5_moduleC"");
import ClassB = require(""recursiveExportAssignmentAndFindAliasedType5_moduleB"");
export var b: ClassB; // This should result in type ClassB

```

----------------------------------------

TITLE: TypeScript Point getDist Method
DESCRIPTION: Adds a getDist method to the Point prototype. This method calculates the Euclidean distance of the point from the origin using its x and y coordinates. It relies on the Math.sqrt function.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMap-FileWithComments.sourcemap.txt#_snippet_2

LANGUAGE: TypeScript
CODE:
```
Point.prototype.getDist = function () { return Math.sqrt(this.x * this.x + this.y * this.y); };
```

----------------------------------------

TITLE: TypeScript Times Function Example
DESCRIPTION: Demonstrates a `times` function that generates an array by applying a function to a sequence of numbers from 0 up to (but not including) a given count.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#_snippet_11

LANGUAGE: TypeScript
CODE:
```
declare function times<T>(fn: (i: number) => T): (n: number) => T[];
const a2 = times(identity)(5); // => [0, 1, 2, 3, 4]
```

----------------------------------------

TITLE: TypeScript Reference Example (test.ts)
DESCRIPTION: Shows how to use a reference path to include another TypeScript file, demonstrating basic syntax and external module referencing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlSubfolderSpecifyOutputFile/node/sourcerootUrlSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='ref/m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: TypeScript Class Export Example
DESCRIPTION: A simple TypeScript file that defines and exports a class named 'ClassB'. This class is intended to be imported and used by other modules.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/recursiveExportAssignmentAndFindAliasedType1.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
class ClassB { }
    export = ClassB;
```

----------------------------------------

TITLE: TypeScript EmitterIOHost for Compiler File Handling
DESCRIPTION: A TypeScript class implementing `TypeScript.EmitterIOHost` to manage file creation and existence checks for the TypeScript compiler's output. It uses `WriterAggregator` to handle writing file content and stores files in a collection.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserharness.errors.txt#_snippet_25

LANGUAGE: typescript
CODE:
```
export class EmitterIOHost implements TypeScript.EmitterIOHost {
    private fileCollection = {};

    /** create file gets the whole path to create, so this works as expected with the --out parameter */
    public createFile(s: string, useUTF8?: boolean): ITextWriter {
        if (this.fileCollection[s]) {
            return <ITextWriter>this.fileCollection[s];
        }

        var writer = new Harness.Compiler.WriterAggregator();
        this.fileCollection[s] = writer;
        return writer;
    }

    public directoryExists(s: string) { return false; }
    public fileExists(s: string) { return typeof this.fileCollection[s] !== 'undefined'; }
    public resolvePath(s: string) { return s; }

    public reset() { this.fileCollection = {}; }

    public toArray(): { filename: string; file: WriterAggregator; }[] {
        var result: { filename: string; file: WriterAggregator; }[] = [];

        for (var p in this.fileCollection) {
            if (this.fileCollection.hasOwnProperty(p)) {
                var current = <Harness.Compiler.WriterAggregator>this.fileCollection[p];
                if (current.lines.length > 0) {
                    if (p !== '0.js') { current.lines.unshift('////[' + p + ']'); }
                    result.push({ filename: p, file: this.fileCollection[p] });
                }
            }
        }
        return result;
    }
}
```

----------------------------------------

TITLE: TypeScript Shadowing 'new.target' in Classes
DESCRIPTION: Shows an example of shadowing the 'new.target' meta-property within a class constructor. 'new.target' refers to the constructor that was invoked by 'new'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/shadowedReservedCompilerDeclarationsWithNoEmit.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
class Base { }
class C2 extends Base {
    constructor() {
        super();
        var _newTarget = """";
        var t = new.target;
        var y = _newTarget;
    }
}
```

----------------------------------------

TITLE: TypeScript Editor Features: Snippet Completions and Navigation
DESCRIPTION: Highlights editor enhancements in TypeScript, focusing on improved code completion, navigation, and organization features.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
TypeScript Editor Features:

Object Method Snippet Completions:
  Provides automatic snippet completions for object methods, streamlining method definition within objects.

Snippet Completions for Subclass Methods:
  Offers snippet completions for methods when extending a class, automatically generating method stubs based on the parent class.

Snippet Completions for JSX Attributes:
  Improves code completion for JSX attributes in React/JSX files, providing relevant suggestions and snippets.

Go to Source Definition/JavaScript Implementation:
  Enhances navigation features, allowing users to jump directly to the source definition or JavaScript implementation of a symbol.

Grouping-Aware Organize Imports:
  Improves the 'Organize Imports' feature by intelligently grouping related imports, leading to cleaner and more organized code.

Better Editor Support for Unresolved Types:
  Provides improved editor feedback and support when dealing with types that are not yet resolved or are missing definitions.
```

----------------------------------------

TITLE: Generic Function Type Inference with Spread Arguments
DESCRIPTION: Shows how TypeScript infers types for generic functions when arguments are spread. This includes examples using a higher-order function `f5` that returns a function with the same signature, and a `pipe` function for composing functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restTuplesFromContextualTypes.errors.txt#_snippet_2

LANGUAGE: typescript
CODE:
```
declare function f5<T extends any[], U>(f: (...args: T) => U): (...args: T) => U;

let g0 = f5(() => ""hello""); // infers () => string
let g1 = f5((x, y) => 42); // infers (x: any, y: any) => number
let g2 = f5((x: number, y) => 42); // infers (x: number, y: any) => number
let g3 = f5((x: number, y: number) => x + y); // infers (x: number, y: number) => number
let g4 = f5((...args) => true); // infers (...args: any[]) => boolean

declare function pipe<A extends any[], B, C>(f: (...args: A) => B, g: (x: B) => C): (...args: A) => C;

let g5 = pipe(() => true, b => 42); // infers () => number
let g6 = pipe(x => ""hello"", s => s.length); // infers (x: any) => number
let g7 = pipe((x, y) => 42, x => """" + x); // infers (x: any, y: any) => string
let g8 = pipe((x: number, y: string) => 42, x => """" + x); // infers (x: number, y: string) => string
```

----------------------------------------

TITLE: JavaScript Module Definition (mod.js)
DESCRIPTION: Defines a JavaScript module with classes, functions, and a string literal, intended for import into other modules. This serves as the source for the import examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportAssignment7.errors.txt#_snippet_0

LANGUAGE: javascript
CODE:
```
class Thing  { x = 1 }
    class AnotherThing { y = 2  }
    function foo() { return 3 }
    function bar() { return 4 }
    /** @typedef {() => number} buz */
    module.exports = {
        Thing,
        AnotherThing,
        foo,
        qux: bar,
        baz() { return 5 },
        literal: """",
    }
```

----------------------------------------

TITLE: TypeScript Basic Variable Declaration
DESCRIPTION: A simple example of declaring a variable without an explicit type annotation, allowing TypeScript to infer the type or leaving it as 'any'.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/typeResolution.sourcemap.txt#_snippet_53

LANGUAGE: typescript
CODE:
```
var d2;
```

----------------------------------------

TITLE: Basic TypeScript Variable Declaration
DESCRIPTION: A simple example of a TypeScript file declaring a variable with a type annotation. This snippet illustrates fundamental TypeScript syntax for variable assignment.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/pathsValidation1.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
let x = 1;
```

----------------------------------------

TITLE: TypeScript Namespace Declaration
DESCRIPTION: Illustrates the common TypeScript pattern for declaring or augmenting namespaces, ensuring that Foo.Bar is properly initialized before use. This is often seen in module patterns or IIFEs.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapSample.sourcemap.txt#_snippet_17

LANGUAGE: typescript
CODE:
```
})(Bar = Foo.Bar || (Foo.Bar = {}));
```

----------------------------------------

TITLE: TypeScript Reference Example (test.ts)
DESCRIPTION: Shows how to use a reference path to include another TypeScript file, demonstrating basic syntax and external module referencing.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcemapSubfolderSpecifyOutputFile/node/sourcemapSubfolderSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
/// <reference path='ref/m1.ts'/>
var a1 = 10;
class c1 {
    public p1: number;
}

var instance1 = new c1();
function f1() {
    return instance1;
}
```

----------------------------------------

TITLE: TypeScript Interface and Type Definitions
DESCRIPTION: Defines the 'ComponentOptions' interface and the 'WatchHandler' type, along with the signature for the 'extend' function. These are foundational elements for the subsequent example.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowJscheckJsTypeParameterNoCrash.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
interface ComponentOptions<V> {
    watch: Record<string, WatchHandler<any>>;
}

type WatchHandler<T> = (val: T) => void;

declare function extend(options: ComponentOptions<{}>): void;

export var vextend = extend;
```

----------------------------------------

TITLE: TypeScript Module Export Example
DESCRIPTION: This TypeScript file demonstrates exporting a function and an interface from a module. These exports can then be imported into other TypeScript files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/preserveValueImports_mixedImports.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
export function Component() {}
export interface ComponentProps {}
```

----------------------------------------

TITLE: TypeScript Function Variance Examples
DESCRIPTION: Demonstrates TypeScript's rules for function type assignability, showing how variance in parameter and return types affects compatibility. This example highlights contravariance in parameters and covariance in return types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/strictFunctionTypesErrors.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
type Func<T, U> = (x: T) => U;

declare let g1: Func<Object, Object>;
declare let g2: Func<Object, string>;
declare let g3: Func<string, Object>;
declare let g4: Func<string, string>;

// Covariance in return type (g2 is assignable to g1)
g1 = g2;  // Ok

// Contravariance in parameter type (g3 is assignable to g1)
g1 = g3;  // Error: Type 'Func<string, Object>' is not assignable to type 'Func<Object, Object>'.
          // Type 'Object' is not assignable to type 'string'.

// Both parameter and return types differ
g1 = g4;  // Error: Type 'Func<string, string>' is not assignable to type 'Func<Object, Object>'.
          // Type 'Object' is not assignable to type 'string'.

// Assigning to a more restrictive type
g2 = g1;  // Error: Type 'Func<Object, Object>' is not assignable to type 'Func<Object, string>'.
          // Type 'Object' is not assignable to type 'string'.

g2 = g3;  // Error: Type 'Func<string, Object>' is not assignable to type 'Func<Object, string>'.
          // Type 'Object' is not assignable to type 'string'.

g2 = g4;  // Ok: g4's parameter (string) is assignable to g2's parameter (Object), and g4's return (string) is assignable to g2's return (string).

// Assigning to a more general type
g3 = g1;  // Ok: g1's parameter (Object) is assignable to g3's parameter (string) - contravariant, and g1's return (Object) is assignable to g3's return (Object) - covariant.
g3 = g2;  // Ok
g3 = g4;  // Ok

g4 = g1;  // Error: Type 'Func<Object, Object>' is not assignable to type 'Func<string, string>'.
          // Type 'Object' is not assignable to type 'string'.

g4 = g2;  // Ok
g4 = g3;  // Error: Type 'Func<string, Object>' is not assignable to type 'Func<string, string>'.
          // Type 'Object' is not assignable to type 'string'.
```

----------------------------------------

TITLE: CommonJS Named Export Example
DESCRIPTION: Illustrates exporting a named property ('foo') from a CommonJS module. This allows other modules to import this specific property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSEmit1(module=node18).errors.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
exports.foo = 0;
```

----------------------------------------

TITLE: TypeScript: Function Returning Array (Array<Base>)
DESCRIPTION: Illustrates functions returning an array using the generic Array<Base> syntax. Covers direct function returns and module exports.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_43

LANGUAGE: typescript
CODE:
```
function x152(): Array<Base> { return [d1, d2]; }
var x164: () => Array<Base> = () => { return [d1, d2]; };
var x176: () => Array<Base> = function() { return [d1, d2]; };
module x188 { var t: Array<Base> = [d1, d2]; }
module x200 { export var t: Array<Base> = [d1, d2]; }
var x212 = <Array<Base>>[d1, d2];
```

----------------------------------------

TITLE: Transpile TypeScript Function to JavaScript
DESCRIPTION: Illustrates the JavaScript output for a basic TypeScript function. This snippet shows a simple function declaration transpiled into its JavaScript equivalent.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithOutDir.sourcemap.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
function bar() {
}

```

LANGUAGE: javascript
CODE:
```
function bar() {
}

```

----------------------------------------

TITLE: CommonJS Named Export Example
DESCRIPTION: Illustrates exporting a named property ('foo') from a CommonJS module. This allows other modules to import this specific property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSEmit1(module=node20).errors.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
exports.foo = 0;
```

----------------------------------------

TITLE: TypeScript Compiler Options: Build and Performance
DESCRIPTION: Configuration options related to build processes and performance enhancements in the TypeScript compiler, including incremental builds and file watching.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
TypeScript Compiler Options:

--build
  Enables building projects incrementally. Requires a tsconfig.json with a 'references' field.

--watch
  Enables watch mode, recompiling files as they change.

--incremental
  Enables incremental compilation, storing previous compilation outputs to speed up subsequent builds.

--target <ES3|ES5|ES6|ES2015|ES2016|ES2017|ES2018|ES2019|ES2020|ES2021|ES2022|ESNext>
  Specifies the ECMAScript target version for compiled JavaScript code.

--target ""ES2022""
  Sets the JavaScript output target to ECMAScript 2022 features.
```

----------------------------------------

TITLE: CommonJS Named Export Example
DESCRIPTION: Illustrates exporting a named property ('foo') from a CommonJS module. This allows other modules to import this specific property.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesCJSEmit1(module=nodenext).errors.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
exports.foo = 0;
```

----------------------------------------

TITLE: Valid 'yield' Statement
DESCRIPTION: Shows a valid TypeScript async generator method that uses the 'yield' keyword as a statement. This is a basic example of yielding a value.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parser.asyncGenerators.classMethods.es2018.errors.txt#_snippet_12

LANGUAGE: TypeScript
CODE:
```
class C13 {
    async * f() {
        yield;
    }
}
```

----------------------------------------

TITLE: TypeScript Module Import Examples and Errors
DESCRIPTION: Demonstrates various ways to import modules in TypeScript, including dynamic imports and commonjs require, highlighting common module resolution errors (TS2307).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/emit(jsx=react).errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
// Rewrite
    import {} from ""./foo.ts"";
                   ~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.ts' or its corresponding type declarations.
    import {} from ""../foo.mts"";
                   ~~~~~~~~~~~~~
!!! error TS2307: Cannot find module '../foo.mts' or its corresponding type declarations.
    import {} from ""../../foo.cts"";
                   ~~~~~~~~~~~~~~~
!!! error TS2307: Cannot find module '../../foo.cts' or its corresponding type declarations.
    import {} from ""./foo.tsx"";
                   ~~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.tsx' or its corresponding type declarations.
    import foo = require(""./foo.ts"");
                         ~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.ts' or its corresponding type declarations.
    import ""./foo.ts"";
    export * from ""./foo.ts"";
                  ~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.ts' or its corresponding type declarations.
    //Shim
    import(""./foo.ts"");
           ~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.ts' or its corresponding type declarations.
    import(""./foo.ts"").then(() => {});
           ~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.ts' or its corresponding type declarations.
    function acceptAny(arg: any) {}
    acceptAny(import(""./foo.ts""));
                     ~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.ts' or its corresponding type declarations.
    import(""./foo.ts"", { with: { attr: ""value"" } });
           ~~~~~~~~~~
!!! error TS2307: Cannot find module './foo.ts' or its corresponding type declarations.
    import("""" + ""./foo.ts"");
```

----------------------------------------

TITLE: DangerBotOSS: Missed Exports Suggestion
DESCRIPTION: DangerBotOSS suggests missed exports in the Definitely Typed repository. It operates as a bot, posting comments to inform developers about potential export omissions.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/All-The-Bots.md#_snippet_7

LANGUAGE: APIDOC
CODE:
```
Bot: DangerBotOSS

Description: Analyzes code changes in Definitely Typed PRs and suggests missed exports.

Functionality:
  - Scans code for exported modules or types.
  - Compares detected exports against common patterns or conventions.
  - Posts comments on Pull Requests suggesting potential missing exports.

Triggering Events:
  - GitHub Pull Request events (opened, synchronize, reopened).

Inputs:
  - Code diff of the Pull Request.
  - Repository context (e.g., file structure, existing export patterns).

Outputs:
  - GitHub comments on Pull Requests.

Example Interaction:
  Developer opens a PR for a new type definition.
  DangerBotOSS analyzes the changes and comments:
  'It looks like you might have forgotten to export the `MyNewType` class. Consider adding `export class MyNewType { ... }` to `index.d.ts`.'

```

----------------------------------------

TITLE: Define and Export Function 'foo' in TypeScript
DESCRIPTION: This snippet demonstrates the definition and export of a simple function named 'foo' in TypeScript. It includes the function signature and body, typically found within a module or script.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMap-FileWithComments.sourcemap.txt#_snippet_5

LANGUAGE: typescript
CODE:
```
export function foo() {
}
```

----------------------------------------

TITLE: Valid Decorator Placement Before Export Abstract Class (Alternative)
DESCRIPTION: Another valid TypeScript example where a decorator precedes `export abstract class`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-exportModifier.2.errors.txt#_snippet_11

LANGUAGE: TypeScript
CODE:
```
export @dec abstract class C11 {}
```

----------------------------------------

TITLE: TypeScript Language Features: Class and Module Enhancements
DESCRIPTION: Details on new language constructs and improvements for classes and modules in TypeScript, including instantiation expressions and import assertions.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/Roadmap.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
TypeScript Language Features:

Instantiation Expressions:
  Introduces instantiation expressions, allowing the creation of generic types with specific type arguments at runtime, similar to `new MyClass<string>()`.

Control Flow and Class Initialization Checks for Computed Properties:
  Enhances control flow analysis for class initialization, particularly for computed property names, ensuring properties are initialized correctly.

Improved Inference Between Function-Initialized Properties and Methods:
  Better type inference when properties are initialized using functions or methods within a class.

Optional Variance Annotations:
  Allows optional variance annotations (`+` or `-`) on type parameters, providing more control over covariance and contravariance in generic types.

`resolution-mode` for `/// <reference types=""..."" />` Directives:
  Adds a `resolution-mode` attribute to reference directives, controlling how type packages are resolved.

`resolution-mode` for `import type`:
  Extends `resolution-mode` to `import type` statements, offering finer control over type import resolution.

Allow `typeof` on `#private` Fields:
  Enables the use of the `typeof` operator on private class fields (`#private`), providing type information about these members.

Import Assertions:
  Introduces import assertions, a syntax for asserting the type of an imported module (e.g., JSON, WebAssembly), improving module loading and type safety.
```

----------------------------------------

TITLE: Importing Types and Values in JavaScript (main.js)
DESCRIPTION: Shows how to import types (classes, functions) and values from a JavaScript module using JSDoc annotations in a JavaScript file. It demonstrates importing specific exported members and their types.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/moduleExportAssignment7.errors.txt#_snippet_1

LANGUAGE: javascript
CODE:
```
/**
 * @param {import(""./mod"").Thing} a
 * @param {import(""./mod"").AnotherThing} b
 * @param {import(""./mod"").foo} c
 * @param {import(""./mod"").qux} d
 * @param {import(""./mod"").baz} e
 * @param {import(""./mod"").buz} f
 * @param {import(""./mod"").literal} g
 */
function jstypes(a, b, c, d, e, f, g) {
    return a.x + b.y + c() + d() + e() + f() + g.length
}

/**
 * @param {typeof import(""./mod"").Thing} a
 * @param {typeof import(""./mod"").AnotherThing} b
 * @param {typeof import(""./mod"").foo} c
 * @param {typeof import(""./mod"").qux} d
 * @param {typeof import(""./mod"").baz} e
 * @param {typeof import(""./mod"").buz} f
 * @param {typeof import(""./mod"").literal} g
 */
function jsvalues(a, b, c, d, e, f, g) {
    return a.length + b.length + c() + d() + e() + f() + g.length
}
```

----------------------------------------

TITLE: TypeScript Console Log Example
DESCRIPTION: A simple example showing how to log a variable, `numberA3`, to the console using `console.log()`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMapValidationDestructuringForOfArrayBindingPattern.sourcemap.txt#_snippet_53

LANGUAGE: typescript
CODE:
```
console.log(numberA3);
```

----------------------------------------

TITLE: TypeScript: package.json Configuration
DESCRIPTION: The package.json file provides context for the TypeScript examples, defining the project's name, version, and module type. The 'type': 'module' setting is relevant for how Node.js interprets the files.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/nodeModulesResolveJsonModule(module=node16).errors.txt#_snippet_3

LANGUAGE: json
CODE:
```
{
    ""name"": ""pkg"",
    ""version"": ""0.0.1"",
    ""type"": ""module"",
    ""default"": ""misedirection""
}
```

----------------------------------------

TITLE: Basic TypeScript Syntax and Module Referencing
DESCRIPTION: This snippet demonstrates fundamental TypeScript syntax, including variable declarations, class definitions with properties, and function definitions. It also shows how to use module references (`/// <reference path='...'/>`) to include code from other files, illustrating basic project structure.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/project/sourcerootUrlSimpleSpecifyOutputFile/node/sourcerootUrlSimpleSpecifyOutputFile.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
==== m1.ts ====
    var m1_a1 = 10;
    class m1_c1 {
        public m1_c1_p1: number;
    }
    
    var m1_instance1 = new m1_c1();
    function m1_f1() {
        return m1_instance1;
    }
```

LANGUAGE: typescript
CODE:
```
==== test.ts ====
    /// <reference path='m1.ts'/>
    var a1 = 10;
    class c1 {
        public p1: number;
    }
    
    var instance1 = new c1();
    function f1() {
        return instance1;
    }
```

----------------------------------------

TITLE: Example JavaScript File (b.js.map)
DESCRIPTION: An example file named 'b.js.map' which, despite its extension, contains JavaScript code. This is used to demonstrate the unsupported extension error.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/jsFileCompilationWithMapFileAsJsWithOutDir.errors.txt#_snippet_2

LANGUAGE: javascript
CODE:
```
function foo() {
}

```

----------------------------------------

TITLE: TypeScript 3.8: Removed disableIncrementalParsing API
DESCRIPTION: Notes the removal of the `disableIncrementalParsing` property from the TypeScript compiler API in version 3.8. This property was untested and found to be unused by the community.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/API-Breaking-Changes.md#_snippet_15

LANGUAGE: APIDOC
CODE:
```
TypeScript 3.8 API Changes:

- Removal of `disableIncrementalParsing`:
  The mutable property `disableIncrementalParsing` has been removed from the TypeScript compiler API. Incremental parsing can no longer be disabled.
```

----------------------------------------

TITLE: TypeScript: generateDeclFile Utility
DESCRIPTION: Generates a .d.ts file for the given code. This utility function configures the compiler to generate declaration files, adds the source code as a unit, performs type checking, and emits the declaration file. It supports optional unit naming, compilation contexts for pre/post processing, and file references.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserharness.errors.txt#_snippet_37

LANGUAGE: APIDOC
CODE:
```
export function generateDeclFile(code: string, verifyNoDeclFile: boolean, unitName?: string, compilationContext?: Harness.Compiler.CompilationContext, references?: TypeScript.IFileReference[]): string

  Generates a .d.ts file for the given code.

  Parameters:
    - code: The TypeScript code string to process.
    - verifyNoDeclFile: A boolean indicating whether to verify that no declaration file is generated (true) or to expect one (false).
    - unitName: Optional. The name to assign to the code unit (defaults to '0.ts').
    - compilationContext: Optional. A set of functions to run before and after compilation, e.g., for adding dependencies.
    - references: Optional. An array of TypeScript file references used by the code.

  Returns:
    The content of the generated .d.ts file as a string, or null if no declaration file is generated.

  Usage Example:
    const tsCode = ""export function greet(name: string): string { return 'Hello, ' + name; }"";
    const declFileContent = generateDeclFile(tsCode, false, 'myModule.ts');
    console.log(declFileContent);
    // Expected output: ""export declare function greet(name: string): string;""

  Internal Logic:
    - Resets compiler state.
    - Enables `generateDeclarationFiles` compiler setting.
    - Sets `outputOption` and `ioHost` for capturing output.
    - Executes `preCompile` hook if provided.
    - Adds the code using `addUnit`.
    - Performs `compiler.reTypeCheck()`.
    - Parses emit options to capture file output.
    - Calls `compiler.emitDeclarations()` to generate the .d.ts file.
    - Iterates through outputs to find and return the .d.ts file content.
```

----------------------------------------

TITLE: Valid Decorator Placement Before Export Class (Alternative)
DESCRIPTION: Another example of valid TypeScript syntax where a decorator is applied before the `export class` declaration.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/esDecorators-classDeclaration-exportModifier.2.errors.txt#_snippet_4

LANGUAGE: TypeScript
CODE:
```
export @dec class C4 {}
```

----------------------------------------

TITLE: Underscore Mixin and UniqueId
DESCRIPTION: Shows how to extend Underscore.js with custom functions using `_.mixin` and how to generate unique IDs for elements with `_.uniqueId`.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_16

LANGUAGE: JavaScript
CODE:
```
_.mixin({
    capitalize: function (string) {
        return string.charAt(0).toUpperCase() + string.substring(1).toLowerCase();
    }
});
(<any>_(""fabio"")).capitalize();

_.uniqueId('contact_');
```

----------------------------------------

TITLE: TypeScript Base Class and Function
DESCRIPTION: Defines a base class named 'base' and a decorator function 'foo' in TypeScript. This file serves as a foundational component for other code examples.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/decoratorOnClassConstructor2.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
export class base { }
export function foo(target: Object, propertyKey: string | symbol, parameterIndex: number) { }
```

----------------------------------------

TITLE: Collection Finding Utilities (find, detect)
DESCRIPTION: Locates the first element in a collection (array or dictionary) that satisfies a provided testing function. Returns the element if found, otherwise undefined.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_37

LANGUAGE: APIDOC
CODE:
```
find<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
find<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;

detect<T>(list: T[], iterator: Iterator_<T, boolean>, context?: any): T;
detect<T>(list: Dictionary<T>, iterator: Iterator_<T, boolean>, context?: any): T;

// Iterator_<T, boolean> type definition (assumed):
// type Iterator_<T, boolean> = (value: T, index: number, collection: any) => boolean;
```

----------------------------------------

TITLE: TypeScript: Unexpected Keyword and Missing Return in Get Accessor
DESCRIPTION: This snippet illustrates a TypeScript compilation error (TS1434) for an unexpected keyword or identifier, and another error (TS2378) indicating that a 'get' accessor must return a value. It shows a class with a static 'get' accessor that is incorrectly defined and lacks a return statement.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserMemberAccessorDeclaration8.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
class C {
    static static get Foo() { }
           ~~~~~~
!!! error TS1434: Unexpected keyword or identifier.
                      ~~~
!!! error TS2378: A 'get' accessor must return a value.
}
```

----------------------------------------

TITLE: Underscore Filtering and Searching Functions
DESCRIPTION: Illustrates Underscore.js functions for finding elements within collections based on conditions. Covers find, filter, where, reject, all, any, and contains.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_1

LANGUAGE: TypeScript
CODE:
```
/// <reference path=""underscoreTest1_underscore.ts"" />

var even = _.find([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);

var evens = _.filter([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);

var listOfPlays = [{ title: ""Cymbeline"", author: ""Shakespeare"", year: 1611 }, { title: ""The Tempest"", author: ""Shakespeare"", year: 1611 }, { title: ""Other"", author: ""Not Shakespeare"", year: 2012 }];
_.where(listOfPlays, { author: ""Shakespeare"", year: 1611 });

var odds = _.reject([1, 2, 3, 4, 5, 6], (num) => num % 2 == 0);

_.all([true, 1, null, 'yes'], _.identity);

_.any([null, 0, 'yes', false]);

_.contains([1, 2, 3], 3);
```

----------------------------------------

TITLE: Collection Membership and Existence Checks (every, all, some, any, contains, include)
DESCRIPTION: Tests whether all or any elements in a collection pass a test, or if a specific value exists within the collection. Supports arrays and dictionaries.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_40

LANGUAGE: APIDOC
CODE:
```
every<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
every<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;

all<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
all<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;

some<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
some<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;

any<T>(list: T[], iterator?: Iterator_<T, boolean>, context?: any): boolean;
any<T>(list: Dictionary<T>, iterator?: Iterator_<T, boolean>, context?: any): boolean;

contains<T>(list: T[], value: T): boolean;
contains<T>(list: Dictionary<T>, value: T): boolean;

include<T>(list: T[], value: T): boolean;
include<T>(list: Dictionary<T>, value: T): boolean;

// Iterator_<T, boolean> type definition (assumed):
// type Iterator_<T, boolean> = (value: T, index: number, collection: any) => boolean;
```

----------------------------------------

TITLE: TypeScript Error TS2378: Get Accessor Must Return Value
DESCRIPTION: This snippet illustrates the TypeScript error TS2378. It occurs when a 'get' accessor within a class is defined without a return statement, violating the requirement that all 'get' accessors must return a value of the appropriate type. To resolve this, ensure a 'return' statement is present in the accessor's body.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/parserMemberAccessorDeclaration2.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
class C {
  get ""b""() { }
      ~~~
!!! error TS2378: A 'get' accessor must return a value.
}

// Corrected version:
class D {
  get ""b""(): number {
    return 0;
  }
}
```

----------------------------------------

TITLE: TypeScript Class Transitivity Error Example
DESCRIPTION: This snippet demonstrates a TypeScript error scenario where subclassing is not transitive due to modifications of protected members. It shows how adding optional parameters to a protected method in a subclass can lead to type incompatibilities when assigning instances between related classes. The example highlights errors TS2322 (Type incompatibility) and TS2445 (Protected member access).
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/derivedClassTransitivity4.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
// subclassing is not transitive when you can remove required parameters and add optional parameters on protected members

class C {
    protected foo(x: number) { }
}

class D extends C {
    protected foo() { } // ok to drop parameters
}

class E extends D {
    public foo(x?: string) { } // ok to add optional parameters
}

var c: C;
var d: D;
var e: E;
c = e;

var r = c.foo(1);
var r2 = e.foo('');
```

LANGUAGE: typescript
CODE:
```
derivedClassTransitivity4.ts(18,1): error TS2322: Type 'E' is not assignable to type 'C'.
  Types of property 'foo' are incompatible.
    Type '(x?: string) => void' is not assignable to type '(x: number) => void'.
      Types of parameters 'x' and 'x' are incompatible.
        Type 'number' is not assignable to type 'string'.
derivedClassTransitivity4.ts(19,11): error TS2445: Property 'foo' is protected and only accessible within class 'C' and its subclasses.
```

----------------------------------------

TITLE: Map TypeScript to JavaScript with Source Maps
DESCRIPTION: This snippet shows a simple TypeScript interface and variable declaration, along with the generated JavaScript and source map information. It highlights how source maps enable debugging by linking compiled code back to its original source.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/sourceMap-InterfacePrecedingVariableDeclaration1.sourcemap.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
interface I {}

var x = 0;
```

LANGUAGE: JavaScript
CODE:
```
var x = 0;
//# sourceMappingURL=sourceMap-InterfacePrecedingVariableDeclaration1.js.map
```

LANGUAGE: SourceMap
CODE:
```
{
  ""version"": 3,
  ""file"": ""sourceMap-InterfacePrecedingVariableDeclaration1.js"",
  ""sourceRoot"": """",
  ""sources"": [
    ""sourceMap-InterfacePrecedingVariableDeclaration1.ts""
  ],
  ""names"": [
    ""x""
  ],
  ""mappings"": ""AAAA,OAAO,CAAC;AACP,IAAI,CAAC,GAAG,CAAC,CAAC""
}
```

----------------------------------------

TITLE: TypeScript Module Import and Property Access
DESCRIPTION: Demonstrates importing a module using 'require' and accessing properties, highlighting potential issues with default exports and type mismatches.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowSyntheticDefaultImports10.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
import Foo = require(""./b"");
Foo.default.bar();
    Foo.default.default.foo();
```

----------------------------------------

TITLE: TypeScript @ts-ignore Usage and Type Error Suppression
DESCRIPTION: This snippet illustrates the use of the ""@ts-ignore"" comment in TypeScript to bypass type checking. It shows examples with both valid and invalid type assignments, demonstrating how ""@ts-ignore"" can prevent specific type errors from being reported. The examples cover commented and plain ""@ts-ignore"" directives.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/ts-ignore.errors.txt#_snippet_0

LANGUAGE: typescript
CODE:
```
// @ts-ignore with additional commenting
    var invalidCommentedFancy: number = 'nope';
    
    // @ts-ignore with additional commenting
    var validCommentedFancy: string = 'nope';
    
    // @ts-ignore
    var invalidCommentedPlain: number = 'nope';
    
    // @ts-ignore
    var validCommentedPlain: string = 'nope';
    
    var invalidPlain: number = 'nope';
        
    
    var validPlain: string = 'nope';
    
    // @ts-ignore: with additional commenting
    var invalidCommentedFancy: number = 'nope';
    
    // @ts-ignore: with additional commenting
    var validCommentedFancy: string = 'nope';
    
```

----------------------------------------

TITLE: TypeScript Overloading with Different Parameter Types
DESCRIPTION: Demonstrates implementing function overloads for different parameter types, such as string and number. It shows how to define multiple signatures for the same function name and provide a single implementation that handles all cases.
SOURCE: https://github.com/microsoft/typescript/blob/main/__wiki__/FAQ.md#_snippet_65

LANGUAGE: ts
CODE:
```
function compare(a: string, b: string): void;
function compare(a: number, b: number): void;
function compare(a: string|number, b: string|number): void {
  // Just an implementation and not visible to callers
}

compare(1,2) // OK
compare(""s"", ""l"") // OK
compare (1, ""l"") // Error.
```

----------------------------------------

TITLE: Declare Variable with Function Type in TypeScript
DESCRIPTION: Demonstrates declaring a variable with a function type that returns an array of 'Base' objects. Includes examples with anonymous and named functions.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/generatedContextualTyping.errors.txt#_snippet_63

LANGUAGE: typescript
CODE:
```
var x314: { (): Base[]; } = true ? function named() { return [d1, d2] } : undefined;
function x324(n: { (): Base[]; }) { }; x324(() => [d1, d2]);
function x325(n: { (): Base[]; }) { }; x325(function() { return [d1, d2] });
function x326(n: { (): Base[]; }) { }; x326(function named() { return [d1, d2] });
var x336 = (n: { (): Base[]; }) => n; x336(() => [d1, d2]);
var x337 = (n: { (): Base[]; }) => n; x337(function() { return [d1, d2] });
var x338 = (n: { (): Base[]; }) => n; x338(function named() { return [d1, d2] });
var x348 = function(n: { (): Base[]; }) { }; x348(() => [d1, d2]);
var x349 = function(n: { (): Base[]; }) { }; x349(function() { return [d1, d2] });
var x350 = function(n: { (): Base[]; }) { }; x350(function named() { return [d1, d2] });
```

----------------------------------------

TITLE: Snabbdomy JSX with Missing Scope
DESCRIPTION: This example shows Snabbdomy JSX usage where the 'jsx' function is not in scope, leading to a TypeScript error (TS2874). It imports nothing from the renderer.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/inlineJsxAndJsxFragPragma.errors.txt#_snippet_6

LANGUAGE: typescript
CODE:
```
/* @jsx jsx */
/* @jsxfrag null */
import {} from ""./renderer"";
<></>
    ~~
!!! error TS2874: This JSX tag requires 'jsx' to be in scope, but it could not be found.
```

----------------------------------------

TITLE: TypeScript Rest Parameter Behavior and Errors
DESCRIPTION: This snippet illustrates TypeScript's handling of rest parameters in function definitions. It shows how rest parameters interact with required and optional parameters, highlighting compiler errors related to missing arguments when rest parameters are present. The examples demonstrate expected behavior and potential pitfalls.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/restParamsWithNonRestParams.errors.txt#_snippet_0

LANGUAGE: TypeScript
CODE:
```
function foo(...b:number[]){} 
foo(); // ok

function foo2(a:string, ...b:number[]){} 
foo2(); // should be an error

// Error: Expected at least 1 arguments, but got 0.
// Related: An argument for 'a' was not provided.

function foo3(a?:string, ...b:number[]){} 
foo3(); // error but shouldn't be
```

----------------------------------------

TITLE: TypeScript Type Definition
DESCRIPTION: A simple TypeScript type definition for 'X' which is used in the accompanying JavaScript example. This file defines the structure that the JavaScript code attempts to reference.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/importDeferJsdoc.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export type X = 1;
```

----------------------------------------

TITLE: TypeScript Interface and Import Usage
DESCRIPTION: Shows how to define a TypeScript interface, import a default export from another module, and use the imported value for type annotation. This illustrates module interoperability.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/allowImportClausesToMergeWithTypes.errors.txt#_snippet_1

LANGUAGE: typescript
CODE:
```
export default interface zzz {
    x: string;
}

import zzz from ""./b"";

const x: zzz = { x: """" };
zzz;

export { zzz as default };
```

----------------------------------------

TITLE: TypeScript Generic Map Function
DESCRIPTION: Shows a generic `map` function that applies a transformation to each element of an array. Includes an example using `identityStr` for string arrays.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/genericFunctionInference1.errors.txt#_snippet_6

LANGUAGE: TypeScript
CODE:
```
const map = <T, U>(transform: (t: T) => U) =>
    (arr: T[]) => arr.map(transform)

const identityStr = (t: string) => t;

const arr: string[] = map(identityStr)(['a']);
const arr1: string[] = map(identity)(['a']);
```

----------------------------------------

TITLE: Collection Sorting and Grouping Utilities (sortBy, groupBy, countBy)
DESCRIPTION: Sorts elements in a collection based on an iterator or property, groups elements by a criterion, or counts occurrences based on a criterion. Supports arrays and dictionaries.
SOURCE: https://github.com/microsoft/typescript/blob/main/tests/baselines/reference/underscoreTest1.errors.txt#_snippet_43

LANGUAGE: APIDOC
CODE:
```
sortBy<T>(list: T[], iterator: Iterator_<T, any>, context?: any): T[];
sortBy<T>(list: Dictionary<T>, iterator: Iterator_<T, any>, context?: any): T[];
sortBy<T>(list: T[], propertyName: string): T[];
sortBy<T>(list: Dictionary<T>, propertyName: string): T[];

groupBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
groupBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<T[]>;
groupBy<T>(list: T[], propertyName: string): Dictionary<T[]>;
groupBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<T[]>;

countBy<T>(list: T[], iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
countBy<T>(list: Dictionary<T>, iterator?: Iterator_<T, any>, context?: any): Dictionary<number>;
countBy<T>(list: T[], propertyName: string): Dictionary<number>;
countBy<T>(list: Dictionary<T>, propertyName: string): Dictionary<number>;

// Iterator_<T, any> type definition (assumed):
// type Iterator_<T, any> = (value: T, index: number, collection: any) => any;
```","typescript",""