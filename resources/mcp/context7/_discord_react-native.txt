"react-native","TITLE: Enable Metro Access for Physical Android Device
DESCRIPTION: Command to ensure a physical Android device can access the Metro server by reversing TCP ports, necessary for development with a device.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_7

LANGUAGE: sh
CODE:
```
adb reverse tcp:8081 tcp:8081
```

----------------------------------------

TITLE: Configure ESLint to Use @react-native Plugin
DESCRIPTION: This JSON snippet demonstrates how to add `@react-native` to the `plugins` array within your ESLint configuration file (e.g., `.eslintrc` or `package.json`). This step activates the rules provided by the plugin for your project.
SOURCE: https://github.com/discord/react-native/blob/master/packages/eslint-plugin-react-native/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    ""plugins"": [""@react-native""]
}
```

----------------------------------------

TITLE: React Native Scheduler Integration
DESCRIPTION: Explains how the React Native Scheduler integrates with the event loop for registering reporters and scheduling specific work related to rendering updates.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
Scheduler:
  Purpose: Manages work scheduling for React.
  IntegrationWithEventLoop:
    - Registers reporters (e.g., for `PerformanceObserver`).
    - Schedules specific work to be done as part of the rendering updates, ensuring it aligns with the event loop's atomic UI update cycle.
```

----------------------------------------

TITLE: Compare React Native App Schemas for Compatibility
DESCRIPTION: This JavaScript script demonstrates how to use the @react-native/compatibility-check package to compare two React Native app schemas. It parses current and previous schema files, then uses compareSchemas to determine if changes are compatible, reporting the status and any errors.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_14

LANGUAGE: javascript
CODE:
```
import {compareSchemas} from '@react-native/compatibility-check';
const util = require('util');

async function run(argv: Argv, STDERR: string) {
  const debug = (log: mixed) => {
    argv.debug &&
      console.info(util.inspect(log, {showHidden: false, depth: null}));
  };

  const currentSchema =
    JSON.parse(/*you'll read the file generated by codegen wherever it is in your app*/);
  const previousSchema =
    JSON.parse(/*you'll read the schema file that you persisted from when your native app was built*/);

  const safetyResult = compareSchemas(currentSchema, previousSchema);

  const summary = safetyResult.getSummary();
  switch (summary.status) {
    case 'ok':
      debug('No changes in boundary');
      console.log(JSON.stringify(summary));
      break;
    case 'patchable':
      debug('Changes in boundary, but are compatible');
      debug(result.getDebugInfo());
      console.log(JSON.stringify(summary));
      break;
    default:
      debug(result.getDebugInfo());
      console.error(JSON.stringify(result.getErrors()));
      throw new Error(`Incompatible changes in boundary`);
  }
}
```

----------------------------------------

TITLE: React Native Event Loop Processing Model
DESCRIPTION: Describes the four-step atomic UI update cycle of the React Native event loop, aligning with Web standards while leveraging React Native's threading model. Each iteration represents an atomic UI update.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
EventLoopTick:
  1. Select next task:
    - Criteria: Expired tasks first, then by priority and scheduling order.
    - Mechanism: Relies on `RuntimeScheduler`.
    - Concept: Similar to Web's task queues (e.g., event queue).
  2. Execute selected task:
    - Action: Call JavaScript function or C++ callback associated with the task.
  3. Execute all scheduled microtasks:
    - Action: Drain the microtask queue, executing all microtasks in order.
    - Behavior: Microtasks can schedule additional microtasks (potential infinite loop, same as Web).
  4. Update the rendering:
    - Action: Check if previous work produced rendering updates (React commits, view commands).
    - Notification: Notify host platform to apply necessary mutations to reach the new state.
    - Future: Could extend to run resize observations, animation frame callbacks.
```

----------------------------------------

TITLE: React Native Event Loop UI Update Atomicity Example
DESCRIPTION: This JavaScript code demonstrates the atomic nature of UI updates within the React Native event loop. It illustrates how state updates triggered by an event handler and within a `useLayoutEffect` are batched and processed together in microtasks, ensuring that all UI changes are flushed to the host platform only at the end of the event loop tick, preventing partial UI renders.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
function App(props) {
  const [showContent, setShowContent] = useState(false);

  return (
    <>
      <Header
        onPressButton={event => {
          // A task executes all the event handlers.
          // The state update is processed in a microtask.
          setShowContent(true);
        }}
      />
      {showContent ? <Content /> : null}
    </>
  );
}

function Content(props) {
  const [width, setWidth] = useState(0);

  // Executed synchronously as part of the commit phase, in the microtask.
  useLayoutEffect(() => {
    // This state update is processed synchronously in the same microtask.
    // UI updates are still not flushed to the host platform until the end
    // of the event loop tick, so the user never saw this changed widths.
    setWidth(ref.getBoundingClientRect().width);
  }, []);

  return (
    <>
      <SomeView ref={ref} />
      <OtherComponent width={width} />
    </>
  );
}
```

----------------------------------------

TITLE: Mark Thread for Runtime Shadow Node Reference Updates
DESCRIPTION: Describes how to enable Runtime Shadow Node Reference Updates (RSNRU) for a specific thread. Calling this function from a thread marks it for allowing RSNRU, unless the global feature flag `updateRuntimeShadowNodeReferencesOnCommit` is enabled, which overrides this setting and propagates updates from any thread.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/core/__docs__/RSNRU.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
ShadowNode:
  setUseRuntimeShadowNodeReferenceUpdateOnThread(threadId: ThreadId): void
    threadId: The identifier of the thread to enable RSNRU for. This function should be called from the thread itself.
```

----------------------------------------

TITLE: Apply Dark Mode Background with CSS Media Query
DESCRIPTION: This CSS media query applies a dark background color (rgb(41 42 45)) to the body element when the user's system settings indicate a preference for a dark color scheme. This ensures the application's appearance adapts to user preferences, improving readability and user comfort in low-light environments.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/device_mode_emulation_frame.html#_snippet_0

LANGUAGE: CSS
CODE:
```
@media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Install React Native Project Dependencies with Yarn
DESCRIPTION: This command installs all necessary dependencies for the React Native project using Yarn. It is a prerequisite step and only needs to be executed once from the React Native root folder before running any tests.
SOURCE: https://github.com/discord/react-native/blob/master/packages/normalize-color/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn
```

----------------------------------------

TITLE: Install project dependencies from React Native root
DESCRIPTION: This command installs all necessary dependencies for the React Native project from its root folder using Yarn. It is typically a one-time setup step after cloning the repository.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-codegen/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
yarn
```

----------------------------------------

TITLE: React Native CLI: Start Development Server Command
DESCRIPTION: This snippet shows the basic command to start the React Native development server using the `@react-native-community/cli` plugin. It initiates the local server for bundling and serving JavaScript code to connected devices or emulators.
SOURCE: https://github.com/discord/react-native/blob/master/packages/community-cli-plugin/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npx @react-native-community/cli start [options]
```

----------------------------------------

TITLE: React Native CLI: Start Command Options Reference
DESCRIPTION: This section details the available command-line options for the `start` command of the React Native CLI. It includes parameters for configuring the server port, host, project root, watch folders, asset plugins, source extensions, worker limits, custom transformers, cache management, logging, HTTPS, SSL certificates, and CLI configuration.
SOURCE: https://github.com/discord/react-native/blob/master/packages/community-cli-plugin/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
start command options:
--port <number>: Set the server port.
--host <string>: Set the server host.
--projectRoot <path>: Set the path to the project root.
--watchFolders <list>: Specify additional folders to be added to the watch list.
--assetPlugins <list>: Specify additional asset plugins.
--sourceExts <list>: Specify additional source extensions to bundle.
--max-workers <number>: Set the maximum number of workers the worker-pool will spawn for transforming files. Defaults to the number of the cores available on your machine.
--transformer <string>: Specify a custom transformer.
--reset-cache: Remove cached files.
--custom-log-reporter-path <string>: Specify a module path exporting a replacement for `TerminalReporter`.
--https: Enable HTTPS connections.
--key <path>: Specify path to a custom SSL key.
--cert <path>: Specify path to a custom SSL cert.
--config <string>: Path to the CLI configuration file.
--no-interactive: Disable interactive mode.
--client-logs: [Deprecated] Enable plain text JavaScript log streaming for all connected apps.
```

----------------------------------------

TITLE: Using NewAppScreen Component in React Native
DESCRIPTION: This snippet demonstrates how to import and render the `NewAppScreen` component within a React Native functional component.
SOURCE: https://github.com/discord/react-native/blob/master/packages/new-app-screen/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
import { NewAppScreen } from '@react-native/new-app-screen';

function MyAppOrTemplate() {
  ...

  return <NewAppScreen />;
}
```

----------------------------------------

TITLE: queueMicrotask API
DESCRIPTION: API for scheduling microtasks to be executed within the event loop's microtask execution step, ensuring they run after the current task but before rendering updates.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
queueMicrotask(callback: Function): void
  callback: The function to be executed as a microtask.
  Purpose: Schedules a microtask to be run in the current event loop tick, after the current task completes but before rendering updates.
  Relationship: Part of the event loop's microtask execution step.
```

----------------------------------------

TITLE: Conditionally calling an optional Native Module method
DESCRIPTION: Example demonstrating how to safely call an optional native module method (`logError`) by checking for its existence before invocation. This prevents crashes on older native builds that do not expose the method.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_10

LANGUAGE: javascript
CODE:
```
if (NativeAnalytics.logError) {
  NativeAnalytics.logError('Oh No! We hit a crash');
}
```

----------------------------------------

TITLE: Basic Fantom Test Structure with @react-native/fantom
DESCRIPTION: Illustrates the high-level structure of a Fantom test, similar to Jest unit tests. It shows importing the `@react-native/fantom` package, defining a describe block, an it block, creating a root, and running a task to render components.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
import * as Fantom from '@react-native/fantom';

describe('My feature', () => {
  it('should do something interesting', () => {
    const root = Fantom.createRoot();

    Fantom.runTask(() => {
      root.render(/* ... */);
    });

    /* some checks */
  });
});
```

----------------------------------------

TITLE: Access React Native Feature Flags
DESCRIPTION: Demonstrates how to access common feature flags using the `ReactNativeFeatureFlags` interface in C++/Objective-C, Kotlin, and JavaScript. JS-only flags are accessible only from JavaScript. Accessing feature flags is optimized for speed due to caching at every layer.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/src/private/featureflags/__docs__/README.md#_snippet_2

LANGUAGE: c++
CODE:
```
#include <react/featureflags/ReactNativeFeatureFlags.h>

if (ReactNativeFeatureFlags::enableNativeBehavior()) {
  // do something
}
```

LANGUAGE: kotlin
CODE:
```
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags

fun someMethod() {
  if (ReactNativeFeatureFlags.enableNativeBehavior()) {
    // do something
  }
}
```

LANGUAGE: javascript
CODE:
```
import * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';

if (ReactNativeFeatureFlags.enableNativeBehavior()) {
  // Native flag
}

if (ReactNativeFeatureFlags.enableJSBehavior()) {
  // JS-only flag
}
```

----------------------------------------

TITLE: Document React Native Dev Middleware HTTP Endpoints
DESCRIPTION: This API documentation outlines the HTTP endpoints exposed by `DevMiddlewareAPI.middleware`. These endpoints, compatible with `connect` middleware, provide functionalities like listing WebSocket targets, returning version metadata for Chrome DevTools, serving the debugger frontend, and opening the JavaScript debugger for specific targets. Parameters for opening the debugger include `device`, `target`, and a deprecated `appId`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/dev-middleware/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
DevMiddlewareAPI.middleware:
  GET /json/list, /json (CDP)
    Returns the list of available WebSocket targets for all connected React Native app sessions.
  GET /json/version (CDP)
    Returns version metadata used by Chrome DevTools.
  GET /debugger-frontend
    Subpaths of this endpoint are reserved to serve the JavaScript debugger frontend.
  POST /open-debugger
    Open the JavaScript debugger for a given CDP target.
    Query Parameters:
      device: An ID unique to a combination of device and app, stable across installs. Implemented by `getInspectorDeviceId` on each native platform.
      target: The target page ID as returned by `/json/list` for the current dev server session.
      appId (deprecated, legacy only): The application bundle identifier to match (non-unique across multiple connected devices). This param will only match legacy Hermes debugger targets.
```

----------------------------------------

TITLE: Clean Up Local E2E Test State
DESCRIPTION: Cleans up all file system and cache state, ensuring a fresh environment between local end-to-end tests. This command helps prevent test interference and ensures consistent results.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/release-testing/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
test-e2e-local-clean
```

----------------------------------------

TITLE: Making Native Module method optional for compatibility
DESCRIPTION: Modifying the `logError` method in the `Spec` interface to be optional (`logError?`). This ensures backward compatibility, as older native clients can still be used without crashing.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_9

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
  logError?: (message: string) => void;
}
```

----------------------------------------

TITLE: Apply Dark Mode Styling with CSS Media Query
DESCRIPTION: This CSS snippet uses the `@media (prefers-color-scheme: dark)` query to apply specific styles when the user's system is set to dark mode. It changes the background color of the body element to a dark grey, enhancing user experience in low-light environments.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/inspector.html#_snippet_0

LANGUAGE: CSS
CODE:
```
@media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Calling a newly added Native Module method
DESCRIPTION: Example of JavaScript code attempting to call the `logError` method. If executed on an older native client that does not have this method, it will result in a crash.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_2

LANGUAGE: javascript
CODE:
```
NativeAnalytics.logError('Oh No! We hit a crash')
```

----------------------------------------

TITLE: Install @react-native/eslint-plugin with Yarn
DESCRIPTION: This command installs the `@react-native/eslint-plugin` and `eslint` as development dependencies using Yarn. It's the first step to integrate the plugin into a React Native project, allowing you to use its specific linting rules.
SOURCE: https://github.com/discord/react-native/blob/master/packages/eslint-plugin-react-native/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
yarn add --dev eslint @react-native/eslint-plugin
```

----------------------------------------

TITLE: Install @react-native/babel-preset
DESCRIPTION: Commands to install the @react-native/babel-preset package as a development dependency using either npm or yarn.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-babel-preset/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
npm i @react-native/babel-preset --save-dev
```

LANGUAGE: sh
CODE:
```
yarn add -D @react-native/babel-preset
```

----------------------------------------

TITLE: Handling Enum Value Changes in React Native
DESCRIPTION: Similar to union types, changing an enum case requires careful handling to maintain compatibility. This can be achieved by introducing a new enum value or by ensuring the existing and new values are both supported.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_12

LANGUAGE: javascript
CODE:
```
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = 3,
  SYSTEM_ALSO = -1,
}
```

----------------------------------------

TITLE: JavaScript Web View Communication with React Native
DESCRIPTION: This JavaScript code snippet initializes a counter for messages received from React Native. It sets up an event listener to update the counter and display the message content when a message is received from React Native. Additionally, it adds a click listener to a button to send a 'Hello' message from the web view back to React Native.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/assets/messagingtest.html#_snippet_0

LANGUAGE: JavaScript
CODE:
```
var messagesReceivedFromReactNative = 0;
document.addEventListener('message', function(e) {
  messagesReceivedFromReactNative += 1;
  document.getElementsByTagName('p')[0].innerHTML = 'Messages received from React Native: ' + messagesReceivedFromReactNative;
  document.getElementsByTagName('p')[1].innerHTML = e.data;
});
document.getElementsByTagName('button')[0].addEventListener('click', function() {
  window.postMessage('""Hello"" from the web view');
});
```

----------------------------------------

TITLE: Install project dependencies for testing
DESCRIPTION: This command installs all necessary dependencies for the React Native project from its root folder. It only needs to be run once before executing any tests within the project.
SOURCE: https://github.com/discord/react-native/blob/master/packages/assets/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn
```

----------------------------------------

TITLE: React Native CLI: Bundle JavaScript Entry File Command
DESCRIPTION: This snippet shows the basic command to build a JavaScript bundle for a React Native application. It requires specifying the entry file and can include additional options for customization, such as platform targeting or minification settings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/community-cli-plugin/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
npx @react-native-community/cli bundle --entry-file <path> [options]
```

----------------------------------------

TITLE: Print React Native Feature Flags as JSON
DESCRIPTION: To consume feature flag data programmatically, this command prints the entire list of feature flags in a structured JSON format. This is useful for automated processing or integration with other tools that require machine-readable data.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/src/private/featureflags/__docs__/README.md#_snippet_5

LANGUAGE: shell
CODE:
```
yarn featureflags --print --json
```

----------------------------------------

TITLE: Install @react-native/gradle-plugin using Yarn
DESCRIPTION: Installs the @react-native/gradle-plugin package using Yarn. This plugin is essential for supporting React Native application development on Android.
SOURCE: https://github.com/discord/react-native/blob/master/packages/gradle-plugin/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add @react-native/gradle-plugin
```

----------------------------------------

TITLE: Integrate React Native Dev Middleware with Metro Server
DESCRIPTION: This JavaScript code demonstrates how to integrate `@react-native/dev-middleware` into a Metro-based development server. It shows using `createDevMiddleware` to obtain HTTP middleware and WebSocket endpoints, which are then passed to `Metro.runServer` for handling dev server responsibilities. This setup is essential for enabling core React Native debugging and dev actions.
SOURCE: https://github.com/discord/react-native/blob/master/packages/dev-middleware/README.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
import { createDevMiddleware } from '@react-native/dev-middleware';

function myDevServerImpl(args) {
  ...

  const {middleware, websocketEndpoints} = createDevMiddleware({
    projectRoot: metroConfig.projectRoot,
    serverBaseUrl: `http://${args.host}:${args.port}`,
    logger,
  });

  await Metro.runServer(metroConfig, {
    host: args.host,
    ...,
    unstable_extraMiddleware: [
      middleware,
      // Optionally extend with additional HTTP middleware
    ],
    websocketEndpoints: {
      ...websocketEndpoints,
      // Optionally extend with additional WebSocket endpoints
    },
  });
}
```

----------------------------------------

TITLE: Install @react-native/virtualized-lists with Yarn
DESCRIPTION: This snippet shows how to add the `@react-native/virtualized-lists` package to your project using Yarn. Yarn is a popular package manager for JavaScript projects, and users can substitute `npm` if preferred.
SOURCE: https://github.com/discord/react-native/blob/master/packages/virtualized-lists/README.md#_snippet_0

LANGUAGE: shell
CODE:
```
yarn add @react-native/virtualized-lists
```

----------------------------------------

TITLE: Override React Native Feature Flag Defaults
DESCRIPTION: Shows how to apply application-level overrides for feature flags. Overrides for common flags are defined in native code (C++/Objective-C, Kotlin), while JS-only flags are overridden in JavaScript. Overrides must be applied before any feature flag is accessed to ensure consistent behavior.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/src/private/featureflags/__docs__/README.md#_snippet_3

LANGUAGE: c++
CODE:
```
#include <react/featureflags/ReactNativeFeatureFlags.h>
#include <react/featureflags/ReactNativeFeatureFlagsDefaults.h>

class CustomReactNativeFeatureFlags : public ReactNativeFeatureFlagsDefaults {
 public:
  CustomReactNativeFeatureFlags();

  bool enableNativeBehavior() override {
    return true;
  }
}

ReactNativeFeatureFlags::override(std::make_unique<CustomReactNativeFeatureFlags>());
```

LANGUAGE: kotlin
CODE:
```
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlags
import com.facebook.react.internal.featureflags.ReactNativeFeatureFlagsDefaults

fun overrideFeatureFlags() {
  ReactNativeFeatureFlags.override(object : ReactNativeFeatureFlagsDefaults() {
    override fun useMicrotasks(): Boolean = true
  })
}
```

LANGUAGE: javascript
CODE:
```
import * as ReactNativeFeatureFlags from 'react-native/src/private/featureflags/ReactNativeFeatureFlags';

ReactNativeFeatureFlags.override({
  enableJSBehavior: () => true,
});
```

----------------------------------------

TITLE: Install ESLint Config for React Native with Yarn
DESCRIPTION: This command installs the `@react-native/eslint-config` package along with `eslint` and `prettier` as development dependencies using Yarn. Users can substitute `npm` for `yarn` if preferred.
SOURCE: https://github.com/discord/react-native/blob/master/packages/eslint-config-react-native/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev eslint prettier @react-native/eslint-config
```

----------------------------------------

TITLE: List React Native Feature Flags via CLI
DESCRIPTION: This command allows developers to print a human-readable table of all configured feature flags in the React Native project. It provides details such as description, purpose, and date added for each flag, along with a summary of flag counts.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/src/private/featureflags/__docs__/README.md#_snippet_4

LANGUAGE: shell
CODE:
```
yarn featureflags --print
```

LANGUAGE: text
CODE:
```
┌────────────────────────────────────────────────────────────┬───────────────────────────────────────────────────────────────────────────────────────────────────────────┬─────────┬──────────────┐
│ (index)                                                    │ Description                                                                                               │ Purpose │ Date added   │
├────────────────────────────────────────────────────────────┼───────────────────────────────────────────────────────────────────────────────────────────────────────────┼─────────┼──────────────┤
│ enableFabricLogs                                           │ 'This feature flag enables logs for Fabric.'                                                              │ '🔨'    │ undefined    │
│ jsOnlyTestFlag                                             │ 'JS-only flag for testing. Do NOT modify.'                                                                │ '🔨'    │ undefined    │
│ enableAccessToHostTreeInFabric                             │ 'Enables access to the host tree in Fabric using DOM-compatible APIs.'                                    │ '🚀'    │ undefined    │
│ enableBridgelessArchitecture                               │ 'Feature flag to enable the new bridgeless architecture. Note: Enabling this will force enable the fo...' │ '🚀'    │ undefined    │
│ useTurboModules                                            │ 'When enabled, NativeModules will be executed by using the TurboModule system'                            │ '🚀'    │ undefined    │
│ animatedShouldDebounceQueueFlush                           │ 'Enables an experimental flush-queue debouncing in Animated.js.'                                          │ '🧪'    │ '2024-02-05' │
│ useTurboModuleInterop                                      │ 'In Bridgeless mode, should legacy NativeModules use the TurboModule system?'                             │ '🧪'    │ '2024-07-28' │
└────────────────────────────────────────────────────────────┴───────────────────────────────────────────────────────────────────────────────────────────────────────────┴─────────┴──────────────┘
Summary
┌─────────────────┬────────┐
│ (index)         │ Values │
├─────────────────┼────────┤
│ Total           │ 55     │
│ Common          │ 43     │
│ JS Only         │ 12     │
│ Operational     │ 5      │
│ Release         │ 16     │
│ Experimentation │ 34     │
└─────────────────┴────────┘
```

----------------------------------------

TITLE: Define React Native Feature Flags Configuration
DESCRIPTION: Illustrates the structure of `ReactNativeFeatureFlags.config.js`, which is the source of truth for defining common and JS-only feature flags. Each flag includes a description and a default boolean value.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/src/private/featureflags/__docs__/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
module.exports = {
  common: {
    enableNativeBehavior: {
      description: 'Enable some behavior both in native and in JS.',
      defaultValue: false,
    },
  },
  jsOnly: {
    enableJSBehavior: {
      description: 'Enables some behavior in the JS layer.',
      defaultValue: false,
    },
  },
};
```

----------------------------------------

TITLE: Install React Native project dependencies for testing
DESCRIPTION: This command installs all necessary dependencies for the React Native project from its root folder, a prerequisite for running tests. It only needs to be run once.
SOURCE: https://github.com/discord/react-native/blob/master/packages/polyfills/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn
```

----------------------------------------

TITLE: Install React Native ESLint Plugin
DESCRIPTION: Installs the @react-native/eslint-plugin-specs package as a development dependency using Yarn. Users can substitute npm 3+ and npx if preferred.
SOURCE: https://github.com/discord/react-native/blob/master/packages/eslint-plugin-specs/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add --dev @react-native/eslint-plugin-specs
```

----------------------------------------

TITLE: Configure React Native Monorepo Package Build Options
DESCRIPTION: Illustrates how to opt a package into the monorepo build system by configuring `buildConfig` in `config.js`. This example shows enabling TypeScript definition emission (`emitTypeScriptDefs`) and setting the build target to `node` for a package like `dev-middleware`.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/build/README.md#_snippet_1

LANGUAGE: js
CODE:
```
const buildConfig /*: BuildConfig */ = {
  'packages': {
    'dev-middleware': {
      emitTypeScriptDefs: true,
      target: 'node',
    },
    ...
```

----------------------------------------

TITLE: Install React Native Compatibility Check Package
DESCRIPTION: This command installs the @react-native/compatibility-check package, which is used for verifying schema compatibility between different versions of a React Native application.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_13

LANGUAGE: bash
CODE:
```
yarn add @react-native/compatibility-check
```

----------------------------------------

TITLE: Execute React Native Monorepo Build Commands
DESCRIPTION: Demonstrates the `yarn build` commands available at the monorepo root to compile all packages, build a specific package (e.g., `dev-middleware`), or clean generated build artifacts. These commands are primarily used in CI workflows and for publishing.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/build/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
# Build all packages
yarn build

# Build a specific package
yarn build dev-middleware

# Clean build directories
yarn clean
```

----------------------------------------

TITLE: Configure ESLint to Extend React Native Config
DESCRIPTION: This JSON snippet shows how to extend the `@react-native` ESLint configuration in your project's `.eslintrc` file or `package.json`'s `eslintConfig` field. This applies the predefined React Native linting rules.
SOURCE: https://github.com/discord/react-native/blob/master/packages/eslint-config-react-native/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
    ""extends"": ""@react-native""
}
```

----------------------------------------

TITLE: Configure Babel with @react-native/babel-preset
DESCRIPTION: Example `babel.config.js` content to load the @react-native/babel-preset, enabling custom Babel configurations in React Native projects.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-babel-preset/README.md#_snippet_1

LANGUAGE: json
CODE:
```
{
  ""presets"": [""module:@react-native/babel-preset""]
}
```

----------------------------------------

TITLE: React and React Native Dependencies in package.json
DESCRIPTION: This snippet illustrates the typical `dependencies` section found in a `package.json` file for a React Native project, specifically showing the aligned versions of React and React Native for version 0.68.1. It highlights how these versions are synchronized within the project template.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/Libraries/Renderer/README.md#_snippet_0

LANGUAGE: JSON
CODE:
```
  ""dependencies"": {
    ""react"": ""17.0.2"",
    ""react-native"": ""0.68.1""
  }
```

----------------------------------------

TITLE: React Native CLI: Bundle Command Options Reference
DESCRIPTION: This section details the available command-line options for the `bundle` command of the React Native CLI. It includes parameters for the entry file, target platform, custom transformer, development mode, minification, output paths, encoding, resolver options, sourcemap generation, worker limits, asset destination, cache management, and CLI configuration.
SOURCE: https://github.com/discord/react-native/blob/master/packages/community-cli-plugin/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
bundle command options:
--entry-file <path>: Set the path to the root JavaScript entry file.
--platform <string>: Set the target platform (either ""android"" or ""ios""). Defaults to ""ios"".
--transformer <string>: Specify a custom transformer.
--dev [boolean]: If `false`, warnings are disabled and the bundle is minified. Defaults to `true`.
--minify [boolean]: Allows overriding whether bundle is minified. Defaults to `false` if `--dev` is set. Disabling minification can be useful for speeding up production builds for testing purposes.
--bundle-output <string>: Specify the path to store the resulting bundle.
--bundle-encoding <string>: Specify the encoding for writing the bundle (https://nodejs.org/api/buffer.html#buffer_buffer).
--resolver-option <string...>: Custom resolver options of the form key=value. URL-encoded. May be specified multiple times.
--sourcemap-output <string>: Specify the path to store the source map file for the resulting bundle.
--sourcemap-sources-root <string>: Set the root path for source map entries.
--sourcemap-use-absolute-path: Report `SourceMapURL` using its full path.
--max-workers <number>: Set the maximum number of workers the worker-pool will spawn for transforming files. Defaults to the number of the cores available on your machine.
--assets-dest <string>: Specify the directory path for storing assets referenced in the bundle.
--reset-cache: Remove cached files.
--read-global-cache: Attempt to fetch transformed JS code from the global cache, if configured. Defaults to `false`.
--config <string>: Path to the CLI configuration file.
```

----------------------------------------

TITLE: Clone React Native Repository and Install Dependencies
DESCRIPTION: Initial setup steps to clone the React Native repository and install its dependencies using yarn.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_0

LANGUAGE: sh
CODE:
```
git clone https://github.com/facebook/react-native.git
cd react-native
yarn install
```

----------------------------------------

TITLE: Install CocoaPods on Apple Silicon (iOS)
DESCRIPTION: Commands to install the `ffi` package and run `pod install` specifically for Mac laptops with Apple Silicon architecture to ensure compatibility.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_4

LANGUAGE: sh
CODE:
```
sudo arch -x86_64 gem install ffi
```

LANGUAGE: sh
CODE:
```
arch -x86_64 pod install
```

----------------------------------------

TITLE: Configure React Native C++ Module with CMake
DESCRIPTION: This CMake script defines the build rules for a native C++ module named 'nativecxxmoduleexample' for React Native. It sets C++20 as the standard, enables exceptions and RTTI, adds common compiler flags, includes source files, and links against React Native's core libraries like fbjni, jsi, and reactnative. It also conditionally links with 'react_codegen_AppSpecs' if available, which is typically generated by React Native's Codegen.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/NativeCxxModuleExample/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(
        -fexceptions
        -frtti
        -std=c++20
        -Wall
        -Wpedantic
        -DFOLLY_NO_CONFIG=1
        -DLOG_TAG=\""ReactNative\"")

file(GLOB nativecxxmoduleexample_SRC CONFIGURE_DEPENDS *.cpp)
add_library(nativecxxmoduleexample STATIC ${nativecxxmoduleexample_SRC})

target_include_directories(nativecxxmoduleexample PUBLIC .)

target_link_libraries(nativecxxmoduleexample
        fbjni
        jsi
        reactnative
)

# For Gradle Syncs (i.e. when you first open the project in Android Studio),
# the react_codegen_AppSpecs target is not existing yet as it's generated by
# Codegen. Therefore skip the linking with that library if it's missing in the
# CMake dependency Graph. It will be included anyway in the final build.
if (TARGET react_codegen_AppSpecs)
    target_include_directories(react_codegen_AppSpecs PUBLIC .)
    target_link_libraries(nativecxxmoduleexample react_codegen_AppSpecs)
endif ()
```

----------------------------------------

TITLE: Simulating Scroll Events and Asserting State with Fantom
DESCRIPTION: This JavaScript snippet demonstrates how to use `Fantom.scrollTo` to simulate a scroll event on a `ScrollView` element. It triggers an `onScroll` event and updates the shadow tree's content offset, allowing for assertions against the new `scrollTop` value.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
Fantom.scrollTo(scrollViewElement, {
  x: 0,
  y: 1,
});

expect(scrollViewElement.scrollTop).toBe(1);
```

----------------------------------------

TITLE: Configure CMake for React Native Android App Modules
DESCRIPTION: This CMake file defines the build configuration for 'appmodules', a dynamic library for a React Native Android application. It sets the minimum CMake version, includes React Native's application CMake utilities, and adds subdirectories for 'sampleturbomodule_build' and 'nativecxxmoduleexample_build'. Finally, it links these modules to the main project, 'appmodules'.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/android/app/src/main/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)

# Define the application dynamic library name here.
project(appmodules)

include(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)

add_subdirectory(${REACT_COMMON_DIR}/react/nativemodule/samples/platform/android/ sampleturbomodule_build)
add_subdirectory(${REACT_COMMON_DIR}/../../rn-tester/NativeCxxModuleExample/ nativecxxmoduleexample_build)

# RN Tester needs to link against the sample turbomobule
target_link_libraries(${CMAKE_PROJECT_NAME}
        sampleturbomodule)
# RN Tester needs to link against the NativeCxxModuleExample
target_link_libraries(${CMAKE_PROJECT_NAME}
        nativecxxmoduleexample)
```

----------------------------------------

TITLE: Install @react-native/assets-registry as a development dependency
DESCRIPTION: This command installs the @react-native/assets-registry package as a development dependency using Yarn. It is the recommended way to add the package to your React Native project for asset management.
SOURCE: https://github.com/discord/react-native/blob/master/packages/assets/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add --dev @react-native/assets-registry
```

----------------------------------------

TITLE: Configure Cross-Origin Resource Policy Header for Cross-Origin Embedding
DESCRIPTION: To prevent a resource from being blocked due to same-site usage policies and allow it to be embedded by any website, add this specific header to the resource's HTML response. This action explicitly grants permission for non-same-site resources to be loaded. It is crucial to understand that setting this header makes the resource embeddable by any site, which has security implications.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepCorpNotSameSite.md#_snippet_0

LANGUAGE: HTTP Header
CODE:
```
Cross-Origin-Resource-Policy: cross-origin
```

----------------------------------------

TITLE: RuntimeScheduler Class Overview
DESCRIPTION: The core C++ class responsible for implementing the React Native event loop, including task scheduling with priorities and processing tasks within the event loop. Specifically, `RuntimeScheduler_modern` is used in the new architecture.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
RuntimeScheduler:
  Purpose: Implements the React Native event loop and task scheduling.
  SpecificImplementation: `RuntimeScheduler_modern` (version used in the new architecture).
  Responsibilities:
    - Task scheduling (handles priorities).
    - Processing tasks within the event loop.
  Integration:
    - Used by React timing primitives for time measurements.
    - Reports long tasks and event timing to `PerformanceObserver`.
    - Integrates with the React Native DevTools tracing infrastructure.
```

----------------------------------------

TITLE: CSS Dark Mode Styling
DESCRIPTION: Applies a dark background color to the body element when the user's operating system is set to a dark color scheme. This is a common technique for implementing dark mode themes in web applications, improving user experience in low-light environments.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/devtools_app.html#_snippet_0

LANGUAGE: css
CODE:
```
@media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Get Help for Release Testing Commands
DESCRIPTION: Provides instructions on how to view arguments and options for release testing commands by running them with the `--help` flag. This is useful for understanding command-specific parameters.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/release-testing/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
node <command> --help
```

----------------------------------------

TITLE: Importing Animated Module in React Native
DESCRIPTION: This snippet demonstrates how to import the `Animated` module from the `react-native` library, which is essential for utilizing its animation functionalities in a React Native application.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/examples/AnimatedGratuitousApp/AnExSlides.md#_snippet_0

LANGUAGE: JavaScript
CODE:
```
var { Animated } = require('react-native');
```

----------------------------------------

TITLE: Attribution Reporting API: Header Mutual Exclusivity Rule
DESCRIPTION: This rule specifies that an HTTP response must not contain both web and OS-specific Attribution Reporting API headers. A response is limited to setting at most one of the listed headers to prevent conflicts and ensure proper attribution reporting.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arWebAndOsHeaders.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Attribution Reporting API Header Rule:
  HTTP responses must not contain both web and OS Attribution Reporting API headers.
  
  A response may set at most one of the following headers:
    - Attribution-Reporting-Register-OS-Source
    - Attribution-Reporting-Register-OS-Trigger
    - Attribution-Reporting-Register-Source
    - Attribution-Reporting-Register-Trigger
```

----------------------------------------

TITLE: Disable Fabric in RNTester Podfile (iOS)
DESCRIPTION: Modify the `fabric_enabled` flag in RNTester's Podfile to `false` when testing non-fabric components on iOS.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_1

LANGUAGE: ruby
CODE:
```
fabric_enabled = false
```

----------------------------------------

TITLE: Compatibility-check error: Added required properties
DESCRIPTION: Error message generated by the compatibility-check tool, indicating that new required properties (like `logError`) were added to a native module, which older native builds will not provide.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_3

LANGUAGE: text
CODE:
```
NativeAnalytics: Object added required properties, which native will not provide
  -- logError
```

----------------------------------------

TITLE: Configure Hermes Inspector Modern Library with CMake
DESCRIPTION: This CMake script defines the build process for the `hermes_inspector_modern` library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers source files, compiles the library as an object, applies React Native compile options, enables the debugger in Debug builds, sets include directories, and links necessary libraries like `hermes-engine`, `jsi`, and `reactnative`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/hermes/inspector-modern/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB hermesinspectormodern_SRC CONFIGURE_DEPENDS chrome/*.cpp)

add_library(hermes_inspector_modern
        OBJECT
        ${hermesinspectormodern_SRC})

target_compile_reactnative_options(hermes_inspector_modern PRIVATE)

if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                hermes_inspector_modern
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
endif()

target_include_directories(hermes_inspector_modern PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(hermes_inspector_modern
        hermes-engine::libhermes
        jsi
        reactnative)
```

----------------------------------------

TITLE: Configure CMake for React Native CxxReact Library
DESCRIPTION: This CMake script defines the build configuration for the `react_cxxreact` library. It sets the minimum required CMake version, enables verbose makefiles, includes common React Native CMake flags, gathers source files, creates an object library, specifies public include directories, links necessary third-party libraries (boost, folly, glog, jsi, etc.), and applies specific React Native and compiler options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/cxxreact/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_cxxreact_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_cxxreact OBJECT ${react_cxxreact_SRC})

target_include_directories(react_cxxreact PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_cxxreact
        boost
        callinvoker
        folly_runtime
        glog
        jsi
        jsinspector
        logger
        reactperflogger
        runtimeexecutor
        react_debug)

target_compile_reactnative_options(react_cxxreact PRIVATE ""ReactNative"")
target_compile_options(react_cxxreact PRIVATE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Define React Native Monorepo Package Source Structure
DESCRIPTION: Outlines the mandatory file layout for packages integrated into the `yarn build` setup. It specifies the `src/` directory for source files, the `index.js` wrapper, `index.flow.js` for Flow implementation, and the `package.json` with an `exports` field.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/build/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
packages/
  example-pkg/
    src/             # All source files
      index.js       # Entry point wrapper file (calls babel-register.js) (compiled away)
      index.flow.js  # Entry point implementation in Flow
      [other files]
    package.json     # Includes ""exports"" field, ideally only src/index.js
```

----------------------------------------

TITLE: Analytics Native Module - Initial Spec
DESCRIPTION: Initial interface definition for an Analytics Native Module, exposing a `log` method. This represents an older version of the native client's expected interface.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
}
```

----------------------------------------

TITLE: CMake Configuration for React Native Bridging Library
DESCRIPTION: This CMake script configures the build process for the `react_bridging` object library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers all `.cpp` source files, defines public include directories, links against `jsi`, `callinvoker`, and `react_timing` libraries, and applies React Native specific and pedantic compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/bridging/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_bridging_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_bridging OBJECT ${react_bridging_SRC})

target_include_directories(react_bridging PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_bridging jsi callinvoker react_timing)
target_compile_reactnative_options(react_bridging PRIVATE ""ReactNative"")
target_compile_options(react_bridging PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Fantom Layout Calculation and Inspection Example
DESCRIPTION: Demonstrates how Fantom allows layout calculation and inspection in tests, unlike Jest where `getBoundingClientRect` would need to be mocked. It shows creating a root, rendering a View, and asserting its dimensions.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_0

LANGUAGE: javascript
CODE:
```
const root = Fantom.createRoot({viewportWidth: 200, viewportHeight: 600});
let viewElement;

Fantom.runTask(() => {
  root.render(
    <View
      ref={node => {
        viewElement = node;
      }}
      style={{width: '50%', height: '10%'}}
    />,
  );
});

// Without Fantom, getBoundingClientRect would have to be mocked.
const boundingClientRect = viewElement.getBoundingClientRect();
expect(boundingClientRect.height).toBe(60);
expect(boundingClientRect.width).toBe(100);
```

----------------------------------------

TITLE: CMake Configuration for React Native Fabric JNI Library
DESCRIPTION: This CMake script outlines the build process for the `fabricjni` library. It starts by setting the minimum CMake version, includes utility scripts for SO merging and React Native flags, and then gathers all `.cpp` source files. The script defines `fabricjni` as an OBJECT library, sets its public include directory, and applies shared object merging. Crucially, it links `fabricjni` against a large number of React Native core, renderer, and utility libraries, such as `fbjni`, `folly_runtime`, `jsi`, and various `react_renderer_` components, ensuring all necessary dependencies are met. Finally, it applies specific React Native compilation options for 'Fabric'.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/fabric/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB fabricjni_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        fabricjni
        OBJECT
        ${fabricjni_SRCS}
)

target_include_directories(fabricjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_merge_so(fabricjni)

target_link_libraries(
        fabricjni
        fbjni
        folly_runtime
        glog
        jsi
        mapbufferjni
        react_codegen_rncore
        react_debug
        react_featureflags
        react_renderer_animations
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_css
        react_renderer_debug
        react_renderer_dom
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_runtimescheduler
        react_renderer_scheduler
        react_renderer_telemetry
        react_renderer_textlayoutmanager
        react_renderer_uimanager
        react_renderer_uimanager_consistency
        rrc_legacyviewmanagerinterop
        react_utils
        reactnativejni
        rrc_image
        rrc_modal
        rrc_progressbar
        rrc_root
        rrc_safeareaview
        rrc_scrollview
        rrc_switch
        rrc_text
        rrc_textinput
        rrc_unimplementedview
        rrc_view
        yoga
)

target_compile_reactnative_options(fabricjni PRIVATE ""Fabric"")
```

----------------------------------------

TITLE: Run RNTester on Android with JSC
DESCRIPTION: Commands to install Android dependencies with JSC and start the Metro server for RNTester, enabling the use of the JavaScriptCore engine.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_6

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
yarn install-android-jsc
yarn start
```

----------------------------------------

TITLE: Configure React Native Gradle Plugin Dependency
DESCRIPTION: This Gradle snippet demonstrates how to add the `react-native-gradle-plugin` as a classpath dependency in the `buildscript` block of a Gradle build file. This is essential for React Native apps to utilize the plugin's configurations.
SOURCE: https://github.com/discord/react-native/blob/master/packages/gradle-plugin/react-native-gradle-plugin/README.md#_snippet_0

LANGUAGE: gradle
CODE:
```
buildscript {
    // ...
    dependencies {
        classpath(""com.facebook.react:react-native-gradle-plugin"")
    }
}
```

----------------------------------------

TITLE: CLI Command: Set Package Versions
DESCRIPTION: Bumps the version of all packages within the project. This involves updating `package.json` metadata for all workspaces and the project root, and modifying relevant native files in the `react-native` package. The `--skipReactNativeVersion` flag allows skipping the `react-native` package version modification.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/releases/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
Command: set-version
Description: Bump the version of all packages.
Updates:
  - package.json metadata for all workspaces and the project root.
  - Relevant native files in the react-native package.
Options:
  --skipReactNativeVersion: If passed, the react-native package version will be left unmodified as ""1000.0.0"" (special static version on main), and native files will not be touched.
Usage: node set-version [options]
For more information on arguments, run: node set-version --help
```

----------------------------------------

TITLE: Find and Alias Required Third-Party Prefab Libraries
DESCRIPTION: This section locates pre-built third-party libraries like Hermes Engine, Fbjni, and JSC Android using CMake's `find_package` command. It then creates alias targets for `fbjni` and `jsc` to simplify linking against these dependencies in other parts of the build system.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_7

LANGUAGE: CMake
CODE:
```
find_package(hermes-engine REQUIRED CONFIG)
find_package(fbjni REQUIRED CONFIG)
find_package(jsc-android REQUIRED CONFIG)
add_library(fbjni ALIAS fbjni::fbjni)
add_library(jsc ALIAS jsc-android::jsc)
```

----------------------------------------

TITLE: CLI Command: Create Release Commit
DESCRIPTION: Creates a release commit to trigger a new release. This command is a core step in initiating a new React Native release.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/releases/README.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Command: create-release-commit
Description: Creates a release commit to trigger a new release.
Usage: node create-release-commit [arguments]
For more information on arguments, run: node create-release-commit --help
```

----------------------------------------

TITLE: getColorScheme - Updated Enum Definition
DESCRIPTION: Updated enum definition for `TestEnum` where the value for `SYSTEM` is changed from `3` to `-1`. This change can lead to inconsistencies if JavaScript code expects the old value from an older native build.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_7

LANGUAGE: javascript
CODE:
```
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = -1,
}
```

----------------------------------------

TITLE: Running Fantom in Watch Mode
DESCRIPTION: Shows the shell command to run Fantom tests in watch mode, similar to Jest, allowing continuous testing during development.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_3

LANGUAGE: shell
CODE:
```
yarn fantom --watch [optional test pattern]
```

----------------------------------------

TITLE: Run RNTester on Android
DESCRIPTION: Command to build and run RNTester on Android from the root of the repository, assuming all prerequisites are met.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_5

LANGUAGE: sh
CODE:
```
yarn android
```

----------------------------------------

TITLE: Fantom Test Configuration Pragmas Example
DESCRIPTION: Demonstrates how to configure Fantom test execution using pragmas within a docblock at the top of the test file. This example sets a JavaScript-only test flag and an optimized compilation mode.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
/**
 * @fantom_flags jsOnlyTestFlag:true
 * @fantom_mode opt
 */
```

----------------------------------------

TITLE: Install iOS Dependencies for RNTester
DESCRIPTION: Commands to install Bundler and CocoaPods dependencies for RNTester on iOS. Includes standard installation methods and options for using JSC instead of Hermes.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
gem install bundler
bundle install && bundle exec pod install
```

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
yarn prepare-ios
```

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
USE_HERMES=0 bundle exec pod install
```

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
yarn prepare-ios --arch old --jsvm jsc
```

----------------------------------------

TITLE: Configure Ccache for Compiler and Linker
DESCRIPTION: This block checks for the presence of `ccache`, a compiler cache. If `ccache` is found, it configures CMake to use it globally for both compilation and linking steps, significantly speeding up subsequent builds by caching compilation results.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_4

LANGUAGE: CMake
CODE:
```
find_program(CCACHE_FOUND ccache)
if(CCACHE_FOUND)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_COMPILE ccache)
  set_property(GLOBAL PROPERTY RULE_LAUNCH_LINK ccache)
endif(CCACHE_FOUND)
```

----------------------------------------

TITLE: Configure Basic CMake Build Settings
DESCRIPTION: Sets the minimum required CMake version, enables verbose makefile output, and defines common compile options for the project, such as hidden visibility, exceptions, and RTTI.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(-fvisibility=hidden -fexceptions -frtti)
```

----------------------------------------

TITLE: Debugging Fantom Tests with C++ Debugging Enabled
DESCRIPTION: Provides the shell command to enable C++ debugging for Fantom tests by setting the `FANTOM_ENABLE_CPP_DEBUGGING` environment variable.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_6

LANGUAGE: shell
CODE:
```
FANTOM_ENABLE_CPP_DEBUGGING=1 yarn fantom [optional test pattern]
```

----------------------------------------

TITLE: Execute cURL Command to Open JavaScript Debugger
DESCRIPTION: This cURL command demonstrates how to trigger the `/open-debugger` endpoint via a POST request. It requires a `target` query parameter, which specifies the ID of the CDP target to open the debugger for. This is a direct way to programmatically launch the debugger for a connected React Native application session.
SOURCE: https://github.com/discord/react-native/blob/master/packages/dev-middleware/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
curl -X POST 'http://localhost:8081/open-debugger?target=<targetId>'
```

----------------------------------------

TITLE: Define a React Native Platform Test Component
DESCRIPTION: This snippet demonstrates how to define a test case component and integrate it with `RNTesterPlatformTest`. The test component receives a `harness` prop for testing APIs, and the `RNTesterPlatformTest` component is used to document and render the test.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#_snippet_0

LANGUAGE: js
CODE:
```
function ExampleTestCase ({ harness }) { /* ... */ }

<RNTesterPlatformTest
  title=""Example Test""
  description=""Imagine there's a detailed description of this example test here""
  instructions={[
    ""This is the example test's first step"",
    ""A second step"",
    ""A third step"",
  ]}
  component={ExampleTestCase}
/>
```

----------------------------------------

TITLE: Fantom Test Configuration Pragmas Reference
DESCRIPTION: Documents the available pragmas for configuring Fantom test execution, including `@fantom_flags`, `@fantom_mode`, and `@fantom_react_fb_flags`, detailing their purpose, examples, and possible values.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_5

LANGUAGE: APIDOC
CODE:
```
@fantom_flags: Used to set overrides for ReactNativeFeatureFlags.
  Example: @fantom_flags name:value.
  Multiple flags can be defined in different lines or in the same line separated by spaces (e.g.: @fantom_flags name:value otherName:otherValue).
@fantom_mode: Used to define the compilation mode for the bundle.
  Example: @fantom_mode opt
  Possible values:
    dev: development, default for tests.
    opt: optimized and using Hermes bytecode, default for benchmarks.
    dev-bytecode: development but using Hermes bytecode instead of plain text JavaScript code.
@fantom_react_fb_flags: Used to set overrides for internal React flags set in ReactNativeInternalFeatureFlags (Meta use only).
```

----------------------------------------

TITLE: Analytics Native Module - Updated Spec with new method
DESCRIPTION: An updated interface for the Analytics Native Module, introducing a new `logError` method. This change is backward-incompatible with native clients built against the previous interface.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_1

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  log: (eventName: string, content: string) => void;
  logError: (message: string) => void;
}
```

----------------------------------------

TITLE: API Reference: `harness.test` Method
DESCRIPTION: Documents the `test` method provided by the `harness` prop for creating imperative, Jest-like tests. It details the parameters, the `TestContext` object with its assertion methods, and optional `TestOptions`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#_snippet_1

LANGUAGE: APIDOC
CODE:
```
test(testcase: (TestContext) => void, testName: string, options?: TestOptions)
  testcase: The closure in which you will run your test and make assertions.
  testName: A string name for the test.
  options: Optional configuration for the test.

TestContext:
  assert_true(a: boolean, description: string): void
  assert_equals(a: any, b: any, description: string): void
  assert_greater_than_equal(a: number, b: number, description: string): void
  assert_less_than_equal(a: number, b: number, description: string): void

TestOptions:
  skip: boolean (optional)
    In cases where we want the test to be registered but we don't want it to contribute to the pass/fail count.
```

----------------------------------------

TITLE: API Reference: `harness.useAsyncTest` Hook
DESCRIPTION: Documents the `useAsyncTest` hook for handling asynchronous tests that expect future events. It explains the parameters, default timeout, and the returned `AsyncPlatformTest` object with its `done` function.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
useAsyncTest(description: string, timeoutMs?: number): AsyncPlatformTest
  description: A string description for the asynchronous test.
  timeoutMs: Optional timeout in milliseconds (defaults to 10 seconds).

Returns:
  AsyncPlatformTest: An object containing a `done` function.
    done(): Function to mark the completion of the async test.
```

----------------------------------------

TITLE: Attribution Reporting API: Header Usage Rule
DESCRIPTION: Defines the rule for HTTP responses when using the Attribution Reporting API. A response must set either the `Attribution-Reporting-Register-Source` header or the `Attribution-Reporting-Register-Trigger` header, but never both, to avoid prohibited dual registration of sources and triggers.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/arSourceAndTriggerHeaders.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Attribution Reporting API HTTP Response Headers:

Rule: A response must contain ONE of the following headers, NOT BOTH:
- Attribution-Reporting-Register-Source
- Attribution-Reporting-Register-Trigger

Violation: Attempting to register both a source and a trigger in the same HTTP response is prohibited.
```

----------------------------------------

TITLE: Bash: Execute Android Clean Command
DESCRIPTION: This snippet demonstrates how the 'android clean' command, implemented using '@react-native/core-cli-utils', would be executed from the command line, showing example output.
SOURCE: https://github.com/discord/react-native/blob/master/packages/core-cli-utils/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
$ ./fancy-framework android clean
🧹 let me clean your Android caches
    Gradle: // a bunch of gradle output
    Gradle: ....
```

----------------------------------------

TITLE: React Native Android Default CMake Configuration
DESCRIPTION: This snippet represents the default `CMakeLists.txt` content used by React Native Android. It sets the minimum CMake version, defines the project name as 'appmodules', and includes the `ReactNative-application.cmake` utility to support building with the New Architecture.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/cmake-utils/default-app-setup/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)

# Define the library name here.
project(appmodules)

# This file includes all the necessary to let you build your application with the New Architecture.
include(${REACT_ANDROID_DIR}/cmake-utils/ReactNative-application.cmake)
```

----------------------------------------

TITLE: C++ High-Resolution Timing Primitives Usage
DESCRIPTION: Demonstrates how to use `HighResTimeStamp` and `HighResDuration` classes for getting current timestamps, creating durations, performing arithmetic operations, converting to nanoseconds, and converting to `DOMHighResTimeStamp` for JavaScript interoperability. These primitives are designed for measuring time intervals and should not be used for wall times.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/timing/__docs__/README.md#_snippet_0

LANGUAGE: cpp
CODE:
```
// Getting the current high-resolution timestamp
auto start = HighResTimeStamp::now();

// Creating durations
auto duration = HighResDuration::fromNanoseconds(100);
auto durationMs = HighResDuration::fromMilliseconds(100);

// Arithmetic operations
auto later = start + duration;
auto elapsed = later - start;

// Converting to absolute time units of highest precision
auto end = HighResTimeStamp::now();
int64_t nanoseconds = (end - start).toNanoseconds();

// Converting to DOMHighResTimeStamp (for JavaScript interoperability)
double jsTimeValue = now.toDOMHighResTimeStamp();
```

----------------------------------------

TITLE: Apply Dark Mode Body Background in CSS
DESCRIPTION: This CSS rule targets the `body` element and applies a specific dark background color (`rgb(41 42 45)`) when the user's system preference is set to a dark color scheme. It leverages the `@media (prefers-color-scheme: dark)` media query to conditionally apply styles, ensuring a consistent user experience in dark mode environments.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/ndb_app.html#_snippet_0

LANGUAGE: css
CODE:
```
DevTools @media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Building the React Native Package
DESCRIPTION: This snippet provides the necessary command-line steps to build the React Native package. It includes installing dependencies, compiling the project, and generating native code using React Native's codegen tool.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-test-library/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn install
yarn build
npx react-native codegen
```

----------------------------------------

TITLE: Configure Gradle for Custom CMake Path
DESCRIPTION: This snippet demonstrates how to modify the `android/app/build.gradle` file to specify a custom path for the `CMakeLists.txt` file. This is essential when you've copied the default CMake file to your project's `src/main/jni` folder for customization.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/cmake-utils/default-app-setup/CMakeLists.txt#_snippet_0

LANGUAGE: Gradle
CODE:
```
android {
   // Other config here...
   externalNativeBuild {
       cmake {
           path ""src/main/jni/CMakeLists.txt""
       }
   }
}
```

----------------------------------------

TITLE: MutationObserver Integration with Event Loop
DESCRIPTION: Describes how MutationObserver callbacks are scheduled as microtasks within the React Native event loop, ensuring their execution at a specific point in the event loop tick.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/runtimescheduler/__docs__/README.md#_snippet_4

LANGUAGE: APIDOC
CODE:
```
MutationObserver:
  Purpose: Observes changes to the DOM tree.
  CallbackScheduling:
    - Mutation observer callbacks are scheduled as microtasks.
    - Execution occurs during the event loop's microtask execution step, after the current task and before rendering.
```

----------------------------------------

TITLE: Regenerate React Native Feature Flag Access Code
DESCRIPTION: Command to run from the `react-native` repository after any changes to the feature flag definitions in `ReactNativeFeatureFlags.config.js`. This regenerates the necessary code for accessing flags in different languages.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/src/private/featureflags/__docs__/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
yarn featureflags --update
```

----------------------------------------

TITLE: Set Up and Install Local E2E Test App
DESCRIPTION: Sets up, builds, and installs a specified test application configuration for end-to-end local testing. This command prepares the environment for running automated tests.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/release-testing/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
test-e2e-local
```

----------------------------------------

TITLE: Configure React Native Renderer Animations Static Library with CMake
DESCRIPTION: This CMake script defines and configures the `react_renderer_animations` static library. It sets the minimum CMake version, enables verbose makefile output, includes common React Native flags, gathers all `.cpp` source files, specifies public include directories, links a comprehensive list of dependencies (including `folly_runtime`, `glog`, `jsi`, `yoga`, and various `react_renderer` components), and applies specific compile options like `-Wpedantic` and Fabric-related flags.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/animations/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_animations_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_animations STATIC ${react_renderer_animations_SRC})

target_include_directories(react_renderer_animations PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_animations
        folly_runtime
        glog
        glog_init
        jsi
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        react_renderer_uimanager
        rrc_view
        runtimeexecutor
        yoga
)
target_compile_reactnative_options(react_renderer_animations PRIVATE ""Fabric"")
target_compile_options(react_renderer_animations PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Add Build ID to Shared Libraries
DESCRIPTION: This option adds a unique build ID to every shared library. This ID can be used for debugging and identifying the exact build version of a library, which is useful for crash reporting and symbolication.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_5

LANGUAGE: CMake
CODE:
```
add_link_options(-Wl,--build-id)
```

----------------------------------------

TITLE: Install @react-native/babel-plugin-codegen development dependencies
DESCRIPTION: Installs the @react-native/babel-plugin-codegen Babel plugin and its peer dependency @babel/core using Yarn. This command should be run in the project's root directory.
SOURCE: https://github.com/discord/react-native/blob/master/packages/babel-plugin-codegen/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add --dev @babel/core @react-native/babel-plugin-codegen
```

----------------------------------------

TITLE: Install @react-native/codegen as a development dependency
DESCRIPTION: This command installs the `@react-native/codegen` package as a development dependency using Yarn. It's a standard way to add packages to a React Native project for development purposes.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-codegen/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
yarn add --dev @react-native/codegen
```

----------------------------------------

TITLE: Install @react-native/normalize-colors with Yarn
DESCRIPTION: This command installs the @react-native/normalize-colors package as a development dependency using Yarn. This package is designed for normalizing colors within React Native applications.
SOURCE: https://github.com/discord/react-native/blob/master/packages/normalize-color/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add --dev @react-native/normalize-colors
```

----------------------------------------

TITLE: Examine React Native Monorepo Compiled Output (`dist/`) Structure
DESCRIPTION: Presents the typical `dist/` directory structure generated after `yarn build` processes a package. It includes the compiled JavaScript file (`index.js`), Flow definition (`index.js.flow`), TypeScript definition (`index.d.ts`), and the rewritten `package.json` exports.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/build/README.md#_snippet_3

LANGUAGE: sh
CODE:
```
packages/
  example-pkg/
    dist/
      index.js       # Compiled source file (from index.flow.js)
      index.js.flow  # Flow definition file
      index.d.ts     # TypeScript definition file
      [other transformed files]
    package.json     # ""src/index.js"" export rewritten to ""dist/index.js""
```

----------------------------------------

TITLE: Including Yoga Library as a Common Target
DESCRIPTION: Calls the `add_react_common_subdir` function to include the `yoga` library, which is a common dependency in React Native projects, into the build system.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/tester/CMakeLists.txt#_snippet_3

LANGUAGE: CMake
CODE:
```
add_react_common_subdir(yoga)
```

----------------------------------------

TITLE: Get Debugger Frontend Path in JavaScript
DESCRIPTION: This snippet demonstrates how to import the `@react-native/debugger-frontend` package to obtain the absolute path to its frontend assets. This path can then be used with a static server or similar mechanisms to serve the debugger interface.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/README.md#_snippet_0

LANGUAGE: js
CODE:
```
const frontendPath = require('@react-native/debugger-frontend');

// Pass frontendPath to a static server, etc
```

----------------------------------------

TITLE: Run Tests for React Native ESLint Plugin
DESCRIPTION: Executes the tests for the @react-native/eslint-plugin-specs package using Jest. This command should be run from the React Native root folder after dependencies have been installed with 'yarn'.
SOURCE: https://github.com/discord/react-native/blob/master/packages/eslint-plugin-specs/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn jest packages/eslint-plugin-specs
```

----------------------------------------

TITLE: Enable Link-Time Optimization (LTO) if Supported
DESCRIPTION: This block checks if Interprocedural Optimization (LTO), also known as Link-Time Optimization, is supported by the compiler. If supported, it enables this feature, which can lead to smaller and faster executables by allowing the compiler to optimize across compilation units.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
include(CheckIPOSupported)
check_ipo_supported(RESULT IPO_SUPPORT)
if (IPO_SUPPORT)
  message(STATUS ""LTO support is enabled"")
  set(CMAKE_INTERPROCEDURAL_OPTIMIZATION TRUE)
endif()
```

----------------------------------------

TITLE: Clean RNTester iOS Build Files and Pods
DESCRIPTION: Command to clean generated files and folders for a clean installation of RNTester on iOS, useful after previous builds or version changes.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/README.md#_snippet_2

LANGUAGE: sh
CODE:
```
cd packages/rn-tester
yarn clean-ios
```

----------------------------------------

TITLE: JavaScript: Implement Android Clean Command with core-cli-utils
DESCRIPTION: This snippet demonstrates how a framework can integrate '@react-native/core-cli-utils' to add an 'android clean' command to its CLI. It shows the use of 'cli.clean.android' to clear Android caches, iterating through tasks, and logging their output.
SOURCE: https://github.com/discord/react-native/blob/master/packages/core-cli-utils/README.md#_snippet_0

LANGUAGE: js
CODE:
```
import { Command } from 'commander';
import cli from '@react-native/core-cli-utils';
import debug from 'debug';

const android = new Command('android');

const frameworkFindsAndroidSrcDir = ""..."";
const tasks = cli.clean.android(frameworkFindsAndroidSrcDir);
const log = debug('fancy-framework:android');

android
    .command('clean')
    .description(cli.clean.android)
    .action(async () => {
        const log = debug('fancy-framework:android:clean');
        log(`🧹 let me clean your Android caches`);
        // Add other caches your framework needs besides the normal React Native caches
        // here.
        for (const task of tasks) {
            try {
                log(`\t ${task.label}`);
                // See: https://github.com/sindresorhus/execa#lines
                const {stdout} = await task.action({ lines: true });
                log(stdout.join('\n\tGradle: '));
            } catch (e) {
                log(`\t ⚠️ whoops: ${e.message}`);
            }
        }
    });
```

----------------------------------------

TITLE: Safely Modifying React Native TurboModule Interfaces
DESCRIPTION: When adding new values to a union type in a React Native TurboModule interface, it is safer to introduce a new optional method with the updated union rather than directly modifying the existing method. This approach ensures backward compatibility with older native builds.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_11

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  +setColorScheme: (color: 'light' | 'dark') => void
  +setColorSchemeWithSystem?: (color: 'light' | 'dark' | 'system') => void
}
```

----------------------------------------

TITLE: Configure React Native Android Popup Menu Module with CMake
DESCRIPTION: This CMake configuration defines the build process for the `react_codegen_ReactPopupMenuAndroidSpecs` object library. It specifies the minimum CMake version, enables verbose makefiles, gathers source files, sets include directories, links necessary libraries (fbjni, jsi, reactnative), and applies C++20 standard and specific compile options like `-DLOG_TAG=""ReactNative""`, `-fexceptions`, `-frtti`, and `-Wall`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-popup-menu-android/android/src/main/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/ReactPopupMenuAndroidSpecs/*.cpp)

add_library(
  react_codegen_ReactPopupMenuAndroidSpecs
  OBJECT
  ${react_codegen_SRCS}
)

target_include_directories(react_codegen_ReactPopupMenuAndroidSpecs PUBLIC . react/renderer/components/ReactPopupMenuAndroidSpecs)

target_link_libraries(
  react_codegen_ReactPopupMenuAndroidSpecs
  fbjni
  jsi
  reactnative
)

target_compile_options(
  react_codegen_ReactPopupMenuAndroidSpecs
  PRIVATE
  -DLOG_TAG=\""ReactNative\""
  -fexceptions
  -frtti
  -std=c++20
  -Wall
)
```

----------------------------------------

TITLE: Configure YogaCore Static Library with CMake
DESCRIPTION: This CMake script sets up the build process for the `yogacore` static library. It specifies the minimum CMake version, defines the project, gathers C++ source files, and creates the static library. It also includes conditional logic to link against the Android logging library (`log`) when building for Android and attempts to enable Interprocedural Optimization (IPO) for better performance if the compiler supports it. Public include directories are also defined for consumers of the library.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/yoga/yoga/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13...3.26)
project(yogacore)
set(CMAKE_VERBOSE_MAKEFILE on)

if(TARGET yogacore)
    return()
endif()

include(CheckIPOSupported)

set(YOGA_ROOT ${CMAKE_CURRENT_SOURCE_DIR}/..)
include(${YOGA_ROOT}/cmake/project-defaults.cmake)


file(GLOB SOURCES CONFIGURE_DEPENDS
    ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp
    ${CMAKE_CURRENT_SOURCE_DIR}/**/*.cpp)

add_library(yogacore STATIC ${SOURCES})

# Yoga conditionally uses <android/log> when building for Android
if (ANDROID)
    target_link_libraries(yogacore log)
endif()

check_ipo_supported(RESULT result)
if(result)
  set_target_properties(yogacore PROPERTIES
    CMAKE_INTERPROCEDURAL_OPTIMIZATION true)
endif()

target_include_directories(yogacore
    PUBLIC
    $<BUILD_INTERFACE:${YOGA_ROOT}>
    $<INSTALL_INTERFACE:${CMAKE_INSTALL_PREFIX}/include/yoga>)
```

----------------------------------------

TITLE: Run tests for @react-native/js-polyfills package
DESCRIPTION: This command executes the Jest tests specifically for the `@react-native/js-polyfills` package from the React Native root folder.
SOURCE: https://github.com/discord/react-native/blob/master/packages/polyfills/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn jest packages/polyfills
```

----------------------------------------

TITLE: Document React Native Dev Middleware WebSocket Endpoints
DESCRIPTION: This API documentation details the WebSocket endpoints provided by `DevMiddlewareAPI.websocketEndpoints`. These handlers are essential for managing device connections and proxying Chrome DevTools Protocol (CDP) messages. Specifically, `/inspector/device` registers device connections, while `/inspector/debug` facilitates the actual CDP message exchange between the debugger and the device.
SOURCE: https://github.com/discord/react-native/blob/master/packages/dev-middleware/README.md#_snippet_3

LANGUAGE: APIDOC
CODE:
```
DevMiddlewareAPI.websocketEndpoints:
  /inspector/device
    WebSocket handler for registering device connections.
  /inspector/debug
    WebSocket handler that proxies CDP messages to/from the corresponding device.
```

----------------------------------------

TITLE: Run tests for @react-native/babel-plugin-codegen
DESCRIPTION: Executes the test suite for the @react-native/babel-plugin-codegen package. This requires running 'yarn' once to install all dependencies from the React Native root folder before running the Jest command.
SOURCE: https://github.com/discord/react-native/blob/master/packages/babel-plugin-codegen/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn
yarn jest packages/babel-plugin-codegen
```

----------------------------------------

TITLE: Compatibility-check error: Union added items
DESCRIPTION: Error message from the compatibility-check tool when a new value ('system') is added to a union type, indicating that older native builds will not expect or support this new option.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_5

LANGUAGE: text
CODE:
```
ColorManager.setColorScheme parameter 0: Union added items, but native will not expect/support them
  -- position 3 system
```

----------------------------------------

TITLE: CMake Configuration for JSI React Native Library Build
DESCRIPTION: This CMakeLists.txt snippet defines the build process for the `jsireact` object library. It specifies the minimum CMake version, enables verbose output, includes React Native common flags, lists the C++ source files (`JSIExecutor.cpp`, `JSINativeModules.cpp`), sets public include directories, links essential libraries such as `react_cxxreact`, `reactperflogger`, `folly_runtime`, `glog`, and `jsi`, and applies React Native specific compile options with -O3 optimization.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsiexecutor/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(jsireact
        OBJECT
        jsireact/JSIExecutor.cpp
        jsireact/JSINativeModules.cpp)

target_include_directories(jsireact PUBLIC .)

target_link_libraries(jsireact
        react_cxxreact
        reactperflogger
        folly_runtime
        glog
        jsi)

target_compile_reactnative_options(jsireact PRIVATE)
target_compile_options(jsireact PRIVATE -O3)
```

----------------------------------------

TITLE: Install @react-native/js-polyfills with Yarn
DESCRIPTION: This snippet shows how to add the `@react-native/js-polyfills` package to your project using Yarn. It notes that npm can also be used as an alternative package manager.
SOURCE: https://github.com/discord/react-native/blob/master/packages/polyfills/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add @react-native/js-polyfills
```

----------------------------------------

TITLE: Define React Native Android JNI Build Targets
DESCRIPTION: This snippet specifies subdirectories related to Java Native Interface (JNI) components for the React Native Android build. These targets include generated source code, first-party JNI libraries, and various React Native modules specific to the Android platform, such as TurboModule, Fabric, and Hermes executors.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_10

LANGUAGE: CMake
CODE:
```
add_react_build_subdir(generated/source/codegen/jni)
add_react_android_subdir(src/main/jni/first-party/fbgloginit)
add_react_android_subdir(src/main/jni/first-party/yogajni)
add_react_android_subdir(src/main/jni/first-party/jni-lib-merge)
add_react_android_subdir(src/main/jni/react/jni)
add_react_android_subdir(src/main/jni/react/reactperflogger)
add_react_android_subdir(src/main/jni/react/jscexecutor)
add_react_android_subdir(src/main/jni/react/jsctooling)
add_react_android_subdir(src/main/jni/react/turbomodule)
add_react_android_subdir(src/main/jni/react/uimanager)
add_react_android_subdir(src/main/jni/react/mapbuffer)
add_react_android_subdir(src/main/jni/react/reactnativeblob)
add_react_android_subdir(src/main/jni/react/fabric)
add_react_android_subdir(src/main/jni/react/featureflags)
add_react_android_subdir(src/main/jni/react/newarchdefaults)
add_react_android_subdir(src/main/jni/react/hermes/reactexecutor)
add_react_android_subdir(src/main/jni/react/hermes/tooling)
add_react_android_subdir(src/main/jni/react/hermes/instrumentation/)
add_react_android_subdir(src/main/jni/react/runtime/cxxreactpackage)
add_react_android_subdir(src/main/jni/react/runtime/jni)
add_react_android_subdir(src/main/jni/react/runtime/hermes/jni)
add_react_android_subdir(src/main/jni/react/runtime/jsc/jni)
add_react_android_subdir(src/main/jni/react/devsupport)
```

----------------------------------------

TITLE: Configure React Native DevTools Runtime Settings C++ Library
DESCRIPTION: This CMake snippet defines an interface library `react_devtoolsruntimesettingscxx` for React Native DevTools. It specifies the minimum CMake version, enables verbose makefiles, includes React Native flags, sets the interface include directory, links against the `jsi` library, and applies React Native specific and pedantic compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/devtoolsruntimesettings/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(react_devtoolsruntimesettingscxx INTERFACE)

target_include_directories(react_devtoolsruntimesettingscxx INTERFACE .)

target_link_libraries(react_devtoolsruntimesettingscxx jsi)
target_compile_reactnative_options(react_devtoolsruntimesettingscxx PRIVATE)
target_compile_options(react_devtoolsruntimesettingscxx PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Compatibility-check error: Enum value mismatch
DESCRIPTION: Detailed error message from the compatibility-check tool, highlighting a type mismatch within an enum where a numeric literal value for a member (`SYSTEM`) has changed, leading to conflicting types.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_8

LANGUAGE: javascript
CODE:
```
ColorManager: Object contained a property with a type mismatch
   -- getColorScheme: has conflicting type changes
       --new: ()=>Enum<number>
       --old: ()=>Enum<number>
       Function return types do not match
           --new: ()=>Enum<number>
           --old: ()=>Enum<number>
           Enum types do not match
               --new: Enum<number> {LIGHT = 1, DARK = 2, SYSTEM = -1}
               --old: Enum<number> {LIGHT = 1, DARK = 2, SYSTEM = 3}
               Enum contained a member with a type mismatch
                   -- Member SYSTEM: has conflicting changes
                       --new: -1
                       --old: 3
                       Numeric literals are not equal
                           --new: -1
                           --old: 3
```

----------------------------------------

TITLE: Install @react-native/metro-config Development Dependencies with Yarn
DESCRIPTION: Installs the `@react-native/metro-config` package and its related development dependencies using Yarn. This command should be run in the project's root directory.
SOURCE: https://github.com/discord/react-native/blob/master/packages/metro-config/README.md#_snippet_0

LANGUAGE: Shell
CODE:
```
yarn add --dev @react-native/js-polyfills metro-config @react-native/metro-babel-transformer metro-runtime @react-native/metro-config
```

----------------------------------------

TITLE: Run tests for @react-native/gradle-plugin
DESCRIPTION: Executes the tests for the @react-native/gradle-plugin package from the React Native root folder using Gradle. Ensure dependencies are installed beforehand by running 'yarn' once.
SOURCE: https://github.com/discord/react-native/blob/master/packages/gradle-plugin/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
./gradlew -p packages/gradle-plugin test
```

----------------------------------------

TITLE: Run tests for the assets package
DESCRIPTION: This command executes the Jest tests specifically for the @react-native/assets-registry package. It should be run from the React Native root folder after ensuring all project dependencies are installed.
SOURCE: https://github.com/discord/react-native/blob/master/packages/assets/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn jest packages/assets
```

----------------------------------------

TITLE: Run tests for @react-native/codegen package
DESCRIPTION: This command executes the tests specifically for the `@react-native/codegen` package using Jest. It should be run from the React Native root folder after dependencies have been installed.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-codegen/README.md#_snippet_2

LANGUAGE: bash
CODE:
```
yarn jest packages/react-native-codegen
```

----------------------------------------

TITLE: Configure React Native TurboModule Build with CMake
DESCRIPTION: This snippet demonstrates the CMake configuration for building a React Native TurboModule. It sets the minimum CMake version, includes React Native specific flags, discovers C++ source files, defines a static library, specifies public include directories, links necessary libraries like fbjni, jsi, and reactnative, and applies specific compile options for the module.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/samples/platform/android/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB sampleturbomodule_SRC CONFIGURE_DEPENDS ReactCommon/*.cpp)
add_library(sampleturbomodule STATIC ${sampleturbomodule_SRC})

target_include_directories(sampleturbomodule PUBLIC .)

target_link_libraries(sampleturbomodule
        fbjni
        jsi
        reactnative
)

target_compile_reactnative_options(sampleturbomodule PRIVATE ""ReactNative"")
target_compile_options(sampleturbomodule PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure jsinspector_network C++ Module Build with CMake
DESCRIPTION: This CMake configuration defines how the `jsinspector_network` C++ module is built. It sets the minimum CMake version, enables verbose makefiles, includes utility scripts for shared object merging, specifies C++20 compilation options, gathers source files, creates an object library, and links necessary dependencies like `folly_runtime`, `jsinspector_cdp`, `react_performance_timeline`, and `react_timing`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsinspector-modern/network/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_compile_options(
        -fexceptions
        -std=c++20
        -Wall
        -Wpedantic)

file(GLOB jsinspector_network_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_network OBJECT ${jsinspector_network_SRC})
target_merge_so(jsinspector_network)

target_include_directories(jsinspector_network PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_network
        folly_runtime
        jsinspector_cdp
        react_performance_timeline
        react_timing)
```

----------------------------------------

TITLE: CMake: Configure React Native Interface Include Directories
DESCRIPTION: This CMake snippet specifies a comprehensive list of interface include directories required for building the React Native project. These directories point to the public header files of various React Native modules and their internal components, ensuring that the compiler can locate necessary declarations during compilation.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_14

LANGUAGE: CMake
CODE:
```
$<TARGET_PROPERTY:react_cxxreact,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_debug,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_devsupportjni,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_featureflags,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_featureflagsjni,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_nativemodule_core,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_nativemodule_defaults,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_nativemodule_dom,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_nativemodule_featureflags,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_nativemodule_idlecallbacks,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_nativemodule_microtasks,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_newarchdefaults,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_performance_timeline,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_animations,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_attributedstring,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_consistency,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_core,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_css,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_debug,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_dom,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_element,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_graphics,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_imagemanager,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_leakchecker,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_mapbuffer,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_mounting,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_observers_events,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_runtimescheduler,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_scheduler,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_telemetry,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_textlayoutmanager,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_uimanager,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_renderer_uimanager_consistency,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:react_utils,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:reactnativeblob,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:reactnativejni,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:reactnativejni_common,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:reactperflogger,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rninstance,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_image,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_legacyviewmanagerinterop,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_modal,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_native,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_progressbar,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_root,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_safeareaview,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_scrollview,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_switch,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_text,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_textinput,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:rrc_view,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:runtimeexecutor,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:turbomodulejsijni,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:uimanagerjni,INTERFACE_INCLUDE_DIRECTORIES>
$<TARGET_PROPERTY:yoga,INTERFACE_INCLUDE_DIRECTORIES>
```

----------------------------------------

TITLE: Run tests for @react-native/virtualized-lists with Jest
DESCRIPTION: These commands demonstrate how to execute tests for the `@react-native/virtualized-lists` package from the React Native root folder. It involves installing dependencies once and then running Jest specifically for the package.
SOURCE: https://github.com/discord/react-native/blob/master/packages/virtualized-lists/README.md#_snippet_1

LANGUAGE: shell
CODE:
```
yarn
yarn jest packages/virtualized-lists
```

----------------------------------------

TITLE: Configure React Native Debug Renderer with CMake
DESCRIPTION: This CMake snippet configures the build process for the `react_renderer_debug` library. It sets the minimum required CMake version, enables verbose output, includes common React Native build flags, gathers all `.cpp` source files, defines an object library, specifies public include directories, links necessary libraries like `folly_runtime` and `react_debug`, and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/debug/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_debug_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_debug OBJECT ${react_renderer_debug_SRC})

target_include_directories(react_renderer_debug PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_debug folly_runtime react_debug)
target_compile_reactnative_options(react_renderer_debug PRIVATE ""Fabric"")
target_compile_options(react_renderer_debug PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure JSI Library with CMake
DESCRIPTION: This CMake snippet configures the 'jsi' shared library. It specifies the minimum CMake version, enables verbose makefile output, includes React Native specific flags, collects C++ source files, creates the shared library, adds include directories, links against 'folly_runtime' and 'glog', and applies optimization and warning suppression compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsi/CMakeLists.txt#_snippet_0

LANGUAGE: cmake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)


file(GLOB jsi_SRC CONFIGURE_DEPENDS jsi/*.cpp)
add_library(jsi SHARED ${jsi_SRC})

target_include_directories(jsi PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(jsi
        folly_runtime
        glog)

target_compile_reactnative_options(jsi PRIVATE ""ReactNative"")
target_compile_options(jsi PRIVATE -O3 -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Example: Testing View Layout with `harness.test`
DESCRIPTION: Illustrates how to use the `harness.test` method to verify the width and height of a React Native `View` component. It demonstrates using `useRef` and `useCallback` to measure the view and then assert its dimensions using `assert_equals`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#_snippet_2

LANGUAGE: js
CODE:
```
const EXPECTED_WIDTH = 100;
const EXPECTED_HEIGHT = 200;

function BasicLayoutTestCase({harness}) {
  const viewRef = useRef(null);

  const runTest = useCallback(() => {
    const view = viewRef.current;
    if (view != null) {
      view.measureInWindow(({width, height}) => {
        harness.test(({assert_equals}) => {
          assert_equals(
            width,
            EXPECTED_WIDTH,
            `view's computed width should be ${EXPECTED_WIDTH}`,
          );
          assert_equals(
            height,
            EXPECTED_HEIGHT,
            `view's computed width should be ${EXPECTED_HEIGHT}`,
          );
        }, ""view's width and height are correct"");
      });
    }
  }, [harness]);

  return (
    <>
      <View
        ref={viewRef}
        style={{width: EXPECTED_WIDTH, height: EXPECTED_HEIGHT}}
      />
      <Button title=""Start Test"" onPress={runTest} />
    </>
  );
}
```

----------------------------------------

TITLE: CMake Configuration for React Native Image Manager Library
DESCRIPTION: This CMakeLists.txt file defines the build rules for the `react_renderer_imagemanager` library. It specifies the minimum CMake version, includes common React Native flags, gathers source files, sets public and private include directories, and links various React Native and Folly libraries. It also applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/imagemanager/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_imagemanager_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/imagemanager/*.cpp)

add_library(react_renderer_imagemanager
        OBJECT
        ${react_renderer_imagemanager_SRC})

target_include_directories(react_renderer_imagemanager
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        PRIVATE
          ${CMAKE_CURRENT_SOURCE_DIR}
        )

target_link_libraries(react_renderer_imagemanager
        folly_runtime
        mapbufferjni
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        reactnativejni
        yoga)
target_compile_reactnative_options(react_renderer_imagemanager PRIVATE ""Fabric"")
target_compile_options(react_renderer_imagemanager PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native JS Inspector Tracing Library with CMake
DESCRIPTION: This snippet defines the `jsinspector_tracing` object library, includes necessary CMake utility files for React Native, specifies source files, sets public include directories, links against `folly_runtime` and `oscompat`, and applies React Native specific compile options and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsinspector-modern/tracing/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jsinspector_tracing_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_tracing OBJECT ${jsinspector_tracing_SRC})
target_merge_so(jsinspector_tracing)

target_include_directories(jsinspector_tracing PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_tracing
        folly_runtime
        oscompat
)
target_compile_reactnative_options(jsinspector_tracing PRIVATE)
target_compile_options(jsinspector_tracing PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure and Build JSI Library with CMake
DESCRIPTION: This CMake script defines the build process for the JSI library. It sets the C++ standard to C++17, creates the 'jsi' library from 'jsi.cpp', and specifies public include directories. It also applies compiler-specific flags to ensure proper error handling and compatibility across different compilers (Clang, GNU, MSVC) and manages the installation of JSI API header files.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsi/jsi/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

add_library(jsi
        jsi.cpp)

target_include_directories(jsi PUBLIC ..)


set(jsi_compile_flags """")
if (""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""Clang"" OR
    ""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""GNU"")
  list(APPEND jsi_compile_flags ""-Wno-non-virtual-dtor"")
elseif (""${CMAKE_CXX_COMPILER_ID}"" MATCHES ""MSVC"")
  # Turn on Error Handling in MSVC, otherwise objects are not destructed
  # when they go out of scope due to exceptions.
  list(APPEND jsi_compile_flags ""/EHsc"")
endif()
target_compile_options(jsi PRIVATE ${jsi_compile_flags})

install(DIRECTORY ""${PROJECT_SOURCE_DIR}/API/jsi/"" DESTINATION include
  FILES_MATCHING PATTERN ""*.h""
  PATTERN ""test"" EXCLUDE)
```

----------------------------------------

TITLE: CMake Configuration for React Native Feature Flags JNI Library
DESCRIPTION: This snippet defines the CMake build rules for the `react_featureflagsjni` library. It sets the minimum CMake version, includes utility scripts for SO merging and React Native flags, gathers C++ source files, defines an object library, specifies public include directories, links against required libraries (fbjni, react_featureflags, reactnativejni), and applies specific React Native compile options and shared object merging.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/featureflags/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_featureflagsjni_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        react_featureflagsjni
        OBJECT
        ${react_featureflagsjni_SRCS}
)

target_include_directories(react_featureflagsjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(
        react_featureflagsjni
        fbjni
        react_featureflags
        reactnativejni
)

target_merge_so(react_featureflagsjni)
target_compile_reactnative_options(react_featureflagsjni PRIVATE ""ReactNative"")
```

----------------------------------------

TITLE: Run Tests for @react-native/normalize-colors Package
DESCRIPTION: This command executes the Jest test suite specifically for the @react-native/normalize-colors package. It should be run from the React Native root folder after all project dependencies have been installed.
SOURCE: https://github.com/discord/react-native/blob/master/packages/normalize-color/README.md#_snippet_2

LANGUAGE: Shell
CODE:
```
yarn jest packages/normalize-color
```

----------------------------------------

TITLE: Configure React Native DevSupport JNI Library with CMake
DESCRIPTION: This CMake script defines the build process for the `react_devsupportjni` library. It specifies the minimum CMake version, enables verbose output, includes necessary utility scripts for shared object merging and React Native flags, collects C++ source files, creates an object library, performs shared object merging, sets public include directories, links against `fbjni` and `jsinspector`, and applies React Native-specific compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/devsupport/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_devsupportjni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_devsupportjni OBJECT ${react_devsupportjni_SRC})

target_merge_so(react_devsupportjni)

target_include_directories(react_devsupportjni PUBLIC .)

target_link_libraries(react_devsupportjni
        fbjni
        jsinspector)

target_compile_reactnative_options(react_devsupportjni PRIVATE ""ReactNative"")
```

----------------------------------------

TITLE: Define and Configure jscexecutor Library
DESCRIPTION: Defines the `jscexecutor` library as an OBJECT library, gathering all `.cpp` source files from the current directory. It then sets private include directories and applies a shared object merging utility.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#_snippet_2

LANGUAGE: CMake
CODE:
```
file(GLOB jscexecutor_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(jscexecutor OBJECT ${jscexecutor_SRC})

target_include_directories(jscexecutor PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(jscexecutor)
```

----------------------------------------

TITLE: Configure reactnativejni_common CMake Library
DESCRIPTION: Defines the `reactnativejni_common` object library, which contains shared JNI code for both old and new React Native architectures. It lists source files, includes necessary directories, links to core dependencies like `fbjni` and `folly_runtime`, and applies specific compilation flags.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
add_library(
        reactnativejni_common
        OBJECT
          JDynamicNative.cpp
          JReactMarker.cpp
          NativeArray.cpp
          NativeCommon.cpp
          NativeMap.cpp
          OnLoad-common.cpp
          ReadableNativeArray.cpp
          ReadableNativeMap.cpp
          WritableNativeArray.cpp
          WritableNativeMap.cpp
)
target_merge_so(reactnativejni_common)
target_include_directories(reactnativejni_common PUBLIC ../../)

target_link_libraries(reactnativejni_common fbjni folly_runtime react_cxxreact)
target_compile_reactnative_options(reactnativejni_common PRIVATE)
target_compile_options(reactnativejni_common PRIVATE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: CMake Configuration for JSC Instance Library
DESCRIPTION: This CMakeLists.txt file configures the `jscinstance` object library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific CMake utilities, gathers C++ source files, defines public include directories, applies shared object merging, links against `jscruntime`, `fbjni`, and `reactnative` libraries, and sets private compilation options for symbol visibility.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/runtime/jsc/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)


include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jscinstance_SRC CONFIGURE_DEPENDS ""*.cpp"")

add_library(jscinstance OBJECT ${jscinstance_SRC})

target_include_directories(jscinstance PUBLIC .)
target_merge_so(jscinstance)

target_link_libraries(jscinstance
        jscruntime
        fbjni
        reactnative
)
target_compile_reactnative_options(jscinstance PRIVATE)
target_compile_options(jscinstance PRIVATE -fvisibility=hidden)
```

----------------------------------------

TITLE: Configure React Native JSI Tooling Library with CMake
DESCRIPTION: This CMakeLists.txt snippet defines the build process for the `jsitooling` library, which is part of a React Native project. It sets the minimum CMake version, includes React Native specific flags, gathers C++ source files, defines public include directories, links against core React Native libraries (react_cxxreact, folly_runtime, glog, jsi), and applies strict compilation options like -Wpedantic.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsitooling/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB jsitooling_SRC CONFIGURE_DEPENDS react/runtime/*.cpp)
add_library(jsitooling OBJECT ${jsitooling_SRC})

target_include_directories(jsitooling
    PUBLIC
    ${REACT_COMMON_DIR}
    ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(jsitooling
        react_cxxreact
        folly_runtime
        glog
        jsi)

target_compile_reactnative_options(jsitooling PRIVATE ""ReactNative"")
target_compile_options(jsitooling PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure CMake Build for Bridgeless Native View Config Library
DESCRIPTION: This CMake script defines the build process for the 'bridgelessnativeviewconfig' object library. It sets the minimum required CMake version, enables verbose output, includes React Native-specific build flags, collects C++ source files, specifies public include directories, links the library with JSI, and applies React Native compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/runtime/nativeviewconfig/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_nativeviewconfig_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        bridgelessnativeviewconfig
        OBJECT
        ${bridgeless_nativeviewconfig_SRC}
)
target_include_directories(bridgelessnativeviewconfig PUBLIC .)

target_link_libraries(bridgelessnativeviewconfig jsi)
target_compile_reactnative_options(bridgelessnativeviewconfig PRIVATE)
```

----------------------------------------

TITLE: Example: Testing Pointer Move Events with `useAsyncTest`
DESCRIPTION: Shows a basic implementation of `useAsyncTest` to verify that `pointermove` events are emitted on a `View` component. The test is marked as complete when the `onPointerMove` callback is triggered.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/examples/Experimental/PlatformTest/README.md#_snippet_4

LANGUAGE: js
CODE:
```
function BasicPointerMoveTestCase({harness}) {
  const testPointerMove = harness.useAsyncTest('pointermove event received');

  return (
    <View
      style={{width: 100, height: 100, backgroundColor: 'black'}}
      onPointerMove={() => testPointerMove.done()}
    />
  );
}
```

----------------------------------------

TITLE: Configure React Native DOM Module with CMake
DESCRIPTION: This CMake configuration defines the `react_nativemodule_dom` object library. It specifies the minimum CMake version, enables verbose makefiles, includes React Native specific flags, globs source files, adds the library, sets public include directories, links necessary React Native and renderer libraries, and applies specific compile options like `-Wpedantic`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/dom/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_dom_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_dom
        OBJECT
            ${react_nativemodule_dom_SRC}
            $<TARGET_OBJECTS:react_codegen_rncore>
)

target_include_directories(react_nativemodule_dom PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_dom
        rrc_root
        react_codegen_rncore
        react_cxxreact
        react_renderer_dom
        react_renderer_uimanager
)
target_compile_reactnative_options(react_nativemodule_dom PRIVATE ""ReactNative"")
target_compile_options(react_nativemodule_dom PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Renderer Mounting with CMake
DESCRIPTION: This CMake script defines the build process for the `react_renderer_mounting` object library. It specifies the minimum CMake version, includes common React Native flags, collects source files from the current directory and its subdirectories (`internal`, `stubs`), sets public and private include paths, and links against various core React Native and third-party libraries such as `folly_runtime`, `jsi`, `glog`, and `yoga`. It also applies specific compile options like `-Wpedantic` and a 'Fabric' option for React Native compilation.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/mounting/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_mounting_SRC CONFIGURE_DEPENDS
        *.cpp
        internal/*.cpp
        stubs/*.cpp)
add_library(react_renderer_mounting OBJECT ${react_renderer_mounting_SRC})

target_include_directories(react_renderer_mounting PRIVATE .)
target_include_directories(react_renderer_mounting PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_mounting
        folly_runtime
        glog
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_telemetry
        react_utils
        rrc_root
        rrc_view
        yoga)
target_compile_reactnative_options(react_renderer_mounting PRIVATE ""Fabric"")
target_compile_options(react_renderer_mounting PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Link Dependencies for React Native Telemetry Renderer
DESCRIPTION: Links the `react_renderer_telemetry` library against a comprehensive list of internal and external dependencies. These libraries, such as Folly, Glog, React Debug, and Yoga, provide essential functionalities and resolve symbols required for the telemetry component to operate correctly.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/telemetry/CMakeLists.txt#_snippet_3

LANGUAGE: CMake
CODE:
```
target_link_libraries(react_renderer_telemetry
        folly_runtime
        glog
        glog_init
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        rrc_root
        rrc_view
        yoga)
```

----------------------------------------

TITLE: Configure CMake for React Native Runtime Scheduler Library
DESCRIPTION: This CMake script defines the build process for the `react_renderer_runtimescheduler` static library. It includes common React Native build flags, specifies source files, sets public include directories, links a comprehensive list of internal React Native libraries, and applies specific compile options like `-Wpedantic` and options related to 'Fabric'.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/runtimescheduler/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_runtimescheduler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_runtimescheduler STATIC ${react_renderer_runtimescheduler_SRC})

target_include_directories(react_renderer_runtimescheduler PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_runtimescheduler
        callinvoker
        jsi
        react_debug
        react_performance_timeline
        react_renderer_consistency
        react_renderer_debug
        react_timing
        react_utils
        react_featureflags
        runtimeexecutor
        jsinspector_tracing)
target_compile_reactnative_options(react_renderer_runtimescheduler PRIVATE ""Fabric"")
target_compile_options(react_renderer_runtimescheduler PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Specify Cross-Origin Embedder Policy Header for Iframes
DESCRIPTION: To prevent an embedded iframe from being blocked when your site has Cross-Origin Embedder Policy (COEP) enabled, you must add one of the following HTTP headers to the embedded frame’s HTML response. This action protects private data from exposure to untrusted third-party sites.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/CoepFrameResourceNeedsCoepHeader.md#_snippet_0

LANGUAGE: APIDOC
CODE:
```
Cross-Origin-Embedder-Policy: require-corp
Cross-Origin-Embedder-Policy: credentialless (Chrome > 96)
```

----------------------------------------

TITLE: CMake Configuration for React Native fast_float Library
DESCRIPTION: This CMake snippet defines the build settings for a React Native project, including setting the minimum CMake version, enabling verbose makefile output, and configuring the `fast_float` interface library. It includes common React Native flags and specifies include directories and compile options for `fast_float`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/fast_float/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(fast_float INTERFACE)

target_include_directories(fast_float INTERFACE include)
target_compile_reactnative_options(fast_float INTERFACE)
```

----------------------------------------

TITLE: Configure React Native Core Renderer with CMake
DESCRIPTION: This CMake snippet defines the build process for the `react_renderer_core` object library. It specifies the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers all `.cpp` source files, sets public include directories, links essential libraries like `folly_runtime`, `jsi`, and `glog`, and applies specific compile options and definitions such as `-Wpedantic` and `RN_SERIALIZABLE_STATE`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/core/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_core_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_core OBJECT ${react_renderer_core_SRC})

target_include_directories(react_renderer_core PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_core
        folly_runtime
        glog
        jsi
        logger
        react_debug
        react_featureflags
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_runtimescheduler
        react_utils
        runtimeexecutor)
target_compile_reactnative_options(react_renderer_core PRIVATE ""Fabric"")
target_compile_definitions(react_renderer_core PUBLIC RN_SERIALIZABLE_STATE)
target_compile_options(react_renderer_core PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure CMake for React Native Double-Conversion Library
DESCRIPTION: This CMake snippet defines the build configuration for the `double-conversion` static library. It specifies the minimum CMake version, enables verbose makefiles, includes React Native specific flags, lists all source files for the library, sets the public include directory, and applies compiler options to suppress specific warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/double-conversion/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(double-conversion
        STATIC
        double-conversion/bignum.cc
        double-conversion/bignum-dtoa.cc
        double-conversion/cached-powers.cc
        double-conversion/diy-fp.cc
        double-conversion/double-conversion.cc
        double-conversion/fast-dtoa.cc
        double-conversion/fixed-dtoa.cc
        double-conversion/strtod.cc)

target_include_directories(double-conversion PUBLIC .)

target_compile_reactnative_options(double-conversion PRIVATE)
target_compile_options(double-conversion PRIVATE -Wno-unused-variable -Wno-unused-local-typedefs)
```

----------------------------------------

TITLE: CMake Configuration for React Native Idle Callbacks Module
DESCRIPTION: This CMake script configures the `react_nativemodule_idlecallbacks` module. It sets the minimum required CMake version, enables verbose makefile output, includes common React Native CMake flags, gathers source files, defines the module as an object library, specifies public include directories, links necessary React Native libraries (react_codegen_rncore, react_cxxreact, react_renderer_runtimescheduler), and applies specific compile options for React Native and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/idlecallbacks/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB react_nativemodule_idlecallbacks_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_idlecallbacks OBJECT ${react_nativemodule_idlecallbacks_SRC})

target_include_directories(react_nativemodule_idlecallbacks PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_idlecallbacks
        react_codegen_rncore
        react_cxxreact
        react_renderer_runtimescheduler
)
target_compile_reactnative_options(react_nativemodule_idlecallbacks PRIVATE ""ReactNative"")
target_compile_options(react_nativemodule_idlecallbacks PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: CMake Path Conversion and Build ID Linker Option
DESCRIPTION: Converts a given input path (`REACT_COMMON_DIR`) to CMake's internal path format (forward slashes). Also adds a linker option to ensure all shared libraries include a `.note.gnu.build-id` header for unique identification.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/tester/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
file(TO_CMAKE_PATH ""${REACT_COMMON_DIR}"" REACT_COMMON_DIR)

# Make sure every shared lib includes a .note.gnu.build-id header
add_link_options(-Wl,--build-id)
```

----------------------------------------

TITLE: CMake Configuration for React Native TextInput Component
DESCRIPTION: This CMake script defines the build process for the rrc_textinput object library, a core component for text input in React Native. It specifies the minimum CMake version, includes common React Native flags, gathers C++ source files, sets public include directories, and links a comprehensive set of React Native and third-party libraries like glog, folly_runtime, jsi, and various react_renderer components. Additionally, it applies specific compile options for Fabric compatibility and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/textinput/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_textinput_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/androidtextinput/*.cpp)
add_library(rrc_textinput OBJECT ${rrc_textinput_SRC})

target_include_directories(rrc_textinput PUBLIC . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_link_libraries(rrc_textinput
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_textlayoutmanager
        react_renderer_uimanager
        react_utils
        rrc_image
        rrc_text
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_textinput PRIVATE ""Fabric"")
target_compile_options(rrc_textinput PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native GTest Executable and Link Libraries
DESCRIPTION: This CMake snippet defines the `reactnative_unittest` executable, listing all C++ test files for various React Native components (e.g., cxxreact, renderer, bridging). It also specifies the necessary libraries to link against, including `fabricjni`, `hermes-engine`, `gtest_main`, and various `react_renderer` components, enabling comprehensive unit testing for the React Native framework. It also includes commented-out sections for tests that might fail or not compile.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_17

LANGUAGE: CMake
CODE:
```
$<TARGET_PROPERTY:yoga,INTERFACE_COMPILE_DEFINITIONS>
)

# GTest dependencies
add_executable(reactnative_unittest
  ${REACT_COMMON_DIR}/cxxreact/tests/jsarg_helpers.cpp
  ${REACT_COMMON_DIR}/cxxreact/tests/jsbigstring.cpp
  ${REACT_COMMON_DIR}/cxxreact/tests/methodcall.cpp
  ${REACT_COMMON_DIR}/cxxreact/tests/RecoverableErrorTest.cpp
  ${REACT_COMMON_DIR}/react/bridging/tests/BridgingTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/attributedstring/tests/AttributedStringBoxTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/image/tests/ImageTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/root/tests/RootShadowNodeTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/scrollview/tests/ScrollViewTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/LayoutTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/components/view/tests/ViewTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/DynamicPropsUtilitiesTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/EventQueueProcessorTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/FindNodeAtPointTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/LayoutableShadowNodeTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/PrimitivesTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/RawPropsTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeFamilyTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/debug/tests/DebugStringConvertibleTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/element/tests/ElementTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/GraphicsTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/graphics/tests/TransformTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/imagemanager/tests/ImageManagerTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/mapbuffer/tests/MapBufferTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StackingContextTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/mounting/tests/StateReconciliationTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/RuntimeSchedulerTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/runtimescheduler/tests/SchedulerPriorityTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/telemetry/tests/TransactionTelemetryTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/textlayoutmanager/tests/TextLayoutManagerTest.cpp
  ${REACT_COMMON_DIR}/react/renderer/uimanager/tests/FabricUIManagerTest.cpp

  ########## (COMPILE BUT FAIL ON ASSERTS) ###########
  # ${REACT_COMMON_DIR}/react/renderer/animations/tests/LayoutAnimationTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/MountingTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/mounting/tests/ShadowTreeLifeCycleTest.cpp

  ########## (COMPILE BUT FAIL WITH RUNTIME EXCEPTIONS) ###########
  # ${REACT_COMMON_DIR}/hermes/inspector-modern/chrome/tests/ConnectionDemuxTests.cpp

  ########## (DO NOT COMPILE) ###########
  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ShadowNodeTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ConcreteShadowNodeTest.cpp
  # ${REACT_COMMON_DIR}/react/renderer/core/tests/ComponentDescriptorTest.cpp
  )

target_compile_reactnative_options(reactnative_unittest PRIVATE)
target_compile_options(reactnative_unittest PRIVATE -DHERMES_ENABLE_DEBUGGER)

target_link_libraries(reactnative_unittest
  fabricjni
  folly_runtime
  glog
  glog_init
  gtest_main
  hermes-engine::libhermes
  hermes_inspector_modern
  jserrorhandler
  jsi
  mapbufferjni
  react_codegen_rncore
  react_cxxreact
  react_debug
  react_renderer_animations
  react_renderer_attributedstring
  react_renderer_core
  react_renderer_css
  react_renderer_debug
  react_renderer_dom
  react_renderer_element
  react_renderer_graphics
  react_renderer_mapbuffer
  react_renderer_mounting
  react_renderer_telemetry
  react_renderer_textlayoutmanager
  react_renderer_uimanager
  react_renderer_uimanager_consistency
  react_utils
  reactnative
  rrc_legacyviewmanagerinterop
  rrc_modal
  rrc_root
  rrc_scrollview
  rrc_text
  rrc_textinput
  rrc_view
  yoga
)
```

----------------------------------------

TITLE: Configure CMake for React Native UI Manager Consistency Library
DESCRIPTION: This CMake script defines the build process for the `react_renderer_uimanager_consistency` object library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers source files, specifies public include directories, links necessary libraries like `glog` and various `react_renderer` components, and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/uimanager/consistency/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_uimanager_consistency_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_uimanager_consistency OBJECT ${react_renderer_uimanager_consistency_SRC})

target_include_directories(react_renderer_uimanager_consistency PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_uimanager_consistency
        glog
        rrc_root
        react_renderer_consistency
        react_renderer_mounting)
target_compile_reactnative_options(react_renderer_uimanager_consistency PRIVATE ""Fabric"")
target_compile_options(react_renderer_uimanager_consistency PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Renderer Element with CMake
DESCRIPTION: This CMake script defines the build process for the `react_renderer_element` component. It sets the minimum required CMake version, enables verbose output, includes common React Native CMake utilities, gathers source files, creates an object library, specifies public include directories, links necessary libraries like Folly, Glog, and React Native renderer components, and applies specific compilation options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/element/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_element_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_element OBJECT ${react_renderer_element_SRC})

target_include_directories(react_renderer_element PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_element
        folly_runtime
        glog
        react_renderer_core
        react_renderer_componentregistry
)
target_compile_reactnative_options(react_renderer_element PRIVATE ""Fabric"")
target_compile_options(react_renderer_element PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Renderer Consistency with CMake
DESCRIPTION: This snippet defines the CMake build process for the 'react_renderer_consistency' object library. It sets the minimum required CMake version, enables verbose makefiles, includes React Native specific flags, collects C++ source files, and configures public include directories and private compile options, including specific warnings and Fabric-related settings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/consistency/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_consistency_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_consistency OBJECT ${react_renderer_consistency_SRC})

target_include_directories(react_renderer_consistency PUBLIC ${REACT_COMMON_DIR})
target_compile_reactnative_options(react_renderer_consistency PRIVATE ""Fabric"")
target_compile_options(react_renderer_consistency PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure CMake for React Native Unimplemented View Library
DESCRIPTION: This CMake script defines a static library named `rrc_unimplementedview`. It gathers all `.cpp` source files, sets public include directories to `REACT_COMMON_DIR`, and links against essential React Native renderer components and common libraries. It also applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/unimplementedview/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_unimplementedview_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_unimplementedview STATIC ${rrc_unimplementedview_SRC})

target_include_directories(rrc_unimplementedview PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_unimplementedview
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_unimplementedview PRIVATE ""Fabric"")
target_compile_options(rrc_unimplementedview PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Progress Bar Component with CMake
DESCRIPTION: This CMake script defines the build process for the 'rrc_progressbar' component. It globs source files, sets public include directories, and links a comprehensive list of React Native and third-party libraries required for the component's functionality, including glog, fbjni, folly_runtime, and various react_renderer components. It also applies specific compile options like -Wpedantic.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/progressbar/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_progressbar_SRC CONFIGURE_DEPENDS android/react/renderer/components/progressbar/*.cpp)
add_library(rrc_progressbar OBJECT ${rrc_progressbar_SRC})

target_include_directories(rrc_progressbar
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}/android/
)

target_link_libraries(rrc_progressbar
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_progressbar PRIVATE ""Fabric"")
target_compile_options(rrc_progressbar PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure CMake for React Native Project
DESCRIPTION: This CMake snippet sets the minimum required CMake version, enables verbose makefile output, includes React Native specific flags, defines an object library named 'oscompat' from C++ source files, and configures its public include directories and private compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/oscompat/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB oscompat_SRC CONFIGURE_DEPENDS *.cpp)
add_library(oscompat OBJECT ${oscompat_SRC})

target_include_directories(oscompat PUBLIC .)
target_compile_reactnative_options(oscompat PRIVATE)
```

----------------------------------------

TITLE: Define React Native Telemetry Renderer Library
DESCRIPTION: Includes common React Native CMake utilities for flag management. It then identifies all C++ source files (`.cpp`) in the current directory and defines an object library named `react_renderer_telemetry` using these sources. The `OBJECT` type means it's an intermediate library not directly linked.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/telemetry/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_telemetry_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_telemetry OBJECT ${react_renderer_telemetry_SRC})
```

----------------------------------------

TITLE: getColorScheme - Initial Enum Definition
DESCRIPTION: Original enum definition for `TestEnum` with `LIGHT`, `DARK`, and `SYSTEM` mapped to `1`, `2`, and `3` respectively, and its usage as a return type for `getColorScheme`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_6

LANGUAGE: javascript
CODE:
```
enum TestEnum {
  LIGHT = 1,
  DARK = 2,
  SYSTEM = 3,
}

export interface Spec extends TurboModule {
  getColorScheme: () => TestEnum;
}
```

----------------------------------------

TITLE: Dark Mode Styling for React Native DevTools Body
DESCRIPTION: This CSS snippet targets the body element within React Native DevTools. It applies a dark background color (rgb(41 42 45)) when the user's system preferences indicate a dark color scheme, ensuring a consistent dark mode experience for the DevTools interface.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/rn_inspector.html#_snippet_0

LANGUAGE: css
CODE:
```
@media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Configure Folly Runtime Static Library with Options and Dependencies
DESCRIPTION: Defines the `folly_runtime` as a static library, applies private and public compile options (including `folly_FLAGS`), sets public include directories, and links necessary external libraries such as `glog`, `double-conversion`, `boost`, `fmt`, and `fast_float`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#_snippet_3

LANGUAGE: CMake
CODE:
```
add_library(folly_runtime STATIC ${folly_runtime_SRC})

target_compile_options(folly_runtime
        PRIVATE
        -fexceptions
        -fno-omit-frame-pointer
        -frtti
        -Wno-sign-compare
        ${folly_FLAGS})

target_compile_options(folly_runtime PUBLIC ${folly_FLAGS})

target_include_directories(folly_runtime PUBLIC .)
target_link_libraries(folly_runtime glog double-conversion boost fmt fast_float)
```

----------------------------------------

TITLE: Run Tests for @react-native/metro-config Package with Yarn and Jest
DESCRIPTION: Provides instructions to run tests for the `@react-native/metro-config` package. It involves installing dependencies once and then executing Jest tests from the React Native root folder.
SOURCE: https://github.com/discord/react-native/blob/master/packages/metro-config/README.md#_snippet_1

LANGUAGE: Shell
CODE:
```
yarn
yarn jest packages/metro-config
```

----------------------------------------

TITLE: Running Fantom Tests from React Native Repository Root
DESCRIPTION: Provides the shell command to execute Fantom tests from the root directory of the React Native repository, with an optional test pattern.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/__docs__/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
yarn fantom [optional test pattern]
```

----------------------------------------

TITLE: Configure React Native Module Interface Compile Definitions in CMake
DESCRIPTION: This CMake snippet sets the ""INTERFACE_COMPILE_DEFINITIONS"" property for numerous React Native internal targets. This property is used to propagate compile definitions (e.g., preprocessor macros) to other targets that link against these modules, ensuring consistent build configurations across the project. It covers core React Native components, JSI, TurboModules, and various renderer and native module implementations.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_16

LANGUAGE: CMake
CODE:
```
$<TARGET_PROPERTY:jsinspector,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:jsinspector_cdp,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:jsinspector_network,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:jsinspector_tracing,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:jsireact,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:mapbufferjni,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_bridging,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_codegen_rncore,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_cxxreact,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_debug,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_devsupportjni,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_featureflags,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_featureflagsjni,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_nativemodule_core,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_nativemodule_defaults,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_nativemodule_dom,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_nativemodule_featureflags,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_nativemodule_idlecallbacks,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_nativemodule_microtasks,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_newarchdefaults,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_performance_timeline,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_animations,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_attributedstring,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_componentregistry,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_consistency,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_core,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_css,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_debug,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_dom,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_element,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_graphics,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_imagemanager,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_leakchecker,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_mapbuffer,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_mounting,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_observers_events,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_runtimescheduler,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_scheduler,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_telemetry,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_textlayoutmanager,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_uimanager,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_renderer_uimanager_consistency,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:react_utils,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:reactnativeblob,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:reactnativejni,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:reactnativejni_common,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:reactperflogger,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rninstance,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_image,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_legacyviewmanagerinterop,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_modal,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_native,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_progressbar,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_root,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_safeareaview,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_scrollview,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_switch,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_text,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_textinput,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:rrc_view,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:runtimeexecutor,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:turbomodulejsijni,INTERFACE_COMPILE_DEFINITIONS>
$<TARGET_PROPERTY:uimanagerjni,INTERFACE_COMPILE_DEFINITIONS>
```

----------------------------------------

TITLE: setColorScheme - Initial Union Type
DESCRIPTION: Original interface for the `setColorScheme` method, accepting a union type of 'light' or 'dark' for color schemes. This represents the expected input for an older native client.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-compatibility-check/README.md#_snippet_4

LANGUAGE: javascript
CODE:
```
export interface Spec extends TurboModule {
  // You add 'system' to this union
  +setColorScheme: (color: 'light' | 'dark') => void;
}
```

----------------------------------------

TITLE: CSS Dark Mode Styling for DevTools
DESCRIPTION: This CSS snippet applies a dark background color (rgb(41 42 45)) to the body element when the user's system prefers a dark color scheme. This is commonly used in browser developer tools or web applications to provide a consistent dark theme experience.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/js_app.html#_snippet_0

LANGUAGE: CSS
CODE:
```
@media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Configure Hermes Instance JNI Library Build with CMake
DESCRIPTION: This CMake snippet sets up the build for the 'hermesinstancejni' library. It includes minimum CMake version requirements, verbose makefile settings, and utility includes. It then globs C++ source files, defines the library as an object, specifies include directories, enables shared object merging, and links essential libraries like 'hermes-engine', 'jsitooling', 'fbjni', 'bridgelesshermes', and 'reactnative'. Finally, it applies React Native specific compile options and enables debugger support in debug configurations.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/runtime/hermes/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE hermes_instance_jni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(hermesinstancejni
        OBJECT
        ${hermes_instance_jni_SRC}
)
target_include_directories(hermesinstancejni PRIVATE .)
target_merge_so(hermesinstancejni)

target_link_libraries(hermesinstancejni
        hermes-engine::libhermes
        jsitooling
        fbjni
        bridgelesshermes
        reactnative
)

target_compile_reactnative_options(hermesinstancejni PRIVATE)
target_compile_options(hermesinstancejni PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)
```

----------------------------------------

TITLE: Run Tests for @react-native/eslint-plugin
DESCRIPTION: This command executes the Jest tests specifically for the `@react-native/eslint-plugin` package. It should be run from the React Native root folder after all dependencies have been installed, ensuring the plugin's functionality is validated.
SOURCE: https://github.com/discord/react-native/blob/master/packages/eslint-plugin-react-native/README.md#_snippet_2

LANGUAGE: shell
CODE:
```
yarn jest packages/eslint-plugin-react-native
```

----------------------------------------

TITLE: CMake Configuration for React Native SafeAreaView Component
DESCRIPTION: This CMakeLists.txt file defines the build process for the `rrc_safeareaview` static library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers source files, adds the library, specifies public include directories, links necessary libraries like `glog`, `fbjni`, `folly_runtime`, and various React Native renderer components, and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/safeareaview/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_safeareaview_SRCS CONFIGURE_DEPENDS *.cpp)

add_library(
        rrc_safeareaview
        STATIC
        ${rrc_safeareaview_SRCS}
)

target_include_directories(rrc_safeareaview PUBLIC .)

target_link_libraries(
        rrc_safeareaview
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)

target_compile_reactnative_options(rrc_safeareaview PRIVATE ""Fabric"")
target_compile_options(rrc_safeareaview PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Apply Dark Mode Styling in React Native DevTools
DESCRIPTION: This CSS snippet applies a dark background color to the body element within React Native DevTools when the user's system prefers a dark color scheme. This enhances readability and user experience in dark mode environments.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/rn_fusebox.html#_snippet_0

LANGUAGE: CSS
CODE:
```
@media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Configure Boost ASM for React Native Folly Futures with CMake
DESCRIPTION: This CMake script configures the build system to include Boost ASM files, which are essential for compiling Folly futures in a React Native project. It enables the ASM language, recursively finds Boost ASM source files for different Android ABIs, creates a static library named 'boost', sets its linker language to CXX, specifies include directories, and applies necessary compile options like -fexceptions and -frtti.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/boost/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

# These ASM files are picked from the boost release separately,
# because the react native version does not include anything outside of headers.
# They are required for Folly futures to compile successfully.
ENABLE_LANGUAGE(ASM)
file(GLOB_RECURSE
        boostasm_SRC
        CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/asm/${ANDROID_ABI}/*.S)
add_library(boost STATIC ${boostasm_SRC})

set_target_properties(boost PROPERTIES LINKER_LANGUAGE CXX)

target_include_directories(boost PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/boost_1_83_0)
target_compile_options(boost PRIVATE -fexceptions -frtti)
```

----------------------------------------

TITLE: CSS Dark Mode Styling for DevTools
DESCRIPTION: This CSS snippet applies a dark background color to the body element when the user's system prefers a dark color scheme. This is typically observed and applied within browser DevTools environments to match the dark theme of the tools themselves.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/worker_app.html#_snippet_0

LANGUAGE: CSS
CODE:
```
@media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Configure React Native Bridgeless Library with CMake
DESCRIPTION: This CMake snippet defines the build process for the 'bridgeless' library. It sets the minimum CMake version, enables verbose makefile output, includes React Native specific flags, gathers C++ source files, creates an object library, applies React Native compilation options, enables debugger flags for Debug builds, specifies include directories, and links a comprehensive list of internal React Native JNI and JSI libraries.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/runtime/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB bridgeless_SRC ""*.cpp"")

add_library(bridgeless
        OBJECT
        ${bridgeless_SRC}
)
target_compile_reactnative_options(bridgeless PRIVATE)
target_compile_options(bridgeless PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)
target_include_directories(bridgeless PUBLIC .)

target_link_libraries(
        bridgeless
        jserrorhandler
        fabricjni
        react_featureflagsjni
        turbomodulejsijni
        jsi
        jsitooling
        jsireact
        react_utils
        jsinspector
        react_featureflags
        react_performance_timeline
        react_utils
)
```

----------------------------------------

TITLE: Configure React Native JNI Library Build with CMake
DESCRIPTION: This CMakeLists.txt snippet sets up the build rules for the `rninstance` JNI library. It includes utility modules for shared object merging and React Native-specific flags, defines source files using `GLOB_RECURSE`, applies compile options (including debug flags), and links a comprehensive list of required libraries such as `fabricjni`, `turbomodulejsijni`, and `jsi`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/runtime/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_jni_SRC CONFIGURE_DEPENDS *.cpp)

add_library(rninstance
        OBJECT
        ${bridgeless_jni_SRC}
)

target_compile_reactnative_options(rninstance PRIVATE)
target_compile_options(rninstance PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)

target_merge_so(rninstance)
target_include_directories(rninstance PUBLIC .)
target_link_libraries(
        rninstance
        fabricjni
        react_featureflagsjni
        turbomodulejsijni
        jsi
        jsitooling
        fbjni
        bridgeless
)
```

----------------------------------------

TITLE: Update React Native Debugger Frontend Assets
DESCRIPTION: This shell script command is used to update the compiled debugger frontend assets. It runs a Node.js script from the root of your `react-native` checkout, allowing synchronization and building from a specified branch (e.g., `main` or a stable release branch like `0.73-stable`).
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/README.md#_snippet_1

LANGUAGE: sh
CODE:
```
# For main
node scripts/debugger-frontend/sync-and-build --branch main

# For stable branches (e.g. '0.73-stable')
node scripts/debugger-frontend/sync-and-build --branch 0.73-stable
```

----------------------------------------

TITLE: CMake Configuration for React Native Core Module
DESCRIPTION: This CMake script configures the `react_nativemodule_core` library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers source files from `ReactCommon` and `platform/android/ReactCommon`, defines include directories, and links various dependencies such as `fbjni`, `folly_runtime`, `glog`, `jsi`, and other React Native internal libraries. It also applies specific compile options for the module.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/core/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_core_SRC CONFIGURE_DEPENDS
        ReactCommon/*.cpp
        platform/android/ReactCommon/*.cpp)
add_library(react_nativemodule_core
        OBJECT
        ${react_nativemodule_core_SRC})

target_include_directories(react_nativemodule_core
        PUBLIC
          ${CMAKE_CURRENT_SOURCE_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        )

target_link_libraries(react_nativemodule_core
        fbjni
        folly_runtime
        glog
        jsi
        react_bridging
        react_debug
        react_utils
        react_featureflags
        reactperflogger
        reactnativejni)
target_compile_reactnative_options(react_nativemodule_core PRIVATE ""ReactNative"")
target_compile_options(react_nativemodule_core PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: CMake Configuration for React Native Fabric Library
DESCRIPTION: This CMake script defines the `rrc_root` object library, essential for a React Native Fabric-enabled project. It specifies the minimum CMake version, enables verbose output, incorporates React Native build flags, gathers source files, sets include paths, links critical dependencies like Folly, Glog, and React Native renderer components, and applies specific compile options for Fabric and strict code adherence.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/root/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_root_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_root OBJECT ${rrc_root_SRC})

target_include_directories(rrc_root PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_root
        folly_runtime
        glog
        glog_init
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_root PRIVATE ""Fabric"")
target_compile_options(rrc_root PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Apply Dark Mode Background in DevTools CSS
DESCRIPTION: This CSS snippet uses a media query to detect if the user's system prefers a dark color scheme. If so, it sets the background color of the body element to a dark RGB value, commonly used in developer tools or web applications to provide a dark mode experience.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/node_app.html#_snippet_0

LANGUAGE: CSS
CODE:
```
DevTools @media (prefers-color-scheme: dark) { body { background-color: rgb(41 42 45); } }
```

----------------------------------------

TITLE: Configure turbomodulejsijni (react_nativemodule_manager) CMake Library
DESCRIPTION: This snippet defines the `turbomodulejsijni` OBJECT library, which is intended to be renamed `react_nativemodule_manager`. It specifies its source files, includes object targets from `logger` and `react_bridging`, and sets public include directories. The library also merges shared objects, links dependencies such as `fbjni`, `jsi`, `react_nativemodule_core`, `callinvokerholder`, and `reactperfloggerjni`, and applies React Native specific compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/turbomodule/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
add_library(
        turbomodulejsijni
        OBJECT
        ReactCommon/BindingsInstallerHolder.cpp
        ReactCommon/OnLoad.cpp
        ReactCommon/TurboModuleManager.cpp
        $<TARGET_OBJECTS:logger>
        $<TARGET_OBJECTS:react_bridging>
)
target_merge_so(turbomodulejsijni)

target_include_directories(
        turbomodulejsijni
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(turbomodulejsijni
        fbjni
        jsi
        react_nativemodule_core
        callinvokerholder
        reactperfloggerjni)
target_compile_reactnative_options(turbomodulejsijni PRIVATE)
```

----------------------------------------

TITLE: Define Common React Native Subdirectory Build Targets
DESCRIPTION: This snippet lists common subdirectories that are added as build targets for a React Native project. These targets encompass core components like Yoga, runtime executors, JSI, CxxReact, and various rendering and debugging utilities, essential for cross-platform React Native functionality.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_9

LANGUAGE: CMake
CODE:
```
add_react_common_subdir(yoga)
add_react_common_subdir(runtimeexecutor)
add_react_common_subdir(reactperflogger)
add_react_common_subdir(logger)
add_react_common_subdir(jsiexecutor)
add_react_common_subdir(jsitooling)
add_react_common_subdir(cxxreact)
add_react_common_subdir(jsc)
add_react_common_subdir(jsi)
add_react_common_subdir(callinvoker)
add_react_common_subdir(oscompat)
add_react_common_subdir(jsinspector-modern)
add_react_common_subdir(jsinspector-modern/cdp)
add_react_common_subdir(jsinspector-modern/network)
add_react_common_subdir(jsinspector-modern/tracing)
add_react_common_subdir(hermes/executor)
add_react_common_subdir(hermes/inspector-modern)
add_react_common_subdir(react/renderer/runtimescheduler)
add_react_common_subdir(react/debug)
add_react_common_subdir(react/featureflags)
add_react_common_subdir(react/performance/timeline)
add_react_common_subdir(react/renderer/animations)
add_react_common_subdir(react/renderer/attributedstring)
add_react_common_subdir(react/renderer/componentregistry)
add_react_common_subdir(react/renderer/mounting)
add_react_common_subdir(react/renderer/scheduler)
add_react_common_subdir(react/renderer/telemetry)
add_react_common_subdir(react/renderer/uimanager)
add_react_common_subdir(react/renderer/core)
add_react_common_subdir(react/renderer/consistency)
add_react_common_subdir(react/renderer/css)
add_react_common_subdir(react/renderer/uimanager/consistency)
add_react_common_subdir(react/renderer/dom)
add_react_common_subdir(react/renderer/element)
add_react_common_subdir(react/renderer/graphics)
add_react_common_subdir(react/renderer/debug)
add_react_common_subdir(react/renderer/imagemanager)
add_react_common_subdir(react/renderer/components/view)
add_react_common_subdir(react/renderer/components/switch)
add_react_common_subdir(react/renderer/components/textinput)
add_react_common_subdir(react/renderer/components/progressbar)
add_react_common_subdir(react/renderer/components/root)
add_react_common_subdir(react/renderer/components/image)
add_react_common_subdir(react/renderer/components/legacyviewmanagerinterop)
add_react_common_subdir(react/renderer/componentregistry/native)
add_react_common_subdir(react/renderer/components/text)
add_react_common_subdir(react/renderer/components/unimplementedview)
add_react_common_subdir(react/renderer/components/modal)
add_react_common_subdir(react/renderer/components/scrollview)
add_react_common_subdir(react/renderer/components/safeareaview)
add_react_common_subdir(react/renderer/leakchecker)
add_react_common_subdir(react/renderer/observers/events)
add_react_common_subdir(react/renderer/textlayoutmanager)
add_react_common_subdir(react/utils)
add_react_common_subdir(react/bridging)
add_react_common_subdir(react/renderer/mapbuffer)
add_react_common_subdir(react/nativemodule/core)
add_react_common_subdir(react/nativemodule/defaults)
add_react_common_subdir(react/nativemodule/dom)
add_react_common_subdir(react/nativemodule/featureflags)
add_react_common_subdir(react/nativemodule/microtasks)
add_react_common_subdir(react/nativemodule/idlecallbacks)
add_react_common_subdir(jserrorhandler)
add_react_common_subdir(react/runtime)
add_react_common_subdir(react/runtime/hermes)
add_react_common_subdir(react/runtime/nativeviewconfig)
add_react_common_subdir(react/timing)
```

----------------------------------------

TITLE: CMake Configuration for React Native Yoga Library
DESCRIPTION: This CMake script configures the `yoga` library within a React Native project. It sets the minimum CMake version, enables verbose makefiles, includes utility scripts for JNI library merging and React Native flags, defines the `yoga` object library from C++ sources, specifies public include directories, merges shared objects, links against `yogacore`, `fbjni`, `log`, and `android` libraries, and applies React Native specific and general compilation options like hidden visibility and optimization.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/first-party/yogajni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB yoga_SRC CONFIGURE_DEPENDS jni/*.cpp)
add_library(yoga OBJECT ${yoga_SRC})

target_include_directories(yoga PUBLIC jni)
target_merge_so(yoga)

target_link_libraries(yoga
        yogacore
        fbjni
        log
        android
)

target_compile_reactnative_options(yoga PRIVATE)
target_compile_options(yoga PRIVATE -fvisibility=hidden -O3)
```

----------------------------------------

TITLE: Configure Hermes Executor Common Library with CMake
DESCRIPTION: This CMake snippet defines the build process for the `hermes_executor_common` library. It recursively collects C++ source files, sets up include directories, and links against essential libraries such as `hermes-engine`, `hermes_inspector_modern`, `jsi`, and `reactnative`. Additionally, it applies specific compilation flags based on the build type, enabling the debugger for debug builds and optimizing for release builds.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/hermes/executor/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        hermes_executor_common
        OBJECT
        ${hermes_executor_SRC}
)
target_include_directories(hermes_executor_common PUBLIC .)
target_link_libraries(hermes_executor_common
        hermes-engine::libhermes
        hermes_inspector_modern
        jsi
        reactnative
)

target_compile_reactnative_options(hermes_executor_common PRIVATE)
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                hermes_executor_common
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
else()
        target_compile_options(
                hermes_executor_common
                PRIVATE
                -DNDEBUG
        )
endif()
```

----------------------------------------

TITLE: Set CMake Minimum Version and Project Name
DESCRIPTION: This snippet sets the minimum required CMake version to 3.13, enables verbose makefile output for detailed build information, and defines the project name as 'ReactAndroid'. These are fundamental configurations for any CMake-based project.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

project(ReactAndroid)
```

----------------------------------------

TITLE: Configure React Native Fabric Renderer Component Registry with CMake
DESCRIPTION: This CMake script configures the `react_renderer_componentregistry` object library. It specifies the minimum CMake version, enables verbose output, includes React Native specific flags, gathers source files, defines public include directories, and links against essential libraries like `folly_runtime`, `jsi`, and various `react_renderer` components. Additionally, it applies specific compile options for Fabric and `-Wpedantic`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/componentregistry/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_componentregistry_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_componentregistry OBJECT ${react_renderer_componentregistry_SRC})

target_include_directories(react_renderer_componentregistry PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_componentregistry
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        rrc_legacyviewmanagerinterop
)
target_compile_reactnative_options(react_renderer_componentregistry PRIVATE ""Fabric"")
target_compile_options(react_renderer_componentregistry PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: CMake Configuration for React Native ScrollView Component
DESCRIPTION: This CMakeLists.txt file defines the build process for the `rrc_scrollview` static library, a core component of React Native's Fabric rendering system. It specifies the source files, public include directories, and links necessary libraries such as `glog`, `folly_runtime`, `jsi`, and various `react_renderer` components. Additionally, it applies specific compile options for Fabric and sets a pedantic warning flag.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/scrollview/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_scrollview_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/renderer/components/scrollview/*.cpp)
add_library(rrc_scrollview STATIC ${rrc_scrollview_SRC})

target_include_directories(rrc_scrollview PUBLIC ${REACT_COMMON_DIR} . ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_link_libraries(rrc_scrollview
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_scrollview PRIVATE ""Fabric"")
target_compile_options(rrc_scrollview PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Text Component with CMake
DESCRIPTION: This CMake script defines the build process for the 'rrc_text' component. It specifies the minimum CMake version, enables verbose makefiles, includes React Native common flags, globs source files, defines an object library, sets public and private include directories, links required libraries like 'glog', 'folly_runtime', 'jsi', and various 'react_renderer' components, and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/text/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_text_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/components/text/*.cpp)

add_library(rrc_text OBJECT ${rrc_text_SRC})

target_include_directories(rrc_text PUBLIC
        ${REACT_COMMON_DIR}
        ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/)

target_include_directories(rrc_text PRIVATE
        ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/react/renderer/components/text/)

target_link_libraries(rrc_text
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_attributedstring
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_textlayoutmanager
        react_utils
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_text PRIVATE ""Fabric"")
target_compile_options(rrc_text PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Fabric View Component with CMake
DESCRIPTION: This CMake script defines an object library 'rrc_view' for a React Native Fabric view component. It specifies the minimum CMake version, includes common React Native flags, gathers source files, sets public include directories, links essential libraries (like folly, glog, jsi, react_renderer_core, yoga), and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/view/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_view_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/components/view/*.cpp)

add_library(rrc_view OBJECT ${rrc_view_SRC})

target_include_directories(rrc_view
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
)

target_link_libraries(rrc_view
        folly_runtime
        glog
        glog_init
        jsi
        logger
        react_debug
        react_renderer_core
        react_renderer_css
        react_renderer_debug
        react_renderer_graphics
        yoga)
target_compile_reactnative_options(rrc_view PRIVATE ""Fabric"")
target_compile_options(rrc_view PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Graphics Renderer with CMake
DESCRIPTION: This CMake script defines the build process for the 'react_renderer_graphics' library. It sets the minimum CMake version, enables verbose makefiles, includes React Native common flags, gathers source files, creates an object library, specifies public include directories, links against various libraries (glog, fbjni, folly_runtime, react_debug, react_utils), and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/graphics/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_graphics_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_graphics OBJECT ${react_renderer_graphics_SRC})

target_include_directories(react_renderer_graphics
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
        )

target_link_libraries(react_renderer_graphics
        glog
        fbjni
        folly_runtime
        react_debug
        react_utils
)
target_compile_reactnative_options(react_renderer_graphics PRIVATE ""Fabric"")
target_compile_options(react_renderer_graphics PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native JNI Performance Logger Library with CMake
DESCRIPTION: This CMake script defines and configures the 'reactperfloggerjni' interface library. It sets up the build environment by specifying the minimum CMake version, enabling verbose output, and including common React Native build flags. The library's include paths are defined, and it is linked against essential dependencies such as 'fbjni', 'android', and 'reactperflogger'. Finally, React Native-specific compile options are applied to ensure proper integration.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/reactperflogger/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(reactperfloggerjni INTERFACE)

target_include_directories(reactperfloggerjni
        INTERFACE
          ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(reactperfloggerjni
        INTERFACE
        fbjni
        android
        reactperflogger)

target_compile_reactnative_options(reactperfloggerjni INTERFACE)
```

----------------------------------------

TITLE: CMake Configuration for React Native Attributed String Renderer
DESCRIPTION: This CMake script defines the build process for the 'react_renderer_attributedstring' library. It sets the minimum required CMake version, enables verbose makefiles, includes React Native common flags, gathers source files, creates an object library, specifies public include directories, links against various React Native and third-party libraries (like folly, glog, yoga), and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/attributedstring/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_attributedstring_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_attributedstring OBJECT ${react_renderer_attributedstring_SRC})

target_include_directories(react_renderer_attributedstring PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_attributedstring
        folly_runtime
        glog
        glog_init
        react_debug
        rrc_view
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_utils
        rrc_view
        yoga
)
target_compile_reactnative_options(react_renderer_attributedstring PRIVATE ""Fabric"")
target_compile_options(react_renderer_attributedstring PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: CMake: Configure React Native Interface Compile Definitions
DESCRIPTION: This CMake snippet defines public compile definitions for the 'reactnative' target. These definitions are typically used to enable or disable features, or to provide configuration values at compile time, linking various internal React Native components like 'bridgeless', 'fabricjni', and 'glog_init'.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_15

LANGUAGE: CMake
CODE:
```
target_compile_definitions(reactnative
        PUBLIC
        $<TARGET_PROPERTY:bridgeless,INTERFACE_COMPILE_DEFINITIONS>
        $<TARGET_PROPERTY:bridgelessnativeviewconfig,INTERFACE_COMPILE_DEFINITIONS>
        $<TARGET_PROPERTY:callinvokerholder,INTERFACE_COMPILE_DEFINITIONS>
        $<TARGET_PROPERTY:fabricjni,INTERFACE_COMPILE_DEFINITIONS>
        $<TARGET_PROPERTY:glog_init,INTERFACE_COMPILE_DEFINITIONS>
        $<TARGET_PROPERTY:jserrorhandler,INTERFACE_COMPILE_DEFINITIONS>
```

----------------------------------------

TITLE: Configure React Native Module Defaults with CMake
DESCRIPTION: This CMake configuration file defines the build process for the `react_nativemodule_defaults` library. It sets the minimum CMake version, enables verbose makefiles, includes common React Native flags, gathers source files, defines the object library, specifies include directories, links necessary React Native modules, and applies specific compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/defaults/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_defaults_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_defaults OBJECT ${react_nativemodule_defaults_SRC})

target_include_directories(react_nativemodule_defaults PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_defaults
        react_nativemodule_dom
        react_nativemodule_devtoolsruntimesettings
        react_nativemodule_featureflags
        react_nativemodule_microtasks
        react_nativemodule_idlecallbacks
)
target_compile_reactnative_options(react_nativemodule_defaults PRIVATE ""ReactNative"")
target_compile_options(react_nativemodule_defaults PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Module with CMake
DESCRIPTION: This CMake script defines the build process for a React Native module named `react_nativemodule_microtasks`. It sets the minimum CMake version, enables verbose output, includes common React Native flags, collects C++ source files, creates an object library, specifies include directories, links against core React Native libraries, and applies specific compilation options like `-Wpedantic`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/microtasks/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_microtasks_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_microtasks OBJECT ${react_nativemodule_microtasks_SRC})

target_include_directories(react_nativemodule_microtasks PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_microtasks
        react_codegen_rncore
        react_cxxreact
)
target_compile_reactnative_options(react_nativemodule_microtasks PRIVATE ""ReactNative"")
target_compile_options(react_nativemodule_microtasks PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Component Build with CMake
DESCRIPTION: This CMakeLists.txt file defines the build process for a React Native native component named `rrc_native`. It specifies the minimum CMake version, includes common React Native build flags, gathers source files, creates an object library, sets public include directories, links essential React Native and Folly libraries, and applies specific compile options for Fabric support and strict warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/componentregistry/native/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_native_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_native OBJECT ${rrc_native_SRC})

target_include_directories(rrc_native PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_native
        folly_runtime
        glog_init
        jsi
        react_debug
        react_renderer_core
        react_renderer_debug
        react_utils
        callinvoker
)
target_compile_reactnative_options(rrc_native PRIVATE ""Fabric"")
target_compile_options(rrc_native PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Android Switch Component with CMake
DESCRIPTION: This CMakeLists.txt file defines the build process for the 'rrc_switch' static library, a core component for React Native Android. It specifies the minimum CMake version, includes common React Native flags, gathers C++ source files, adds the library, sets public include directories, links necessary libraries (like glog, fbjni, folly_runtime, react_codegen_rncore, etc.), and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/switch/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_switch_SRCS CONFIGURE_DEPENDS androidswitch/react/renderer/components/androidswitch/*.cpp)

add_library(
        rrc_switch
        STATIC
        ${rrc_switch_SRCS}
)

target_include_directories(rrc_switch PUBLIC androidswitch/)

target_link_libraries(
        rrc_switch
        glog
        fbjni
        folly_runtime
        glog_init
        react_codegen_rncore
        react_debug
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_uimanager
        reactnativejni
        rrc_view
        yoga
)

target_compile_reactnative_options(rrc_switch PRIVATE ""Fabric"")
target_compile_options(rrc_switch PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Include React Native Common CMake Flags
DESCRIPTION: This line includes a CMake file that likely contains common build flags and configurations specific to React Native projects. It centralizes shared settings to ensure consistency across different modules.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_2

LANGUAGE: CMake
CODE:
```
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
```

----------------------------------------

TITLE: Define Folly Runtime Library Source Files
DESCRIPTION: Lists all the C++ source files that constitute the `folly_runtime` static library, including various utility, concurrency, container, and system-related components from the Folly library.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#_snippet_2

LANGUAGE: CMake
CODE:
```
SET(folly_runtime_SRC
        folly/Conv.cpp
        folly/Demangle.cpp
        folly/FileUtil.cpp
        folly/Format.cpp
        folly/ScopeGuard.cpp
        folly/SharedMutex.cpp
        folly/String.cpp
        folly/Unicode.cpp
        folly/concurrency/CacheLocality.cpp
        folly/container/detail/F14Table.cpp
        folly/detail/FileUtilDetail.cpp
        folly/detail/Futex.cpp
        folly/detail/SplitStringSimd.cpp
        folly/detail/UniqueInstance.cpp
        folly/hash/SpookyHashV2.cpp
        folly/json/dynamic.cpp
        folly/json/json_pointer.cpp
        folly/json/json.cpp
        folly/lang/CString.cpp
        folly/lang/SafeAssert.cpp
        folly/lang/ToAscii.cpp
        folly/memory/detail/MallocImpl.cpp
        folly/net/NetOps.cpp
        folly/portability/SysUio.cpp
        folly/synchronization/SanitizeThread.cpp
        folly/synchronization/ParkingLot.cpp
        folly/system/AtFork.cpp
        folly/system/ThreadId.cpp)
```

----------------------------------------

TITLE: Configure React Native CSS Renderer CMake Library
DESCRIPTION: This CMake configuration defines the `react_renderer_css` library. It conditionally compiles it as an `INTERFACE` library if no source files are found (header-only) or as an `OBJECT` library if C++ source files are present. It sets include directories, links dependencies like `fast_float`, `glog`, `react_debug`, and `react_utils`, and applies specific compile options for Fabric.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/css/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_css_SRC CONFIGURE_DEPENDS *.cpp)

# We need to create library as INTERFACE if it is header only
if(""${react_renderer_css_SRC}"" STREQUAL """")
  add_library(react_renderer_css INTERFACE)

  target_include_directories(react_renderer_css INTERFACE ${REACT_COMMON_DIR})
  target_link_libraries(react_renderer_css INTERFACE
        fast_float
        glog
        react_debug
        react_utils)
  target_compile_reactnative_options(react_renderer_css INTERFACE ""Fabric"")
  target_compile_options(react_renderer_css INTERFACE -Wpedantic)
else()
  add_library(react_renderer_css OBJECT ${react_renderer_css_SRC})

  target_include_directories(react_renderer_css PUBLIC ${REACT_COMMON_DIR})
  target_link_libraries(react_renderer_css
        fast_float
        glog
        react_debug
        react_utils)
  target_compile_reactnative_options(react_renderer_css PRIVATE ""Fabric"")
  target_compile_options(react_renderer_css PRIVATE -Wpedantic)
endif()
```

----------------------------------------

TITLE: CMake Configuration for React Native rrc_image Library
DESCRIPTION: This CMake script defines the `rrc_image` object library for a React Native project. It sets CMake version requirements, enables verbose makefiles, includes common React Native build flags, gathers source files, specifies public include directories, and links essential dependencies like `glog`, `folly_runtime`, `jsi`, and various `react_renderer` components. It also applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/image/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_image_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_image OBJECT ${rrc_image_SRC})

target_include_directories(rrc_image PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_image
        glog
        folly_runtime
        glog_init
        jsi
        react_debug
        react_utils
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_mapbuffer
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_image PRIVATE ""Fabric"")
target_compile_options(rrc_image PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure CMake Build for React Native C++ Module
DESCRIPTION: This CMake script sets up the build environment for a C++ module named `jsinspector_cdp` within a React Native project. It specifies the minimum CMake version, enables verbose makefiles, includes utility functions for shared object merging, defines C++ compiler options (exceptions, C++20 standard, warnings), gathers source files, creates an object library, merges shared objects, sets include directories, and links against `folly_runtime`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsinspector-modern/cdp/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_compile_options(
        -fexceptions
        -std=c++20
        -Wall
        -Wpedantic)

file(GLOB jsinspector_cdp_SRC CONFIGURE_DEPENDS *.cpp)

add_library(jsinspector_cdp OBJECT ${jsinspector_cdp_SRC})
target_merge_so(jsinspector_cdp)

target_include_directories(jsinspector_cdp PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector_cdp
        folly_runtime
)
```

----------------------------------------

TITLE: Configure React Native Modal Module with CMake
DESCRIPTION: This CMake script defines the build process for the 'rrc_modal' static library, a React Native component. It sets the minimum CMake version, enables verbose makefiles, includes React Native common flags, gathers source files, specifies public include directories, and links the library against various React Native renderer components, glog, folly, and Yoga. It also applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/components/modal/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB rrc_modal_SRC CONFIGURE_DEPENDS *.cpp)
add_library(rrc_modal STATIC ${rrc_modal_SRC})

target_include_directories(rrc_modal PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(rrc_modal
        glog
        folly_runtime
        glog_init
        react_codegen_rncore
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_imagemanager
        react_renderer_uimanager
        rrc_image
        rrc_view
        yoga
)
target_compile_reactnative_options(rrc_modal PRIVATE ""Fabric"")
target_compile_options(rrc_modal PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Native Module Build with CMake
DESCRIPTION: This CMake script defines the build process for a native React Native library named 'reactnativeblob'. It sets up the minimum CMake version, includes necessary React Native utility scripts, compiles C++ source files into an object library, configures include directories, merges shared objects, and links essential libraries like JSI, Folly, and React Native JNI. It also applies specific compile options for symbol visibility.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/reactnativeblob/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)


include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB reactnativeblob_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(reactnativeblob OBJECT ${reactnativeblob_SRC})

target_include_directories(reactnativeblob PRIVATE ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(reactnativeblob)

target_link_libraries(reactnativeblob
        jsireact
        fbjni
        folly_runtime
        jsi
        reactnativejni)

target_compile_reactnative_options(reactnativeblob PRIVATE)
target_compile_options(reactnativeblob PRIVATE -fvisibility=hidden)
```

----------------------------------------

TITLE: Configure React Native MapBuffer JNI Library with CMake
DESCRIPTION: This CMake script defines the build process for the `mapbufferjni` object library. It includes necessary utility files, gathers source files, sets public and private include directories, configures shared object merging, links against various dependencies like `fbjni`, `folly_runtime`, and `react_renderer_mapbuffer`, and applies specific React Native compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/mapbuffer/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB mapbuffer_SRC CONFIGURE_DEPENDS
        ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/*.cpp)

add_library(mapbufferjni OBJECT ${mapbuffer_SRC})

target_include_directories(mapbufferjni
        PUBLIC
          ${CMAKE_CURRENT_SOURCE_DIR}
        PRIVATE
          ${CMAKE_CURRENT_SOURCE_DIR}/react/common/mapbuffer/
)

target_merge_so(mapbufferjni)

target_link_libraries(mapbufferjni
        fbjni
        folly_runtime
        glog
        glog_init
        react_debug
        react_renderer_mapbuffer
        react_utils
        yoga
)

target_compile_reactnative_options(mapbufferjni PRIVATE ""Fabric"")
```

----------------------------------------

TITLE: Configure glog library for React Native with CMake
DESCRIPTION: This CMake script configures the glog library for use within a React Native project. It sets the minimum CMake version, includes React Native specific flags, defines glog as a static library from its source files, specifies public and private include directories, and applies various compile options including warning suppression and optimization flags.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/glog/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(glog
        STATIC
        glog-0.3.5/src/demangle.cc
        glog-0.3.5/src/logging.cc
        glog-0.3.5/src/raw_logging.cc
        glog-0.3.5/src/signalhandler.cc
        glog-0.3.5/src/symbolize.cc
        glog-0.3.5/src/utilities.cc
        glog-0.3.5/src/vlog_is_on.cc
        )

# For private compilation, we include all the headers.
# config.h is also there.
target_include_directories(glog PRIVATE .)
# For consumer, we set the `exported` dir as the
# include folder.
target_include_directories(glog PUBLIC exported)

target_compile_reactnative_options(glog PRIVATE)

target_compile_options(glog PRIVATE
        -Wwrite-strings
        -Woverloaded-virtual
        -Wno-sign-compare
        -DNDEBUG
        -g
        -O2
        -DHAVE_PREAD=1
)
```

----------------------------------------

TITLE: CMake Build Configuration for jsinspector Library
DESCRIPTION: This CMake configuration script defines the build process for the `jsinspector` library. It includes setting the minimum CMake version, incorporating utility scripts for React Native, globbing source files, creating an object library, merging shared objects, specifying public include directories, linking against required libraries (folly_runtime, glog, jsinspector_network, jsinspector_tracing, react_featureflags, runtimeexecutor), and applying conditional compile options for debug configurations.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsinspector-modern/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB jsinspector_SRC CONFIGURE_DEPENDS *.cpp)
# jsinspector contains singletons that hold app-global state (InspectorFlags, InspectorImpl).
# Placing it in a shared library makes the singletons safe to use from arbitrary shared libraries
# (even ones that don't depend on one another).
add_library(jsinspector OBJECT ${jsinspector_SRC})
target_merge_so(jsinspector)

target_include_directories(jsinspector PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(jsinspector
        folly_runtime
        glog
        jsinspector_network
        jsinspector_tracing
        react_featureflags
        runtimeexecutor
)
target_compile_reactnative_options(jsinspector PRIVATE)
target_compile_options(jsinspector PRIVATE
        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED=1>
        $<$<CONFIG:Debug>:-DREACT_NATIVE_DEBUGGER_ENABLED_DEVONLY=1>
)
```

----------------------------------------

TITLE: Configure React Native Shared Library in CMake
DESCRIPTION: This CMake script defines the `reactnative` shared library, consolidating numerous object files into a single `.so` file for Android. It also specifies public linking dependencies and interface include directories required for building the React Native library.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_13

LANGUAGE: CMake
CODE:
```
# This is needed in order to reduce the number of .so files that we ship in the final library
add_library(reactnative
        SHARED
          $<TARGET_OBJECTS:bridgeless>
          $<TARGET_OBJECTS:bridgelessnativeviewconfig>
          $<TARGET_OBJECTS:callinvokerholder>
          $<TARGET_OBJECTS:fabricjni>
          $<TARGET_OBJECTS:glog_init>
          $<TARGET_OBJECTS:jni_lib_merge_glue>
          $<TARGET_OBJECTS:jserrorhandler>
          $<TARGET_OBJECTS:jsinspector>
          $<TARGET_OBJECTS:jsitooling>
          $<TARGET_OBJECTS:jsinspector_cdp>
          $<TARGET_OBJECTS:jsinspector_network>
          $<TARGET_OBJECTS:jsinspector_tracing>
          $<TARGET_OBJECTS:jsireact>
          $<TARGET_OBJECTS:logger>
          $<TARGET_OBJECTS:mapbufferjni>
          $<TARGET_OBJECTS:oscompat>
          $<TARGET_OBJECTS:react_bridging>
          $<TARGET_OBJECTS:react_codegen_rncore>
          $<TARGET_OBJECTS:react_cxxreact>
          $<TARGET_OBJECTS:react_debug>
          $<TARGET_OBJECTS:react_devsupportjni>
          $<TARGET_OBJECTS:react_featureflags>
          $<TARGET_OBJECTS:react_featureflagsjni>
          $<TARGET_OBJECTS:react_nativemodule_core>
          $<TARGET_OBJECTS:react_nativemodule_defaults>
          $<TARGET_OBJECTS:react_nativemodule_dom>
          $<TARGET_OBJECTS:react_nativemodule_featureflags>
          $<TARGET_OBJECTS:react_nativemodule_idlecallbacks>
          $<TARGET_OBJECTS:react_nativemodule_microtasks>
          $<TARGET_OBJECTS:react_newarchdefaults>
          $<TARGET_OBJECTS:react_performance_timeline>
          $<TARGET_OBJECTS:react_renderer_animations>
          $<TARGET_OBJECTS:react_renderer_attributedstring>
          $<TARGET_OBJECTS:react_renderer_componentregistry>
          $<TARGET_OBJECTS:react_renderer_consistency>
          $<TARGET_OBJECTS:react_renderer_core>
          $<TARGET_OBJECTS:react_renderer_debug>
          $<TARGET_OBJECTS:react_renderer_dom>
          $<TARGET_OBJECTS:react_renderer_element>
          $<TARGET_OBJECTS:react_renderer_graphics>
          $<TARGET_OBJECTS:react_renderer_imagemanager>
          $<TARGET_OBJECTS:react_renderer_leakchecker>
          $<TARGET_OBJECTS:react_renderer_mapbuffer>
          $<TARGET_OBJECTS:react_renderer_mounting>
          $<TARGET_OBJECTS:react_renderer_observers_events>
          $<TARGET_OBJECTS:react_renderer_runtimescheduler>
          $<TARGET_OBJECTS:react_renderer_scheduler>
          $<TARGET_OBJECTS:react_renderer_telemetry>
          $<TARGET_OBJECTS:react_renderer_textlayoutmanager>
          $<TARGET_OBJECTS:react_renderer_uimanager>
          $<TARGET_OBJECTS:react_renderer_uimanager_consistency>
          $<TARGET_OBJECTS:react_utils>
          $<TARGET_OBJECTS:reactnativeblob>
          $<TARGET_OBJECTS:reactnativejni>
          $<TARGET_OBJECTS:reactnativejni_common>
          $<TARGET_OBJECTS:reactperflogger>
          $<TARGET_OBJECTS:rninstance>
          $<TARGET_OBJECTS:rrc_image>
          $<TARGET_OBJECTS:rrc_legacyviewmanagerinterop>
          $<TARGET_OBJECTS:rrc_modal>
          $<TARGET_OBJECTS:rrc_native>
          $<TARGET_OBJECTS:rrc_progressbar>
          $<TARGET_OBJECTS:rrc_root>
          $<TARGET_OBJECTS:rrc_safeareaview>
          $<TARGET_OBJECTS:rrc_scrollview>
          $<TARGET_OBJECTS:rrc_switch>
          $<TARGET_OBJECTS:rrc_text>
          $<TARGET_OBJECTS:rrc_textinput>
          $<TARGET_OBJECTS:rrc_view>
          $<TARGET_OBJECTS:runtimeexecutor>
          $<TARGET_OBJECTS:turbomodulejsijni>
          $<TARGET_OBJECTS:uimanagerjni>
          $<TARGET_OBJECTS:yoga>
)
target_merge_so(reactnative)

target_link_libraries(reactnative
          PUBLIC
            android
            double-conversion
            fbjni
            folly_runtime
            glog
            jsi
            log
            yogacore
)

target_compile_reactnative_options(reactnative PRIVATE)

target_include_directories(reactnative
        PUBLIC
        $<TARGET_PROPERTY:bridgeless,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:bridgelessnativeviewconfig,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:callinvokerholder,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:fabricjni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:glog_init,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jserrorhandler,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector_cdp,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector_network,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsinspector_tracing,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsireact,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:mapbufferjni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_bridging,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:react_codegen_rncore,INTERFACE_INCLUDE_DIRECTORIES>
```

----------------------------------------

TITLE: CMake Project Initialization and Verbosity
DESCRIPTION: Sets the minimum required CMake version, enables verbose makefile output for detailed build logs, and defines the project name as `fantom_tester`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/tester/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

project(fantom_tester)
```

----------------------------------------

TITLE: Configure React Native Debug Library with CMake
DESCRIPTION: This CMake script defines and configures the `react_debug` object library. It sets the minimum CMake version, enables verbose makefiles, includes React Native common flags, glob C++ source files, specifies include directories, links against `log` and `folly_runtime`, and applies specific compile options for Fabric and pedantic warnings, adjusting for debug vs. release builds.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/debug/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_debug_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_debug OBJECT ${react_debug_SRC})

target_include_directories(react_debug PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_debug log folly_runtime)

target_compile_reactnative_options(react_debug PRIVATE ""Fabric"")
target_compile_options(react_debug PRIVATE -Wpedantic)
if(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(react_debug PUBLIC -DNDEBUG)
endif()
```

----------------------------------------

TITLE: Include React Native CMake Utility Files
DESCRIPTION: Incorporates external CMake utility scripts from React Native's Android and common directories. These scripts provide functionalities like shared object merging and React Native-specific build flags.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
```

----------------------------------------

TITLE: Configure CMake for React Native C++ Module
DESCRIPTION: This CMake script defines an object library named 'jserrorhandler' for a React Native project. It sets the minimum CMake version, enables verbose makefile output, includes React Native specific flags, gathers C++ source files, specifies public include directories, and links essential libraries such as JSI, Folly, MapBufferJNI, and ReactFeatureFlags. Finally, it applies React Native specific compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jserrorhandler/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB js_error_handler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        jserrorhandler
        OBJECT
        ${js_error_handler_SRC}
)
target_include_directories(jserrorhandler PUBLIC .)
target_link_libraries(jserrorhandler
        jsi
        folly_runtime
        mapbufferjni
        react_featureflags
)
target_compile_reactnative_options(jserrorhandler PRIVATE)
```

----------------------------------------

TITLE: CMake Function to Add React Common Subdirectory
DESCRIPTION: Defines a CMake function `add_react_common_subdir` that takes a relative path. This function is used to include subdirectories from the `REACT_COMMON_DIR` into the current build, mapping them to a `src/` prefix.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/tester/CMakeLists.txt#_snippet_2

LANGUAGE: CMake
CODE:
```
function(add_react_common_subdir relative_path)
  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} src/${relative_path})
endfunction()
```

----------------------------------------

TITLE: Configure React Native C++ Module with CMake
DESCRIPTION: This CMake configuration defines how to build the 'react_codegen_OSSLibraryExampleSpec' C++ object library for a React Native project. It specifies the minimum CMake version, enables verbose makefiles, collects source files, adds the library, defines public include directories, links necessary libraries (fbjni, jsi, reactnative), and sets specific C++ compiler options including C++20 standard, exceptions, RTTI, and warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-test-library/android/src/main/jni/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB react_codegen_SRCS CONFIGURE_DEPENDS *.cpp react/renderer/components/OSSLibraryExampleSpec/*.cpp)

add_library(
  react_codegen_OSSLibraryExampleSpec
  OBJECT
  ${react_codegen_SRCS}
)

target_include_directories(react_codegen_OSSLibraryExampleSpec PUBLIC . react/renderer/components/OSSLibraryExampleSpec)

target_link_libraries(
  react_codegen_OSSLibraryExampleSpec
  fbjni
  jsi
  reactnative
)

target_compile_options(
  react_codegen_OSSLibraryExampleSpec
  PRIVATE
  -DLOG_TAG=\""ReactNative\""
  -fexceptions
  -frtti
  -std=c++20
  -Wall
)
```

----------------------------------------

TITLE: Note on libreactnative.so Dependency and Header Exposure
DESCRIPTION: This section provides a critical build directive regarding the `libreactnative.so` dependency. It specifies that the React Native Android Library (.aar) should expose its headers exclusively through this particular target, ensuring controlled and consistent header availability for dependent modules.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_12

LANGUAGE: CMake
CODE:
```
# libreactnative.so Dependency
#
# The React Native Android Library (the .aar) should expose headers only via this target.
```

----------------------------------------

TITLE: Include SoMerging Utilities in React Native Android Build
DESCRIPTION: This snippet includes a CMake utility file responsible for shared object (SO) merging. This utility is crucial for combining native libraries during the React Native Android build process, ensuring proper linking and deployment of native code.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_11

LANGUAGE: CMake
CODE:
```
include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
```

----------------------------------------

TITLE: Set CMake Minimum Version and Verbose Output
DESCRIPTION: Configures the minimum required CMake version for the project and enables verbose output during the build process for detailed information.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)
```

----------------------------------------

TITLE: Configure React Native Logger with CMake
DESCRIPTION: This CMakeLists.txt file defines the build process for a 'logger' object library. It ensures a minimum CMake version, enables verbose output, incorporates React Native's common CMake utilities, collects C++ source files, sets public include directories, links the library with 'glog', and applies specific React Native compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/logger/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB logger_SRC CONFIGURE_DEPENDS *.cpp)
add_library(logger OBJECT ${logger_SRC})

target_include_directories(logger PUBLIC .)

target_link_libraries(logger glog)
target_compile_reactnative_options(logger PRIVATE)
```

----------------------------------------

TITLE: Include Third-Party NDK Dependencies
DESCRIPTION: This block uses the `add_react_third_party_ndk_subdir` utility function to include various third-party libraries that are part of the NDK build. These libraries, such as glog, boost, folly, and googletest, provide essential functionalities for the React Native Android project.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_8

LANGUAGE: CMake
CODE:
```
add_react_third_party_ndk_subdir(glog)
add_react_third_party_ndk_subdir(boost)
add_react_third_party_ndk_subdir(double-conversion)
add_react_third_party_ndk_subdir(fast_float)
add_react_third_party_ndk_subdir(fmt)
add_react_third_party_ndk_subdir(folly)
add_react_third_party_ndk_subdir(googletest)
```

----------------------------------------

TITLE: Configure React Native DevTools Runtime Settings Module with CMake
DESCRIPTION: This CMake script defines the build process for the `react_nativemodule_devtoolsruntimesettings` module. It specifies the minimum CMake version, enables verbose output, includes common React Native CMake utilities, collects C++ source files, creates an object library, sets public include directories, links against the `react_devtoolsruntimesettingscxx` library, and applies React Native specific and pedantic compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/devtoolsruntimesettings/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_devtoolsruntimesettings_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_devtoolsruntimesettings OBJECT ${react_nativemodule_devtoolsruntimesettings_SRC})

target_include_directories(react_nativemodule_devtoolsruntimesettings PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_devtoolsruntimesettings
        react_devtoolsruntimesettingscxx
)
target_compile_reactnative_options(react_nativemodule_devtoolsruntimesettings PRIVATE ""ReactNative"")
target_compile_options(react_nativemodule_devtoolsruntimesettings PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Basic CSS Styling for Body and Heading
DESCRIPTION: This CSS snippet provides basic styling for the `body` and `h1` elements. It resets margins and padding, sets a base font size and family, defines a background color for the body, and centers a red heading with specific padding.
SOURCE: https://github.com/discord/react-native/blob/master/packages/rn-tester/js/assets/helloworld.html#_snippet_0

LANGUAGE: css
CODE:
```
body { margin: 0; padding: 0; font: 62.5% arial, sans-serif; background: #ccc; } h1 { padding: 45px; margin: 0; text-align: center; color: #f33; }
```

----------------------------------------

TITLE: Define Utility Functions for Adding Subdirectories
DESCRIPTION: These CMake functions simplify the process of adding subdirectories from different base paths within the React Native project structure. They abstract away the full path construction, making the main CMakeLists.txt cleaner and more readable when including various modules and third-party dependencies.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_6

LANGUAGE: CMake
CODE:
```
function(add_react_android_subdir relative_path)
  add_subdirectory(${REACT_ANDROID_DIR}/${relative_path} ReactAndroid/${relative_path})
endfunction()

function(add_react_build_subdir relative_path)
  add_subdirectory(${REACT_BUILD_DIR}/${relative_path} build/${relative_path})
endfunction()

function(add_react_third_party_ndk_subdir relative_path)
  add_react_build_subdir(third-party-ndk/${relative_path})
endfunction()

function(add_react_common_subdir relative_path)
  add_subdirectory(${REACT_COMMON_DIR}/${relative_path} ReactCommon/${relative_path})
endfunction()
```

----------------------------------------

TITLE: Configure React Native Renderer Leak Checker CMake Build
DESCRIPTION: This CMake script configures the build for the `react_renderer_leakchecker` static library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers C++ source files, defines the static library, specifies public include directories, links required libraries (glog, react_renderer_core, runtimeexecutor), and applies specific compilation options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/leakchecker/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_leakchecker_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_leakchecker STATIC ${react_renderer_leakchecker_SRC})

target_include_directories(react_renderer_leakchecker PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_leakchecker
        glog
        react_renderer_core
        runtimeexecutor)
target_compile_reactnative_options(react_renderer_leakchecker PRIVATE ""Fabric"")
target_compile_options(react_renderer_leakchecker PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Set Compile Options for React Native Telemetry
DESCRIPTION: Applies specific compilation options to the `react_renderer_telemetry` library. This includes a private 'Fabric' option, likely related to React Native's new architecture, and `-Wpedantic`, which enforces strict adherence to the C++ standard for pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/telemetry/CMakeLists.txt#_snippet_4

LANGUAGE: CMake
CODE:
```
target_compile_reactnative_options(react_renderer_telemetry PRIVATE ""Fabric"")
target_compile_options(react_renderer_telemetry PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Discovering Source Files and Defining Executable
DESCRIPTION: Uses `file(GLOB)` to find all `.cpp` and `.h` files within the `src/` directory and its subdirectories, storing them in the `SOURCES` variable. Then, it defines an executable target named `fantom_tester` using these discovered source files.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/tester/CMakeLists.txt#_snippet_4

LANGUAGE: CMake
CODE:
```
file(GLOB SOURCES ""src/*.cpp"" ""src/*.h"")
add_executable(fantom_tester ${SOURCES})
```

----------------------------------------

TITLE: Configure React Native Feature Flags Module with CMake
DESCRIPTION: This CMake snippet defines the build process for the `react_nativemodule_featureflags` library. It sets the minimum CMake version, enables verbose output, includes common React Native flags, identifies source files, adds the library, specifies include directories, links essential React Native libraries (codegen, cxxreact, featureflags), and applies specific compile options for React Native and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/nativemodule/featureflags/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_nativemodule_featureflags_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_nativemodule_featureflags OBJECT ${react_nativemodule_featureflags_SRC})

target_include_directories(react_nativemodule_featureflags PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_nativemodule_featureflags
        react_codegen_rncore
        react_cxxreact
        react_featureflags
)
target_compile_reactnative_options(react_nativemodule_featureflags PRIVATE ""ReactNative"")
target_compile_options(react_nativemodule_featureflags PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure CMake for fmt Static Library in React Native
DESCRIPTION: This CMake configuration defines the minimum required version (3.13), enables verbose makefile output, and includes React Native specific flags from 'react-native-flags.cmake'. It then defines a static library named 'fmt' from 'src/format.cc', specifies its public include directories, and applies React Native compile options to it.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/fmt/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(fmt STATIC src/format.cc)

target_include_directories(fmt PUBLIC include)
target_compile_reactnative_options(fmt PRIVATE)
```

----------------------------------------

TITLE: Configure React Native Fabric UIManager with CMake
DESCRIPTION: This CMake configuration defines the build process for the `react_renderer_uimanager` object library, which is part of React Native's Fabric rendering system. It specifies the minimum CMake version, includes common React Native build flags, gathers source files, sets public include directories, and links a comprehensive list of internal React Native and third-party libraries like `glog`, `folly_runtime`, and `jsi`. Additionally, it applies specific compilation options, including a private ""Fabric"" option and suppresses certain warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/uimanager/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_uimanager_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_uimanager OBJECT ${react_renderer_uimanager_SRC})

target_include_directories(react_renderer_uimanager PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_uimanager
        glog
        folly_runtime
        jsi
        react_cxxreact
        react_debug
        react_featureflags
        react_renderer_componentregistry
        react_renderer_consistency
        react_renderer_uimanager_consistency
        react_renderer_core
        react_renderer_debug
        react_renderer_dom
        react_renderer_graphics
        react_renderer_leakchecker
        react_renderer_runtimescheduler
        react_renderer_mounting
        rrc_root
        rrc_view
        runtimeexecutor
)
target_compile_reactnative_options(react_renderer_uimanager PRIVATE ""Fabric"")
target_compile_options(react_renderer_uimanager PRIVATE -Wno-unused-local-typedef)
target_compile_options(react_renderer_uimanager PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure JSC Runtime Library with CMake
DESCRIPTION: This CMake configuration defines the `jscruntime` object library, specifying its source files, public include directories, and linking dependencies such as `jsc`, `jsi`, and `reactnative`. It also applies build-type specific compile options like `-DNDEBUG` for release builds and general optimizations like `-O3`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/jsc/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)

add_library(jscruntime
        OBJECT
        JSCRuntime.h
        JSCRuntime.cpp)

target_include_directories(jscruntime PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})
target_merge_so(jscruntime)

target_link_libraries(jscruntime
        jsc
        jsi
        reactnative)

if(NOT ${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(jscruntime PRIVATE -DNDEBUG)
endif()

target_compile_reactnative_options(jscruntime PRIVATE ""ReactNative"")
target_compile_options(jscruntime PRIVATE -O3 -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Configure CMake for React Native CallInvoker Library
DESCRIPTION: This CMake script sets the minimum required CMake version, enables verbose makefile output, includes common React Native build flags, and defines an INTERFACE library named 'callinvoker'. It then configures the include directories and compile options for this library, ensuring proper linking and compilation within the React Native project.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/callinvoker/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(callinvoker INTERFACE)

target_include_directories(callinvoker INTERFACE .)
target_compile_reactnative_options(callinvoker INTERFACE)
target_compile_options(callinvoker INTERFACE -Wpedantic)
```

----------------------------------------

TITLE: Legacy Test Runner Module Import Paths Configuration
DESCRIPTION: This JSON object defines the import paths for various legacy test runner modules used within the Discord React Native project. Each key represents a module name, and its corresponding value is the relative path to its JavaScript file, facilitating module resolution for the testing infrastructure.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/integration_test_runner.html#_snippet_0

LANGUAGE: JSON
CODE:
```
{
  ""imports"": {
    ""test_runner"": ""./legacy_test_runner/test_runner/test_runner.js"",
    ""accessibility_test_runner"": ""./legacy_test_runner/accessibility_test_runner/accessibility_test_runner.js"",
    ""application_test_runner"": ""./legacy_test_runner/application_test_runner/application_test_runner.js"",
    ""axe_core_test_runner"": ""./legacy_test_runner/axe_core_test_runner/axe_core_test_runner.js"",
    ""bindings_test_runner"": ""./legacy_test_runner/bindings_test_runner/bindings_test_runner.js"",
    ""console_test_runner"": ""./legacy_test_runner/console_test_runner/console_test_runner.js"",
    ""coverage_test_runner"": ""./legacy_test_runner/coverage_test_runner/coverage_test_runner.js"",
    ""cpu_profiler_test_runner"": ""./legacy_test_runner/cpu_profiler_test_runner/cpu_profiler_test_runner.js"",
    ""data_grid_test_runner"": ""./legacy_test_runner/data_grid_test_runner/data_grid_test_runner.js"",
    ""device_mode_test_runner"": ""./legacy_test_runner/device_mode_test_runner/device_mode_test_runner.js"",
    ""elements_test_runner"": ""./legacy_test_runner/elements_test_runner/elements_test_runner.js"",
    ""extensions_test_runner"": ""./legacy_test_runner/extensions_test_runner/extensions_test_runner.js"",
    ""heap_profiler_test_runner"": ""./legacy_test_runner/heap_profiler_test_runner/heap_profiler_test_runner.js"",
    ""layers_test_runner"": ""./legacy_test_runner/layers_test_runner/layers_test_runner.js"",
    ""network_test_runner"": ""./legacy_test_runner/network_test_runner/network_test_runner.js"",
    ""performance_test_runner"": ""./legacy_test_runner/performance_test_runner/performance_test_runner.js"",
    ""sdk_test_runner"": ""./legacy_test_runner/sdk_test_runner/sdk_test_runner.js"",
    ""security_test_runner"": ""./legacy_test_runner/security_test_runner/security_test_runner.js"",
    ""sources_test_runner"": ""./legacy_test_runner/sources_test_runner/sources_test_runner.js"",
    ""devtools/"": ""./""
  }
}
```

----------------------------------------

TITLE: Setting C++ Compile Options for Flipper Tester
DESCRIPTION: Applies specific C++ compile options to the `fantom_tester` target. These options include enabling all warnings (`-Wall`), treating warnings as errors (`-Werror`), enabling exceptions (`-fexceptions`), enabling Run-Time Type Information (`-frtti`), and setting the C++ standard to C++20 (`-std=c++20`). The `PRIVATE` keyword means these options only apply to `fantom_tester` itself.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/tester/CMakeLists.txt#_snippet_6

LANGUAGE: CMake
CODE:
```
target_compile_options(fantom_tester
  PRIVATE
    -Wall
    -Werror
    -fexceptions
    -frtti
    -std=c++20)
```

----------------------------------------

TITLE: Configure CMake for React Native Project
DESCRIPTION: This snippet sets up the basic CMake configuration for a React Native project, specifying the minimum required CMake version, enabling verbose makefile output, and configuring Yoga library optimizations by setting the build type to Release. This improves debug app performance at the cost of not being able to debug inside Yoga.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/yoga/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

# Yoga by default does not enable optimizations in debug builds. Enable -O2
# for all builds in RN for faster debug app performance (at the cost of not
# being able to debug inside Yoga)
set(CMAKE_BUILD_TYPE Release)

add_subdirectory(yoga)
```

----------------------------------------

TITLE: Define and Configure `jsctooling` Shared Library in CMake
DESCRIPTION: This CMake snippet defines the `jsctooling` shared library, which acts as an umbrella for various JavaScriptCore (JSC) related libraries in React Native Android. It merges object files from `jni_lib_merge_glue`, `jscinstance`, `jscruntime`, and `jscexecutor`, links against `reactnative` and `jsc`, and includes necessary directories. This library is specifically designed to be removed when Hermes is used as the JS engine, as indicated by `configureJsEnginePackagingOptions`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jsctooling/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

# jsctooling is a shared library where we merge all the jsc* related libraries.
#
# It acts as an 'umbrella' library and gets removed by RNGP (see `configureJsEnginePackagingOptions`)
# Please note that this library gets removed for users that opt to use Hermes as their JS engine.

add_library(jsctooling
        SHARED
        $<TARGET_OBJECTS:jni_lib_merge_glue>
        $<TARGET_OBJECTS:jscinstance>
        $<TARGET_OBJECTS:jscruntime>
        $<TARGET_OBJECTS:jscexecutor>
)
target_merge_so(jsctooling)
target_link_libraries(jsctooling
        PUBLIC
        reactnative
        jsc
)
target_include_directories(jsctooling
        PUBLIC
        $<TARGET_PROPERTY:jscexecutor,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jscruntime,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jscinstance,INTERFACE_INCLUDE_DIRECTORIES>
)
target_compile_reactnative_options(jsctooling PRIVATE)
```

----------------------------------------

TITLE: Configure CMake for React Native Renderer Observers Events Library
DESCRIPTION: This CMake script defines the build configuration for the `react_renderer_observers_events` object library. It sets the minimum required CMake version, enables verbose output, includes common React Native CMake utilities, glob-selects source files, specifies public include directories, links a comprehensive list of dependent React Native libraries, and applies specific compilation options such as '-Wpedantic' and 'Fabric' related flags.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/observers/events/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_observers_events_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_observers_events OBJECT ${react_renderer_observers_events_SRC})

target_include_directories(react_renderer_observers_events PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_observers_events
        react_debug
        react_performance_timeline
        react_timing
        react_renderer_core
        react_renderer_runtimescheduler
        react_featureflags
        react_renderer_uimanager
        react_utils)
target_compile_reactnative_options(react_renderer_observers_events PRIVATE ""Fabric"")
target_compile_options(react_renderer_observers_events PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Link Required Libraries for jscexecutor
DESCRIPTION: Links the `jscexecutor` library with its necessary dependencies, including the conditionally chosen unwinding library (`${LIB_UNWIND}`), `jscruntime`, `jsi`, and `reactnative`. It also applies React Native-specific compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#_snippet_4

LANGUAGE: CMake
CODE:
```
target_link_libraries(jscexecutor
        ${LIB_UNWIND}
        jscruntime
        jsi
        reactnative)
target_compile_reactnative_options(jscexecutor PRIVATE)
```

----------------------------------------

TITLE: Convert Project Paths to CMake Format
DESCRIPTION: This snippet ensures that various project-specific directory paths (ReactAndroid, ReactBuild, ReactCommon) are converted to CMake's internal path format, which uses forward slashes. This is crucial for cross-platform compatibility and correct path resolution within CMake scripts.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/CMakeLists.txt#_snippet_3

LANGUAGE: CMake
CODE:
```
file(TO_CMAKE_PATH ""${REACT_ANDROID_DIR}"" REACT_ANDROID_DIR)
file(TO_CMAKE_PATH ""${REACT_BUILD_DIR}"" REACT_BUILD_DIR)
file(TO_CMAKE_PATH ""${REACT_COMMON_DIR}"" REACT_COMMON_DIR)
```

----------------------------------------

TITLE: CLI Command: Set React Native Artifacts Version (Deprecated)
DESCRIPTION: Updates relevant native files in the `react-native` package to materialize a given release version. This command is deprecated and is a subset of `set-version`; `set-version` should be preferred. It is currently used only by test workflows and will be replaced in future.
SOURCE: https://github.com/discord/react-native/blob/master/scripts/releases/README.md#_snippet_2

LANGUAGE: APIDOC
CODE:
```
Command: set-rn-artifacts-version
Description: Updates relevant native files in the react-native package to materialize the given release version.
Status: Deprecated. Prefer 'set-version'. This entry point is a subset of 'set-version' and is used only by test workflows.
Usage: node set-rn-artifacts-version [version]
For more information on arguments, run: node set-rn-artifacts-version --help
```

----------------------------------------

TITLE: Run Danger PR Command for GitHub Pull Request Analysis
DESCRIPTION: This command demonstrates how to execute Danger against a specific GitHub pull request to test changes to the Danger setup. It requires navigating to the `packages/react-native-bots` directory, installing dependencies with `yarn`, and providing a `DANGER_GITHUB_API_TOKEN` along with the pull request URL.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-bots/README.md#_snippet_0

LANGUAGE: bash
CODE:
```
cd packages/react-native-bots && yarn
DANGER_GITHUB_API_TOKEN=ghp_<REDACTED> yarn danger pr https://github.com/facebook/react-native/pull/1234
```

----------------------------------------

TITLE: Run Code Analysis Bot Lint CI Command for GitHub PRs
DESCRIPTION: This command shows how to manually run the `lint-ci` process for the Code Analysis Bot against a GitHub pull request. It requires setting the `GITHUB_TOKEN` and `GITHUB_PR_NUMBER` environment variables before executing `yarn lint-ci`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-bots/README.md#_snippet_1

LANGUAGE: bash
CODE:
```
GITHUB_TOKEN=[ENV_ABOVE] GITHUB_PR_NUMBER=1234 yarn lint-ci
```

----------------------------------------

TITLE: Configure Include Paths for React Native Telemetry
DESCRIPTION: Adds the common React Native directory (`${REACT_COMMON_DIR}`) to the public include paths for the `react_renderer_telemetry` library. This makes shared header files from the React Native common components available during the compilation of this library.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/telemetry/CMakeLists.txt#_snippet_2

LANGUAGE: CMake
CODE:
```
target_include_directories(react_renderer_telemetry PUBLIC ${REACT_COMMON_DIR})
```

----------------------------------------

TITLE: Define Folly Library Compiler Flags
DESCRIPTION: Sets a collection of compiler flags (`folly_FLAGS`) specifically for the Folly library, enabling various features and optimizations, and addressing compatibility with different Android NDK API levels.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/third-party/folly/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
SET(folly_FLAGS
        -DFOLLY_NO_CONFIG=1
        -DFOLLY_HAVE_CLOCK_GETTIME=1
        -DFOLLY_USE_LIBCPP=1
        -DFOLLY_CFG_NO_COROUTINES=1
        -DFOLLY_MOBILE=1
        -DFOLLY_HAVE_RECVMMSG=1
        -DFOLLY_HAVE_PTHREAD=1
        # If APP_PLATFORM in Application.mk targets android-23 above, please comment
        # the following line. NDK uses GNU style stderror_r() after API 23.
        -DFOLLY_HAVE_XSI_STRERROR_R=1
        )
```

----------------------------------------

TITLE: CMake Configuration for React Native Bridgeless Hermes Library
DESCRIPTION: This CMake script defines the `bridgelesshermes` object library, a core component for React Native's bridgeless architecture. It specifies source files, public include directories, and links necessary dependencies such as `hermes-engine`, `jsi`, and `reactnative`. Debug-specific compile options are applied when building in Debug mode to enable the Hermes debugger.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/runtime/hermes/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE bridgeless_hermes_SRC CONFIGURE_DEPENDS *.cpp)
add_library(
        bridgelesshermes
        OBJECT
        ${bridgeless_hermes_SRC}
)
target_include_directories(bridgelesshermes PUBLIC .)

target_link_libraries(bridgelesshermes
        hermes-engine::libhermes
        hermes_executor_common
        hermes_inspector_modern
        jsi
        jsinspector
        reactnative
)

target_compile_reactnative_options(bridgelesshermes PRIVATE ""Fabric"")
if(${CMAKE_BUILD_TYPE} MATCHES Debug)
        target_compile_options(
                bridgelesshermes
                PRIVATE
                -DHERMES_ENABLE_DEBUGGER=1
        )
endif()
```

----------------------------------------

TITLE: Linking Libraries for Flipper Tester Executable
DESCRIPTION: Links the `fantom_tester` executable with the `yogacore` library. The `PUBLIC` keyword indicates that this dependency is also propagated to targets that link against `fantom_tester`.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native-fantom/tester/CMakeLists.txt#_snippet_5

LANGUAGE: CMake
CODE:
```
target_link_libraries(fantom_tester PUBLIC yogacore)
```

----------------------------------------

TITLE: Configure React Native New Architecture Defaults Library with CMake
DESCRIPTION: This CMake configuration defines the `react_newarchdefaults` library. It sets the minimum required CMake version, enables verbose makefile output, includes various React Native utility CMake files, gathers C++ source files, creates an object library, merges shared objects, specifies include directories, links against numerous React Native and JSI libraries, and applies React Native-specific compile options. This setup is crucial for integrating new architecture components into a React Native Android project.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/newarchdefaults/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_newarchdefaults_SRC CONFIGURE_DEPENDS *.cpp)

add_library(react_newarchdefaults OBJECT ${react_newarchdefaults_SRC})

target_merge_so(react_newarchdefaults)

target_include_directories(react_newarchdefaults PUBLIC .)

target_link_libraries(react_newarchdefaults
        fbjni
        fabricjni
        react_featureflagsjni
        react_nativemodule_core
        react_codegen_rncore
        react_cxxreactpackage
        react_nativemodule_defaults
        react_nativemodule_dom
        react_nativemodule_featureflags
        react_nativemodule_microtasks
        react_nativemodule_idlecallbacks
        jsi)

target_compile_reactnative_options(react_newarchdefaults PRIVATE ""ReactNative"")
```

----------------------------------------

TITLE: CMake Configuration for JNI Library Merging Glue
DESCRIPTION: This CMake snippet defines the `jni_lib_merge_glue` object library, which is crucial for enabling `.so` library merging in React Native OSS. It sets up the minimum CMake version, includes React Native flags, adds the `jni_lib_merge.c` source file, defines `JNI_MERGE_PRINT_ONLOAD`, and configures include directories, link libraries, and compile options for the glue library.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/first-party/jni-lib-merge/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(jni_lib_merge_glue OBJECT jni_lib_merge.c)

add_definitions(-DJNI_MERGE_PRINT_ONLOAD)

target_include_directories(jni_lib_merge_glue PUBLIC jni-lib-merge)

target_link_libraries(jni_lib_merge_glue PUBLIC log)
target_compile_options(jni_lib_merge_glue PRIVATE -frtti -fexceptions)
```

----------------------------------------

TITLE: Configure React Native Feature Flags Library with CMake
DESCRIPTION: This CMake script defines the build process for the `react_featureflags` object library. It sets the minimum required CMake version, includes common React Native build flags, gathers source files, specifies public include directories, links against `folly_runtime`, and applies React Native specific and pedantic compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/featureflags/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_featureflags_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_featureflags OBJECT ${react_featureflags_SRC})

target_include_directories(react_featureflags PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_featureflags folly_runtime)
target_compile_reactnative_options(react_featureflags PRIVATE ""ReactNative"")
target_compile_options(react_featureflags PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure Hermes Shared Library in CMake
DESCRIPTION: This CMake snippet configures the Hermes JavaScript engine as a shared library for Android builds. It sets the minimum CMake version, enables verbose makefile output, and imports the pre-built Hermes shared library, specifying its location relative to the current source directory for different Android ABIs.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/first-party/hermes/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_library(hermes SHARED IMPORTED GLOBAL)
set_target_properties(hermes
        PROPERTIES
        IMPORTED_LOCATION
        ${CMAKE_CURRENT_SOURCE_DIR}/jni/${ANDROID_ABI}/libhermes.so)
```

----------------------------------------

TITLE: Configure React Native Utility Library (react_utils) with CMake
DESCRIPTION: This CMake snippet defines the build configuration for the `react_utils` object library within a React Native project. It sets the minimum required CMake version, enables verbose output, includes common React Native flags, gathers source files, specifies public include directories, and links against dependencies such as `glog`, `jsireact`, and `react_debug`. Additionally, it applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/utils/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_utils_SRC CONFIGURE_DEPENDS *.cpp platform/android/react/utils/*.cpp)
add_library(react_utils OBJECT ${react_utils_SRC})

target_include_directories(react_utils
        PUBLIC
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
)

target_link_libraries(react_utils
        glog
        glog_init
        jsireact
        react_debug)
target_compile_reactnative_options(react_utils PRIVATE ""Fabric"")
target_compile_options(react_utils PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Renderer Scheduler Library with CMake
DESCRIPTION: This CMake script defines the build configuration for the 'react_renderer_scheduler' static library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, globs source files, adds the library, specifies public include directories, links against numerous React Native, Folly, and Yoga dependencies, and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/scheduler/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_scheduler_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_scheduler STATIC ${react_renderer_scheduler_SRC})

target_include_directories(react_renderer_scheduler PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_scheduler
        folly_runtime
        glog
        jsi
        react_debug
        react_featureflags
        react_performance_timeline
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mounting
        react_renderer_observers_events
        react_renderer_runtimescheduler
        react_renderer_uimanager
        react_utils
        rrc_root
        rrc_view
        yoga
)
target_compile_reactnative_options(react_renderer_scheduler PRIVATE ""Fabric"")
target_compile_options(react_renderer_scheduler PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Initialize CMake Project for React Native Telemetry
DESCRIPTION: Sets the minimum required CMake version to 3.13 and enables verbose output for the build process. This ensures compatibility with modern CMake features and provides detailed logs during compilation.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/telemetry/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)
```

----------------------------------------

TITLE: Configure React Native Performance Logger Library with CMake
DESCRIPTION: This CMake script defines the build process for the 'reactperflogger' library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, gathers source files from 'reactperflogger' and 'fusebox' directories, creates an object library, specifies public include directories, links against 'react_timing' and 'folly_runtime', and applies React Native specific and pedantic compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/reactperflogger/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB reactperflogger_SRC CONFIGURE_DEPENDS
        reactperflogger/*.cpp
        fusebox/*.cpp)
add_library(reactperflogger OBJECT ${reactperflogger_SRC})

target_include_directories(reactperflogger PUBLIC .)

target_link_libraries(reactperflogger
        react_timing
        folly_runtime
)
target_compile_reactnative_options(reactperflogger PRIVATE)
target_compile_options(reactperflogger PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Text Layout Manager Build with CMake
DESCRIPTION: This CMake script defines the build configuration for the `react_renderer_textlayoutmanager` component within React Native. It specifies the minimum CMake version, includes common React Native flags, gathers source files, defines an object library, sets public include directories, links necessary libraries (like glog, fbjni, folly_runtime, yoga), and applies specific compile options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/textlayoutmanager/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_textlayourmanager_SRC CONFIGURE_DEPENDS
        *.cpp
        platform/android/react/renderer/textlayoutmanager/*.cpp)

add_library(react_renderer_textlayoutmanager
        OBJECT
        ${react_renderer_textlayourmanager_SRC})

target_include_directories(react_renderer_textlayoutmanager
        PUBLIC
          .
          ${REACT_COMMON_DIR}
          ${CMAKE_CURRENT_SOURCE_DIR}/platform/android/
)

target_link_libraries(react_renderer_textlayoutmanager
        glog
        fbjni
        folly_runtime
        mapbufferjni
        react_debug
        react_renderer_attributedstring
        react_renderer_componentregistry
        react_renderer_core
        react_renderer_debug
        react_renderer_graphics
        react_renderer_mapbuffer
        react_renderer_mounting
        react_renderer_telemetry
        react_utils
        reactnativejni
        yoga
)
target_compile_reactnative_options(react_renderer_textlayoutmanager PRIVATE ""Fabric"")
target_compile_options(react_renderer_textlayoutmanager PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure reactnativejni CMake Library
DESCRIPTION: Defines the main `reactnativejni` object library, encompassing core JNI components for React Native. It specifies a comprehensive list of C++ source files, sets include paths, links to a wide array of libraries including Android, `react_cxxreact`, and `reactnativejni_common`, and applies compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jni/CMakeLists.txt#_snippet_1

LANGUAGE: CMake
CODE:
```
add_library(
        reactnativejni
        OBJECT
          CatalystInstanceImpl.cpp
          InspectorNetworkRequestListener.cpp
          JExecutor.cpp
          JInspector.cpp
          JMessageQueueThread.cpp
          JReactCxxErrorHandler.cpp
          JReactSoftExceptionLogger.cpp
          JRuntimeExecutor.cpp
          JRuntimeScheduler.cpp
          JSLoader.cpp
          JSLogging.cpp
          JavaModuleWrapper.cpp
          JniJSModulesUnbundle.cpp
          MethodInvoker.cpp
          ModuleRegistryBuilder.cpp
          OnLoad.cpp
          ReactInstanceManagerInspectorTarget.cpp
          SafeReleaseJniRef.cpp
)
target_merge_so(reactnativejni)

# TODO This should not be ../../
target_include_directories(reactnativejni PUBLIC ../../)

target_link_libraries(reactnativejni
        android
        callinvokerholder
        fbjni
        folly_runtime
        glog_init
        logger
        react_cxxreact
        react_renderer_runtimescheduler
        reactnativejni_common
        runtimeexecutor
        yoga
        )
target_compile_reactnative_options(reactnativejni PRIVATE)
target_compile_options(reactnativejni PRIVATE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Configure callinvokerholder CMake Library
DESCRIPTION: This snippet defines the `callinvokerholder` OBJECT library, specifying its source files and public include directories. It also links necessary dependencies like `fbjni`, `runtimeexecutor`, `callinvoker`, and `reactperfloggerjni`, and applies React Native specific compilation options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/turbomodule/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
add_library(
        callinvokerholder
        OBJECT
        ReactCommon/CallInvokerHolder.cpp
        ReactCommon/NativeMethodCallInvokerHolder.cpp
)

target_include_directories(callinvokerholder
        PUBLIC
        ${CMAKE_CURRENT_SOURCE_DIR}
        )

target_link_libraries(callinvokerholder
        fbjni
        runtimeexecutor
        callinvoker
        reactperfloggerjni)
target_compile_reactnative_options(callinvokerholder PRIVATE)
```

----------------------------------------

TITLE: Configure Hermes Tooling Shared Library in CMake
DESCRIPTION: This CMake snippet defines and configures the `hermestooling` shared library. It merges several Hermes-related object libraries, links against core React Native and JSI libraries, and specifies necessary include directories. This library serves as an 'umbrella' for Hermes components and is designed to be conditionally removed when JSC is used as the JavaScript engine.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/hermes/tooling/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

# hermestooling is a shared library where we merge all the hermes* related libraries.
#
# It acts as an 'umbrella' library and gets removed by RNGP (see `configureJsEnginePackagingOptions`)
# Please note that this library gets removed for users that opt to use JSC as their JS engine.

add_library(hermestooling
        SHARED
        $<TARGET_OBJECTS:bridgelesshermes>
        $<TARGET_OBJECTS:hermes_executor>
        $<TARGET_OBJECTS:hermes_executor_common>
        $<TARGET_OBJECTS:hermes_inspector_modern>
        $<TARGET_OBJECTS:hermesinstancejni>
        $<TARGET_OBJECTS:jni_lib_merge_glue>
        $<TARGET_OBJECTS:jsijniprofiler>
)
target_merge_so(hermestooling)
target_link_libraries(hermestooling
        PUBLIC
        reactnative
        jsi
        hermes-engine::libhermes
)
target_include_directories(hermestooling
        PUBLIC
        $<TARGET_PROPERTY:bridgelesshermes,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_executor,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_executor_common,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermes_inspector_modern,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:hermesinstancejni,INTERFACE_INCLUDE_DIRECTORIES>
        $<TARGET_PROPERTY:jsijniprofiler,INTERFACE_INCLUDE_DIRECTORIES>
)
target_compile_reactnative_options(hermestooling PRIVATE)
```

----------------------------------------

TITLE: Configure React Native Timing Library with CMake
DESCRIPTION: This CMake snippet sets up the build environment for a React Native project. It specifies the minimum required CMake version, enables verbose output for makefiles, includes common React Native build flags, and defines an interface library named `react_timing`. It then configures the include directories and compiler options for this library, including pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/timing/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(react_timing INTERFACE)

target_include_directories(react_timing INTERFACE ${REACT_COMMON_DIR})
target_compile_reactnative_options(react_timing INTERFACE)
target_compile_options(react_timing INTERFACE -Wpedantic)
```

----------------------------------------

TITLE: Configure CMake Project for React Native Runtime Executor Library
DESCRIPTION: This snippet defines the CMake build rules for the `runtimeexecutor` library. It sets the minimum CMake version, enables verbose makefiles, includes React Native specific flags, globs source files, creates an object library, specifies public include directories, links against the `jsi` library, and applies React Native and pedantic compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/runtimeexecutor/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB_RECURSE runtimeexecutor_SRC CONFIGURE_DEPENDS *.cpp *.h)

add_library(runtimeexecutor OBJECT ${runtimeexecutor_SRC})

target_include_directories(runtimeexecutor PUBLIC .)

target_link_libraries(runtimeexecutor jsi)
target_compile_reactnative_options(runtimeexecutor PRIVATE)
target_compile_options(runtimeexecutor PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native Performance Timeline Library with CMake
DESCRIPTION: This CMake configuration sets up the build process for the `react_performance_timeline` library. It specifies the minimum required CMake version, enables verbose makefiles, includes common React Native CMake utilities, gathers all `.cpp` source files, defines an object library, applies React Native specific and general compilation flags (`-Wpedantic`), sets public include directories, and links against several performance-related libraries.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/performance/timeline/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_performance_timeline_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_performance_timeline OBJECT ${react_performance_timeline_SRC})

target_compile_reactnative_options(react_performance_timeline PRIVATE ""ReactNative"")
target_compile_options(react_performance_timeline PRIVATE -Wpedantic)

target_include_directories(react_performance_timeline PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_performance_timeline
        jsinspector_tracing
        reactperflogger
        react_featureflags
        react_timing)
```

----------------------------------------

TITLE: Configure C++ React Native Package with CMake
DESCRIPTION: This CMake script defines an interface library named `react_cxxreactpackage`. It configures the necessary include directories, links against `fb` and `fbjni` libraries, and applies React Native-specific compilation options, including suppressing the `-Wno-unused-lambda-capture` warning.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/runtime/cxxreactpackage/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

#########################
###  cxxreactpackage  ###
#########################

add_library(react_cxxreactpackage INTERFACE)

target_include_directories(react_cxxreactpackage
        INTERFACE
        ${CMAKE_CURRENT_SOURCE_DIR}
)

target_link_libraries(react_cxxreactpackage
        INTERFACE
        fb
        fbjni)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
target_compile_reactnative_options(react_cxxreactpackage INTERFACE)
target_compile_options(react_cxxreactpackage INTERFACE -Wno-unused-lambda-capture)
```

----------------------------------------

TITLE: Configure JSI JNI Profiler Library with CMake
DESCRIPTION: This CMake script defines the build process for the `jsijniprofiler` library. It specifies the minimum required CMake version, collects C++ source files, incorporates React Native specific build utilities, and configures the library as an object library. It also applies React Native compilation flags, handles shared object merging, sets include paths, and links essential libraries such as Hermes, JSI, and the core React Native library.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/hermes/instrumentation/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB_RECURSE jsijniprofiler_SRC CONFIGURE_DEPENDS *.cpp)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(
        jsijniprofiler
        OBJECT
        ${jsijniprofiler_SRC}
)
target_compile_reactnative_options(jsijniprofiler PRIVATE)
target_merge_so(jsijniprofiler)

target_include_directories(jsijniprofiler PRIVATE .)

target_link_libraries(
      jsijniprofiler
      hermes-engine::libhermes
      jsi
      reactnative
)
```

----------------------------------------

TITLE: CMake Configuration for Hermes Executor Library
DESCRIPTION: This snippet configures the `hermes_executor` library using CMake. It sets the minimum required CMake version, enables verbose makefiles, gathers source files, includes utility modules, defines the library as an object library, merges shared objects, sets include directories, links necessary libraries (hermes_executor_common, hermes-engine, jsi, reactnative), and applies React Native specific compile options, including a debugger flag for debug builds.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/hermes/reactexecutor/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

file(GLOB_RECURSE hermes_executor_SRC CONFIGURE_DEPENDS *.cpp)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(hermes_executor
        OBJECT
        ${hermes_executor_SRC}
)
target_merge_so(hermes_executor)
target_include_directories(hermes_executor PRIVATE .)
target_link_libraries(
        hermes_executor
        hermes_executor_common
        hermes-engine::libhermes
        jsi
        reactnative
)
target_compile_reactnative_options(hermes_executor PRIVATE)
target_compile_options(hermes_executor PRIVATE $<$<CONFIG:Debug>:-DHERMES_ENABLE_DEBUGGER=1>)
```

----------------------------------------

TITLE: CMake Build Script for uimanagerjni Library
DESCRIPTION: This CMakeLists.txt defines the build process for the `uimanagerjni` object library. It specifies the minimum CMake version, includes various React Native CMake utilities, collects C++ source files, defines the library's objects, handles shared object merging, sets public include directories, and links a comprehensive list of required libraries such as `fbjni`, `jsi`, `folly_runtime`, and `yoga`. It also applies specific React Native compile options.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/uimanager/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
# Copyright (c) Meta Platforms, Inc. and affiliates.
#
# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_ANDROID_DIR}/src/main/jni/first-party/jni-lib-merge/SoMerging-utils.cmake)
include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB uimanagerjni_SRC CONFIGURE_DEPENDS ${CMAKE_CURRENT_SOURCE_DIR}/*.cpp)
add_library(uimanagerjni
        OBJECT
            ${uimanagerjni_SRC}
            $<TARGET_OBJECTS:react_renderer_graphics>
            $<TARGET_OBJECTS:rrc_legacyviewmanagerinterop>
            $<TARGET_OBJECTS:rrc_view>
)
target_merge_so(uimanagerjni)

target_include_directories(uimanagerjni PUBLIC ${CMAKE_CURRENT_SOURCE_DIR})

target_link_libraries(uimanagerjni
        bridgelessnativeviewconfig
        callinvokerholder
        fbjni
        folly_runtime
        glog
        glog_init
        jsi
        log
        react_renderer_componentregistry
        reactnativejni
        rrc_native
        yoga
)

target_compile_reactnative_options(uimanagerjni PRIVATE ""ReactNative"")
```

----------------------------------------

TITLE: Configure CMake for React Native Glog Initialization
DESCRIPTION: This CMake script sets up the build environment for a React Native project. It specifies the minimum CMake version, enables verbose output, adds C++ exception handling and frame pointer options, includes React Native specific flags, and defines an object library `glog_init` which links against `log` and `glog` libraries, and sets its public include directory.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/first-party/fbgloginit/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

add_compile_options(-fexceptions -fno-omit-frame-pointer)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

add_library(glog_init OBJECT glog_init.cpp)

target_include_directories(glog_init PUBLIC .)

target_link_libraries(glog_init log glog)
target_compile_reactnative_options(glog_init PRIVATE)
```

----------------------------------------

TITLE: Configure React Native MapBuffer CMake Build
DESCRIPTION: This CMake snippet configures the build process for the `react_renderer_mapbuffer` component. It sets the minimum CMake version, enables verbose makefiles, includes React Native common flags, globs C++ source files, creates an object library, defines public include directories, links against `glog`, `glog_init`, and `react_debug` libraries, and applies specific compilation options for Fabric and pedantic warnings.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/mapbuffer/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)
file(GLOB react_renderer_mapbuffer_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_mapbuffer OBJECT ${react_renderer_mapbuffer_SRC})

target_include_directories(react_renderer_mapbuffer PUBLIC ${REACT_COMMON_DIR})
target_link_libraries(react_renderer_mapbuffer glog glog_init react_debug)
target_compile_reactnative_options(react_renderer_mapbuffer PRIVATE ""Fabric"")
target_compile_options(react_renderer_mapbuffer PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Configure React Native DOM Renderer Build with CMake
DESCRIPTION: This CMake script configures the build process for the 'react_renderer_dom' component. It sets the minimum required CMake version, enables verbose makefiles, includes React Native specific flags, gathers all .cpp source files, creates an object library, specifies public include directories, links against core React Native renderer libraries, and applies specific compile options like '-Wpedantic' and 'Fabric' for compilation.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactCommon/react/renderer/dom/CMakeLists.txt#_snippet_0

LANGUAGE: CMake
CODE:
```
cmake_minimum_required(VERSION 3.13)
set(CMAKE_VERBOSE_MAKEFILE on)

include(${REACT_COMMON_DIR}/cmake-utils/react-native-flags.cmake)

file(GLOB react_renderer_dom_SRC CONFIGURE_DEPENDS *.cpp)
add_library(react_renderer_dom OBJECT ${react_renderer_dom_SRC})

target_include_directories(react_renderer_dom PUBLIC ${REACT_COMMON_DIR})

target_link_libraries(react_renderer_dom
        react_renderer_core
        react_renderer_graphics
        rrc_root
        rrc_text)
target_compile_reactnative_options(react_renderer_dom PRIVATE ""Fabric"")
target_compile_options(react_renderer_dom PRIVATE -Wpedantic)
```

----------------------------------------

TITLE: Placeholder for Invalid Property Rule
DESCRIPTION: This placeholder indicates the location where an invalid or missing property rule would be found. Its presence signifies that the rule is being ignored due to a structural or content issue.
SOURCE: https://github.com/discord/react-native/blob/master/packages/debugger-frontend/dist/third-party/front_end/models/issues_manager/descriptions/propertyRuleIssue.md#_snippet_0

LANGUAGE: text
CODE:
```
{PLACEHOLDER_property}
```

----------------------------------------

TITLE: Conditionally Link Unwind Library for C++ Exceptions
DESCRIPTION: Implements a patch, originally from Expo, to correctly link the C++ exception unwinding library based on the Android NDK version. For NDK versions less than 23, `libgcc.a` is used; otherwise, `libunwind.a` is used to prevent undefined `_Unwind_Resume` symbols and crashes.
SOURCE: https://github.com/discord/react-native/blob/master/packages/react-native/ReactAndroid/src/main/jni/react/jscexecutor/CMakeLists.txt#_snippet_3

LANGUAGE: CMake
CODE:
```
if(ANDROID_NDK_REVISION VERSION_LESS ""23.0.0"")
  set(LIB_UNWIND gcc)
else()
  set(LIB_UNWIND unwind)
endif()
```","react-native",""